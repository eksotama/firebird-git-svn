# 
#   The contents of this file are subject to the Mozilla Public
#   License Version 1.1 (the "License"); you may not use this file
#   except in compliance with the License. You may obtain a copy of
#   the License at http://www.mozilla.org/MPL/
#   Alternatively, the contents of this file may be used under the
#   terms of the GNU General Public License Version 2 or later (the
#   "GPL"), in which case the provisions of the GPL are applicable
#   instead of those above. You may obtain a copy of the Licence at
#   http://www.gnu.org/copyleft/gpl.html
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   Relevant for more details.
# 
#   This file was created by members of the firebird development team.
#   All individual contributions remain the Copyright (C) of those
#   individuals.  Contributors to this file are either listed here or
#   can be obtained from a CVS history command.
# 
#   All rights reserved.
#
#   Created by: Mark O'Donohue <mark.odonohue@ludwig.edu.au>
# 
#   Contributor(s):
# 
# 
#   $Id: Makefile.in.firebird,v 1.5 2001-08-13 08:14:38 skywalker Exp $
# 

ROOT=..

include     $(ROOT)/src/make.rules
include     $(ROOT)/src/make.defaults
include     $(ROOT)/src/make.platform
include     $(ROOT)/src/make.shared.variables

@SET_MAKE@

ISC_USER=	sysdba
ISC_PASSWORD=	masterkey

export ISC_USER
export ISC_PASSWORD
export INTERBASE
export FIREBIRD
export DYLD_FRAMEWORK_PATH
export LD_LIBRARY_PATH


dirs = alice burp dudley dsql extlib gpre intl isql journal jrd lock msgs \
		  pyxis qli remote super/remote utilities wal 


.PHONY: firebird super_firebird $(dirs)


firebird: phase1 phase2 phase3


#---------------------------------------------------------------------------
# Phase1: make a gpre_static from scratch so we can parse .e and .epp files
# to build the rest of the system.  It goes in two bits make a real simple
# gpre_boot one and use that to build a gpre_static one.  
#
# gpre_static has a fair bit more in it and we have now actually built most 
# of the libraries.  With gpre_static we now have enough to build gbak and 
# start restoring databases.
#
# if $(BIN)/gpre_static exists then phase1 is complete. phase1 does not then
# rebuild automatically gpre_static if some of it's dependancies change.  We
# only need on gpre_static to boot after we have one we don't care.
# (If you really want to rebuild it you need to remove the executable file
# $(BIN)/gpre_static).
# 
.PHONY: phase1 phase1_build jrd_boot gpre_boot gpre_static


phase1: $(GPRE_STATIC)

$(GPRE_STATIC):
	$(MAKE) phase1_build

phase1_build: jrd_boot gpre_boot build_alt_use_boot jrdlib_dependencies gpre_static

gpre_static : jrdlib_dependencies
	$(MAKE) -C gpre $@

build_alt_use_boot:		# Create header file so jrd/alt.cpp does not use security.
	$(MAKE) -C jrd $@	# Also 'hack' security to build dummy .o files
	$(MAKE) -C utilities $@

gpre_boot : jrd_boot
	$(MAKE) -C gpre $@

jrd_boot :
	$(MAKE) -C jrd $@




#--------------------------------------------------------------------------
#Phase2: We can now start build some of the static utilities needed to build
#  an empty database (lock manager and create_db).  Then we rebuild all the 
#  items we have built in the static library into a dynamic library.
#  (It's probably possible to directly build the dynamic library - but thats
#  for another day). We still don't have the security database stuff.
# 
# Phase2 is complete with the building of an isc4.gdb user store database
# in order to do that isql and gdef tools need to be built without security
# to do that a special alt_boot.o is inserted into the shared library.
# Again once isc4.gdb is built then were not too worried about the components
# (in fact some of them have to be rebuilt again to incorperate the security
# module)
#

.PHONY: create_db gds_lock_manager refDatabases

phase2 : $(ISC_GDB) 

$(ISC_GDB): utilities/isc4.sql utilities/isc4.gdl
	$(MAKE) phase2_build 

phase2_build: build_alt_use_boot create_db gds_lock_manager empty_db gbak_static \
        ref_databases jrdlib_main gfix gbak gdef msgs isql \
        isc4.gdb


create_db gds_drop gds_relay :
	$(MAKE) -C utilities $@

gsec:
	$(MAKE) -C utilities gsecx  # The x added since already a gsec in there.

gds_lock_manager :
	$(MAKE) -C lock $@

empty_db : create_db gds_lock_manager
	$(MAKE) -C refDatabases $@

gbak_static : empty_db
	$(MAKE) -C burp $@

ref_databases : gbak_static
	$(MAKE) -C refDatabases $@

jrdlib_dependencies : 
	$(MAKE) -C jrd $@
	$(MAKE) -C dsql $@
	$(MAKE) -C lock $@
	$(MAKE) -C remote $@
	$(MAKE) -C pipe $@
	$(MAKE) -C wal $@
	$(MAKE) -C gpre $@
	$(MAKE) -C utilities $@
	$(MAKE) -C fbutil $@

jrdlib_main: jrdlib_dependencies
	$(MAKE) -C jrd $@

isql:						# the interactive sequel query language tool
	$(MAKE) -C isql $@

gdef:
	$(MAKE) -C dudley $@   	# (dudley - hmmm will have to ask)

isc4.gdb: gdef isql 		# build the security database
	$(MAKE) -C utilities $@


#--------------------------------------------------------------------------
#Phase3: Now we start building the tools we are actually going to use
#  against the shared library.
#  an empty database (lock manager and create_db).  Then we rebuild all the 
#  items we have built in the static library into a dynamic library.
#  (It's probably possible to directly build the dynamic library - but thats
#  for another day). We still don't have the security database stuff.
# 
# Notes:
# mainly we need gdef and isql to be able to build isc4.gdb.  I wonder
# if we could reduce the tricky dependancy by restoring the isc4.gdb database
# earlier, then perhaps we could build the jrdlib in one step and include
# the security bits and pieces.


phase3: build_alt_use_main jrdlib_main sysdba_user \
	    gfix gbak gdef msgs isql $(INTL) locks qli inet_server  \
        gsplit gstat gds_relay gsec gds_drop gpre \
	    extlib msgs_intl includes examples

build_alt_use_main:		# alter header file so jrd/alt.cpp DOES use security.
	$(MAKE) -C jrd $@   # alter utilities to build the security objects
	$(MAKE) -C utilities $@


sysdba_user gstat:			# add sysdba user and build gstat program
	$(MAKE) -C utilities $@

gfix:     
	$(MAKE) -C alice $@   	# (alice - all-else )


gbak gsplit:
	$(MAKE) -C burp $@   	# (burp - backup and restore)

msgs msgs_intl:				# msg (local + international) files for errors etc.
	$(MAKE) -C msgs $@



intl:						# international character sets
	$(MAKE) -C intl $@

locks:						# the lock manager for classic server
	$(MAKE) -C lock all

qli:						# the query line interpreter (predates sql interface)
	$(MAKE) -C qli allx   

inet_server:				# the classic server
	$(MAKE) -C remote inet_server

gpre:					 	# c/c++ embedded SQL code precompiler
	$(MAKE) -C gpre $@


extlib:						# user define functions 
	$(MAKE) -C extlib all

includes:	include_generic # distribution include files (this one in this file)

examples: includes
	$(MAKE) -C v5_examples v5_examples






#---------------------------------------------------------------------------

# This target builds the include files for disttribution with the release
# Some of the files differ from the ones used internally to compile the
# software - mainly they are just flattened out to make the view simpler
# from an external point of view.

INCLUDE_DEST=	$(FIREBIRD)/include

include_generic: $(INCLUDE_DEST)/ib_util.h  \
				 $(INCLUDE_DEST)/gds.h \
                 $(INCLUDE_DEST)/ibase.h

# ib_util.h actually is a marker for a number of headers

# All these files are #includes in gds.h here we cat them all together 
# and remove the embedded #includes to make it simpler for external usage.

GDS_ExtraFiles = misc/gds_header.txt include/fb_types.h \
             jrd/ibase.h jrd/blr.h include/gen/iberror.h \
             jrd/gdsold.h include/gen/codes.h 

SRC_GDS_ExtraFiles = $(addprefix $(SRC_ROOT)/, $(GDS_ExtraFiles))

$(INCLUDE_DEST)/gds.h: $(SRC_GDS_ExtraFiles)
	$(CAT) $^ \
           | grep -v '^#include "../jrd/blr.h"' \
           | grep -v '^#include "fb_types.h"' \
           | grep -v '^#include "gen/iberror.h"' \
           | grep -v '^#include "iberror.h"' \
           | grep -v '^#include "gen/codes.h"' > $@


IBASE_ExtraFiles = jrd/blr.h include/gen/iberror.h
SRC_IBASE_ExtraFiles = $(addprefix $(SRC_ROOT)/, $(IBASE_ExtraFiles))

$(INCLUDE_DEST)/ibase.h: $(SRC_IBASE_ExtraFiles)
	$(CAT) $^ \
           | grep -v '^#include "../jrd/blr.h"' \
           | grep -v '^#include "fb_types.h"' \
           | grep -v '^#include "gen/iberror.h"' > $@


# Copy all the other headers to the distribution directory.  we use
# ib_util.h as the marker for all the files.  

OtherDistribHeaders = extlib/ib_util.h \
	               jrd/perf.h  \
	               jrd/blr.h \
	               include/gen/iberror.h

SRC_OtherDistribHeaders = $(addprefix $(SRC_ROOT)/, $(OtherDistribHeaders))

$(INCLUDE_DEST)/ib_util.h : $(SRC_OtherDistribHeaders)
	$(CP) $^ $(INCLUDE_DEST)/


# There are also gds*f and gds*ada header files around if someone 
# wants them.  You might need to hunt around in the old cvs tree for them.



#___________________________________________________________________________

# When the msgs.gdb dataabse has changed with new messages a number of header
# files need to be regenerated.  This is the target to do it.  These new 
# header files (placed in include/gen) then need to be committed since they
# are not generally rebuilt from scratch

rebuild_codes : 
	$(MAKE) -C jrd $@




#___________________________________________________________________________
# Install generic files.

CLASSIC_MiscFiles = firebird.xinetd
SUPER_MiscFiles =  firebird.init.d.generic firebird.init.d.mandrake README

INSTALL_MiscFiles = $(addprefix $(FIREBIRD)/misc/, $(CLASSIC_MiscFiles))
#INSTALL_MiscFiles = $(addprefix $(FIREBIRD)/misc/, $(SUPER_MiscFiles))


misc_files : $(INSTALL_MiscFiles)


$(FIREBIRD)/misc/% :: $(SRC_ROOT)/install/misc/%
	$(CP) $^ $@



#___________________________________________________________________________
# 

CLASSIC_ScriptFiles = CSchangeRunUser.sh CSrestoreRootRunUser.sh changeDBAPassword.sh
SUPER_ScriptFiles = SSchangeRunUser.sh SSrestoreRootRunUser.sh changeDBAPassword.sh


INSTALL_ScriptFiles = $(addprefix $(BIN)/, $(CLASSIC_ScriptFiles))
#INSTALL_ScriptFiles = $(addprefix $(BIN)/, $(SUPER_ScriptFiles))


script_files : $(INSTALL_ScriptFiles)


$(BIN)/% :: $(SRC_ROOT)/install/classic/%
	$(CP) $^ $@
	chmod ugo=rx $@

$(BIN)/% :: $(SRC_ROOT)/install/super/%
	$(CP) $^ $@
	chmod ugo=rx $@

$(BIN)/% :: $(SRC_ROOT)/install/misc/%
	$(CP) $^ $@
	chmod ugo=rx $@

# Just a note that some of the script files (xinetd/firebird etc) need to h
# have their paths changed in their shell scripts.
#___________________________________________________________________________
# 



installx:
	$(MAKE) -C install $@

installclassic:
	$(SRC_ROOT)/install/classic/CSpreinstall.sh
#	$(SRC_ROOT)/install/classic/CSinstall.sh
#	$(SRC_ROOT)/install/classic/CSpostinstall.sh

builddist:
	$(MAKE) -C install $@


#___________________________________________________________________________
# This one needs some more work.

clean: clean_objs clean_libs clean_exes clean_dbs

clean_objs:
	-echo $(GDSLIB_Objects) | xargs rm -f
	-echo $(GDSLIB_SharedObjects) | xargs rm -f
	-rm */*\.o 
	-rm */*\.lo
	-rm */*\.j
	-rm */*\.bin 
	-rm */*\.d

clean_libs:
	-rm $(GDSLIB_LA)
	-rm $(JRD_BOOT)

clean_exes:
	-rm $(BIN)/*
#	-rm $(Executables)

clean_dbs:
	-rm */*\.gdb
	-rm */*\.lnk

#	rm -f $(GDSLIB_OBJECTS) $(GDSLIB_PHASE3_OBJECTS)

















#____________________ old stuff ________________________________________

# This is mostly stuff copied from the original build procedure I have left
# it here for reference until the super server build has been complete then
# it will be removed.




######################################################################
###########  Build process overview  #################################
#
#  Firebird2 has brought with it a new build process.  This extended
#    comment should help explain that process.  Keep in mind there are
#    a number of artifacts left in the makefiles from the previous build
#    processes.
#
#  The build process starts by building a bootstrap version of gpre.
#    This is possible because of a special version of gpre_meta.cpp,
#    gpre_meta_boot.cpp.  It is a copy of the gpre_meta.epp file with all
#    the embeded commands removed.  There are pregenerated copy of the
#    codes.h and related files in the source tree.  These are used for the
#    entire build process.  In the future we should check for the ability
#    to regenerate codes.h and friends (ie, a working FB install) and only
#    use the static files as a last resort.
#
#  The bootstrap version of gpre (gpre_boot) is used to build all the
#    engine files, except security.bin.  security.epp requires the security
#    database which is not available at this time.  The code in jrd/alt.cpp
#    that references the functions in security.bin has been #ifdef'ed out.
#    During this phase of the build process the limited version of alt.bin
#    is used.  The full version of alt.bin is compiled later in the build
#    process after the security database is available.  After the
#    (hopefully pending) redesign of FB security the security database
#    dependancies should go away.
#
#  The engine objects are placed in the jrd_static.a archive.  This archive
#    contains all the objects needed to create statically linked programs.
#    A fully functional version of gpre, gpre_static, is then generated
#    using jrd_static.a.  I choose to statically link the few utilities
#    required to build FB to avoid possible shared library symbol conflicts.
#
#  All of the aforementioned work is done in the
#    first phase of the compilation.  I called it the first phase because
#    none of the work (except codes.h and friends) requires database access.
#    Phase 2 builds all the tools necessary to compile the rest of FB.  Those
#    tools are gbak and the gds.so shared library.
#
#  The .epp files in gbak require the yachts.lnk database.  But the only
#    thing the database is used for is the metadata, so an empty database
#    will do the job.  The create_db program is a small c API utility that
#    creates an empty database.  This utility is statically linked.
#    Once there is an empty database gbak_static is built.  gbak_static is
#    used later on in the compilation process to restore build databases.
#
#  After gbak_static is built the gds.so library is built.  This library is
#    still missing the security functionality.  Note there is a dependancy
#    between gbak_static and gds.so because the shared library contains the
#    PYXIS code, which needs the forms.gdb database restored from forms.gbak.
#
#  Now we are on phase 3, building the actual DB tools.  This is as expected.
#    We build all tools and link them against the shared library, including
#    gpre, gbak, and the fully functional gds.so.
#
###########  And now on with the show............
#################################################################

ISC_USER=	sysdba
ISC_PASSWORD=	masterkey

#export ISC_USER
#export ISC_PASSWORD
#export INTERBASE=$(OBJS)/firebird
#export DYLD_FRAMEWORK_PATH
#export LD_LIBRARY_PATH


EXTERNAL_OBJECTS=	$(CSI_OBJS) dsql_objects lock.o $(PYXIS_OBJECTS) rem_objects $(INTL) wal_objects
EXTERNAL_P_OBJECTS=	$(CSI_P_OBJS) dsql_p_objects lock.bin $(PYXIS_P_OBJS) rem_p_objects $(INTL_P_OBJS) wal_p_objects


SRC_DIRS= alice burp dudley dsql extlib gpre intl isql journal jrd lock msgs \
		  pyxis qli remote super/remote utilities wal 

GPRE=		$(OBJS)/firebird/bin/gpre
GPRE_BOOT=	$(OBJS)/firebird/bin/gpre_boot
GPRE_STATIC=	$(OBJS)/firebird/bin/gpre_static
GBAK=		$(OBJS)/firebird/bin/gbak
GBAK_STATIC=	$(OBJS)/firebird/bin/gbak_static
GDEF=		$(OBJS)/firebird/bin/gdef
GFIX=		$(OBJS)/firebird/bin/gfix
HELP_GDB=	$(OBJS)/firebird/help/help.gdb
HELP_GBAK=	$(OBJS)/firebird/help/help.gbak
ISC_GDB=	$(OBJS)/firebird/isc4.gdb
ISC_GBAK=	$(OBJS)/firebird/bin/isc4.gbak
JRN_GBAK=	$(OBJS)/firebird/bin/journal.gbak
CMP=		cmp

CODES=source/jrd/codes

# removed examples 03-Aug-00 TMC
#interbase:	run_codes gds.h includes executables examples help msgs msgs_intl extlib

#added completed according to inprise tree
#FSG  093000

# The only difference between firebird and super_firebird is the executables
# target and in there super just had one more target "super_targets".  The 
# difference used to be done via a parameter passed into this makefile, but 
# I've put the change here to reduce the complexity of the build script files. 
# MOD 07-Apr-2001.

# I've taken run_codes out pending a decision on how to handle the codes thing
# I'm also using the target to add to as I bring the build system on line.
#firebird:	run_codes gds.h includes executables help msgs msgs_intl extlib $(POST_BUILD_TARGET) completed
firebirdx:	CFLAGS=$(CFLAGS_COMMON) $(DEV_CFLAGS) $(SUPER_FLAG)
firebirdx:	VERSION_FLAG=$(DEV_VERSION_FLAG)
firebirdx:	DEBUG_OBJECTS=$(DEV_DEBUG_OBJECTS)
firebirdx:	SUBMAKE_FLAGS:=	CFLAGS="$(CFLAGS)" \
				VERSION_FLAG="$(VERSION_FLAG)" \
				DEBUG_OBJECTS="$(DEBUG_OBJECTS)"
firebirdx:	phase1 phase2 phase3 completed

super_firebird:	run_codes gds.h includes super_executables help msgs msgs_intl extlib $(SS_POST_BUILD_TARGET) completed

installer:	$(PLATFORM_INSTALLER)
	echo "Installer created"

super_installer:	$(SUPER_PLATFORM_INSTALLER)
	echo "Super Installer created"

executables:	alice burp dudley gpre miscFiles $(INTL) isql locks \
	pyxis qli remote spit utilities \
	$(SHARED_AM) $(LINKABLE_LIBS)

super_executables:	alice burp dudley gpre superMiscFiles $(INTL) isql locks \
	super_targets pyxis qli remote spit utilities \
	$(SHARED_AM) $(LINKABLE_LIBS)

super_targets: 	s_run_codes s_alice s_burp s_dba s_security_c super_client super_server super_utils 

#phase1: ISC_USER = sysdba
#phase1: ISC_PASSWORD = masterkey
#phase1:	run_codes gds.h includes $(GPRE_BOOT) jrd_static.a $(GPRE_STATIC)
#
#phase2: ISC_USER = sysdba
#phase2: ISC_PASSWORD = masterkey
#phase2:	DYLD_FRAMEWORK_PATH:=$(FW_PATH)
#phase2:	manager empty_db $(GBAK_STATIC) $(GDSSHR)_PHASE_2
#
#phase3: DYLD_FRAMEWORK_PATH:=$(FW_PATH)
#phase3: INTERBASE:=$(OBJS)/firebird
#phase3: LD_LIBRARY_PATH:=$(OBJS)/firebird/lib
#phase3:	alice burp dudley msgs isql isc4.gdb security_c $(GDSSHR) sysdba_user \
#	$(INTL) locks qli remote spit utilities gpre miscFiles \
#	extlib msgs_intl examples help $(POST_BUILD_TARGET) completed

# removed pyxis from between locks and qli

# Run the codes program, thus generating codes.h, iberror.h, etc
# compare and copy the file only if the files are different
run_codes:	 force
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) run_codes
#	force $(CODES)
#	$(SH) '$(CD) $(OBJS)/jrd; ./codes'
#	$(SH) '$(CMP) source/jrd/iberror.h $(INCLUDE_DEST)iberror.h; if [ $$? != 0 ]; then $(CP) source/jrd/iberror.h $(INCLUDE_DEST)iberror.h; fi'



# NOTE: "journals" removed from "executables" as it currently doesn't
#	build and isn't used for V4 anyway.
# 1995-June-7 David Schnepper 




#added completed according to inprise tree
#FSG  093000
completed:	force
	$(QUIET_ECHO) "Build succeeded!"


#burp gbak:	$(GPRE_STATIC) msgs force
#burp gbak:	$(GPRE_STATIC) force
#	$(QUIET_ECHO) "Building GBAK..."
#	$(CD) $(OBJS)/burp && $(MAKE) $(SUBMAKE_FLAGS) burp

burplib.a:	burp
	$(QUIET_ECHO) "Building interbase/lib/gbaklib.a..."
	$(CD) $(OBJS)/burp && $(MAKE) $(SUBMAKE_FLAGS) libgbaklib.a

central_server gds_cserver:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GDS_CSERVER..."
	$(CD) $(OBJS) && $(MAKE) $(SUBMAKE_FLAGS) central_server

super_client:		force
	$(QUIET_ECHO) "Building super/client..."
	$(CD) $(OBJS) && $(MAKE) $(SUBMAKE_FLAGS) super_client

csu gcsu:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GCSU..."
	$(CD) $(OBJS)/csv && $(MAKE) $(SUBMAKE_FLAGS) csu

csvs:		central_server csu

gds_archive:	$(ACCESS_METHOD) $(GPRE_STATIC) force
	$(QUIET_ECHO) "Building GDS_ARCHIVE..."
	$(CD) $(OBJS)/journal && $(MAKE) $(SUBMAKE_FLAGS) gds_archive

#dba gstat:	$(GPRE_STATIC) force
#	$(QUIET_ECHO) "Building GSTAT..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) dba

dnet_server gds_dnet_server:	$(DNET_SERVER_LIB) $(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GDS_DNET_SERVER..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) dnet_server

dnet_server.a gds_dnet_server.a:	force
	$(QUIET_ECHO) "Building GDS_DNET_SERVER.A..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) dnet_server.a

#drop gds_drop:	force
#	$(QUIET_ECHO) "Building GDS_DROP..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) drop

#empty_db:	create_db force
#	$(QUIET_ECHO) "Creating the very first database..."
#	$(CD) $(OBJS)/dbs && $(MAKE) $(SUBMAKE_FLAGS) empty.gdb.dummy

#create_db:	force
#	$(QUIET_ECHO) "Building CREATE_DB..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) create_db

driver:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building DRIVER..."
	$(CD) $(OBJS)/wal && $(MAKE) $(SUBMAKE_FLAGS) driver

#dudley gdef:	$(GPRE_STATIC) msgs force
#dudley gdef:	$(GPRE_STATIC) force
#	$(QUIET_ECHO) "Building GDEF..."
#	$(CD) $(OBJS)/dudley && $(MAKE) $(SUBMAKE_FLAGS) dudley

#extlib:	force
#	$(QUIET_ECHO) "Building EXTLIB..."
#	$(CD) $(OBJS)/extlib && $(MAKE) $(SUBMAKE_FLAGS) ib_util ib_udf


# examples:	v5_examples force
#	$(QUIET_ECHO) "Building examples directory..."
#	$(CD) $(OBJS)/examples && $(MAKE) $(SUBMAKE_FLAGS) examples
#examples: PATH := $(OBJS)/firebird/bin:$(PATH)
#examples: LD_LIBRARY_PATH := $(OBJS)/firebird/lib
#examples: v5_examples force
#	echo $PATH
#	mkdir -p $(OBJS)/firebird/examples


jrd_static.a:	force
	$(QUIET_ECHO) "Building static DB engine..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) ALT_O="alt.o.ps1" ALT_BIN="alt.bin.ps1" SECURITY_MISC="" SECURITY_P_MISC="" $@

$(GBAK_STATIC):
	$(QUIET_ECHO) "Building static database restore utility..."
	$(CD) $(OBJS)/burp && $(MAKE) $(SUBMAKE_FLAGS) $@

gds.h:		force
	$(QUIET_ECHO) "Building GDS.H..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.h

codes.h:	force
	$(QUIET_ECHO) "Building CODES.H..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) codes.h

gds_server:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GDS_SERVER..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) gds_server

$(GDSSHR)_PHASE_2:	force
	$(QUIET_ECHO) "Building GDSSHR..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) ALT_O="alt.o.ps1" ALT_BIN="alt.bin.ps1" SECURITY_MISC="" SECURITY_P_MISC="" $(GDSSHR)

$(GDSSHR):	force
	$(QUIET_ECHO) "Building GDSSHR..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) DO_FORCE="force" $(GDSSHR)

gdslib.aix gdslib.aix_ppc:	$(GPRE) $(EXTERNAL_OBJECTS) force
	$(QUIET_ECHO) "Building GDSSHR..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gdsshr.a

gdslib.apollo:	$(GPRE) $(EXTERNAL_OBJECTS) pyxislib force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gdslib

gdslib.decosf gdslib.sgi gdslib.epson :	\
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.o

gdslib.linux:	\
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.linux

gdslib.dylib: \
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force 
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.dylib

gdslib.freebsd:	\
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.linux

gdslib.netbsd:	\
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.linux

gdslib.sco_ev:	\
	$(GPRE) $(EXTERNAL_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.O

gdslib.dg gdslib.m88k gdslib.unixware gdslib.ncr3000 gdslib.dg_x86:	\
	$(GPRE) $(EXTERNAL_P_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.0

gdslib.solaris:	\
	$(GPRE) $(EXTERNAL_P_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.so.solaris

gdslib.hp:	$(GPRE) $(EXTERNAL_P_OBJECTS) $(GDS_PYXIS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.sl

gdslib.imp:	$(GPRE) $(EXTERNAL_P_OBJECTS) force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds_s.a

gdslib.sco:	$(GPRE) $(EXTERNAL_P_OBJECTS) gds_pyxis.a force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds_s.a

gdslib.sunos4:	$(GPRE) $(EXTERNAL_P_OBJECTS) gds_pyxis.a force
	$(QUIET_ECHO) "Building GDSLIB..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gdslib.so.1.0

gds_pipe:	$(PIPE_LIBRARY) gds_b.a $(GPRE) force
	$(QUIET_ECHO) "Building GDS_PIPE..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds_pipe

gds_b.a:	force
	$(QUIET_ECHO) "Building GDS_B.A..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds_b.a

gds_pipe.a:	force
	$(QUIET_ECHO) "Building GDS_PIPE.A..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds_pipe.a

gds.a:		force
	$(QUIET_ECHO) "Building GDS.A..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.a

gds.a.solaris:		force
	$(QUIET_ECHO) "Building GDS.A.SOLARIS..."
	$(CD) $(OBJS)/jrd && $(MAKE) $(SUBMAKE_FLAGS) gds.a.solaris

#gpre:		security_c force
#	$(QUIET_ECHO) "Building GPRE..."
#	$(CD) $(OBJS)/gpre && $(MAKE) $(SUBMAKE_FLAGS) gpre

#security_c: force
#	$(QUIET_ECHO) "Building security.cpp ..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) security.cpp


#$(GPRE_BOOT) $(GPRE_STATIC): force
#	$(CD) $(OBJS)/gpre && $(MAKE) $(SUBMAKE_FLAGS) $@
# Run the codes program (for SUPERSERVER hierarchy), 
# thus generating codes.h, iberror.h, etc
s_run_codes:	
#	force $(CODES)
	$(QUIET_ECHO) "Running codes in super ..."
#	$(SH) '$(CD) source/super/jrd; $(CODES)'

s_security_c: force
	$(QUIET_ECHO) "Building security.c ..."
	$(CD) $(OBJS)/super/utilities && $(MAKE) $(SUBMAKE_FLAGS) security.c

s_alice: force
	$(QUIET_ECHO) "Building met.c ..."
	$(CD) $(OBJS)/super/alice && $(MAKE) $(SUBMAKE_FLAGS) met.c

s_burp:	force
	$(QUIET_ECHO) "Building restore.c and backup.c ..."
	$(CD) $(OBJS)/super/burp && $(MAKE) $(SUBMAKE_FLAGS) restore.c backup.c

s_dba:	force
	$(QUIET_ECHO) "Building dba.e ..."
	$(CD) $(OBJS)/super/utilities && $(MAKE) $(SUBMAKE_FLAGS) dba.c

#gsec:	$(GPRE_STATIC) force
#	$(QUIET_ECHO) "Building GSEC..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) gsec

#$(GPRE):
#	$(QUIET_ECHO) "Building bootstrap version of GPRE..."
#	$(CD) $(OBJS)/gpre && $(MAKE) $(SUBMAKE_FLAGS) gpre_boot

#help:		gbak force
#	$(QUIET_ECHO) "Building the QLI help database..."
#	$(CD) $(OBJS)/qli && $(MAKE) $(SUBMAKE_FLAGS) qli_help





#inet_server gds_inet_server:	$(INET_LIBRARY) force
#	$(QUIET_ECHO) "Building GDS_INET_SERVER..."
#	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) inet_server

inet_server.a gds_inet_server.a:	force
	$(QUIET_ECHO) "Building GDS_INET_SERVER.A..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) inet_server.a

iscinstall:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building ISCINSTALL..."
	$(CD) $(OBJS)/register && $(MAKE) $(SUBMAKE_FLAGS) iscinstall

#isql:		$(GPRE_STATIC) msgs force
#	$(QUIET_ECHO) "Building ISQL..."
#	$(CD) $(OBJS)/isql && $(MAKE) $(SUBMAKE_FLAGS) all

isqllib.a:	isql
	$(QUIET_ECHO) "Building interbase/lib/isqllib.a..."
	$(CD) $(OBJS)/isql && $(MAKE) $(SUBMAKE_FLAGS) libisqllib.a

gjrn:	$(ACCESS_METHOD) $(GPRE_STATIC) force
	$(QUIET_ECHO) "Building GJRN..."
	$(CD) $(OBJS)/journal && $(MAKE) $(SUBMAKE_FLAGS) gjrn

journals:	gjrn gds_archive gdef gfix gbak force
	$(QUIET_ECHO) "Building journal database backup file..."
	$(CD) $(OBJS)/journal && $(MAKE) $(SUBMAKE_FLAGS) journal.db
	-$(RM) $(JRN_GBAK)
	$(COMPRESS_JRN)
	$(SETUP_ISC_LOCAL) \
	$(GDEF) -z -r source/journal.gdl
	$(GFIX) -w sync journal.gdb
	$(GBAK) -z journal.gdb $(JRN_GBAK)
	$(CHMOD_6) $(JRN_GBAK)
	-$(RM) source/journal.gdl source/journal.gdb

#locks:		lock_print $(LOCK_MANAGER) force
#	$(QUIET_ECHO) "Building template of IPC configuration file..."
#	-$(CP) $(SOURCE)/lock/config_params $(OBJS)/firebird/isc_config

#lock_print gds_lock_print:	force
#	$(QUIET_ECHO) "Building GDS_LOCK_PRINT..."
#	$(CD) $(OBJS)/lock && $(MAKE) $(SUBMAKE_FLAGS) lock_print

#manager gds_lock_manager:	drop force
#	$(QUIET_ECHO) "Building GDS_LOCK_MANAGER..."
#	$(CD) $(OBJS)/lock && $(MAKE) $(SUBMAKE_FLAGS) manager


#msgs_intl:	force
#	$(QUIET_ECHO) "Building international message file(s)..."
#	$(CD) $(OBJS)/msgs && $(MAKE) $(SUBMAKE_FLAGS) locales.msg

pipe:		$(EXTERNAL_OBJECTS) $(PIPE)


#qli:		$(GPRE_STATIC) msgs force
#	$(QUIET_ECHO) "Building QLI..."
#	$(CD) $(OBJS)/qli && $(MAKE) $(SUBMAKE_FLAGS) qli

qlilib.a:	qli
	$(QUIET_ECHO) "Building interbase/lib/qlilib.a..."
	$(CD) $(OBJS)/qli && $(MAKE) $(SUBMAKE_FLAGS) libqlilib.a

register:	$(GPRE_STATIC) force
	$(QUIET_ECHO) "Building REGISTER..."
	$(CD) $(OBJS)/register && $(MAKE) $(SUBMAKE_FLAGS) register

#relay gds_relay:	force
#	$(QUIET_ECHO) "Building GDS_RELAY..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) relay


#remote:		inet_server $(DNET_SERVER) $(AMBX_SERVER)

#spit:	force
#	$(QUIET_ECHO) "Building GSPLIT..."
#	$(CD) $(OBJS)/burp && $(MAKE) $(SUBMAKE_FLAGS) spit

super_server:		force
	$(QUIET_ECHO) "Building super_server... "
	$(CD) $(OBJS)/super/remote && $(MAKE) $(SUBMAKE_FLAGS) super_server

super_utils:		force
	$(QUIET_ECHO) "Building super server utlities... "
	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) super_server_targets

#isc4.gdb: dudley isql force
#	$(QUIET_ECHO) "Building the ISC security database..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) isc4.gdb

#sysdba_user: force
#	$(QUIET_ECHO) "Adding SYSDBA to the ISC security database..."
#	$(CD) $(OBJS)/utilities && $(MAKE) $(SUBMAKE_FLAGS) sysdba_user

utilities:	dba relay gsec $(UTILITIES)

v4_examples:	gbak force
	$(QUIET_ECHO) "Building V4 examples directory..."
	$(CD) $(OBJS)/example4 && $(MAKE) $(SUBMAKE_FLAGS) v4_examples

v5_examples:	gbak force
	$(QUIET_ECHO) "Building V5 examples directory..."
	$(CD) $(OBJS)/example5 && $(MAKE) $(SUBMAKE_FLAGS) v5_examples

wal_print:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GDS_WAL_PRINT..."
	$(CD) $(OBJS)/wal && $(MAKE) $(SUBMAKE_FLAGS) wal_print

wal_writer:	$(ACCESS_METHOD) force
	$(QUIET_ECHO) "Building GDS_WAL_WRITER..."
	$(CD) $(OBJS)/wal && $(MAKE) $(SUBMAKE_FLAGS) wal_writer

csi_objects:
	$(QUIET_ECHO) "Building CSI OBJECTS..."
	$(CD) $(OBJS)/csv && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

dsql_objects:
	$(QUIET_ECHO) "Building DSQL OBJECTS..."
	$(CD) $(OBJS)/dsql && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

lock.o:
	$(QUIET_ECHO) "Building LOCK.O..."
	$(CD) $(OBJS)/lock && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

pyxis_objects:
	$(QUIET_ECHO) "Building PYXIS OBJECTS..."
	$(CD) $(OBJS)/pyxis && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

pyxlib.o:
	$(QUIET_ECHO) "Building PYXLIB.O..."
	$(CD) $(OBJS)/pyxis && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

rem_objects:
	$(QUIET_ECHO) "Building REMOTE OBJECTS..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

wal_objects:
	$(QUIET_ECHO) "Building WAL OBJECTS..."
	$(CD) $(OBJS)/wal && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

dsqllib:
	$(QUIET_ECHO) "Building DSQLLIB..."
	$(CD) $(OBJS)/dsql && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

pyxislib:
	$(QUIET_ECHO) "Building PYXISLIB..."
	$(CD) $(OBJS)/pyxis && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

csi_p_objs:
	$(QUIET_ECHO) "Building CSI PIC OBJECTS..."
	$(CD) $(OBJS)/csv && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

dsql_p_objects:
	$(QUIET_ECHO) "Building DSQL PIC OBJECTS..."
	$(CD) $(OBJS)/dsql && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

gds_pyxis.a:
	$(QUIET_ECHO) "Building GDS_PYXIS.A..."
	$(CD) $(OBJS)/pyxis && $(MAKE) $(SUBMAKE_FLAGS) libpyxis.a

lock.bin:
	$(QUIET_ECHO) "Building LOCK.BIN..."
	$(CD) $(OBJS)/lock && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

pyx_p_objects:
	$(QUIET_ECHO) "Building PYXIS PIC OBJECTS..."
	$(CD) $(OBJS)/pyxis && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

wal_p_objects:
	$(QUIET_ECHO) "Building WAL PIC OBJECTS..."
	$(CD) $(OBJS)/wal && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

rem_p_objects:
	$(QUIET_ECHO) "Building REMOTE PIC OBJECTS..."
	$(CD) $(OBJS)/remote && $(MAKE) $(SUBMAKE_FLAGS) $(@F)

darwin_installer_common: force
	$(QUIET_ECHO) "Building Firebird Installer..."
	mkdir -p $(OBJS)/firebird/installer_tmp
	$(MV) $(OBJS)/firebird/Firebird.framework $(OBJS)/firebird/installer_tmp
	$(CP) $(SOURCE)/sandbox/bellardo/darwin/makefile \
		$(OBJS)/firebird/installer_tmp
	ln -s $(OBJS)/firebird/bellardo/darwin \
		$(OBJS)/firebird/installer_tmp/files   
	ln -s ../.. $(OBJS)/firebird/installer_tmp/source   
	$(CD) $(OBJS)/firebird/installer_tmp && $(MAKE) install_package
	$(RM) -rf $(OBJS)/firebird/installer_tmp
	-$(RM) -rf $(OBJS)/firebird/Firebird.framework

darwin_installer: darwin_installer_common darwin_framework
super_darwin_installer: darwin_installer_common ss_darwin_framework

darwin_framework: force
	$(QUIET_ECHO) "Building Classic Firebird Framework..."
	$(RM) -rf $(OBJS)/firebird/Firebird2.framework
	$(MAKE) -f $(SOURCE)/sandbox/bellardo/darwin/FirebirdFramework.make \
		framework

ss_darwin_framework: force
	$(QUIET_ECHO) "Building Super Server Firebird Framework..."
	$(RM) -rf $(OBJS)/firebird/Firebird.framework
	$(MAKE) -f $(SOURCE)/sandbox/bellardo/darwin/FirebirdFramework.make \
		super_framework

# Note:	So far this target is only available on Solaris
makedepend:
	$(QUIET_ECHO) "Building component dependency files..."
	$(RM) \
	source/alice/depends.mak \
	source/burp/depends.mak \
	source/csv/depends.mak \
	source/dsql/depends.mak \
	source/dudley/depends.mak \
	source/gpre/depends.mak \
	source/intl/depends.mak \
	source/lock/depends.mak \
	source/isql/depends.mak \
	source/journal/depends.mak \
	source/jrd/depends.mak \
	source/msgs/depends.mak \
	source/qli/depends.mak \
	source/remote/depends.mak \
	source/utilities/depends.mak \
	source/wal/depends.mak 
	$(SH) '$(CD) source/alice; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/burp; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/csv; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/dsql; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/dudley; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/gpre; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/intl; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/lock; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/isql; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/journal; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/jrd; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/msgs; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/qli; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/remote; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/utilities; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 
	$(SH) '$(CD) source/wal; $(MAKE) CFLAGS="$(CFLAGS)" depends.mak' 

cleanx:	clean_executables
	-$(RM) \
	$(OBJS)/burp/gbaklib.a \
	$(OBJS)/super/client/gds.so.0 \
	$(OBJS)/examples/refresh \
	$(OBJS)/jrd/gdsshr.a $(OBJS)/jrd/gdslib $(OBJS)/jrd/gds.sl \
	$(OBJS)/jrd/gds_s.a $(OBJS)/jrd/gdsf_s.a \
	$(OBJS)/jrd/gds.so.0 \
	$(OBJS)/jrd/gdslib.so.1.0 $(OBJS)/jrd/gdslib.so.0.1 \
	$(OBJS)/jrd/gdsflib.so.0.0 \
	$(OBJS)/jrd/gds_b.a $(OBJS)/jrd/gds.a $(OBJS)/jrd/gds.a.solaris \
	$(OBJS)/jrd/gds_pipe.a \
	$(OBJS)/jrd/gdsmt.so.0 \
	$(OBJS)/super/jrd/gds_ss.a $(OBJS)/super/client/gdsmt.so.1 \
	$(OBJS)/super/client/gds.sl.1 \
	$(OBJS)/pyxis/libpyxis.a \
	$(OBJS)/qli/qlilib.a \
	$(OBJS)/remote/inet_server.a $(OBJS)/remote/dnet_server.a

clean_executablesx:
	-$(RM) \
	$(OBJS)/alice/alice \
	$(OBJS)/burp/burp \
	$(OBJS)/csv/central_server $(OBJS)/csv/csu \
	$(OBJS)/dudley/dudley \
	$(OBJS)/gpre/gpre \
	$(OBJS)/intl/intl \
	$(OBJS)/journal/gjrn $(OBJS)/journal/gds_archive \
	$(OBJS)/jrd/codes \
	$(OBJS)/lock/lock_print $(OBJS)/lock/manager \
	$(OBJS)/jrd/gds_pipe \
	$(OBJS)/msgs/build_file $(OBJS)/msgs/check_messages \
	$(OBJS)/pyxis/fred \
	$(OBJS)/qli/qli \
	$(OBJS)/register/iscinstall \
	$(OBJS)/remote/inet_server $(OBJS)/remote/dnet_server \
	$(OBJS)/remote/gds_server \
	$(OBJS)/super/remote/super_server \
	$(OBJS)/utilities/dba $(OBJS)/utilities/drop $(OBJS)/utilities/gsec \
	$(OBJS)/utilities/relay \
	$(OBJS)/utilities/ibmgr $(OBJS)/utilities/ibguard \
	$(OBJS)/wal/wal_writer

realcleanx: clean clean_obj clean_build_gdb
	$(QUIET_ECHO) "Removed compiled binaries and build files."

clean_objx:
	-for ND in ${SRC_DIRS} ; do \
		rm $${ND}/*.o ; \
		rm $${ND}/*.a ; \
		rm $${ND}/*.j ; \
		rm $${ND}/*.bin ; \
	done 
clean_build_gdbx:
	-$(RM) \
	source/example5/*.gdb \
	jrd/isc.gdb \
	jrd/yachts.gdb \
	msgs/msg.gdb



# The installations need to find a better and possibly linux
# specific home.  The tar installs should probably work with 
# other unix type of systems.

# I have seperated super and classic out since I needed different
# files in each case.

miscFiles:	force
	$(QUIET_ECHO) "Building miscellaneous install files..."
	mkdir -p $(OBJS)/firebird/misc
	-$(CP) $(SOURCE)/makefiles/install.unix $(OBJS)/firebird/install
	-$(CP) $(SOURCE)/makefiles/servers.isc $(OBJS)/firebird
	-$(CP) $(SOURCE)/makefiles/inetd.conf.unx $(OBJS)/firebird/inetd.conf.isc
	-$(CP) $(SOURCE)/makefiles/services.isc $(OBJS)/firebird
	-$(CP) $(SOURCE)/makefiles/sys.conf.isc $(OBJS)/firebird
	-$(CP) $(SOURCE)/sandbox/skywalker/install/misc/firebird.xinetd $(OBJS)/firebird/misc

superMiscFiles:	force
	$(QUIET_ECHO) "Building miscellaneous install files..."
	$(CP) source/$(SYSTEM)/install source/interbase
	-$(CP) source/$(SYSTEM)/servers.isc source/interbase
	$(CP) source/$(SYSTEM)/inetd.conf.isc source/interbase
	$(CP) source/$(SYSTEM)/original/services.isc source/interbase
	-$(CP) source/$(SYSTEM)/sys.conf.isc source/interbase
	mkdir -p source/interbase/misc
	$(CP) firebird/skywalker/install/misc/firebird.init.d.* source/interbase/misc

#install: force
#	make -f firebird/skywalker/install/Makefile install

runclassicinstall: force
	make -f firebird/skywalker/install/Makefile runclassicinstall

classicpackages: force
	make -f firebird/skywalker/install/Makefile classicpackages

classictarfile: force
	make -f firebird/skywalker/install/Makefile classictarfile

classicrpmfile: force
	make -f firebird/skywalker/install/Makefile classicrpmfile


superpackages: force
	make -f firebird/skywalker/install/Makefile superpackages

supertarfile: force
	make -f firebird/skywalker/install/Makefile supertarfile

superrpmfile: force
	make -f firebird/skywalker/install/Makefile superrpmfile


FORCE:

force:
