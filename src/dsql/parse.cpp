#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 *
 */

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

#define YYSTYPE		NOD
#ifdef DEBUG
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/

static FLD	field;
static FIL	file;
static NOD	field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;


#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#endif
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define LIMIT 488
#define INT64 489
#define SUBSTRING 490
#define CONNECTION_ID 491
#define TRANSACTION_ID 492
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    9,    9,
    9,    9,    9,   19,   19,   18,   18,   18,   29,   29,
   22,   30,   30,   30,   30,   30,   21,   21,   27,   27,
   23,   12,   12,   12,   12,   12,   12,   12,   33,   24,
   24,   24,   24,   34,   34,   34,   20,   20,   35,   35,
   35,   25,   25,   39,   26,   26,   41,   41,    6,   42,
   42,   44,   49,   49,   49,   46,   46,   46,   53,   53,
   54,   47,   47,   56,   56,   56,   56,   43,    5,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   61,   61,   64,   64,   64,   72,   80,   80,   80,   81,
   81,   82,   82,   83,   83,   87,   87,   71,   90,   90,
   92,   92,   93,   93,   96,   96,   97,   98,   98,   99,
  100,   69,   73,   70,   84,   84,  103,  104,  104,  106,
  106,  107,  107,  107,  107,  107,  105,  105,  108,  108,
  109,  109,  109,  109,  111,  111,  111,  111,  110,  110,
  115,  115,  114,   88,  116,  116,  117,  120,  121,  121,
  122,  118,  119,  119,  123,  123,  124,  124,  125,  125,
  125,   86,   86,   86,   66,  126,  126,  126,  127,  127,
  128,  128,  129,  129,  129,  135,   76,   76,  131,  131,
   94,   94,   89,  140,  141,   55,  132,  132,   95,   95,
   95,   95,   95,  133,  133,  146,  146,  147,  149,  149,
  149,  149,  149,  130,  148,  148,  152,  152,  152,  152,
  154,  155,  156,  151,  150,  150,  150,  150,  150,  157,
  158,  159,  159,  159,  159,   65,  164,  160,  160,  161,
  161,  165,  165,  166,  162,  162,  167,  167,  168,  169,
  169,  163,  163,  171,  171,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  174,
  175,  176,  177,  177,  178,  184,  180,  180,  180,  181,
  181,  181,  186,  186,  186,  186,  186,  186,  186,  186,
  182,  182,  182,  182,  179,  183,  183,  172,  172,  188,
  189,  189,  190,  190,  190,  190,   11,  192,  192,  192,
  193,  193,  193,  193,  193,  193,   68,  195,  198,  198,
  198,  199,  202,  207,  207,  208,  208,  209,  209,  137,
  197,   77,   79,  196,  196,   67,  212,  212,  212,  213,
  216,  216,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  214,  214,  215,
    2,  219,  219,  219,  219,  219,  219,  219,  225,  225,
  227,  227,  227,  227,  227,  227,  227,  220,  220,  228,
  228,  228,  228,  228,  228,  228,  224,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  230,  230,  232,  232,
  231,  229,  229,  229,  226,  226,  222,  223,  223,  234,
  234,  234,  234,  235,  235,  221,  236,  236,  237,  237,
    8,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,   91,   91,  134,  134,  241,  241,  244,  244,
  246,  246,   50,   50,  243,  243,  243,  243,  243,  243,
  243,  243,  251,  251,  242,  242,  242,  242,  252,  252,
   58,   58,   58,   52,   52,  248,  248,  248,  245,  245,
  245,  256,  256,  256,  255,  255,  254,  254,  254,  249,
  249,  259,  257,  257,  257,  258,  258,  250,  250,  250,
  250,  260,  260,   15,   15,   15,  262,  262,  262,    4,
   13,  264,  264,  265,  265,  266,  266,  261,  267,  267,
  268,  268,  269,  269,  269,  269,  270,  270,  271,  271,
  272,  272,  274,  274,  274,  275,  275,  275,  276,  276,
  276,  273,  278,  278,  278,  279,  279,  277,  277,  280,
  282,  282,  281,  281,  263,   14,  283,  283,  283,  284,
  284,  287,  287,  288,  288,   62,   62,   62,  285,  285,
  289,  289,  286,  200,  200,  201,  201,  293,  293,  294,
  294,  294,  290,  297,  297,  298,  298,  299,  299,  300,
  300,  301,  301,  303,  303,  304,  304,  210,  210,   28,
  211,  211,  211,  211,  211,  211,  211,  211,  204,  204,
  305,  305,  306,  306,  306,  205,  205,  203,  203,  291,
  291,  308,  308,  308,  206,  206,  309,  310,  310,  310,
  310,  310,  311,  311,  312,  312,  313,  313,  314,  314,
  314,  315,  315,   10,   10,  316,  316,    7,    7,  317,
  318,  319,   16,   16,  320,  321,  322,  322,  173,  295,
  295,    3,    3,  323,  323,  323,  325,  325,   58,  324,
  324,  326,  326,   31,   31,   75,   74,   74,  139,  139,
  139,  136,  101,  101,  101,  101,  328,  328,  328,  328,
  328,  328,  328,  328,  328,  328,  328,  329,  329,  329,
  329,  329,  329,  329,  329,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  340,  340,  330,  330,  331,  331,  331,  331,  332,
  332,  336,  336,  337,  337,  337,  337,  335,  338,  333,
  333,  341,  341,  339,  343,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,  145,  145,
  145,  344,  347,  347,  142,  142,  348,  348,  348,  348,
  348,  346,  346,  346,  346,  346,  342,  342,  342,  342,
  342,  342,  342,  342,  194,  349,  143,  143,   48,   48,
   17,   17,  218,  350,   51,  113,  247,  247,   85,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  307,  307,  351,  351,  351,  351,
  351,  351,  351,  351,  292,  292,  144,   45,  253,  112,
  138,  327,  153,  187,  240,   60,   57,  191,  102,   63,
  296,   32,   40,  302,  239,   36,   38,  185,   37,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    7,    8,
    6,    7,    5,    1,    2,    1,    2,    1,    1,    3,
    1,    1,    1,    1,    2,    2,    3,    0,    3,    0,
    1,    7,    8,    6,    7,    6,    7,    4,    3,    1,
    3,    3,    3,    2,    2,    2,    1,    3,    1,    2,
    2,    1,    3,    1,    1,    3,    1,    2,    2,    2,
    3,    8,    1,    1,    5,    0,    1,    3,    1,    3,
    2,    1,    3,    2,    3,    4,    2,    9,    2,    3,
    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    0,    0,    1,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    1,    1,    4,    3,    3,    3,    3,    1,    1,
    6,    3,    1,    3,    1,    3,    2,    1,    0,    2,
    3,    1,    0,    1,    1,    2,    3,    4,    0,    1,
    2,    0,    1,    1,    5,    3,    2,    0,    1,    3,
    1,    1,    6,    3,    2,    6,    2,    1,    2,    2,
    2,    0,    1,    1,    2,    0,    2,    0,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    2,    2,    4,
    1,    1,    2,    2,    2,    0,    1,    1,    1,    1,
    2,    3,    7,    6,    1,    1,    2,    2,    0,    3,
    3,    1,    2,    2,    2,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    3,    4,    1,    2,    2,    2,    3,    1,    1,
    1,    1,    2,    3,    1,    2,    1,    2,    2,    6,
    4,    7,    8,    6,    4,    2,    1,    3,    0,    2,
    4,    0,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    1,    3,    3,    6,    3,    0,    1,    2,    4,
    1,    3,    2,    2,    2,    1,    4,    1,    3,    0,
    1,    1,    1,    3,    3,    3,    7,    1,    1,    3,
    4,    8,    2,    1,    3,    1,    1,    6,    3,    0,
    0,    0,    0,    3,    0,    9,    1,    1,    0,    2,
    1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    5,    5,    5,    5,    5,    5,    2,    0,    4,
    2,    3,    3,    2,    2,    3,    3,    2,    1,    2,
    4,    3,    2,    2,    2,    2,    3,    1,    3,    3,
    3,    2,    2,    4,    4,    5,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    1,    1,    1,    0,    2,    2,    0,    1,    2,    2,
    2,    2,    2,    1,    3,    7,    1,    0,    1,    0,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    2,    2,    1,    1,    1,    1,    4,    5,    1,    3,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    4,    4,    6,    5,    3,    0,
    2,    2,    0,    3,    0,    4,    1,    5,    4,    1,
    4,    1,    2,    2,    1,    1,    1,    2,    2,    2,
    2,    1,    0,    3,    5,    1,    1,    2,    3,    1,
    2,    3,    0,    1,    1,    1,    5,    5,    6,    3,
    2,    1,    0,    2,    0,    1,    0,    3,    1,    0,
    1,    2,    1,    1,    1,    1,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    1,    2,    3,    1,    2,
    0,    2,    1,    1,    0,    1,    1,    1,    3,    2,
    3,    0,    1,    3,    4,    3,    1,    3,    4,    3,
    0,    1,    3,    3,    3,    1,    1,    0,    3,    0,
    2,    0,    9,    1,    1,    1,    1,    1,    3,    1,
    2,    3,    2,    1,    3,    1,    1,    6,    3,    3,
    2,    3,    0,    1,    3,    1,    1,    1,    2,    1,
    1,    1,    2,    1,    2,    1,    2,    0,    3,    0,
    1,    3,    1,    1,    3,    2,    0,    2,    0,    2,
    0,    3,    5,    0,    2,    0,    4,    1,    2,    1,
    1,    0,    1,    3,    2,    1,    1,    2,    1,    4,
    2,    1,    3,    8,    5,    1,    3,    1,    1,    4,
    4,    4,    1,    1,    5,    5,    1,    3,    3,    1,
    1,    7,    7,    5,    3,    0,    1,    1,    1,    2,
    0,    1,    1,    1,    0,    3,    1,    3,    1,    3,
    3,    1,    1,    3,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    1,    1,    5,    6,    3,    4,    5,    6,    3,
    4,    3,    4,    3,    4,    4,    5,    4,    4,    3,
    4,    3,    3,    8,    8,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    1,    3,    1,    1,    1,    1,
    1,    4,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    1,    1,    1,    1,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    1,    1,    1,    1,    2,    1,    4,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    6,    4,    6,    6,    4,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,  514,  515,  516,    0,  567,  658,  659,
  663,  664,  427,    0,    0,    0,    0,    0,    0,  371,
  522,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,   89,    0,  813,    0,   18,  811,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  441,    0,    0,   34,   31,   33,
    0,   32,    0,  863,    0,    0,    0,    0,   29,   62,
   64,    0,    0,    0,    0,    0,    0,    0,    0,  521,
  845,  584,    0,  585,    0,    0,    0,  865,  608,    0,
    0,    2,    0,    0,    0,    0,  414,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  415,  416,    0,  397,  856,    0,  860,
    0,  378,  862,    0,  375,    0,  610,  866,    0,  374,
    0,  520,  809,    0,  137,   97,    0,    0,   98,    0,
  689,  203,    0,  692,    0,  859,   96,  132,    0,   92,
    0,   99,  815,    0,   93,    0,   94,  869,    0,   95,
  133,  100,  576,  577,    0,  814,  812,    0,  857,   70,
    0,    0,  855,  449,  442,    0,  448,  443,  444,  451,
  445,  446,  447,  452,    0,   27,    0,   36,  684,   35,
    0,    0,    0,    0,    0,  852,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  775,
    0,  847,    0,  777,    0,    0,    0,  773,  789,  788,
  787,    0,    0,    0,    0,  779,  780,  781,  790,  791,
  807,  808,    0,    0,  587,    0,    0,  805,    0,  793,
    0,    0,  774,  671,  778,  761,  760,    0,    0,  588,
    0,    0,  762,  757,  758,  759,  792,    0,    0,    0,
    0,    0,    0,    0,  539,  528,    0,  531,  533,  534,
  535,  536,  542,  543,    0,  864,  609,    0,    0,  568,
    0,  566,    0,    0,    0,    0,  428,    0,    0,  340,
    0,  206,    0,  379,  372,  425,  426,    0,    0,    0,
    0,    0,    0,  388,    0,  347,  348,    0,  526,  524,
  810,    0,    0,    0,    0,    0,    0,    0,  140,  119,
    0,    0,   90,    0,  108,  107,    0,    0,    0,    0,
    0,    0,  848,   71,    0,    0,    0,  660,  661,  450,
    0,    0,  322,  323,  317,    0,  321,  785,    0,  687,
    0,    0,   24,    0,    0,  867,    0,   67,   65,   63,
   30,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,  794,    0,    0,    0,    0,    0,    0,
  795,  796,    0,    0,    0,    0,    0,  868,  286,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  861,  591,    0,    0,  565,    0,  540,    0,  537,
    0,  538,  563,    0,  558,    0,    0,  532,    0,  667,
    0,  502,    0,    0,    0,  572,  569,    0,  172,    0,
    0,  116,  433,  159,  160,    0,  431,    0,    0,    0,
    0,  434,    0,  429,  342,    0,  383,  385,  384,    0,
  386,    0,  380,  204,    0,    0,  252,    0,    0,    0,
    0,  392,  393,    0,  418,    0,    0,    0,    0,    0,
    0,    0,  352,  351,  437,    0,    0,  136,    0,    0,
  145,    0,  144,    0,  151,  134,    0,  149,  152,  153,
  141,    0,    0,  470,  506,  473,    0,  507,    0,    0,
  474,    0,    0,    0,  497,  510,  469,  492,  471,  472,
  455,  342,  453,  454,  456,    0,    0,  465,  466,  467,
  468,    0,    0,    0,    0,  691,  690,    0,  111,    0,
    0,  187,    0,    0,  340,    0,  206,    0,    0,   79,
    0,    0,  679,    0,    0,    0,    0,    0,    0,    0,
    0,  693,  697,  698,  699,  700,  701,  702,  703,  704,
  705,  706,  786,    0,    0,    0,  686,   25,    0,    0,
   41,   68,    0,    0,   23,    0,    0,  655,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  837,  838,  839,
  840,  841,  842,  843,  844,    0,    0,  771,  772,  836,
    0,    0,  851,  767,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  596,  597,    0,    0,  589,  592,
  776,  819,  518,    0,  817,  517,    0,  541,    0,  549,
  545,  544,    0,    0,    0,  560,  548,    0,    0,  665,
  666,    0,    0,    0,    0,    0,  579,    0,    0,  117,
    0,    0,    0,    0,    0,    0,  382,    0,    0,  343,
  387,  463,    0,  254,    0,  248,  250,  340,  853,  225,
    0,    0,  342,    0,    0,  195,  340,    0,    0,    0,
    0,  230,  224,  227,  228,  229,  391,  423,  422,  390,
  389,    0,    0,    0,    0,    0,    0,  350,    0,  342,
    0,  142,  146,    0,  150,    0,    0,  493,  494,  511,
    0,  508,    0,    0,  500,  498,  499,    0,    0,    0,
    0,  464,    0,    0,    0,    0,  501,  340,    0,  186,
    0,  189,  191,  192,    0,    0,    0,    0,    0,  206,
   74,    0,   81,   73,  849,  481,  482,    0,    0,    0,
  696,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  319,  325,  326,  324,  688,    0,    0,    0,    0,
    0,    0,    0,   50,   57,   59,    0,    0,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  206,    0,  820,    0,    0,  832,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  835,  782,    0,    0,    0,
    0,    0,    0,  611,    0,    0,    0,    0,    0,  519,
  818,  550,  559,  554,  553,    0,  564,  669,  668,  201,
  574,  575,  573,    0,  168,  162,  169,    0,  165,    0,
    0,  164,    0,  175,  156,  155,  816,  158,  157,  435,
    0,  210,  207,  209,  211,  212,  213,  381,  253,    0,
  197,  342,  199,  343,  194,  200,    0,    0,  231,    0,
  394,  395,  342,  340,  343,    0,    0,    0,  368,    0,
  183,  184,  143,    0,    0,    0,    0,    0,    0,  509,
    0,    0,  342,  343,    0,  459,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  185,    0,    0,
    0,    0,  329,    0,   78,    0,    0,    0,    0,   82,
   80,    0,    0,  854,  662,    0,    0,  707,    0,    0,
    0,  733,  732,    0,    0,    0,  740,  750,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  695,    0,
   61,   54,   55,   60,   56,    0,    0,   19,    0,    0,
    0,   39,    0,    0,    0,  673,  656,    0,  672,    0,
    0,    0,    0,  826,  825,    0,    0,  822,  821,    0,
  830,  829,  828,  827,  824,  823,    0,    0,    0,  599,
    0,  606,    0,  604,  600,    0,  617,  613,  615,    0,
    0,    0,    0,  556,  557,  561,    0,    0,    0,    0,
    0,    0,  176,    0,    0,    0,    0,  257,    0,    0,
    0,  232,    0,  419,  420,  396,    0,    0,    0,    0,
    0,    0,  342,  439,  343,  850,  154,    0,    0,  476,
    0,  475,  512,    0,  504,    0,    0,    0,  457,    0,
  484,    0,    0,  486,  489,  491,    0,    0,  106,    0,
  190,  342,    0,    0,  341,    0,   91,    0,  104,    0,
   87,    0,    0,    0,    0,    0,  748,  749,    0,    0,
    0,    0,  806,  797,  800,  798,    0,    0,  799,  751,
    0,    0,    0,    0,    0,    0,    0,  741,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   53,   58,   51,   52,   20,  677,  678,
    0,  675,  682,  683,  680,    0,  654,    0,    0,  205,
  831,  833,  834,    0,    0,  602,    0,    0,    0,  621,
  624,    0,    0,    0,    0,  170,  166,    0,    0,  181,
  177,  343,    0,    0,  343,  258,    0,    0,    0,  216,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  436,  478,    0,  479,    0,  121,    0,    0,    0,  125,
  127,  128,  129,  460,  462,  458,  488,  343,    0,    0,
    0,    0,  327,    0,  330,  342,   83,    0,    0,   85,
    0,    0,    0,    0,    0,    0,  753,    0,  752,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,  657,
    0,  605,    0,    0,    0,    0,  630,    0,  583,    0,
  161,  178,  131,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  261,  264,  260,
    0,    0,  269,  270,  271,  272,  275,  277,  247,    0,
  193,  217,    0,    0,    0,  222,  218,  221,    0,  343,
  366,  367,  363,  362,  365,  364,    0,  477,  505,  130,
  118,  126,  246,  113,  343,    0,    0,  344,  331,    0,
    0,   86,   75,    0,  719,  727,    0,  801,  804,  802,
  803,  720,  728,  723,  731,    0,    0,  721,  729,  722,
  730,  716,  724,  717,  725,  718,  726,  674,    0,    0,
  625,  622,    0,  638,  640,    0,  635,    0,  171,    0,
    0,    0,    0,  279,    0,    0,    0,  278,    0,  267,
  273,    0,  276,  262,    0,  265,    0,  308,  266,  196,
  219,  223,    0,    0,  234,  370,  346,    0,    0,    0,
  336,  337,    0,    0,   72,   88,    0,  755,  632,    0,
  639,    0,  259,  268,    0,    0,    0,    0,  274,    0,
  302,    0,  301,  316,    0,    0,    0,    0,  311,  263,
  309,    0,    0,  233,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  646,    0,    0,    0,    0,
  295,  294,  296,    0,  293,    0,  281,    0,    0,    0,
  285,    0,  315,  858,  314,  313,    0,    0,  220,    0,
    0,    0,  238,    0,  237,  339,    0,    0,    0,  105,
    0,  633,  648,  637,    0,    0,  649,    0,  645,    0,
    0,    0,    0,    0,    0,    0,    0,  303,  304,  310,
  312,    0,    0,  242,  241,  240,    0,  332,    0,  644,
    0,  651,  288,    0,    0,  280,  299,  298,  300,  297,
    0,    0,    0,  305,  245,  243,  244,    0,  754,    0,
    0,    0,  306,  282,    0,    0,    0,  650,  291,  283,
  653,
};
static short yydgoto[] = {                                      17,
   18,   19,   20,   21,   22,   23, 1324,   25,   26, 1325,
   28,   29,   30, 1326,   32, 1327,  573,   95,  382,  822,
 1028,   96,  600,  823,   97,  387,  605,  119,   98,   99,
  218,  652,  109,  824,  825,  159,  189,  826,  100,  101,
  389,   72,  200,  364,  269,  568,  968,  270,  783,  541,
  452,  762,  569,  570,  571,  970,  201, 1189,   64,  149,
   65,  195, 1570, 1137,  180,  185,  187,  190,  177,  166,
  169,  182,  192,  379,  219,  712,  476,  580,  908,  357,
  560,  956, 1129,  509,  665,  933,  461,  462,  491,  351,
  542,  944, 1248,  683,  903, 1249, 1250, 1251, 1252, 1253,
  581,  178,  167,  347,  516,  348,  349,  517,  518,  519,
  520, 1107,  898,  464,  465,  888,  886,  466,  892,  887,
 1077, 1216,  893,  894, 1082,  359,  771,  772,  773,  774,
  714,  700, 1228,  543,  716,  171,  480,  644,  272,  485,
 1047,  373,  273,  274,  275, 1229, 1230,  494, 1347, 1474,
  722,  723,  710,  724,  725,  726, 1475, 1476, 1545,  329,
  489, 1086, 1328,  155,  486,  487, 1087, 1088, 1329, 1330,
 1331, 1427, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1494,
 1532, 1462, 1535,  276,  419, 1496,  975, 1428, 1468, 1469,
 1505,  375,  376,  277,  961, 1135, 1263,  962,  963,  113,
  278, 1367,  368,  869, 1073, 1309, 1439, 1440, 1441, 1442,
  867,  338,  505,  740, 1104,  506,  738,  183,   50,  333,
  160,  126,  316,  146,  323,  152,  324,  334,  730,  335,
  502,  925,  147,  317,  473,  507, 1105,   85,  157,  204,
  544,  545,  702,  945,  703,  946,  947,  548,  549,  550,
  551,  938,  787,  552,  553,  554,  755,  555,  454,  752,
   34,   35,   36,   52,  162,  340,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  671,  444,  876, 1076,  445,
  446,  676,   37,  125,  312,   38,  455,  456,  687,  429,
 1214,  114,  279,  280,  281,  433,  653,  654,  655,  656,
  861,  282, 1063, 1064, 1209, 1210,  283, 1307, 1486, 1408,
 1487, 1488, 1489, 1529, 1571, 1038,   39,   40,  369,   41,
   42,  451,  831, 1036, 1191, 1195,  174,  582,  583,  584,
  585,  586,  587,  588,  589,  590,  591,  592, 1157,  985,
  987, 1158,  417,  284,  285,  286,  642,  287, 1159,  197,
  636,
};
static short yysindex[] = {                                   2386,
  986, -197, 1125,   23,  -77,  -52, 3331, -139, 2120,  539,
  344, 1539, -197,  596,  484,  245,    0,  786,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -173,    0,    0,    0,
    0,    0,    0, 4614,  412,  483,  493,  245,  502,    0,
    0,  572, 1103,  614,  412,  621,  493,  541,  245,  502,
    0,  659,  681,    0,  -22,    0,  718,    0,    0,  833,
  751,    0,  245,  772,  412,  914,  751,  483,  493,  541,
  245,  502,  659,  681,    0,  493,  882,    0,    0,    0,
 1222,    0, 1222,    0,  950,  969,   64, 1329,    0,    0,
    0,  855,  245,  855,  978, 1014, 1022,  275, 2196,    0,
    0,    0, 5550,    0,  621, 1084, 1829,    0,    0, 1024,
  972,    0, 1178, -103, 1148,   14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  428,    0,    0, 1103,    0,
  -33,    0,    0, 1440,    0, 1386,    0,    0,  496,    0,
 1074,    0,    0, 1052,    0,    0,  851,    0,    0, 1254,
    0,    0, 1476,    0, 1103,    0,    0,    0, 1440,    0,
  -57,    0,    0, 1212,    0, 1234,    0,    0, 1222,    0,
    0,    0,    0,    0, 1220,    0,    0, 1113,    0,    0,
 1286, 1190,    0,    0,    0, 1113,    0,    0,    0,    0,
    0,    0,    0,    0, 2097,    0,  614,    0,    0,    0,
 -186, 1248, -200,  681,  797,    0, 1237, 1222, 1353, 1342,
 -186, 1263, -200, 1278, 1297, 1646, 1650, 1654, 1242,    0,
 1656,    0, 1671,    0, 1675, 1679, 1681,    0,    0,    0,
    0,    0, 1683, 1280, 1281,    0,    0,    0,    0,    0,
    0,    0, 6325, 6325,    0, 5779, 1269,    0, 1700,    0,
 2068, 1653,    0,    0,    0,    0,    0, 1425, 1706,    0,
 -131, 1705,    0,    0,    0,    0,    0, 1316,  483, 1392,
 1304,  535,  245, 1321,    0,    0, 1829,    0,    0,    0,
    0,    0,    0,    0,  614,    0,    0,  819, 1343,    0,
 1319,    0,  510, 1405,  658,   14,    0, 1477, 1091,    0,
  855,    0,  428,    0,    0,    0,    0,  855, 1352, -144,
 1296, -127, 1724,    0, 5319,    0,    0,  983,    0,    0,
    0, 1716, 1716, 1103, 1410, 1103, 1008,  851,    0,    0,
 6629,   80,    0, 1352,    0,    0, 1491,  -35, 1745,  245,
 1522,  483,    0,    0, 1748,  197, 4397,    0,    0,    0,
 1447, 1173,    0,    0,    0, 1747,    0,    0, 1083,    0,
  245, 1357,    0,  493, 1328,    0,   25,    0,    0,    0,
    0,  245,  461,  245,    0, 1474,  493, 1757, -186, 1402,
  725, 5864,  379,    0,  621, 6325,  984, 1029, 1145, 1898,
    0,    0,  618,  618,  596, 1155, 1767,    0,    0, 6007,
 1348, 6325, 6325, 6325, 6325, 6325, 6325,   16, 1362, 5864,
 1358,    0,    0,   50,   31,    0, -167,    0, -165,    0,
 -165,    0,    0, 1777,    0,   70, 1393,    0, 1762,    0,
   60,    0, 1546, 1546, 1784,    0,    0, 1450,    0,   85,
 1485,    0,    0,    0,    0, 1103,    0, 1716, 1716, 1716,
 1716,    0, 1796,    0,    0, 1564,    0,    0,    0, 1550,
    0, 6629,    0,    0, 6629, 1314,    0, 1440, 1588, 1399,
 5272,    0,    0,  378,    0, 1399, 1142, 1386,    0, 1456,
 1436, 1406,    0,    0,    0,  -74, 1482,    0, 1427,  541,
    0, 1103,    0, 1611,    0,    0, 1008,    0,    0,    0,
    0,   20, 1443,    0,    0,    0, 1445,    0, 1494, 1850,
    0, 1548, 1856,  -59,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1808,   54,    0,    0,    0,
    0,   15, 1860, 1862, 1856,    0,    0, 1640,    0, 1103,
 1103,    0, -144,  496,    0, 1524,    0, 1499, 1873,    0,
 4446,  177,    0, 1529, 1537, 1883, 4686, 1884, 4547, 6330,
  -25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1383, 1173,  614,    0,    0,  788, 1498,
    0,    0, 1465, -200,    0, 1613, 1892,    0, 1613,  788,
 1617, 1618,  493, 6325, 6325, 1677, 6325, 1899, 6325, 1901,
 1179, 6325, 6325, 6325, 6325, 6325, 6325,    0,    0,    0,
    0,    0,    0,    0,    0, 1621, 6325,    0,    0,    0,
 2068, 1430,    0,    0, 1663,  618,  618,  993,  993,  757,
   16, 1912, 1909,  732,    0,    0, 4686, 1626,    0,    0,
    0,    0,    0,  486,    0,    0, -104,    0, 1509,    0,
    0,    0,  245,  673,  245,    0,    0, 5864,  614,    0,
    0, 1348,  -22,  -22,  819,  614,    0, 1103, 1103,    0,
  339, 1427, 1427, 1500,  541,  658,    0, 1920, 1787,    0,
    0,    0, 1684,    0,  855,    0,    0,    0,    0,    0,
 1689, 1924,    0, 1550, 1696,    0,    0, 1624, 1630, 1222,
 1701,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  541,  855, 6565, 1601, 1604, 1605,    0,  541,    0,
 1192,    0,    0, 1574,    0,   40, 1579,    0,    0,    0,
  541,    0, 1850,   45,    0,    0,    0, 1702,   45, 1583,
   45,    0, 1964,  541,  541,  541,    0,    0, 1648,    0,
 1471,    0,    0,    0,  983, 1590,  245, 1483,   46,    0,
    0, 1970,    0,    0,    0,    0,    0,  197, 1557, 1343,
    0, 1343, 6269,  336, 6325, 6325, 4784, 1971,  331, 4866,
 6325, 4935,  756, 5019, 5172, 6042, 5254, 5407, 5489, 4686,
 4686,    0,    0,    0,    0,    0, 1328,  493,  502, 1328,
  659,   57, 1976,    0,    0,    0,  788, 1636,    0, -129,
 1655, 5864, 1655, 1977, 1976,  788,  453, 1703, 1301, 1320,
    0, 1333,    0, 1340, 6325,    0, 1366, 1387, 1635, 1642,
 1694, 1871, 6325,  790, 6325,    0,    0,  732, 1986, 5864,
  972,   16, 1641,    0, 1647, 1651, 1685, 1761, 1715,    0,
    0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
    0,    0,    0, 2004,    0,    0,    0, 1490,    0, 1716,
 1785,    0,  339,    0,    0,    0,    0,    0,    0,    0,
 4686,    0,    0,    0,    0,    0,    0,    0,    0, 1750,
    0,    0,    0,    0,    0,    0, 1222, 1222,    0, 2014,
    0,    0,    0,    0,    0, -143,  -85,  -69,    0, 1791,
    0,    0,    0, 1595,   23, 1555, 1637, 1684, 2028,    0,
 1427, 1568,    0,    0,  885,    0, 2013, 1595,  918,  541,
 2037, 2046, 2047, 1750, 1716, 1485, -144,    0, 1482,  596,
 1625, 1652,    0,   35,    0,  541, 1697, 1789, 4446,    0,
    0,  541, 1792,    0,    0, 2053, 2056,    0, 1108, 2068,
 2061,    0,    0, 2068, 2064, 2045,    0,    0, 1752, 2072,
 2068, 2076,  881, 2079, 2068, 2089, 6325, 6325, 1971, 6325,
 6104, 2093, 2068, 2095, 2101, 2068, 2105, 6325, 2068, 2107,
 2068, 2108, 2109, 2068, 2110, 2112, 2068, 2114,    0, 1894,
    0,    0,    0,    0,    0, 1830,  788,    0,  788,   57,
 1976,    0,  163,  163,   89,    0,    0, 1593,    0, 1977,
 1976, 2117,  453,    0,    0, 6629, 2123,    0,    0, 1996,
    0,    0,    0,    0,    0,    0, 2016, 1362, 2068,    0,
 2068,    0, 1627,    0,    0,  732,    0,    0,    0,   16,
 1708, 4686, 1678,    0,    0,    0, 1744, 1103, 1779, 1427,
 1782, 1427,    0,  381, 1731, 1900, 1750,    0, 6325, 1897,
 1772,    0, 4686,    0,    0,    0, 1801, 1810, 1811, 1813,
 1814, 1818,    0,    0,    0,    0,    0, 2154,   23,    0,
 1500,    0,    0,   45,    0, 1787, 1831,   45,    0,   45,
    0, 1684, 2167,    0,    0,    0, 1900, 1427,    0, 1485,
    0,    0, 5550, 1931,    0,  -92,    0, 2004,    0, 2172,
    0, 2174, 1103, -142, 2176, 1103,    0,    0, 6325, 1795,
 1795,  596,    0,    0,    0,    0, 2177, 1657,    0,    0,
 1795, 1795, 6325, 1795, 1795, 1823, 2068,    0,  923, 6325,
 2068, 1795, 1795, 1795, 1795, 2068, 1795, 1795, 1795, 1795,
 1795, 1795, 1833,    0,    0,    0,    0,    0,    0,    0,
 1786,    0,    0,    0,    0, 5864,    0,  453, 2117,    0,
    0,    0,    0, 1626, 5864,    0, 1184, 1941, 2178,    0,
    0,  -25, 2184, 1832, 1716,    0,    0, 1103, 1192,    0,
    0,    0,  614, 6683,    0,    0, 2068, 1546, 1897,    0,
  445,  245,  616, 1783, 1889, 1794, 1928, 1902, 1937, 1750,
    0,    0, 2199,    0, 2201,    0, 1895, 1546, 1831,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1192, 1791,
 1930, 1866,    0, 1590,    0,    0,    0, 1881, 1903,    0,
 1684, 1886, 2068, 2215, 2219, 6325,    0, 4138,    0, 2221,
 2223, 2068, 2224, 2225, 6325, 6325, 2068, 2226, 2234, 2240,
 2242, 2244, 2245, 2246, 2247, 2248, 2251,    0,  163,    0,
 1715,    0, 4686, 1348, 1708, 1427,    0,  712,    0, 1427,
    0,    0,    0, 6629,  412,  643, 2236, 1343, 2258, 1958,
 6325, 2241, 2263, 2250, 2252, 1966, 2253,    0,    0,    0,
 6699, 2256,    0,    0,    0,    0,    0,    0,    0, 2269,
    0,    0, 1973, 1978,  245,    0,    0,    0, 1222,    0,
    0,    0,    0,    0,    0,    0, 1900,    0,    0,    0,
    0,    0,    0,    0,    0,   42, 1362,    0,    0, 6325,
 1103,    0,    0, 1103,    0,    0,  790,    0,    0,    0,
    0,    0,    0,    0,    0, 2068, 2068,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1832,  -25,
    0,    0, 1087,    0,    0, 1948,    0, 2284,    0, 2270,
 2271,  493, 6325,    0, 1987, 4686, 1842,    0, 4686,    0,
    0,  104,    0,    0,  401,    0, -114,    0,    0,    0,
    0,    0, 1222, 1947,    0,    0,    0,   42, 2296,  732,
    0,    0, 1626, 2068,    0,    0, 1362,    0,    0, 1427,
    0,  625,    0,    0, 2350, 2039,  104,  632,    0,  640,
    0, 1041,    0,    0,  412, 1885,   23,  295,    0,    0,
    0, 1947,  -68,    0, 1960, 1963,  732, 2301,   42, 2006,
 1715, 2314, 1626, 2316,  245,    0, 2317, 2318,  384, 1311,
    0,    0,    0, 1950,    0, 2320,    0,  179, 1929, 2062,
    0,  104,    0,    0,    0,    0, 6683,  401,    0,  307,
  307, 2077,    0, 1923,    0,    0,  732,   42, 1832,    0,
 1715,    0,    0,    0,  625, 2341,    0,  483,    0, 1659,
   22, 2324, 1311, 2090, 2080, 6683, 6683,    0,    0,    0,
    0, 1925,  600,    0,    0,    0, 1255,    0, 1832,    0,
  483,    0,    0,  104, 2344,    0,    0,    0,    0,    0,
 1557, 6683, 2083,    0,    0,    0,    0, 4686,    0, 2348,
 2357, 1676,    0,    0, 6683,  -25,  483,    0,    0,    0,
    0,
};
static short yyrindex[] = {                                      0,
    0,  112,  442,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  229, 5724,    0,    0,    0, 2399,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  386,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  692,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2063,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2019,    0,    0,    0,
   53,    0,   53,    0,    0,    0,    0, 2021,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  740,    0,    0,    0,
 1416,    0,    0,    0,  116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -90,    0,    0,    0,    0,  671,    0,
  813,    0,    0,    0,    0,    0, 1114, 3870,    0, 6711,
    0,    0,    0,    0,    0,    0,    0,    0,  -90,    0,
 -168,    0,    0, 2360,    0,    0,    0,    0, 2142,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  951,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1042,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  678,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1261,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77, 1495,    0,    0,    0,    0,    0,    0, 2086,    0,
  298,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  599,    0,    0, 1043,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1067,    0, 2131,    0,    0,
    0,    0, 1158,    0,    0,    0,    0,    0, 2146,  435,
 5636,    0, 1166,    0,    0,    0,    0,  289,    0,    0,
    0, 1952, 1952,    0,    0,    0, 1180, 1838,    0,    0,
    0,    0,    0, 2146,    0,    0, 1194,    0,    0,    0,
    0,    0,    0,    0, 6474, 2022,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1195,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1223,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1241,    0,    0,
 6371,    0, 6371,    0,    0,    0, 6371, 6371, 6371,    0,
    0,    0, 2132, 2277, 6371,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  519,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  212,    0,
  212,    0,    0,  804,    0,  805,  888,    0,    0,    0,
  951,    0,  822,  822,  693,    0,    0,  349,    0, 3209,
   95,    0,    0,    0,    0,    0,    0, 1952, 1952, 1952,
 1952,    0,  127,    0,    0,    0,    0,    0,    0,   87,
    0,    0,    0,    0,    0,    0,    0, 2150,    0,    0,
    0,    0,    0, 2131,    0,    0,  908,    0,  660, 1944,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1259,    0,    0,    0,
    0, 1926, 1688,    0,    0,    0, 3955,    0,    0, 4011,
    0,    0, 4108,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1291, 1502,    0,    0,    0,
    0, 4214, 3983,    0, 4108,    0,    0,    0,    0,    0,
    0,    0,  435,  999,    0,    0,    0,    0, 2005,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,    0,    0,  100,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1096,    0,    0,    0, 1665, 2387, 2582, 1802, 1972,    0,
    0, 3606,  429,   52,    0,    0,    0,  543,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  326,    0,    0,    0,    0,    0,    0,
    0,    0,  830,  830,    0,    0,    0,    0,    0,    0,
 4407,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  257,    0,    0,    0,    0,    0,    0,    0,
 2376,    0,    0, 1039, 1417,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  293,  346,  366,    0,    0,    0,
 2652,    0,    0,    0,    0,    0, 4276,    0,    0,    0,
    0,    0, 4011,    0,    0,    0,    0,  173,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6597,    0,
    0,    0,    0,    0,    0,    0,    0, 2119,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1272, 1325,    0,    0,    0,    0,    0,    0,    0,
 1336,    0, 1336, 1341, 1345,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2074,  635,    0,
 3712,    0, 2075,    0, 2091, 2092,    0,    0,  716,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  359,    0,    0,    0,    0,    0, 1952,
 1961,    0, 4421,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2153,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1360,
    0,    0,    0,    0,    0,    0,    0, 4288,    0,    0,
    0,    0,    0,    0,    0,    0,  932,    0,    0,    0,
    0,    0,    0, 2153, 1952, 1391,  435,    0, 2173, 5724,
 1396,   78,    0,    0,    0,    0, 6597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  677,
    0,    0,    0,  719,    0,    0,    0,    0,    0,    0,
 2533,    0, 2695,    0, 2737,    0,    0,    0,    0,    0,
    0,    0, 2779,    0,    0, 2843,    0,    0, 2892,    0,
 2956,    0,    0, 3045,    0,    0, 3094,    0,    0, 1175,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1272,
 1397,    0, 2001,  220,    0,    0,    0,    0,    0, 1426,
 1439, 1442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   47, 1560,    0,
 1690,    0,    0,    0,    0,  140,    0,    0,    0,    0,
    0,    0,  166,    0,    0,    0, 3008,    0,    0,    0,
 1980,    0,    0,    0,    0,    0, 2169,    0,    0, 1271,
    0,    0,    0,    0,    0,    0,  649,  661,  695,  697,
  766,  808,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  126,    0,    0,    0,
    0, 2382,    0,    0,    0,    0,    0,    0,    0, 1454,
    0,    0,    0,    0,    0,    0,    0, 1473,    0,    0,
    0,    0,    0,  114,    0,    0,    0,    0,    0,    0,
    0, 6371,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3158,    0, 3200,    0,
 3242,    0,    0,    0,    0, 3332,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1489,    0,
    0,    0,    0,  265,    0,    0, 2074,  430,  802,    0,
    0,  674,  747,  550, 1952,    0,    0,    0, 4250,    0,
    0,    0,    0,    0,    0,    0, 2401, 1252, 1570,    0,
 2131,    0,    0,    0,    0,    0,    0,    0,    0, 2153,
    0,    0,    0,    0,    0,    0,    0, 1493,  670,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0, 3355,    0,    0,    0,    0,    0,    0,    0,
    0, 3404,    0,    0,    0,    0, 3493,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  220,    0,
  169,    0,    0,    0,    0,    0,    0, 2403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  160,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3557, 3577,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2404, 3754,
    0,    0,    0,    0,    0, 2412,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2455, 1446,    0,    0,    0,    0,  227,  248,
    0,    0,  128, 2401,    0,    0,   47,    0,    0,    0,
    0, 2403,    0,    0,   51,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3425,    0,    0, 3783, 3797, 2074,  832,    0,    0,
   61,    0,  265,    0, 1011,    0,    0, 2417,    0,    0,
    0,    0,    0, 2406,    0,  171,    0, 2157,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  561,    0,   79,    0,
  169,    0,    0,    0, 2403,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2074,    0, 2404,    0,
    0,    0,    0,    0, 2408,    0,    0,    0,    0,    0,
    0,    0, 6715,    0,    0,    0,    0,    0,    0, 2428,
    0,    0,    0,    0,    0, 2981,    0,    0,    0,    0,
    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2470,    0,    0, 2471,
    0,    0,    0,   11,    0, 2472,    1,  194, -100, -504,
 1448,  202, -258, -454, 2463, 2249,    0,  -31,    0, 2254,
  -86,  -41,    0,  598, -838,  -19,  -56, -169, 2257,  917,
 1879,    0,    0,    0, 1070,    0,    0,  -34, 1508, -383,
  -23, -840, 1917, 1707, -279, 1518, 2409, -313,    0,  -51,
    0,  934,  -44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -581,   56, 1526, -457,  -11, -855,    0,
    0,    0,    0, -320, -495, -981, 1532, -314,  -42,    0,
 -445,    0,    0, -425, 1375,    0, 1245,    0,    0, -184,
 -564,   -8,    0,    0,    0,    0, 2149,    0, 1983, 2188,
 -151, 1554, -655,    0,    0,    0, -639,    0,    0,    0,
    0,    0,    0, 1622,    0,    0,    0, 1549, 2187, 2191,
    0, 1804,    0, -460, 1807,  -55, -330, -638,  -45,    0,
    0, -569, -651, -207, -618,    0, 1294, -885,    0, 1053,
 1293,    0, 2034,    0,    0,    0, 1058, 1065, 1031,  -96,
 2189, -841, -957,    0,    0, 1839,    0, 1458, -679,    0,
    0,    0, -232,    0,    0,    0,    0,    0,    0,    0,
    0,-1264,    0, 1267,    0, 1057,  987, 1123,    0, 1044,
    0,    0, 2179, -194,    0,    0,    0,    0, -900, -385,
 1420,    0, -411, -784, -589,-1222,    0, -251, 1116,  860,
 -494, 1994, 1790, 1602, 1307,    0,    0,   -1,    0,    0,
    0,    0,    0, 2229,    0,    0, 2265, 2070,    0,    0,
    0,    0,    0, 2255,    0,    0,    0,    0,  -15,    0,
    0,    0, -312, 1809, -309, 1451, -403,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2017,    0,    0, 1822,
    0,    0,    0, 2563,    0,    0,    0,    0, 2283,    0,
    0,    0,    0, 2158,    0, 2145,    0,    0,    0, 1918,
    0,    0,    0,    0,    0,  -88,    0, 1905,    0, -803,
    0, 1403,    0, 2164, -382, 2166,    0, -534, 1949,    0,
    0,  -54,    0, 1398,    0, 1300, -948,    0, 1299,    0,
 1076,    0, 1127,    0, 1033,    0,    0,    0, 2165,    0,
    0,    0, 1999, 1797, -925,    0, -121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3769, 1268,
 1616,    0,    0,    0,    0, -205, 2190, 2260, 1344,    0,
    0,
};
#define YYTABLESIZE 7193
static short yytable[] = {                                     173,
  121,  151,   69,  175,   68,  154,  220,  374,  172,  378,
   31,  170,  791,  741,  794,  179,  156,  658,  165,  616,
  377,  701,  510,  205,  704,  813,  213,  184,  684,  637,
  715,  666,  515,  208,  181,  310,  721,  209,  546,  680,
  186,  547,  482,  880,  215,  713,  227,  905,  229,  889,
 1058,  594,  574,  388,  764,  651,  210,  121, 1090,  746,
  627, 1554,  212,  388,   67,  211,  307,   67,  604, 1096,
  485,  228,  450,  485,  217,  664,  670,  328,  636,  267,
  907, 1438,  354,  935,  758,  967,  208,  629, 1117,  941,
  936,  556,  594,  629,  430,  594,  685, 1112,  112,  676,
 1027,  271,  361,  679,  884,  834,  288,  224, 1192,  289,
  594,  523, 1127,  675,  325,  580,  858,  670,  109,  627,
  670,  556, 1211,  182,  689,  123,  432,  620, 1225,  904,
  396, 1269,  431,  477,  628,  670,  328,  636,  611,  595,
  353,  393,  369,  490,  761,  208,  690,  692,  693,  694,
  695,  268,  629,  430,   84,  835,  309,  112,  676,  685,
  496,  267,  173,  472,  374,  631,  378, 1264,  871, 1258,
  523,  380,  122,  249,  580,  628, 1448,  377,  546,  439,
  595,  547,  182,  595,  123,  432,  620,  784, 1185,  383,
 1187, 1033, 1498,  628, 1470, 1097,  895,  896,  595,  383,
  685,  369,  515,  685, 1231,  106,  631,   67,  747,  627,
  355,  551,  669,  107,  123,  602, 1099,  756,  685,  483,
  457,   67, 1502,  326,  631,  268,  333,  735,  523,  287,
  557,  122, 1101, 1510,  776, 1265,  810, 1312,  667,   70,
   71,   67,  193,  385,  436, 1019, 1020,  334,  381, 1241,
  173,  413,  414,  173,  416,  913,  485,  294,   51,  449,
  386,  443,  453,   86,  736,  481, 1555,  124,   73, 1102,
  551,  313,  484,  923,  118,  173,  497, 1364,  483,  500,
  194, 1256,  930,  670,  172,  333,  757,  523,  438, 1572,
  697,  334,  355,  109,  109,  878, 1548,  485,  612, 1098,
  485,  327,  234,  485,  608,  620,  334, 1034,  356,  511,
  235,  513,  557,  561,   14,  485,  168,  566,  224,  711,
  314,  249, 1030,  562, 1270,  960, 1569, 1066,  564,  432,
  760, 1040, 1042,  226, 1155,  441, 1084, 1425, 1508,  485,
  670,  590,  601, 1231,  208,  353,  661,  438,  582,  598,
  942,  355,  430,  688,  838,  601, 1211, 1100,  581, 1185,
  606,  811,  609, 1369,   69,  354, 1313,  383,  737, 1339,
  594, 1340, 1031, 1398, 1511,  629,  978,  910,  629, 1193,
  594, 1041, 1138,  594,  432,  571,  916,  814,  674,  378,
  271,  707,  594,  208,  621,  618,  620,  670, 1357, 1436,
  815,  430, 1363,  342,  353,  123,  369,  582,  641, 1074,
  645,  646,  647,  648,  649,  641, 1154,  581,  271, 1301,
  618, 1222,  629,   84,  354,  629,  163,  164,  593,  623,
 1373,  691,  315,  432,  388,  717,  685,  954, 1217,  594,
  966,  485, 1534,  629,  571,  871,  879,  112,  594, 1037,
  122,  572,  122,  628, 1089, 1244,  580,  627,  595,  620,
 1075,  289,  763,  628,  905, 1094,  628,  676,  595,  593,
  623,  595,  182,  623,  973,  628,  153,  743,   66,  603,
  595,   66,  168,  618,  631, 1116,  742,  593,  623,  662,
  629,  906,  594,  378, 1435,  168,  485,  907,  897,  969,
  223,  627,  118,  662,  594,  208,  631, 1212,  173, 1437,
  226, 1026,  367,  430,  485,  627,  663,  172,  629,  636,
   69,  523,  628,  208,  620,  769,  770,  595, 1233,  670,
  485,  628,  328,  636,  629, 1207,  595,  670, 1199,  594,
  226,  173,  620,  685,  900,  432,  904,  897,  629,  636,
  816,  122,  438,  631,  551,  333,  355,  208,  333,  629,
  335, 1046,  631,  485,  168,  627,  485,  793,  620, 1080,
   69,  601,  786, 1447, 1133,  628,  334,  629, 1311,  334,
  595,  287,  620,  620, 1219,  784, 1221,  483, 1482,  628,
  636,  618,  595, 1095,  572,  233,  620,  810,  546, 1507,
 1200,  620,  839,  840,  335,  842,  631,  844,  636,  353,
  847,  848,  849,  850,  851,  852,  104,  551,  590,  335,
  551,   66,  628,  333,  173,  854, 1379,  595,  572,  354,
  173,  173, 1259,  449, 1128,   66,  551,  785,  111,  453,
  380,  443,  810,  877,  334, 1240, 1204, 1021,  360,  484,
 1024, 1426, 1062,  885,  885,   66, 1350,  546, 1481,  425,
  361,  620,  551, 1464,  426, 1401,  271,  333,  485,  124,
  349,  899, 1499,  626, 1260,  485,  742,  922,  924,  333,
 1500,  333,  617,  988, 1542,  318,  438,  969,  334,  582,
  355,  525,  570,  485,  357,  890,  356,  718, 1521,  581,
  334,  976,  334,  977,  571,  118,  102,  360, 1378,  989,
 1245, 1399,  226, 1465,  626,  627, 1255,  742,  711,  361,
  742, 1526,  811,  485, 1466, 1543,  571,  485,  124,  349,
  921,  555,  626,  546,  319,  742,  547,  929, 1400,  530,
  951,  952,  953,  353,  102,  964,  634,  593,  623,  939,
  525,  570,  336,  357,  226,  356,  627,  593, 1527,  711,
  593,  623,  711,  354, 1025,  359, 1276,  811,  891,  593,
  623, 1528, 1544,  721,  627,  919, 1022,  711,  719,  102,
  378,  817,  555,  979,  980,  984,   69,  634,  991,  993,
  995, 1156, 1003, 1006, 1009, 1011, 1014, 1017,  530, 1023,
  855,  619, 1341,  552,  562,  634, 1065,  358, 1370,  115,
 1403,  102,  527, 1300, 1409,  690,  593,  623,  439,  720,
  271,  202, 1361, 1343,  359,  593,  623, 1540, 1467,  578,
  337,  425,  423, 1050,  424,  226,  426,  629, 1190, 1190,
 1194, 1057,  619, 1059,  122, 1344,  320,  629, 1061,  857,
  629, 1458, 1345, 1410, 1460,  111, 1563, 1564,  459,  629,
  619,  620,  552,  562,  321,  202,  358,  460,  636,  593,
  623,  527,  148,  578,  620,  120,  226,  810,   14,  103,
  202,  593, 1574,  620,  623, 1492, 1346,  547,  578,  335,
  636, 1519,  335,  810, 1310, 1580,  820,  421,  322,  112,
 1566,  810,  173,  422,  618,  607,  629,  424,  906,  173,
  378,  172,  360,  386,  116,  629,  593,  623,  380,  440,
 1492,  117,  425,  423,  361,  424, 1123,  426, 1118,  349,
  620, 1549,  202,   69,  349, 1108,  468,  636,  742,  620,
  349,  546, 1141,  150,  662, 1480,  547,  342, 1145,  124,
  629,  424, 1567,  153, 1484, 1443,  596,  335,  357,  629,
  356, 1118,  158, 1558,  425,  423,  424,  424, 1404,  426,
  596,  870, 1091, 1092,  441,  461,  546, 1119,  596,  191,
  711,  161, 1480,  620,  111, 1166, 1167,  469, 1169, 1171,
  636,  442,  626, 1405,  596,  742, 1176, 1062,  742,   66,
  214,  335,  811, 1576,  546,  742,  629,  546,  742,  629,
 1122,  570,  742,  335,  626,  335,  173,  742,  811, 1139,
  742,  470, 1480,  546,  461, 1208,  811,  997,  614,  359,
  620,   69,   69,  570,  627, 1483,  742,  711,  208,  471,
  711,  320,  529,  885,  998, 1412,  360,  711,  596,  546,
  711, 1406, 1480,  863,  711, 1404,  627,  852,  361,  711,
  742,  626,  711,  742,  742,  634,  376,  864,  349,  421,
  626,  358,  378,  742,  168,  422,  874, 1227,  711,  208,
 1405,  176,  208, 1380, 1502,  118,  202,  634, 1413,  999,
  742,  865,  357,  875,  356,  685,  414,  208,   88, 1501,
  320,  529,  711,  627, 1190,  711,  711,   69, 1268, 1243,
  428, 1272,  627,  138,  626,  711,  817,  742, 1000,  188,
  619,  271,  685,  597,  202,  376,  596, 1449,  626,  742,
  852,  742,  711,  619,  634,   90,  783, 1273, 1406,  783,
  202,   94,  619,  634, 1450,  866,  552,  562,  578,  425,
  423, 1282,  424,  336,  426,  198,  627,  377, 1287,  711,
  421,  626,  202,  359,  742,  373,  422,  336,  173,  173,
  578,  711,  138,  711,  694,  336,  196,  172,  449,  147,
 1314,  552,  562,  885,  271, 1001, 1477,  634,  783,  619,
  818,  336, 1163, 1061,  318,  638,  425,  423,  619,  424,
 1349,  426,  421,  627,   91,  358,  711,  342,  422,  552,
  562,  199,  552,  562,   92,  694,  377,  371,  694,  846,
  425,  423,   40,  424,  373,  426,  819, 1517,  552,  562,
  547,  820,  203,  694, 1286,  268,  206,  821,  147,   93,
   48,  503,  619,  111,  343,  336,  344, 1493,  386,  378,
  173,  202,  504,  318,  552,  562,  619,  349,  148, 1208,
  852,  217, 1434, 1411, 1377,  547, 1547,  365,  349,  345,
  214,   38,  421, 1386, 1387,  370,  173,   66,  422,  168,
   43,   40, 1493,  216,  378,  449,  468,  622,  111,  619,
  463,   44,  202,  547,  346,  202,  547,   69,   45,   48,
  848,  852,  852,  852,  852,  852,  864,  852,  514, 1417,
  202,  214,  547, 1433,  214,  226,  208,  148,  208,  852,
  852,  852,  852,   46,   21, 1559,  208,  378, 1415,  214,
   38,  463,  624,  221,  463,  681, 1445,  469,  547, 1446,
   44, 1044,  425,  423,   46,  424, 1472,  426,  647,  463,
  121,  852,  222,  852,  706,  371,  459,  705, 1444,  440,
 1045,  425,  423,  230,  424,  460,  426,  173,  267, 1149,
 1455,  470,  225, 1048,  425,  423, 1461,  424,  478,  426,
 1049,  425,  423,   21,  424,  647,  426,  421,   47,  471,
  114,  479,  138,  422,  681,  345,   22,  231,  647,   44,
  173, 1456,  173,   46,  111,  232, 1051,  425,  423, 1491,
  424, 1461,  426, 1503,  138,  610,  453,  208,  440,   53,
   48,  289,  121,  812,   49,   45,  595, 1052,  425,  423,
   54,  424,  306,  426,  421,  173, 1485,   55,   47,  208,
  422,   42,  305,  138, 1491,  239,  208,  173,  626,  114,
   56,  308,  173,  115,  345,   22, 1538,  453,  421,  610,
  453,  449,  138,  121,  422,   69,  311, 1506,  239, 1485,
  856,  138,  103,  855,  610,  453,  173,  138,  173,  328,
  208,  173,  173, 1552,   45, 1461,  239, 1557,   43,  239,
  449,  449,  202,  694,  756,  138,  694,   47,  339,  173,
   42,  485,  121,  694,  239,  863,  694,  173, 1461, 1485,
  694,  958,  115,  341,  957,  694,  449,  350,  694,  864,
  173,  352,  852,  965,  852,  242,  780,   57,  358,  449,
 1079,  103,  852, 1078,  694,  756,  756,  756,  756,  756,
  852,  756,  485,  865,   58,  485,  852,   43,  226,  852,
  214,  202,  360,  756,  756,  756,  756,  362,  694,   59,
  485,  694,  694,   60,  163,  164,   61, 1303,  463,  215,
  463,  694,  852,  363,   62,  463,  863,  392,  463,  852,
  421,  852,  852,  931,  932,  852,  422,  756,  694,  852,
  864,  463,  852,   63,  852, 1110,  852,  866, 1109,  421,
  784,  852,  852,  784,  852,  422,  239,  728, 1115,  729,
  215, 1114,  421,  215,  865,  694,  881,  882,  422,  421,
  852,  852,  366,  852, 1184,  422, 1186,  694,  215,  694,
  249,  250,  251, 1197,  163,  164, 1196,  852, 1568,  852,
  852,  852,  367,  330,  852,  421,  331,  852,  852,  226,
  384,  422,  784,  254,  255,  110,  110,  852,  259,  260,
  395,  399,  694,  242,  766,  397,  421, 1206,  866,  463,
 1205,  226,  422,  394,  852, 1053,  425,  423,  226,  424,
  400,  426, 1054,  425,  423,  401,  424,  495,  426,  402,
  852,  463,  332,  403,  453,  405,  453, 1279,  463, 1553,
 1278,  852, 1533,  404,  453,  766,  766,  766,  766,  766,
  406,  766,  226,  852,  407,  852, 1579,  453,  408, 1502,
  409,  852,  410,  766,  766,  766,  766,  495,  495,  418,
  607,  495,  463,  607, 1055,  425,  423,  610,  424,  420,
  426,  411,  412,  427,  610,  428,  495,  610,  852,  430,
  434,  610,  435,  437,  438,  447,  756,  766,  756,  610,
   14,  458,  467,  488,  475,  495,  756,  498,  249,  250,
  251,  168,  163,  164,  756,  610,  508,  559,  495,  485,
  756,  485,  512,  756,  563,  565,  485,  567,  386,  485,
  595,  254,  255,  599,  610,  453,  259,  260,   87,  610,
  604,  769,  485,  615,  613,  619,  756,  639,  643,  623,
  625,  627,  610,  756,  657,  756,  756,  453,  432,  756,
  673,  677,  678,  756,  453,  682,  756,  685,  756,  610,
  756,  371,  686,  459,  610,  756,  756,  139,  756,  696,
   88,  698,  769,  769,  769,  769,  769,  226,  769,  215,
  699,  708,   89,  732,  756,  756,  610,  756,  453,  709,
  769,  769,  769,  769,  425,  423,  105,  424,  610,  426,
  610,  756,  733,  756,  756,  756,  734,   90,  756,  739,
  485,  756,  756,  425,  423,  662,  424,  744,  426,  751,
  748,  756,  749,  750,  769,  754,  139,  753,  759,  765,
 1459,  766,  485,  768,  249,  250,  251,  777,  756,  485,
  779, 1056,  425,  423,  421,  424,  780,  426,  788,  789,
  422,  421,  790,  792,  756,  483,  766,  422,  766,  828,
  830,  832,  259,  260,  827,  756,  766,  836,  837,  843,
  841,  853,  421,  485,  845,  495,   91,  756,  226,  756,
  766,  860,  862,  766,  868,  756,   92,  872,  897,  901,
  760,  495,  911,  912,  495,  495,  483,  495,  917,  483,
  226,  770,  495,  421,  918,  495,  766,  226,  920,  422,
  711,   93,  756,  766,  483,  766,  766,  926,  495,  766,
  927,  928,  934,  766,  495,  937,  766,  495,  766,   94,
  766,  948,  943,  950,  955,  766,  766,  960,  766,  972,
  986,  226,  770,  770,  770,  770,  770,  974,  770, 1029,
 1027, 1032, 1035, 1043,  766,  766, 1060,  766, 1070, 1067,
  770,  770,  770,  770, 1071, 1068, 1202,  425,  423, 1069,
  424,  766,  426,  766,  766,  766, 1072,  596,  766, 1085,
 1081,  766,  766, 1093, 1103, 1106, 1203,  425,  423, 1111,
  424,  766,  426,  769,  770,  769,  495,  992, 1113,  996,
 1120, 1004, 1007,  769, 1012, 1015, 1018, 1124,  766, 1134,
  425,  423,  239,  424, 1285,  426, 1125, 1126,  495,  371,
  769,  966, 1136, 1147,  766,  495, 1148, 1497, 1143,  495,
 1150, 1146,  421, 1151, 1160,  766,  495,  268,  422,  425,
  423, 1161,  424,  769,  426, 1162,  139,  766, 1164,  766,
  769,  421,  769,  769,  495,  766,  769,  422, 1165,  495,
  769,  764, 1172,  769, 1173,  769,  372,  769,  139,  242,
 1174,  371,  769,  769, 1175,  769, 1177, 1178, 1179, 1180,
  421, 1181,  766, 1182,  495,  810,  422, 1183,  495,  268,
 1198,  769,  769, 1201,  769, 1213, 1215,  139,  252, 1218,
 1224,  290,  764, 1220,  764,  764,  764, 1223,  769, 1232,
  769,  769,  769,  483,  490,  769,  139, 1234,  769,  769,
  764,  764,  764,  764, 1242,  139, 1235, 1236,  769, 1237,
 1238,  139,  483,  483, 1239,  483,  291, 1257, 1262, 1247,
  483, 1266, 1152,  483, 1267,  769, 1271, 1277, 1298,  139,
 1304, 1305, 1299, 1306,  764, 1351,  483, 1352, 1308, 1354,
  902,  769,  483,  770,  292,  770, 1353,  293, 1356, 1358,
 1355, 1359,  769,  770,  249,  250,  251, 1360,  163,  164,
 1366, 1368, 1371,  294,  769, 1375,  769, 1374, 1372, 1376,
  770, 1382,  769, 1383, 1384, 1385, 1388,  254,  255,  256,
  257,  258,  259,  260, 1389,  421,  763,  261,  262,  295,
 1390,  422, 1391,  770, 1392, 1393, 1394, 1395, 1396,  769,
  770, 1397,  770,  770, 1414,  421,  770, 1416,  103, 1418,
  770,  422, 1419,  770,  483,  770, 1422,  770, 1420, 1430,
 1421, 1423,  770,  770, 1429,  770, 1451,  763,  421,  763,
  763,  763, 1432, 1452,  422, 1431,  483, 1457, 1453, 1454,
 1473,  770,  770,  483,  770,  763,  763,  763,  763, 1479,
  239, 1516,  483, 1512,  483, 1504, 1514,  421,  770, 1518,
  770,  770,  770,  422, 1520,  770, 1522, 1524,  770,  770,
 1531, 1525,  483, 1533, 1536, 1511, 1537,  483,  770,  763,
  628,  629,  630,  631,  632,  633,  634,  635, 1510,   87,
 1551,  485, 1556, 1561, 1562,  770,  765, 1502, 1565, 1490,
 1575, 1577,  239,  764,  371,  764,  483, 1578,    1,  188,
  578,  770,   26,  764,   28,  685,  586,  267,  342,  251,
  135,  483,  770,  249,  421,  198,   77,  618,  616,  179,
  764,   88,  485,  256,  770,  485,  770,  765,  483,  765,
  765,  765,  770,   89,  612,  614,  369,  483,  180,  255,
  485,  343,  642,  764,  636,  765,  765,  765,  765,  242,
  764,  641,  764,  764,  685,   87,  764,  643,   90,  770,
  764,  307, 1152,  764,  292,  764,  290,  764,  652,   24,
   27,   33,  764,  764,  108,  764, 1144, 1188,  391,  765,
  390,  398,  829,  778, 1142,  207,  971, 1130, 1153, 1140,
 1246,  764,  764, 1362,  764,  685,  521,   88,  685,  745,
  463, 1121,  249,  250,  251, 1131,  163,  164,  764,   89,
  764,  764,  764,  685, 1083,  764,  492,  914,  764,  764,
  493,  915, 1342, 1348, 1509,  254,  255,   91,  764,  727,
  259,  260,  712, 1515,   90,  261,  262,   92,  763, 1513,
  763, 1546,  558,  909, 1226,  764, 1530, 1573,  763, 1471,
  594, 1541, 1261, 1478,  249,  250,  251,  775,  163,  164,
 1132,  764,   93,  501,  959,  763, 1365,  731, 1254,  949,
  474,  767,  764,  712,  940,  110,  712,  254,  255,  448,
   94,  768,  259,  260,  764,  672,  764,  483,  763,  883,
  873,  712,  764,  659,  668,  763,  660,  763,  763,  859,
 1550,  763, 1302,   91, 1402,  763, 1407,  833,  763, 1581,
  763, 1523,  763,   92, 1168,  681,  650,  763,  763,  764,
  763, 1381,  768,    0,  768,  768,  768,    0,    0, 1039,
  593,    0,    0,    0,    0,    0,  763,  763,   93,  763,
  768,  768,  768,  768,    0,  239,    1,    0,  765,    0,
  765,  182,    0,  763,    0,  763,  763,  763,  765,  485,
  763,  485,    0,  763,  763,    0,    0,    0,    2,  485,
    0,    0,    0,  763,  768,  765,    3,    0,    0,    0,
    0,    0,  485,    4,    0,    5,    0,    6, 1463,    0,
  763,    0,    7,    0,  736,    0,    0,    0,  765,    8,
    0,    0,  242,    0,    0,  765,  763,  765,  765,    0,
  182,  765,    0,    9,    0,  765,    0,  763,  765,    0,
  765, 1495,  765, 1463,   10,    0,    0,  765,  765,  763,
  765,  763,  685,    0,  685,  736,  715,  763,  736,    0,
    0,    0,  685,    0,    0,    0,  765,  765,    0,  765,
    0,    0,    0,  736,    0,    0, 1495,    0,    0,    0,
  485,    0,    0,  765,  763,  765,  765,  765, 1539,    0,
  765,    0,    0,  765,  765,    0,    0,  715,  713,    0,
  715,    0,  485,  765,    0,    0,    0,    0,    0,  485,
    0,   11,    0,    0,  712,  715,    0, 1463,   12, 1560,
  765,   13,    0,   14,   15,    0,    0,  249,  250,  251,
  168,  163,  164,    0,    0,    0,  765,    0,    0,  713,
 1463,    0,  713,  485,    0,    0,    0,  765,   16,    0,
  254,  255,    0,  685,    0,  259,  260,  713,  685,  765,
    0,  765,  714,  768,    0,  768,    0,  765,    0,    0,
    0,  712,    0,  768,  712,  685,    0,    0,    0,    0,
    0,  712,  685,    0,  712,    0,    0,    0,  712,    0,
  768,    0,    0,  712,  765,    0,  712,    0,    0,    0,
    0,    0,    0,  714,    0,    0,  714,    0,    0,    0,
    0,  744,  712,  768,    0,    0,  685,    0,    0,    0,
  768,  714,  768,  768,    0,    0,  768,    0,    0,    0,
  768,    0,    0,  768,    0,  768,  712,  768,    0,  712,
  712,    0,  768,  768,    0,  768,    0,    0,    0,  712,
  182,    0,  744,    0,    0,  744,    0,    0,    0,    0,
    0,  768,  768,    0,  768,    0,  712,    0,    0,    0,
  744,    0,  182,    0,    0,  708,  736,    0,  768,    0,
  768,  768,  768,    0,    0,  768,    0,    0,  768,  768,
    0,    0,    0,  712,    0,    0,    0,    0,  768,    0,
  338,  182,    0,    0,    0,  712,    0,  712,    0,    0,
    0,    0,    0,    0,    0,  768,  708,    0,  715,  708,
  182,    0,    0,    0,    0,    0,    0,  167,  182,  182,
    0,  768,    0,  736,  708,  182,  736,    0,    0,    0,
  712,  338,  768,  736,  338,    0,  736,    0,    0,    0,
  736,    0,    0,  182,  768,  736,  768,    0,  736,  338,
  713,    0,  768,    0,  709,  182,    0,  182,  167,    0,
    0,  167,    0,    0,  736,  715,    0,    0,  715,    0,
    0,    0,    0,    0,    0,  715,  167,    0,  715,  768,
  182,    0,  715,    0,    0,    0,    0,  715,  736,    0,
  715,  736,  736,    0,    0,  709,    0,    0,  709,    0,
    0,  736,    0,  710,    0,  182,  715,  713,    0,    0,
  713,    0,    0,  709,  714,    0,    0,  713,  736,    0,
  713,    0,    0,    0,  713,    0,    0,    0,    0,  713,
  715,    0,  713,  715,  715,    0,    0,    0,    0,    0,
    0,    0,    0,  715,  710,  736,    0,  710,  713,    0,
    0,    0,    0,    0,    0,    0,    0,  736,    0,  736,
  715,    0,  710,  744,    0,    0,    0,  743,    0,    0,
    0,  714,  713,    0,  714,  713,  713,    0,    0,    0,
    0,  714,    0,    0,  714,  713,    0,  715,  714,    0,
    0,    0,  736,  714,    0,    0,  714,    0,    0,  715,
    0,  715,  713,    0,    0,    0,    0,    0,  743,  737,
    0,  743,  714,    0,    0,    0,    0,    0,  163,    0,
  744,    0,    0,  744,    0,    0,  743,  708,    0,  713,
  744,    0,    0,  744,  715,    0,  714,  744,    0,  714,
  714,  713,  744,  713,    0,  744,    0,    0,    0,  714,
  737,  745,    0,  737,    0,    0,    0,    0,    0,    0,
    0,  744,    0,    0,    0,    0,  714,    0,  737,    0,
    0,    0,    0,    0,    0,  167,  713,  163,    0,    0,
    0,    0,    0,    0,  708,  744,    0,  708,  744,  744,
    0,    0,  745,  714,  708,  745,  167,  708,  744,    0,
    0,  708,    0,    0,    0,  714,  708,  714,    0,  708,
  745,    0,  338,    0,    0,  744,  709,    0,  167,  338,
    0,    0,  338,    0,  167,  708,  338,    0,    0,    0,
    0,    0,    0,    0,  338,    0,    0,    0,    0,    0,
  714,  746,  744,    0,    0,    0,    0,  167,    0,  708,
  338,    0,  708,  708,  744,    0,  744,    0,    0,    0,
    0,    0,  708,    0,  734,  710,  167,    0,    0,    0,
    0,    0,    0,  709,  338,  167,  709,    0,    0,  708,
    0,  167,  746,  709,    0,  746,  709,  338,    0,  744,
  709,    0,    0,    0,    0,  709,    0,    0,  709,  167,
  746,    0,    0,    0,  338,  734,  708,    0,  734,    0,
    0,    0,    0,  738,  709,    0,    0,    0,  708,    0,
  708,    0,  710,  734,    0,  710,    0,    0,    0,  743,
    0,  338,  710,    0,  239,  710,  167,    0,  709,  710,
    0,  709,  709,  338,  710,  338,    0,  710,    0,    0,
    0,  709,    0,  708,  738,    0,    0,  738,    0,    0,
    0,    0,    0,  710,    0,    0,    0,    0,  709,    0,
    0,  737,  738,    0,    0,  239,  163,    0,  239,    0,
    0,    0,    0,    0,    0,    0,  743,  710,    0,  743,
  710,  710,    0,  239,    0,  709,  743,  163,    0,  743,
  710,    0,  747,  743,    0,    0,    0,  709,  743,  709,
    0,  743,    0,  745,    0,    0,    0,  710,    0,  163,
    0,    0,    0,    0,    0,  163,    0,  743,  737,    0,
    0,  737,    0,    0,    0,    0,    0,    0,  737,    0,
    0,  737,  709,  747,  710,  737,  747,    0,  163,    0,
  737,  743,    0,  737,  743,  743,  710,    0,  710,    0,
    0,  747,    0,    0,  743,    0,  735,  163,    0,  737,
  745,    0,    0,  745,    0,    0,  163,    0,    0,    0,
  745,  743,  163,  745,    0,    0,  739,  745,    0,    0,
    0,  710,  745,  737,    0,  745,  737,  737,    0,    0,
  163,    0,    0,  746,    0,    0,  737,  735,  743,    0,
  735,  745,    0,    0,    0,  603,    0,    0,    0,    0,
  743,    0,  743,  737,    0,  735,  734,  739,    0,    0,
  739,    0,    0,    0,    0,  745,    0,  163,  745,  745,
    0,    0,    0,    0,    0,  739,   74,    0,  745,    0,
  737,    0,    0,   75,    0,  743,  603,   76,   77,  603,
  746,    0,  737,  746,  737,  745,    0,    0,    0,    0,
  746,    0,    0,  746,  603,  738,    0,  746,   78,    0,
    0,    0,  746,  734,    0,  746,  734,    0,    0,    0,
    0,    0,  745,  734,    0,    0,  734,  737,    0,    0,
  734,  746,    0,    0,  745,  734,  745,    0,  734,    0,
    0,    0,  239,    0,  239,    0,    0,    0,    0,    0,
    0,  601,  239,    0,  734,  746,    0,    0,  746,  746,
    0,    0,  738,    0,    0,  738,    0,    0,  746,  745,
    0,    0,  738,   79,    0,  738,    0,    0,  734,  738,
    0,  734,  734,    0,  738,  746,    0,  738,    0,    0,
   80,  734,  601,  598,  747,  601,    0,    0,    0,    0,
    0,    0,    0,  738,    0,   81,    0,    0,  734,   82,
  601,    0,  746,    0,    0,    0,    0,    0,    0,    0,
   83,    0,  235,    0,  746,    0,  746,  738,    0,    0,
  738,  738,    0,    0,  598,  734,  236,  598,    0,   84,
  738,    0,    0,  239,    0,    0,    0,  734,    0,  734,
    0,  747,  598,    0,  747,    0,    0,  738,  735,  746,
    0,  747,    0,  235,  747,  239,  235,    0,  747,    0,
    0,    0,  239,  747,    0,    0,  747,  236,  739,    0,
  236,  235,  734,    0,  738,    0,    0,    0,    0,    0,
    0,    0,  747,    0,    0,  236,  738,    0,  738,    0,
    0,    0,    0,    0,    0,    0,  239,    0,    0,  852,
    0,    0,    0,    0,    0,  735,  747,    0,  735,  747,
  747,    0,    0,    0,    0,  735,    0,    0,  735,  747,
    0,  738,  735,    0,    0,  739,    0,  735,  739,    0,
  735,    0,    0,    0,    0,  739,  747,    0,  739,    0,
  852,    0,  739,  852,    0,  864,  735,  739,    0,    0,
  739,    0,    0,    0,  603,    0,    0,  603,  852,    0,
  852,    0,    0,  747,  603,    0,  739,  603,    0,    0,
  735,  603,    0,  735,  735,  747,  603,  747,    0,  603,
    0,    0,    0,  735,  496,    0,    0,    0,    0,    0,
  739,    0,    0,  739,  739,  603,    0,    0,    0,    0,
  735,    0,    0,  739,    0,    0,    0,    0,    0,    0,
  747,    0,  490,    0,    0,    0,    0,    0,    0,  603,
  739,    0,    0,  603,  496,  496,    0,  735,  496,    0,
    0,    0,  603,    0,    0,    0,    0,    0,    0,  735,
  513,  735,    0,  496,    0,    0,    0,  739,    0,  603,
    0,    0,    0,  490,    0,    0,  490,    0,    0,  739,
  601,  739,    0,  601,    0,    0,    0,    0,    0,    0,
  601,  490,    0,  601,  735,  496,  603,  601,    0,    0,
    0,  513,  601,    0,  513,  601,    0,    0,  603,    0,
  235,    0,  235,    0,  739,    0,  603,    0,    0,  513,
  235,  601,  598,  490,  236,  598,  236,    0,    0,    0,
    0,    0,  598,    0,  236,  598,    0,    0,    0,  598,
    0,    0,    0,  603,  598,  601,    0,  598,    0,  601,
    0,  513,    0,    0,    0,    0,    0,  503,  601,    0,
    0,    0,    0,  598,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  601,    0,    0,    0,    0,
    0,    0,    0,  852,  852,    0,    0,  598,    0,    0,
    0,  598,  852,    0,    0,    0,  852,    0,  503,  852,
  598,  503,  601,    0,  852,    0,    0,    0,    0,    0,
    0,  235,    0,    0,  601,  852,  503,  598,  852,    0,
    0,    0,  852,    0,  852,  236,    0,    0,    0,    0,
    0,    0,  371,  235,    0,    0,    0,    0,  852,    0,
  235,    0,    0,    0,  598,    0,    0,  236,  503,  601,
  268,    0,    0,    0,  236,    0,  598,    0,    0,  852,
  852,    0,  496,  487,    0,  852,  852,  852,    0,  852,
  852,  852,    0,  852,  235,    0,    0,    0,  496,    0,
    0,  496,  496,    0,  496,    0,    0,    0,  236,  496,
  490,  598,  496,  852,    0,  852,    0,    0,    0,  182,
    0,    0,    0,    0,  487,  496,  490,  487,    0,  490,
  490,  496,  490,    0,  496,    0,    0,  490,  513,    0,
  490,    0,  487,    0,    0,  480,  852,    0,    0,    0,
  852,    0,    0,  490,  513,    0,    0,  485,  513,  490,
  513,    0,  490,  852,    0,  513,    0,    0,  513,    0,
    0,    0,    0,    0,  487,    0,    0,    0,  182,    0,
    0,  513,    0,    0,    0,  852,  480,  513,    0,  480,
  513,    0,    0,    0,    0,    0,    0,    0,  485,    0,
  852,  485,    0,  496,  480,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
  852,  852,    0,    0,    0,  496,    0,    0,    0,    0,
    0,  490,  496,    0,    0,  503,  496,    0,    0,    0,
    0,    0,    0,  496,    0,    0,    0,    0,    0,    0,
    0,  503,    0,  490,    0,  503,    0,  503,    0,  513,
  490,  496,  503,    0,  490,  503,  496,    0,    0,    0,
    0,  490,    0,    0,    0,    0,  173,    0,  503,    0,
    0,  513,    0,    0,  503,    0,    0,  503,  513,  490,
  174,  496,  513,    0,  490,  496,    0,    0,    0,  513,
    0,    0,    0,  239,    0,    0,  579,    0,    0,  263,
    0,  264,    0,    0,    0,    0,    0,  513,    0,  490,
    0,    0,  513,  490,  267,    0,    0,    0,    0,  268,
    0,    0,    0,    0,    0,  173,    0,    0,    0,    0,
    0,  487,    0,    0,    0,    0,    0,  513,    0,  174,
    0,  513,    0,    0,    0,    0,  503,  487,    0,    0,
    0,  487,    0,  487,    0,    0,    0,    0,  487,    0,
    0,  487,    0,    0,    0,    0,    0,  182,  503,    0,
    0,    0,    0,    0,  487,  503,    0,    0,    0,  503,
  487,    0,    0,  487,    0,    0,  503,    0,  182,    0,
    0,    0,    0,  480,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  503,  485,    0,    0,    0,  503,
  182,    0,  480,  480,    0,  480,  182,    0,    0,    0,
  480,    0,    0,  480,    0,  485,    0,  485,    0,    0,
    0,    0,  485,    0,  503,  485,  480,    0,  503,  182,
    0, 1153,  480,    0,    0,    0,  579,    0,  485,  263,
    0,  264,  487,    0,  485,  249,  250,  251,  182,  163,
  164,    0,    0,    0,  267,    0,  182,  182,    0,  268,
    0,    0,    0,  182,  487,    0,    0,    0,  254,  255,
    0,  487,    0,  259,  260,  487,    0,    0,  261,  262,
    0,  182,  487,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  487,    0,    0,    0,  480,  487,    0,    0,    0,    0,
    0,    0,    0,  236,  173,    0,  485,    0,  182,    0,
    0,    0,  237,    0,    0,    0,  480,    0,  174,  182,
  487,    0,    0,  480,  487,  173,  238,    0,  485,  575,
    0,    0,  239,  240,  480,  485,    0,    0,    0,  174,
    0,    0,    0,    0,    0,    0,  485,  173,    0,    0,
    0,  576,  480,  173,    0,    0,    0,  480,  781,    0,
    0,  174,  523,  241,  485,  579,    0,  174,  263,  485,
  264,    0,    0,    0,    0,    0,  173,  782,    0,    0,
    0,  524,    0,  267,  525,    0,  480,    0,  268,    0,
  174,  243,  244,    0,    0,  173,    0,    0,  485,    0,
    0,    0,    0,  245,  173,    0,    0,  246,    0,  174,
  173,    0,    0,    0,    0,  577,    0,    0,  174,    0,
    0,    0,    0,    0,  174,  526,    0,    0,  173,    0,
    0,  527,  528,  529,    0,  530,  531,  532,    0,  533,
    0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  236,    0,    0,    0,    0,  578,  534,
    0,  535,  237,  266,    0,  173,  263,    0,  264,    0,
  247,    0,    0,    0,    0,    0,  238,    0,    0,  174,
  248,  267,  239,  240,    0,    0,  268,    0,    0,    0,
    0,    0,  536,    0,  249,  250,  251,  252,  163,  164,
    0,  576,    0,    0,    0,    0,    0,    0,  253,  537,
    0,    0,    0,  241,    0,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0,    0,  261,  262,    0,
    0,  538,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  243,  244,    0,    0,  266,    0,    0,  263,    0,
  264,    0,    0,  245,    0,    0,    0,  246, 1274, 1275,
    0,    0,    0,  267,    0,  577,  539,  540,  268, 1280,
 1281,    0, 1283, 1284,    0,    0,    0,    0,    0,    0,
 1288, 1289, 1290, 1291,    0, 1292, 1293, 1294, 1295, 1296,
 1297,    0,  236,    0,    0,    0,    0,    0,    0,    0,
    0,  237,    0,    0,  415,    0,    0,    0,  578,    0,
    0,    0,    0,    0,  266,  238,    0,  263,    0,  264,
  247,  239,  240,    0,    0,    0,    0,    0,    0,    0,
  248,    0,  267,    0,    0,    0,    0,  268,    0,    0,
  576,    0,    0,    0,  249,  250,  251,  252,  163,  164,
    0,    0,  241,    0,    0,    0,    0,    0,  253,    0,
    0,    0,    0,    0,    0,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0,    0,  261,  262,    0,
  243,  244,    0,  981,    0,    0,  982,    0,    0,    0,
  236,    0,  245,    0,    0,    0,  246,    0,  266,  237,
    0,  263,    0,  264,  577,    0,    0,    0,    0,    0,
    0,    0,    0,  238,  127,    0,  267,    0,    0,  239,
  240,  268,    0,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  139,  140,  141,  142,  143,    0,
    0,    0,    0,    0,  144,  145,    0,  578,    0,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    0,  247,
    0,    0,    0,    0,    0,  990,    0,    0,  982,  248,
    0,    0,  236,    0,    0,    0,    0,    0,  243,  244,
    0,  237,    0,  249,  250,  251,  252,  163,  164,    0,
  245,    0,    0,    0,  246,  238,    0,  253,    0,    0,
    0,  239,  240,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,    0,  261,  262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  241,    0,  994,    0,    0,  982,    0,    0,
    0,  236,    0,    0,    0,    0,    0,    0,    0,  983,
  237,  266,    0,    0,  263,    0,  264,  247,    0,    0,
  243,  244,    0,    0,  238,    0,    0,  248,    0,  267,
  239,  240,  245,    0,  268,    0,  246,    0,    0,    0,
    0,  249,  250,  251,  252,  163,  164,    0,    0,    0,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,  241,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,    0,  261,  262,    0,    0, 1002,    0,
    0,  982,    0,    0,    0,  236,    0,    0,    0,  243,
  244,  983,    0,  266,  237,    0,  263,    0,  264,  247,
    0,  245,    0,    0,    0,  246,    0,    0,  238,  248,
    0,  267,    0,    0,  239,  240,  268,    0,    0,    0,
    0,    0,    0,  249,  250,  251,  252,  163,  164,    0,
    0,    0,    0,    0,    0,    0,    0,  253,    0,    0,
    0,    0,    0,    0,    0,  241,  254,  255,  256,  257,
  258,  259,  260,    0,    0,    0,  261,  262,    0,    0,
  983,    0,    0,    0,    0,    0,    0,    0,  247,    0,
    0,    0,    0,  243,  244,    0,    0,    0,  248,    0,
    0,    0,    0,    0,    0,  245,    0,    0,    0,  246,
    0,    0,  249,  250,  251,  252,  163,  164,    0,    0,
    0,    0,    0,    0,    0,    0,  253,    0,    0,    0,
    0,    0,    0,    0,    0,  254,  255,  256,  257,  258,
  259,  260,    0,    0,    0,  261,  262,    0,    0,    0,
    0, 1005,    0,    0,  982,    0,    0,    0,  236,    0,
    0,    0,    0,    0,  983,    0,  266,  237,    0,  263,
    0,  264,  247,    0,    0,    0,    0,    0,    0,    0,
    0,  238,  248,    0,  267,    0,    0,  239,  240,  268,
    0,    0,    0,    0,    0,    0,  249,  250,  251,  252,
  163,  164,    0,    0,    0,    0,    0,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,  241,  254,
  255,  256,  257,  258,  259,  260,    0,    0,    0,  261,
  262,    0,    0, 1010,    0,    0,  982,    0,    0,    0,
  236,    0,    0,    0,    0,    0,  243,  244,  266,  237,
    0,  263,    0,  264,    0,    0,    0,    0,  245,    0,
    0,    0,  246,  238,  522,    0,  267,    0,  523,  239,
  240,  268,    0,    0,    0,    0,  711,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  524,    0,    0,
  525,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    0,  266,
    0,  265,  263,    0,  264,    0,    0,  983,    0,    0,
    0,    0,    0,    0,    0,  247,    0,  267,  243,  244,
    0,  526,  268,    0,    0,  248,    0,  527,  528,  529,
  245,  530,  531,  532,  246,  533,    0,    0,    0,  249,
  250,  251,  252,  163,  164,    0,    0,    0,    0,    0,
    0,    0,    0,  253,    0,  534,    0,  535,    0,    0,
    0,    0,  254,  255,  256,  257,  258,  259,  260,    0,
    0,    0,  261,  262,    0,    0, 1013,    0,    0,  982,
    0,    0,    0,  236,    0,    0,    0,    0,  536,  983,
    0,    0,  237,    0,    0,    0,    0,  247,    0,    0,
    0,    0,    0,    0,    0,  537,  238,  248,    0,    0,
    0,    0,  239,  240,    0,    0,    0,    0,    0,    0,
    0,  249,  250,  251,  252,  163,  164,  538,    0,    0,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,  226,  241,  254,  255,  256,  257,  258,  259,
  260,    0,    0,    0,  261,  262,    0,    0, 1016,    0,
    0,  982,  539,  540,    0,  236,    0,    0,    0,    0,
    0,  243,  244,  846,  237,  846,  846,    0,  846,    0,
    0,    0,    0,  245,    0,    0,    0,  246,  238,  499,
    0,  846,    0,    0,  239,  240,  846,    0,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
  140,  141,  142,  143,    0,    0,    0,    0,    0,  144,
  145,    0,    0,    0,    0,  241,  236,    0,  266,    0,
    0,  263,    0,  264,    0,  237,    0,    0,    0,    0,
    0,    0,  983,    0,    0,    0,  267,    0,    0,  238,
  247,  268,    0,  243,  244,  239,  240,    0,    0,    0,
  248,    0,    0,    0,    0,  245,    0,    0,    0,  246,
    0,    0,    0,    0,  249,  250,  251,  252,  163,  164,
    0,    0,    0,    0,    0,    0,  241,    0,  253,    0,
    0,    0,    0,    0,    0,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0,    0,  261,  262,    0,
    0,    0,  242,  266,  243,  244,  263,    0,  264,    0,
    0,    0,    0,    0,  983,    0,  245,    0,    0,    0,
  246,  267,  247,    0,    0,    0,  268,    0,    0,    0,
    0,    0,  248,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  249,  250,  251,  252,
  163,  164,    0,    0,    0,    0,    0,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,    0,  254,
  255,  256,  257,  258,  259,  260,    0,    0,    0,  261,
  262,    0,    0,  247,    0,    0,    0,    0,    0,    0,
  846,    0,    0,  248,    0,    0,    0,    0,    0,  846,
    0,    0,    0,    0,    0,    0,    0,  249,  250,  251,
  252,  163,  164,  846,    0,    0,    0,    0,    0,  846,
  846,  253,    0,    0,    0,    0,    0,    0,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,    0,
  261,  262,    0,    0,    0,  236,  266,  640,    0,  263,
  846,  264,    0,    0,  237,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,    0,    0,  238,  268,
    0,    0,    0,    0,  239,  240,  846,    0,  846,  846,
    0,  266,    0,    0,  263,    0,  264,    0,    0,    0,
  846,    0,    0,    0,  846,    0,  417,    0,    0,  267,
    0,    0,    0,    0,  268,  241,  417,  417,  417,  417,
  417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
  417,    0,    0,    0,    0,    0,  417,  417,    0,    0,
  236,    0,    0,  243,  244,    0,    0,    0,    0,  237,
    0,    0,    0,  266,    0,  245,  263,    0,  264,  246,
    0,    0,    0,  238,    0,    0,    0,  846,    0,  239,
  240,  267,    0,    0,    0,    0,  268,  846,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  846,  846,  846,  846,  846,  846,    0,    0,    0,
  241,    0,    0,    0,    0,  846,  415,    0,    0,    0,
    0,    0,    0,    0,  846,  846,  846,  846,  846,  846,
  846,    0,  247,    0,  846,  846,  242,    0,  243,  244,
    0,    0,  248,    0,    0,    0,    0,    0,    0,    0,
  245,    0,    0,    0,  246,    0,  249,  250,  251,  252,
  163,  164,    0,    0,    0,    0,    0,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,    0,  254,
  255,  256,  257,  258,  259,  260,    0,    0,    0,  261,
  262,    0,    0,  236,    0,    0,    0,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  238,  247,    0,    0,
    0,    0,  239,  240,    0,    0,    0,  248,  236,  638,
  425,  423,    0,  424,    0,  426,    0,  237,    0,    0,
    0,  249,  250,  251,  252,  163,  164,    0,  808,  807,
  809,  238,    0,  241,    0,  253,    0,  239,  240,    0,
    0,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,    0,  261,  262,    0,    0,    0,    0,
    0,  243,  244,    0,  266,    0,    0,  263,  241,  264,
  236,  425,  423,  245,  424,    0,  426,  246,    0,  237,
    0,    0,  267,    0,    0,    0,    0,  268,    0,  808,
  807,  809,    0,  238,    0,    0,  243,  244,    0,  239,
  240,    0,    0,    0,    0,    0,    0,    0,  245,    0,
  846,    0,  246,  846,    0,  846,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  846,    0,
  241,    0,    0,  846,    0,    0,    0,    0,    0,    0,
  247,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  248,    0,    0,    0,    0,    0,    0,    0,  243,  244,
    0,    0,    0,    0,  249,  250,  251,  252,  163,  164,
  245,    0,    0,    0,  246,  247,    0,    0,  253,    0,
    0,    0,    0,    0,    0,  248,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0, 1008,  261,  262,  249,
  250,  251,  252,  163,  164,    0,    0,    0,    0,    0,
    0,    0,    0,  253,    0,    0,    0,    0,    0,    0,
    0,    0,  254,  255,  256,  257,  258,  259,  260,    0,
    0,    0,  261,  262,    0,    0,    0,  247,    0,    0,
  795,    0,    0,    0,    0,    0,    0,  248,  421,    0,
    0,    0,    0,    0,  422,    0,    0,  796, 1170,    0,
    0,  249,  250,  251,  252,  163,  164,    0,    0,    0,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,  236,    0,  797,  261,  262,    0,    0,    0,    0,
  237,  795,  798,    0,    0,    0,    0,    0,    0,  421,
  799,    0,    0,    0,  238,  422,    0,    0,  796,    0,
  239,  240,    0,    0,    0,    0,    0,    0,    0,  800,
    0,  801,    0,    0,    0,    0,    0,  846,    0,    0,
    0,    0,    0,    0,    0,  802,  846,  803,  804,  805,
    0,  241,    0,    0,  797,    0,    0,    0,    0,    0,
  846,    0,    0,  798,    0,    0,  846,  846,    0,    0,
    0,  799,    0,    0,    0,    0,    0,    0,    0,  243,
  244,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  800,  245,  801,    0,    0,  246,    0,  846,  806,    0,
    0,    0,    0,    0,    0,    0,  802,    0,  803,  804,
  805,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  846,  846,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  846,    0,    0,
    0,  846,    0,    0,    0,    0,  206,    0,    0,    0,
  206,    0,    0,    0,    0,    0,    0,    0,  247,  806,
    0,    0,    0,    0,    0,  206,    0,    0,  248,  206,
    0,    0,  206,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  249,  250,  251,  252,  163,  164,    0,    0,
    0,    0,    0,    0,    0,    0,  253,    0,    0,    0,
    0,    0,    0,    0,  846,  254,  255,  256,  257,  258,
  259,  260,    0,  206,  846,  261,  262,    0,    0,  206,
  206,  206,    0,  206,  206,  206,    0,  206,  846,  846,
  846,  846,  846,  846,    0,    0,    0,  522,    0,    0,
    0,  523,  846,    0,    0,    0,    0,  206,    0,  206,
    0,  846,  846,  846,  846,  846,  846,  846,    0,    0,
  524,  846,  846,  525,    0,    0,    0,    0,    0,  206,
    0,    0,    0,  206,    0,    0,    0,    0,    0,    0,
  206,    0,    0,    0,    0,   76,    0,    0,  206,    0,
    0,    0,  206,    0,    0,  206,    0,  206,    0,    0,
    0,  522,    0,    0,  526,  523,    0,    0,    0,    0,
  527,  528,  529,    0,  530,  531,  532,    0,  533,  206,
    0,    0,    0,    0,  524,    0,    0,  525,    0,    0,
    0,    0,    0,    0,    0,    0,  206,    0,  534,    0,
  535,    0,  206,  206,  206,    0,  206,  206,  206,    0,
  206,    0,    0, 1224,  206,  206,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  526, 1224,
  206,  536,  206,    0,  527,  528,  529,    0,  530,  531,
  532,    0,  533,  120,    6,  284,    0,  120,  537,    0,
    0,    0,    0,    0,    0, 1315, 1316,    0, 1317,    0,
    6, 1318,  534,  206,  535,    0,  120, 1424,    0,  120,
  538, 1315, 1316,    0, 1317, 1319,  284, 1318,    0,    0,
  206, 1320,    0,  284,    0,  226,    0,  284,  284,    0,
  284, 1319,    0,  284,    0,  536,    0, 1320,    0,    0,
    0,    0,  206,    0,    0,  539,  540,  284,    0,    0,
  120,    0,  537,  284,    0,    0,  120,  120,  120,    0,
  120,  120,  120,    0,  120,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  538,    0,    0,  206,  206,    0,
    0, 1321,    0,    0,  120,    0,  120,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1321,    0,    0,
   14,    0,    0,    0,    0,    0,    0,    0,    0,  539,
  540,    0,    0,  284,    0, 1322,   14,  120,    0,    0,
    0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
    0, 1322,  284,    0,  120,    0, 1323,    0,    0,    0,
    0,   16,    0,  168,    0,    0,    0,  284,    0,    0,
 1425,    0, 1323,    0,    0,    0,  120,  284,    0,  168,
    0,    0,    0,    0,    0,    0,  284,    0,  284,    0,
    0,    0,    0,    0,    0,  284,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  120,  120,
};
static short yycheck[] = {                                      54,
   16,   46,    4,   55,    4,   47,   93,  215,   54,  215,
    0,   54,  577,  509,  579,   57,   48,  429,   53,  402,
  215,  482,  343,   75,  485,  595,   83,   59,  454,  415,
  491,  435,  347,   78,   58,  124,  494,   79,  351,  451,
   60,  351,  322,  682,   86,  491,  102,  699,  104,  689,
  854,    0,  366,  223,   40,   40,   80,   73,  914,   40,
    0,   40,   82,  233,   45,   81,  121,   45,   44,  925,
   41,  103,  305,   44,   40,   45,    0,    0,    0,   58,
  699,   40,  179,   44,  542,   40,    0,   41,  944,   45,
  746,   42,   41,    0,    0,   44,   44,  938,    0,    0,
   44,  113,  189,   44,  686,  610,  115,   44, 1034,   59,
   59,    0,  954,   44,  149,    0,  651,   41,  287,   59,
   44,   42, 1071,    0,   40,    0,    0,    0, 1086,  699,
  231,  274,  264,  318,    0,   59,   59,   59,  397,    0,
  175,  228,    0,  288,   91,   59,  461,  468,  469,  470,
  471,   63,   59,   59,   41,  610,  260,   59,   59,    0,
  288,   58,  217,  315,  372,    0,  372,  260,  664, 1127,
   59,  217,    0,  264,   59,   41, 1399,  372,  491,  284,
   41,  491,   59,   44,   59,   59,   59,  571, 1027,  221,
 1029,  321, 1457,   59,  309,  339,  692,  693,   59,  231,
   41,   59,  517,   44, 1090,   12,   41,   45,  522,   41,
  268,    0,  378,   12,  388,  385,  302,  277,   59,    0,
  309,   45,   44,  257,   59,   63,    0,  302,    0,   59,
  352,   59,  302,  302,  565, 1136,  262, 1219,  406,  317,
  318,   45,  265,  444,  289,  810,  811,    0,  435, 1105,
  305,  263,  264,  308,  266,  713,    0,  425,  456,  305,
  461,  293,  308,  403,  339,  321, 1531,  441,  321,  339,
   59,  258,  328,  734,  461,  330,  332, 1259,   59,  335,
  303, 1122,  740,  449,  330,   59,  346,   59,    0, 1554,
  475,   44,    0,  462,  463,  678, 1519,   41,  399,  443,
   44,  335,  109,  274,  393,   41,   59,  437,  366,  344,
  109,  346,  434,  349,  418,   59,  461,  362,   44,  285,
  307,  412,  827,  358,  467,  418, 1549,  862,  360,  461,
  277,  836,  837,  461,  986,  440,  901,  452,   44,  310,
  264,   44,  384, 1229,  258,    0,  297,   59,    0,  381,
  754,   59,  258,  269,  613,  397, 1305,  443,    0, 1198,
  392,  387,  394, 1264,  366,    0, 1222,  399,  443, 1225,
  319, 1227,  827, 1299,  443,  329,   41,  708,  332, 1035,
  329,  836,  964,  332,  258,    0,  717,  595,  319,  595,
  402,  488,  341,  307,  406,  344,  405,  321, 1240, 1357,
  595,  307, 1258,  278,   59,  280,  264,   59,  420,  406,
  422,  423,  424,  425,  426,  427,  986,   59,  430, 1204,
   42,   41,  329,  310,   59,  332,  462,  463,    0,    0,
 1271,  466,  419,  307,  604,  491,  384,  768, 1078,  388,
  395,  412,  264,  397,   59,  941,  679,  349,  397,  832,
  278,  432,  280,  319,  912, 1111,  341,  397,  319,  332,
  457,  411,  448,  329, 1116,  923,  332,  368,  329,   41,
   41,  332,  349,   44,  788,  341,  461,  512,  459,  455,
  341,  459,  461,  344,  319,  943,  510,   59,   59,  459,
  397,  699,  441,  699, 1350,  461,  467, 1116,  459,  779,
  437,  441,  461,  459,  453,  419,  341, 1072,  563, 1365,
  461,  455,  453,  419,  258,  455,  486,  563,    0,  441,
  522,  410,  388,  437,  397,  560,  561,  388, 1093,  453,
  274,  397,  455,  455,  441, 1070,  397,  461, 1043,  488,
  461,  596,    0,  384,  696,  419, 1116,  459,  455,    0,
  596,  379,  264,  388,  343,  329,  264,  471,  332,   41,
    0,  841,  397,  307,  461,  397,  310,  579,  441,  890,
  572,  613,  572, 1377,  960,  441,  329,   59, 1218,  332,
  441,  411,  455,   41, 1080,  969, 1082,  368, 1444,  455,
   41,  344,  453,  924,  432,  321,  332,  262,    0,  305,
 1046,   59,  614,  615,   44,  617,  441,  619,   59,  264,
  622,  623,  624,  625,  626,  627,  273,  406,  321,   59,
  409,  459,  488,  397,  679,  637, 1278,  488,  432,  264,
  685,  686, 1128,  679,  955,  459,  425,  461,  260,  685,
  686,  673,  262,  675,  397, 1103, 1058,  817,    0,  705,
  820, 1331,  860,  688,  689,  459,   41,   59, 1443,   42,
    0,  397,  451,  263,   47, 1304,  678,  441,  412,    0,
    0,  695,   41,    0, 1132,  419,    0,  733,  734,  453,
   41,  455,  304,  353,  378,  258,  398,  967,  441,  341,
  398,    0,    0,  437,    0,  357,    0,  320, 1483,  341,
  453,  790,  455,  792,  319,  461,  265,   59, 1278,  379,
 1114, 1301,  278,  313,   41,    0, 1120,   41,    0,   59,
   44,  338,  387,  467,  324,  419,  341,  471,   59,   59,
  732,  406,   59, 1046,  307,   59, 1046,  739, 1303,    0,
  764,  765,  766,  398,  303,  777,    0,  319,  319,  751,
   59,   59,  257,   59,  320,   59,   41,  329,  375,   41,
  332,  332,   44,  398,  821,    0, 1152,  387,  430,  341,
  341,  388,  466, 1231,   59,  720,  818,   59,  401,  338,
  986,  329,  457,  795,  796,  797,  788,   41,  800,  801,
  802,  986,  804,  805,  806,  807,  808,  809,   59,  819,
   44,    0, 1228,    0,    0,   59,  861,    0, 1266,  326,
 1306,  273,    0, 1196, 1310, 1130,  388,  388,  284,  442,
  832,    0, 1248,  379,   59,  397,  397, 1507,  428,    0,
  335,   42,   43,  845,   45,  401,   47,  319, 1033, 1034,
 1035,  853,   41,  855,   59,  401,  419,  329,  860,   93,
  332, 1416,  408, 1314, 1419,  260, 1536, 1537,  349,  341,
   59,  319,   59,   59,  437,   44,   59,  358,  319,  441,
  441,   59,  461,   44,  332,   16,  442,  262,  418,  341,
   59,  453, 1562,  341,  455, 1455,  442,    0,   59,  329,
  341, 1481,  332,  262, 1215, 1575,  444,  280,  471,  304,
  301,  262,  957,  286,  344,  445,  388,    0, 1116,  964,
 1116,  957,  264,  461,  431,  397,  488,  488,  964,  385,
 1490,  438,   42,   43,  264,   45,  950,   47,   44,  259,
  388, 1521,   73,  935,  264,  935,  279,  388,  262,  397,
  270,  343,  966,  461,  459, 1440,   59,  278,  972,  280,
    0,   44,  353,  461, 1450, 1367,  322,  397,  264,  441,
  264,   44,  461, 1533,   42,   43,   59,   45,  344,   47,
  336,  486,  917,  918,  440,   44,  378,   93,  344,   63,
  262,  410, 1477,  441,  260,  997,  998,  330, 1000, 1001,
  441,  457,  319,  369,  360,  319, 1008, 1205,  322,  459,
   84,  441,  387, 1568,  406,  329,  488,  409,  332,   59,
   93,  319,  336,  453,  341,  455, 1071,  341,  387,  964,
  344,  364, 1517,  425,   93, 1071,  387,  272,  304,  264,
  488, 1033, 1034,  341,  319, 1447,  360,  319,    0,  382,
  322,    0,    0, 1078,  289,  403,  398,  329,  414,  451,
  332,  427, 1547,  322,  336,  344,  341,  398,  398,  341,
  384,  388,  344,  387,  388,  319,    0,  336,  398,  280,
  397,  264, 1278,  397,  461,  286,  404, 1089,  360,   41,
  369,  461,   44, 1278,   44,  461,  265,  341,  446,  334,
  414,  360,  398,  421,  398,  418,  437,   59,  302,   59,
   59,   59,  384,  388, 1299,  387,  388, 1109, 1143, 1109,
  321, 1146,  397,    0,  441,  397,  329,  441,  363,  461,
  319, 1133,  445,   41,  303,   59,   44,   41,  455,  453,
  471,  455,  414,  332,  388,  339,   41, 1149,  427,   44,
  319,  461,  341,  397,   58,  414,  343,  343,  319,   42,
   43, 1163,   45,  322,   47,  323,  441,    0, 1170,  441,
  280,  488,  341,  398,  488,    0,  286,  336, 1223, 1224,
  341,  453,   59,  455,    0,  344,  459, 1223, 1224,    0,
 1223,  378,  378, 1218, 1196,  430, 1438,  441,   93,  388,
  403,  360,  312, 1205,    0,   41,   42,   43,  397,   45,
 1232,   47,  280,  488,  408,  398,  488,  357,  286,  406,
  406,  461,  409,  409,  418,   41,   59,   45,   44,   41,
   42,   43,    0,   45,   59,   47,  439, 1479,  425,  425,
  343,  444,  461,   59,  312,   63,  323,  450,   59,  443,
    0,  259,  441,  260,  394,  414,  396, 1455,  461, 1455,
 1305,    0,  270,   59,  451,  451,  455,  259,    0, 1305,
    0,   40, 1349, 1315, 1276,  378, 1518,  198,  270,  419,
    0,    0,  280, 1285, 1286,  206, 1331,  459,  286,  461,
  295,   59, 1490,  402, 1490, 1331,  279,  304,  260,  488,
    0,  306,   41,  406,  444,   44,  409, 1299,  313,   59,
   40,   41,   42,   43,   44,   45,   46,   47,  301, 1321,
   59,   41,  425, 1345,   44,  461,  278,   59,  280,   59,
   60,   61,   62,  338,    0, 1533,  288, 1533, 1318,   59,
   59,   41,  304,  384,   44,    0, 1371,  330,  451, 1374,
    0,   41,   42,   43,    0,   45, 1433,   47,  338,   59,
 1366,   91,  384,   93,   41,   45,  349,   44, 1370,    0,
   41,   42,   43,  386,   45,  358,   47, 1422,   58,  262,
 1412,  364,   44,   41,   42,   43, 1422,   45,  288,   47,
   41,   42,   43,   59,   45,  375,   47,  280,  403,  382,
    0,  301,  279,  286,   59,    0,    0,  384,  388,   59,
 1455, 1413, 1457,   59,  260,  384,   41,   42,   43, 1455,
   45, 1457,   47, 1465,  301,    0,    0,  379,   59,  295,
  435,  338, 1438,   41,  439,    0,   44,   41,   42,   43,
  306,   45,  461,   47,  280, 1490, 1452,  313,    0,  401,
  286,    0,  419,  330, 1490,    0,  408, 1502,  304,   59,
  326,  274, 1507,    0,   59,   59, 1502,   41,  280,   44,
   44, 1507,  349, 1479,  286, 1467,  319, 1467,  296, 1485,
   41,  358,    0,   44,   59,   59, 1531,  364, 1533,   40,
  442, 1536, 1537, 1528,   59, 1531,   41, 1533,    0,   44,
 1536, 1537,    0,  319,    0,  382,  322,   59,  425, 1554,
   59,    0, 1518,  329,   59,  322,  332, 1562, 1554, 1525,
  336,   41,   59,  462,   44,  341, 1562,  264,  344,  336,
 1575,   46,  262,   41,  264,  353,   44,  403,  317, 1575,
   41,   59,  272,   44,  360,   41,   42,   43,   44,   45,
  280,   47,   41,  360,  420,   44,  286,   59,  278,  289,
  280,   59,  319,   59,   60,   61,   62,  338,  384,  435,
   59,  387,  388,  439,  462,  463,  442,  384,  278,    0,
  280,  397,  312,  461,  450,  285,  322,  341,  288,  319,
  280,  321,  322,  392,  393,  325,  286,   93,  414,  329,
  336,  301,  332,  469,  334,   41,  336,  414,   44,  280,
   41,  341,  342,   44,  344,  286,  296,  466,   41,  468,
   41,   44,  280,   44,  360,  441,  683,  684,  286,  280,
  360,  361,  337,  363, 1027,  286, 1029,  453,   59,  455,
  458,  459,  460,   41,  462,  463,   44,  377,  384,  379,
  380,  381,  453,  258,  384,  280,  261,  387,  388,  379,
  403,  286,   93,  481,  482,  462,  463,  397,  486,  487,
  319,  384,  488,  353,    0,  403,  280,   41,  414,  379,
   44,  401,  286,  321,  414,   41,   42,   43,  408,   45,
  384,   47,   41,   42,   43,   40,   45,    0,   47,   40,
  430,  401,  307,   40,  278,   40,  280,   41,  408,   41,
   44,  441,   44,  462,  288,   41,   42,   43,   44,   45,
   40,   47,  442,  453,   40,  455,   41,  301,   40,   44,
   40,  461,   40,   59,   60,   61,   62,   40,   41,  461,
   41,   44,  442,   44,   41,   42,   43,  322,   45,   40,
   47,  462,  462,   91,  329,  321,   59,  332,  488,   44,
   46,  336,  437,  362,  451,  435,  262,   93,  264,  344,
  418,  443,  358,  412,  288,  470,  272,   44,  458,  459,
  460,  461,  462,  463,  280,  360,   61,  287,   91,  278,
  286,  280,  373,  289,   40,  264,  285,   40,  461,  288,
   44,  481,  482,  437,  321,  379,  486,  487,  260,  384,
   44,    0,  301,  401,  403,  403,  312,   41,  461,  407,
  408,  409,  397,  319,  453,  321,  322,  401,  461,  325,
   44,  429,   61,  329,  408,  280,  332,   44,  334,  414,
  336,   45,  383,  349,  419,  341,  342,    0,  344,   44,
  302,  278,   41,   42,   43,   44,   45,  278,   47,  280,
  301,  264,  314,  398,  360,  361,  441,  363,  442,  461,
   59,   60,   61,   62,   42,   43,  328,   45,  453,   47,
  455,  377,  437,  379,  380,  381,  471,  339,  384,  398,
  379,  387,  388,   42,   43,  459,   45,  277,   47,   40,
  448,  397,  448,  400,   93,   40,   59,  350,   91,   40,
   59,   40,  401,  264,  458,  459,  460,  384,  414,  408,
  412,   41,   42,   43,  280,   45,   44,   47,  390,  383,
  286,  280,   40,   40,  430,    0,  262,  286,  264,  465,
  318,   40,  486,  487,  437,  441,  272,  321,  321,   41,
  264,  321,  280,  442,   44,  258,  408,  453,  379,  455,
  286,   40,   44,  289,  329,  461,  418,  449,  459,   40,
  277,  274,  274,   40,  277,  278,   41,  280,  345,   44,
  401,    0,  285,  280,  345,  288,  312,  408,  278,  286,
  285,  443,  488,  319,   59,  321,  322,  387,  301,  325,
  387,  387,  419,  329,  307,  417,  332,  310,  334,  461,
  336,  419,  301,   40,  357,  341,  342,  418,  344,   40,
   40,  442,   41,   42,   43,   44,   45,  461,   47,   44,
   44,  386,  368,  321,  360,  361,   41,  363,  344,  389,
   59,   60,   61,   62,  274,  389,   41,   42,   43,  389,
   45,  377,   47,  379,  380,  381,  332,   44,  384,  300,
  266,  387,  388,   40,  264,  461,   41,   42,   43,  423,
   45,  397,   47,  262,   93,  264,  379,  800,   41,  802,
   58,  804,  805,  272,  807,  808,  809,   41,  414,  455,
   42,   43,  296,   45,  262,   47,   41,   41,  401,   45,
  289,  395,  441,   41,  430,  408,   41,   59,  310,  412,
   40,  310,  280,   40,  353,  441,  419,   63,  286,   42,
   43,   40,   45,  312,   47,   40,  279,  453,   40,  455,
  319,  280,  321,  322,  437,  461,  325,  286,   40,  442,
  329,    0,   40,  332,   40,  334,   40,  336,  301,  353,
   40,   45,  341,  342,   40,  344,   40,   40,   40,   40,
  280,   40,  488,   40,  467,  262,  286,  328,  471,   63,
   44,  360,  361,   41,  363,  488,  423,  330,  461,  391,
  271,  343,   41,  392,   43,   44,   45,  447,  377,  408,
  379,  380,  381,  258,  288,  384,  349,  387,  387,  388,
   59,   60,   61,   62,   41,  358,  387,  387,  397,  387,
  387,  364,  277,  278,  387,  280,  378,   41,  278,  379,
  285,   40,  418,  288,   41,  414,   41,   41,  386,  382,
  280,   44,  437,   40,   93,  443,  301,  339,  397,  302,
  444,  430,  307,  262,  406,  264,  443,  409,  302,   41,
  339,   41,  441,  272,  458,  459,  460,  353,  462,  463,
  321,  386,  372,  425,  453,   41,  455,  372,  356,   41,
  289,   41,  461,   41,   41,   41,   41,  481,  482,  483,
  484,  485,  486,  487,   41,  280,    0,  491,  492,  451,
   41,  286,   41,  312,   41,   41,   41,   41,   41,  488,
  319,   41,  321,  322,   59,  280,  325,   40,  341,   59,
  329,  286,   40,  332,  379,  334,  341,  336,   59,   41,
   59,   59,  341,  342,   59,  344,  369,   41,  280,   43,
   44,   45,  345,   40,  286,  353,  401,  341,   59,   59,
  384,  360,  361,  408,  363,   59,   60,   61,   62,   44,
  296,   41,  417,  384,  419,  461,  384,  280,  377,  344,
  379,  380,  381,  286,   41,  384,   41,   41,  387,  388,
  411,   44,  437,   44,  436,  443,  305,  442,  397,   93,
  473,  474,  475,  476,  477,  478,  479,  480,  302,  260,
   40,    0,   59,  294,  305,  414,    0,   44,  464,   40,
  308,   44,  296,  262,   45,  264,  471,   41,    0,   40,
  338,  430,  384,  272,  384,  264,  321,   58,  278,  264,
  459,  390,  441,  264,  471,   40,  412,  344,  344,  459,
  289,  302,   41,  271,  453,   44,  455,   41,  310,   43,
   44,   45,  461,  314,  344,  344,  264,  437,  459,  271,
   59,   41,   40,  312,   41,   59,   60,   61,   62,  353,
  319,   40,  321,  322,    0,  260,  325,   41,  339,  488,
  329,  305,  418,  332,   59,  334,   59,  336,   41,    0,
    0,    0,  341,  342,   12,  344,  969, 1030,  225,   93,
  224,  233,  604,  567,  967,   77,  780,  956,  444,  964,
 1116,  360,  361, 1249,  363,   41,  348,  302,   44,  517,
  313,  948,  458,  459,  460,  957,  462,  463,  377,  314,
  379,  380,  381,   59,  893,  384,  330,  714,  387,  388,
  330,  715, 1229, 1231, 1472,  481,  482,  408,  397,  496,
  486,  487,    0, 1476,  339,  491,  492,  418,  262, 1475,
  264, 1511,  354,  705, 1087,  414, 1490, 1561,  272, 1427,
  372, 1508, 1133, 1438,  458,  459,  460,  564,  462,  463,
  959,  430,  443,  335,  775,  289, 1260,  498, 1118,  761,
  316,  555,  441,   41,  753,   13,   44,  481,  482,  297,
  461,    0,  486,  487,  453,  441,  455,  323,  312,  685,
  673,   59,  461,  430,  437,  319,  431,  321,  322,  651,
 1525,  325, 1205,  408, 1305,  329, 1308,  609,  332, 1577,
  334, 1485,  336,  418,  999,  451,  427,  341,  342,  488,
  344, 1278,   41,   -1,   43,   44,   45,   -1,   -1,  833,
  371,   -1,   -1,   -1,   -1,   -1,  360,  361,  443,  363,
   59,   60,   61,   62,   -1,  296,  261,   -1,  262,   -1,
  264,    0,   -1,  377,   -1,  379,  380,  381,  272,  278,
  384,  280,   -1,  387,  388,   -1,   -1,   -1,  283,  288,
   -1,   -1,   -1,  397,   93,  289,  291,   -1,   -1,   -1,
   -1,   -1,  301,  298,   -1,  300,   -1,  302, 1422,   -1,
  414,   -1,  307,   -1,    0,   -1,   -1,   -1,  312,  314,
   -1,   -1,  353,   -1,   -1,  319,  430,  321,  322,   -1,
   59,  325,   -1,  328,   -1,  329,   -1,  441,  332,   -1,
  334, 1455,  336, 1457,  339,   -1,   -1,  341,  342,  453,
  344,  455,  278,   -1,  280,   41,    0,  461,   44,   -1,
   -1,   -1,  288,   -1,   -1,   -1,  360,  361,   -1,  363,
   -1,   -1,   -1,   59,   -1,   -1, 1490,   -1,   -1,   -1,
  379,   -1,   -1,  377,  488,  379,  380,  381, 1502,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   41,    0,   -1,
   44,   -1,  401,  397,   -1,   -1,   -1,   -1,   -1,  408,
   -1,  406,   -1,   -1,  262,   59,   -1, 1531,  413, 1533,
  414,  416,   -1,  418,  419,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  430,   -1,   -1,   41,
 1554,   -1,   44,  442,   -1,   -1,   -1,  441,  443,   -1,
  481,  482,   -1,  379,   -1,  486,  487,   59,  384,  453,
   -1,  455,    0,  262,   -1,  264,   -1,  461,   -1,   -1,
   -1,  319,   -1,  272,  322,  401,   -1,   -1,   -1,   -1,
   -1,  329,  408,   -1,  332,   -1,   -1,   -1,  336,   -1,
  289,   -1,   -1,  341,  488,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,    0,  360,  312,   -1,   -1,  442,   -1,   -1,   -1,
  319,   59,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,  384,  336,   -1,  387,
  388,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,  397,
  279,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,  360,  361,   -1,  363,   -1,  414,   -1,   -1,   -1,
   59,   -1,  301,   -1,   -1,    0,  262,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,  397,   -1,
    0,  330,   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   41,   -1,  262,   44,
  349,   -1,   -1,   -1,   -1,   -1,   -1,    0,  357,  358,
   -1,  430,   -1,  319,   59,  364,  322,   -1,   -1,   -1,
  488,   41,  441,  329,   44,   -1,  332,   -1,   -1,   -1,
  336,   -1,   -1,  382,  453,  341,  455,   -1,  344,   59,
  262,   -1,  461,   -1,    0,  394,   -1,  396,   41,   -1,
   -1,   44,   -1,   -1,  360,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   59,   -1,  332,  488,
  419,   -1,  336,   -1,   -1,   -1,   -1,  341,  384,   -1,
  344,  387,  388,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,  397,   -1,    0,   -1,  444,  360,  319,   -1,   -1,
  322,   -1,   -1,   59,  262,   -1,   -1,  329,  414,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
  384,   -1,  344,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   41,  441,   -1,   44,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,
  414,   -1,   59,  262,   -1,   -1,   -1,    0,   -1,   -1,
   -1,  319,  384,   -1,  322,  387,  388,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,  397,   -1,  441,  336,   -1,
   -1,   -1,  488,  341,   -1,   -1,  344,   -1,   -1,  453,
   -1,  455,  414,   -1,   -1,   -1,   -1,   -1,   41,    0,
   -1,   44,  360,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  319,   -1,   -1,  322,   -1,   -1,   59,  262,   -1,  441,
  329,   -1,   -1,  332,  488,   -1,  384,  336,   -1,  387,
  388,  453,  341,  455,   -1,  344,   -1,   -1,   -1,  397,
   41,    0,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,   -1,  414,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  488,   59,   -1,   -1,
   -1,   -1,   -1,   -1,  319,  384,   -1,  322,  387,  388,
   -1,   -1,   41,  441,  329,   44,  279,  332,  397,   -1,
   -1,  336,   -1,   -1,   -1,  453,  341,  455,   -1,  344,
   59,   -1,  322,   -1,   -1,  414,  262,   -1,  301,  329,
   -1,   -1,  332,   -1,  307,  360,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,
  488,    0,  441,   -1,   -1,   -1,   -1,  330,   -1,  384,
  360,   -1,  387,  388,  453,   -1,  455,   -1,   -1,   -1,
   -1,   -1,  397,   -1,    0,  262,  349,   -1,   -1,   -1,
   -1,   -1,   -1,  319,  384,  358,  322,   -1,   -1,  414,
   -1,  364,   41,  329,   -1,   44,  332,  397,   -1,  488,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  382,
   59,   -1,   -1,   -1,  414,   41,  441,   -1,   44,   -1,
   -1,   -1,   -1,    0,  360,   -1,   -1,   -1,  453,   -1,
  455,   -1,  319,   59,   -1,  322,   -1,   -1,   -1,  262,
   -1,  441,  329,   -1,    0,  332,  419,   -1,  384,  336,
   -1,  387,  388,  453,  341,  455,   -1,  344,   -1,   -1,
   -1,  397,   -1,  488,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,  414,   -1,
   -1,  262,   59,   -1,   -1,   41,  258,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  319,  384,   -1,  322,
  387,  388,   -1,   59,   -1,  441,  329,  279,   -1,  332,
  397,   -1,    0,  336,   -1,   -1,   -1,  453,  341,  455,
   -1,  344,   -1,  262,   -1,   -1,   -1,  414,   -1,  301,
   -1,   -1,   -1,   -1,   -1,  307,   -1,  360,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
   -1,  332,  488,   41,  441,  336,   44,   -1,  330,   -1,
  341,  384,   -1,  344,  387,  388,  453,   -1,  455,   -1,
   -1,   59,   -1,   -1,  397,   -1,    0,  349,   -1,  360,
  319,   -1,   -1,  322,   -1,   -1,  358,   -1,   -1,   -1,
  329,  414,  364,  332,   -1,   -1,    0,  336,   -1,   -1,
   -1,  488,  341,  384,   -1,  344,  387,  388,   -1,   -1,
  382,   -1,   -1,  262,   -1,   -1,  397,   41,  441,   -1,
   44,  360,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
  453,   -1,  455,  414,   -1,   59,  262,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,  384,   -1,  419,  387,  388,
   -1,   -1,   -1,   -1,   -1,   59,  306,   -1,  397,   -1,
  441,   -1,   -1,  313,   -1,  488,   41,  317,  318,   44,
  319,   -1,  453,  322,  455,  414,   -1,   -1,   -1,   -1,
  329,   -1,   -1,  332,   59,  262,   -1,  336,  338,   -1,
   -1,   -1,  341,  319,   -1,  344,  322,   -1,   -1,   -1,
   -1,   -1,  441,  329,   -1,   -1,  332,  488,   -1,   -1,
  336,  360,   -1,   -1,  453,  341,  455,   -1,  344,   -1,
   -1,   -1,  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,
   -1,    0,  288,   -1,  360,  384,   -1,   -1,  387,  388,
   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,  397,  488,
   -1,   -1,  329,  403,   -1,  332,   -1,   -1,  384,  336,
   -1,  387,  388,   -1,  341,  414,   -1,  344,   -1,   -1,
  420,  397,   41,    0,  262,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,  435,   -1,   -1,  414,  439,
   59,   -1,  441,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  450,   -1,    0,   -1,  453,   -1,  455,  384,   -1,   -1,
  387,  388,   -1,   -1,   41,  441,    0,   44,   -1,  469,
  397,   -1,   -1,  379,   -1,   -1,   -1,  453,   -1,  455,
   -1,  319,   59,   -1,  322,   -1,   -1,  414,  262,  488,
   -1,  329,   -1,   41,  332,  401,   44,   -1,  336,   -1,
   -1,   -1,  408,  341,   -1,   -1,  344,   41,  262,   -1,
   44,   59,  488,   -1,  441,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   59,  453,   -1,  455,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  442,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,  319,  384,   -1,  322,  387,
  388,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,  397,
   -1,  488,  336,   -1,   -1,  319,   -1,  341,  322,   -1,
  344,   -1,   -1,   -1,   -1,  329,  414,   -1,  332,   -1,
   41,   -1,  336,   44,   -1,   46,  360,  341,   -1,   -1,
  344,   -1,   -1,   -1,  319,   -1,   -1,  322,   59,   -1,
   61,   -1,   -1,  441,  329,   -1,  360,  332,   -1,   -1,
  384,  336,   -1,  387,  388,  453,  341,  455,   -1,  344,
   -1,   -1,   -1,  397,    0,   -1,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,  360,   -1,   -1,   -1,   -1,
  414,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  488,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  384,
  414,   -1,   -1,  388,   40,   41,   -1,  441,   44,   -1,
   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  453,
    0,  455,   -1,   59,   -1,   -1,   -1,  441,   -1,  414,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,  453,
  319,  455,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   59,   -1,  332,  488,   91,  441,  336,   -1,   -1,
   -1,   41,  341,   -1,   44,  344,   -1,   -1,  453,   -1,
  278,   -1,  280,   -1,  488,   -1,  461,   -1,   -1,   59,
  288,  360,  319,   91,  278,  322,  280,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  288,  332,   -1,   -1,   -1,  336,
   -1,   -1,   -1,  488,  341,  384,   -1,  344,   -1,  388,
   -1,   91,   -1,   -1,   -1,   -1,   -1,    0,  397,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,   -1,  384,   -1,   -1,
   -1,  388,  273,   -1,   -1,   -1,  277,   -1,   41,  280,
  397,   44,  441,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,  453,  296,   59,  414,  299,   -1,
   -1,   -1,  303,   -1,  305,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   45,  401,   -1,   -1,   -1,   -1,  319,   -1,
  408,   -1,   -1,   -1,  441,   -1,   -1,  401,   91,  488,
   63,   -1,   -1,   -1,  408,   -1,  453,   -1,   -1,  340,
  341,   -1,  258,    0,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,  442,   -1,   -1,   -1,  274,   -1,
   -1,  277,  278,   -1,  280,   -1,   -1,   -1,  442,  285,
  258,  488,  288,  374,   -1,  376,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   41,  301,  274,   44,   -1,  277,
  278,  307,  280,   -1,  310,   -1,   -1,  285,  258,   -1,
  288,   -1,   59,   -1,   -1,    0,  407,   -1,   -1,   -1,
  411,   -1,   -1,  301,  274,   -1,   -1,    0,  278,  307,
  280,   -1,  310,  424,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   59,   -1,
   -1,  301,   -1,   -1,   -1,  446,   41,  307,   -1,   44,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
  461,   44,   -1,  379,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  481,  482,   -1,   -1,   -1,  401,   -1,   -1,   -1,   -1,
   -1,  379,  408,   -1,   -1,  258,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  274,   -1,  401,   -1,  278,   -1,  280,   -1,  379,
  408,  437,  285,   -1,  412,  288,  442,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,    0,   -1,  301,   -1,
   -1,  401,   -1,   -1,  307,   -1,   -1,  310,  408,  437,
    0,  467,  412,   -1,  442,  471,   -1,   -1,   -1,  419,
   -1,   -1,   -1,  296,   -1,   -1,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  437,   -1,  467,
   -1,   -1,  442,  471,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,  258,   -1,   -1,   -1,   -1,   -1,  467,   -1,   59,
   -1,  471,   -1,   -1,   -1,   -1,  379,  274,   -1,   -1,
   -1,  278,   -1,  280,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,  258,  401,   -1,
   -1,   -1,   -1,   -1,  301,  408,   -1,   -1,   -1,  412,
  307,   -1,   -1,  310,   -1,   -1,  419,   -1,  279,   -1,
   -1,   -1,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  437,  258,   -1,   -1,   -1,  442,
  301,   -1,  277,  278,   -1,  280,  307,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,  278,   -1,  280,   -1,   -1,
   -1,   -1,  285,   -1,  467,  288,  301,   -1,  471,  330,
   -1,  444,  307,   -1,   -1,   -1,   40,   -1,  301,   43,
   -1,   45,  379,   -1,  307,  458,  459,  460,  349,  462,
  463,   -1,   -1,   -1,   58,   -1,  357,  358,   -1,   63,
   -1,   -1,   -1,  364,  401,   -1,   -1,   -1,  481,  482,
   -1,  408,   -1,  486,  487,  412,   -1,   -1,  491,  492,
   -1,  382,  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,  379,  442,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  258,   -1,  379,   -1,  419,   -1,
   -1,   -1,  276,   -1,   -1,   -1,  401,   -1,  258,  430,
  467,   -1,   -1,  408,  471,  279,  290,   -1,  401,  293,
   -1,   -1,  296,  297,  419,  408,   -1,   -1,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,  419,  301,   -1,   -1,
   -1,  315,  437,  307,   -1,   -1,   -1,  442,  273,   -1,
   -1,  301,  277,  327,  437,   40,   -1,  307,   43,  442,
   45,   -1,   -1,   -1,   -1,   -1,  330,  292,   -1,   -1,
   -1,  296,   -1,   58,  299,   -1,  471,   -1,   63,   -1,
  330,  355,  356,   -1,   -1,  349,   -1,   -1,  471,   -1,
   -1,   -1,   -1,  367,  358,   -1,   -1,  371,   -1,  349,
  364,   -1,   -1,   -1,   -1,  379,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,  364,  340,   -1,   -1,  382,   -1,
   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,  354,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,  422,  374,
   -1,  376,  276,   40,   -1,  419,   43,   -1,   45,   -1,
  434,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,  419,
  444,   58,  296,  297,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  407,   -1,  458,  459,  460,  461,  462,  463,
   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,
   -1,   -1,   -1,  327,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,   -1,  491,  492,   -1,
   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,  367,   -1,   -1,   -1,  371, 1150, 1151,
   -1,   -1,   -1,   58,   -1,  379,  481,  482,   63, 1161,
 1162,   -1, 1164, 1165,   -1,   -1,   -1,   -1,   -1,   -1,
 1172, 1173, 1174, 1175,   -1, 1177, 1178, 1179, 1180, 1181,
 1182,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  276,   -1,   -1,  418,   -1,   -1,   -1,  422,   -1,
   -1,   -1,   -1,   -1,   40,  290,   -1,   43,   -1,   45,
  434,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
  315,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,   -1,  491,  492,   -1,
  355,  356,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
  267,   -1,  367,   -1,   -1,   -1,  371,   -1,   40,  276,
   -1,   43,   -1,   45,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  461,   -1,   58,   -1,   -1,  296,
  297,   63,   -1,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,  483,  484,  485,   -1,
   -1,   -1,   -1,   -1,  491,  492,   -1,  422,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,  444,
   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,  276,   -1,  458,  459,  460,  461,  462,  463,   -1,
  367,   -1,   -1,   -1,  371,  290,   -1,  472,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,   -1,  491,  492,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,
  276,   40,   -1,   -1,   43,   -1,   45,  434,   -1,   -1,
  355,  356,   -1,   -1,  290,   -1,   -1,  444,   -1,   58,
  296,  297,  367,   -1,   63,   -1,  371,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,  327,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,   -1,  491,  492,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,  355,
  356,  426,   -1,   40,  276,   -1,   43,   -1,   45,  434,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  290,  444,
   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,   -1,  491,  492,   -1,   -1,
  426,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,   -1,   -1,   -1,  491,  492,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,  426,   -1,   40,  276,   -1,   43,
   -1,   45,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  444,   -1,   58,   -1,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,  491,
  492,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,  355,  356,   40,  276,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,  290,  273,   -1,   58,   -1,  277,  296,
  297,   63,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,  426,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   58,  355,  356,
   -1,  340,   63,   -1,   -1,  444,   -1,  346,  347,  348,
  367,  350,  351,  352,  371,  354,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,  374,   -1,  376,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,   -1,  491,  492,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,  407,  426,
   -1,   -1,  276,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  424,  290,  444,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,  461,  327,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,   -1,  491,  492,   -1,   -1,  260,   -1,
   -1,  263,  481,  482,   -1,  267,   -1,   -1,   -1,   -1,
   -1,  355,  356,   40,  276,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  290,  461,
   -1,   58,   -1,   -1,  296,  297,   63,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,   -1,   -1,   -1,  491,
  492,   -1,   -1,   -1,   -1,  327,  267,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,  426,   -1,   -1,   -1,   58,   -1,   -1,  290,
  434,   63,   -1,  355,  356,  296,  297,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,   -1,  491,  492,   -1,
   -1,   -1,  353,   40,  355,  356,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  426,   -1,  367,   -1,   -1,   -1,
  371,   58,  434,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,  491,
  492,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,
  491,  492,   -1,   -1,   -1,  267,   40,   41,   -1,   43,
  327,   45,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,  290,   63,
   -1,   -1,   -1,   -1,  296,  297,  353,   -1,  355,  356,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  461,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,  327,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
  485,   -1,   -1,   -1,   -1,   -1,  491,  492,   -1,   -1,
  267,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,  276,
   -1,   -1,   -1,   40,   -1,  367,   43,   -1,   45,  371,
   -1,   -1,   -1,  290,   -1,   -1,   -1,  434,   -1,  296,
  297,   58,   -1,   -1,   -1,   -1,   63,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,  472,  418,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,  434,   -1,  491,  492,  353,   -1,  355,  356,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,  491,
  492,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  434,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,  444,  267,   41,
   42,   43,   -1,   45,   -1,   47,   -1,  276,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   60,   61,
   62,  290,   -1,  327,   -1,  472,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,   -1,  491,  492,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   40,   -1,   -1,   43,  327,   45,
  267,   42,   43,  367,   45,   -1,   47,  371,   -1,  276,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   60,
   61,   62,   -1,  290,   -1,   -1,  355,  356,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   40,   -1,  371,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
  327,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
  367,   -1,   -1,   -1,  371,  434,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,  455,  491,  492,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,   -1,  491,  492,   -1,   -1,   -1,  434,   -1,   -1,
  272,   -1,   -1,   -1,   -1,   -1,   -1,  444,  280,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,  455,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  267,   -1,  325,  491,  492,   -1,   -1,   -1,   -1,
  276,  272,  334,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  342,   -1,   -1,   -1,  290,  286,   -1,   -1,  289,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  361,
   -1,  363,   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,  276,  379,  380,  381,
   -1,  327,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,  334,   -1,   -1,  296,  297,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  361,  367,  363,   -1,   -1,  371,   -1,  327,  430,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  430,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  444,  296,
   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,
  486,  487,   -1,  340,  444,  491,  492,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,  273,   -1,   -1,
   -1,  277,  472,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  296,  491,  492,  299,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  407,   -1,   -1,   -1,   -1,  412,   -1,   -1,  292,   -1,
   -1,   -1,  296,   -1,   -1,  299,   -1,  424,   -1,   -1,
   -1,  273,   -1,   -1,  340,  277,   -1,   -1,   -1,   -1,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,  446,
   -1,   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,  374,   -1,
  376,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,   -1,  271,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  271,
  374,  407,  376,   -1,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,  273,  302,  271,   -1,  277,  424,   -1,
   -1,   -1,   -1,   -1,   -1,  313,  314,   -1,  316,   -1,
  302,  319,  374,  407,  376,   -1,  296,  309,   -1,  299,
  446,  313,  314,   -1,  316,  333,  302,  319,   -1,   -1,
  424,  339,   -1,  309,   -1,  461,   -1,  313,  314,   -1,
  316,  333,   -1,  319,   -1,  407,   -1,  339,   -1,   -1,
   -1,   -1,  446,   -1,   -1,  481,  482,  333,   -1,   -1,
  340,   -1,  424,  339,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  446,   -1,   -1,  481,  482,   -1,
   -1,  399,   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,   -1,   -1,
  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,   -1,  399,   -1,  433,  418,  407,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  443,   -1,   -1,   -1,   -1,
   -1,  433,  418,   -1,  424,   -1,  454,   -1,   -1,   -1,
   -1,  443,   -1,  461,   -1,   -1,   -1,  433,   -1,   -1,
  452,   -1,  454,   -1,   -1,   -1,  446,  443,   -1,  461,
   -1,   -1,   -1,   -1,   -1,   -1,  452,   -1,  454,   -1,
   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,
};
#define YYFINAL 17
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 492
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","LIMIT","INT64","SUBSTRING","CONNECTION_ID",
"TRANSACTION_ID",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : USER",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : var_const_list",
"proc_inputs : '(' var_const_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"var_const_list : variable",
"var_const_list : constant",
"var_const_list : column_name",
"var_const_list : null_value",
"var_const_list : var_const_list ',' variable",
"var_const_list : var_const_list ',' constant",
"var_const_list : var_const_list ',' column_name",
"var_const_list : var_const_list ',' null_value",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_string default_opt end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION nonneg_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : SYMBOL",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT distinct_clause select_list from_clause where_clause group_clause having_clause limit_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : column_name",
"column_list : column_list ',' column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : USER",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyerror (TEXT *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static SSHORT	lines, att_charset;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (file->fil_partitions)
    {
    if (!file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*file->fil_length,file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((file->fil_length) && (file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    if (c == '\n')
	{
	lines++;
	line_start = ptr + 1;
	}

    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr + 1;
		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p,UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	};
    yylval = (NOD) MAKE_string (string, p - string);
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start), 
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 18:
{ DSQL_debug = (int) yyvsp[0];
			  if (DSQL_debug > 10)
			      yydebug = DSQL_debug;
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 19:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 25:
{ yyval = yyvsp[0]; }
break;
case 26:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_list (yyvsp[0]); }
break;
case 30:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 31:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 32:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 33:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 36:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 38:
{ yyval = 0; }
break;
case 39:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 42:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 49:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 51:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = yyvsp[0];}
break;
case 70:
{ yyval = yyvsp[0]; }
break;
case 71:
{ yyval = yyvsp[0]; }
break;
case 72:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 74:
{ field->fld_dtype = dtype_blob; }
break;
case 75:
{ 
			field->fld_dtype = dtype_cstring; 
			field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 76:
{ yyval = (NOD) NULL; }
break;
case 78:
{ yyval = yyvsp[-1]; }
break;
case 80:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 84:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 85:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 86:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 89:
{ yyval = yyvsp[0]; }
break;
case 90:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 91:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 92:
{ yyval = yyvsp[0]; }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = yyvsp[0]; }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 102:
{ yyval = NULL; }
break;
case 103:
{ yyval = make_list (yyvsp[0]); }
break;
case 105:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 106:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 107:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 108:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 109:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 110:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 111:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 112:
{ yyval = (NOD) 0;}
break;
case 113:
{ yyval = yyvsp[-1]; }
break;
case 114:
{ yyval = (NOD) NULL; }
break;
case 117:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 119:
{ yyval = NULL; }
break;
case 120:
{ yyval = NULL; }
break;
case 121:
{ yyval = yyvsp[0]; }
break;
case 122:
{ yyval = (NOD) NULL; }
break;
case 123:
{ yyval = (NOD) NULL; }
break;
case 126:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 127:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 130:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 131:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 132:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 133:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 137:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 138:
{yyval = (NOD) NULL;}
break;
case 141:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 142:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 144:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 145:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 146:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 147:
{yyval = (NOD) NULL;}
break;
case 150:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 159:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 160:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 161:
{ file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 162:
{ file->fil_flags |= LOG_serial;
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 163:
{ file = make_file(); 
			  file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) file);}
break;
case 164:
{ file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) file); }
break;
case 166:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 167:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) file); }
break;
case 168:
{ file = make_file();
			  file->fil_name = (STR) yyvsp[0]; }
break;
case 171:
{ file->fil_length = (SLONG) yyvsp[0]; }
break;
case 172:
{ file  = make_file ();}
break;
case 177:
{ file->fil_start = (SLONG) yyvsp[0];}
break;
case 178:
{ file->fil_length = (SLONG) yyvsp[-1];}
break;
case 185:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 186:
{ yyval = yyvsp[0]; }
break;
case 187:
{ yyval = yyvsp[0]; }
break;
case 188:
{ yyval = (NOD) NULL; }
break;
case 190:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 193:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 194:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 195:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 196:
{ 
			field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 199:
{ yyval = NULL; }
break;
case 200:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 203:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 204:
{ field = make_field (yyvsp[0]);
				  yyval = (NOD) field; }
break;
case 205:
{ yyval = yyvsp[-1]; }
break;
case 206:
{ field = make_field (NULL);
			  yyval = (NOD) field; }
break;
case 207:
{ yyval = yyvsp[0]; }
break;
case 208:
{ yyval = (NOD) NULL; }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = make_node (nod_user_name, (int) 0, NULL); }
break;
case 211:
{ yyval = yyvsp[0]; }
break;
case 212:
{ yyval = yyvsp[0]; }
break;
case 213:
{ yyval = yyvsp[0]; }
break;
case 214:
{ yyval = (NOD) NULL; }
break;
case 217:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 218:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 219:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 220:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 222:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 223:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 224:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 225:
{ yyval = yyvsp[0]; }
break;
case 226:
{ yyval = NULL ;}
break;
case 231:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 235:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 236:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 237:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 238:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 239:
{ yyval = NULL;}
break;
case 240:
{ yyval = yyvsp[0];}
break;
case 241:
{ yyval = yyvsp[0];}
break;
case 242:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 243:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 244:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 245:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 246:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 247:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 248:
{ yyval = make_list (yyvsp[-1]); }
break;
case 249:
{ yyval = NULL; }
break;
case 250:
{ yyval = yyvsp[0]; }
break;
case 251:
{ yyval = NULL; }
break;
case 253:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 254:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 255:
{ yyval = make_list (yyvsp[0]); }
break;
case 256:
{ yyval = NULL; }
break;
case 258:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 259:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 262:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 263:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 265:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 268:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 274:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 278:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 279:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 280:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 281:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 282:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0]); }
break;
case 283:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 284:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 285:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 286:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 287:
{ yyval = make_list (yyvsp[0]); }
break;
case 288:
{ yyval = make_list (yyvsp[-1]); }
break;
case 289:
{ yyval = NULL; }
break;
case 290:
{ yyval = make_list (yyvsp[0]); }
break;
case 291:
{ yyval = make_list (yyvsp[-1]); }
break;
case 292:
{ yyval = NULL; }
break;
case 297:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 298:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 299:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 300:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 303:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 304:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 305:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 306:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 307:
{ yyval = NULL; }
break;
case 309:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 310:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 312:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 313:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 315:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 317:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 318:
{ yyval = make_list (yyvsp[0]); }
break;
case 319:
{ yyval = make_list (yyvsp[-1]); }
break;
case 320:
{ yyval = NULL; }
break;
case 324:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 325:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 329:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_list (yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 338:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 339:
{ yyval = yyvsp[-1]; }
break;
case 340:
{ beginning = lex_position(); }
break;
case 341:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 342:
{ beginning = last_token; }
break;
case 343:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 344:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 345:
{ yyval = 0; }
break;
case 346:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 347:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 348:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 349:
{ yyval = NULL; }
break;
case 350:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 354:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 355:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 369:
{ yyval = NULL; }
break;
case 370:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 371:
{ yyval = yyvsp[0]; }
break;
case 372:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 373:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 374:
{ yyval = yyvsp[0]; }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 377:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 380:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 381:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 382:
{ yyval = yyvsp[0]; }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 385:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 386:
{ yyval = yyvsp[0]; }
break;
case 387:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 389:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 390:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = yyvsp[0]; }
break;
case 394:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 395:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 397:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 417:
{ yyval = NULL; }
break;
case 418:
{ yyval = NULL; }
break;
case 419:
{ yyval = NULL; }
break;
case 420:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 421:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 422:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 423:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 424:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 425:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 426:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 427:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 429:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 430:
{ yyval = yyvsp[0]; }
break;
case 431:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 432:
{ yyval = yyvsp[0]; }
break;
case 433:
{ yyval = yyvsp[0]; }
break;
case 435:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 436:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 438:
{ yyval = NULL; }
break;
case 440:
{ yyval = NULL; }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 443:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 444:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 445:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 446:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 448:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 449:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 450:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 451:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 452:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 457:
{ field->fld_ranges = make_list (yyvsp[-1]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 458:
{ field->fld_ranges = make_list (yyvsp[-2]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 460:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 461:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 462:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 468:
{ 
			field->fld_dtype = dtype_long; 
			field->fld_length = sizeof (SLONG); 
			}
break;
case 469:
{ 
			field->fld_dtype = dtype_short; 
			field->fld_length = sizeof (SSHORT); 
			}
break;
case 470:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    field->fld_dtype = dtype_timestamp; 
			    field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    field->fld_dtype = dtype_sql_date; 
			    field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 471:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			field->fld_dtype = dtype_sql_time; 
			field->fld_length = sizeof (SLONG);
			}
break;
case 472:
{ 
			field->fld_dtype = dtype_timestamp; 
			field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 475:
{ 
			field->fld_dtype = dtype_blob; 
			}
break;
case 476:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-1];
			field->fld_sub_type = 0;
			}
break;
case 477:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-3];
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 478:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = 80;
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 479:
{
			field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 480:
{
			field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 481:
{
			field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 482:
{
			field->fld_sub_type_name = yyvsp[0];
			}
break;
case 483:
{
			field->fld_sub_type = (USHORT) 0;
			}
break;
case 484:
{
			field->fld_character_set = yyvsp[0];
			}
break;
case 486:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 487:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			field->fld_flags |= FLD_national;
			}
break;
case 488:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 489:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 490:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			}
break;
case 491:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 500:
{ 
			  field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 501:
{  
			   field->fld_sub_type = dsc_num_type_decimal;
			   if (field->fld_dtype == dtype_short)
				{
				field->fld_dtype = dtype_long;
				field->fld_length = sizeof (SLONG);
				};
			}
break;
case 502:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 503:
{
			field->fld_dtype = dtype_long; 
		    	field->fld_length = sizeof (SLONG); 
			field->fld_precision = 9;
		    	}
break;
case 504:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 505:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			    }
			field->fld_precision = (USHORT) yyvsp[-3];
			field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 508:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    field->fld_dtype = dtype_double;
			    field->fld_length = sizeof (double); 
			    }
			else
			    {
			    field->fld_dtype = dtype_real; 
			    field->fld_length = sizeof (float);
			    }
			}
break;
case 509:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 510:
{ 
			field->fld_dtype = dtype_real; 
			field->fld_length = sizeof (float); 
			}
break;
case 511:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 512:
{ yyval = yyvsp[-1]; }
break;
case 513:
{ yyval = 0; }
break;
case 517:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 518:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 519:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 520:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 521:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 524:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 525:
{ yyval = (NOD) NULL; }
break;
case 527:
{ yyval = (NOD) NULL; }
break;
case 528:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 530:
{ yyval = (NOD) NULL; }
break;
case 532:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 537:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 538:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 539:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 540:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 541:
{ yyval = yyvsp[0];}
break;
case 543:
{ yyval = yyvsp[0];}
break;
case 544:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 545:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 546:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 547:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 548:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 549:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 550:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 551:
{ yyval = 0; }
break;
case 552:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 553:
{ yyval = (NOD) NOD_SHARED; }
break;
case 554:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 555:
{ yyval = (NOD) 0; }
break;
case 556:
{ yyval = (NOD) NOD_READ; }
break;
case 557:
{ yyval = (NOD) NOD_WRITE; }
break;
case 559:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 560:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 561:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 562:
{ yyval = 0; }
break;
case 564:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 565:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 566:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 567:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 568:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 569:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 570:
{ yyval = make_list (yyvsp[0]); }
break;
case 571:
{ yyval = 0; }
break;
case 573:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 574:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 575:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 576:
{ yyval = 0; }
break;
case 577:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 578:
{ yyval = 0; }
break;
case 579:
{ yyval = yyvsp[0]; }
break;
case 580:
{ yyval = 0; }
break;
case 581:
{ yyval = yyvsp[0]; }
break;
case 582:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 583:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 584:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 585:
{ yyval = 0; }
break;
case 586:
{ yyval = make_list (yyvsp[0]); }
break;
case 587:
{ yyval = 0; }
break;
case 589:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 591:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 592:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 593:
{ yyval = make_list (yyvsp[0]); }
break;
case 595:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 598:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 599:
{ yyval = yyvsp[-1]; }
break;
case 600:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 601:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 602:
{ yyval = make_list (yyvsp[-1]); }
break;
case 603:
{ yyval = NULL; }
break;
case 605:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 609:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 611:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 612:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 613:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 614:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 615:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 616:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 617:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 618:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 619:
{ yyval = make_list (yyvsp[0]); }
break;
case 620:
{ yyval = 0; }
break;
case 622:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 626:
{ yyval = yyvsp[0]; }
break;
case 627:
{ yyval = 0; }
break;
case 628:
{ yyval = yyvsp[0]; }
break;
case 629:
{ yyval = 0; }
break;
case 630:
{ yyval = yyvsp[0]; }
break;
case 631:
{ yyval = 0;}
break;
case 632:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 633:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 634:
{ yyval = 0;}
break;
case 635:
{ yyval = yyvsp[0]; }
break;
case 636:
{ yyval = 0; }
break;
case 637:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 638:
{ yyval = 0; }
break;
case 639:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 640:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 641:
{ yyval = 0; }
break;
case 642:
{ yyval = 0; }
break;
case 644:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 645:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 648:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 649:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 650:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 651:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 653:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 654:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 655:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 657:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 660:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 661:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 662:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 665:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 666:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 669:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 672:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 673:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 674:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 675:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 679:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 680:
{ yyval = yyvsp[0]; }
break;
case 682:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 685:
{ yyval = NULL; }
break;
case 686:
{ yyval = make_list (yyvsp[-1]); }
break;
case 688:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 690:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 691:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 692:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 695:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 707:
{ yyval = yyvsp[-1]; }
break;
case 708:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 710:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 711:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 714:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 716:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 717:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 718:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 719:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 721:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 722:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 723:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 724:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 725:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 726:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 727:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 728:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 729:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 730:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 731:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 734:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 735:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 736:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 737:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 738:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 740:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 742:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 744:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 745:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 746:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 747:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 748:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 749:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 750:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 751:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 752:
{ yyval = make_list (yyvsp[-1]); }
break;
case 753:
{ yyval = yyvsp[-1]; }
break;
case 754:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 755:
{ yyval = make_node (nod_select_expr, e_sel_count, 
		 		yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 763:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 764:
{ yyval = yyvsp[0]; }
break;
case 765:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 766:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 768:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 769:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 770:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 771:
{ yyval = yyvsp[-1]; }
break;
case 772:
{ yyval = yyvsp[-1]; }
break;
case 773:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 774:
{ yyval = yyvsp[0]; }
break;
case 775:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 776:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 777:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 778:
{ yyval = yyvsp[0]; }
break;
case 779:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 780:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 781:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 782:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 784:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 787:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 788:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 789:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 790:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 791:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 793:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 794:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 795:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 796:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 801:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 802:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 803:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 804:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 805:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 806:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 807:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 808:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 809:
{ yyval = yyvsp[0]; }
break;
case 810:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 812:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 813:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 814:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 815:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 816:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 818:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 819:
{ yyval = yyvsp[0];}
break;
case 820:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 821:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 822:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 823:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 824:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 825:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 826:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 827:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 828:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 829:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 830:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 831:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 832:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 833:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 834:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 835:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 836:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 837:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 838:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 839:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 840:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 841:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 842:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 843:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 844:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 847:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
