#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 *
 */

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

#define YYSTYPE		NOD
#ifdef DEBUG
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/

static FLD	field;
static FIL	file;
static NOD	field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;


#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#endif
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define LIMIT 488
#define SUBSTRING 489
#define CONNECTION_ID 490
#define TRANSACTION_ID 491
#define LARGEINT 492
#define KW_INT64 493
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    9,    9,
    9,    9,    9,   19,   19,   18,   18,   18,   29,   29,
   22,   30,   30,   30,   30,   30,   21,   21,   27,   27,
   23,   12,   12,   12,   12,   12,   12,   12,   33,   24,
   24,   24,   24,   34,   34,   34,   20,   20,   35,   35,
   35,   25,   25,   39,   26,   26,   41,   41,    6,   42,
   42,   44,   49,   49,   49,   46,   46,   46,   53,   53,
   54,   47,   47,   56,   56,   56,   56,   43,    5,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   61,   61,   64,   64,   64,   72,   80,   80,   80,   81,
   81,   82,   82,   83,   83,   87,   87,   71,   90,   90,
   92,   92,   93,   93,   96,   96,   97,   98,   98,   99,
  100,   69,   73,   70,   84,   84,  103,  104,  104,  106,
  106,  107,  107,  107,  107,  107,  105,  105,  108,  108,
  109,  109,  109,  109,  111,  111,  111,  111,  110,  110,
  115,  115,  114,   88,  116,  116,  117,  120,  121,  121,
  122,  118,  119,  119,  123,  123,  124,  124,  125,  125,
  125,   86,   86,   86,   66,  126,  126,  126,  127,  127,
  128,  128,  129,  129,  129,  135,   76,   76,  131,  131,
   94,   94,   89,  140,  141,   55,  132,  132,   95,   95,
   95,   95,   95,  133,  133,  146,  146,  147,  149,  149,
  149,  149,  149,  130,  148,  148,  152,  152,  152,  152,
  154,  155,  156,  151,  150,  150,  150,  150,  150,  157,
  158,  159,  159,  159,  159,   65,  164,  160,  160,  161,
  161,  165,  165,  166,  162,  162,  167,  167,  168,  169,
  169,  163,  163,  171,  171,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  174,
  175,  176,  177,  177,  178,  184,  180,  180,  180,  181,
  181,  181,  182,  182,  182,  182,  179,  183,  183,  172,
  172,  188,  189,  189,  190,  190,  190,  190,   11,  192,
  192,  192,  193,  193,  193,  193,  193,  193,   68,  195,
  198,  198,  198,  199,  202,  207,  207,  208,  208,  209,
  209,  137,  197,   77,   79,  196,  196,   67,  212,  212,
  212,  213,  216,  216,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  217,  217,  214,
  214,  215,    2,  219,  219,  219,  219,  219,  219,  219,
  225,  225,  227,  227,  227,  227,  227,  227,  227,  220,
  220,  228,  228,  228,  228,  228,  228,  228,  224,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  230,  230,
  232,  232,  231,  229,  229,  229,  226,  226,  222,  223,
  223,  234,  234,  234,  234,  235,  235,  221,  236,  236,
  237,  237,    8,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,   91,   91,  134,  134,  241,  241,
  244,  244,  246,  246,   50,   50,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  251,  251,  252,  252,  242,
  242,  242,  242,  253,  253,   58,   58,   58,   52,   52,
  248,  248,  248,  245,  245,  245,  257,  257,  257,  256,
  256,  255,  255,  255,  249,  249,  260,  258,  258,  258,
  259,  259,  250,  250,  250,  250,  261,  261,   15,   15,
   15,  263,  263,  263,    4,   13,  265,  265,  266,  266,
  267,  267,  262,  268,  268,  269,  269,  270,  270,  270,
  270,  271,  271,  272,  272,  273,  273,  275,  275,  275,
  276,  276,  276,  277,  277,  277,  274,  279,  279,  279,
  280,  280,  278,  278,  281,  283,  283,  282,  282,  264,
   14,  284,  284,  284,  285,  285,  288,  288,  289,  289,
   62,   62,   62,  286,  286,  290,  290,  287,  200,  200,
  201,  201,  294,  294,  295,  295,  295,  291,  298,  298,
  299,  299,  300,  300,  301,  301,  302,  302,  186,  186,
  304,  304,  210,  210,   28,  211,  211,  211,  211,  211,
  211,  211,  211,  204,  204,  305,  305,  306,  306,  306,
  205,  205,  203,  203,  292,  292,  308,  308,  308,  206,
  206,  309,  310,  310,  310,  310,  310,  311,  311,  312,
  312,  313,  313,  314,  314,  314,  315,  315,   10,   10,
  316,  316,    7,    7,  317,  318,  319,   16,   16,  320,
  321,  322,  322,  173,  296,  296,    3,    3,  323,  323,
  323,  325,  325,   58,  324,  324,  326,  326,   31,   31,
   75,   74,   74,  139,  139,  139,  136,  101,  101,  101,
  101,  328,  328,  328,  328,  328,  328,  328,  328,  328,
  328,  328,  329,  329,  329,  329,  329,  329,  329,  329,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  340,  340,  330,  330,
  331,  331,  331,  331,  332,  332,  336,  336,  337,  337,
  337,  337,  335,  338,  333,  333,  341,  341,  339,  343,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,  145,  145,  145,  344,  347,  347,  142,
  142,  348,  348,  348,  348,  348,  346,  346,  346,  346,
  346,  342,  342,  342,  342,  342,  342,  342,  342,  194,
  349,  143,  143,   48,   48,   17,   17,  218,  350,   51,
  113,  247,  247,   85,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  307,
  307,  351,  351,  351,  351,  351,  351,  351,  351,  293,
  293,  144,   45,  254,  112,  138,  327,  153,  187,  240,
   60,   57,  191,  102,   63,  297,   32,   40,  303,  239,
   36,   38,  185,   37,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    7,    8,
    6,    7,    5,    1,    2,    1,    2,    1,    1,    3,
    1,    1,    1,    1,    2,    2,    3,    0,    3,    0,
    1,    7,    8,    6,    7,    6,    7,    4,    3,    1,
    3,    3,    3,    2,    2,    2,    1,    3,    1,    2,
    2,    1,    3,    1,    1,    3,    1,    2,    2,    2,
    3,    8,    1,    1,    5,    0,    1,    3,    1,    3,
    2,    1,    3,    2,    3,    4,    2,    9,    2,    3,
    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    0,    0,    1,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    1,    1,    4,    3,    3,    3,    3,    1,    1,
    6,    3,    1,    3,    1,    3,    2,    1,    0,    2,
    3,    1,    0,    1,    1,    2,    3,    4,    0,    1,
    2,    0,    1,    1,    5,    3,    2,    0,    1,    3,
    1,    1,    6,    3,    2,    6,    2,    1,    2,    2,
    2,    0,    1,    1,    2,    0,    2,    0,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    2,    2,    4,
    1,    1,    2,    2,    2,    0,    1,    1,    1,    1,
    2,    3,    7,    6,    1,    1,    2,    2,    0,    3,
    3,    1,    2,    2,    2,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    3,    4,    1,    2,    2,    2,    3,    1,    1,
    1,    1,    2,    3,    1,    2,    1,    2,    2,    6,
    4,    7,    8,    6,    4,    2,    1,    3,    0,    2,
    4,    0,    1,    1,    3,    3,    6,    3,    0,    1,
    2,    4,    1,    3,    2,    2,    2,    1,    4,    1,
    3,    0,    1,    1,    1,    3,    3,    3,    7,    1,
    1,    3,    4,    8,    2,    1,    3,    1,    1,    6,
    3,    0,    0,    0,    0,    3,    0,    9,    1,    1,
    0,    2,    1,    1,    1,    1,    1,    3,    3,    3,
    3,    3,    3,    5,    5,    5,    5,    5,    5,    2,
    0,    4,    2,    3,    3,    2,    2,    3,    3,    2,
    1,    2,    4,    3,    2,    2,    2,    2,    3,    1,
    3,    3,    3,    2,    2,    4,    4,    5,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    1,    1,    1,    0,    2,    2,    0,    1,
    2,    2,    2,    2,    2,    1,    3,    7,    1,    0,
    1,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    2,    2,    1,    1,    1,    1,    4,    5,
    1,    3,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    3,    0,    1,    3,    1,    1,    3,
    2,    0,    2,    0,    2,    0,    3,    5,    0,    2,
    0,    4,    1,    2,    1,    1,    0,    1,    3,    2,
    1,    1,    2,    1,    4,    2,    1,    3,    8,    5,
    1,    3,    1,    1,    4,    4,    4,    1,    1,    5,
    5,    1,    3,    3,    1,    1,    7,    7,    5,    3,
    0,    1,    1,    1,    2,    0,    1,    1,    1,    0,
    3,    1,    3,    1,    3,    3,    1,    1,    3,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    1,    1,    5,    6,
    3,    4,    5,    6,    3,    4,    3,    4,    3,    4,
    4,    5,    4,    4,    3,    4,    3,    3,    8,    8,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
    3,    1,    1,    1,    1,    1,    4,    1,    3,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    1,    3,    3,    3,    3,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    4,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    6,    4,    6,    6,    4,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,  509,  510,  511,    0,  562,  653,  654,
  658,  659,  419,    0,    0,    0,    0,    0,    0,  363,
  517,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,   89,    0,  808,    0,   18,  806,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  433,    0,    0,   34,   31,   33,
    0,   32,    0,  858,    0,    0,    0,    0,   29,   62,
   64,    0,    0,    0,    0,    0,    0,    0,    0,  516,
  840,  579,    0,  580,    0,    0,    0,  860,  603,    0,
    0,    2,    0,    0,    0,    0,  406,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  407,  408,    0,  389,  851,    0,  855,
    0,  370,  857,    0,  367,    0,  605,  861,    0,  366,
    0,  515,  804,    0,  137,   97,    0,    0,   98,    0,
  684,  203,    0,  687,    0,  854,   96,  132,    0,   92,
    0,   99,  810,    0,   93,    0,   94,  864,    0,   95,
  133,  100,  571,  572,    0,  809,  807,    0,  852,   70,
    0,    0,  850,  441,  434,    0,  440,  435,  436,  443,
  437,  438,  439,  444,    0,   27,    0,   36,  679,   35,
    0,    0,    0,    0,    0,  847,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  770,
    0,  842,    0,  772,    0,    0,    0,  768,  784,  783,
  782,    0,    0,    0,    0,  774,  775,  776,  785,  786,
  802,  803,    0,    0,  582,    0,    0,  800,    0,  788,
    0,    0,  769,  666,  773,  756,  755,    0,    0,  583,
    0,    0,  757,  752,  753,  754,  787,    0,    0,    0,
    0,    0,    0,    0,  534,  523,    0,  526,  528,  529,
  530,  531,  537,  538,    0,  859,  604,    0,    0,  563,
    0,  561,    0,    0,    0,    0,  420,    0,    0,  332,
    0,  206,    0,  371,  364,  417,  418,    0,    0,    0,
    0,    0,    0,  380,    0,  339,  340,    0,  521,  519,
  805,    0,    0,    0,    0,    0,    0,    0,  140,  119,
    0,    0,   90,    0,  108,  107,    0,    0,    0,    0,
    0,    0,  843,   71,    0,    0,    0,  655,  656,  442,
    0,    0,  314,  315,  309,    0,  313,  780,    0,  682,
    0,    0,   24,    0,    0,  862,    0,   67,   65,   63,
   30,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,  789,    0,    0,    0,    0,    0,    0,
  790,  791,    0,    0,    0,    0,    0,  863,  286,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  856,  586,    0,    0,  560,    0,  535,    0,  532,
    0,  533,  558,    0,  553,    0,    0,  527,    0,  662,
    0,  497,    0,    0,    0,  567,  564,    0,  172,    0,
    0,  116,  425,  159,  160,    0,  423,    0,    0,    0,
    0,  426,    0,  421,  334,    0,  375,  377,  376,    0,
  378,    0,  372,  204,    0,    0,  252,    0,    0,    0,
    0,  384,  385,    0,  410,    0,    0,    0,    0,    0,
    0,    0,  344,  343,  429,    0,    0,  136,    0,    0,
  145,    0,  144,    0,  151,  134,    0,  149,  152,  153,
  141,    0,    0,  463,  501,  468,    0,  502,    0,    0,
  469,    0,    0,    0,  492,  505,  462,  487,  464,  465,
  466,  467,  447,  334,  445,  446,  448,    0,    0,  457,
  458,  459,  460,  461,    0,    0,    0,    0,  686,  685,
    0,  111,    0,    0,  187,    0,    0,  332,    0,  206,
    0,    0,   79,    0,    0,  674,    0,    0,    0,    0,
    0,    0,    0,    0,  688,  692,  693,  694,  695,  696,
  697,  698,  699,  700,  701,  781,    0,    0,    0,  681,
   25,    0,    0,   41,   68,    0,    0,   23,    0,    0,
  650,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  832,  833,  834,  835,  836,  837,  838,  839,    0,    0,
  766,  767,  831,    0,    0,  846,  762,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  591,  592,    0,
    0,  584,  587,  771,  814,  513,    0,  812,  512,    0,
  536,    0,  544,  540,  539,    0,    0,    0,  555,  543,
    0,    0,  660,  661,    0,    0,    0,    0,    0,  574,
    0,    0,  117,    0,    0,    0,    0,    0,    0,  374,
    0,    0,  335,  379,  455,    0,  254,    0,  248,  250,
  332,  848,  225,    0,    0,  334,    0,    0,  195,  332,
    0,    0,    0,    0,  230,  224,  227,  228,  229,  383,
  415,  414,  382,  381,    0,    0,    0,    0,    0,    0,
  342,    0,  334,    0,  142,  146,    0,  150,    0,    0,
  488,  489,  506,    0,  503,    0,    0,  495,  493,  494,
    0,    0,    0,    0,  456,    0,    0,    0,    0,  496,
  332,    0,  186,    0,  189,  191,  192,    0,    0,    0,
    0,    0,  206,   74,    0,   81,   73,  844,  476,  477,
    0,    0,    0,  691,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  311,  317,  318,  316,  683,    0,
    0,    0,    0,    0,    0,    0,   50,   57,   59,    0,
    0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  206,    0,  815,    0,    0,  827,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  830,  777,
    0,    0,    0,    0,    0,    0,  606,    0,    0,    0,
    0,    0,  514,  813,  545,  554,  549,  548,    0,  559,
  664,  663,  201,  569,  570,  568,    0,  168,  162,  169,
    0,  165,    0,    0,  164,    0,  175,  156,  155,  811,
  158,  157,  427,    0,  210,  207,  209,  211,  212,  213,
  373,  253,    0,  197,  334,  199,  335,  194,  200,    0,
    0,  231,    0,  386,  387,  334,  332,  335,    0,    0,
    0,  360,    0,  183,  184,  143,    0,    0,    0,    0,
    0,    0,  504,    0,    0,  334,  335,    0,  451,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,    0,    0,    0,    0,  321,    0,   78,    0,    0,
    0,    0,   82,   80,    0,    0,  849,  657,    0,    0,
  702,    0,    0,    0,  728,  727,    0,    0,    0,  735,
  745,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  690,    0,   61,   54,   55,   60,   56,    0,    0,
   19,    0,    0,    0,   39,    0,    0,    0,  668,  651,
    0,  667,    0,    0,    0,    0,  821,  820,    0,    0,
  817,  816,    0,  825,  824,  823,  822,  819,  818,    0,
    0,    0,  594,    0,  601,    0,  599,  595,    0,  612,
  608,  610,    0,    0,    0,    0,  551,  552,  556,    0,
    0,    0,    0,    0,    0,  176,    0,    0,    0,    0,
  257,    0,    0,    0,  232,    0,  411,  412,  388,    0,
    0,    0,    0,    0,    0,  334,  431,  335,  845,  154,
    0,    0,  471,    0,  470,  507,    0,  499,    0,    0,
    0,  449,    0,  479,    0,    0,  481,  484,  486,    0,
    0,  106,    0,  190,  334,    0,    0,  333,    0,   91,
    0,  104,    0,   87,    0,    0,    0,    0,    0,  743,
  744,    0,    0,    0,    0,  801,  792,  795,  793,    0,
    0,  794,  746,    0,    0,    0,    0,    0,    0,    0,
  736,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,   58,   51,   52,
   20,  672,  673,    0,  670,  677,  678,  675,    0,  649,
    0,    0,  205,  826,  828,  829,    0,    0,  597,    0,
    0,    0,  616,  619,    0,    0,    0,    0,  170,  166,
    0,    0,  181,  177,  335,    0,    0,  335,  258,    0,
    0,    0,  216,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  428,  473,    0,  474,    0,  121,    0,
    0,    0,  125,  127,  128,  129,  452,  454,  450,  483,
  335,    0,    0,    0,    0,  319,    0,  322,  334,   83,
    0,    0,   85,    0,    0,    0,    0,    0,    0,  748,
    0,  747,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,  652,    0,  600,    0,    0,    0,    0,  625,
    0,  578,    0,  161,  178,  131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  261,  264,  260,    0,    0,  269,  270,  271,  272,  275,
  277,  247,    0,  193,  217,    0,    0,    0,  222,  218,
  221,    0,  335,  358,  359,  355,  354,  357,  356,    0,
  472,  500,  130,  118,  126,  246,  113,  335,    0,    0,
  336,  323,    0,    0,   86,   75,    0,  714,  722,    0,
  796,  799,  797,  798,  715,  723,  718,  726,    0,    0,
  716,  724,  717,  725,  711,  719,  712,  720,  713,  721,
  669,    0,    0,  620,  617,    0,  633,  635,    0,  630,
    0,  171,    0,    0,    0,    0,  279,    0,    0,    0,
  278,    0,  267,  273,    0,  276,  262,    0,  265,    0,
  300,  266,  196,  219,  223,    0,    0,  234,  362,  338,
    0,    0,    0,  328,  329,    0,    0,   72,   88,    0,
  750,  627,    0,  634,    0,  259,  268,    0,    0,    0,
    0,  274,    0,  294,    0,  293,  308,    0,    0,    0,
    0,  303,  263,  301,    0,    0,  233,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  641,    0,
    0,    0,    0,    0,    0,  281,    0,    0,    0,  285,
    0,  307,  853,  306,  305,    0,    0,  220,    0,    0,
    0,  238,    0,  237,  331,    0,    0,    0,  105,    0,
  628,  643,  632,    0,    0,  644,    0,  640,    0,    0,
    0,    0,    0,    0,    0,    0,  295,  296,  302,  304,
    0,    0,  242,  241,  240,    0,  324,    0,  639,    0,
  646,  288,    0,    0,  280,    0,    0,    0,  297,  245,
  243,  244,    0,  749,    0,    0,    0,  298,  282,    0,
    0,    0,  645,  291,  283,  648,
};
static short yydgoto[] = {                                      17,
   18,   19,   20,   21,   22,   23, 1327,   25,   26, 1328,
   28,   29,   30, 1329,   32, 1330,  576,   95,  382,  825,
 1031,   96,  603,  826,   97,  387,  608,  119,   98,   99,
  218,  655,  109,  827,  828,  159,  189,  829,  100,  101,
  389,   72,  200,  364,  269,  571,  971,  270,  786,  543,
  452,  765,  572,  573,  574,  973,  201, 1192,   64,  149,
   65,  195, 1565, 1140,  180,  185,  187,  190,  177,  166,
  169,  182,  192,  379,  219,  715,  476,  583,  911,  357,
  563,  959, 1132,  509,  668,  936,  461,  462,  491,  351,
  544,  947, 1251,  686,  906, 1252, 1253, 1254, 1255, 1256,
  584,  178,  167,  347,  516,  348,  349,  517,  518,  519,
  520, 1110,  901,  464,  465,  891,  889,  466,  895,  890,
 1080, 1219,  896,  897, 1085,  359,  774,  775,  776,  777,
  717,  703, 1231,  545,  719,  171,  480,  647,  272,  485,
 1050,  373,  273,  274,  275, 1232, 1233,  494, 1350, 1477,
  725,  726,  713,  727,  728,  729, 1478, 1479, 1544,  329,
  489, 1089, 1331,  155,  486,  487, 1090, 1091, 1332, 1333,
 1334, 1430, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1494,
 1532, 1465, 1534,  276,  419, 1066,  978, 1431, 1471, 1472,
 1504,  375,  376,  277,  964, 1138, 1266,  965,  966,  113,
  278, 1370,  368,  872, 1076, 1312, 1442, 1443, 1444, 1445,
  870,  338,  505,  743, 1107,  506,  741,  183,   50,  333,
  160,  126,  316,  146,  323,  152,  324,  334,  733,  335,
  502,  928,  147,  317,  473,  507, 1108,   85,  157,  204,
  546,  547,  705,  948,  706,  949,  950,  550,  551,  552,
  553,  554,  941,  790,  555,  556,  557,  758,  558,  454,
  755,   34,   35,   36,   52,  162,  340,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  674,  444,  879, 1079,
  445,  446,  679,   37,  125,  312,   38,  455,  456,  690,
  429, 1217,  114,  279,  280,  281,  433,  656,  657,  658,
  659,  864,  282, 1067, 1212, 1213,  283, 1310, 1489, 1411,
 1490, 1491, 1492, 1528, 1566, 1041,   39,   40,  369,   41,
   42,  451,  834, 1039, 1194, 1198,  174,  585,  586,  587,
  588,  589,  590,  591,  592,  593,  594,  595, 1160,  988,
  990, 1161,  417,  284,  285,  286,  645,  287, 1162,  197,
  639,
};
static short yysindex[] = {                                   6292,
  923, -208, 2969,   79,  438,  358, 2693, -143, 2492,  -30,
  437, 2888, -208,  543,  435,  453,    0,  862,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  305,    0,    0,    0,
    0,    0,    0, 6246,  570,  701,  766,  453,  786,    0,
    0,  767,  505,  818,  570,  859,  766,  855,  453,  786,
    0,  875,  881,    0,  992,    0,  887,    0,    0, 1042,
  913,    0,  453,  937,  570, 1113,  913,  701,  766,  855,
  453,  786,  875,  881,    0,  766, 1005,    0,    0,    0,
 1406,    0, 1406,    0, 1048, 1066,   26, 1404,    0,    0,
    0, 1017,  453, 1017, 1094, 1110, 1152,   81, 2548,    0,
    0,    0, 5461,    0,  859, 1221,  868,    0,    0, 1141,
 1136,    0, 1325,  -83, 1288,  -74,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  424,    0,    0,  505,    0,
  -53,    0,    0, 1575,    0,  793,    0,    0,  589,    0,
 1195,    0,    0, 1173,    0,    0, 1225,    0,    0, 1373,
    0,    0, 1592,    0,  505,    0,    0,    0, 1575,    0,
  -29,    0,    0, 1330,    0, 1326,    0,    0, 1406,    0,
    0,    0,    0,    0, 1315,    0,    0, 1193,    0,    0,
 1321, 1202,    0,    0,    0, 1193,    0,    0,    0,    0,
    0,    0,    0,    0, 1170,    0,  818,    0,    0,    0,
  828, 1258,  725,  881,  780,    0, 1324, 1406, 1339, 1343,
  828, 1264,  725, 1290, 1291, 1630, 1632, 1643, 1228,    0,
 1647,    0, 1648,    0, 1651, 1657, 1659,    0,    0,    0,
    0,    0, 1661, 1231, 1242,    0,    0,    0,    0,    0,
    0,    0, 6313, 6313,    0, 5782, 1244,    0, 1672,    0,
 1109, 1625,    0,    0,    0,    0,    0, 1398, 1676,    0,
 -108, 1678,    0,    0,    0,    0,    0, 1285,  701, 1367,
 1280,  -82,  453, 1297,    0,    0,  868,    0,    0,    0,
    0,    0,    0,    0,  818,    0,    0,  390, 1322,    0,
 1301,    0,  501, 1376,  776,  -74,    0, 1458, 1011,    0,
 1017,    0,  424,    0,    0,    0,    0, 1017, 1335,  -61,
 1279,  402, 1712,    0, 6692,    0,    0,   -9,    0,    0,
    0, 1709, 1709,  505, 1400,  505,  901, 1225,    0,    0,
 6699,   89,    0, 1335,    0,    0, 1484, -148, 1734,  453,
 1517,  701,    0,    0, 1743,  102, 4204,    0,    0,    0,
 1319,  934,    0,    0,    0, 1745,    0,    0, 1234,    0,
  453, 1359,    0,  766, 1337,    0,   32,    0,    0,    0,
    0,  453,  999,  453,    0, 1479,  766, 1760,  828, 1408,
  729, 5816,  117,    0,  859, 6313,  772,  835, 1053, 1792,
    0,    0,  928,  928,  543, 1142, 1766,    0,    0, 5925,
 1351, 6313, 6313, 6313, 6313, 6313, 6313,   37, 1360, 5816,
 1353,    0,    0,   33,   23,    0, -168,    0,  328,    0,
  328,    0,    0, 1772,    0,  345, 1390,    0, 1759,    0,
   90,    0, 1542, 1542, 1782,    0,    0, 1444,    0,  155,
 1485,    0,    0,    0,    0,  505,    0, 1709, 1709, 1709,
 1709,    0, 1789,    0,    0, 1557,    0,    0,    0, 1538,
    0, 6699,    0,    0, 6699, 1286,    0, 1575, 1577, 1397,
 5530,    0,    0, -111,    0, 1397,  946,  793,    0, 1462,
 1424, 1396,    0,    0,    0,  405, 1470,    0, 1412,  855,
    0,  505,    0, 1593,    0,    0,  901,    0,    0,    0,
    0,   57, 1426,    0,    0,    0, 1430,    0, 1472, 1839,
    0, 1531, 1842,  -47,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1794,  628,    0,
    0,    0,    0,    0,  100, 1846, 1847, 1842,    0,    0,
 1626,    0,  505,  505,    0,  -61,  589,    0, 1505,    0,
 1480, 1853,    0, 6551,  103,    0, 1510, 1515, 1862, 4453,
 1863, 4301, 4957,  -71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1320,  934,  818,    0,
    0, 1392, 1468,    0,    0, 1446,  725,    0, 1591, 1872,
    0, 1591, 1392, 1598, 1602,  766, 6313, 6313, 1650, 6313,
 1884, 6313, 1883, 1450, 6313, 6313, 6313, 6313, 6313, 6313,
    0,    0,    0,    0,    0,    0,    0,    0, 1610, 6313,
    0,    0,    0, 1109, 1369,    0,    0, 1655,  928,  928,
  428,  428,  703,   37, 1896, 1901, 1140,    0,    0, 4453,
 1614,    0,    0,    0,    0,    0, 1039,    0,    0,  420,
    0, 1499,    0,    0,    0,  453, -149,  453,    0,    0,
 5816,  818,    0,    0, 1351,  992,  992,  390,  818,    0,
  505,  505,    0, -147, 1412, 1412, 1494,  855,  776,    0,
 1910, 2329,    0,    0,    0, 1685,    0, 1017,    0,    0,
    0,    0,    0, 1697, 1930,    0, 1538, 1687,    0,    0,
 1629, 1634, 1406, 1699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  855, 1017, 6616, 1588, 1594, 1605,
    0,  855,    0,  680,    0,    0, 1561,    0,   63, 1576,
    0,    0,    0,  855,    0, 1839,   93,    0,    0,    0,
 1688,   93, 1578,   93,    0, 1954,  855,  855,  855,    0,
    0, 1642,    0, 1414,    0,    0,    0,   -9, 1583,  453,
 1489,   47,    0,    0, 1963,    0,    0,    0,    0,    0,
  102, 1544, 1322,    0, 1322, 4824,  387, 6313, 6313, 4550,
 1964,  811, 4693, 6313, 4790,  706, 4930, 5027, 5994, 5081,
 5167, 5310, 4453, 4453,    0,    0,    0,    0,    0, 1337,
  766,  786, 1337,  875,   73, 1962,    0,    0,    0, 1392,
 1623,    0, -129, 1644, 5816, 1644, 1967, 1962, 1392,  410,
 1698, 1653, 1696,    0, 1710,    0, 1899, 6313,    0, 2061,
 2212, 2349, 2441, 2515, 2606, 6313,  759, 6313,    0,    0,
 1140, 1980, 5816, 1136,   37, 1633,    0, 1639, 1641, 1679,
 1750, 1704,    0,    0,    0,    0,    0,    0, -189,    0,
    0,    0,    0,    0,    0,    0, 1987,    0,    0,    0,
 1491,    0, 1709, 1771,    0, -147,    0,    0,    0,    0,
    0,    0,    0, 4453,    0,    0,    0,    0,    0,    0,
    0,    0, 1741,    0,    0,    0,    0,    0,    0, 1406,
 1406,    0, 2008,    0,    0,    0,    0,    0, -121, -120,
  651,    0, 1785,    0,    0,    0, 1596,   79, 1508, 1636,
 1685, 2011,    0, 1412, 1525,    0,    0,  704,    0, 2000,
 1596,  834,  855, 2014, 2020, 2021, 1741, 1709, 1485,  -61,
    0, 1470,  543, 1609, 1628,    0,   17,    0,  855, 1675,
 1761, 6551,    0,    0,  855, 1763,    0,    0, 2033, 2035,
    0,  795, 1109, 2041,    0,    0, 1109, 2043, 2046,    0,
    0, 1725, 2044, 1109, 2045, 1543, 2049, 1109, 2053, 6313,
 6313, 1964, 6313, 6076, 2059, 1109, 2065, 2070, 1109, 2072,
 6313, 1109, 2073, 1109, 2074, 2076, 1109, 2078, 2080, 1109,
 2086,    0, 1824,    0,    0,    0,    0,    0, 1773, 1392,
    0, 1392,   73, 1962,    0,  151,  151,   11,    0,    0,
 1526,    0, 1967, 1962, 2085,  410,    0,    0, 6699, 2089,
    0,    0, 2627,    0,    0,    0,    0,    0,    0, 2643,
 1360, 1109,    0, 1109,    0, 1527,    0,    0, 1140,    0,
    0,    0,   37, 1670, 4453, 1646,    0,    0,    0, 1713,
  505, 1747, 1412, 1748, 1412,    0,  532, 1694, 1877, 1741,
    0, 6313, 1855, 1738,    0, 4453,    0,    0,    0, 1762,
 1765, 1769, 1775, 1778, 1780,    0,    0,    0,    0,    0,
 2112,   79,    0, 1494,    0,    0,   93,    0, 2329, 1779,
   93,    0,   93,    0, 1685, 2118,    0,    0,    0, 1877,
 1412,    0, 1485,    0,    0, 5461, 1890,    0,  -25,    0,
 1987,    0, 2129,    0, 2130,  505, -125, 2131,  505,    0,
    0, 6313, 1752, 1752,  543,    0,    0,    0,    0, 2132,
 1536,    0,    0, 1752, 1752, 6313, 1752, 1752, 1338, 1109,
    0, 1635, 6313, 1109, 1752, 1752, 1752, 1752, 1109, 1752,
 1752, 1752, 1752, 1752, 1752, 1795,    0,    0,    0,    0,
    0,    0,    0, 1749,    0,    0,    0,    0, 5816,    0,
  410, 2085,    0,    0,    0,    0, 1614, 5816,    0,  664,
 1908, 2152,    0,    0,  -71, 2157, 1801, 1709,    0,    0,
  505,  680,    0,    0,    0,  818, 5390,    0,    0, 1109,
 1542, 1855,    0,  816,  453,  553, 1756, 1864, 1764, 1900,
 1866, 1904, 1741,    0,    0, 2167,    0, 2168,    0, 1857,
 1542, 1779,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  680, 1785, 1892, 1829,    0, 1583,    0,    0,    0,
 1848, 1865,    0, 1685, 1850, 1109, 2183, 2184, 6313,    0,
 1920,    0, 2187, 2189, 1109, 2190, 2191, 6313, 6313, 1109,
 2193, 2195, 2197, 2198, 2199, 2200, 2201, 2202, 2205, 2207,
    0,  151,    0, 1704,    0, 4453, 1351, 1670, 1412,    0,
  554,    0, 1412,    0,    0,    0, 6699,  570,  604, 2192,
 1322, 2209, 1909, 6313, 2204, 2220, 2214, 2215, 1934, 2217,
    0,    0,    0, 4398, 2221,    0,    0,    0,    0,    0,
    0,    0, 2238,    0,    0, 1929, 1916,  453,    0,    0,
    0, 1406,    0,    0,    0,    0,    0,    0,    0, 1877,
    0,    0,    0,    0,    0,    0,    0,    0,   46, 1360,
    0,    0, 6313,  505,    0,    0,  505,    0,    0,  759,
    0,    0,    0,    0,    0,    0,    0,    0, 1109, 1109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1801,  -71,    0,    0, 1164,    0,    0, 1915,    0,
 2246,    0, 2228, 2229,  766, 6313,    0, 1948, 4453, 1875,
    0, 4453,    0,    0,   25,    0,    0,  638,    0,  361,
    0,    0,    0,    0,    0, 1406, 1906,    0,    0,    0,
   46, 2249, 1140,    0,    0, 1614, 1109,    0,    0, 1360,
    0,    0, 1412,    0,  660,    0,    0, 6174, 1997,   25,
  567,    0,  579,    0, 1009,    0,    0,  570, 1835,   79,
   86,    0,    0,    0, 1906, -116,    0, 1913, 1917, 1140,
 2258,   46, 1956, 1704, 2262, 1614, 2265,  453,    0, 2267,
 2266, 1100, 5545, 1902, 2268,    0,  175, 1888, 2006,    0,
   25,    0,    0,    0,    0, 5390,  638,    0,  478,  478,
 2018,    0, 1882,    0,    0, 1140,   46, 1801,    0, 1704,
    0,    0,    0,  660, 2287,    0,  701,    0, 1142, 1567,
   31, 2269, 2036, 2024, 5390, 5390,    0,    0,    0,    0,
 1867,  -35,    0,    0,    0, 1105,    0, 1801,    0,  701,
    0,    0,   25, 2288,    0, 1544, 5390, 2027,    0,    0,
    0,    0, 4453,    0, 2299, 2303, 1568,    0,    0, 5390,
  -71,  701,    0,    0,    0,    0,
};
static short yyrindex[] = {                                      0,
    0,  108,  -67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  215, 5642,    0,    0,    0, 2346,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  346,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  853,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2013,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1965,    0,    0,    0,
   67,    0,   67,    0,    0,    0,    0, 1971,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  870,    0,    0,    0,
 2982,    0,    0,    0,   92,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -33,    0,    0,    0,    0,  598,    0,
  872,    0,    0,    0,    0,    0,  985, 1083,    0, 6782,
    0,    0,    0,    0,    0,    0,    0,    0,  -33,    0,
  412,    0,    0, 2316,    0,    0,    0,    0, 2094,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  958,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  984,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1102,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1262,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  153, 1496,    0,    0,    0,    0,    0,    0, 2047,    0,
  122,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  609,    0,    0, 1064,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1084,    0, 2081,    0,    0,
    0,    0, 1088,    0,    0,    0,    0,    0, 2098,  629,
 6463,    0, 1104,    0,    0,    0,    0,  161,    0,    0,
    0, 1907, 1907,    0,    0,    0, 1137, 1384,    0,    0,
    0,    0,    0, 2098,    0,    0,  652,    0,    0,    0,
    0,    0,    0,    0, 6468, 1975,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1153,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1178,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1192,    0,    0,
 6377,    0, 6377,    0,    0,    0, 6377, 6377, 6377,    0,
    0,    0, 2133, 2278, 6377,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  447,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
  121,    0,    0,  683,    0,  684,  716,    0,    0,    0,
  958,    0,  852,  852,  359,    0,    0,  317,    0, 3210,
  113,    0,    0,    0,    0,    0,    0, 1907, 1907, 1907,
 1907,    0,  173,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,    0,    0, 2103,    0,    0,
    0,    0,    0, 2081,    0,    0,  245,    0,  432, 1898,
    0,    0,    0,    0,    0,    0,  822,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1252,    0,    0,    0,
    0, 1810, 1487,    0,    0,    0, 3829,    0,    0, 3912,
    0,    0, 4041,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1401, 2304,    0,
    0,    0,    0,    0, 4102, 3798,    0, 4041,    0,    0,
    0,    0,    0,    0,    0,  629,  906,    0,    0,    0,
    0, 1960,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  152,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
    0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  845,    0,    0,    0, 1666, 2388, 2583,
 1803, 1973,    0,    0, 3607,  340,   78,    0,    0,    0,
  661,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  321,    0,    0,    0,
    0,    0,    0,    0,    0,  277,  277,    0,    0,    0,
    0,    0,    0, 4352,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  933,    0,    0,    0,    0,
    0,    0,    0, 2333,    0,    0, 2038, 2456,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  205,  409,  612,
    0,    0,    0, 1405,    0,    0,    0,    0,    0, 3996,
    0,    0,    0,    0,    0, 3912,    0,    0,    0,    0,
  333,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  105,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6634,    0,    0,    0,    0,    0,    0,    0,    0,
 2066,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1292, 1300,    0,    0,    0,    0,
    0,    0,    0, 1310,    0, 1310, 1316, 1318,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2031, 1257,    0, 1572,    0, 2037,    0, 2042, 2054,    0,
    0,  234,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  364,    0,    0,    0,
    0,    0, 1907, 1918,    0, 4417,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2114,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1328,    0,    0,    0,    0,    0,    0,    0,
 4128,    0,    0,    0,    0,    0,    0,    0,    0, 1023,
    0,    0,    0,    0,    0,    0, 2114, 1907, 1331,  629,
    0, 2125, 5642, 1332,   53,    0,    0,    0,    0, 6634,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  495,    0,    0,    0,  884,    0,    0,    0,
    0,    0,    0, 2534,    0, 2696,    0, 2738,    0,    0,
    0,    0,    0,    0,    0, 2780,    0,    0, 2844,    0,
    0, 2893,    0, 2957,    0,    0, 3046,    0,    0, 3095,
    0,    0,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1292, 1340,    0, 1972,  183,    0,    0,    0,
    0,    0, 1344, 1366, 1409,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  300, 1116,    0,  208,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,    0,  900,    0,    0,    0, 3009,
    0,    0,    0, 1940,    0,    0,    0,    0,    0, 2122,
    0,    0, 1194,    0,    0,    0,    0,    0,    0,  621,
  627,  730,  750,  752,  799,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  154,
    0,    0,    0,    0, 4144,    0,    0,    0,    0,    0,
    0,    0, 1411,    0,    0,    0,    0,    0,    0,    0,
 1451,    0,    0,    0,    0,    0,  329,    0,    0,    0,
    0,    0,    0,    0, 6377,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3159,
    0, 3201,    0, 3243,    0,    0,    0,    0, 3333,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1456,    0,    0,    0,    0,  269,    0,    0, 2031,
  650,  615,    0,    0,  357, 1120,  297, 1907,    0,    0,
    0, 1793,    0,    0,    0,    0,    0,    0,    0, 2359,
 1201, 2160,    0, 2081,    0,    0,    0,    0,    0,    0,
    0,    0, 2114,    0,    0,    0,    0,    0,    0,    0,
 1463,  642,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  206,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   18,    0, 3356,    0,    0,    0,    0,
    0,    0,    0,    0, 3405,    0,    0,    0,    0, 3494,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  183,    0,   39,    0,    0,    0,    0,    0,    0,
 2364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  181,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3558, 3578,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2367, 3713,    0,    0,    0,    0,    0, 2372,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1226, 1232,    0,    0,    0,
    0,   82,  644,    0,    0,   56, 2359,    0,    0,  300,
    0,    0,    0,    0, 2364,    0,    0,   29,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2781,    0,    0, 3426, 3732, 2031,
 1304,    0,    0,   55,    0,  269,    0, 1175,    0,    0,
 2374,    0,    0, 2354,   35,    0, 2111,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  677,    0,   50,    0,   39,
    0,    0,    0, 2364,    0,    0,    0,    0, 2375,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2031,    0, 2367,    0,    0,
    0,    0,    0, 2361,    0,    0,    0, 5894,    0,    0,
    0,    0,    0,    0, 2377,    0,    0,    0,    0,    0,
 3707,    0,    0,    0,    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2421,    0,    0, 2423,
    0,    0,    0,    8,    0, 2424,    1,  258,  -55, -544,
 1394,  614, -277, -487, 2413, 2203,    0,  -31,    0, 2210,
  -86,  -37,    0,  264, -297,  -36,  -51, -169, 2206, 1082,
 1830,    0,    0,    0, 1347,    0,    0,  -39, 1469, -412,
  -43, -862, 1873, 1668, -281, 1474, 2365, -301,    0,  -49,
    0,  825,  -42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -589, -595, 1486, -443,  -40, -824,    0,
    0,    0,    0, -325, -488, -482, 1498, -328,  -45,    0,
 -444,    0,    0, -431, 1341,    0, 1207,    0,    0,  307,
 -555,    3,    0,    0,    0,    0, 2115,    0, 1949, 2155,
 -234, 1519, -665,    0,    0,    0, -640,    0,    0,    0,
    0,    0,    0, 1580,    0,    0,    0, 1511, 2142, 2143,
    0, 1768,    0, -452, 1777,  -41, -483, -645,  -52,    0,
    0, -563, -657, -203, -642,    0, 1246, -908,    0, 1004,
 1253,    0, 1993,    0,    0,    0, 1012, 1021,  991,  -73,
 2148, -830, -931,    0,    0, 1799,    0, 1413, -336,    0,
    0,    0, -206,    0,    0,    0,    0,    0,    0,    0,
    0, -530,    0,   61,    0,-1212,  955, 1086,    0, 1015,
    0,    0, 2146, -204,    0,    0,    0,    0, -961, -372,
 1387,    0, -413,-1112,-1172, -756,    0,-1238, 1078,  225,
 -415, 1957, 1751, 1563, 1263,    0,    0,   -1,    0,    0,
    0,    0,    0, 2196,    0,    0, 2218, 2040,    0,    0,
    0,    0,    0, 2219,    0,    0,    0,    0,  -15,    0,
    0,    0, -320, 1781, -317, 1422, -406,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1988,    0,    0,
 1796,    0,    0,    0, 2535,    0,    0,    0,    0, 2252,
    0,    0,    0,    0, 2116,    0, 2110,    0,    0,    0,
 1878,    0,    0,    0,    0,    0,  -80,    0, 1871,    0,
 -809,    0, 1383,    0, 2134, -380, 2124,    0, -556, 1911,
    0,    0,  -54, 1358,    0, 1261, -939,    0, 1259,    0,
 1047,    0, 1085,    0, 1000,    0,    0,    0, 2126,    0,
    0,    0, 1968, 1740, -947,    0, -165,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3373, 1156,
 1579,    0,    0,    0,    0, -202, 2158, 2208, 1306,    0,
    0,
};
#define YYTABLESIZE 7275
static short yytable[] = {                                     173,
  121,  172,   69,  151,   68,  175,  220,   31,  170,  154,
  377,  374,  378,  165,  181,  661,  156,  510,  515,  179,
  744,  619,  687,  186,  794,  205,  797,  184,  669,  704,
  548,  213,  707,  549,  816,  208,  210,  683,  718,  883,
  482,  209,  640,  310,  908,  212,  716, 1061,  215,  631,
  724,  892,  320,  388,  622,  615,  217,  121,  480,  910,
  227,  480,  229,  388,  577,  211,  307,  667,  837,  224,
 1553,  228,  271,  268,  559,  607,  654,  589, 1115,  622,
  472,  325,  267,  939,  779, 1441,  970,  289,  267, 1195,
  671,  575, 1093,  287, 1304,  208,  749,  861,  450,  887,
  761,   67,  361, 1099,  112,  354,  938,  518,  631,  325,
  680,  320,  422,  622,  615,  590, 1030,  288,  589,  614,
  546,  589, 1120,   67,  224,  838, 1130,  922,  624, 1507,
  559, 1402,  693,  682, 1214,  353,  589,  944,  907,  767,
  325,  393,  695,  696,  697,  698,   67,   67, 1272,  671,
  575,  623,  665,  123,  208,  431,  590, 1228,  621,  590,
  430,  787,  173,  112,  380,  585,  518,  377,  374,  378,
  548,  422,  424,  549,  590,  396,  309, 1268,  874,  546,
  680, 1102,  478,  313, 1234, 1509,  560,  624,  515,  383,
  813, 1036,  623,  665,  692,   67,  665,  102, 1261,  383,
  564,  439, 1480,  326,  347,  182,  898,  899,  721,  893,
  623,  665,  123,  268,  518,  605, 1077, 1100, 1501,  430,
  750,  680,  413,  414,  680,  416,  490,  913,  457,  759,
  249,  424,  314,  622, 1267,  102,  919,  670,  355,  680,
  120,  478,  102, 1516,  416, 1495,  436,   51,  602,  503,
  173,  602,  449,  173,  877,  453,  294, 1022, 1023,   86,
  504,  443, 1259,  347,  182, 1561,  602, 1078,  560,  106,
  102,  878,  916,  518,  622,  173,  573,  172, 1546,  481,
 1530,  327,  894, 1244,  926, 1033,  484,  957,  416,  722,
  497,  480,  622,  500, 1043, 1045,  631,  202,  760,  933,
  881,  714,  440,  416,  511, 1372,  513, 1037, 1069,  615,
  103, 1518,  611,  163,  164,  814,  577, 1562,  565,  569,
  573, 1101, 1103, 1234, 1094, 1095, 1510,  480,  567,  664,
  723, 1158,  122, 1484,   14,  573,  356,  631,  841,  588,
  624, 1273, 1034,  615,  315,  566,  604, 1548, 1087,  601,
  945, 1044,  432,  208, 1401,  631,  621,  441,  565,  604,
  609,  271,  612,  576,   69,  624,  234,  383, 1214,   84,
  422, 1142, 1196, 1520,  442,  577,  111, 1141,  249,  644,
  588,  648,  649,  650,  651,  652,  644,  615,  678,  271,
 1506,  122,  963,  818,  817,  378,  589,  621,  588,  168,
 1316,  233,  208, 1342,  566, 1343,  589,  623,  345,  589,
  325, 1376, 1360,  325,  710,  621,  665,  565,  589,  422,
  620,  613,  576,  691,  430, 1157,  694,  981, 1439,  480,
  424,  334,  575,  123,  590,  622, 1366,  388, 1533,  289,
 1220,  969,  585, 1098,  590,  287,  624,  590, 1247,  720,
  680,  622,  615,  112, 1040,  874,  590,  624,  671,  613,
  624,  908,  223,  546,  903,  589,  745,  345,  347,  900,
  623, 1092,  746,  665,  589,  882,  910,  168,  325,  424,
  623,  665, 1097,  623,  480,  168,  606,  624,  575,  976,
  631,  168,  623,  226,  737,  622,  615,  153,  909,  378,
  972, 1202, 1119,  590,  631,  624,  118,  320,  666,  622,
  615,  173,  590,  172,  208,   66, 1210,  518,  589, 1215,
   69,  900,  325,  772,  773,  624,  546, 1029, 1438,  546,
  589,  422,  208,  575,  325,  737,  325,   66,  737,  623,
 1236,  796,  367, 1440,  173,  546,  819,  766,  623,  226,
  478,  665,  622,  737,  182,  907,  590,  689,  430,  787,
   66,   66, 1049,  788,  680,  589,  208, 1083,  590,  624,
 1450,  546, 1225,   69,  622,  789,  842,  843,  604,  845,
 1314,  847,  575,  624,  850,  851,  852,  853,  854,  855,
 1136,  424,  623, 1353, 1222,  573, 1224,  341,  689,  857,
  615,  689,  347,  590, 1203,  665,  623, 1498,  541,   66,
  122,  346,  122,  665,  614,  631,  689,  573,  602, 1499,
  352,  622, 1485, 1382,  477,  107,  353,  173,  624,  449,
  622,  624, 1131,  173,  173,  453,  380,  631,   84,  623,
  271,  124, 1262,  326,  443, 1451,  880, 1207,  813,  618,
 1024,  888,  888, 1027,  902,  614,  341,  577,  588, 1065,
  615, 1404, 1243,  677,  566,  615,  484,  541,  588, 1473,
  346,  588,  345,  614,  622,  621,  327,  565,   73,  352,
  588,  318,  547,  557,  631,  353,  566,  326,  972,  496,
  618, 1263,  123,  618,  925,  927,  624,  621,  109,  565,
  124,  615,  326,  439,  576,  672,  738,  421,  618,  104,
 1248,  122,  979,  422,  980,  542, 1258, 1381,  764,  615,
  327,  622,  235,  954,  955,  956,  550,  588,  548,  349,
  319,  549, 1188,  924, 1190,  327,  588,  631,  820, 1315,
  932,  547,  557,  739,  621,  124,  858, 1121,  967,  348,
 1403,  351,  942,  621,   70,   71,  737,  982,  983,  987,
  115, 1547,  994,  996,  998,  624, 1006, 1009, 1012, 1014,
 1017, 1020, 1028,  814,  542,  624,  673,  550,  624, 1367,
  588,  700, 1279, 1025, 1159, 1026,  378,  624,  349,   69,
  724, 1564,  588,  813,  271,  860, 1122,  621,  350, 1344,
  425,  423,  111,  424,  693,  426,  345, 1053,  348, 1068,
  351,  621, 1428,  737,  813, 1060,  737, 1062, 1303, 1364,
 1406,  361, 1064,  737, 1412, 1373,  737,  588,  813,  847,
  737, 1193, 1193, 1197,  624,  737,  425,  423,  737,  424,
  813,  426,  320,  624,  621,  336,  112,  740,   66,  459,
  168,  202,  520,  823,  737, 1541,  341,  350,  460,  441,
  321,  341,  226, 1461, 1413,  116, 1463,  341,  406,  525,
  386,  522,  117,  109,  109,  346,  689, 1121,  737,  689,
  361,  737,  737,  706,  352,  778,  689,  624,  778,  689,
  353,  737, 1313,  689,  322,  202, 1542, 1407,  689,  626,
 1467,  689,  847, 1188,  763,  173,  226,  172,  737, 1126,
  202,  520,  173,  118,  380,  909,  378,  689,  814,  334,
  122,  124, 1408,  337,  706, 1144, 1125,  706,  525, 1497,
  522, 1148,  480,  614,  624,  737,   69,  778, 1111,  814,
  626,  689,  706, 1543,  689,  689,  614,  737,  226,  737,
 1468,  541, 1104,  814,  689,  614, 1446,  624,  626, 1169,
 1170, 1469, 1172, 1174, 1487,  814,  163,  164,  618,  425,
 1179,  689,  326,  480,  426,  326,  480, 1000,  371,  615,
 1409,  618,  737,  312,  138,  866,  541,  613,  111, 1105,
  618,  480,  615,  349, 1001,  341,  268, 1429,  689,  867,
 1554,  615,  614, 1407, 1065,  327, 1415, 1571,  327,  346,
  689,  614,  689,  348,  541,  351,  624,  541,  352,  173,
  613, 1211, 1567,  868,  353,  547,  557, 1483, 1408,  226,
  148,  111,  617,  541,   69,   69, 1486,  618,  421, 1002,
  326,  888,  312,  138,  422,  689,  618, 1306,  615, 1416,
  330, 1230, 1501,  331,  468,  614, 1152,  615,  542,  541,
  547,  557,  350,  524, 1483, 1470,  453, 1500, 1003,  614,
  226,  934,  935,  327,  421,  625, 1383,  869,  378,  428,
  422,   88,  847,  368,  326,  361, 1409,  369,  547,  557,
  618,  547,  557,  542,  111,  271,  326, 1193,  326,  332,
 1483,  615,  614,  365,  618,  469, 1271,  547,  557, 1275,
   69, 1276, 1246,  110,  110,  453,  202,  327,   90,  629,
  118,  542,  524,  847,  542, 1285,  847,  349,  859,  327,
 1483,  327, 1290,  547,  557, 1004,  147,  618,  627,  470,
  542,  847,  368,  847,  191,  706,  369,  348,  615,  351,
  425,  423,  310,  424,  202,  426,  779,  471,  271,  779,
  629,  150,  365,  991,  341,  214,  542, 1064,  385, 1539,
  202,  173,  173,  172,  449,  341,  161,   40,  629,  468,
 1317,  888,  641,  425,  423,  386,  424,   91,  426,  992,
  480,   48,  202,  214, 1346,  147,  350,   92, 1558, 1559,
  202,  514,  706, 1352, 1452,  706,  480,  421,  779,  372,
  290,  310,  706,  422,  371,  706, 1347,   43,  626,  706,
 1569, 1453,   93, 1348,  706,  680,  153,  706,   44,  239,
  469,  239,  268, 1575,  214,   45,   40,  214, 1380,  480,
  626,  202,  480,  706,  202,  291,  158, 1389, 1390,  459,
   48,  148,  214,  173, 1065, 1211,  193, 1349,  460,  202,
   46,  847,  381,  138,  470, 1437,  680,  706, 1414,  680,
  706,  706,  239,  292,  600,  239,  293,  599,  168,  173,
  706,  449,  471, 1420,  680,  138,  242,  626,  118, 1065,
  239,   38,  294, 1187,  194, 1189,  626,  706,  478,   21,
   69,  843,  847,  847,  847,  847,  847,  859,  847,  676,
  148,  479,  111,   66,  138,   44, 1436,   46,  295,  176,
  847,  847,  847,  847,  706,   47,  709,  432, 1418,  708,
  114,  337, 1447,  138, 1448,  188,  706, 1449,  706,   22,
  626,   94,  138,   45,  480,  196,  847,  847,  138, 1475,
   38,  480,  847,  121,  847,  847,  629,   48,   21,  847,
  815,   49,  847,  598,  198,   47,  138,  847,  676,  480,
  173,  706, 1464,  199,   44, 1459,   46, 1458,  847,  425,
  423,  847,  424,  139,  426,  847,  432,  847,  421,  114,
  337,  249,  250,  251,  422,  163,  164,  203,   22,  480,
  455,  847,   45,  480,  182,  173,  216, 1464,   42,  859,
  115,  731,  858,  732,  254,  255,   14, 1064, 1502,  259,
  260,  421,  847,  847,   47,  121,  866,  422,  847,  847,
  847,  221,  847,  847,  847,  206,  847, 1525,  629, 1488,
  867,  455,  139,  610,  455,  217,  173,  225, 1537,  222,
  103,  173, 1529,  449,  961,   43,  847,  960,  847,  455,
  629,  866,  202,  182,  868,  239,  121,   42,   69,  115,
 1505,  226, 1488,  214, 1526,  867,  173,  226, 1464,  230,
  173,  173,  449,  449, 1551, 1466,  490, 1527, 1563,  847,
  849,  425,  423,  231,  424,  751,  426,  665,  173,  868,
 1464,  121,  173,  680,  449,  680,  847,  629, 1488,  103,
  884,  885,  642,  680,   43,  173,  629,  449,  869,  680,
 1466,  202,  242,  847,  873,  847,  490,  490,  847,  968,
  490, 1082,  783,  847, 1081,  232,  751,  751,  751,  751,
  751,  847,  751,  847,  365,  490,  680,  847, 1113,  642,
  847, 1112,  370,  869,  751,  751,  751,  751,  289,  305,
  629, 1538,  642,  847,  847, 1118, 1200, 1209, 1117, 1199,
 1208,  596,  226,  847,  847,  847, 1282,  490,  591, 1281,
  847,  342,  847,  847,  425,  423,  847,  424,  751,  426,
  847, 1466,  591,  847,  226,  847,  306,  847,  308, 1288,
  591,  226,  847,  847,  680,  847,  311, 1552, 1574,  680,
 1208, 1501,  596, 1466,  328,  596,  591,  421,  343,  339,
  344,  847,  847,  422,  847,  328,  680,  249,  250,  251,
  596,  163,  164,  680,  341,  226,  350,  352,  847,  328,
  847,  847,  847,  345,  360,  847,  358,  328,  847,  847,
  254,  255,  362,  363,  367,  259,  260,  366,  847,  394,
  384,  395,  139,  328,  392,  761,  397,  680,  346,  401,
  591,  402,  847,  399,  400,  847,  425,  423,  455,  424,
  455,  426,  403,  182,  139,  455,  405,  406,  455,  404,
  407,  847,  411, 1047,  425,  423,  408,  424,  409,  426,
  410,  455,  847,  412,  418,  182,  761,  761,  761,  761,
  761,  420,  761,  139,  847,  427,  847,  328,  428,  430,
  820,  435,  847,  434,  761,  761,  761,  761,  437,  421,
  438,  447,  139,  467,  182,  422, 1048,  425,  423,   14,
  424,  139,  426,  458,  490,  475,  488,  139,  495,  847,
 1051,  425,  423,  182,  424,  498,  426,  751,  761,  751,
  490,  182,  182,  490,  490,  139,  490,  751,  182,  508,
  562,  490,  512,  566,  490,  751,  249,  250,  251,  455,
  568,  751,  570,  618,  751,  622,  182,  490,  598,  626,
  628,  630,  182,  490,  821,  602,  490,  386,  182,  613,
  182,  455,  764,  607,  259,  260,  642,  751,  455,  478,
  616,  646,  660,  432,  751,  676,  751,  751,  680,  681,
  751,  685,  421,  182,  751,  688,  689,  751,  422,  751,
  822,  751,  699,  459,  701,  823,  751,  751,  702,  751,
  711,  824,  455,  764,  764,  764,  764,  764,  182,  764,
  478,  182,  386,  478, 1166,  751,  751,  712,  751,  735,
  736,  764,  764,  764,  764,  490,  737,  742,  478,  747,
  665,  753,  751,  751,  751,  751,  751,  752,  754,  751,
  756,  757,  751,  751,  762,  768,  769,  490,  780,  771,
  596,  782,  751,  596,  490,  764,  783,  792,  490,  791,
  596,  793,  795,  596,  830,  490,  751,  596,  833,  751,
  831,  835,  596,  844,  421,  596,  425,  423,  839,  424,
  422,  426,  840,  490,  846,  751,  848,  761,  490,  761,
  856,  596,  421, 1462,  421,  863,  751,  761,  422, 1052,
  425,  423,  871,  424,  865,  426, 1289,  875,  751,  904,
  751,  761,  900,  490,  761,  596,  751,  490,  995,  596,
  999,  763, 1007, 1010,  371, 1015, 1018, 1021,  596,  915,
  914,  714,  765,  920,  929,  421,  923,  761,  921,  937,
  930,  422,  268,  751,  761,  596,  761,  761,  946,  421,
  761,  931,  940,  953,  761,  422,  951,  761,  958,  761,
  963,  761,  975,  989,  977, 1032,  761,  761, 1035,  761,
 1030, 1038,  596,  765,  765,  765,  765,  765, 1046,  765,
 1063, 1070, 1073, 1074,  596,  761,  761, 1071,  761, 1072,
  599,  765,  765,  765,  765, 1075, 1084,  208,  425,  423,
 1088,  424,  761,  426,  761,  761,  761, 1096, 1106,  761,
  182, 1116,  761,  761, 1127, 1496, 1109, 1123, 1114,  596,
 1128, 1129,  761, 1137,  764,  765,  764,  478, 1139,  969,
 1146,  182, 1149, 1150,  764, 1151,  761, 1163,  208,  761,
 1153,  208, 1154, 1164, 1165,  813,  478,  478, 1167,  478,
  371,  764, 1168,  182,  478,  761,  208,  478, 1175,  182,
 1186, 1054,  425,  423, 1176,  424,  761,  426,  268, 1177,
  478, 1178, 1180, 1181,  764, 1182,  478, 1183,  761, 1184,
  761,  764,  182,  764,  764, 1185,  761,  764, 1201, 1204,
  252,  764,  759, 1216,  764, 1218,  764, 1221,  764, 1223,
 1226,  182,  490,  764,  764, 1235,  764, 1227, 1237,  182,
  182, 1238, 1245,  761,  421, 1239,  182, 1250, 1260,  215,
  422, 1240,  764,  764, 1241,  764, 1242, 1265, 1269, 1155,
 1270, 1274, 1280,  759,  182,  759,  759,  759,  421,  764,
 1301,  764,  764,  764,  422, 1302,  764, 1307,  478,  764,
  764,  759,  759,  759,  759, 1308, 1309, 1311, 1354,  764,
  215, 1357, 1355,  215, 1358, 1359, 1356, 1361, 1362, 1363,
  478,  182, 1369,  764, 1371,  239,  764,  478,  215, 1374,
 1375, 1377,  182, 1378, 1379,  759,  478, 1385,  478, 1386,
 1387, 1388,  764, 1391,  765, 1392,  765, 1393, 1394, 1395,
 1396, 1397, 1398,  764,  765, 1399,  478, 1400, 1419,  103,
 1417,  478, 1055,  425,  423,  764,  424,  764,  426, 1422,
 1435,  765, 1421,  764,  631,  632,  633,  634,  635,  636,
  637,  638, 1423, 1424, 1425, 1426,  421,  758, 1433, 1432,
  478, 1434,  422, 1454,  765, 1455, 1456, 1457, 1460, 1476,
  764,  765, 1482,  765,  765, 1503, 1511,  765, 1515, 1517,
 1513,  765, 1519,  480,  765, 1521,  765, 1523,  765, 1524,
 1536, 1208, 1531,  765,  765,  208,  765,  208,  758, 1509,
  758,  758,  758, 1535, 1510,  208, 1550, 1555, 1557, 1556,
 1560, 1501,  765,  765, 1570,  765,  758,  758,  758,  758,
  421,  239, 1572, 1573,  480,    1,  422,  480,   26,  765,
  573,  765,  765,  765,   28,  188,  765,  680,  334,  765,
  765,  251,  480, 1156,  478,  135,  249,  581,  413,  765,
  758,   77,  198,  371,  613,  478,  179,  249,  250,  251,
  611,  163,  164,  765,  256,  607,  765,  760,  361, 1056,
  425,  423,  255,  424,  759,  426,  759,  609,  180,  335,
  254,  255,  765,  637,  759,  259,  260,  631,  478,  261,
  262,  636,  292,  765,  638,  299,  208,  647,  602,  290,
   24,  759,   27,   33,  108,  765, 1191,  765,  760,  390,
  760,  760,  760,  765,  391,  398,  832,  226,  208,  215,
 1147,  207,  781, 1145,  759,  208,  760,  760,  760,  760,
  974,  759, 1143,  759,  759,  445, 1133,  759, 1365, 1249,
  765,  759,  521, 1155,  759,  748,  759,  463,  759, 1124,
 1134,  492,  493,  759,  759, 1086,  759, 1345, 1508,  208,
  760, 1057,  425,  423,  917,  424, 1351,  426,  730, 1156,
 1514,  421,  759,  759,  918,  759,  445,  422, 1512,  445,
 1545,  561, 1229,  249,  250,  251,  912,  163,  164,  759,
 1568,  759,  759,  759,  445, 1474,  759,  597, 1481,  759,
  759, 1540, 1264,  778, 1135, 1368,  254,  255,  962,  759,
  501,  259,  260,  707,  474,  261,  262,  734,  226,  758,
  483,  758, 1257,  759,  952,  770,  759,  110,  448,  758,
  675,  943,  671,  876,  663, 1058,  425,  423,  886,  424,
  226,  426,  759,  662,  862, 1305,  758,  226, 1405, 1410,
 1549, 1576, 1522,  759,  707, 1042,  684,  707,  596,  836,
 1171,  480,  763,  480,  653,  759, 1384,  759,  480,  758,
    0,  480,  707,  759,    0,    0,  758,    0,  758,  758,
    0,  226,  758,    0,  480,    0,  758,    0,    0,  758,
    0,  758,    0,  758,    0,    0,    0,    0,  758,  758,
  759,  758,    0,  763,  239,  763,  763,  763,  421,    0,
    0,    0,    0,    0,  422,    0,    0,  758,  758,    0,
  758,  763,  763,  763,  763,    0, 1059,  425,  423,  760,
  424,  760,  426,    0,  758,    0,  758,  758,  758,  760,
    0,  758,    0,    0,  758,  758,    0, 1205,  425,  423,
    0,  424,    0,  426,  758,  763,  760,    0,    0,    0,
    0,  242,  480, 1206,  425,  423,    0,  424,  758,  426,
    0,  758,    0,    0,    0,  731,    0,    0,    0,  760,
    0,    0,    0,    0,  480,    0,  760,  758,  760,  760,
    0,  480,  760,    0,    0,    0,  760,    0,  758,  760,
  421,  760,    0,  760,    0,    0,  422,    0,  760,  760,
  758,  760,  758,  445,    0,  445,  731,  710,  758,  731,
    0,    0,    0,  445,    0,  480,    0,  760,  760,    0,
  760,   87,    0,    0,  731,    0,  445,    0,    0,    0,
    0,    0,    0,    0,  760,  758,  760,  760,  760,    0,
    0,  760,  905,    0,  760,  760,    0,    0,  710,  708,
  239,  710,    0,    0,  760,    0,  249,  250,  251,    0,
  163,  164,    0,   88,  421,  707,  710,    0,  760,    0,
  422,  760,    0,    0,    0,   89,    0,   87,    0,  254,
  255,  256,  257,  258,  259,  260,    0,  760,  261,  262,
  708,  239,    0,  708,  239,    0,    0,    0,  760,    0,
   90,    0,    0,    0,  445,    0,    0,    0,  708,  239,
  760,    0,  760,  709,  763,    0,  763,    0,  760,   88,
    0,    0,  707,    0,  763,  707,  445,    0,    0,    0,
    0,   89,  707,  445,    0,  707,    0,    0,    0,  707,
    0,  763,    0,    0,  707,  760,    0,  707,    0,    0,
    0,    0,    0,    0,  709,  421,   90,  709,    0,    0,
    0,  422,  739,  707,  763,    0,    0,  445,    0,   91,
    0,  763,  709,  763,  763,    0,  421,  763,    0,   92,
    0,  763,  422,    0,  763,    0,  763,  707,  763,    0,
  707,  707,  421,  763,  763,    0,  763,    0,  422,    0,
  707,    0,    0,  739,   93,    0,  739,    0,    0,    0,
    0,    0,  763,  763,    0,  763,    0,  707,    0,    0,
    0,  739,   94,    0,    0,   91,  703,  731,    0,  763,
    0,  763,  763,  763,    0,   92,  763,    0,    0,  763,
  763,    0,    0,    0,  707,    0,    0,    0,    0,  763,
    0,  605,    0,    0,    0,    0,  707,    0,  707,    0,
   93,    0,    0,  763,    0,    0,  763,  703,   74,  710,
  703,    0,    0,    0,    0,   75,    0,    0,  167,   76,
   77,    0,  763,    0,  731,  703,    0,  731,    0,    0,
    0,  707,    0,  763,  731,  605,    0,  731,    0,    0,
   78,  731,    0,    0,    0,  763,  731,  763,    0,  731,
  605,  708,    0,  763,    0,  704,    0,    0,    0,  167,
    0,    0,  167,    0,    0,  731,  710,    0,  239,  710,
  239,    0,    0,    0,    0,    0,  710,  167,  239,  710,
  763,    0,    0,  710,    0,    0,    0,    0,  710,  731,
    0,  710,  731,  731,    0,    0,  704,    0,    0,  704,
    0,    0,  731,    0,  705,   79,    0,  710,  708,    0,
    0,  708,    0,    0,  704,  709,    0,    0,  708,  731,
    0,  708,   80,    0,    0,  708,    0,    0,    0,    0,
  708,  710,    0,  708,  710,  710,    0,   81,    0,    0,
    0,   82,    0,    0,  710,  705,  731,    0,  705,  708,
    0,    0,   83,    0,    0,    0,    0,   87,  731,    0,
  731,  710,    0,  705,  739,    0,    0,    0,  738,  239,
    0,   84,  709,  708,    0,  709,  708,  708,    0,    0,
    0,    0,  709,    0,    0,  709,  708,    0,  710,  709,
    0,  239,    0,  731,  709,    0,    0,  709,  239,   88,
  710,    0,  710,  708,    0,    0,    0,    0,    0,  738,
  732,   89,  738,  709,    0,    0,    0,    0,    0,  163,
    0,  739,    0,    0,  739,  105,    0,  738,  703,    0,
  708,  739,  239,    0,  739,  710,   90,  709,  739,    0,
  709,  709,  708,  739,  708,    0,  739,    0,    0,    0,
  709,  732,  740,    0,  732,    0,    0,    0,    0,    0,
    0,    0,  739,    0,    0,    0,    0,  709,    0,  732,
    0,    0,    0,   53,    0,    0,  167,  708,  163,    0,
    0,    0,    0,    0,   54,  703,  739,    0,  703,  739,
  739,   55,    0,  740,  709,  703,  740,  167,  703,  739,
    0,    0,  703,    0,   56,   91,  709,  703,  709,    0,
  703,  740,    0,  605,    0,   92,  739,  704,    0,  167,
  605,    0,    0,  605,    0,  167,  703,  605,    0,    0,
    0,    0,    0,    0,    0,  605,    0,    0,    0,    0,
   93,  709,  741,  739,    0,    0,    0,    0,  167,    0,
  703,  605,    0,  703,  703,  739,    0,  739,   94,    0,
    0,    0,    0,  703,    0,  729,  705,  167,    0,    0,
    0,    0,    0,    0,  704,  605,  167,  704,    0,    0,
  703,   57,  167,  741,  704,    0,  741,  704,  605,    0,
  739,  704,    0,    0,    0,    0,  704,    0,   58,  704,
  167,  741,    0,    0,    0,  605,  729,  703,    0,  729,
  605,    0,    0,   59,  733,  704,    0,   60,    0,  703,
   61,  703,    0,  705,  729,    0,  705,    0,   62,    0,
  738,    0,  605,  705,    0,  235,  705,  167,    0,  704,
  705,    0,  704,  704,  605,  705,  605,   63,  705,    0,
    0,    0,  704,    0,  703,  733,    0,    0,  733,    0,
    0,    0,    0,    0,  705,    0,    0,    0,    0,  704,
    0,    0,  732,  733,    0,    0,  235,  163,    0,  235,
    0,    0,    0,    0,    0,    0,    0,  738,  705,    0,
  738,  705,  705,    0,  235,    0,  704,  738,  163,    0,
  738,  705,    0,  742,  738,    0,    0,    0,  704,  738,
  704,    0,  738,    0,  740,    0,    0,    0,  705,    0,
  163,    0,    0,    0,    0,    0,  163,    0,  738,  732,
    0,    0,  732,    0,    0,    0,    0,    0,    0,  732,
    0,    0,  732,  704,  742,  705,  732,  742,    0,  163,
    0,  732,  738,    0,  732,  738,  738,  705,    0,  705,
    0,    0,  742,    0,    0,  738,    0,  730,  163,    0,
  732,  740,    0,    0,  740,    0,    0,  163,    0,    0,
    0,  740,  738,  163,  740,    0,    0,  734,  740,    0,
    0,    0,  705,  740,  732,    0,  740,  732,  732,    0,
    0,  163,    0,    0,  741,    0,    0,  732,  730,  738,
    0,  730,  740,    0,    0,    0,  598,    0,    0,    0,
    0,  738,    0,  738,  732,    0,  730,  729,  734,    0,
    0,  734,    0,    0,    0,    0,  740,    0,  163,  740,
  740,    0,    0,    0,    0,    0,  734,    0,    0,  740,
    0,  732,    0,    0,    0,    0,  738,  598,    0,    0,
  598,  741,    0,  732,  741,  732,  740,    0,    0,    0,
    0,  741,    0,    0,  741,  598,  733,    0,  741,    0,
    0,    0,    0,  741,  729,    0,  741,  729,    0,    0,
    0,    0,    0,  740,  729,    0,    0,  729,  732,    0,
    0,  729,  741,    0,    0,  740,  729,  740,    0,  729,
    0,    0,    0,  235,    0,  235,  330,    0,    0,    0,
    0,    0,  593,  235,    0,  729,  741,    0,    0,  741,
  741,    0,    0,  733,    0,    0,  733,    0,    0,  741,
  740,  236,    0,  733,    0,    0,  733,    0,    0,  729,
  733,    0,  729,  729,    0,  733,  741,  330,  733,    0,
  330,    0,  729,  593,    0,  742,  593,    0,    0,    0,
    0,    0,    0,    0,  733,  330,    0,    0,    0,  729,
    0,  593,  236,  741,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  741,    0,  741,  733,    0,
  236,  733,  733,    0,    0,    0,  729,  485,    0,    0,
    0,  733,    0,    0,  235,    0,    0,    0,  729,    0,
  729,    0,  742,    0,    0,  742,    0,    0,  733,  730,
  741,    0,  742,    0,    0,  742,  235,    0,  491,  742,
    0,    0,    0,  235,  742,    0,    0,  742,  485,  734,
    0,  485,    0,  729,    0,  733,    0,    0,    0,    0,
    0,    0,    0,  742,    0,    0,  485,  733,    0,  733,
    0,    0,    0,    0,    0,    0,    0,  235,  491,  491,
    0,    0,  491,    0,    0,    0,  730,  742,    0,  730,
  742,  742,    0,    0,    0,    0,  730,  491,  485,  730,
  742,    0,  733,  730,    0,    0,  734,    0,  730,  734,
    0,  730,    0,    0,    0,    0,  734,  742,    0,  734,
    0,  508,    0,  734,    0,    0,    0,  730,  734,  491,
    0,  734,    0,    0,    0,  598,    0,    0,  598,    0,
    0,    0,    0,    0,  742,  598,    0,  734,  598,    0,
    0,  730,  598,    0,  730,  730,  742,  598,  742,    0,
  598,    0,  508,    0,  730,  508,    0,    0,    0,    0,
    0,  734,    0,    0,  734,  734,  598,    0,    0,    0,
  508,  730,    0,    0,  734,    0,    0,    0,    0,    0,
    0,  742,    0,    0,    0,    0,    0,    0,    0,    0,
  598,  734,    0,    0,  598,  475,    0,    0,  730,    0,
    0,    0,  508,  598,    0,    0,    0,    0,    0,  236,
  730,  236,  730,    0,    0,    0,    0,    0,  734,  236,
  598,    0,    0,    0,    0,    0,    0,    0,  330,    0,
  734,  593,  734,    0,  593,  330,  475,    0,  330,  475,
  498,  593,  330,    0,  593,  730,    0,  598,  593,    0,
  330,    0,    0,  593,  475,  485,  593,    0,    0,  598,
    0,    0,    0,    0,    0,  734,  330,  598,    0,    0,
    0,  485,  593,    0,  485,  485,    0,  485,    0,    0,
    0,  498,  485,    0,  498,  485,  491,    0,    0,    0,
  330,    0,    0,    0,  598,    0,  593,    0,  485,  498,
  593,  482,  491,  330,  485,  491,  491,  485,  491,  593,
  236,    0,    0,  491,    0,    0,  491,    0,    0,    0,
  330,    0,    0,    0,    0,    0,  593,  480,    0,  491,
    0,  498,  236,    0,    0,  491,    0,    0,  491,  236,
    0,    0,  482,  480,    0,  482,    0,  330,    0,    0,
    0,    0,    0,  593,    0,    0,    0,    0,    0,  330,
  482,  330,    0,    0,    0,  593,    0,    0,  480,  508,
    0,  480,    0,  236,    0,    0,  485,    0,    0,    0,
    0,    0,    0,    0,  480,  508,  480,  480,    0,  508,
    0,  508,  482,    0,    0,    0,  508,    0,  485,  508,
  593,    0,  480,    0,    0,  485,    0,  491,    0,  485,
    0,    0,  508,    0,    0,    0,  485,    0,  508,    0,
    0,  508,    0,    0,    0,    0,    0,    0,    0,  491,
    0,    0,    0,    0,  485,    0,  491,    0,    0,  485,
  491,    0,    0,  582,    0,    0,  263,  491,  264,    0,
    0,    0,    0,  475,    0,    0,    0,    0,    0,    0,
    0,  267,    0,    0,  485,  491,  268,    0,  485,    0,
  491,    0,  475,  475,    0,  475,    0,    0,    0,    0,
  475,    0,    0,  475,    0,    0,    0,    0,    0,    0,
  508,    0,    0,    0,    0,  491,  475,    0,  498,  491,
    0,    0,  475,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  508,    0,  498,    0,    0,    0,  498,  508,
  498,    0,    0,  508,    0,  498,    0,    0,  498,    0,
  508,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  582,  498,    0,  263,    0,  264,    0,  498,  508,    0,
  498,  173,    0,  508,    0,    0,    0,    0,  267,  482,
    0,    0,    0,  268,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  475,  482,    0,    0,  508,  482,
    0,  482,  508,    0,    0,  480,  482,    0,    0,  482,
    0,    0,    0,    0,    0,    0,  475,    0,    0,    0,
    0,    0,  482,  475,    0,  480,    0,  480,  482,    0,
  173,  482,  480,    0,  475,  480,  174,    0,    0,  498,
    0,  480,    0,  480,    0,    0,    0,    0,  480,    0,
    0,  480,  475,    0,  480,    0,    0,  475,    0,    0,
    0,  498,    0,    0,  480,    0,    0,    0,  498,    0,
    0,    0,  498,    0,    0,    0,    0,    0,    0,  498,
    0,    0,    0,    0,    0,    0,  475,    0,    0,    0,
  236,    0,    0,    0,    0,  174,    0,  498,    0,  237,
  482,    0,  498,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  582,  238,    0,  263,  578,  264,    0,  239,
  240,    0,  482,    0,    0,    0,  480,  498,    0,  482,
  267,  498,    0,  482,    0,  268,    0,    0,  579,    0,
  482,    0,  480,    0,    0, 1277, 1278,    0,  480,    0,
  241,    0,    0,    0,    0,  480, 1283, 1284,  482, 1286,
 1287,    0,    0,  482,  480,    0,  480, 1291, 1292, 1293,
 1294,  480, 1295, 1296, 1297, 1298, 1299, 1300,  243,  244,
    0,    0,    0,    0,  480,    0,    0,  236,  482,  480,
  245,    0,  482,    0,  246,    0,  237,    0,    0,    0,
    0,    0,  580,    0,    0,  480,    0,    0,    0,  266,
  238,    0,  263,    0,  264,    0,  239,  240,  480,    0,
    0,    0,    0,    0,    0,    0,    0,  267,    0,  173,
    0,    0,  268,    0,    0,  579,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  581,    0,  241,    0,    0,
  173,    0,    0,    0,    0,    0,    0,  247,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  248,    0,    0,
    0,    0,  173,    0,    0,  243,  244,    0,  173,    0,
    0,  249,  250,  251,  252,  163,  164,  245, 1227,    0,
    0,  246,    0,    0,  174,  253,    0,    0,    0,  580,
    0,  173,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,  174,    0,    0,    0,    6,
  173,    0,    0,    0,    0,    0, 1427,    0,    0,  173,
 1318, 1319,    0, 1320,    0,  173, 1321,  174,  415,  236,
    0,    0,  581,  174,    0,    0,    0,    0,  237,    0,
 1322,    0,  266,  173,  247,  263, 1323,  264,    0,    0,
    0,    0,  238,    0,  248,    0,  174,    0,  239,  240,
  267,    0,    0,    0,    0,  268,    0,    0,  249,  250,
  251,  252,  163,  164,    0,  174,    0,  579,    0,    0,
  173,    0,  253,    0,  174,    0,    0,    0,    0,  241,
  174,  254,  255,  256,  257,  258,  259,  260,    0,    0,
  261,  262,    0,    0,    0,    0, 1324,    0,  174,    0,
    0,    0,    0,    0,    0,    0,    0,  243,  244,  984,
    0,    0,  985,    0,    0,   14,  236,    0,    0,  245,
    0,    0,    0,  246,    0,  237,    0,    0,    0,  266,
 1325,  580,  263,    0,  264,  174,    0,    0,    0,  238,
   16,    0,    0,    0,    0,  239,  240,  267,    0, 1428,
    0, 1326,  268,    0,    0,    0,    0,    0,  168,    0,
    0,    0,    0,    0,  641,  425,  423,    0,  424,    0,
  426,    0,    0,    0,  581,    0,  241,    0,    0,    0,
    0,    0,    0,  811,  810,  812,  247,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  248,    0,    0,    0,
    0,    0,    0,    0,  243,  244,    0,    0,    0,    0,
  249,  250,  251,  252,  163,  164,  245,    0,    0,    0,
  246,    0,    0,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0,    0,    0,    0,    0,
    0,    0,  993,    0,    0,  985,    0,    0,    0,  236,
    0,    0,    0,    0,    0,    0,    0,    0,  237,  266,
    0,    0,  263,    0,  264,  986,    0,    0,    0,    0,
    0,    0,  238,  247,    0,    0,    0,  267,  239,  240,
    0,    0,  268,  248,    0,    0,    0,    0,  425,  423,
    0,  424,    0,  426,    0,    0,    0,  249,  250,  251,
  252,  163,  164,    0,    0,    0,  811,  810,  812,  241,
    0,  253,    0,    0,    0,    0,    0,    0,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,    0,    0,    0,    0,    0,  243,  244,  997,
    0,    0,  985,    0,    0,    0,  236,    0,    0,  245,
    0,    0,    0,  246,    0,  237,  266,    0,    0,  263,
    0,  264,    0,    0,    0,    0,    0,    0,    0,  238,
    0,    0,    0,    0,  267,  239,  240,    0,    0,  268,
    0,    0,    0,    0,    0,  798,    0,    0,    0,    0,
    0,    0,    0,  421,    0,    0,    0,    0,    0,  422,
    0,    0,  799,    0,    0,    0,  241,    0,  986,    0,
  266,    0,    0,  263,    0,  264,  247,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  248,    0,  267,    0,
    0,    0,    0,  268,  243,  244,    0,    0,  800,    0,
  249,  250,  251,  252,  163,  164,  245,  801,    0,    0,
  246,    0,    0,    0,  253,  802,    0,    0,    0,    0,
    0,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,  803,    0,  804,    0,    0, 1005,
    0,    0,  985,    0,    0,    0,  236,    0,    0,    0,
  805,    0,  806,  807,  808,  237,  266,    0,    0,  263,
    0,  264,    0,    0,    0,  986,    0,    0,    0,  238,
    0,    0,    0,  247,  267,  239,  240,    0,  798,  268,
    0,    0,    0,  248,    0,    0,  421,    0,    0,    0,
    0,    0,  422,    0,    0,  799,    0,  249,  250,  251,
  252,  163,  164,  809,    0,    0,  241,    0,    0,    0,
    0,  253,    0,    0,    0,    0,    0,    0,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,  800,    0,    0,  243,  244, 1008,    0,    0,  985,
  801,    0,    0,  236,    0,    0,  245,    0,  802,    0,
  246,    0,  237,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  238,  803,    0,  804,
    0,    0,  239,  240,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  805,    0,  806,  807,  808,    0,    0,
 1013,    0,    0,  985,    0,    0,    0,  236,    0,  266,
    0,    0,  263,  241,  264,  986,  237,    0,    0,    0,
    0,    0,    0,  247,    0,    0,    0,  267,    0,    0,
  238,    0,  268,  248,    0,    0,  239,  240,    0,    0,
    0,  243,  244,    0,    0,    0,  809,  249,  250,  251,
  252,  163,  164,  245,    0,    0,    0,  246,    0,    0,
    0,  253,    0,    0,    0,    0,    0,  241,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,    0,    0,    0,    0, 1016,    0,    0,  985,
    0,    0,    0,  236,    0,  243,  244,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,  245,    0,    0,
    0,  246,  986,    0,    0,    0,  238,    0,    0,    0,
  247,    0,  239,  240,    0,    0,    0,    0,    0,    0,
  248,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  249,  250,  251,  252,  163,  164,
    0,    0,    0,  241,    0,    0,    0,    0,  253,    0,
  266,    0,  265,  263,    0,  264,  986,  254,  255,  256,
  257,  258,  259,  260,  247,    0,  261,  262,  267,    0,
    0,  243,  244,  268,  248,    0,    0,    0,    0,    0,
    0,    0,    0,  245,    0,    0,    0,  246,  249,  250,
  251,  252,  163,  164,    0,    0,    0,    0,    0,    0,
    0,    0,  253,    0,    0,    0,    0,    0,    0,    0,
    0,  254,  255,  256,  257,  258,  259,  260,    0, 1019,
  261,  262,  985,    0,    0,    0,  236,    0,    0,    0,
    0,    0,    0,    0,  266,  237,    0,  263,    0,  264,
    0,    0,  986,    0,    0,    0,    0,    0,    0,  238,
  247,    0,  267,    0,    0,  239,  240,  268,    0,    0,
  248,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  249,  250,  251,  252,  163,  164,
    0,    0,    0,    0,    0,    0,  241,    0,  253,    0,
    0,    0,    0,    0,    0,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0,  261,  262,    0,    0,
 1227,    0,    0,    0,  243,  244,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
  246,  841,    0,  841,  841,    0,  841,    0,    0,    0,
    0,    6,    0,    0,    0,    0,    0,    0,    0,  841,
    0,    0, 1318, 1319,  841, 1320,    0,    0, 1321,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1322,    0,    0,    0,    0,  236, 1323,    0,
    0,    0,    0,    0,    0,  986,  237,    0,    0,    0,
    0,    0,    0,  247,    0,    0,    0,    0,    0,    0,
  238,    0,    0,  248,    0,    0,  239,  240,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  249,  250,  251,
  252,  163,  164,    0,    0,    0,    0,    0,    0,    0,
    0,  253,    0,    0,    0,    0,    0,  241, 1324,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,  522,    0,    0,    0,  523,   14,    0,    0,
    0,  236,    0,  242,  714,  243,  244,    0,    0,    0,
  237,  266, 1325,    0,  263,  524,  264,  245,  525,    0,
    0,  246,   16,    0,  238,    0,    0,    0,    0,  267,
  239,  240,    0, 1326,  268,    0,    0,    0,    0,    0,
  168,    0,    0,    0,    0,  266,    0,    0,  263,    0,
  264,    0,    0,    0,    0,    0,    0,    0,    0,  526,
    0,  241,    0,  267,    0,  527,  528,  529,  268,  530,
  531,  532,    0,  533,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  247,    0,    0,  242,    0,  243,
  244,    0,    0,  534,  248,  535,    0,    0,  841,    0,
    0,  245,    0,    0,    0,  246,    0,  841,  249,  250,
  251,  252,  163,  164,    0,    0,    0,    0,    0,    0,
    0,  841,  253,    0,    0,    0,  536,  841,  841,    0,
    0,  254,  255,  256,  257,  258,  259,  260,    0,    0,
  261,  262,    0,  537,    0,    0,    0,    0,    0,    0,
    0,    0,  415,    0,  266,  643,    0,  263,  841,  264,
    0,    0,    0,    0,    0,  538,    0,    0,  247,    0,
    0,    0,  267,    0,    0,    0,    0,  268,  248,    0,
  226,    0,    0,    0,  841,    0,  841,  841,    0,    0,
    0,    0,  249,  250,  251,  252,  163,  164,  841,    0,
  539,  540,  841,    0,    0,    0,  253,    0,    0,    0,
    0,  541,  542,    0,    0,  254,  255,  256,  257,  258,
  259,  260,    0,  266,  261,  262,  263,    0,  264,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,    0,
    0,  267,    0,    0,    0,    0,  268,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  238,    0,    0,    0,  841,    0,  239,  240,    0,
    0,    0,  236,    0,    0,  841,    0,    0,    0,    0,
    0,  237,    0,    0,    0,    0,    0,    0,    0,  841,
  841,  841,  841,  841,  841,  238,    0,    0,  241,    0,
    0,  239,  240,  841,    0,  266,    0,    0,  263,    0,
  264,    0,  841,  841,  841,  841,  841,  841,  841,    0,
    0,  841,  841,  267,    0,    0,  243,  244,  268,    0,
    0,    0,  241,    0,    0,    0,    0,    0,  245,    0,
    0,    0,  246,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  284,    0,    0,    0,  242,    0,
  243,  244,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  245,    0,    0,    0,  246,    0,    0,    0,
    0,  236,    0,    0,    0,  284,    0,    0,    0,  415,
  237,    0,  284,    0,    0,    0,  284,  284,    0,  284,
    0,    0,  284, 1493,  238,  247,  263,    0,  264,    0,
  239,  240,    0,    0,    0,  248,  284,    0,    0,    0,
    0,  267,  284,    0,    0,    0,  268,    0,    0,  249,
  250,  251,  252,  163,  164,    0,    0,    0,    0,  247,
    0,  241,    0,  253,    0,    0,    0,    0,    0,  248,
  236,    0,  254,  255,  256,  257,  258,  259,  260,  237,
    0,  261,  262,  249,  250,  251,  252,  163,  164,  243,
  244,    0,    0,  238,    0,    0,    0,  253,    0,  239,
  240,  245,  284,    0,    0,  246,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,    0,    0,
    0,  284,    0,    0,    0,    0,    0,    0,    0,    0,
  241,    0,    0,    0,    0,    0,  284,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  284,    0,    0,    0,
    0,    0,  236,    0,    0,  284,    0,  284,  243,  244,
    0,  237,  266,    0,  284,  263,    0,  264,  247,    0,
  245,    0,    0,    0,  246,  238,    0,    0,  248,    0,
  267,  239,  240,    0,    0,  268,    0,    0,    0,    0,
    0,    0,  249,  250,  251,  252,  163,  164,    0,    0,
    0,    0,    0,    0,    0,    0,  253,    0,    0,    0,
    0,    0,  241,    0,    0,  254,  255,  256,  257,  258,
  259,  260,    0,    0,  261,  262,  841,    0,    0,  841,
    0,  841,    0,    0,    0,    0,    0,  247,    0,    0,
  243,  244,    0,    0,  841,    0,    0,  248,    0,  841,
  236,    0,  245,    0,    0,    0,  246,    0, 1011,  237,
    0,  249,  250,  251,  252,  163,  164,    0,    0,    0,
    0,    0,    0,  238,    0,  253,    0,    0,    0,  239,
  240,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    0,  247,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  248,
    0,    0,    0,    0,    0,    0,  242,    0,  243,  244,
 1173,    0,    0,  249,  250,  251,  252,  163,  164,    0,
  245,    0,    0,    0,  246,    0,    0,  253,    0,    0,
    0,    0,    1,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,    0,    0,
    0,    0,    0,    0,    2,    0,    0,    0,    0,  236,
    0,    0,    3,    0,    0,    0,    0,    0,  237,    4,
    0,    5,    0,    6,    0,    0,    0,    0,    7,    0,
    0,    0,  238,    0,    0,    8,    0,  247,  239,  240,
    0,    0,    0,    0,    0,    0,    0,  248,    0,    9,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   10,  249,  250,  251,  252,  163,  164,    0,    0,  241,
    0,    0,    0,  841,    0,  253,    0,    0,    0,    0,
    0,    0,  841,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,    0,  841,  243,  244,    0,
    0,    0,  841,  841,    0,    0,    0,    0,    0,  245,
    0,    0,    0,  246,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
    0,    0,    0,  841,   12,    0,  127,   13,    0,   14,
   15,    0,    0,    0,    0,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
  143,  841,  841,    0,   16,  144,  145,    0,    0,    0,
  206,    0,    0,  841,  206,    0,  247,  841,    0,    0,
    0,    0,    0,    0,    0,    0,  248,    0,    0,  206,
    0,    0,    0,  206,    0,    0,  206,    0,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0,    0,    0,
    0,    0,    0,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0,    0,  206,    0,    0,
  841,    0,    0,  206,  206,  206,    0,  206,  206,  206,
  841,  206,    0,  784,    0,    0,    0,  523,    0,    0,
    0,    0,    0,    0,  841,  841,  841,  841,  841,  841,
    0,  206,  785,  206,    0,    0,  524,    0,  841,  525,
    0,    0,    0,    0,    0,    0,    0,  841,  841,  841,
  841,  841,  841,  841,    0,    0,  841,  841,    0,    0,
    0,    0,    0,    0,  206,    0,    0,    0,    0,   76,
    0,    0,    0,    0,    0,    0,    0,    0,  522,    0,
  526,  206,  523,    0,    0,    0,  527,  528,  529,    0,
  530,  531,  532,    0,  533,    0,  206,    0,    0,    0,
  206,  524,    0,  206,  525,    0,    0,    0,    0,    0,
    0,    0,    0,  409,  534,  206,  535,    0,    0,  206,
    0,    0,  206,  409,  409,  409,  409,  409,  409,  409,
  409,  409,  409,  409,  409,  409,  409,  409,  206,  206,
    0,    0,  409,  409,    0,  526,    0,  536,    0,  206,
  206,  527,  528,  529,    0,  530,  531,  532,    0,  533,
    0,  522,    0,  206,  537,  523,    0,    0,    0,  206,
  206,  206,    0,  206,  206,  206,    0,  206,    0,  534,
    0,  535,    0,    0,  524,    0,  538,  525,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  206,    0,  206,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  536,    0,    0,    0,    0,    0,    0,    0,
    0,  539,  540,    0,    0,    0,    0,    0,  526,  537,
  206,    0,  541,  542,  527,  528,  529,    0,  530,  531,
  532,    0,  533,    0,  120,    0,    0,  206,  120,    0,
    0,  538,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  534,    0,  535,    0,  226,  120,    0,  206,
  120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  539,  540,    0,    0,
    0,    0,    0,    0,    0,  536,    0,  541,  542,    0,
    0,    0,    0,    0,  206,  206,    0,    0,    0,    0,
    0,  120,  537,    0,    0,  206,  206,  120,  120,  120,
    0,  120,  120,  120,    0,  120,    0,    0,    0,    0,
    0,    0,    0,    0,  538,    0,    0,    0,    0,    0,
    0,    0,  499,    0,    0,  120,    0,  120,    0,    0,
    0,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,    0,    0,  539,
  540,  144,  145,    0,    0,    0,    0,    0,  120,    0,
  541,  542,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  120,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  120,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  120,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,  120,
};
static short yycheck[] = {                                      54,
   16,   54,    4,   46,    4,   55,   93,    0,   54,   47,
  215,  215,  215,   53,   58,  429,   48,  343,  347,   57,
  509,  402,  454,   60,  580,   75,  582,   59,  435,  482,
  351,   83,  485,  351,  598,   78,   80,  451,  491,  685,
  322,   79,  415,  124,  702,   82,  491,  857,   86,    0,
  494,  692,    0,  223,    0,    0,   40,   73,   41,  702,
  102,   44,  104,  233,  366,   81,  121,   45,  613,   44,
   40,  103,  113,   63,   42,   44,   40,    0,  941,   41,
  315,    0,   58,  749,  568,   40,   40,   59,   58, 1037,
    0,    0,  917,   59, 1207,    0,   40,  654,  305,  689,
  544,   45,  189,  928,    0,  179,   44,    0,   59,  149,
   44,   59,    0,   59,   59,    0,   44,  115,   41,  397,
    0,   44,  947,   45,   44,  613,  957,  723,    0,   44,
   42, 1304,  461,   44, 1074,  175,   59,   45,  702,   40,
   59,  228,  468,  469,  470,  471,   45,   45,  274,   59,
   59,    0,    0,    0,   59,  264,   41, 1089,   42,   44,
    0,  574,  217,   59,  217,   44,   59,  372,  372,  372,
  491,   59,    0,  491,   59,  231,  260, 1139,  667,   59,
    0,  302,    0,  258, 1093,  302,  352,   59,  517,  221,
  262,  321,   41,   41,   40,   45,   44,  265, 1130,  231,
  349,  284, 1441,  257,    0,    0,  695,  696,  320,  357,
   59,   59,   59,   63,    0,  385,  406,  339,   44,   59,
  522,   41,  263,  264,   44,  266,  288,  711,  309,  277,
  264,   59,  307,    0,  260,  303,  720,  406,  268,   59,
   16,   59,  273, 1482,    0, 1458,  289,  456,   41,  259,
  305,   44,  305,  308,  404,  308,  425,  813,  814,  403,
  270,  293, 1125,   59,   59,  301,   59,  457,  434,   12,
  338,  421,  716,   59,   41,  330,    0,  330, 1517,  321,
 1493,  335,  430, 1108,  737,  830,  328,  771,   44,  401,
  332,  274,   59,  335,  839,  840,    0,   73,  346,  743,
  681,  285,  385,   59,  344, 1267,  346,  437,  865,   41,
  341, 1484,  393,  462,  463,  387,    0,  353,  358,  362,
   44,  443,  443, 1232,  920,  921,  443,  310,  360,  297,
  442,  989,    0, 1446,  418,   59,  366,   41,  616,    0,
   41,  467,  830,  399,  419,    0,  384, 1520,  904,  381,
  757,  839,  461,  258, 1302,   59,    0,  440,    0,  397,
  392,  402,  394,    0,  366,  406,  109,  399, 1308,   41,
  258,  967, 1038, 1486,  457,   59,  260,  967,  412,  420,
   41,  422,  423,  424,  425,  426,  427,  332,   44,  430,
  305,   59,  418,  598,  598,  598,  319,   41,   59,  461,
 1225,  321,  307, 1228,   59, 1230,  329,  405,    0,  332,
  329, 1274, 1243,  332,  488,   59,  264,   59,  341,  307,
  304,  344,   59,  269,  264,  989,  466,   41, 1360,  412,
  258,  278,  341,  280,  319,  397, 1261,  607,  264,  411,
 1081,  395,  321,  927,  329,  411,    0,  332, 1114,  491,
  384,  397,  397,  349,  835,  944,  341,  329,  368,  344,
  332, 1119,  437,  343,  699,  388,  510,   59,  264,  459,
  319,  915,  512,  321,  397,  682, 1119,  461,  397,  307,
  329,  459,  926,  332,  467,  461,  455,   41,  432,  791,
  441,  461,  341,  461,    0,  441,  441,  461,  702,  702,
  782, 1046,  946,  388,  455,   59,  461,  455,  486,  455,
  455,  566,  397,  566,  419,  459, 1073,  410,  441, 1075,
  522,  459,  441,  563,  564,  397,  406,  455, 1353,  409,
  453,  419,  437,  432,  453,   41,  455,  459,   44,  388,
 1096,  582,  453, 1368,  599,  425,  599,  448,  397,  461,
  368,  459,  319,   59,  349, 1119,  441,    0,  398,  972,
  459,  459,  844,  461,  384,  488,  471,  893,  453,  441,
 1380,  451,   41,  575,  341,  575,  617,  618,  616,  620,
 1221,  622,  432,  455,  625,  626,  627,  628,  629,  630,
  963,  419,  441,   41, 1083,  319, 1085,    0,   41,  640,
  332,   44,  398,  488, 1049,  453,  455,   41,    0,  459,
  278,    0,  280,  461,    0,  319,   59,  341,  411,   41,
    0,  388, 1447, 1281,  318,   12,    0,  682,  329,  682,
  397,  332,  958,  688,  689,  688,  689,  341,  310,  488,
  681,    0, 1131,    0,  676, 1402,  678, 1061,  262,    0,
  820,  691,  692,  823,  698,   41,   59,  341,  319,  863,
    0, 1307, 1106,  319,  319,  397,  708,   59,  329,  309,
   59,  332,  264,   59,  441,  319,    0,  319,  321,   59,
  341,  258,    0,    0,  388,   59,  341,   44,  970,  288,
   41, 1135,  388,   44,  736,  737,  397,  341,  287,  341,
   59,   41,   59,  284,  341,  378,  302,  280,   59,  273,
 1117,  379,  793,  286,  795,    0, 1123, 1281,   91,   59,
   44,  488,  109,  767,  768,  769,  406,  388, 1049,    0,
  307, 1049, 1030,  735, 1032,   59,  397,  441,  329, 1222,
  742,   59,   59,  339,  388,  441,   44,   44,  780,    0,
 1306,    0,  754,  397,  317,  318,  262,  798,  799,  800,
  326, 1518,  803,  804,  805,  319,  807,  808,  809,  810,
  811,  812,  824,  387,   59,  329,  449,  457,  332, 1262,
  441,  475, 1155,  821,  989,  822,  989,  341,   59,  791,
 1234, 1548,  453,  262,  835,   93,   93,  441,    0, 1231,
   42,   43,  260,   45, 1133,   47,  398,  848,   59,  864,
   59,  455,  452,  319,  262,  856,  322,  858, 1199, 1251,
 1309,    0,  863,  329, 1313, 1269,  332,  488,  262,  398,
  336, 1036, 1037, 1038,  388,  341,   42,   43,  344,   45,
  262,   47,  419,  397,  488,  257,  304,  443,  459,  349,
  461,    0,    0,  444,  360,  378,  259,   59,  358,  440,
  437,  264,  461, 1419, 1317,  431, 1422,  270,  437,    0,
  461,    0,  438,  462,  463,  264,  319,   44,  384,  322,
   59,  387,  388,    0,  264,   41,  329,  441,   44,  332,
  264,  397, 1218,  336,  471,   44,  419,  344,  341,    0,
  263,  344,  471, 1201,  277,  960,  278,  960,  414,  953,
   59,   59,  967,  461,  967, 1119, 1119,  360,  387,  278,
   59,  280,  369,  335,   41,  969,   93,   44,   59, 1460,
   59,  975,    0,  319,  488,  441,  938,   93,  938,  387,
   41,  384,   59,  466,  387,  388,  332,  453,  320,  455,
  313,  343,  302,  387,  397,  341, 1370,    0,   59, 1000,
 1001,  324, 1003, 1004, 1453,  387,  462,  463,  319,   42,
 1011,  414,  329,   41,   47,  332,   44,  272,   45,  319,
  427,  332,  488,    0,    0,  322,  378,  344,  260,  339,
  341,   59,  332,  264,  289,  398,   63, 1334,  441,  336,
 1531,  341,  388,  344, 1208,  329,  403, 1563,  332,  398,
  453,  397,  455,  264,  406,  264,   59,  409,  398, 1074,
  344, 1074, 1553,  360,  398,  343,  343, 1443,  369,  401,
  461,  260,  304,  425, 1036, 1037, 1450,  388,  280,  334,
  397, 1081,   59,   59,  286,  488,  397,  384,  388,  446,
  258, 1092,   44,  261,  279,  441,  262,  397,  343,  451,
  378,  378,  264,    0, 1480,  428,   44,   59,  363,  455,
  442,  392,  393,  397,  280,  304, 1281,  414, 1281,  321,
  286,  302,    0,    0,  441,  264,  427,    0,  406,  406,
  441,  409,  409,  378,  260, 1136,  453, 1302,  455,  307,
 1516,  441,  488,    0,  455,  330, 1146,  425,  425, 1149,
 1112, 1152, 1112,  462,  463,   93,  265,  441,  339,    0,
  461,  406,   59,   41,  409, 1166,   44,  398,   46,  453,
 1546,  455, 1173,  451,  451,  430,    0,  488,  304,  364,
  425,   59,   59,   61,   63,  262,   59,  398,  488,  398,
   42,   43,    0,   45,  303,   47,   41,  382, 1199,   44,
   41,  461,   59,  353,  259,   84,  451, 1208,  444, 1506,
  319, 1226, 1227, 1226, 1227,  270,  410,    0,   59,  279,
 1226, 1221,   41,   42,   43,  461,   45,  408,   47,  379,
  258,    0,  341,    0,  379,   59,  398,  418, 1535, 1536,
    0,  301,  319, 1235,   41,  322,  274,  280,   93,   40,
  343,   59,  329,  286,   45,  332,  401,  295,  319,  336,
 1557,   58,  443,  408,  341,    0,  461,  344,  306,  296,
  330,    0,   63, 1570,   41,  313,   59,   44, 1279,  307,
  341,   41,  310,  360,   44,  378,  461, 1288, 1289,  349,
   59,    0,   59, 1308, 1458, 1308,  265,  442,  358,   59,
  338,    0,  435,  279,  364, 1352,   41,  384, 1318,   44,
  387,  388,   41,  406,   41,   44,  409,   44,  461, 1334,
  397, 1334,  382, 1324,   59,  301,  353,  388,  461, 1493,
   59,    0,  425, 1030,  303, 1032,  397,  414,  288,    0,
 1302,   40,   41,   42,   43,   44,   45,   46,   47,    0,
   59,  301,  260,  459,  330,    0, 1348,    0,  451,  461,
   59,   60,   61,   62,  441,  403,   41,    0, 1321,   44,
    0,    0, 1373,  349, 1374,  461,  453, 1377,  455,    0,
  441,  461,  358,    0,  412,  459,  264,  265,  364, 1436,
   59,  419,   91, 1369,   93,  273,  304,  435,   59,  277,
   41,  439,  280,   44,  323,    0,  382,  285,   59,  437,
 1425,  488, 1425,  461,   59, 1416,   59, 1415,  296,   42,
   43,  299,   45,    0,   47,  303,   59,  305,  280,   59,
   59,  458,  459,  460,  286,  462,  463,  461,   59,  467,
    0,  319,   59,  471,    0, 1460,  402, 1460,    0,   41,
    0,  466,   44,  468,  481,  482,  418, 1458, 1468,  486,
  487,  280,  340,  341,   59, 1441,  322,  286,  346,  347,
  348,  384,  350,  351,  352,  323,  354,  338,  319, 1455,
  336,   41,   59,  445,   44,   40, 1501,   44, 1501,  384,
    0, 1506, 1493, 1506,   41,    0,  374,   44,  376,   59,
  341,  322,    0,   59,  360,  296, 1482,   59, 1470,   59,
 1470,  278, 1488,  280,  375,  336, 1531,  461, 1531,  386,
 1535, 1536, 1535, 1536, 1527, 1425,    0,  388,  384,  407,
   41,   42,   43,  384,   45,    0,   47,  459, 1553,  360,
 1553, 1517, 1557,  278, 1557,  280,  424,  388, 1524,   59,
  686,  687,  338,  288,   59, 1570,  397, 1570,  414,  418,
 1460,   59,  353,  262,  486,  264,   40,   41,  446,   41,
   44,   41,   44,  272,   44,  384,   41,   42,   43,   44,
   45,  280,   47,  461,  198,   59,  445,  286,   41,  375,
  289,   44,  206,  414,   59,   60,   61,   62,  338,  419,
  441, 1501,  388,  481,  482,   41,   41,   41,   44,   44,
   44,    0,  379,  312,  492,  493,   41,   91,  322,   44,
  319,  357,  321,  322,   42,   43,  325,   45,   93,   47,
  329, 1531,  336,  332,  401,  334,  461,  336,  274,  262,
  344,  408,  341,  342,  379,  344,  319,   41,   41,  384,
   44,   44,   41, 1553,   40,   44,  360,  280,  394,  425,
  396,  360,  361,  286,  363,  322,  401,  458,  459,  460,
   59,  462,  463,  408,  462,  442,  264,   46,  377,  336,
  379,  380,  381,  419,  319,  384,  317,  344,  387,  388,
  481,  482,  338,  461,  453,  486,  487,  337,  397,  321,
  403,  319,  279,  360,  341,    0,  403,  442,  444,   40,
  414,   40,  411,  384,  384,  414,   42,   43,  278,   45,
  280,   47,   40,  279,  301,  285,   40,   40,  288,  462,
   40,  430,  462,   41,   42,   43,   40,   45,   40,   47,
   40,  301,  441,  462,  461,  301,   41,   42,   43,   44,
   45,   40,   47,  330,  453,   91,  455,  414,  321,   44,
  329,  437,  461,   46,   59,   60,   61,   62,  362,  280,
  451,  435,  349,  358,  330,  286,   41,   42,   43,  418,
   45,  358,   47,  443,  258,  288,  412,  364,  470,  488,
   41,   42,   43,  349,   45,   44,   47,  262,   93,  264,
  274,  357,  358,  277,  278,  382,  280,  272,  364,   61,
  287,  285,  373,   40,  288,  280,  458,  459,  460,  379,
  264,  286,   40,  401,  289,  403,  382,  301,   44,  407,
  408,  409,    0,  307,  403,  437,  310,  461,  394,  321,
  396,  401,    0,   44,  486,  487,   41,  312,  408,    0,
  403,  461,  453,  461,  319,   44,  321,  322,  429,   61,
  325,  280,  280,  419,  329,   44,  383,  332,  286,  334,
  439,  336,   44,  349,  278,  444,  341,  342,  301,  344,
  264,  450,  442,   41,   42,   43,   44,   45,  444,   47,
   41,   59,  461,   44,  312,  360,  361,  461,  363,  398,
  437,   59,   60,   61,   62,  379,  471,  398,   59,  277,
  459,  400,  377,  448,  379,  380,  381,  448,   40,  384,
  350,   40,  387,  388,   91,   40,   40,  401,  384,  264,
  319,  412,  397,  322,  408,   93,   44,  383,  412,  390,
  329,   40,   40,  332,  437,  419,  411,  336,  318,  414,
  465,   40,  341,  264,  280,  344,   42,   43,  321,   45,
  286,   47,  321,  437,   41,  430,   44,  262,  442,  264,
  321,  360,  280,   59,  280,   40,  441,  272,  286,   41,
   42,   43,  329,   45,   44,   47,  312,  449,  453,   40,
  455,  286,  459,  467,  289,  384,  461,  471,  803,  388,
  805,  277,  807,  808,   45,  810,  811,  812,  397,   40,
  274,  285,    0,  345,  387,  280,  278,  312,  345,  419,
  387,  286,   63,  488,  319,  414,  321,  322,  301,  280,
  325,  387,  417,   40,  329,  286,  419,  332,  357,  334,
  418,  336,   40,   40,  461,   44,  341,  342,  386,  344,
   44,  368,  441,   41,   42,   43,   44,   45,  321,   47,
   41,  389,  344,  274,  453,  360,  361,  389,  363,  389,
   44,   59,   60,   61,   62,  332,  266,    0,   42,   43,
  300,   45,  377,   47,  379,  380,  381,   40,  264,  384,
  258,   41,  387,  388,   41,   59,  461,   58,  423,  488,
   41,   41,  397,  455,  262,   93,  264,  258,  441,  395,
  310,  279,  310,   41,  272,   41,  411,  353,   41,  414,
   40,   44,   40,   40,   40,  262,  277,  278,   40,  280,
   45,  289,   40,  301,  285,  430,   59,  288,   40,  307,
  328,   41,   42,   43,   40,   45,  441,   47,   63,   40,
  301,   40,   40,   40,  312,   40,  307,   40,  453,   40,
  455,  319,  330,  321,  322,   40,  461,  325,   44,   41,
  461,  329,    0,  488,  332,  423,  334,  391,  336,  392,
  447,  349,  288,  341,  342,  408,  344,  271,  387,  357,
  358,  387,   41,  488,  280,  387,  364,  379,   41,    0,
  286,  387,  360,  361,  387,  363,  387,  278,   40,  418,
   41,   41,   41,   41,  382,   43,   44,   45,  280,  377,
  386,  379,  380,  381,  286,  437,  384,  280,  379,  387,
  388,   59,   60,   61,   62,   44,   40,  397,  443,  397,
   41,  302,  339,   44,  339,  302,  443,   41,   41,  353,
  401,  419,  321,  411,  386,  296,  414,  408,   59,  372,
  356,  372,  430,   41,   41,   93,  417,   41,  419,   41,
   41,   41,  430,   41,  262,   41,  264,   41,   41,   41,
   41,   41,   41,  441,  272,   41,  437,   41,   40,  341,
   59,  442,   41,   42,   43,  453,   45,  455,   47,   40,
  345,  289,   59,  461,  473,  474,  475,  476,  477,  478,
  479,  480,   59,   59,  341,   59,  280,    0,   41,   59,
  471,  353,  286,  369,  312,   40,   59,   59,  341,  384,
  488,  319,   44,  321,  322,  461,  384,  325,   41,  344,
  384,  329,   41,    0,  332,   41,  334,   41,  336,   44,
  305,   44,  411,  341,  342,  278,  344,  280,   41,  302,
   43,   44,   45,  436,  443,  288,   40,   59,  305,  294,
  464,   44,  360,  361,  308,  363,   59,   60,   61,   62,
  280,  296,   44,   41,   41,    0,  286,   44,  384,  377,
  338,  379,  380,  381,  384,   40,  384,  264,  278,  387,
  388,  264,   59,  444,  390,  459,  264,  321,  471,  397,
   93,  412,   40,   45,  344,  310,  459,  458,  459,  460,
  344,  462,  463,  411,  271,  344,  414,    0,  264,   41,
   42,   43,  271,   45,  262,   47,  264,  344,  459,   41,
  481,  482,  430,   40,  272,  486,  487,   41,  437,  490,
  491,   40,   59,  441,   41,  305,  379,   41,   44,   59,
    0,  289,    0,    0,   12,  453, 1033,  455,   41,  224,
   43,   44,   45,  461,  225,  233,  607,  278,  401,  280,
  972,   77,  570,  970,  312,  408,   59,   60,   61,   62,
  783,  319,  967,  321,  322,    0,  959,  325, 1252, 1119,
  488,  329,  348,  418,  332,  517,  334,  313,  336,  951,
  960,  330,  330,  341,  342,  896,  344, 1232, 1475,  442,
   93,   41,   42,   43,  717,   45, 1234,   47,  496,  444,
 1479,  280,  360,  361,  718,  363,   41,  286, 1478,   44,
 1510,  354, 1090,  458,  459,  460,  708,  462,  463,  377,
 1556,  379,  380,  381,   59, 1430,  384,  372, 1441,  387,
  388, 1507, 1136,  567,  962, 1263,  481,  482,  778,  397,
  335,  486,  487,    0,  316,  490,  491,  498,  379,  262,
  323,  264, 1121,  411,  764,  558,  414,   13,  297,  272,
  441,  756,  437,  676,  431,   41,   42,   43,  688,   45,
  401,   47,  430,  430,  654, 1208,  289,  408, 1308, 1311,
 1524, 1572, 1488,  441,   41,  836,  451,   44,  371,  612,
 1002,  278,    0,  280,  427,  453, 1281,  455,  285,  312,
   -1,  288,   59,  461,   -1,   -1,  319,   -1,  321,  322,
   -1,  442,  325,   -1,  301,   -1,  329,   -1,   -1,  332,
   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,
  488,  344,   -1,   41,  296,   43,   44,   45,  280,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  360,  361,   -1,
  363,   59,   60,   61,   62,   -1,   41,   42,   43,  262,
   45,  264,   47,   -1,  377,   -1,  379,  380,  381,  272,
   -1,  384,   -1,   -1,  387,  388,   -1,   41,   42,   43,
   -1,   45,   -1,   47,  397,   93,  289,   -1,   -1,   -1,
   -1,  353,  379,   41,   42,   43,   -1,   45,  411,   47,
   -1,  414,   -1,   -1,   -1,    0,   -1,   -1,   -1,  312,
   -1,   -1,   -1,   -1,  401,   -1,  319,  430,  321,  322,
   -1,  408,  325,   -1,   -1,   -1,  329,   -1,  441,  332,
  280,  334,   -1,  336,   -1,   -1,  286,   -1,  341,  342,
  453,  344,  455,  278,   -1,  280,   41,    0,  461,   44,
   -1,   -1,   -1,  288,   -1,  442,   -1,  360,  361,   -1,
  363,  260,   -1,   -1,   59,   -1,  301,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,  488,  379,  380,  381,   -1,
   -1,  384,  444,   -1,  387,  388,   -1,   -1,   41,    0,
    0,   44,   -1,   -1,  397,   -1,  458,  459,  460,   -1,
  462,  463,   -1,  302,  280,  262,   59,   -1,  411,   -1,
  286,  414,   -1,   -1,   -1,  314,   -1,  260,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,  430,  490,  491,
   41,   41,   -1,   44,   44,   -1,   -1,   -1,  441,   -1,
  339,   -1,   -1,   -1,  379,   -1,   -1,   -1,   59,   59,
  453,   -1,  455,    0,  262,   -1,  264,   -1,  461,  302,
   -1,   -1,  319,   -1,  272,  322,  401,   -1,   -1,   -1,
   -1,  314,  329,  408,   -1,  332,   -1,   -1,   -1,  336,
   -1,  289,   -1,   -1,  341,  488,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  280,  339,   44,   -1,   -1,
   -1,  286,    0,  360,  312,   -1,   -1,  442,   -1,  408,
   -1,  319,   59,  321,  322,   -1,  280,  325,   -1,  418,
   -1,  329,  286,   -1,  332,   -1,  334,  384,  336,   -1,
  387,  388,  280,  341,  342,   -1,  344,   -1,  286,   -1,
  397,   -1,   -1,   41,  443,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  360,  361,   -1,  363,   -1,  414,   -1,   -1,
   -1,   59,  461,   -1,   -1,  408,    0,  262,   -1,  377,
   -1,  379,  380,  381,   -1,  418,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,  397,
   -1,    0,   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,
  443,   -1,   -1,  411,   -1,   -1,  414,   41,  306,  262,
   44,   -1,   -1,   -1,   -1,  313,   -1,   -1,    0,  317,
  318,   -1,  430,   -1,  319,   59,   -1,  322,   -1,   -1,
   -1,  488,   -1,  441,  329,   44,   -1,  332,   -1,   -1,
  338,  336,   -1,   -1,   -1,  453,  341,  455,   -1,  344,
   59,  262,   -1,  461,   -1,    0,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,  360,  319,   -1,  278,  322,
  280,   -1,   -1,   -1,   -1,   -1,  329,   59,  288,  332,
  488,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,  384,
   -1,  344,  387,  388,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,  397,   -1,    0,  403,   -1,  360,  319,   -1,
   -1,  322,   -1,   -1,   59,  262,   -1,   -1,  329,  414,
   -1,  332,  420,   -1,   -1,  336,   -1,   -1,   -1,   -1,
  341,  384,   -1,  344,  387,  388,   -1,  435,   -1,   -1,
   -1,  439,   -1,   -1,  397,   41,  441,   -1,   44,  360,
   -1,   -1,  450,   -1,   -1,   -1,   -1,  260,  453,   -1,
  455,  414,   -1,   59,  262,   -1,   -1,   -1,    0,  379,
   -1,  469,  319,  384,   -1,  322,  387,  388,   -1,   -1,
   -1,   -1,  329,   -1,   -1,  332,  397,   -1,  441,  336,
   -1,  401,   -1,  488,  341,   -1,   -1,  344,  408,  302,
  453,   -1,  455,  414,   -1,   -1,   -1,   -1,   -1,   41,
    0,  314,   44,  360,   -1,   -1,   -1,   -1,   -1,    0,
   -1,  319,   -1,   -1,  322,  328,   -1,   59,  262,   -1,
  441,  329,  442,   -1,  332,  488,  339,  384,  336,   -1,
  387,  388,  453,  341,  455,   -1,  344,   -1,   -1,   -1,
  397,   41,    0,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,   -1,  414,   -1,   59,
   -1,   -1,   -1,  295,   -1,   -1,  258,  488,   59,   -1,
   -1,   -1,   -1,   -1,  306,  319,  384,   -1,  322,  387,
  388,  313,   -1,   41,  441,  329,   44,  279,  332,  397,
   -1,   -1,  336,   -1,  326,  408,  453,  341,  455,   -1,
  344,   59,   -1,  322,   -1,  418,  414,  262,   -1,  301,
  329,   -1,   -1,  332,   -1,  307,  360,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  344,   -1,   -1,   -1,   -1,
  443,  488,    0,  441,   -1,   -1,   -1,   -1,  330,   -1,
  384,  360,   -1,  387,  388,  453,   -1,  455,  461,   -1,
   -1,   -1,   -1,  397,   -1,    0,  262,  349,   -1,   -1,
   -1,   -1,   -1,   -1,  319,  384,  358,  322,   -1,   -1,
  414,  403,  364,   41,  329,   -1,   44,  332,  397,   -1,
  488,  336,   -1,   -1,   -1,   -1,  341,   -1,  420,  344,
  382,   59,   -1,   -1,   -1,  414,   41,  441,   -1,   44,
  419,   -1,   -1,  435,    0,  360,   -1,  439,   -1,  453,
  442,  455,   -1,  319,   59,   -1,  322,   -1,  450,   -1,
  262,   -1,  441,  329,   -1,    0,  332,  419,   -1,  384,
  336,   -1,  387,  388,  453,  341,  455,  469,  344,   -1,
   -1,   -1,  397,   -1,  488,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,  414,
   -1,   -1,  262,   59,   -1,   -1,   41,  258,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,  384,   -1,
  322,  387,  388,   -1,   59,   -1,  441,  329,  279,   -1,
  332,  397,   -1,    0,  336,   -1,   -1,   -1,  453,  341,
  455,   -1,  344,   -1,  262,   -1,   -1,   -1,  414,   -1,
  301,   -1,   -1,   -1,   -1,   -1,  307,   -1,  360,  319,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,
   -1,   -1,  332,  488,   41,  441,  336,   44,   -1,  330,
   -1,  341,  384,   -1,  344,  387,  388,  453,   -1,  455,
   -1,   -1,   59,   -1,   -1,  397,   -1,    0,  349,   -1,
  360,  319,   -1,   -1,  322,   -1,   -1,  358,   -1,   -1,
   -1,  329,  414,  364,  332,   -1,   -1,    0,  336,   -1,
   -1,   -1,  488,  341,  384,   -1,  344,  387,  388,   -1,
   -1,  382,   -1,   -1,  262,   -1,   -1,  397,   41,  441,
   -1,   44,  360,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,  453,   -1,  455,  414,   -1,   59,  262,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,  384,   -1,  419,  387,
  388,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,  397,
   -1,  441,   -1,   -1,   -1,   -1,  488,   41,   -1,   -1,
   44,  319,   -1,  453,  322,  455,  414,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,   59,  262,   -1,  336,   -1,
   -1,   -1,   -1,  341,  319,   -1,  344,  322,   -1,   -1,
   -1,   -1,   -1,  441,  329,   -1,   -1,  332,  488,   -1,
   -1,  336,  360,   -1,   -1,  453,  341,  455,   -1,  344,
   -1,   -1,   -1,  278,   -1,  280,    0,   -1,   -1,   -1,
   -1,   -1,    0,  288,   -1,  360,  384,   -1,   -1,  387,
  388,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,  397,
  488,    0,   -1,  329,   -1,   -1,  332,   -1,   -1,  384,
  336,   -1,  387,  388,   -1,  341,  414,   41,  344,   -1,
   44,   -1,  397,   41,   -1,  262,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   59,   -1,   -1,   -1,  414,
   -1,   59,   41,  441,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  384,   -1,
   59,  387,  388,   -1,   -1,   -1,  441,    0,   -1,   -1,
   -1,  397,   -1,   -1,  379,   -1,   -1,   -1,  453,   -1,
  455,   -1,  319,   -1,   -1,  322,   -1,   -1,  414,  262,
  488,   -1,  329,   -1,   -1,  332,  401,   -1,    0,  336,
   -1,   -1,   -1,  408,  341,   -1,   -1,  344,   41,  262,
   -1,   44,   -1,  488,   -1,  441,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   59,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  442,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,  319,  384,   -1,  322,
  387,  388,   -1,   -1,   -1,   -1,  329,   59,   91,  332,
  397,   -1,  488,  336,   -1,   -1,  319,   -1,  341,  322,
   -1,  344,   -1,   -1,   -1,   -1,  329,  414,   -1,  332,
   -1,    0,   -1,  336,   -1,   -1,   -1,  360,  341,   91,
   -1,  344,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  441,  329,   -1,  360,  332,   -1,
   -1,  384,  336,   -1,  387,  388,  453,  341,  455,   -1,
  344,   -1,   41,   -1,  397,   44,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,  387,  388,  360,   -1,   -1,   -1,
   59,  414,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,
   -1,  488,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,  414,   -1,   -1,  388,    0,   -1,   -1,  441,   -1,
   -1,   -1,   91,  397,   -1,   -1,   -1,   -1,   -1,  278,
  453,  280,  455,   -1,   -1,   -1,   -1,   -1,  441,  288,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
  453,  319,  455,   -1,  322,  329,   41,   -1,  332,   44,
    0,  329,  336,   -1,  332,  488,   -1,  441,  336,   -1,
  344,   -1,   -1,  341,   59,  258,  344,   -1,   -1,  453,
   -1,   -1,   -1,   -1,   -1,  488,  360,  461,   -1,   -1,
   -1,  274,  360,   -1,  277,  278,   -1,  280,   -1,   -1,
   -1,   41,  285,   -1,   44,  288,  258,   -1,   -1,   -1,
  384,   -1,   -1,   -1,  488,   -1,  384,   -1,  301,   59,
  388,    0,  274,  397,  307,  277,  278,  310,  280,  397,
  379,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,  414,    0,   -1,  301,
   -1,   91,  401,   -1,   -1,  307,   -1,   -1,  310,  408,
   -1,   -1,   41,    0,   -1,   44,   -1,  441,   -1,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,   -1,  453,
   59,  455,   -1,   -1,   -1,  453,   -1,   -1,   41,  258,
   -1,   44,   -1,  442,   -1,   -1,  379,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  274,   59,   44,   -1,  278,
   -1,  280,   91,   -1,   -1,   -1,  285,   -1,  401,  288,
  488,   -1,   59,   -1,   -1,  408,   -1,  379,   -1,  412,
   -1,   -1,  301,   -1,   -1,   -1,  419,   -1,  307,   -1,
   -1,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  401,
   -1,   -1,   -1,   -1,  437,   -1,  408,   -1,   -1,  442,
  412,   -1,   -1,   40,   -1,   -1,   43,  419,   45,   -1,
   -1,   -1,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,  467,  437,   63,   -1,  471,   -1,
  442,   -1,  277,  278,   -1,  280,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,   -1,   -1,   -1,  467,  301,   -1,  258,  471,
   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  401,   -1,  274,   -1,   -1,   -1,  278,  408,
  280,   -1,   -1,  412,   -1,  285,   -1,   -1,  288,   -1,
  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,  301,   -1,   43,   -1,   45,   -1,  307,  437,   -1,
  310,    0,   -1,  442,   -1,   -1,   -1,   -1,   58,  258,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  379,  274,   -1,   -1,  467,  278,
   -1,  280,  471,   -1,   -1,  258,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  401,   -1,   -1,   -1,
   -1,   -1,  301,  408,   -1,  278,   -1,  280,  307,   -1,
   59,  310,  285,   -1,  419,  288,    0,   -1,   -1,  379,
   -1,  278,   -1,  280,   -1,   -1,   -1,   -1,  301,   -1,
   -1,  288,  437,   -1,  307,   -1,   -1,  442,   -1,   -1,
   -1,  401,   -1,   -1,  301,   -1,   -1,   -1,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  419,
   -1,   -1,   -1,   -1,   -1,   -1,  471,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   59,   -1,  437,   -1,  276,
  379,   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  290,   -1,   43,  293,   45,   -1,  296,
  297,   -1,  401,   -1,   -1,   -1,  379,  467,   -1,  408,
   58,  471,   -1,  412,   -1,   63,   -1,   -1,  315,   -1,
  419,   -1,  379,   -1,   -1, 1153, 1154,   -1,  401,   -1,
  327,   -1,   -1,   -1,   -1,  408, 1164, 1165,  437, 1167,
 1168,   -1,   -1,  442,  401,   -1,  419, 1175, 1176, 1177,
 1178,  408, 1180, 1181, 1182, 1183, 1184, 1185,  355,  356,
   -1,   -1,   -1,   -1,  437,   -1,   -1,  267,  467,  442,
  367,   -1,  471,   -1,  371,   -1,  276,   -1,   -1,   -1,
   -1,   -1,  379,   -1,   -1,  442,   -1,   -1,   -1,   40,
  290,   -1,   43,   -1,   45,   -1,  296,  297,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,  258,
   -1,   -1,   63,   -1,   -1,  315,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  422,   -1,  327,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,  301,   -1,   -1,  355,  356,   -1,  307,   -1,
   -1,  458,  459,  460,  461,  462,  463,  367,  271,   -1,
   -1,  371,   -1,   -1,  258,  472,   -1,   -1,   -1,  379,
   -1,  330,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,  279,   -1,   -1,   -1,  302,
  349,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,  358,
  313,  314,   -1,  316,   -1,  364,  319,  301,  418,  267,
   -1,   -1,  422,  307,   -1,   -1,   -1,   -1,  276,   -1,
  333,   -1,   40,  382,  434,   43,  339,   45,   -1,   -1,
   -1,   -1,  290,   -1,  444,   -1,  330,   -1,  296,  297,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,  349,   -1,  315,   -1,   -1,
  419,   -1,  472,   -1,  358,   -1,   -1,   -1,   -1,  327,
  364,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  490,  491,   -1,   -1,   -1,   -1,  399,   -1,  382,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,  260,
   -1,   -1,  263,   -1,   -1,  418,  267,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,  276,   -1,   -1,   -1,   40,
  433,  379,   43,   -1,   45,  419,   -1,   -1,   -1,  290,
  443,   -1,   -1,   -1,   -1,  296,  297,   58,   -1,  452,
   -1,  454,   63,   -1,   -1,   -1,   -1,   -1,  461,   -1,
   -1,   -1,   -1,   -1,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,  422,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   40,
   -1,   -1,   43,   -1,   45,  426,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  434,   -1,   -1,   -1,   58,  296,  297,
   -1,   -1,   63,  444,   -1,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   60,   61,   62,  327,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,  260,
   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,  276,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   58,  296,  297,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,  327,   -1,  426,   -1,
   40,   -1,   -1,   43,   -1,   45,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   58,   -1,
   -1,   -1,   -1,   63,  355,  356,   -1,   -1,  325,   -1,
  458,  459,  460,  461,  462,  463,  367,  334,   -1,   -1,
  371,   -1,   -1,   -1,  472,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,  361,   -1,  363,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
  377,   -1,  379,  380,  381,  276,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,  426,   -1,   -1,   -1,  290,
   -1,   -1,   -1,  434,   58,  296,  297,   -1,  272,   63,
   -1,   -1,   -1,  444,   -1,   -1,  280,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,  458,  459,  460,
  461,  462,  463,  430,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,  325,   -1,   -1,  355,  356,  260,   -1,   -1,  263,
  334,   -1,   -1,  267,   -1,   -1,  367,   -1,  342,   -1,
  371,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  361,   -1,  363,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   40,
   -1,   -1,   43,  327,   45,  426,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   58,   -1,   -1,
  290,   -1,   63,  444,   -1,   -1,  296,  297,   -1,   -1,
   -1,  355,  356,   -1,   -1,   -1,  430,  458,  459,  460,
  461,  462,  463,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,  426,   -1,   -1,   -1,  290,   -1,   -1,   -1,
  434,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,  472,   -1,
   40,   -1,   42,   43,   -1,   45,  426,  481,  482,  483,
  484,  485,  486,  487,  434,   -1,  490,  491,   58,   -1,
   -1,  355,  356,   63,  444,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,  260,
  490,  491,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  276,   -1,   43,   -1,   45,
   -1,   -1,  426,   -1,   -1,   -1,   -1,   -1,   -1,  290,
  434,   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,
  271,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,  313,  314,   63,  316,   -1,   -1,  319,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,   -1,   -1,  267,  339,   -1,
   -1,   -1,   -1,   -1,   -1,  426,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,  444,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,  327,  399,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,  273,   -1,   -1,   -1,  277,  418,   -1,   -1,
   -1,  267,   -1,  353,  285,  355,  356,   -1,   -1,   -1,
  276,   40,  433,   -1,   43,  296,   45,  367,  299,   -1,
   -1,  371,  443,   -1,  290,   -1,   -1,   -1,   -1,   58,
  296,  297,   -1,  454,   63,   -1,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
   -1,  327,   -1,   58,   -1,  346,  347,  348,   63,  350,
  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,  374,  444,  376,   -1,   -1,  267,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,  276,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  472,   -1,   -1,   -1,  407,  296,  297,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  490,  491,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  418,   -1,   40,   41,   -1,   43,  327,   45,
   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,  434,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  444,   -1,
  461,   -1,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,  367,   -1,
  481,  482,  371,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,  492,  493,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,   -1,   40,  490,  491,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,   -1,   -1,   -1,  434,   -1,  296,  297,   -1,
   -1,   -1,  267,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,  290,   -1,   -1,  327,   -1,
   -1,  296,  297,  472,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,  490,  491,   58,   -1,   -1,  355,  356,   63,   -1,
   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,  353,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  267,   -1,   -1,   -1,  302,   -1,   -1,   -1,  418,
  276,   -1,  309,   -1,   -1,   -1,  313,  314,   -1,  316,
   -1,   -1,  319,   40,  290,  434,   43,   -1,   45,   -1,
  296,  297,   -1,   -1,   -1,  444,  333,   -1,   -1,   -1,
   -1,   58,  339,   -1,   -1,   -1,   63,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,  434,
   -1,  327,   -1,  472,   -1,   -1,   -1,   -1,   -1,  444,
  267,   -1,  481,  482,  483,  484,  485,  486,  487,  276,
   -1,  490,  491,  458,  459,  460,  461,  462,  463,  355,
  356,   -1,   -1,  290,   -1,   -1,   -1,  472,   -1,  296,
  297,  367,  399,   -1,   -1,  371,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,
   -1,  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  443,   -1,   -1,   -1,
   -1,   -1,  267,   -1,   -1,  452,   -1,  454,  355,  356,
   -1,  276,   40,   -1,  461,   43,   -1,   45,  434,   -1,
  367,   -1,   -1,   -1,  371,  290,   -1,   -1,  444,   -1,
   58,  296,  297,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,  327,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,   -1,   -1,  490,  491,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
  355,  356,   -1,   -1,   58,   -1,   -1,  444,   -1,   63,
  267,   -1,  367,   -1,   -1,   -1,  371,   -1,  455,  276,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,  290,   -1,  472,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,
  455,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,  472,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,  267,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,  276,  298,
   -1,  300,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
   -1,   -1,  290,   -1,   -1,  314,   -1,  434,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,  328,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,  458,  459,  460,  461,  462,  463,   -1,   -1,  327,
   -1,   -1,   -1,  267,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,  290,  355,  356,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,   -1,   -1,
   -1,   -1,   -1,  327,  413,   -1,  461,  416,   -1,  418,
  419,   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
  485,  355,  356,   -1,  443,  490,  491,   -1,   -1,   -1,
  273,   -1,   -1,  367,  277,   -1,  434,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,  292,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,  340,   -1,   -1,
  434,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
  444,  354,   -1,  273,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,  374,  292,  376,   -1,   -1,  296,   -1,  472,  299,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
  340,  424,  277,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,  273,   -1,   -1,   -1,
  277,  296,   -1,  446,  299,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  461,  374,  292,  376,   -1,   -1,  296,
   -1,   -1,  299,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,  481,  482,
   -1,   -1,  490,  491,   -1,  340,   -1,  407,   -1,  492,
  493,  346,  347,  348,   -1,  350,  351,  352,   -1,  354,
   -1,  273,   -1,  340,  424,  277,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,  374,
   -1,  376,   -1,   -1,  296,   -1,  446,  299,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,  340,  424,
  407,   -1,  492,  493,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,   -1,  273,   -1,   -1,  424,  277,   -1,
   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  461,  296,   -1,  446,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  407,   -1,  492,  493,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,  340,  424,   -1,   -1,  492,  493,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  461,   -1,   -1,  374,   -1,  376,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,   -1,  481,
  482,  490,  491,   -1,   -1,   -1,   -1,   -1,  407,   -1,
  492,  493,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  492,  493,
};
#define YYFINAL 17
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 493
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","LIMIT","SUBSTRING","CONNECTION_ID","TRANSACTION_ID",
"LARGEINT","KW_INT64",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : USER",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_string default_opt end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION nonneg_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : SYMBOL",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT distinct_clause select_list from_clause where_clause group_clause having_clause limit_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : column_name",
"column_list : column_list ',' column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : USER",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyerror (TEXT *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static SSHORT	lines, att_charset;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (file->fil_partitions)
    {
    if (!file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*file->fil_length,file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((file->fil_length) && (file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    if (c == '\n')
	{
	lines++;
	line_start = ptr + 1;
	}

    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr + 1;
		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p,UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	};
    yylval = (NOD) MAKE_string (string, p - string);
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start), 
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 18:
{ DSQL_debug = (int) yyvsp[0];
			  if (DSQL_debug > 10)
			      yydebug = DSQL_debug;
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 19:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 25:
{ yyval = yyvsp[0]; }
break;
case 26:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_list (yyvsp[0]); }
break;
case 30:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 31:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 32:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 33:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 36:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 38:
{ yyval = 0; }
break;
case 39:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 42:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 49:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 51:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = yyvsp[0];}
break;
case 70:
{ yyval = yyvsp[0]; }
break;
case 71:
{ yyval = yyvsp[0]; }
break;
case 72:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 74:
{ field->fld_dtype = dtype_blob; }
break;
case 75:
{ 
			field->fld_dtype = dtype_cstring; 
			field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 76:
{ yyval = (NOD) NULL; }
break;
case 78:
{ yyval = yyvsp[-1]; }
break;
case 80:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 84:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 85:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 86:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 89:
{ yyval = yyvsp[0]; }
break;
case 90:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 91:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 92:
{ yyval = yyvsp[0]; }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = yyvsp[0]; }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 102:
{ yyval = NULL; }
break;
case 103:
{ yyval = make_list (yyvsp[0]); }
break;
case 105:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 106:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 107:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 108:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 109:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 110:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 111:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 112:
{ yyval = (NOD) 0;}
break;
case 113:
{ yyval = yyvsp[-1]; }
break;
case 114:
{ yyval = (NOD) NULL; }
break;
case 117:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 119:
{ yyval = NULL; }
break;
case 120:
{ yyval = NULL; }
break;
case 121:
{ yyval = yyvsp[0]; }
break;
case 122:
{ yyval = (NOD) NULL; }
break;
case 123:
{ yyval = (NOD) NULL; }
break;
case 126:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 127:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 130:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 131:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 132:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 133:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 137:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 138:
{yyval = (NOD) NULL;}
break;
case 141:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 142:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 144:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 145:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 146:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 147:
{yyval = (NOD) NULL;}
break;
case 150:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 159:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 160:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 161:
{ file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 162:
{ file->fil_flags |= LOG_serial;
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 163:
{ file = make_file(); 
			  file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) file);}
break;
case 164:
{ file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) file); }
break;
case 166:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 167:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) file); }
break;
case 168:
{ file = make_file();
			  file->fil_name = (STR) yyvsp[0]; }
break;
case 171:
{ file->fil_length = (SLONG) yyvsp[0]; }
break;
case 172:
{ file  = make_file ();}
break;
case 177:
{ file->fil_start = (SLONG) yyvsp[0];}
break;
case 178:
{ file->fil_length = (SLONG) yyvsp[-1];}
break;
case 185:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 186:
{ yyval = yyvsp[0]; }
break;
case 187:
{ yyval = yyvsp[0]; }
break;
case 188:
{ yyval = (NOD) NULL; }
break;
case 190:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 193:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 194:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 195:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 196:
{ 
			field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 199:
{ yyval = NULL; }
break;
case 200:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 203:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 204:
{ field = make_field (yyvsp[0]);
				  yyval = (NOD) field; }
break;
case 205:
{ yyval = yyvsp[-1]; }
break;
case 206:
{ field = make_field (NULL);
			  yyval = (NOD) field; }
break;
case 207:
{ yyval = yyvsp[0]; }
break;
case 208:
{ yyval = (NOD) NULL; }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = make_node (nod_user_name, (int) 0, NULL); }
break;
case 211:
{ yyval = yyvsp[0]; }
break;
case 212:
{ yyval = yyvsp[0]; }
break;
case 213:
{ yyval = yyvsp[0]; }
break;
case 214:
{ yyval = (NOD) NULL; }
break;
case 217:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 218:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 219:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 220:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 222:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 223:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 224:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 225:
{ yyval = yyvsp[0]; }
break;
case 226:
{ yyval = NULL ;}
break;
case 231:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 235:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 236:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 237:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 238:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 239:
{ yyval = NULL;}
break;
case 240:
{ yyval = yyvsp[0];}
break;
case 241:
{ yyval = yyvsp[0];}
break;
case 242:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 243:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 244:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 245:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 246:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 247:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 248:
{ yyval = make_list (yyvsp[-1]); }
break;
case 249:
{ yyval = NULL; }
break;
case 250:
{ yyval = yyvsp[0]; }
break;
case 251:
{ yyval = NULL; }
break;
case 253:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 254:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 255:
{ yyval = make_list (yyvsp[0]); }
break;
case 256:
{ yyval = NULL; }
break;
case 258:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 259:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 262:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 263:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 265:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 268:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 274:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 278:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 279:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 280:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 281:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 282:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0]); }
break;
case 283:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 284:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 285:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 286:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 287:
{ yyval = make_list (yyvsp[0]); }
break;
case 288:
{ yyval = make_list (yyvsp[-1]); }
break;
case 289:
{ yyval = NULL; }
break;
case 290:
{ yyval = make_list (yyvsp[0]); }
break;
case 291:
{ yyval = make_list (yyvsp[-1]); }
break;
case 292:
{ yyval = NULL; }
break;
case 295:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 296:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 297:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 298:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 299:
{ yyval = NULL; }
break;
case 301:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 302:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 304:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 305:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 306:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 307:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 309:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 310:
{ yyval = make_list (yyvsp[0]); }
break;
case 311:
{ yyval = make_list (yyvsp[-1]); }
break;
case 312:
{ yyval = NULL; }
break;
case 316:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 317:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 321:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 322:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 323:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 324:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 325:
{ yyval = make_list (yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = yyvsp[-1]; }
break;
case 332:
{ beginning = lex_position(); }
break;
case 333:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 334:
{ beginning = last_token; }
break;
case 335:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 336:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 337:
{ yyval = 0; }
break;
case 338:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 339:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 340:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 341:
{ yyval = NULL; }
break;
case 342:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 343:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 344:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 345:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 346:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 347:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 348:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 349:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 350:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 351:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 353:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 354:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 355:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 361:
{ yyval = NULL; }
break;
case 362:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 363:
{ yyval = yyvsp[0]; }
break;
case 364:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 365:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 366:
{ yyval = yyvsp[0]; }
break;
case 367:
{ yyval = yyvsp[0]; }
break;
case 368:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 369:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 370:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 372:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 373:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 374:
{ yyval = yyvsp[0]; }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 377:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 378:
{ yyval = yyvsp[0]; }
break;
case 379:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 381:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 382:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 383:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 384:
{ yyval = yyvsp[0]; }
break;
case 385:
{ yyval = yyvsp[0]; }
break;
case 386:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 387:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 388:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 389:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 409:
{ yyval = NULL; }
break;
case 410:
{ yyval = NULL; }
break;
case 411:
{ yyval = NULL; }
break;
case 412:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 413:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 414:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 415:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 416:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 417:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 418:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 419:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 421:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 422:
{ yyval = yyvsp[0]; }
break;
case 423:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 424:
{ yyval = yyvsp[0]; }
break;
case 425:
{ yyval = yyvsp[0]; }
break;
case 427:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 428:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 430:
{ yyval = NULL; }
break;
case 432:
{ yyval = NULL; }
break;
case 433:
{ yyval = yyvsp[0]; }
break;
case 434:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 435:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 436:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 437:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 438:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 439:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 440:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 441:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 442:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 443:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 444:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 449:
{ field->fld_ranges = make_list (yyvsp[-1]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 450:
{ field->fld_ranges = make_list (yyvsp[-2]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 452:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 453:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 454:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 460:
{ 
			field->fld_dtype = dtype_int64; 
			field->fld_length = sizeof (SINT64); 
			}
break;
case 461:
{ 
			field->fld_dtype = dtype_long; 
			field->fld_length = sizeof (SLONG); 
			}
break;
case 462:
{ 
			field->fld_dtype = dtype_short; 
			field->fld_length = sizeof (SSHORT); 
			}
break;
case 463:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    field->fld_dtype = dtype_timestamp; 
			    field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    field->fld_dtype = dtype_sql_date; 
			    field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 464:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			field->fld_dtype = dtype_sql_time; 
			field->fld_length = sizeof (SLONG);
			}
break;
case 465:
{ 
			field->fld_dtype = dtype_timestamp; 
			field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 470:
{ 
			field->fld_dtype = dtype_blob; 
			}
break;
case 471:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-1];
			field->fld_sub_type = 0;
			}
break;
case 472:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-3];
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 473:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = 80;
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 474:
{
			field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 475:
{
			field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 476:
{
			field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 477:
{
			field->fld_sub_type_name = yyvsp[0];
			}
break;
case 478:
{
			field->fld_sub_type = (USHORT) 0;
			}
break;
case 479:
{
			field->fld_character_set = yyvsp[0];
			}
break;
case 481:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 482:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			field->fld_flags |= FLD_national;
			}
break;
case 483:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 484:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 485:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			}
break;
case 486:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 495:
{ 
			  field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 496:
{  
			   field->fld_sub_type = dsc_num_type_decimal;
			   if (field->fld_dtype == dtype_short)
				{
				field->fld_dtype = dtype_long;
				field->fld_length = sizeof (SLONG);
				};
			}
break;
case 497:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 498:
{
			field->fld_dtype = dtype_long; 
		    	field->fld_length = sizeof (SLONG); 
			field->fld_precision = 9;
		    	}
break;
case 499:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 500:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			    }
			field->fld_precision = (USHORT) yyvsp[-3];
			field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 503:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    field->fld_dtype = dtype_double;
			    field->fld_length = sizeof (double); 
			    }
			else
			    {
			    field->fld_dtype = dtype_real; 
			    field->fld_length = sizeof (float);
			    }
			}
break;
case 504:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 505:
{ 
			field->fld_dtype = dtype_real; 
			field->fld_length = sizeof (float); 
			}
break;
case 506:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 507:
{ yyval = yyvsp[-1]; }
break;
case 508:
{ yyval = 0; }
break;
case 512:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 513:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 514:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 515:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 516:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 519:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 520:
{ yyval = (NOD) NULL; }
break;
case 522:
{ yyval = (NOD) NULL; }
break;
case 523:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 525:
{ yyval = (NOD) NULL; }
break;
case 527:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 532:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 533:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 534:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 535:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 536:
{ yyval = yyvsp[0];}
break;
case 538:
{ yyval = yyvsp[0];}
break;
case 539:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 540:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 541:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 542:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 543:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 544:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 545:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 546:
{ yyval = 0; }
break;
case 547:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 548:
{ yyval = (NOD) NOD_SHARED; }
break;
case 549:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 550:
{ yyval = (NOD) 0; }
break;
case 551:
{ yyval = (NOD) NOD_READ; }
break;
case 552:
{ yyval = (NOD) NOD_WRITE; }
break;
case 554:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 555:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 556:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 557:
{ yyval = 0; }
break;
case 559:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 560:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 561:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 562:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 563:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 564:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 565:
{ yyval = make_list (yyvsp[0]); }
break;
case 566:
{ yyval = 0; }
break;
case 568:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 569:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 570:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 571:
{ yyval = 0; }
break;
case 572:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 573:
{ yyval = 0; }
break;
case 574:
{ yyval = yyvsp[0]; }
break;
case 575:
{ yyval = 0; }
break;
case 576:
{ yyval = yyvsp[0]; }
break;
case 577:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 578:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 579:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 580:
{ yyval = 0; }
break;
case 581:
{ yyval = make_list (yyvsp[0]); }
break;
case 582:
{ yyval = 0; }
break;
case 584:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 586:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 587:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 588:
{ yyval = make_list (yyvsp[0]); }
break;
case 590:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 593:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 594:
{ yyval = yyvsp[-1]; }
break;
case 595:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 596:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 597:
{ yyval = make_list (yyvsp[-1]); }
break;
case 598:
{ yyval = NULL; }
break;
case 600:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 604:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 605:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 606:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 607:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 608:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 609:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 610:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 611:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 612:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 613:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 614:
{ yyval = make_list (yyvsp[0]); }
break;
case 615:
{ yyval = 0; }
break;
case 617:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 620:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 621:
{ yyval = yyvsp[0]; }
break;
case 622:
{ yyval = 0; }
break;
case 623:
{ yyval = yyvsp[0]; }
break;
case 624:
{ yyval = 0; }
break;
case 625:
{ yyval = yyvsp[0]; }
break;
case 626:
{ yyval = 0;}
break;
case 627:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 628:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 629:
{ yyval = 0;}
break;
case 630:
{ yyval = yyvsp[0]; }
break;
case 631:
{ yyval = 0; }
break;
case 632:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 633:
{ yyval = 0; }
break;
case 634:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 635:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 636:
{ yyval = 0; }
break;
case 637:
{ yyval = 0; }
break;
case 639:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 640:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 643:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 644:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 645:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 646:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 648:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 649:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 650:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 652:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 655:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 656:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 657:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 660:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 661:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 663:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 664:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 667:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 669:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 670:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 674:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 675:
{ yyval = yyvsp[0]; }
break;
case 677:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 680:
{ yyval = NULL; }
break;
case 681:
{ yyval = make_list (yyvsp[-1]); }
break;
case 683:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 686:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 687:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 690:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 691:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 702:
{ yyval = yyvsp[-1]; }
break;
case 703:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 704:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 705:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 708:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 710:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 711:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 712:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 713:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 714:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 715:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 716:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 717:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 718:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 719:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 721:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 722:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 723:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 724:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 725:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 726:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 729:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 730:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 731:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 732:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 733:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 735:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 736:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 737:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 738:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 739:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 741:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 743:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 744:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 745:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 746:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 747:
{ yyval = make_list (yyvsp[-1]); }
break;
case 748:
{ yyval = yyvsp[-1]; }
break;
case 749:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 750:
{ yyval = make_node (nod_select_expr, e_sel_count, 
		 		yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 758:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 759:
{ yyval = yyvsp[0]; }
break;
case 760:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 761:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 763:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 764:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 765:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 766:
{ yyval = yyvsp[-1]; }
break;
case 767:
{ yyval = yyvsp[-1]; }
break;
case 768:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 769:
{ yyval = yyvsp[0]; }
break;
case 770:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 771:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 772:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 773:
{ yyval = yyvsp[0]; }
break;
case 774:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 775:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 776:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 777:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 779:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 781:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 782:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 783:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 784:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 785:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 786:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 788:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 789:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 790:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 791:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 796:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 797:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 798:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 799:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 800:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 801:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 802:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 803:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 804:
{ yyval = yyvsp[0]; }
break;
case 805:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 807:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 808:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 809:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 810:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 811:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 813:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 814:
{ yyval = yyvsp[0];}
break;
case 815:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 816:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 817:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 818:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 819:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 820:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 821:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 822:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 823:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 824:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 825:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 826:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 827:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 828:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 829:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 830:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 831:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 832:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 833:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 834:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 835:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 836:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 837:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 838:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 839:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 842:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
