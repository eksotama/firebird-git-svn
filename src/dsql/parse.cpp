#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 *
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define RECREATE 408
#define REFERENCES 409
#define RESERVING 410
#define RETAIN 411
#define RETURNING_VALUES 412
#define RETURNS 413
#define REVOKE 414
#define RIGHT 415
#define RPAREN 416
#define ROLLBACK 417
#define SEGMENT 418
#define SELECT 419
#define SET 420
#define SHADOW 421
#define SHARED 422
#define SINGULAR 423
#define SIZE 424
#define SMALLINT 425
#define SNAPSHOT 426
#define SOME 427
#define SORT 428
#define SQLCODE 429
#define STABILITY 430
#define STARTING 431
#define STATISTICS 432
#define SUB_TYPE 433
#define SUSPEND 434
#define SUM 435
#define TABLE 436
#define THEN 437
#define TO 438
#define TRANSACTION 439
#define TRIGGER 440
#define UNCOMMITTED 441
#define UNION 442
#define UNIQUE 443
#define UPDATE 444
#define USER 445
#define VALUES 446
#define VARCHAR 447
#define VARIABLE 448
#define VARYING 449
#define VERSION 450
#define VIEW 451
#define WAIT 452
#define WHEN 453
#define WHERE 454
#define WHILE 455
#define WITH 456
#define WORK 457
#define WRITE 458
#define FLOAT 459
#define NUMBER 460
#define NUMERIC 461
#define SYMBOL 462
#define STRING 463
#define INTRODUCER 464
#define ACTION 465
#define ADMIN 466
#define CASCADE 467
#define FREE_IT 468
#define RESTRICT 469
#define ROLE 470
#define COLUMN 471
#define TYPE 472
#define EXTRACT 473
#define YEAR 474
#define MONTH 475
#define DAY 476
#define HOUR 477
#define MINUTE 478
#define SECOND 479
#define WEEKDAY 480
#define YEARDAY 481
#define TIME 482
#define TIMESTAMP 483
#define CURRENT_DATE 484
#define CURRENT_TIME 485
#define CURRENT_TIMESTAMP 486
#define NUMBER64BIT 487
#define SCALEDINT 488
#define CURRENT_USER 489
#define CURRENT_ROLE 490
#define KW_BREAK 491
#define SUBSTRING 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define LARGEINT 498
#define KW_INT64 499
#define DEBUG_KEYWORD 500
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
    9,    9,    9,    9,   20,   20,   19,   19,   19,   30,
   30,   23,   31,   31,   31,   31,   31,   22,   22,   28,
   28,   24,   13,   13,   13,   13,   13,   13,   13,   34,
   25,   25,   25,   25,   35,   35,   35,   35,   21,   21,
   36,   36,   36,   26,   26,   41,   27,   27,   42,   42,
    6,   43,   43,   45,   50,   50,   50,   47,   47,   47,
   54,   54,   55,   55,   48,   48,   57,   57,   57,   57,
   57,   44,    5,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   12,   75,   75,   62,   62,   65,
   65,   65,   73,   84,   84,   84,   85,   85,   86,   86,
   87,   87,   91,   91,   72,   94,   94,   96,   96,   97,
   97,  100,  100,  101,  102,  102,  103,  104,   70,   74,
   71,   88,   88,  107,  108,  108,  110,  110,  111,  111,
  111,  111,  111,  109,  109,  112,  112,  113,  113,  113,
  113,  115,  115,  115,  115,  114,  114,  119,  119,  118,
   92,  120,  120,  121,  124,  125,  125,  126,  122,  123,
  123,  127,  127,  128,  128,  129,  129,  129,   90,   90,
   90,   67,   77,  130,  130,  130,  131,  131,  132,  132,
  133,  133,  133,  139,   80,   80,  135,  135,   98,   98,
   93,  143,  144,   56,  136,  136,   99,   99,   99,   99,
   99,   99,  137,  137,  151,  151,  152,  154,  154,  154,
  154,  154,  134,  153,  153,  157,  157,  157,  157,  159,
  160,  161,  156,  155,  155,  155,  155,  155,  162,  163,
  164,  164,  164,  164,   66,   76,  169,  165,  165,  166,
  166,  170,  170,  171,  167,  167,  172,  172,  173,  174,
  174,  168,  168,  168,  176,  176,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  179,  180,  181,  182,  182,  183,  189,  185,  185,
  185,  186,  186,  186,  187,  187,  187,  187,  184,  188,
  188,  177,  177,  194,  195,  195,  196,  196,  196,  196,
   11,  198,  198,  198,  199,  199,  199,  199,  199,  199,
   69,  201,  204,  204,  204,  205,  209,  214,  214,  215,
  215,  216,  216,  141,  203,   81,   83,  202,  202,   68,
  219,  219,  219,  220,  223,  223,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  221,  221,  222,    2,  226,  226,  226,  226,  226,
  226,  226,  234,  235,  232,  232,  236,  236,  236,  236,
  236,  236,  236,  227,  227,  237,  237,  237,  237,  237,
  237,  237,  231,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  239,  239,  241,
  241,  240,  238,  238,  238,  233,  233,  229,  230,  230,
  243,  243,  243,  243,  244,  244,  228,  245,  245,  246,
  246,    8,  247,  247,  247,  247,  247,  247,  247,  247,
  247,  247,  247,  247,   95,   95,  138,  138,  250,  250,
  253,  253,  255,  255,   51,   51,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  260,  260,  261,  261,  251,
  251,  251,  251,  262,  262,   59,   59,   59,   53,   53,
  257,  257,  257,  254,  254,  254,  266,  266,  266,  265,
  265,  264,  264,  264,  258,  258,  269,  267,  267,  267,
  268,  268,  259,  259,  259,  259,  270,  270,   16,   16,
   16,  272,  272,  272,    4,   14,  274,  274,  275,  275,
  276,  276,  271,  277,  277,  278,  278,  279,  279,  279,
  279,  280,  280,  281,  281,  282,  282,  284,  284,  284,
  285,  285,  285,  286,  286,  286,  283,  288,  288,  288,
  289,  289,  287,  287,  290,  292,  292,  291,  291,  273,
   15,  293,  293,  293,  294,  294,  297,  297,  298,  298,
   63,   63,   63,  295,  295,  299,  299,  296,  207,  207,
  208,  208,  302,  302,  303,  303,  303,  300,  306,  306,
  307,  307,  308,  308,  309,  309,  310,  310,  191,  191,
  312,  312,  217,  217,   29,  218,  218,  218,  218,  218,
  218,  218,  218,  313,  313,  313,  314,  314,  314,  206,
  206,  206,  206,  211,  211,  315,  315,  316,  316,  316,
  212,  212,  210,  210,  318,  318,  318,  213,  213,  319,
  320,  320,  320,  320,  320,  321,  321,  322,  322,  323,
  323,  324,  324,  324,  325,  325,   10,   10,  327,  327,
    7,    7,  328,  329,  330,   17,   17,  331,  332,  333,
  333,  178,  304,  304,    3,    3,  335,  335,  335,  337,
  337,   59,  336,  336,  338,  338,   32,   32,   79,   78,
   78,  326,  326,  339,  340,  340,  192,  192,  192,  140,
  334,  334,  105,  105,  105,  105,  342,  342,  342,  342,
  342,  342,  342,  342,  342,  342,  342,  343,  343,  343,
  343,  343,  343,  343,  343,  348,  348,  348,  348,  348,
  348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
  348,  354,  354,  344,  344,  345,  345,  345,  345,  346,
  346,  350,  350,  351,  351,  351,  351,  349,  352,  347,
  347,  355,  355,  353,  357,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,  150,
  150,  150,  358,  361,  361,  145,  145,  362,  362,  362,
  362,  362,  360,  360,  360,  360,  360,  356,  356,  356,
  356,  356,  356,  356,  356,  356,  356,  200,  146,  146,
  147,  148,  148,   49,   49,   18,   18,  225,  363,   52,
  117,  256,  256,   89,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  317,  317,  364,  364,  364,  364,  364,  364,  364,
  364,  301,  301,  149,   46,  263,  116,  142,  341,  158,
  193,  249,   61,   58,  197,  106,   64,  305,   33,   39,
  311,  248,   37,   40,  190,   38,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
    8,    6,    7,    5,    1,    2,    1,    2,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    3,
    0,    1,    7,    8,    6,    7,    6,    7,    4,    3,
    1,    3,    3,    3,    2,    2,    2,    2,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    3,    1,    2,
    2,    2,    3,    8,    1,    1,    5,    0,    1,    3,
    1,    3,    2,    4,    1,    3,    2,    3,    4,    4,
    2,    9,    2,    3,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    0,    1,
    1,    6,    6,    1,    1,    0,    0,    1,    0,    4,
    0,    1,    1,    2,    8,    1,    0,    3,    0,    0,
    1,    1,    2,    1,    1,    1,    2,    6,    1,    1,
    3,    0,    1,    1,    0,    1,    1,    2,    3,    4,
    2,    2,    3,    0,    1,    1,    2,    1,    1,    1,
    4,    3,    3,    3,    3,    1,    1,    6,    3,    1,
    3,    1,    3,    2,    1,    0,    2,    3,    1,    0,
    1,    1,    2,    3,    4,    0,    1,    2,    0,    1,
    1,    5,    5,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    2,    0,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    6,    4,    7,    8,    6,    4,    2,    1,    3,
    0,    2,    4,    0,    1,    1,    3,    3,    6,    3,
    0,    1,    2,    4,    1,    3,    2,    2,    2,    1,
    4,    1,    3,    0,    1,    1,    1,    3,    3,    3,
    7,    1,    1,    3,    4,    9,    2,    1,    3,    1,
    1,    6,    3,    0,    0,    0,    0,    3,    0,    9,
    1,    1,    0,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
    5,    2,    0,    4,    2,    3,    3,    2,    2,    3,
    3,    2,    3,    6,    1,    2,    4,    3,    2,    2,
    2,    2,    3,    1,    3,    3,    3,    2,    2,    4,
    4,    5,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    0,    2,    2,    0,    1,    2,
    2,    2,    2,    2,    1,    3,    7,    1,    0,    1,
    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    3,    2,    2,    2,    1,    1,    1,    1,    4,    5,
    1,    3,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    2,    4,    2,    2,    4,    2,    2,
    1,    1,    0,    3,    0,    1,    3,    1,    1,    3,
    2,    0,    2,    0,    3,    5,    0,    2,    0,    4,
    1,    2,    1,    1,    0,    1,    3,    2,    1,    1,
    2,    1,    4,    2,    1,    3,    8,    5,    1,    3,
    1,    1,    4,    4,    4,    1,    1,    5,    5,    1,
    3,    3,    1,    1,    7,    7,    5,    3,    0,    1,
    1,    1,    2,    0,    1,    1,    1,    0,    3,    1,
    3,    1,    0,    3,    1,    3,    1,    3,    3,    1,
    1,    3,    1,    3,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    1,    1,    5,    6,    3,    4,    5,    6,    3,
    4,    3,    4,    3,    4,    4,    5,    4,    4,    3,
    4,    3,    3,    9,    9,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    1,    1,    3,    1,    1,    1,
    1,    1,    4,    1,    3,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    4,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    6,    4,    6,    6,    6,
    8,    4,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,  529,  530,  531,    0,  582,
  681,  682,  686,  687,  438,    0,    0,    0,    0,    0,
    0,  375,  537,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,    0,   93,    0,    0,    0,   71,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  452,    0,    0,   35,   32,   34,    0,
   33,    0,  900,    0,    0,    0,    0,   30,   66,   64,
    0,    0,    0,    0,    0,  105,    0,    0,    0,    0,
    0,  536,    0,    0,    0,    0,  642,    0,    0,    0,
  902,  623,    0,    0,  848,    0,   19,  846,    2,    0,
    0,    0,    0,  422,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  423,  424,  425,  426,  427,    0,  403,  893,
    0,  897,    0,  382,  899,    0,  379,    0,  625,  903,
    0,  378,    0,  535,  844,    0,  144,  101,    0,  889,
  102,    0,  211,  720,    0,  896,  100,  139,    0,   96,
    0,  103,  850,    0,   97,    0,   98,  906,    0,   99,
  140,  104,  591,  592,    0,    0,  894,   72,    0,    0,
  892,  460,  453,    0,  459,  464,  454,  455,  462,  456,
  457,  458,  463,    0,   28,    0,   37,  707,   36,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
  107,    0,    0,    0,    0,    0,    0,  854,    0,  838,
  634,  636,    0,  637,  639,  882,  599,    0,  600,  640,
    0,    0,    0,    0,    0,    0,    0,  554,  543,    0,
  546,  548,  549,  550,  551,  557,  558,    0,  901,  624,
  849,  847,    0,    0,  583,    0,  581,    0,    0,    0,
    0,  439,    0,    0,  346,    0,  214,    0,  385,  376,
  436,  437,    0,    0,    0,    0,    0,    0,  394,    0,
  351,  352,    0,  541,  539,  845,    0,    0,    0,    0,
    0,    0,    0,  147,  126,    0,   94,    0,  115,  114,
    0,    0,    0,    0,    0,    0,  885,   73,    0,    0,
    0,  683,  684,  461,    0,  884,  820,  819,  818,    0,
    0,  821,  822,    0,    0,  824,  326,  327,  321,    0,
  325,  816,  823,    0,  710,    0,    0,   25,    0,    0,
  904,    0,   69,   67,   65,   31,    0,    0,    0,  712,
    0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
    0,    0,  806,    0,    0,  808,    0,    0,    0,  839,
    0,    0,  810,  811,  812,  840,  841,    0,  842,  843,
    0,    0,    0,    0,    0,    0,  717,  803,  804,  805,
  809,  791,    0,  790,    0,  792,  787,  788,  789,    0,
  602,    0,  694,    0,    0,  603,    0,    0,  580,    0,
  555,    0,  552,    0,  553,  578,    0,  573,    0,    0,
  547,    0,  721,  690,    0,    0,    0,  517,    0,    0,
    0,  587,    0,  584,    0,  179,    0,    0,  123,  444,
  166,  167,    0,  442,    0,    0,    0,    0,  445,    0,
  440,    0,    0,  389,  391,  390,    0,  392,    0,  386,
  212,    0,    0,  262,    0,    0,    0,    0,  398,  399,
    0,  429,    0,    0,    0,    0,    0,    0,    0,  356,
  355,  448,    0,    0,  143,    0,    0,  152,    0,  151,
    0,  158,  141,    0,  156,  159,  160,  148,    0,    0,
  483,  521,  488,    0,  522,    0,    0,  489,    0,    0,
    0,  512,  525,  482,  507,  484,  485,  486,  487,  467,
  346,  465,  466,  468,    0,    0,  477,  478,  479,  480,
  481,    0,    0,    0,    0,    0,  118,    0,    0,  195,
    0,    0,  344,    0,  214,    0,    0,   81,    0,    0,
  702,    0,    0,    0,    0,    0,    0,    0,    0,  723,
  727,  728,  729,  730,  731,  732,  733,  734,  735,  736,
  825,  826,  827,  817,    0,    0,    0,  709,   26,    0,
    0,   42,   70,    0,    0,   24,    0,  715,    0,    0,
  678,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  905,  298,    0,    0,    0,    0,    0,
    0,    0,  635,    0,    0,  638,    0,    0,    0,    0,
  898,  606,  533,    0,  852,  532,    0,  556,    0,  564,
  560,  559,    0,    0,    0,  575,  563,    0,    0,  688,
  689,    0,    0,    0,    0,    0,    0,    0,  594,    0,
    0,  124,    0,    0,    0,    0,    0,    0,  346,  388,
    0,  346,  347,  393,  475,    0,  264,    0,  258,  260,
  344,  890,  234,    0,    0,  346,    0,    0,  203,  344,
    0,    0,    0,    0,  239,  233,  236,  237,  238,  397,
  434,  433,  396,  395,    0,    0,    0,    0,    0,    0,
  354,    0,  346,    0,  149,  153,    0,  157,    0,    0,
  508,  509,  526,    0,  523,    0,    0,  515,  513,  514,
    0,    0,    0,    0,  476,    0,    0,    0,    0,  516,
  344,    0,  194,    0,  197,  199,  200,    0,    0,    0,
    0,    0,  214,   76,    0,    0,   75,  886,  496,  497,
    0,    0,    0,  726,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  323,  329,  330,  328,  711,    0,
    0,    0,    0,    0,    0,    0,    0,   51,   59,   61,
    0,    0,   68,    0,    0,    0,  714,    0,    0,  344,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  874,  875,  876,  877,  878,  879,  880,  881,    0,    0,
    0,  801,  802,  873,    0,    0,  888,  797,    0,    0,
    0,    0,    0,    0,  807,  719,  718,    0,    0,    0,
    0,  611,  612,    0,    0,  604,  607,  534,  853,  565,
  574,  569,  568,    0,  579,  722,  691,  692,  209,  589,
  590,  588,    0,  175,  169,  176,    0,  172,    0,    0,
  171,    0,  182,  163,  162,  851,  165,  164,  446,    0,
    0,    0,  387,  263,    0,  205,  346,  207,    0,  347,
  202,  208,    0,    0,  240,    0,  400,  401,  346,  344,
  347,    0,    0,    0,  372,    0,  190,  191,  150,    0,
    0,    0,    0,    0,    0,  524,    0,    0,  346,  347,
    0,  471,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  192,    0,    0,    0,    0,  333,    0,
   80,    0,    0,    0,    0,   85,   82,    0,    0,    0,
  891,  685,    0,    0,  737,    0,    0,    0,  763,  762,
    0,    0,    0,  770,  780,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  725,    0,   63,   55,   56,
   62,   57,   58,    0,    0,   20,    0,    0,    0,   40,
    0,    0,    0,  696,  716,  679,    0,  695,    0,  193,
    0,    0,    0,    0,    0,    0,  214,    0,  855,    0,
    0,  867,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  872,  813,    0,    0,    0,    0,    0,    0,
  626,    0,    0,    0,    0,    0,  571,  572,  576,    0,
    0,    0,    0,    0,    0,  183,    0,    0,  383,  217,
  218,  219,  220,  221,  222,    0,    0,    0,  267,    0,
  215,    0,    0,  241,    0,  430,  431,  402,    0,    0,
    0,    0,    0,    0,  346,  450,  347,  887,  161,    0,
    0,  491,    0,  490,  527,    0,  519,    0,    0,    0,
  469,    0,  499,    0,    0,  501,  504,  506,    0,    0,
  113,    0,  198,  346,    0,    0,  345,    0,   95,    0,
  111,    0,   91,    0,    0,    0,    0,   84,    0,  778,
  779,    0,    0,    0,    0,  828,  830,  831,  832,  829,
    0,    0,  781,    0,    0,    0,    0,    0,    0,    0,
  771,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,   60,   52,   53,
   21,  700,  701,    0,  698,  705,  706,  703,    0,  677,
    0,    0,    0,  861,  860,    0,    0,  857,  856,    0,
  865,  864,  863,  862,  859,  858,    0,    0,    0,    0,
  614,    0,  621,    0,  619,  615,    0,  632,  628,  630,
    0,    0,    0,    0,    0,  177,  173,    0,    0,  188,
  184,    0,  347,    0,    0,  347,  268,    0,    0,    0,
  225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  447,  493,    0,  494,    0,  128,    0,    0,    0,
  132,  134,  135,  136,  472,  474,  470,  503,  347,    0,
    0,    0,    0,  331,    0,  334,  346,   86,    0,    0,
   88,    0,    0,    0,    0,    0,    0,  783,    0,  782,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
  680,  347,  213,  866,  868,  869,    0,  870,    0,    0,
  617,    0,    0,    0,  646,  649,    0,    0,  598,    0,
  168,  185,  347,  138,    0,  272,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  275,  270,    0,    0,  280,  281,  282,  283,  286,
  288,  257,    0,  201,  226,    0,    0,    0,  231,  227,
  230,    0,  347,  370,  371,  367,  366,  369,  368,    0,
  492,  520,  137,  125,  133,  255,  120,  347,    0,  348,
  335,    0,    0,   89,   90,   77,    0,  749,  757,    0,
  833,  835,  836,  837,  834,  750,  758,  753,  761,    0,
    0,  751,  759,  752,  760,  746,  754,  747,  755,  748,
  756,  697,  256,    0,    0,  620,    0,    0,    0,  661,
  663,    0,  658,    0,  178,  384,    0,    0,    0,    0,
  290,    0,    0,    0,  289,    0,  291,  278,  284,    0,
  287,  273,    0,  276,    0,  312,  277,  204,  228,  232,
    0,    0,  243,  374,  350,    0,    0,    0,   74,   92,
    0,  871,    0,    0,  650,  647,  662,    0,  269,  279,
    0,    0,    0,    0,  285,    0,    0,  305,  306,  320,
    0,    0,    0,    0,  315,  274,  313,    0,    0,  242,
    0,    0,    0,    0,    0,  340,  341,    0,    0,    0,
    0,    0,  669,    0,    0,    0,    0,    0,    0,  293,
    0,    0,    0,  297,    0,  319,  895,  318,  317,    0,
    0,  229,    0,    0,    0,  247,    0,  246,    0,    0,
    0,    0,    0,  112,    0,  785,  671,  660,    0,    0,
  672,    0,  668,    0,    0,    0,    0,    0,    0,    0,
    0,  308,  307,  314,  316,    0,    0,  251,  250,  249,
  343,    0,    0,    0,    0,  667,    0,  674,  300,    0,
    0,  292,    0,    0,    0,  309,  254,  252,  253,    0,
  336,    0,    0,    0,    0,  310,  294,    0,    0,  784,
    0,  673,  303,  295,    0,  676,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1397,   26,   27, 1398,
   29,   30,   31,   32, 1399,   34, 1400,  581,   94,  367,
  826, 1056,   95,  611,  827,   96,  372,  616,  122,   97,
   98,  227,  889,  111,  828,  829,  171,  199,   99,  830,
  100,  374,   70,  208,  338,  415,  576,  994,  356,  786,
  550,  458,  765,  577,  578,  579,  996,  209, 1232,   66,
  161,   67,  205, 1643, 1179,  190,  195,  197,  200,  187,
  178,  181,  192,  202,  106,  239,  241,  364,  228,  715,
  483,  588,  933,  331,  568,  982, 1171,  516,  665,  959,
  468,  469,  498,  326,  551,  970, 1309,  684, 1119, 1310,
 1311, 1312, 1313, 1314,  589,  188,  179,  322,  523,  323,
  324,  524,  525,  526,  527, 1149,  927,  471,  472,  917,
  915,  473,  921,  916, 1110, 1276,  922,  923, 1115,  333,
  774,  775,  776,  777,  717,  940, 1289,  552,  719,  417,
  779,  878,  492, 1247, 1120,  418,  419,  420,  433,  421,
 1290, 1291,  501, 1420, 1550,  725,  726,  713,  727,  728,
  729, 1551, 1552, 1619,  304,  496, 1127, 1401,  167,  493,
  494, 1128, 1129, 1402, 1403, 1404, 1505, 1405, 1406, 1407,
 1408, 1409, 1410, 1411, 1568, 1607, 1537, 1609,  422,  645,
 1264,  423, 1002, 1506, 1544, 1545, 1578,  359,  360,  424,
  987, 1177, 1324,  988,  989,  115,  258,  434, 1517,  342,
 1106, 1274, 1379, 1554, 1555, 1556, 1557, 1104,  313,  512,
  743, 1146,  513,  741,  193,   52,  308,  172,  133,  291,
  158,  298,  164,  703,  700,  299,  309,  733,  310,  509,
  951,  159,  292,  480,  514, 1147,   84,  169,  212,  553,
  554,  705,  971,  706,  972,  973,  557,  558,  559,  560,
  561,  964,  790,  562,  563,  564,  758,  565,  460,  755,
   36,   37,   38,   54,  174,  315,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  671,  447,  904, 1109,  448,
  449,  676,   39,  132,  287,   40,  461,  462,  689,  658,
  259,  435,  436,  437,  662,  890,  891,  892,  893, 1098,
  425, 1265,  116,  117, 1374, 1375,  426,    0, 1563, 1484,
 1564, 1565, 1566, 1603, 1644,  379, 1067,   41,   42,  343,
   43,   44,  456,  457,  835, 1064, 1234, 1238,  380,  619,
  184,  590,  591,  592,  593,  594,  595,  596,  597,  598,
  599,  600, 1201, 1012, 1014, 1202,  643,  427,  428,  429,
  876,  363,  282,  869,
};
static short yysindex[] = {                                   3835,
 1619, -244, 2362,  406,  -51, 3121,  -97, 1502,  -31,   88,
  553, 1951, -244,  853,  469,  -71,   31,    0,  358,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,    0,
    0,    0,    0,    0,    0, 3959,    5,  225,  231,  -71,
  247,    0,    0,  374,  993,  330,    5,  346,  231,  377,
  -71,  247,    0,  385,  410,    0,  982,  519,  442,    0,
  -71,  479,    5,  648,  442,  346,  225,  231,  377,  -71,
  247,  385,  410,    0,  231,  594,    0,    0,    0,  984,
    0,  984,    0,  695,  700,   43, 1227,    0,    0,    0,
  330,  -71,  330,  231,  -71,    0,  936,  932, 1003,  104,
 1153,    0,   89,  129, 1008,  873,    0,  346, 1045, 1391,
    0,    0,  976,  973,    0,  985,    0,    0,    0, 1167,
  -79, 1147,  622,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  638,    0,    0,
  993,    0,  400,    0,    0, 1430,    0, 1323,    0,    0,
  407,    0, 1055,    0,    0, 1043,    0,    0, 1284,    0,
    0, 1249,    0,    0,  993,    0,    0,    0, 1430,    0,
  364,    0,    0, 1218,    0, 1248,    0,    0,  984,    0,
    0,    0,    0,    0, 1253, 1124,    0,    0, 1211, 1170,
    0,    0,    0, 1124,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1162,    0,  330,    0,    0,    0,  663,
 1235,  632,  410,  888, 1315, 1602, 1343, 1430,    0, 1218,
    0, 1349,  663, 1267,  632, 1290, 1327,    0, 5837,    0,
    0,    0, 5837,    0,    0,    0,    0, 4602,    0,    0,
 1241,  225, 1321, 1260,  387,  -71, 1282,    0,    0, 1391,
    0,    0,    0,    0,    0,    0,    0, 1297,    0,    0,
    0,    0,  449, 1325,    0, 1322,    0,  837, 1412, 1047,
  622,    0, 1493,  414,    0,  330,    0,  638,    0,    0,
    0,    0,  330, 1381,  -50, 1328,  309, 1756,    0, 4197,
    0,    0,  938,    0,    0,    0, 1744, 1744,  993, 1433,
  993, 2978, 1284,    0,    0, 3731,    0, 1381,    0,    0,
 1524,  463, 1775,  -71, 1559,  225,    0,    0, 1784,  189,
 2928,    0,    0,    0, 1365,    0,    0,    0,    0, 1373,
 1382,    0,    0, 1413,  127,    0,    0,    0,    0, 1794,
    0,    0,    0, 1522,    0,  -71, 1406,    0,  231, 1392,
    0,   52,    0,    0,    0,    0,  -71, 1297,  520,    0,
  -71, 1381, 1815,    0, 1536,  231, 1821,  663, 1463, 1827,
 1828, 1830,    0, 1831, 1835,    0, 1837, 1838, 1840,    0,
    0, 1841,    0,    0,    0,    0,    0, 1842,    0,    0,
 5837, 5837, 5072, 1424, 1847, 1767,    0,    0,    0,    0,
    0,    0, 1797,    0, 1845,    0,    0,    0,    0, 1959,
    0, 1142,    0, 1569, 1848,    0, -100,   96,    0,  927,
    0, -168,    0, -168,    0,    0, 1849,    0,   86, 1465,
    0,    0,    0,    0, 1852,   35, 1851,    0, 1622, 1622,
 1859,    0, 1860,    0, 1525,    0,  107, 1560,    0,    0,
    0,    0,  993,    0, 1744, 1744, 1744, 1744,    0, 1869,
    0, 1637, 1639,    0,    0,    0, 1618,    0, 3731,    0,
    0, 3731, 1546,    0, 1430, 1658, 1462, 3404,    0,    0,
  618,    0, 1462, 1144, 1323,    0, 1529, 1490, 1458,    0,
    0,    0,  -76, 1533,    0, 1473,  377,    0,  993,    0,
 1667,    0,    0, 2978,    0,    0,    0,    0,  163, 1499,
    0,    0,    0, 1500,    0, 1551, 1912,    0, 1608, 1920,
  -32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1870,  105,    0,    0,    0,    0,
    0,   51, 1922, 1923, 1920, 1703,    0,  993,  993,    0,
  -50,  407,    0, 1584,    0, 1557, 1927,    0, 4620,   28,
    0, 1582, 1591, 1938, 3506, 1940, 3026, 5636,  -67,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1631,  127,  330,    0,    0, 1714,
 1543,    0,    0, 1516,  632,    0, 1671,    0, 1662, 1945,
    0, 1671, 1728,  -50, 1714, 1672, 1673,  231, 1038, 5139,
  606,  346, 5837, 1148, 1178, 1205, 2096, 5837,  133,  133,
  853, 2100, 1962,    0,    0, 5320, 1548, 5837, 5837, 5837,
 5837, 5837,    0, 5837,   74,    0,   32, 1554, 5139, 1550,
    0,    0,    0,  625,    0,    0, -123,    0, 1555,    0,
    0,    0,  -71,  743,  -71,    0,    0,  330, 1297,    0,
    0, 5139, 1548,  982,  982,  449,   95,  330,    0,  993,
  993,    0,  331, 1473, 1473, 1549,  377, 1047,    0,    0,
 1973,    0,    0,    0,    0, 1739,    0,  330,    0,    0,
    0,    0,    0, 1745, 1978,    0, 1720, 1738,    0,    0,
 1680, 1682,  984, 1746,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  377,  330, 5367, 1642, 1645, 1650,
    0,  377,    0, 1210,    0,    0, 1620,    0,   77, 1621,
    0,    0,    0,  377,    0, 1912,  101,    0,    0,    0,
 1743,  101, 1625,  101,    0, 2006,  377,  377,  377,    0,
    0, 1691,    0, 1664,    0,    0,    0,  938, 1638,  -71,
 1676,   38,    0,    0, 2010, 1782,    0,    0,    0,    0,
  189, 1596, 1325,    0, 1325, 3847,   60, 5837, 5837, 3578,
 2020,  897, 3813, 5837, 3895,  981, 4048, 4130, 5546, 4283,
 4365, 4518, 3506, 3506,    0,    0,    0,    0,    0, 1392,
  231,  247, 1392,  385,  410,   98, 2017,    0,    0,    0,
 1714, 1677,    0,  -22, 1696, 1297,    0, 5139, 1696,    0,
 1684, 2021, 2017, 1714,  573, 1757, 5837, 5837, 1803, 5837,
 2027, 5837, 2036, 2269, 5837, 5837, 5837, 5837, 5837, 5837,
    0,    0,    0,    0,    0,    0,    0,    0, 1760, 1007,
 1008,    0,    0,    0, 1142, 1686,    0,    0, 1802,  133,
  133, 1087, 1087,  978,    0,    0,    0,   32, 2043, 2040,
 1021,    0,    0, 3506, 1758,    0,    0,    0,    0,    0,
    0,    0,    0, -162,    0,    0,    0,    0,    0,    0,
    0,    0, 2042,    0,    0,    0, 1705,    0, 1744, 1822,
    0,  331,    0,    0,    0,    0,    0,    0,    0, 2053,
 3506,  515,    0,    0, 1795,    0,    0,    0,  515,    0,
    0,    0,  984,  984,    0, 2054,    0,    0,    0,    0,
    0, -103,  -88,  -42,    0, 1836,    0,    0,    0, 1644,
   31, 1711, 1675, 1739, 2060,    0, 1473, 1723,    0,    0,
  989,    0, 2046, 1644, 1028,  377, 2064, 2066, 2072, 1795,
 1744, 1560,  -50,    0, 1533,  853, 1665, 1683,    0,   34,
    0,  377, 1734, 1804, 4620,    0,    0,  377, 1640, 1808,
    0,    0, 2089, 2094,    0, 1643, 1142, 2097,    0,    0,
 1142, 2104, 1844,    0,    0, 1793, 2108, 1142, 2120,  820,
 2123, 1142, 2124, 5837, 5837, 2020, 5837, 5609, 2128, 1142,
 2132, 2133, 1142, 2135, 5837, 1142, 2141, 1142, 2145, 2146,
 1142, 2148, 2149, 1142, 2150,    0, 1930,    0,    0,    0,
    0,    0,    0, 1865, 1714,    0, 1714,   98, 2017,    0,
  213,  213,   26,    0,    0,    0, 1736,    0, 1795,    0,
 2021, 2017, 2154,  573, 2405, 2470,    0, 2606,    0, 2666,
 5837,    0, 2689, 2859, 2867, 2906, 2913, 2952, 5837,  377,
 5837, 5837,    0,    0, 1021, 2153, 5139,  973,   32, 1811,
    0, 1812, 1814, 1863, 1935, 1872,    0,    0,    0, 1786,
  993, 1829, 1473, 1826, 1473,    0, 3506,   90,    0,    0,
    0,    0,    0,    0,    0, 1764, 1953, 1795,    0, 5837,
    0, 1934, 1818,    0, 3506,    0,    0,    0, 1846, 1850,
 1853, 1854, 1855, 1856,    0,    0,    0,    0,    0, 2188,
   31,    0, 1549,    0,    0,  101,    0,  515, 1868,  101,
    0,  101,    0, 1739, 2190,    0,    0,    0, 1953, 1473,
    0, 1560,    0,    0, 1008, 1956,    0,  416,    0, 2042,
    0, 2208,    0, 2209,  993,  -37, 2210,    0,  993,    0,
    0, 5837, 1839, 1839,  853,    0,    0,    0,    0,    0,
 2215, 1741,    0, 1839, 1839, 5837, 1839, 1839, 2986, 1142,
    0, 1679, 5837, 1142, 1839, 1839, 1839, 1839, 1142, 1839,
 1839, 1839, 1839, 1839, 1839, 1873,    0,    0,    0,    0,
    0,    0,    0, 1823,    0,    0,    0,    0, 5139,    0,
 1953,  573, 2154,    0,    0, 3731, 2219,    0,    0, 3038,
    0,    0,    0,    0,    0,    0, 3160,   85, 1624, 1142,
    0, 1142,    0, 1747,    0,    0, 1021,    0,    0,    0,
   32, 1787, 3506, 1867, 1744,    0,    0,  993, 1210,    0,
    0,  380,    0,  330, 6130,    0,    0, 1142, 1622, 1934,
    0,  719,  -71,  412, 1832, 1941, 1833, 1981, 1949, 1991,
 1795,    0,    0, 2254,    0, 2255,    0, 1944, 1622, 1868,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1210,
 1836, 4602, 1913,    0, 1638,    0,    0,    0, 1926,  305,
    0, 1739, 1928, 1142, 2260, 2272, 1008,    0, 2563,    0,
 2274, 2276, 1142, 2279, 2280, 5837, 5837, 1142, 2281, 2282,
 2283, 2287, 2288, 2289, 2294, 2296, 2298, 2302,    0,  213,
    0,    0,    0,    0,    0,    0,  377,    0, 1554, 5139,
    0,  552, 2065, 2300,    0,    0,  -67,  586,    0, 1473,
    0,    0,    0,    0, 3731,    0,    5,  915, 2295, 1325,
 2306, 2012, 5837, 2299, 2307, 2304, 2308, 2309, 2016, 2310,
    0,    0,    0, 4812, 2314,    0,    0,    0,    0,    0,
    0,    0, 2324,    0,    0, 2022, 2031,  -71,    0,    0,
    0,  984,    0,    0,    0,    0,    0,    0,    0, 1953,
    0,    0,    0,    0,    0,    0,    0,    0, 2056,    0,
    0, 5837,  993,    0,    0,    0,  993,    0,    0, 5837,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1142,
 1142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2337, 1758,    0, 3506, 1548, 1787,    0,
    0, 2014,    0, 2341,    0,    0, 2325, 2326,  231, 5837,
    0, 2047, 3506, 1817,    0, 3506,    0,    0,    0,   97,
    0,    0,  867,    0,  353,    0,    0,    0,    0,    0,
  984, 2003,    0,    0,    0,   37, 1554, 1142,    0,    0,
 1624,    0, 1872,  -67,    0,    0,    0,  600,    0,    0,
 5693, 2486,   97,  643,    0,  644,  593,    0,    0,    0,
    5, 1932,   31,   53,    0,    0,    0, 2003,  415,    0,
 2005, 2008,   37, 2352, 1021,    0,    0, 1758, 2357, 1554,
 1867,  -71,    0, 2358, 2356, 1086, 4753, 1989, 2359,    0,
  138, 1971, 2107,    0,   97,    0,    0,    0,    0, 5186,
  867,    0, -139, -139, 2114,    0, 1975,    0, 1021, 2383,
   37, 2081, 1872,    0, 1758,    0,    0,    0,  600, 2386,
    0,  225,    0, 2100, 1752,   30, 2369, 2137, 2125, 5186,
 5186,    0,    0,    0,    0, 1964,  379,    0,    0,    0,
    0, 1021,   37, 1867, 1872,    0,  225,    0,    0,   97,
 2390,    0, 1596, 5186, 2130,    0,    0,    0,    0,  902,
    0, 1867, 2392, 2398, 1781,    0,    0, 5186, 3506,    0,
  225,    0,    0,    0,  -67,    0,
};
static short yyrindex[] = {                                      0,
    0,  140,  872,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  840, 3231,    0,    0,    0,    0, 2440,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  111,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  957,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2067,    0,    0,    0,  236,
    0,  236,    0,    0,    0,    0, 2069,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4837, 3303,    0,    0,    0,  994,
    0,    0,    0, 1443,    0,    0,    0,    0,    0,    0,
    0,  135,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -49,    0,    0,    0,    0,
  619,    0, 1036,    0,    0,    0,    0,    0, 1090,    0,
    0, 7226,    0,    0,    0,    0,    0,    0,  -49,    0,
 -134,    0,    0, 2404,    0,    0,    0,    0, 2185,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1091,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1101,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1077,    0,  -49,    0, 2404,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  677,    0,    0, 1146,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1161,    0, 2177,    0,    0,    0,    0, 1222,    0,    0,
    0,    0,    0, 2192,  -89, 4912,    0, 1255,    0,    0,
    0,    0,  375,    0,    0,    0, 1997, 1997,    0,    0,
    0, 1295, 2136,    0,    0,    0,    0, 2192,    0,    0,
 1229,    0,    0,    0,    0,    0,    0,    0, 7194, 2068,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1299,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1300,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2192,    0,    0,    0,    0, 1301,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1654,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1790,    0,    0,    0,    0,    0,    0,    0,
    0,  119,    0,    0, 2142,    0,  114,    0,    0,    0,
    0,  445,    0,  445,    0,    0,  831,    0,  839, 1027,
    0, 2810,    0,    0,    0, 1091,    0,    0, 1275, 1275,
  737,    0,    0,    0,  287,    0, 3247,   58,    0,    0,
    0,    0,    0,    0, 1997, 1997, 1997, 1997,    0,  157,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2195,    0,    0,    0,    0,    0,
 2177,    0,    0, 1075,    0,  328, 1990,    0,    0,    0,
    0,    0,    0,  802,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1329,    0,    0,    0,    0,  572,   59,
    0,    0,    0,  763,    0,    0, 1219,    0,    0, 1264,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1541, 1568,    0,    0,    0,    0,
    0, 1330,  893,    0, 1264,    0,    0,    0,    0,    0,
  -89,  999,    0,    0,    0,    0, 2051,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  200,    0,    0,    0,
    0,  200,    0,  -89,    0,    0,    0,    0, 6016,    0,
 6016,    0,    0, 6016, 6016, 6016,    0,    0, 2361, 2465,
 4988,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1074,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  437,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  777,  777,    0,    0,    0,    0,    0,
    0,    0, 3315,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  188,    0,    0,    0,    0,
    0,    0,    0, 2428,    0,    0, 1152, 1719,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  411,  611,  765,
    0,    0,    0,  759,    0,    0,    0,    0,    0, 1375,
    0,    0,    0,    0,    0, 1219,    0,    0,    0,    0,
  833,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  254,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7014,    0,    0,    0,   61,    0,    0,    0,    0,
 2159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1350, 1351,    0,    0,    0,
    0,    0,    0,    0, 1366,    0,    0,    0, 1366,    0,
    0, 1372, 1449,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6016,    0,    0,    0,  228,    0,    0,    0, 1894, 2601,
 2775, 2030, 2225,    0,    0,    0,    0,    0, 2838,  428,
 1192,    0,    0,    0, 1820,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  294,    0,    0,    0,    0,    0, 1997, 2011,
    0, 3590,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2204,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1468,    0,    0,    0,    0,
    0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
    0,    0, 1184,    0,    0,    0,    0,    0,    0, 2204,
 1997, 1475,  -89,    0, 2213, 3231, 1480,   65,    0,    0,
    0,    0, 7014,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1063,    0,    0,    0,
 5800,    0,    0,    0,    0,    0,    0, 5944,    0, 6196,
    0, 6202,    0,    0,    0,    0,    0,    0,    0, 6305,
    0,    0, 6335,    0,    0, 6368,    0, 6452,    0,    0,
 6482,    0,    0, 6516,    0,    0, 7012,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1350, 1484,    0,
 2041,  212,    0,    0,    0,    0,    0,    0, 2204,    0,
 1491, 1510, 1547,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2134, 1054,    0, 7076,    0, 2139,
    0, 2144, 2151,    0,    0, 1157,    0,    0,    0, 3099,
    0,    0,    0, 2033,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2228,    0,    0,
    0, 1280,    0,    0,    0,    0,    0,    0,  768,  881,
  884,  894,  913,  980,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  690,    0,
    0,    0,    0, 1748,    0,    0,    0,    0,    0,    0,
    0, 1570,    0,    0, 4837,    0,    0,    0,    0, 1576,
    0,    0,    0,    0,    0,   71,    0,    0,    0,    0,
    0,    0,    0,    0, 4988,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6566,
    0, 6601,    0, 6677,    0,    0,    0,    0, 6741,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1577,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1617,
    0,   63,    0,    0,    0,    0, 1442,    0,    0,    0,
    0,    0,    0,  566, 1997,    0,    0,    0, 2870,    0,
    0,    0,    0,    0,    0,    0,    0, 2439, 1215, 2338,
    0, 2177,    0,    0,    0,    0,    0,    0,    0,    0,
 2204,    0,    0,    0,    0,    0,    0,    0, 1592,  779,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  298,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0, 6762,    0,    0, 6016,    0,    0,    0,
    0,    0, 6846,    0,    0,    0,    0, 6881,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  212,
    0,    0,    0,    0,    0,    0,    0,    0,  270,    0,
    0, 2134,   69,  187,    0,    0,  373, 2441,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6986,
 6992,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   54,    0,    0,    0,    0,    0,
    0, 2450,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2155, 1444,    0,    0,    0,    0,  289, 2439,    0,    0,
    0,    0,   45, 7140,    0,    0,    0, 2441,    0,    0,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2432,    0,    0,
 2611, 2723,    0,  390,  209,    0,    0,  378,    0,  270,
 2455, 1226,    0,    0, 2460,    0,    0, 2443,  159,    0,
 2198,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2134, 1058,
    0,    0,  198,    0,   54,    0,    0,    0, 2441,    0,
    0,    0,    0, 2461,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  461,    0,  120,   45,    0,    0,    0,    0,    0,
 2445,    0,    0,    0, 5951,    0,    0,    0,    0, 2134,
    0, 2455, 2466,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2138,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2516,    0,    0, 2519,
    0,    0,    0,    0,   10,    0, 2520,  -13,  194,   -3,
 -541, 1472,  223, -210,  300, 2509, 2278,    0,  -39,    0,
 2317,  -85,  -43,    0,  562, -389,  -28,  -35,  -34, -165,
 2303, 1917,    0,    0,    0, 1345,    0,    0,  -46, 1545,
 -456,   15, -740, 1963, 1759, -264, 1567, 2468, -278,    0,
  -52,    0,  963,  -45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -554,  -25, 1558,
 -258, -104, -880,    0,    0,    0,    0, -292,  -90,-1054,
 1580, -303,  -38,    0, -460,    0,    0, -433, -267,    0,
 1231,    0,    0, 2259, -535,  -20,    0,    0,    0,    0,
 2240,    0, 2044, 2277, -158, 1604, -484,    0,    0,    0,
 -648,    0,    0,    0,    0,    0,    0, 1657,    0, 2342,
 1957, 1600, 2284, 2285,    0,    0,    0, -453, 1866,  -55,
 -552, -655,    0,    0, -212, -565, -113,  -91, -211, -766,
    0, 1303, -958,    0, 1039, 1304,    0, 2088,    0,    0,
    0, 1048, 1044, 1013,  146,  482, -872, -444,    0,    0,
 1891,    0, 1479, -307,    0,    0,    0, -195,    0,    0,
    0,    0,    0,    0,    0,    0, -538,    0, -407,    0,
-1267, -266,  970, 1105,    0, 1033,    0,    0, 2262,  -99,
    0,    0,    0,    0,-1001, -597, -820, 1293,    0, -436,
 -778,-1262,-1341,    0, -339, 1066,  214, -401, 2048, 1843,
 1646, 1306,    0,    0,  -15,    0,    0,    0,    0,    0,
 2318,    0,    0,    0,    0, 2331, 2119,    0,    0,    0,
    0,    0, 2339,    0,    0,    0,    0,  -16,    0,    0,
    0, -297, 1871, -296, 1474, -398,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2071,    0,    0, 1876,
    0,    0,    0, 2625,    0,    0,    0,    0, 2371,    0,
    0,    0,    0, 2199,    0, 2214,    0,    0,    0, 1970,
    0,    0,    0,    0,    0,  -77,    0, 1968,    0,-1066,
 1122,    0, 2000, -589, 2004,    0, -677, 1777,    0,    0,
 -116, 1296,    0, 2553,    0, 1193,-1134,    0, 1298,    0,
 1072,    0, 1112,    0, 1026,    0,    0,    0,    0, 2222,
    0,    0,    0, -321, 2062, 1857, -981,    0,    0,    0,
  918,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3491,  930, 1663,    0,    0,    0,    0, -199,
 2038, 2344,    0,    0,
};
#define YYTABLESIZE 7725
static short yytable[] = {                                     124,
  183,  128,  163,  127,  185,  166,  229,  280,  177,   33,
  168,  357,  358,  252,  255,  189,  459,  182,  522,  680,
  213,  194,  251,  254,  362,  517,  685,  909,  555,  556,
  201,  217,  489,  196,  218,  704,  487,  716,  707,  666,
  849,  224,  918,  871,  718,  235,  222,  237,  223,  794,
 1091,  797,  221,  285,  124,  216,  618,  441,  510, 1132,
  238,  582,  236,  220,  332,  240,  373,  653,  648, 1630,
 1138,  888,  126,  226,  191,  126, 1553,  993,  679,  373,
 1235,  500,  454,  842,  500,  652,  233,  414,  250, 1159,
  767,  500,  908,  219,  645,  615, 1581,  261,  510,  510,
 1005,   83,  510,  622,   83,  301,  622, 1169,  653,  648,
  586,   87,  648,  335,  300,  886,  441,  510,  693,  659,
  961,  622,  787,  332,  361, 1368,  653,  648,  249,  675,
 1283,  479,  500,  913,  595,  500,  886, 1376,  327,  538,
  664, 1055,  357,  358,  416,  967,  691,  233,  430,  510,
  500,  250,  116,  432,  414,  362,  443,  605,  935,  693,
  442,  455,  693,  660,  692, 1125,  463,  942,  253,  586,
  365,  354, 1125, 1292,  651,  626, 1326,  693,  659,  652,
  284, 1575,  694,  695,  696,  697,  644,  500,  235,  250,
  368,  250, 1369,  595,  813,  764, 1241,  652,  538,  699,
  555,  556,  749,  368,  613,  108,  464,  126,  338,  669,
 1095,  498,   53, 1141,  259,  443,  439,  299,  980, 1596,
  522,  895,  453, 1154, 1382,  738,  446,  644,  500,  123,
  235,  500,  708,  126,  109, 1139, 1330,  497, 1616,  385,
  488,  101,  724, 1107,  759,  644,  500,  491, 1066,  183,
  750,  504,  338,  119,  507,  361,  652,  126,  699, 1143,
 1561,  455,  739, 1569,  962, 1437, 1302,  338,  814,   71,
  498,  814,  518,  708,  520,  250,  708, 1046, 1047,  708,
 1617,  670, 1641,  949,  210,  570,  597, 1069,  654, 1058,
  574,  708,  761,  596,  572, 1108, 1144,  189, 1061, 1605,
 1650,  621, 1071, 1073,  246,   85,  639,  640,  642,  102,
  654,  235,  119,  760,  500,  441,  510,  444,  714,  814,
  814,  813,  453, 1441,  128,  612,  609, 1618,  116,  116,
 1624, 1292,  510,  247,  328,  510,  510,  617,  510,   14,
 1140,  622,  612,  510, 1376,  597,  510,  654,  368,  500,
  500,  813,  596,  235, 1322, 1142,  189, 1580,  968,  510,
  103,  661, 1642,  259,  441,  510, 1121,  740,  510,  500,
  885,  500,  651, 1121,  449,  690,  500,  645, 1472,  500,
   87,  763,  693,  382,  627,  645,  653,  648, 1175,  337,
  121, 1125,  500,  816,  817, 1118,  653, 1137,  500,  653,
  648, 1608, 1384, 1367,  674, 1412,  362, 1413,  653,  648,
  359,  180,  647,  651,  443, 1062,  129,  846,  648,  459,
 1383, 1267,  345, 1317,  245,  744,  693,  608, 1430,  586,
 1331,  651,  992,  449,  605, 1180,  645,  510, 1436,  693,
  930,  652,  720,  932,  566,  500,  814, 1197,  337,  373,
  645,  586, 1423,  500, 1560,  653,  648,  938,  301,  510,
  339,  500, 1277,  443,  653,  648,  160,  510,  608,  359,
  500,  510,  746,   83,  622,  595,  814,  441,  510,  346,
  232, 1473,  796,  907,  956,  926,  608,  125,  341,  788,
  125,  452,  500,  165,  500,  180,  510,  500,  121,  766,
  500,  510, 1486,  566,  339,  644,  818,  614,  500,  653,
  648,  500, 1000,  128, 1065,  183, 1450,  995,  644,  339,
  332,  772,  773,  653,  648,  432,  510,  644,  854,  500,
  510,  745, 1243,  870,  500,  180,  926,  338,  787,  929,
  338,  875, 1513,  879,  880,  881,  882,  883,  248,  875,
  538,  819,  633, 1054,  432,  248,  180, 1515,  452,  354,
  248,  659,  455,  500,  128,  659,  789,  699,  183,  463,
  299,  498,  693,  899,  644,  659,  443,  432, 1236,  498,
  693, 1282,  663,  644,  612,  347,  348,  349,  248,  175,
  176, 1446, 1121, 1372,  652,  580,  503, 1337,  654, 1294,
  500,  654,  119,  924,  925,  338,  659,  500,  350,  351,
  357,  853,  498,  352,  353,  498,  708,  654,  353,  708,
  654,  580,  125,  453,  659,  500, 1113,  597,  644, 1381,
  498,  329,  365,  446,  596,  905, 1575, 1559,  449,  652,
  710,  813,  644,  914,  914,  580,  189,  851,  125, 1361,
  338, 1574,  491,  652, 1048,  500,  301, 1051,  130,  500,
 1444, 1546,  338,  311,  338, 1228,  654, 1230, 1305,  357,
  442, 1131,  125,  813,  359, 1325,  561,  353, 1130, 1638,
  948,  950, 1286, 1572, 1573,  654,  162,  919, 1170,  130,
 1136,  651,  165, 1006, 1007, 1011, 1523,  945, 1018, 1020,
 1022,  485, 1030, 1033, 1036, 1038, 1041, 1044,  170,  645,
 1158,  928,  131,  651,  486, 1003, 1583, 1004,  337,  455,
 1124,  337,   68,   69, 1319,  889,  955, 1124,  995,  330,
  654, 1639,  362,  432,  302,  561,  585, 1377,  965,  362,
  990,  312, 1075, 1076,  654, 1078,  608, 1080,  130,  947,
 1083, 1084, 1085, 1086, 1087, 1088,  608, 1306,  189,  608,
  651,  920,  511, 1316,  358,  422,  814,  364,  608,  651,
  180,  443,  449, 1452,  645,  128,  593, 1049,  131, 1593,
  453,  977,  978,  979,  173, 1363,  337,  566, 1052,  339,
 1053,  180,  339, 1050,  118,  585, 1362, 1445,  814,  889,
 1196,  373,  511,  511,  633, 1503,  511,  186,  359,  566,
  345,  569, 1246,  362,  651,  608, 1625,  189, 1122,  645,
  593,  511, 1525,  358,  608, 1122,  364,  444,  651,  498,
  567,  337,  129,  645,  986,  593,  125,  131,  577,  538,
 1123,  206,  570,  337,  445,  337,  198, 1123,  498,  498,
  566,  498, 1228,  511,  566, 1414,  498,  339, 1584,  498,
  373,  651,  649,  623,  650,  256,  652,  346,  692,  608,
  566,   93,  498, 1100,  357, 1434,  899,  353,  498,  288,
  365,  608,  353,  361,  659, 1263, 1301, 1101,  353,  567,
 1307,  129,  505,  360,  570,  293,  566,  577,  538, 1198,
  119,  820,  339,  207,  813,  813,  659,  120,  125,  850,
  452, 1102,  363, 1200,  339, 1321,  339, 1133, 1134, 1209,
 1210, 1199, 1212, 1214,  843,  175,  176,  183,  289, 1480,
 1219, 1487, 1475,  505,  365, 1477,  505,  721,   14,  365,
  211, 1524,  361, 1480,  294,  128, 1124, 1150,  555,  556,
  498,  505,  360,  659, 1481,  104,  540, 1534,  362,  400,
 1536, 1233, 1233, 1237, 1181,  620, 1103,  346, 1481,  130,
  214,  363,  498,  347,  348,  349, 1250,  175,  176,  362,
  498, 1266, 1380,  505, 1257, 1514, 1259, 1260,  105,  498,
 1165,  498, 1262,  545, 1571,  225,  350,  351,  403,  404,
  405,  352,  353,  406,  407, 1373, 1183,  659,  357,  498,
  409,  410, 1187, 1482,  498,  540,  353,  823,  722,  561,
  511, 1092, 1279,  226, 1281, 1288,  562, 1482,  358,  814,
  814,  364, 1160,  724,  371,  542,  511,  189,  362,  511,
  511,  290,  511,  498, 1122,  128,  128,  511,  651,  649,
  511,  650,  545,  652,  561,  585,  346,  295,  131,  189,
  723,  121,  772,  511,  914,  373, 1123, 1631, 1442,  511,
 1094, 1160,  511,  654,  435,  296,  370,  585,  230, 1320,
 1558, 1161,  561,  231,  248,  562,  561, 1334,  189,  145,
  654, 1645, 1538,  371,  542,  593, 1504, 1416,  366,  647,
  324, 1343,  561,  772, 1258,  648,  772,  189, 1348,  297,
  129,  898,  129, 1655,  654,  189,  189,  593,  435, 1417,
 1164,  772,  189, 1595,  121, 1538, 1451, 1418,  561, 1540,
 1059, 1206,  654,  435,  432,  128,  109, 1304, 1329,  362,
  189,  511, 1333, 1072,  365,  544,  902,  361,  145,  654,
  505,  216,  189, 1592,  189,  463,  652,  360, 1263,  324,
  380, 1419,  358,  511,  903,  364,  505, 1612,  455,  505,
  505,  511,  505,  567,  109,  511,  363,  505,  189, 1541,
  505,  577,  511,  651,  649,  466,  650, 1592,  652,   87,
 1542,  609,  216,  505,  467,  216,  510,  652, 1538,  505,
  511,  355,  505,  189,  544,  511,  354,  511,  567,  109,
  216,  129, 1373, 1589,  210,  652,  577,  432,  528,  380,
 1592,  381, 1538, 1100,  250, 1453,   89,  473,  183,  453,
  511,  914,  609, 1539,  511,  609,  567, 1101, 1592, 1455,
  567, 1460, 1461,  362,  577, 1385,  203, 1454,  577, 1015,
  609, 1622, 1024, 1422,  377,  210,  567,  353,  210,  528,
 1233, 1102,  528,  518,  577, 1262, 1539,  256,  353, 1025,
  234,  505, 1614,  210,  210, 1016,  473,  528,  365,  223,
  381,  361,  567, 1640,  204, 1649,  647,  455, 1494, 1485,
  577,  360,  648,  505,  154, 1543,   90,  256,  322,   41,
   49,  505, 1635, 1636,  518,  505,   91,  518, 1613,  528,
  363,  257,  505,  377, 1026,  243, 1103, 1489,  210, 1263,
  223,  242,  518,  223,  772,  475, 1647, 1090,  155,  502,
  505,   92,  667,  210, 1488,  505, 1512, 1518,  223, 1539,
 1654,  847, 1100, 1027,  128, 1521,  113,  114,  453,   39,
   22, 1474,  267,  154,  518, 1263, 1101,  322,   41,   49,
  505, 1490,  463, 1539,  505,  704,  647,  114,  145,  562,
  502,   45,  648,  502,  495,  611,  476,  362, 1511,  340,
 1102,  772,  262,  463,  772, 1532,  244,  155,  502,  611,
  145,  772,  654,  340,  772,  278, 1519,  611,  772, 1492,
 1520,  340,  654,  772,  562,  654,  772,  256,   39,   22,
  477, 1028,   86,  611,  654,  495,  463,  340,  495,  145,
  502,  647,  772, 1600,  704, 1548, 1262,  648,  478,  216,
   45,  216,  562,  495,  279, 1103,  562,  256,  145,  216,
  283,  610,  625,  248,  281, 1531,  772,  145,   47,  772,
  772,  855,  562,  145,   87,  175,  176,  345,  463,  772,
 1601,  654, 1604,  455,  256,  286,   88,  451,  611,  303,
  654,  145,  340, 1602,  121,  652,  528,  772,  562,  349,
  314,  857,  610,   23,  248,  610,  625,  248, 1576,  463,
   46,   89,  528,  455,  455,  713,  528,  652,  528,  124,
  610,  625,  248,  528,  772,  316,  528,   47,  859,   48,
  609, 1562,  325,  463,  346,  654,  772,  455,  772,  528,
  609,  518,  713,  609,  453,  528,  451,  128,  528, 1579,
  216,  455,  609,  121,  332,  633,  124,  518,  349,  210,
  475,  518,   23,  518,  652, 1562,   43,  340,  518,   46,
  339,  518,  216,  652,  453,  453, 1628,  235,  344,  223,
  216,   90,  608,  670,  518,  607,  334,  500,   48,  122,
  518,   91,  887,  518,  124,  110,   44,  210,  453,  609,
  305,  475, 1562,  306,  475,  337,  709,  502,  609,  708,
  336,  210,  453,  210,  216,  906,   92,  528,  652,  475,
  670,  957,  958,  502,  887,   43,  124,  502,  500,  502,
  731,  500,  732,  670,  502,  210, 1227,  502, 1229,  528,
  347,  348,  349,  341,  175,  176,  500,  528,  122,  307,
  502,  528,  495,  609,  110,   44,  502,  369,  528,  502,
  317,  378,  518,  350,  351,  609,  910,  911,  352,  353,
  210,  495,  495,  889,  495,  377,  528,  815,  235,  495,
  815,  528,  495,  381,  518,  651,  649,  384,  650,  386,
  652,  815,  518,  388,  606,  495,  518,  318,  438,  319,
  235,  495,  440,  518,  651,  649,  528,  650,  235,  652,
  528,  117,  117,  885,  889,  889,  889,  889,  889,  901,
  889,  518,  837,  320,  984,  836,  518,  983,  502,  815,
  389,  441,  889,  889,  889,  889,  991,  450,  465,  783,
  651,  649,  235,  650, 1070,  652, 1093,  983,  321, 1092,
  502,  518, 1019,  263, 1023,  518, 1031, 1034,  502, 1039,
 1042, 1045,  502,   14,  889, 1112,  889,  500, 1111,  502,
  848, 1152,  852,  495, 1151,  856,  858,  860,  452,  465,
  610,   86,  465, 1157,  625,  465, 1156,  502,  264,  474,
  610,  625,  502,  610,  625,  495, 1240,  465,  625, 1239,
  482, 1340,  610,  495, 1339,  633,  625, 1371,  500,  786,
 1370,  500, 1629,  495,  495, 1370,  265,  502,  502,  505,
  266,  502,  625,   87,  515,  519,  500,  653,  651,  649,
  567,  650,  495,  652,  571,   88,  267,  495,  475,  645,
  475, 1653,  573,  575, 1575,  475,  625,  601,  475,  610,
  786,  786,  786,  786,  786,  602,  786,  606,  610,  625,
   89,  475,  268,  610,  603,  500,  495,  500,  786,  786,
  786,  786,  500,  371,  624,  500,  625,  625,  651,  649,
  645,  650,  625,  652,  615,  628,  629,  630,  500,  631,
  632,  347,  348,  349,  633, 1535,  634,  635,  645,  636,
  637,  638,  786,  610,  625,  644,  646,  654,  354,  657,
  655,  659,  673,  796,  677,  610,  625,  678,  625,  352,
  353,  683,  686,  647, 1192,  687,  250,  688,  466,  648,
   90,  682,  698,   45,  699,  889,  701,  889,  702,  475,
   91,  711,  647,  712,   46,  889,  735,  736,  648,  737,
  742,   47,  248,  889,  796,  796,  796,  796,  796,  889,
  796,  475,  889,  747,  657,   92,  500,  751,  752,  475,
  753,  754,  796,  796,  796,  796,   48,  756,  647,  757,
  762,  768,  769,   93,  648,  889,  771,  780,  500,  782,
  783,  791,  889,  792,  889,  889,  500,  793,  889,  795,
  831,  832,  889,  475,  838,  889,  796,  889,  834,  889,
 1347,  840,  844,  845,  889,  889,  465,  889,  465,  656,
  651,  649,  873,  650,  900,  652,  465,  894,  926,  877,
  500,  661,  931,  889,  889,  763,  889,  937,  936,  465,
  939,   49,  714,  946,  943,  500,  944,  500,  952,  799,
  889,  953,  889,  889,  889,  500,  954,  889,  963,  960,
  889,  889,  820,  969,  974,  976,  647,  981,  500,  998,
  889,  786,  648,  786,   50,  999,  986, 1001,   51, 1013,
 1057,  786, 1060, 1063, 1055,  889, 1077, 1079,  889,  786,
  799,  799,  799,  799,  799,  786,  799, 1074,  786, 1081,
 1089,  647, 1097, 1099,  889,  607, 1105, 1114,  799,  799,
  799,  799, 1117, 1135, 1126,  889,  647,  465, 1153, 1145,
 1155,  786,  648, 1162, 1166, 1148, 1167,  889,  786,  889,
  786,  786, 1168, 1185,  786,  889,  821, 1189,  786,  465,
 1176,  786,  799,  786, 1178,  786,  500,  465,  992, 1190,
  786,  786, 1188,  786, 1191,  146, 1193,  342,  645,  345,
  872,  651,  649, 1194,  650, 1203,  652, 1204,  500,  786,
  786,  645,  786,  822,  708,  796,  500,  796,  823, 1205,
  645,  465, 1207, 1208,  824,  796,  786, 1215,  786,  786,
  786, 1216, 1217,  786, 1218,  371,  786,  786,  342,  796,
 1220,  342,  796,  825, 1221, 1222,  786, 1223, 1224, 1225,
  500,  813, 1226, 1261,  146,  708,  342, 1242,  708, 1268,
 1269,  786, 1270, 1273,  786,  796, 1271,  645, 1272, 1275,
   86, 1284,  796,  708,  796,  796,  645, 1280,  796, 1278,
  786,  497,  796, 1285,  800,  796, 1293,  796, 1303,  796,
 1318,  786, 1295, 1323,  796,  796, 1296,  796,  647, 1297,
 1298, 1299, 1300,  786,  648,  786, 1308, 1327,  401, 1328,
 1332,  786,   87,  796,  796, 1338,  796, 1195, 1359, 1364,
 1360,  645, 1195, 1378,   88,  800,  800,  800,  800,  800,
  796,  800,  796,  796,  796, 1424, 1426,  796,  107, 1425,
  796,  796, 1427,  800,  800,  800,  800, 1428,  400,   89,
  796,  799, 1429,  799, 1431, 1432, 1433, 1443, 1440, 1447,
 1448,  799,  347,  348,  349,  796,  175,  176,  796, 1082,
  651,  649, 1449,  650, 1456,  652, 1457,  800,  799, 1458,
 1459, 1462, 1463, 1464,  796,  350,  351, 1465, 1466, 1467,
  352,  353,  406,  407, 1468,  796, 1469,  224, 1470,  409,
  410,  799, 1471, 1479, 1478, 1493, 1496,  796,  799,  796,
  799,  799,  102, 1491,  799,  796, 1500, 1495,  799,   90,
  794,  799, 1497,  799, 1508,  799, 1498, 1499, 1501,   91,
  799,  799, 1507,  799, 1509, 1510, 1516, 1522,  224,  647,
 1528,  224, 1527, 1529, 1530,  648, 1549, 1533, 1585,  799,
  799, 1587,  799, 1577,   92, 1591,  224, 1594, 1598, 1599,
 1606,  794, 1370,  794,  794,  794,  799, 1610,  799,  799,
  799, 1611,   93,  799,  146, 1583,  799,  799, 1584,  794,
  794,  794,  794, 1621, 1623, 1627,  799, 1632, 1637, 1634,
 1633,  248,  708, 1575,  708, 1651,  146, 1648, 1652,    1,
  593,  799,  708,  196,  799, 1244,  651,  649,  708,  650,
   27,  652,   29,  794,  346,  261,  142,  498,  259,  342,
  799,  432,  601,   79,  793,  146,  342,  206,  498,  342,
  186,  799,  248,  342,  266,  248,  373,  633,  498,  347,
  665,  342,  631,  799,  146,  799,  800,  627,  800,  664,
  248,  799,  187,  146,  629,  659,  800,  342,  265,  146,
  666,  304,  311,  302,  622,  793,  675,  793,  793,  793,
 1245,  651,  649,  800,  650,   25,  652,  146,   28,   35,
  110,  342,  387,  793,  793,  793,  793,  651,  649, 1231,
  650,  833,  652,  708,  342,  375,  800,  781,  708, 1186,
 1435,  997,  215,  800, 1570,  800,  800, 1182,  647,  800,
  376,  484,  342,  800,  648,  708,  800,  793,  800, 1184,
  800, 1172,  528,  708,  470,  800,  800,  748,  800,  861,
  862,  863,  864,  865,  866,  867,  868, 1163, 1116,  342,
  841,  383, 1173,  941,  800,  800, 1582,  800,  499,  500,
  730,  342, 1415,  342, 1586, 1421, 1620,  708,  934, 1588,
  795,  800, 1646,  800,  800,  800, 1287,  354,  800, 1547,
  244,  800,  800, 1615, 1439,  235,  605,  224, 1590,  778,
  985,  800,  794,  734,  794,  250, 1438,  508,  490,  481,
 1174,  966,  794, 1315,  975,  770,  800,  112,  668,  800,
  451,  795,  901,  795,  795,  795, 1248,  651,  649,  794,
  650,  244,  652,  912,  244,  800,   55,  672,  896,  795,
  795,  795,  795,  897, 1096, 1476,  800,   56,  260,  244,
 1626, 1526,  794, 1597,   57, 1483, 1656,  681,  800,  794,
  800,  794,  794,  839,  647,  794,  800,   58, 1211,  794,
  648,  884,  794,  795,  794, 1068,  794,  604,    0,    0,
    0,  794,  794,    0,  794,    0, 1249,  651,  649,  248,
  650,  248,  652,    0,    0,    0,  235,    0,    0,  248,
  794,  794,  245,  794,    0,    0,  793,    0,  793, 1251,
  651,  649,    0,  650,    0,  652,  793,  794,  235,  794,
  794,  794,    0,    0,  794,    0,  235,  794,  794,  647,
    0,    0,    0,  793,    0,  648,    0,  794,    0,    0,
    0,    0,    0,  245,   59,  647,  245,    0,    0,    0,
    0,  648,  794,    0,  798,  794,  793,    0,    0,    0,
  235,  245,   60,  793,    0,  793,  793,    0,    0,  793,
    0,  794,    0,  793,    0,    0,  793,   61,  793,    0,
  793,   62,  794,    0,   63,  793,  793,    0,  793,  889,
  248,    0,   64,    0,  794,  798,  794,  798,  798,  798,
    0,    0,  794,    0,  793,  793,    0,  793,    0,    0,
    0,   65,  248,  798,  798,  798,  798,  618,    0,    0,
  248,  793,    0,  793,  793,  793,    0,    0,  793,    0,
  889,  793,  793,  889,    0,  901,    0,    0,  345,    0,
    0,  793,  795,    0,  795,    0,    0,  798,  889,  189,
  889,    0,  795,    0,  248,    0,  793,    0,  618,  793,
    0,  618,    0,    0,    0,  647,    0,    0,  244,  795,
  244,  648,    0,    0,    0,  793,  618,    0,  244, 1252,
  651,  649,    0,  650,    0,  652,  793, 1253,  651,  649,
    0,  650,  795,  652,    0,    0,    0,    0,  793,  795,
  793,  795,  795,    0,    0,  795,  793,    0,  189,  795,
    0,    0,  795,    0,  795,    0,  795,    0,    0,    0,
    0,  795,  795,    0,  795,  647, 1254,  651,  649,    0,
  650,  648,  652, 1255,  651,  649,    0,  650,    0,  652,
  795,  795,    0,  795,    0,    0,    0,  587,  647,    0,
  411,    0,  412,    0,  648,    0,    0,  795,    0,  795,
  795,  795,    0,    0,  795,  414,    0,  795,  795,  244,
  250,    0, 1256,  651,  649,    0,  650,  795,  652,    0,
  245,    0,  245,    0,    0,    0,    0,  400,    0,    0,
  245,  244,  795,    0,    0,  795,    0,    0,    0,  244,
    0,  347,  348,  349,    0,  175,  176,  651,  649,    0,
  650,  795,  652,    0,    0,    0,  798,    0,  798,    0,
    0,    0,  795,    0,  350,  351,  798,    0,    0,  352,
  353,  406,  407,  244,  795,    0,  795,    0,  409,  410,
    0,    0,  795,  798,    0,  587,    0,    0,  411,    0,
  412,    0,    0,  889,  889,    0,    0,    0, 1365,  651,
  649,    0,  650,  414,  652,    0,  798,    0,  250,  889,
    0,    0,    0,  798,    0,  798,  798,    0,  174,  798,
    0,  245,    0,  798,    0,    0,  798,    0,  798,    0,
  798,    0,  889,    0,  889,  798,  798,    0,  798,    0,
    0,    0,    0,  245,    0,    0,    0,  189,  889,    0,
    0,  245,    0,    0,  798,  798,    0,  798,  647,  174,
    0,    0,  174,    0,  648,    0,  647,    0,  189,    0,
  889,  798,  648,  798,  798,  798,  618,  174,  798,  618,
    0,  798,  798,    0,    0,  245,  618,    0,    0,  618,
  189,  798,    0,  618,    0,    0,  189,    0,  618,    0,
    0,  618,    0,    0,    0,  647,  798,    0,    0,  798,
    0,  648,  647,    0,  390,    0,    0,  618,  648,  189,
 1366,  651,  649,  391,  650,  798,  652,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  798,  392,  189,    0,
  583,  618,    0,  345,  393,  618,  189,  189,  798,    0,
  798,  647,    0,  189,  618,    0,  798,  648,    0,    0,
    0,    0,  584,    0,    0,    0,  170, 1346,    0,    0,
    0,  189,  618,    0,  394,    0,  475,    0,    0,    0,
    0,    0,    0,    0,    0,  647,    0,    0,    0,    0,
  643,  648,  643,  643,    0,  643,    0,    0,  521,  618,
    0,    0,  395,  396,    0,    0,    0,    0,  643,  189,
    0,  618,  390,  643,  397,    0,    0,    0,  398,  618,
  189,  391,    0,    0,    0,  170,  585,  476,    0,    0,
    0,    0,    0,    0,  180,  392,    0,  647,    0,    0,
    0,  345,  393,  648,    0,    0,  466,    0,    0,    0,
    0,    0,    0,    0,    0,  467,    0,    0,    0,    0,
  584,  477,  641,    0,  641,  641,    0,  641,    0,    0,
  586,    0,  394,    0,    0,    0,  174,    0,    0,  478,
  641,    0,  399,    0,    0,  641,    0,    0,    0,    0,
    0,    0,  400,  180,    0,    0,    0,  174,    0,    0,
  395,  396,    0,    0,    0,    0,  347,  348,  349,  401,
  175,  176,  397,    0,    0,    0,  398,    0,    0,  174,
  402,    0,    0,    0,  585,  174,    0,    0,    0,  350,
  351,  403,  404,  405,  352,  353,  406,  407,    0,  408,
    0,    0,    0,  409,  410,    0,   72,    0,  174,    0,
    0,    0,    0,   73,    0,    0,    0,   74,   75,  647,
    0,    0,    0,    0,  641,  648,   76,  174,  586,    0,
    0,    0,    0,    0,    0,    0,  174,    0,   77,    0,
  399,    0,  174,    0,    0,    0,    0,    0,    0,    0,
  400,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  174,    0,    0,    0,  347,  348,  349,  401,  175,  176,
  643,    0,    0,    0,    0,    0,    0,  643,  402,    0,
    0,    0,    0,    0,  170,    0,  643,  350,  351,  403,
  404,  405,  352,  353,  406,  407,    0,  408,  174,    0,
  643,  409,  410,   78,    0,  170,  643,  643,    0,    0,
    0,    0,    0,    0,  643,    0,    0,    0,    0,    0,
    0,   79,    0,    0,    0,  587,    0,  170,  411,    0,
  412,    0,    0,  170,    0,    0,   80,  643,    0,    0,
   81,    0,  641,  414,    0,    0,    0,    0,  250,  641,
    0,   82,  180,    0,    0,    0,  170,    0,  641,    0,
    0,    0,    0,  643,    0,  643,  643,    0,    0,  181,
   83,    0,  641,  180,    0,  170,    0,  643,  641,  641,
    0,  643,    0,    0,  170,    0,  641,    0,    0,    0,
  170,    0,    0,    0,    0,  180,    0,  413,    0,    0,
  411,  180,  412,    0,    0,    0,    0,    0,  170,  641,
    0,    0,    0,    0,    0,  414,    0,    0,    0,    0,
  250,    0,    0,    0,  180,    0,    0,    0,  181,    0,
    0,    0,    0,    0,    0,  641,    0,  641,  641,    0,
    0,    0,    0,  180,    0,  643,  170,    0,    0,  641,
    0,    0,  180,  641,    0,  643,  529,    0,  180,    0,
  530,    0,    0,    0,    0,    0,    0,    0,  714,  643,
  643,  643,  643,  643,  643,    0,  180,    0,    0,  531,
    0,    0,  532,  643,    0,    0,    0,    0,    0,    0,
    0,    0,  643,  643,  643,  643,  643,  643,  643,  643,
  643,    0,  643,    0,    0,    0,  643,  643,    0,    0,
    0,    0,    0,    0,  180,    0,    0,  641,    0,    0,
    0,    0,    0,  533,    0,    0,    0,  641,    0,  534,
  535,  536,    0,  537,  538,  539,    0,  540,    0,    0,
    0,  641,  641,  641,  641,  641,  641,    0,    0,    0,
    0,    0,  390,    0,    0,  641,    0,  541,    0,  542,
    0,  391,    0,    0,  641,  641,  641,  641,  641,  641,
  641,  641,  641,    0,  641,  392,    0,    0,  641,  641,
    0,  345,  393,    0,    0,    0,    0,    0,    0,    0,
  543,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  584,    0,    0,    0,    0,    0,    0,    0,  544,    0,
    0,    0,  394,    0,    0,    0,    0, 1008,    0,    0,
 1009,    0,    0,    0,  390,    0,    0,  181,    0,    0,
  545,    0,  413,  391,    0,  411,    0,  412,    0,    0,
  395,  396,    0,    0,    0,  180,    0,  392,  181,    0,
  414,    0,  397,  345,  393,  250,  398,    0,    0,    0,
    0,    0,    0,    0,  585,  546,  547,  872,  651,  649,
  181,  650,    0,  652,    0,    0,  181,    0,    0,    0,
    0,  548,  549,    0,  394,    0,  811,  810,  812,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  181,
    0,    0,    0,    0,    0,    0,    0,    0,  586,    0,
    0,    0,  395,  396,  413,    0,    0,  411,  181,  412,
  399,    0,    0,    0,  397,    0,    0,  181,  398,    0,
  400,    0,  414,  181,    0,    0,    0,  250,    0,    0,
    0,    0,    0,    0,  347,  348,  349,  401,  175,  176,
    0,  181,    0,    0,    0,    0,    0,    0,  402,    0,
    0,    0,    0,    0,    0,    0,    0,  350,  351,  403,
  404,  405,  352,  353,  406,  407,    0,  408,    0,    0,
    0,  409,  410,  529, 1010,    0,    0,  530,    0,  181,
    0,    0,  399,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,  531,    0,    0,  532,
    0,    0,    0,    0,    0,    0,  347,  348,  349,  401,
  175,  176,    0,    0,    0,    0,    0,    0,    0,    0,
  402,    0,    0,    0,    0,    0,    0,    0,    0,  350,
  351,  403,  404,  405,  352,  353,  406,  407,    0,  408,
  533,    0, 1017,  409,  410, 1009,  534,  535,  536,  390,
  537,  538,  539,    0,  540,    0,    0,  413,  391,    0,
  411,    0,  412,    0,    0,    1,    0,    0,    0,    0,
    0,    0,  392,    0,  541,  414,  542,    0,  345,  393,
  250,    0,    0,    0,    0,    0,    0,    2,  798,    0,
    0,    0,    0,    0,    0,    3,  647,    0,    0,    0,
    0,    0,  648,    0,    4,  799,    5,  543,    0,  394,
    0,    6,    0,    0,    0,    0,    0,    0,    7,    0,
    0,    0,    0,    0, 1021,  544,    0, 1009,    0,    0,
    0,  390,    8,    0,    0,    0,    0,  395,  396,  413,
  391,  800,  411,    9,  412,    0,    0,  545,    0,  397,
  801,    0,    0,  398,  392,    0,    0,  414,  802,    0,
  345,  393,  250,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  803,    0,  804,
    0,    0,  546,  547,    0,    0,    0,    0,    0,    0,
    0,  394,    0,  805,    0,  806,  807,  808,  548,  549,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1010,
   10,    0,   11,    0,    0,    0,    0,  399,   12,  395,
  396,   13,    0,   14,   15,    0,    0,  400,    0,    0,
    0,  397,    0,    0,    0,  398,    0,    0,    0,    0,
    0,  347,  348,  349,  401,  175,  176,  809,   16,    0,
    0,    0,    0,    0,    0,  402,    0,    0,    0,    0,
    0,    0,    0,    0,  350,  351,  403,  404,  405,  352,
  353,  406,  407,    0,  408,    0,    0, 1029,  409,  410,
 1009,    0,    0,    0,  390,    0,    0,    0,    0,    0,
    0, 1010,  413,  391,    0,  411,    0,  412,    0,  399,
    0,    0,    0,    0,   17,    0,    0,  392,    0,  400,
  414,    0,    0,  345,  393,  250,    0,    0,    0,    0,
    0,    0,    0,  347,  348,  349,  401,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,  394,    0,  350,  351,  403,  404,
  405,  352,  353,  406,  407,    0,  408,    0,    0, 1032,
  409,  410, 1009,    0,    0,    0,  390,    0,    0,    0,
    0,    0,  395,  396,  413,  391,    0,  411,    0,  412,
    0,    0,    0,    0,  397,    0,    0,    0,  398,  392,
  134,    0,  414,    0,    0,  345,  393,  250,    0,  135,
  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,    0,    0,  151,  152,  153,
  154,  155,    0,    0,  156,  157,  394,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1010,    0,    0,    0,    0,    0,
    0,    0,  399,    0,  395,  396,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,  397,    0,    0,    0,
  398,    0,    0,    0,    0,    0,  347,  348,  349,  401,
  175,  176,    0,    0,    0,    0,    0,    0,    0,    0,
  402,    0,    0,    0,    0,    0,    0,    0,    0,  350,
  351,  403,  404,  405,  352,  353,  406,  407,    0,  408,
    0,    0, 1037,  409,  410, 1009,    0,    0,    0,  390,
    0,    0,    0,    0,    0,    0, 1010,  413,  391,    0,
  411,    0,  412,    0,  399,    0,    0,    0,    0,    0,
    0,    0,  392,    0,  400,  414,    0,    0,  345,  393,
  250,    0,    0,    0,    0,    0,    0,    0,  347,  348,
  349,  401,  175,  176,    0,    0,    0,    0,    0,    0,
    0,    0,  402,    0,    0,    0,    0,    0,    0,  394,
    0,  350,  351,  403,  404,  405,  352,  353,  406,  407,
    0,  408,    0,    0, 1040,  409,  410, 1009,    0,    0,
    0,  390,    0,    0,    0,    0,    0,  395,  396,    0,
  391,  413,    0,  431,  411,    0,  412,    0,    0,  397,
    0,    0,    0,  398,  392,    0,    0,    0,  506,  414,
  345,  393,    0,    0,  250,    0,    0,  135,  136,  137,
  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150, 1335, 1336,  151,  152,  153,  154,  155,
    0,  394,  156,  157, 1341, 1342,    0, 1344, 1345,    0,
    0,    0,    0,    0,    0, 1349, 1350, 1351, 1352, 1010,
 1353, 1354, 1355, 1356, 1357, 1358,    0,  399,    0,  395,
  396,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,  397,    0,    0,    0,  398,    0,    0,    0,    0,
    0,  347,  348,  349,  401,  175,  176,    0,    0,    0,
    0,    0,    0,    0,    0,  402,    0,    0,    0,    0,
    0,    0,    0,    0,  350,  351,  403,  404,  405,  352,
  353,  406,  407,    0,  408,    0,    0, 1043,  409,  410,
 1009,    0,    0,    0,  390,    0,    0,    0,    0,    0,
    0, 1010,  413,  391,    0,  411,    0,  412,    0,  399,
    0,    0,    0,    0,    0,    0,    0,  392,    0,  400,
  414,    0,    0,  345,  393,  250,    0,    0,    0,    0,
    0,    0,    0,  347,  348,  349,  401,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,  394,    0,  350,  351,  403,  404,
  405,  352,  353,  406,  407,    0,  408,    0,    0,    0,
  409,  410,    0,    0,    0,    0,    0,    0,  390,    0,
    0,    0,  395,  396,    0,    0,  883,  391,  883,  883,
    0,  883,    0,    0,  397,    0,    0,    0,  398,    0,
    0,  392,  784,    0,  883,    0,  530,  345,  393,  883,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  785,    0,    0,    0,  531,    0,    0,  532,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  394,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1010,    0,    0,    0,    0,    0,
    0,    0,  399,    0,  346,    0,  395,  396,    0,  533,
    0,    0,  400,    0,    0,  534,  535,  536,  397,  537,
  538,  539,  398,  540,    0,    0,  347,  348,  349,  401,
  175,  176,    0,    0,    0,    0,    0,    0,    0,    0,
  402,    0,    0,  541,    0,  542,    0,    0,    0,  350,
  351,  403,  404,  405,  352,  353,  406,  407,    0,  408,
    0,    0,    0,  409,  410,    0,    0,    0,    0,  390,
    0,    0,    0,    0,    0,    0,  543,  643,  391,    0,
  643,    0,  643,    0,    0,    0,  399,    0,    0,    0,
    0,    0,  392,    0,  544,  643,  400,    0,  345,  393,
  643,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  347,  348,  349,  401,  175,  176,  545,    0,    0,    0,
    0,    0,    0,    0,  402,    0,    0,    0,    0,  394,
    0,    0, 1285,  350,  351,  403,  404,  405,  352,  353,
  406,  407,    0,  408,    0,    0,    0,  409,  410,    0,
    0,  546,  547,  883,    0,  346,    0,  395,  396,    0,
    0,  413,  883,    5,  411,    0,  412,  548,  549,  397,
 1502,    0,    0,  398, 1387, 1388,  883, 1389,    0,  414,
 1390,    0,  883,  883,  250,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1391,    0,    0,    0,    0,    0,
 1392,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  883,    0,    0,    0,    0,    0,    0,
    0,  641,    0,    0,    0,    0,    0,    0,  413,    0,
    0,  411,    0,  412,    0,    0,    0,  399,    0,  883,
    0,  883,  883,    0,    0,    0,  414,  400,    0,    0,
    0,  250,    0,  883,    0,    0,    0,  883,    0,    0,
 1393,  347,  348,  349,  401,  175,  176,    0,    0,    0,
    0,    0,    0,    0,    0,  402,    0,    0,    0,    0,
   14,    0,    0,    0,  350,  351,  403,  404,  405,  352,
  353,  406,  407,    0,  408, 1394,    0,  643,  409,  410,
    0,    0,    0,    0,  643,   16,    0,    0,    0,    0,
    0,    0,    0,  643, 1503,    0, 1395,    0,    0,    0,
    0,  883,    0,  452,    0,    0,    0,  643,    0,    0,
    0,  883,    0,  643,  643,    0,    0,    0,    0,    0,
    0,  643,    0,    0,    0,  883,  883,  883,  883,  883,
  883,    0, 1396,    0,    0,    0,    0,    0,    0,  883,
    0,    0,    0,    0,  643,    0,    0,    0,  883,  883,
  883,  883,  883,  883,  883,  883,  883,    0,  883,    0,
    0,    0,  883,  883,    0,    0,    0,    0,  390,    0,
    0,    0,  643,  643,    0,    0,    0,  391,    0,    0,
    0,    0,    0,    0,  643,    0,    0,    0,  643,  413,
  874,  392,  411,    0,  412,    0,    0,  345,  393,    0,
    0,    0,    0,  428,    0,    0,    0,  414,    0,    0,
    0,    0,  250,  428,  428,  428,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,  428,  394,    0,
  428,  428,  428,  428,  428,  390,    0,  428,  428,    0,
    0,    0,    0,    0,  391,    0,    0,    0,    0,    0,
    0,    0,  643,    0,    0,    0,  395,  396,  392,    0,
    0,    0,  643,    0,  345,  393,    0,    0,  397,    0,
    0,    0,  398,    0,    0,    0,  643,  643,  643,  643,
  643,  643,    0,    0,    0,    0, 1285,    0,    0,    0,
  643,    0,    0,    0,    0,  394,    0,    0,    0,  643,
  643,  643,  643,  643,  643,  643,  643,  643,    0,  643,
    0,    0,    0,  643,  643,    0,    0,    5,    0,    0,
  641,  346,    0,  395,  396,    0,    0,    0, 1387, 1388,
    0, 1389,    0,    0, 1390,  397,  399,    0,    0,  398,
    0,    0,    0,    0,    0,    0,  400,    0, 1391,    0,
    0,    0,    0,    0, 1392,    0,    0,    0,    0,    0,
  347,  348,  349,  401,  175,  176,    0,    0,    0,    0,
    0,    0,    0,    0,  402,    0,    0,    0,    0,    0,
    0,    0,    0,  350,  351,  403,  404,  405,  352,  353,
  406,  407,    0,  408,    0,    0,    0,  409,  410,    0,
    0,    0,    0,  399,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  400, 1393,  413,  390,    0,  411,    0,
  412,    0,    0,    0,    0,  391,    0,  347,  348,  349,
  401,  175,  176,  414,   14,    0,    0,    0,  250,  392,
    0,  402,    0,    0,    0,  345,  393,    0,    0, 1394,
  350,  351,  403,  404,  405,  352,  353,  406,  407,   16,
  408,    0,    0,    0,  409,  410,    0,    0,    0,  529,
 1395,    0,    0,  530,    0,    0,  394,  452,  413,    0,
    0,  411,    0,  412,    0,    0,    0,    0,    0,    0,
    0,    0,  531,    0,    0,  532,  414,    0,    0,    0,
    0,  250,    0,    0,  395,  396, 1396,  651,  649,    0,
  650,    0,  652,    0,    0,    0,  397,    0,    0,    0,
  398,    0,    0,    0,    0,  811,  810,  812,    0,    0,
    0,    0,    0,    0,    0,    0,  533,    0,    0,    0,
    0,    0,  534,  535,  536,    0,  537,  538,  539,    0,
  540,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1567,    0,    0,  411,    0,  412,    0,    0,
  541,    0,  542,    0,    0,    0,    0,    0,    0,    0,
  414,    0,    0,    0,  399,  250,    0,    0,    0,    0,
    0,    0,    0,    0,  400,    0,    0,    0,    0,    0,
    0,    0,    0,  543,    0,    0,    0,    0,  347,  348,
  349,  401,  175,  176,    0,    0,    0,    0,    0,    0,
    0,  544,  402,    0,    0,    0,    0,    0,    0,  741,
    0,  350,  351,  403,  404,  405,  352,  353,  406,  407,
    0,  408,  390,  545,    0,  409,  410,    0,    0,    0,
    0,  391,    0,    0,    0,    0,    0,    0,  180,    0,
    0,    0,    0,    0,    0,  392,    0,    0,    0,    0,
  741,  345,  393,  741,    0,    0,    0,    0,  546,  547,
    0,    0,    0,    0,    0,    0,    0,    0,  741,    0,
    0,    0,    0,    0,  548,  549,    0,    0,    0,    0,
    0,    0,  394,    0,    0,  390,  413,    0,    0,  411,
    0,  412,    0,    0,  391,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  414,    0,    0,    0,  392,  250,
  395,  396,    0,    0,  345,  393,    0,  798,    0,    0,
    0,    0,  397,    0,    0,  647,  398,    0,    0,    0,
    0,  648,    0,    0,  799,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  394,    0,    0,    0,    0,
    0,    0,    0,  742,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  390,
  800,    0,    0,  395,  396,    0,    0,    0,  391,  801,
    0,    0,    0,    0,    0,  397,    0,  802,    0,  398,
  399,    0,  392,    0,  742,    0,    0,  742,  345,  393,
  400,    0,    0,    0,    0,    0,  803,    0,  804,    0,
    0, 1035,  742,    0,  347,  348,  349,  401,  175,  176,
    0,    0,  805,    0,  806,  807,  808,    0,  402,  394,
    0,    0,    0,    0,    0,    0,    0,  350,  351,  403,
  404,  405,  352,  353,  406,  407,    0,  408,    0,    0,
    0,  409,  410,  399,    0,  346,    0,  395,  396,    0,
    0,    0,    0,  400,    0,  883,    0,    0,  883,  397,
  883,  741,    0,  398, 1213,    0,  809,  347,  348,  349,
  401,  175,  176,  883,    0,    0,    0,    0,  883,    0,
    0,  402,    0,    0,    0,    0,    0,    0,    0,    0,
  350,  351,  403,  404,  405,  352,  353,  406,  407,    0,
  408,    0,    0,  390,  409,  410,    0,    0,    0,    0,
    0,    0,  391,    0,    0,    0,    0,    0,  741,    0,
    0,  741,    0,    0,    0,    0,  392,  399,  741,    0,
    0,  741,  345,  393,    0,  741,    0,  400,    0,    0,
  741,    0,    0,  741,    0,    0,    0,    0,    0,    0,
    0,  347,  348,  349,  401,  175,  176,    0,    0,  741,
    0,    0,    0,  394,    0,  402,    0,    0,    0,    0,
    0,    0,    0,    0,  350,  351,  403,  404,  405,  352,
  353,  406,  407,  741,  408,    0,  741,  741,  409,  410,
    0,  395,  396,    0,    0,  766,  741,    0,    0,    0,
    0,  745,    0,  397,    0,  742,    0,  398,    0,    0,
    0,    0,    0,    0,  741,    0,    0,    0,    0,    0,
    0,  296,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  766,    0,    0,  766,
    0,  741,  745,    0,    0,  745,    0,    0,    0,    0,
    0,    0,  296,  741,  766,  741,    0,    0,    0,  296,
  745,    0,  742,  296,  296,  742,  296,    0,    0,  296,
    0,  399,  742,    0,    0,  742,    0,    0,    0,  742,
    0,  400,  883,  296,  742,    0,    0,  742,    0,  296,
    0,  883,    0,    0,    0,  347,  348,  349,  401,  175,
  176,    0,    0,  742,  743,  883,    0,    0,    0,  402,
    0,  883,  883,    0,    0,    0,    0,    0,  350,  351,
  403,  404,  405,  352,  353,  406,  407,  742,  408,    0,
  742,  742,  409,  410,  744,    0,    0,    0,    0,    0,
  742,    0,  883,    0,    0,  743,    0,    0,  743,  296,
    0,    0,    0,    0,    0,    0,    0,    0,  742,    0,
    0,    0,    0,  743,    0,    0,    0,  774,    0,  296,
  883,  883,    0,    0,    0,  744,    0,    0,  744,    0,
    0,    0,  883,    0,  296,  742,  883,    0,    0,    0,
    0,    0,    0,  744,  296,    0,    0,  742,    0,  742,
 1285,    0,    0,  296,    0,  296,    0,    0,  774,    0,
    0,  774,  296,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  774,    0,    0,    0,
    0,    5,    0,    0,    0,    0,    0,    0, 1386,    0,
    0,  296, 1387, 1388,    0, 1389,    0,    0, 1390,    0,
  883,  738,    0,    0,    0,    0,    0,  766,    0,    0,
  883,    0, 1391,  745,    0,    0,    0,    0, 1392,    0,
    0,    0,    0,    0,  883,  883,  883,  883,  883,  883,
    0,  739,    0,    0,    0,    0,    0,    0,  883,    0,
    0,    0,  738,    0,    0,  738,    0,  883,  883,  883,
  883,  883,  883,  883,  883,  883,    0,  883,    0,    0,
  738,  883,  883,    0,  766,  740,    0,  766,    0,    0,
  745,    0,  739,  745,  766,  739,    0,  766, 1393,    0,
  745,  766,    0,  745,    0,    0,  766,  745,    0,  766,
  739,    0,  745,    0,    0,  745,    0,    0,   14,    0,
    0,    0,    0,    0,    0,  766,  740,    0,    0,  740,
    0,  745,    0, 1394,    0,  773,  743,    0,    0,    0,
    0,    0,    0,   16,  740,    0,    0,    0,    0,  766,
    0,    0,  766,  766, 1395,  745,    0,    0,  745,  745,
    0,  452,  766,    0,    0,    0,  744,    0,  745,    0,
  767,    0,    0,    0,    0,    0,  773,    0,    0,  773,
  766,    0,    0,    0,    0,    0,  745,    0,    0,    0,
 1396,    0,    0,  743,  773,    0,  743,    0,    0,  774,
    0,    0,    0,  743,    0,    0,  743,  766,    0,    0,
  743,  767,    0,  745,  767,  743,    0,    0,  743,  766,
    0,  766,    0,  744,    0,  745,  744,  745,    0,  767,
    0,    0,    0,  744,  743,    0,  744,    0,    0,    0,
  744,    0,    0,    0,    0,  744,  775,    0,  744,    0,
    0,    0,    0,    0,    0,    0,  774,    0,  743,  774,
    0,  743,  743,    0,  744,    0,  774,    0,    0,  774,
    0,  743,    0,  774,    0,    0,    0,    0,  774,    0,
    0,  774,    0,  738,    0,    0,    0,  775,  744,  743,
  775,  744,  744,    0,    0,    0,    0,  774,    0,    0,
    0,  744,    0,    0,    0,  775,    0,    0,    0,    0,
  776,    0,    0,  739,    0,    0,  743,    0,    0,  744,
    0,  774,    0,    0,  774,  774,    0,    0,  743,    0,
  743,  764,    0,    0,  774,    0,    0,    0,    0,    0,
  738,    0,    0,  738,    0,    0,  744,  740,    0,    0,
  738,  776,  774,  738,  776,    0,    0,  738,  744,    0,
  744,    0,  738,    0,    0,  738,    0,    0,    0,  776,
  739,    0,  764,  739,    0,  764,    0,    0,    0,  774,
  739,  738,    0,  739,    0,    0,    0,  739,    0,    0,
  764,  774,  739,  774,    0,  739,    0,  773,    0,    0,
    0,    0,    0,    0,  740,  738,    0,  740,  738,  738,
    0,  739,    0,    0,  740,  768,    0,  740,  738,    0,
    0,  740,    0,    0,    0,    0,  740,    0,    0,  740,
    0,    0,  767,    0,    0,  739,  738,    0,  739,  739,
    0,    0,    0,    0,    0,  740,    0,    0,  739,    0,
  777,    0,    0,    0,  773,    0,  768,  773,    0,  768,
    0,    0,    0,  738,  773,    0,  739,  773,    0,  740,
    0,  773,  740,  740,  768,  738,  773,  738,    0,  773,
    0,    0,  740,    0,    0,    0,    0,    0,    0,  767,
    0,  777,  767,  739,  777,  773,    0,    0,    0,  767,
  740,    0,  767,    0,    0,  739,  767,  739,  775,  777,
    0,  767,    0,    0,  767,    0,    0,    0,    0,  773,
    0,    0,  773,  773,    0,    0,    0,  740,    0,    0,
  767,    0,  773,    0,    0,    0,    0,    0,    0,  740,
    0,  740,    0,    0,    0,    0,    0,    0,    0,    0,
  773,    0,    0,    0,  767,  765,    0,  767,  767,    0,
    0,  769,    0,    0,    0,  775,    0,  767,  775,    0,
    0,    0,  776,    0,    0,  775,    0,  773,  775,    0,
    0,  724,  775,    0,    0,  767,    0,  775,    0,  773,
  775,  773,    0,  764,    0,    0,  765,    0,    0,  765,
    0,    0,  769,    0,    0,  769,  775,    0,    0,    0,
    0,    0,  767,    0,  765,    0,    0,    0,    0,    0,
  769,    0,  724,    0,  767,  724,  767,    0,    0,  776,
  775,    0,  776,  775,  775,    0,    0,    0,    0,  776,
  724,    0,  776,  775,    0,  616,  776,    0,    0,    0,
  764,  776,    0,  764,  776,    0,    0,    0,    0,    0,
  764,  775,    0,  764,    0,    0,    0,  764,    0,    0,
  776,    0,  764,    0,    0,  764,    0,  768,    0,    0,
    0,    0,    0,    0,    0,    0,  616,    0,  775,  616,
    0,  764,    0,    0,  776,    0,    0,  776,  776,    0,
  775,    0,  775,    0,  616,    0,    0,  776,    0,  613,
    0,    0,  777,    0,    0,  764,    0,    0,  764,  764,
    0,    0,    0,    0,    0,  776,    0,    0,  764,    0,
    0,    0,    0,    0,  768,    0,    0,  768,    0,    0,
    0,    0,    0,    0,  768,    0,  764,  768,    0,    0,
  613,  768,  776,  613,    0,    0,  768,    0,    0,  768,
    0,    0,    0,    0,  776,    0,  776,    0,  613,  777,
    0,    0,  777,  764,    0,  768,    0,    0,    0,  777,
    0,    0,  777,    0,    0,  764,  777,  764,    0,    0,
    0,  777,    0,    0,  777,    0,    0,    0,    0,  768,
    0,    0,  768,  768,    0,    0,    0,    0,    0,    0,
  777,    0,  768,    0,    0,    0,    0,  765,    0,    0,
    0,    0,    0,  769,    0,    0,    0,    0,    0,    0,
  768,    0,    0,    0,  777,    0,    0,  777,  777,    0,
    0,    0,    0,    0,    0,    0,    0,  777,    0,    0,
    0,    0,    0,    0,    0,    0,  214,  768,    0,    0,
  214,    0,    0,    0,    0,  777,    0,    0,    0,  768,
    0,  768,    0,    0,  765,  214,    0,  765,    0,  214,
  769,    0,  214,  769,  765,    0,    0,  765,    0,    0,
  769,  765,  777,  769,    0,    0,  765,  769,    0,  765,
  724,    0,  769,  724,  777,  769,  777,    0,    0,    0,
  724,    0,    0,  724,    0,  765,    0,  724,    0,    0,
    0,  769,  724,  214,    0,  724,    0,    0,    0,  214,
  214,  214,    0,  214,  214,  214,    0,  214,    0,  765,
    0,  724,  765,  765,    0,  769,    0,    0,  769,  769,
    0,    0,  765,    0,    0,    0,    0,  214,  769,  214,
    0,    0,    0,    0,  616,  724,    0,  616,  724,  724,
  765,    0,    0,    0,  616,    0,  769,  616,  724,    0,
    0,  616,    0,    0,    0,    0,  616,    0,    0,  616,
  214,    0,    0,    0,    0,    0,  724,  765,    0,    0,
    0,    0,    0,  769,    0,  616,    0,    0,  214,  765,
    0,  765,    0,    0,    0,  769,    0,  769,    0,    0,
    0,    0,    0,  724,    0,    0,    0,    0,  613,  616,
  214,  613,    0,  616,    0,  724,  214,  724,  613,    0,
  214,  613,  616,    0,    0,  613,    0,    0,    0,    0,
  613,    0,    0,  613,    0,  214,    0,    0,    0,  214,
  616,    0,  214,    0,    0,  214,  214,    0,  127,  613,
    0,    0,  127,    0,    0,    0,    0,    0,    0,    0,
    0,  214,  214,    0,    0,    0,    0,  616,    0,    0,
    0,  127,    0,  613,  127,    0,    0,  613,    0,  616,
    0,    0,    0,  214,    0,    0,  613,    0,    0,  214,
  214,  214,    0,  214,  214,  214,    0,  214,    0,    0,
    0,    0,    0,    0,  613,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  127,    0,  214,    0,  214,
    0,  127,  127,  127,    0,  127,  127,  127,    0,  127,
    0,  613,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  613,    0,    0,    0,    0,    0,  127,
  214,  127,    0,    0,    0,    0,   78,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  214,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    0,    0,    0,    0,    0,    0,    0,
  214,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  127,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    0,    0,  214,  214,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  214,  214,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,  127,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,  127,
};
static short yycheck[] = {                                      16,
   56,   17,   48,   17,   57,   49,   92,  124,   55,    0,
   50,  224,  224,  113,  114,   59,  283,   56,  322,  456,
   73,   61,  113,  114,  224,  318,  460,  683,  326,  326,
   65,   77,  297,   62,   78,  489,  295,  498,  492,  438,
  630,   85,  691,  641,  498,  101,   82,  103,   83,  585,
  871,  587,   81,  131,   71,   76,  378,    0,    0,  940,
  104,  340,  102,   80,    0,  105,  232,    0,    0,   40,
  951,   40,   45,   40,   60,   45,   40,   40,   44,  245,
 1062,   41,  278,  625,   44,   41,   44,   58,   63,  970,
   40,    0,  682,   79,   41,   44,   44,  118,   40,   41,
   41,   41,   44,   41,   44,   59,   44,  980,   41,   41,
    0,   41,   44,  199,  161,   42,   59,   59,    0,    0,
   44,   59,  579,   59,  224,   41,   59,   59,   40,   44,
   41,  290,   41,  688,    0,   44,   42, 1272,  185,    0,
   45,   44,  355,  355,  249,   45,   40,   44,  253,   91,
   59,   63,  287,  258,   58,  355,    0,   44,  711,   41,
  284,  278,   44,  264,  468,  932,  283,  720,   40,   59,
  226,   45,  939, 1132,   42,  386, 1178,   59,   59,   47,
  260,   44,  475,  476,  477,  478,    0,    0,  278,   63,
  230,   63, 1259,   59,  262,   91, 1069,    0,   59,    0,
  498,  498,   40,  243,  370,   12,  284,   45,    0,  378,
  888,    0,  457,  302,  264,   59,  262,   59,  771, 1561,
  524,  658,  278,  964, 1279,  302,  266,   41,   41,   16,
  320,   44,    0,   45,   12,  339,  274,  288,  378,  243,
  296,  273,  501,  406,  277,   59,   59,  303,  838,  305,
  529,  307,   44,    0,  310,  355,   59,   45,   59,  302,
 1523,  378,  339, 1531,  749, 1320, 1147,   59,   41,  321,
   59,   44,  319,   41,  321,   63,   44,  813,  814,   44,
  420,  450, 1624,  737,   71,  332,    0,  840,    0,  831,
  336,   59,  551,    0,  334,  458,  339,    0,  321, 1567,
 1642,  379,  844,  845,  111,  403,  411,  412,  413,  341,
   41,  401,   59,  346,  274,  258,  258,  441,  285,  387,
   93,  262,  378, 1325,  340,  369,  366,  467,  463,  464,
 1593, 1290,  274,  111,  189,  277,  278,  377,  280,  419,
  444,  381,  386,  285, 1479,   59,  288,   59,  388,  258,
  310,  262,   59,  443, 1175,  444,   59,  305,  757,  301,
  273,  462, 1625,  413,  307,  307,  932,  444,  310,  278,
  297,  280,    0,  939,    0,  269,  285,    0, 1360,  288,
  310,  277,  264,  238,  388,  332,  319,  319,  986,    0,
  462, 1158,  301,  606,  606,  931,  329,  950,  307,  332,
  332,  264, 1283,  319,  319, 1286,  606, 1288,  341,  341,
    0,  462,  280,   41,  258,  438,   59,  628,  286,  686,
   41, 1099,  296, 1164,  321,  516,  473,    0, 1301,  319,
  468,   59,  395,   59,  321,  990,   59,  379, 1319,  321,
  699,  397,  498,  702,    0,  258,  387, 1013,   59,  615,
  397,  341,   41,  413, 1521,  388,  388,  716,  412,  401,
    0,  274, 1111,  307,  397,  397,  462,  409,   41,   59,
  379,  413,  519,  413,  412,  341,  387,  420,  420,  353,
  438, 1362,  587,  679,  743,  460,   59,  460,  454,  462,
  460,  462,  401,  462,  307,  462,  438,  310,  462,  449,
  409,  443, 1383,   59,   44,  319,  606,  456,  468,  442,
  442,  420,  791,  529,  836,  571, 1337,  782,  332,   59,
  456,  568,  569,  456,  456,  630,  468,  341,  633,  438,
  472,  517, 1074,  638,  443,  462,  460,  329,  995,  698,
  332,  646, 1423,  648,  649,  650,  651,  652,  460,  654,
  411,  607,  344,  456,  659,  460,  462, 1438,  462,   45,
  460,  442,  679,  472,  580,    0,  580,  368,  624,  686,
  412,    0,  454,  664,  388,  456,  420,  682, 1063,  368,
  462, 1117,  487,  397,  628,  459,  460,  461,  460,  463,
  464, 1332, 1158, 1271,  397,  433,  288, 1195,  329, 1135,
  413,  332,  349,  694,  695,  397,   41,  420,  482,  483,
    0,  632,   41,  487,  488,   44,  384,  329,    0,  384,
  332,  433,  460,  679,   59,  438,  919,  341,  442, 1278,
   59,  268,  688,  673,  341,  675,   44, 1518,  264,  442,
  495,  262,  456,  690,  691,  433,  349,   42,  460, 1239,
  442,   59,  708,  456,  820,  468,  257,  823,  388,  472,
  356,  309,  454,  257,  456, 1055,  397, 1057, 1153,   59,
  284,  939,  460,  262,  264,  260,    0,   59,  937,  301,
  736,  737, 1127,   41,   41,  397,  462,  357,  981,    0,
  949,  319,  462,  798,  799,  800, 1475,  723,  803,  804,
  805,  288,  807,  808,  809,  810,  811,  812,  462,  332,
  969,  697,  442,  341,  301,  793,  302,  795,  329,  836,
  932,  332,  317,  318, 1169,  398,  742,  939,  993,  366,
  442,  353,  932,  838,  335,   59,    0, 1273,  754,  939,
  780,  335,  847,  848,  456,  850,  319,  852,   59,  735,
  855,  856,  857,  858,  859,  860,  329, 1156,    0,  332,
  388,  431,    0, 1162,    0,  438,  387,    0,  341,  397,
  462,  385,  398, 1339,  397,  791,    0,  821,    0, 1558,
  836,  767,  768,  769,  411, 1246,  397,  343,  824,  329,
  825,  462,  332,  822,  326,   59, 1241,  493,  387,  472,
 1013,    0,   40,   41,  344,  453,   44,  462,  398,  328,
  296,  349, 1077, 1013,  442,  388, 1595,   59,  932,  442,
   44,   59, 1478,   59,  397,  939,   59,  441,  456,  258,
    0,  442,    0,  456,  419,   59,  460,   59,    0,    0,
  932,  323,  406,  454,  458,  456,  462,  939,  277,  278,
  406,  280, 1242,   91,  410, 1289,  285,  397,  444,  288,
   59,   42,   43,  382,   45,  260,   47,  353, 1172,  442,
  426,  462,  301,  322,  264, 1309,  967,  259,  307,  258,
    0,  454,  264,    0,  319, 1097, 1145,  336,  270,   59,
 1158,   59,    0,    0,  458,  258,  452,   59,   59, 1013,
  432,  329,  442,  462,  262,  262,  341,  439,  460,  304,
  462,  360,    0, 1013,  454, 1174,  456,  943,  944, 1024,
 1025, 1013, 1027, 1028,  625,  463,  464,  983,  307,  344,
 1035, 1385, 1369,   41,  990,  384,   44,  320,  419,   59,
  462, 1477,   59,  344,  307,  961, 1158,  961, 1246, 1246,
  379,   59,   59,  388,  369,  403,    0, 1493, 1158,  445,
 1496, 1061, 1062, 1063,  990,  446,  415,  278,  369,  280,
  323,   59,  401,  459,  460,  461, 1081,  463,  464,    0,
  409, 1098, 1275,   91, 1089, 1430, 1091, 1092,  436,  418,
  976,  420, 1097,    0, 1533,  402,  482,  483,  484,  485,
  486,  487,  488,  489,  490, 1272,  992,  442,  398,  438,
  496,  497,  998,  428,  443,   59,  398,  445,  401,  343,
  258,   44, 1113,   40, 1115, 1130,    0,  428,  264,  387,
  387,  264,   44, 1292,  462,    0,  274,  279,   59,  277,
  278,  420,  280,  472, 1158, 1061, 1062,  285,   42,   43,
  288,   45,   59,   47,  378,  319,  278,  420,  280,  301,
  443,  462,    0,  301, 1111,  264, 1158, 1606, 1327,  307,
   93,   44,  310,    0,    0,  438,  445,  341,  384, 1170,
 1517,   93,  406,  384,  460,   59,  410, 1192,  330,    0,
    0, 1630, 1500,  462,   59,  319, 1404,  379,  436,  280,
    0, 1206,  426,   41, 1090,  286,   44,  349, 1213,  472,
  278,  487,  280, 1649,   41,  357,  358,  341,   44,  401,
   93,   59,  364, 1560,  462, 1533, 1339,  409,  452,  263,
  831,  312,   59,   59, 1239, 1151,  265, 1151, 1185, 1339,
  382,  379, 1189,  844,  264,    0,  404,  264,   59,   59,
  258,    0,  394, 1555,  396, 1272,    0,  264, 1370,   59,
    0,  443,  398,  401,  422,  398,  274, 1575, 1285,  277,
  278,  409,  280,  343,  303,  413,  264,  285,  420,  313,
  288,  343,  420,   42,   43,  349,   45, 1589,   47,  302,
  324,    0,   41,  301,  358,   44,  259,   41, 1606,  307,
  438,   40,  310,  445,   59,  443,   45,  270,  378,  338,
   59,  379, 1479, 1553,    0,   59,  378, 1322,    0,   59,
 1622,    0, 1630,  322,   63, 1339,  339,   44, 1284, 1285,
  468, 1278,   41, 1500,  472,   44,  406,  336, 1640, 1339,
  410, 1346, 1347,  264,  406, 1284,  265, 1339,  410,  353,
   59, 1591,  272, 1293,    0,   41,  426,  259,   44,   41,
 1360,  360,   44,    0,  426, 1370, 1533,  260,  270,  289,
   44,  379, 1580,   59,    0,  379,   93,   59,  398,    0,
   59,  398,  452, 1623,  303,  384,  280, 1404, 1393, 1380,
  452,  398,  286,  401,    0,  429,  409,  260,    0,    0,
    0,  409, 1610, 1611,   41,  413,  419,   44, 1575,   91,
  398,  304,  420,   59,  334,  384,  415,  403,   44, 1531,
   41,  386,   59,   44,  262,  279, 1634,  321,    0,    0,
  438,  444,  406,   59, 1387,  443, 1422, 1442,   59, 1606,
 1648,  304,  322,  363, 1360, 1450,  494,  495, 1404,    0,
    0, 1367,  426,   59,   91, 1567,  336,   59,   59,   59,
  468,  447, 1479, 1630,  472,    0,  280,  495,  279,  343,
   41,    0,  286,   44,    0,  322,  330,  398, 1418,  322,
  360,  319,  338, 1500,  322, 1490,  384,   59,   59,  336,
  301,  329,  319,  336,  332,  420, 1443,  344,  336, 1390,
 1447,  344,  329,  341,  378,  332,  344,  260,   59,   59,
  364,  431,  260,  360,  341,   41, 1533,  360,   44,  330,
   91,  280,  360,  338,   59, 1511, 1531,  286,  382,  278,
   59,  280,  406,   59,  462,  415,  410,  260,  349,  288,
  274,    0,    0,    0,  460, 1489,  384,  358,    0,  387,
  388,  304,  426,  364,  302,  463,  464,  296, 1575,  397,
  375,  388, 1567, 1580,  260,  319,  314,    0,  415,   40,
  397,  382,  415,  388,    0,  319,  258,  415,  452,    0,
  426,  304,   41,    0,   41,   44,   44,   44, 1541, 1606,
    0,  339,  274, 1610, 1611,  419,  278,  341,  280, 1516,
   59,   59,   59,  285,  442,  463,  288,   59,  304,    0,
  319, 1528,  264, 1630,  353,  442,  454, 1634,  456,  301,
  329,  258,  446,  332, 1580,  307,   59, 1543,  310, 1543,
  379, 1648,  341,   59,  317,  344, 1553,  274,   59,  265,
    0,  278,   59,  280,  388, 1562,    0,  337,  285,   59,
  206,  288,  401,  397, 1610, 1611, 1602,  278,  214,  280,
  409,  409,   41,  338,  301,   44,  319,    0,   59,    0,
  307,  419,  655,  310, 1591,    0,    0,  303, 1634,  388,
  258,   41, 1599,  261,   44,  462,   41,  258,  397,   44,
  338,    0, 1648,  319,  443,  678,  444,  379,  442,   59,
  375,  392,  393,  274,  687,   59, 1623,  278,   41,  280,
  467,   44,  469,  388,  285,  341, 1055,  288, 1057,  401,
  459,  460,  461,  454,  463,  464,   59,  409,   59,  307,
  301,  413,  258,  442,   59,   59,  307,  403,  420,  310,
  357,   40,  379,  482,  483,  454,  684,  685,  487,  488,
   59,  277,  278,    0,  280,  341,  438,   41,  379,  285,
   44,  443,  288,  321,  401,   42,   43,  319,   45,  403,
   47,   41,  409,  384,   44,  301,  413,  394,  438,  396,
  401,  307,  362,  420,   42,   43,  468,   45,  409,   47,
  472,  463,  464,   40,   41,   42,   43,   44,   45,   46,
   47,  438,   41,  420,   41,   44,  443,   44,  379,   93,
  384,  452,   59,   60,   61,   62,   41,  436,    0,   44,
   42,   43,  443,   45,   41,   47,   41,   44,  445,   44,
  401,  468,  803,  343,  805,  472,  807,  808,  409,  810,
  811,  812,  413,  419,   91,   41,   93,    0,   44,  420,
  629,   41,  631,  379,   44,  634,  635,  636,  462,   41,
  319,  260,   44,   41,  322,  444,   44,  438,  378,  358,
  329,  329,  443,  332,  332,  401,   41,   59,  336,   44,
  288,   41,  341,  409,   44,  344,  344,   41,   41,    0,
   44,   44,   41,  413,  420,   44,  406,  468,  471,   44,
  410,  472,  360,  302,   61,  373,   59,   41,   42,   43,
  287,   45,  438,   47,   40,  314,  426,  443,  278,    0,
  280,   41,  264,   40,   44,  285,  384,  463,  288,  388,
   41,   42,   43,   44,   45,  463,   47,   44,  397,  397,
  339,  301,  452,  438,  463,  278,  472,  280,   59,   60,
   61,   62,  285,  462,   40,  288,  321,  415,   42,   43,
   41,   45,  420,   47,   44,  403,   40,   40,  301,   40,
   40,  459,  460,  461,   40,   59,   40,   40,   59,   40,
   40,   40,   93,  442,  442,  462,   40,   91,   45,  321,
   46,   44,   44,    0,  430,  454,  454,   46,  456,  487,
  488,  280,   44,  280,  262,   46,   63,  383,  349,  286,
  409,   61,   44,  295,  278,  262,  278,  264,  301,  379,
  419,  264,  280,  462,  306,  272,  398,  438,  286,  472,
  398,  313,  460,  280,   41,   42,   43,   44,   45,  286,
   47,  401,  289,  277,  321,  444,  379,  449,  449,  409,
  400,   40,   59,   60,   61,   62,  338,  350,  280,   40,
   91,   40,   40,  462,  286,  312,  264,  384,  401,  413,
   44,  390,  319,  383,  321,  322,  409,   40,  325,   40,
  438,  466,  329,  443,   40,  332,   93,  334,  318,  336,
  312,  264,  321,  321,  341,  342,  278,  344,  280,   41,
   42,   43,   41,   45,  450,   47,  288,  454,  460,  462,
  443,  462,   40,  360,  361,  277,  363,   40,  274,  301,
  301,  403,  285,  278,  345,  278,  345,  280,  387,    0,
  377,  387,  379,  380,  381,  288,  387,  384,  418,  420,
  387,  388,  329,  301,  420,   40,  280,  357,  301,   40,
  397,  262,  286,  264,  436,  274,  419,  462,  440,   40,
   44,  272,  386,  368,   44,  412,  264,   41,  415,  280,
   41,   42,   43,   44,   45,  286,   47,  321,  289,   44,
  321,  280,   40,   44,  431,   44,  329,  266,   59,   60,
   61,   62,   40,   40,  300,  442,  280,  379,  424,  264,
   41,  312,  286,   58,   41,  462,   41,  454,  319,  456,
  321,  322,   41,  310,  325,  462,  403,  310,  329,  401,
  456,  332,   93,  334,  442,  336,  379,  409,  395,   41,
  341,  342,  493,  344,   41,    0,   40,    0,  319,  296,
   41,   42,   43,   40,   45,  353,   47,   40,  401,  360,
  361,  332,  363,  440,    0,  262,  409,  264,  445,   40,
  341,  443,   40,   40,  451,  272,  377,   40,  379,  380,
  381,   40,   40,  384,   40,  462,  387,  388,   41,  286,
   40,   44,  289,  470,   40,   40,  397,   40,   40,   40,
  443,  262,  328,   41,   59,   41,   59,   44,   44,  389,
  389,  412,  389,  332,  415,  312,  344,  388,  274,  424,
  260,  448,  319,   59,  321,  322,  397,  392,  325,  391,
  431,  288,  329,  271,    0,  332,  409,  334,   41,  336,
   41,  442,  387,  278,  341,  342,  387,  344,  280,  387,
  387,  387,  387,  454,  286,  456,  379,   40,  462,   41,
   41,  462,  302,  360,  361,   41,  363,  419,  386,   41,
  438,  442,  419,  397,  314,   41,   42,   43,   44,   45,
  377,   47,  379,  380,  381,  444,  444,  384,  328,  339,
  387,  388,  302,   59,   60,   61,   62,  339,  445,  339,
  397,  262,  302,  264,   41,   41,  353,  372,  386,  372,
   41,  272,  459,  460,  461,  412,  463,  464,  415,   41,
   42,   43,   41,   45,   41,   47,   41,   93,  289,   41,
   41,   41,   41,   41,  431,  482,  483,   41,   41,   41,
  487,  488,  489,  490,   41,  442,   41,    0,   41,  496,
  497,  312,   41,   44,  280,   40,   40,  454,  319,  456,
  321,  322,  341,   59,  325,  462,  341,   59,  329,  409,
    0,  332,   59,  334,   41,  336,   59,   59,   59,  419,
  341,  342,   59,  344,  353,  345,  321,   41,   41,  280,
   40,   44,  369,   59,   59,  286,  384,  341,  384,  360,
  361,  384,  363,  462,  444,   44,   59,   41,   41,   44,
  412,   41,   44,   43,   44,   45,  377,  437,  379,  380,
  381,  305,  462,  384,  279,  302,  387,  388,  444,   59,
   60,   61,   62,   41,  344,   40,  397,   59,  465,  305,
  294,    0,  278,   44,  280,   44,  301,  308,   41,    0,
  338,  412,  288,   40,  415,   41,   42,   43,  264,   45,
  384,   47,  384,   93,  278,  264,  460,  390,  264,  322,
  431,  472,  321,  413,    0,  330,  329,   40,  310,  332,
  460,  442,   41,  336,  271,   44,  264,  344,  438,   41,
   40,  344,  344,  454,  349,  456,  262,  344,  264,   40,
   59,  462,  460,  358,  344,   41,  272,  360,  271,  364,
   41,   59,  305,   59,   44,   41,   41,   43,   44,   45,
   41,   42,   43,  289,   45,    0,   47,  382,    0,    0,
   12,  384,  245,   59,   60,   61,   62,   42,   43, 1058,
   45,  615,   47,  379,  397,  233,  312,  575,  384,  995,
 1310,  783,   75,  319,   59,  321,  322,  990,  280,  325,
  234,  293,  415,  329,  286,  401,  332,   93,  334,  993,
  336,  982,  323,  409,  288,  341,  342,  524,  344,  474,
  475,  476,  477,  478,  479,  480,  481,  974,  922,  442,
  624,  240,  983,  718,  360,  361, 1548,  363,  305,  305,
  503,  454, 1290,  456, 1551, 1292, 1584,  443,  708, 1552,
    0,  377, 1633,  379,  380,  381, 1128,   45,  384, 1505,
    0,  387,  388, 1581, 1322,  278,  355,  280, 1553,  572,
  778,  397,  262,  505,  264,   63, 1321,  310,  298,  291,
  985,  756,  272, 1160,  764,  565,  412,   13,  440,  415,
  270,   41,  673,   43,   44,   45,   41,   42,   43,  289,
   45,   41,   47,  686,   44,  431,  295,  444,  659,   59,
   60,   61,   62,  660,  888, 1370,  442,  306,  116,   59,
 1599, 1479,  312, 1562,  313, 1378, 1651,  456,  454,  319,
  456,  321,  322,  622,  280,  325,  462,  326, 1026,  329,
  286,  654,  332,   93,  334,  839,  336,  354,   -1,   -1,
   -1,  341,  342,   -1,  344,   -1,   41,   42,   43,  278,
   45,  280,   47,   -1,   -1,   -1,  379,   -1,   -1,  288,
  360,  361,    0,  363,   -1,   -1,  262,   -1,  264,   41,
   42,   43,   -1,   45,   -1,   47,  272,  377,  401,  379,
  380,  381,   -1,   -1,  384,   -1,  409,  387,  388,  280,
   -1,   -1,   -1,  289,   -1,  286,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   41,  403,  280,   44,   -1,   -1,   -1,
   -1,  286,  412,   -1,    0,  415,  312,   -1,   -1,   -1,
  443,   59,  421,  319,   -1,  321,  322,   -1,   -1,  325,
   -1,  431,   -1,  329,   -1,   -1,  332,  436,  334,   -1,
  336,  440,  442,   -1,  443,  341,  342,   -1,  344,    0,
  379,   -1,  451,   -1,  454,   41,  456,   43,   44,   45,
   -1,   -1,  462,   -1,  360,  361,   -1,  363,   -1,   -1,
   -1,  470,  401,   59,   60,   61,   62,    0,   -1,   -1,
  409,  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,
   41,  387,  388,   44,   -1,   46,   -1,   -1,  296,   -1,
   -1,  397,  262,   -1,  264,   -1,   -1,   93,   59,    0,
   61,   -1,  272,   -1,  443,   -1,  412,   -1,   41,  415,
   -1,   44,   -1,   -1,   -1,  280,   -1,   -1,  278,  289,
  280,  286,   -1,   -1,   -1,  431,   59,   -1,  288,   41,
   42,   43,   -1,   45,   -1,   47,  442,   41,   42,   43,
   -1,   45,  312,   47,   -1,   -1,   -1,   -1,  454,  319,
  456,  321,  322,   -1,   -1,  325,  462,   -1,   59,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,
   -1,  341,  342,   -1,  344,  280,   41,   42,   43,   -1,
   45,  286,   47,   41,   42,   43,   -1,   45,   -1,   47,
  360,  361,   -1,  363,   -1,   -1,   -1,   40,  280,   -1,
   43,   -1,   45,   -1,  286,   -1,   -1,  377,   -1,  379,
  380,  381,   -1,   -1,  384,   58,   -1,  387,  388,  379,
   63,   -1,   41,   42,   43,   -1,   45,  397,   47,   -1,
  278,   -1,  280,   -1,   -1,   -1,   -1,  445,   -1,   -1,
  288,  401,  412,   -1,   -1,  415,   -1,   -1,   -1,  409,
   -1,  459,  460,  461,   -1,  463,  464,   42,   43,   -1,
   45,  431,   47,   -1,   -1,   -1,  262,   -1,  264,   -1,
   -1,   -1,  442,   -1,  482,  483,  272,   -1,   -1,  487,
  488,  489,  490,  443,  454,   -1,  456,   -1,  496,  497,
   -1,   -1,  462,  289,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,  264,  265,   -1,   -1,   -1,   41,   42,
   43,   -1,   45,   58,   47,   -1,  312,   -1,   63,  280,
   -1,   -1,   -1,  319,   -1,  321,  322,   -1,    0,  325,
   -1,  379,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,   -1,  303,   -1,  305,  341,  342,   -1,  344,   -1,
   -1,   -1,   -1,  401,   -1,   -1,   -1,  258,  319,   -1,
   -1,  409,   -1,   -1,  360,  361,   -1,  363,  280,   41,
   -1,   -1,   44,   -1,  286,   -1,  280,   -1,  279,   -1,
  341,  377,  286,  379,  380,  381,  319,   59,  384,  322,
   -1,  387,  388,   -1,   -1,  443,  329,   -1,   -1,  332,
  301,  397,   -1,  336,   -1,   -1,  307,   -1,  341,   -1,
   -1,  344,   -1,   -1,   -1,  280,  412,   -1,   -1,  415,
   -1,  286,  280,   -1,  267,   -1,   -1,  360,  286,  330,
   41,   42,   43,  276,   45,  431,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  442,  290,  349,   -1,
  293,  384,   -1,  296,  297,  388,  357,  358,  454,   -1,
  456,  280,   -1,  364,  397,   -1,  462,  286,   -1,   -1,
   -1,   -1,  315,   -1,   -1,   -1,    0,  262,   -1,   -1,
   -1,  382,  415,   -1,  327,   -1,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,
   40,  286,   42,   43,   -1,   45,   -1,   -1,  301,  442,
   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   58,  420,
   -1,  454,  267,   63,  367,   -1,   -1,   -1,  371,  462,
  431,  276,   -1,   -1,   -1,   59,  379,  330,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  290,   -1,  280,   -1,   -1,
   -1,  296,  297,  286,   -1,   -1,  349,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,
  315,  364,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
  423,   -1,  327,   -1,   -1,   -1,  258,   -1,   -1,  382,
   58,   -1,  435,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,  445,   59,   -1,   -1,   -1,  279,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,  459,  460,  461,  462,
  463,  464,  367,   -1,   -1,   -1,  371,   -1,   -1,  301,
  473,   -1,   -1,   -1,  379,  307,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
   -1,   -1,   -1,  496,  497,   -1,  306,   -1,  330,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,  280,
   -1,   -1,   -1,   -1,  419,  286,  326,  349,  423,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  338,   -1,
  435,   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  445,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
  260,   -1,   -1,   -1,   -1,   -1,   -1,  267,  473,   -1,
   -1,   -1,   -1,   -1,  258,   -1,  276,  482,  483,  484,
  485,  486,  487,  488,  489,  490,   -1,  492,  420,   -1,
  290,  496,  497,  403,   -1,  279,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   40,   -1,  301,   43,   -1,
   45,   -1,   -1,  307,   -1,   -1,  436,  327,   -1,   -1,
  440,   -1,  260,   58,   -1,   -1,   -1,   -1,   63,  267,
   -1,  451,  258,   -1,   -1,   -1,  330,   -1,  276,   -1,
   -1,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,    0,
  470,   -1,  290,  279,   -1,  349,   -1,  367,  296,  297,
   -1,  371,   -1,   -1,  358,   -1,  304,   -1,   -1,   -1,
  364,   -1,   -1,   -1,   -1,  301,   -1,   40,   -1,   -1,
   43,  307,   45,   -1,   -1,   -1,   -1,   -1,  382,  327,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,  330,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,   -1,
   -1,   -1,   -1,  349,   -1,  435,  420,   -1,   -1,  367,
   -1,   -1,  358,  371,   -1,  445,  273,   -1,  364,   -1,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  459,
  460,  461,  462,  463,  464,   -1,  382,   -1,   -1,  296,
   -1,   -1,  299,  473,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  482,  483,  484,  485,  486,  487,  488,  489,
  490,   -1,  492,   -1,   -1,   -1,  496,  497,   -1,   -1,
   -1,   -1,   -1,   -1,  420,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,  340,   -1,   -1,   -1,  445,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,
   -1,   -1,  267,   -1,   -1,  473,   -1,  374,   -1,  376,
   -1,  276,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,  489,  490,   -1,  492,  290,   -1,   -1,  496,  497,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,   -1,  327,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,   -1,   -1,  258,   -1,   -1,
  447,   -1,   40,  276,   -1,   43,   -1,   45,   -1,   -1,
  355,  356,   -1,   -1,   -1,  462,   -1,  290,  279,   -1,
   58,   -1,  367,  296,  297,   63,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  379,  482,  483,   41,   42,   43,
  301,   45,   -1,   47,   -1,   -1,  307,   -1,   -1,   -1,
   -1,  498,  499,   -1,  327,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  423,   -1,
   -1,   -1,  355,  356,   40,   -1,   -1,   43,  349,   45,
  435,   -1,   -1,   -1,  367,   -1,   -1,  358,  371,   -1,
  445,   -1,   58,  364,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,
   -1,  496,  497,  273,  427,   -1,   -1,  277,   -1,  420,
   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  445,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
  340,   -1,  260,  496,  497,  263,  346,  347,  348,  267,
  350,  351,  352,   -1,  354,   -1,   -1,   40,  276,   -1,
   43,   -1,   45,   -1,   -1,  261,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,  374,   58,  376,   -1,  296,  297,
   63,   -1,   -1,   -1,   -1,   -1,   -1,  283,  272,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  280,   -1,   -1,   -1,
   -1,   -1,  286,   -1,  300,  289,  302,  407,   -1,  327,
   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
   -1,   -1,   -1,   -1,  260,  425,   -1,  263,   -1,   -1,
   -1,  267,  328,   -1,   -1,   -1,   -1,  355,  356,   40,
  276,  325,   43,  339,   45,   -1,   -1,  447,   -1,  367,
  334,   -1,   -1,  371,  290,   -1,   -1,   58,  342,   -1,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  361,   -1,  363,
   -1,   -1,  482,  483,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,  377,   -1,  379,  380,  381,  498,  499,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  427,
  406,   -1,  408,   -1,   -1,   -1,   -1,  435,  414,  355,
  356,  417,   -1,  419,  420,   -1,   -1,  445,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  459,  460,  461,  462,  463,  464,  431,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,  489,  490,   -1,  492,   -1,   -1,  260,  496,  497,
  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  427,   40,  276,   -1,   43,   -1,   45,   -1,  435,
   -1,   -1,   -1,   -1,  500,   -1,   -1,  290,   -1,  445,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,  260,
  496,  497,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,  355,  356,   40,  276,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  290,
  462,   -1,   58,   -1,   -1,  296,  297,   63,   -1,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,  486,   -1,   -1,  489,  490,  491,
  492,  493,   -1,   -1,  496,  497,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  427,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,  445,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
   -1,   -1,  260,  496,  497,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  427,   40,  276,   -1,
   43,   -1,   45,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,  445,   58,   -1,   -1,  296,  297,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,  260,  496,  497,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
  276,   40,   -1,   42,   43,   -1,   45,   -1,   -1,  367,
   -1,   -1,   -1,  371,  290,   -1,   -1,   -1,  462,   58,
  296,  297,   -1,   -1,   63,   -1,   -1,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
  484,  485,  486, 1193, 1194,  489,  490,  491,  492,  493,
   -1,  327,  496,  497, 1204, 1205,   -1, 1207, 1208,   -1,
   -1,   -1,   -1,   -1,   -1, 1215, 1216, 1217, 1218,  427,
 1220, 1221, 1222, 1223, 1224, 1225,   -1,  435,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,  489,  490,   -1,  492,   -1,   -1,  260,  496,  497,
  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  427,   40,  276,   -1,   43,   -1,   45,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,  445,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,   -1,
  496,  497,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,  355,  356,   -1,   -1,   40,  276,   42,   43,
   -1,   45,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,  290,  273,   -1,   58,   -1,  277,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  427,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,  353,   -1,  355,  356,   -1,  340,
   -1,   -1,  445,   -1,   -1,  346,  347,  348,  367,  350,
  351,  352,  371,  354,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  473,   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
   -1,   -1,   -1,  496,  497,   -1,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  407,   40,  276,   -1,
   43,   -1,   45,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,  290,   -1,  425,   58,  445,   -1,  296,  297,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  459,  460,  461,  462,  463,  464,  447,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,  327,
   -1,   -1,  271,  482,  483,  484,  485,  486,  487,  488,
  489,  490,   -1,  492,   -1,   -1,   -1,  496,  497,   -1,
   -1,  482,  483,  267,   -1,  353,   -1,  355,  356,   -1,
   -1,   40,  276,  302,   43,   -1,   45,  498,  499,  367,
  309,   -1,   -1,  371,  313,  314,  290,  316,   -1,   58,
  319,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,  435,   -1,  353,
   -1,  355,  356,   -1,   -1,   -1,   58,  445,   -1,   -1,
   -1,   63,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
  399,  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,  489,  490,   -1,  492,  434,   -1,  260,  496,  497,
   -1,   -1,   -1,   -1,  267,  444,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,  453,   -1,  455,   -1,   -1,   -1,
   -1,  435,   -1,  462,   -1,   -1,   -1,  290,   -1,   -1,
   -1,  445,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,  459,  460,  461,  462,  463,
  464,   -1,  491,   -1,   -1,   -1,   -1,   -1,   -1,  473,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,  482,  483,
  484,  485,  486,  487,  488,  489,  490,   -1,  492,   -1,
   -1,   -1,  496,  497,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,  355,  356,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   40,
   41,  290,   43,   -1,   45,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,  462,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,  486,  327,   -1,
  489,  490,  491,  492,  493,  267,   -1,  496,  497,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,  355,  356,  290,   -1,
   -1,   -1,  445,   -1,  296,  297,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,
  473,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
   -1,   -1,   -1,  496,  497,   -1,   -1,  302,   -1,   -1,
  419,  353,   -1,  355,  356,   -1,   -1,   -1,  313,  314,
   -1,  316,   -1,   -1,  319,  367,  435,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,  333,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,
  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,  488,
  489,  490,   -1,  492,   -1,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  445,  399,   40,  267,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,  276,   -1,  459,  460,  461,
  462,  463,  464,   58,  419,   -1,   -1,   -1,   63,  290,
   -1,  473,   -1,   -1,   -1,  296,  297,   -1,   -1,  434,
  482,  483,  484,  485,  486,  487,  488,  489,  490,  444,
  492,   -1,   -1,   -1,  496,  497,   -1,   -1,   -1,  273,
  455,   -1,   -1,  277,   -1,   -1,  327,  462,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,  299,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,  355,  356,  491,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,  435,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  425,  473,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,  267,  447,   -1,  496,  497,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,  462,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   41,  296,  297,   44,   -1,   -1,   -1,   -1,  482,  483,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,  498,  499,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,   -1,  267,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,  290,   63,
  355,  356,   -1,   -1,  296,  297,   -1,  272,   -1,   -1,
   -1,   -1,  367,   -1,   -1,  280,  371,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  325,   -1,   -1,  355,  356,   -1,   -1,   -1,  276,  334,
   -1,   -1,   -1,   -1,   -1,  367,   -1,  342,   -1,  371,
  435,   -1,  290,   -1,   41,   -1,   -1,   44,  296,  297,
  445,   -1,   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,
   -1,  456,   59,   -1,  459,  460,  461,  462,  463,  464,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,  473,  327,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,
   -1,  496,  497,  435,   -1,  353,   -1,  355,  356,   -1,
   -1,   -1,   -1,  445,   -1,   40,   -1,   -1,   43,  367,
   45,  262,   -1,  371,  456,   -1,  431,  459,  460,  461,
  462,  463,  464,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  482,  483,  484,  485,  486,  487,  488,  489,  490,   -1,
  492,   -1,   -1,  267,  496,  497,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,  290,  435,  329,   -1,
   -1,  332,  296,  297,   -1,  336,   -1,  445,   -1,   -1,
  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  459,  460,  461,  462,  463,  464,   -1,   -1,  360,
   -1,   -1,   -1,  327,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,  489,  490,  384,  492,   -1,  387,  388,  496,  497,
   -1,  355,  356,   -1,   -1,    0,  397,   -1,   -1,   -1,
   -1,    0,   -1,  367,   -1,  262,   -1,  371,   -1,   -1,
   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,  442,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  302,  454,   59,  456,   -1,   -1,   -1,  309,
   59,   -1,  319,  313,  314,  322,  316,   -1,   -1,  319,
   -1,  435,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,
   -1,  445,  267,  333,  341,   -1,   -1,  344,   -1,  339,
   -1,  276,   -1,   -1,   -1,  459,  460,  461,  462,  463,
  464,   -1,   -1,  360,    0,  290,   -1,   -1,   -1,  473,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,  482,  483,
  484,  485,  486,  487,  488,  489,  490,  384,  492,   -1,
  387,  388,  496,  497,    0,   -1,   -1,   -1,   -1,   -1,
  397,   -1,  327,   -1,   -1,   41,   -1,   -1,   44,  399,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  415,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,    0,   -1,  419,
  355,  356,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,  367,   -1,  434,  442,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   59,  444,   -1,   -1,  454,   -1,  456,
  271,   -1,   -1,  453,   -1,  455,   -1,   -1,   41,   -1,
   -1,   44,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
   -1,  491,  313,  314,   -1,  316,   -1,   -1,  319,   -1,
  435,    0,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  445,   -1,  333,  262,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,  482,  483,  484,
  485,  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,
   59,  496,  497,   -1,  319,    0,   -1,  322,   -1,   -1,
  319,   -1,   41,  322,  329,   44,   -1,  332,  399,   -1,
  329,  336,   -1,  332,   -1,   -1,  341,  336,   -1,  344,
   59,   -1,  341,   -1,   -1,  344,   -1,   -1,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   41,   -1,   -1,   44,
   -1,  360,   -1,  434,   -1,    0,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  444,   59,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,  455,  384,   -1,   -1,  387,  388,
   -1,  462,  397,   -1,   -1,   -1,  262,   -1,  397,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  415,   -1,   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,
  491,   -1,   -1,  319,   59,   -1,  322,   -1,   -1,  262,
   -1,   -1,   -1,  329,   -1,   -1,  332,  442,   -1,   -1,
  336,   41,   -1,  442,   44,  341,   -1,   -1,  344,  454,
   -1,  456,   -1,  319,   -1,  454,  322,  456,   -1,   59,
   -1,   -1,   -1,  329,  360,   -1,  332,   -1,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,    0,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  384,  322,
   -1,  387,  388,   -1,  360,   -1,  329,   -1,   -1,  332,
   -1,  397,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,   -1,  262,   -1,   -1,   -1,   41,  384,  415,
   44,  387,  388,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
    0,   -1,   -1,  262,   -1,   -1,  442,   -1,   -1,  415,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  454,   -1,
  456,    0,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,  442,  262,   -1,   -1,
  329,   41,  415,  332,   44,   -1,   -1,  336,  454,   -1,
  456,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   59,
  319,   -1,   41,  322,   -1,   44,   -1,   -1,   -1,  442,
  329,  360,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,
   59,  454,  341,  456,   -1,  344,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  319,  384,   -1,  322,  387,  388,
   -1,  360,   -1,   -1,  329,    0,   -1,  332,  397,   -1,
   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,  262,   -1,   -1,  384,  415,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,  397,   -1,
    0,   -1,   -1,   -1,  319,   -1,   41,  322,   -1,   44,
   -1,   -1,   -1,  442,  329,   -1,  415,  332,   -1,  384,
   -1,  336,  387,  388,   59,  454,  341,  456,   -1,  344,
   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  319,
   -1,   41,  322,  442,   44,  360,   -1,   -1,   -1,  329,
  415,   -1,  332,   -1,   -1,  454,  336,  456,  262,   59,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,  442,   -1,   -1,
  360,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  454,
   -1,  456,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  415,   -1,   -1,   -1,  384,    0,   -1,  387,  388,   -1,
   -1,    0,   -1,   -1,   -1,  319,   -1,  397,  322,   -1,
   -1,   -1,  262,   -1,   -1,  329,   -1,  442,  332,   -1,
   -1,    0,  336,   -1,   -1,  415,   -1,  341,   -1,  454,
  344,  456,   -1,  262,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   41,   -1,   -1,   44,  360,   -1,   -1,   -1,
   -1,   -1,  442,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   41,   -1,  454,   44,  456,   -1,   -1,  319,
  384,   -1,  322,  387,  388,   -1,   -1,   -1,   -1,  329,
   59,   -1,  332,  397,   -1,    0,  336,   -1,   -1,   -1,
  319,  341,   -1,  322,  344,   -1,   -1,   -1,   -1,   -1,
  329,  415,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,
  360,   -1,  341,   -1,   -1,  344,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,  442,   44,
   -1,  360,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
  454,   -1,  456,   -1,   59,   -1,   -1,  397,   -1,    0,
   -1,   -1,  262,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,  415,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  415,  332,   -1,   -1,
   41,  336,  442,   44,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,  454,   -1,  456,   -1,   59,  319,
   -1,   -1,  322,  442,   -1,  360,   -1,   -1,   -1,  329,
   -1,   -1,  332,   -1,   -1,  454,  336,  456,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  360,   -1,  397,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  415,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  442,   -1,   -1,
  277,   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,  454,
   -1,  456,   -1,   -1,  319,  292,   -1,  322,   -1,  296,
  319,   -1,  299,  322,  329,   -1,   -1,  332,   -1,   -1,
  329,  336,  442,  332,   -1,   -1,  341,  336,   -1,  344,
  319,   -1,  341,  322,  454,  344,  456,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  360,   -1,  336,   -1,   -1,
   -1,  360,  341,  340,   -1,  344,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,  384,
   -1,  360,  387,  388,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,  397,   -1,   -1,   -1,   -1,  374,  397,  376,
   -1,   -1,   -1,   -1,  319,  384,   -1,  322,  387,  388,
  415,   -1,   -1,   -1,  329,   -1,  415,  332,  397,   -1,
   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  407,   -1,   -1,   -1,   -1,   -1,  415,  442,   -1,   -1,
   -1,   -1,   -1,  442,   -1,  360,   -1,   -1,  425,  454,
   -1,  456,   -1,   -1,   -1,  454,   -1,  456,   -1,   -1,
   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,  319,  384,
  447,  322,   -1,  388,   -1,  454,  273,  456,  329,   -1,
  277,  332,  397,   -1,   -1,  336,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,   -1,  292,   -1,   -1,   -1,  296,
  415,   -1,  299,   -1,   -1,  482,  483,   -1,  273,  360,
   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  498,  499,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   -1,  296,   -1,  384,  299,   -1,   -1,  388,   -1,  454,
   -1,   -1,   -1,  340,   -1,   -1,  397,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  340,   -1,  374,   -1,  376,
   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,  354,
   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  454,   -1,   -1,   -1,   -1,   -1,  374,
  407,  376,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  447,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  447,   -1,   -1,  482,  483,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  498,  499,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  498,  499,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 500
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL","RECREATE",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID","LARGEINT",
"KW_INT64","DEBUG_KEYWORD",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG_KEYWORD signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"function : SUBSTRING '(' value FROM pos_short_integer ')'",
"function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


/* This method is currently used in isql/isql.epp to check if a 
   user field is a reserved word, and hence needs to be quoted.
   Obviously a hash table would make this a little quicker 
   MOD 29-June-2002
*/

bool LEX_StringIsAToken(const char*in_str)
{
    CONST TOK *tok_ptr = tokens;
    while (tok_ptr -> tok_string) {
        if (!strcmp(tok_ptr -> tok_string, in_str)) {
            return true;
        }
        ++tok_ptr;
    }
    return false;
}


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 19:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 26:
{ yyval = yyvsp[0]; }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_list (yyvsp[0]); }
break;
case 31:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 32:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 33:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 39:
{ yyval = 0; }
break;
case 40:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 41:
{ yyval = 0; }
break;
case 42:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 50:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 63:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = yyvsp[0];}
break;
case 72:
{ yyval = yyvsp[0]; }
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 76:
{ g_field->fld_dtype = dtype_blob; }
break;
case 77:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 78:
{ yyval = (NOD) NULL; }
break;
case 80:
{ yyval = yyvsp[-1]; }
break;
case 82:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 83:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 86:
{ yyval = yyvsp[-1]; }
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 95:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 109:
{ yyval = NULL; }
break;
case 110:
{ yyval = make_list (yyvsp[0]); }
break;
case 112:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 113:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 114:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 115:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 116:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 117:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 118:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 119:
{ yyval = (NOD) 0;}
break;
case 120:
{ yyval = yyvsp[-1]; }
break;
case 121:
{ yyval = (NOD) NULL; }
break;
case 124:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 125:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 126:
{ yyval = NULL; }
break;
case 127:
{ yyval = NULL; }
break;
case 128:
{ yyval = yyvsp[0]; }
break;
case 129:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = (NOD) NULL; }
break;
case 133:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 137:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 138:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 139:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 144:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 145:
{yyval = (NOD) NULL;}
break;
case 148:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 149:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 150:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 151:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 152:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 153:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 154:
{yyval = (NOD) NULL;}
break;
case 157:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 161:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 162:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 163:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 164:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 165:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 166:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 167:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 168:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 169:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 170:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 171:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 173:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 174:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 175:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 178:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 179:
{ g_file  = make_file ();}
break;
case 184:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 192:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 193:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 194:
{ yyval = yyvsp[0]; }
break;
case 195:
{ yyval = yyvsp[0]; }
break;
case 196:
{ yyval = (NOD) NULL; }
break;
case 198:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 201:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 202:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 203:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 204:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 207:
{ yyval = NULL; }
break;
case 208:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = (NOD) NULL; }
break;
case 211:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 212:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 213:
{ yyval = yyvsp[-1]; }
break;
case 214:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 227:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 228:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 229:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 232:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = yyvsp[0]; }
break;
case 235:
{ yyval = NULL ;}
break;
case 240:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 241:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 242:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 243:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 244:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 245:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 246:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 247:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 248:
{ yyval = NULL;}
break;
case 249:
{ yyval = yyvsp[0];}
break;
case 250:
{ yyval = yyvsp[0];}
break;
case 251:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 252:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 253:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 254:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 255:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 256:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 257:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 258:
{ yyval = make_list (yyvsp[-1]); }
break;
case 259:
{ yyval = NULL; }
break;
case 260:
{ yyval = yyvsp[0]; }
break;
case 261:
{ yyval = NULL; }
break;
case 263:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 264:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 265:
{ yyval = make_list (yyvsp[0]); }
break;
case 266:
{ yyval = NULL; }
break;
case 268:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 272:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 273:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 274:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 276:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 285:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 289:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 290:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 291:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 292:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 293:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 294:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 295:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 296:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 297:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 298:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 299:
{ yyval = make_list (yyvsp[0]); }
break;
case 300:
{ yyval = make_list (yyvsp[-1]); }
break;
case 301:
{ yyval = NULL; }
break;
case 302:
{ yyval = make_list (yyvsp[0]); }
break;
case 303:
{ yyval = make_list (yyvsp[-1]); }
break;
case 304:
{ yyval = NULL; }
break;
case 307:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 311:
{ yyval = NULL; }
break;
case 313:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 317:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 321:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 322:
{ yyval = make_list (yyvsp[0]); }
break;
case 323:
{ yyval = make_list (yyvsp[-1]); }
break;
case 324:
{ yyval = NULL; }
break;
case 328:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 337:
{ yyval = make_list (yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = yyvsp[-1]; }
break;
case 344:
{ beginning = lex_position(); }
break;
case 345:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 346:
{ beginning = last_token; }
break;
case 347:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 348:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 349:
{ yyval = 0; }
break;
case 350:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = NULL; }
break;
case 354:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 355:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 373:
{ yyval = NULL; }
break;
case 374:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 377:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = yyvsp[0]; }
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 381:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 382:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 386:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 387:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 388:
{ yyval = yyvsp[0]; }
break;
case 389:
{ yyval = yyvsp[0]; }
break;
case 390:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 395:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 397:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = yyvsp[0]; }
break;
case 400:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 401:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 402:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 403:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 428:
{ yyval = NULL; }
break;
case 429:
{ yyval = NULL; }
break;
case 430:
{ yyval = NULL; }
break;
case 431:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 432:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 433:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 434:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 435:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 436:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 437:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 438:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 440:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 443:
{ yyval = yyvsp[0]; }
break;
case 444:
{ yyval = yyvsp[0]; }
break;
case 446:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 449:
{ yyval = NULL; }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = yyvsp[0]; }
break;
case 453:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 454:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 455:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 456:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 457:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 458:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 459:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 460:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 462:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 463:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 464:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 469:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 470:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 472:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 473:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 474:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 480:
{ 
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 481:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 482:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 483:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 484:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 485:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 490:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 491:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 492:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 493:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 494:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 495:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 496:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 497:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 498:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 499:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 501:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 502:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 515:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 516:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 517:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 518:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 519:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 520:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 523:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 527:
{ yyval = yyvsp[-1]; }
break;
case 528:
{ yyval = 0; }
break;
case 532:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 533:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 534:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 535:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 536:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 539:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 540:
{ yyval = (NOD) NULL; }
break;
case 542:
{ yyval = (NOD) NULL; }
break;
case 543:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 545:
{ yyval = (NOD) NULL; }
break;
case 547:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 552:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 553:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 554:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 555:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 556:
{ yyval = yyvsp[0];}
break;
case 558:
{ yyval = yyvsp[0];}
break;
case 559:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 562:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 563:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 564:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 565:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 566:
{ yyval = 0; }
break;
case 567:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 568:
{ yyval = (NOD) NOD_SHARED; }
break;
case 569:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 570:
{ yyval = (NOD) 0; }
break;
case 571:
{ yyval = (NOD) NOD_READ; }
break;
case 572:
{ yyval = (NOD) NOD_WRITE; }
break;
case 574:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 575:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 577:
{ yyval = 0; }
break;
case 579:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 580:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 581:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 582:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 583:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 584:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 585:
{ yyval = make_list (yyvsp[0]); }
break;
case 586:
{ yyval = 0; }
break;
case 588:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 589:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 590:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 594:
{ yyval = yyvsp[0]; }
break;
case 595:
{ yyval = 0; }
break;
case 596:
{ yyval = yyvsp[0]; }
break;
case 597:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 598:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 599:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 600:
{ yyval = 0; }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 608:
{ yyval = make_list (yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 613:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = yyvsp[-1]; }
break;
case 615:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 616:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 617:
{ yyval = make_list (yyvsp[-1]); }
break;
case 618:
{ yyval = NULL; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 626:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 627:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 628:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 629:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 630:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 631:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 632:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 633:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 634:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 635:
{ yyval = yyvsp[-1]; }
break;
case 636:
{ yyval = yyvsp[0]; }
break;
case 637:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = yyvsp[0]; }
break;
case 640:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 641:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 642:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 643:
{ yyval = 0; }
break;
case 644:
{ yyval = make_list (yyvsp[0]); }
break;
case 645:
{ yyval = 0; }
break;
case 647:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 650:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 651:
{ yyval = yyvsp[0]; }
break;
case 652:
{ yyval = 0; }
break;
case 653:
{ yyval = yyvsp[0]; }
break;
case 654:
{ yyval = 0; }
break;
case 655:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 656:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 657:
{ yyval = 0;}
break;
case 658:
{ yyval = yyvsp[0]; }
break;
case 659:
{ yyval = 0; }
break;
case 660:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 661:
{ yyval = 0; }
break;
case 662:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 663:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 664:
{ yyval = 0; }
break;
case 665:
{ yyval = 0; }
break;
case 667:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 671:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 672:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 673:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 674:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 677:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 678:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 680:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 683:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 684:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 688:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 689:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 691:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 695:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 702:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 703:
{ yyval = yyvsp[0]; }
break;
case 705:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 708:
{ yyval = NULL; }
break;
case 709:
{ yyval = make_list (yyvsp[-1]); }
break;
case 711:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = NULL; }
break;
case 714:
{ yyval = make_list (yyvsp[-1]); }
break;
case 716:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 718:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 720:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 722:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 724:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 725:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 726:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 737:
{ yyval = yyvsp[-1]; }
break;
case 738:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 744:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 745:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 747:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 748:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 749:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 750:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 751:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 753:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 754:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 755:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 756:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 757:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 758:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 759:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 760:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 761:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 764:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 765:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 766:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 768:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 769:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 770:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 771:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 772:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 773:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 774:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 775:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 776:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 777:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 778:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 779:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 780:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 781:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 782:
{ yyval = make_list (yyvsp[-1]); }
break;
case 783:
{ yyval = yyvsp[-1]; }
break;
case 784:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 785:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 793:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 794:
{ yyval = yyvsp[0]; }
break;
case 795:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 796:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 797:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 798:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 799:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 800:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 801:
{ yyval = yyvsp[-1]; }
break;
case 802:
{ yyval = yyvsp[-1]; }
break;
case 805:
{ yyval = yyvsp[0]; }
break;
case 806:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 807:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 808:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 809:
{ yyval = yyvsp[0]; }
break;
case 810:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 811:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 812:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 813:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 815:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 817:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 818:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 819:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 820:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 821:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 822:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 824:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 825:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 826:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 827:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 833:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 834:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 835:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 836:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 837:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 838:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 839:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 840:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 841:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 842:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 843:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 844:
{ yyval = yyvsp[0]; }
break;
case 845:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 847:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 848:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 849:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 850:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 851:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 853:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 854:
{ yyval = yyvsp[0];}
break;
case 855:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 856:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 857:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 858:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 859:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 860:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 861:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 862:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 863:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 864:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 865:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 866:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 867:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 868:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 869:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 870:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 871:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 872:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 873:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 874:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 875:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 876:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 877:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 878:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 879:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 880:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 881:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 884:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
