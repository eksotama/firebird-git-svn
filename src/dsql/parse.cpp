#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   13,   79,
   79,   79,   63,   63,   66,   66,   66,   74,   89,   89,
   89,   90,   90,   91,   91,   92,   92,   96,   96,   73,
   99,   99,  101,  101,  102,  102,  105,  105,  106,  107,
  107,  108,  109,   71,   75,   72,   93,   93,  112,  113,
  113,  115,  115,  116,  116,  116,  116,  116,  114,  114,
  117,  117,  118,  118,  118,  118,  120,  120,  120,  120,
  119,  119,  124,  124,  123,   97,  125,  125,  126,  129,
  130,  130,  131,  127,  128,  128,  132,  132,  133,  133,
  134,  134,  134,   95,   95,   95,   68,   78,  135,  135,
  135,  136,  136,  137,  137,  138,  138,  138,  144,   85,
   85,  140,  140,  103,  103,   98,  148,  149,   57,  141,
  141,  104,  104,  104,  104,  104,  104,  142,  142,  156,
  156,  157,  159,  159,  159,  159,  159,  139,  158,  158,
  162,  162,  162,  162,  164,  165,  166,  161,  160,  160,
  160,  160,  160,  167,  168,  169,  169,  169,  169,   67,
   77,   80,  174,  170,  170,  171,  171,  175,  175,  176,
  172,  172,  177,  177,  178,  179,  179,  180,  180,  181,
  181,  173,  173,  173,  183,  183,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  186,  187,  188,  189,  189,  190,  196,  192,  192,
  192,  193,  193,  193,  194,  194,  194,  194,  191,  195,
  195,  184,  184,  201,  202,  202,  203,  203,  203,  203,
   11,  205,  205,  205,  206,  206,  206,  206,  206,  206,
   70,   82,  211,  208,  212,  212,  212,  213,  217,  222,
  222,  223,  223,  224,  224,  146,  210,   86,   88,  209,
  209,   69,   81,  227,  227,  227,  228,  231,  231,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  229,  229,  230,    2,  234,  234,
  234,  234,  234,  234,  234,  234,  242,  243,  240,  240,
  244,  244,  244,  244,  244,  244,  244,  235,  235,  245,
  245,  245,  245,  245,  245,  245,  239,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  247,  247,  249,  249,  248,  246,  246,  246,  241,
  241,  237,  238,  238,  251,  251,  251,  251,  252,  252,
  236,  253,  253,  254,  254,    8,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  100,  100,
  143,  143,  258,  258,  261,  261,  263,  263,   52,   52,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  268,
  268,  259,  259,  259,  259,  269,  269,   60,   60,   60,
   54,   54,  265,  265,  265,  262,  262,  262,  273,  273,
  273,  272,  272,  271,  271,  271,  266,  266,  276,  274,
  274,  274,  275,  275,  267,  267,  267,  267,  277,  277,
   17,   17,   17,  279,  279,  279,    4,   15,  281,  281,
  282,  282,  283,  283,  278,  284,  284,  285,  285,  286,
  286,  286,  286,  287,  287,  288,  288,  289,  289,  291,
  291,  291,  292,  292,  292,  293,  293,  293,  290,  295,
  295,  295,  296,  296,  294,  294,  297,  299,  299,  298,
  298,  280,   16,  300,  300,  300,  301,  301,  304,  304,
  305,  305,   64,   64,   64,  302,  302,  306,  306,  303,
  215,  215,  216,  216,  309,  309,  310,  310,  310,  307,
  313,  313,  314,  314,  315,  315,  316,  316,  317,  317,
  198,  198,  319,  319,  225,  225,   30,  226,  226,  226,
  226,  226,  226,  226,  226,  320,  320,  320,  321,  321,
  321,  214,  214,  214,  214,  219,  219,  322,  322,  323,
  323,  323,  323,  323,  325,  325,  325,  220,  220,  218,
  218,  329,  329,  329,  221,  221,  330,  331,  331,  331,
  331,  331,  332,  332,  333,  333,  334,  334,  335,  335,
  335,  336,  336,   10,   10,  338,  338,    7,    7,  339,
  340,  341,   18,   18,  342,  343,  344,  344,  185,  311,
  311,    3,    3,  346,  346,  346,  348,  348,   60,  347,
  347,  349,  349,   33,   33,   84,   83,   83,  337,  337,
  350,  351,  351,  199,  199,  199,  145,  345,  345,  110,
  110,  110,  110,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  353,  353,  354,  354,  354,  354,  354,  354,
  354,  354,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  359,  359,  359,  359,  365,  365,
  355,  355,  356,  356,  356,  356,  357,  357,  361,  361,
  362,  362,  362,  362,  360,  363,  358,  358,  366,  366,
  367,  364,  369,   87,   87,   87,   87,   87,   87,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   87,  155,
  155,  155,  370,  368,  368,  150,  150,  374,  374,  374,
  374,  374,  372,  372,  372,  372,  372,  375,  375,  375,
  375,  375,  375,  375,  375,  375,  375,  207,  151,  151,
  152,  153,  153,   50,   50,   19,   19,  233,  376,   53,
  122,  264,  264,   94,  371,  371,  371,  371,  377,  377,
  377,  377,  377,  377,  377,  377,  377,  377,  377,  378,
  326,  327,  327,  327,  324,  324,  373,  328,  328,  380,
  380,  381,  381,  382,  382,  385,  385,  383,  383,  388,
  388,  387,  384,  386,  379,  379,  379,  379,  379,  379,
  379,  379,  308,  308,  154,   47,  270,  121,  147,  352,
  163,  200,  257,   62,   59,  204,  111,   65,  312,   34,
   40,  318,  256,   38,   41,  197,   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,
    2,    2,    1,    0,    1,    1,    6,    6,    1,    1,
    0,    0,    1,    0,    4,    0,    1,    1,    2,    8,
    1,    0,    3,    0,    0,    1,    1,    2,    1,    1,
    1,    2,    6,    1,    1,    3,    0,    1,    1,    0,
    1,    1,    2,    3,    4,    2,    2,    3,    0,    1,
    1,    2,    1,    1,    1,    4,    3,    3,    3,    3,
    1,    1,    6,    3,    1,    3,    1,    3,    2,    1,
    0,    2,    3,    1,    0,    1,    1,    2,    3,    4,
    0,    1,    2,    0,    1,    1,    5,    5,    3,    2,
    0,    1,    3,    1,    1,    6,    3,    2,    6,    2,
    1,    2,    2,    2,    0,    1,    1,    2,    0,    2,
    0,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    2,    2,    4,    1,    1,    2,    2,    2,    0,
    1,    1,    1,    1,    2,    3,    7,    6,    1,    1,
    2,    2,    0,    3,    3,    1,    2,    2,    2,    8,
    8,    8,    8,    3,    0,    2,    0,    1,    3,    2,
    1,    0,    1,    2,    6,    1,    0,    2,    1,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    6,    4,    7,    8,    6,    4,    2,    1,    3,
    0,    2,    4,    0,    1,    1,    3,    3,    6,    3,
    0,    1,    2,    4,    1,    3,    2,    2,    2,    1,
    4,    1,    3,    0,    1,    1,    1,    3,    3,    3,
    7,    7,    7,    1,    1,    3,    4,    9,    2,    1,
    3,    1,    1,    6,    3,    0,    0,    0,    0,    3,
    0,    9,    9,    1,    1,    0,    2,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    5,    5,
    5,    5,    5,    5,    2,    0,    4,    2,    3,    3,
    2,    2,    2,    3,    3,    2,    3,    6,    1,    2,
    4,    3,    2,    2,    2,    2,    3,    1,    3,    3,
    3,    2,    2,    4,    4,    5,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    1,    1,    0,    2,
    2,    0,    1,    2,    2,    2,    2,    2,    1,    3,
    7,    1,    0,    1,    0,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    2,    2,    2,    1,    1,
    1,    1,    4,    5,    1,    3,    1,    3,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    4,    4,    6,    5,    3,    0,    2,    2,    0,
    3,    0,    4,    1,    5,    4,    1,    4,    1,    2,
    2,    1,    1,    1,    2,    2,    2,    2,    1,    0,
    3,    5,    1,    1,    2,    3,    1,    2,    3,    0,
    1,    1,    1,    5,    5,    6,    3,    2,    1,    0,
    2,    0,    1,    0,    3,    1,    0,    1,    2,    1,
    1,    1,    1,    2,    2,    1,    2,    3,    1,    1,
    3,    3,    1,    2,    3,    1,    2,    0,    2,    1,
    1,    0,    1,    1,    1,    3,    2,    3,    0,    1,
    3,    4,    3,    1,    3,    4,    3,    0,    1,    3,
    3,    3,    1,    1,    0,    3,    0,    2,    0,    9,
    1,    1,    1,    1,    1,    3,    1,    2,    3,    2,
    1,    3,    1,    1,    6,    3,    3,    2,    3,    0,
    1,    3,    1,    1,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    0,    2,    4,    2,    2,    4,
    2,    2,    1,    1,    0,    3,    0,    1,    3,    1,
    1,    1,    1,    3,    1,    1,    1,    2,    0,    2,
    0,    3,    5,    0,    2,    0,    4,    1,    2,    1,
    1,    0,    1,    3,    2,    1,    1,    2,    1,    4,
    2,    1,    3,    8,    5,    1,    3,    1,    1,    4,
    4,    4,    1,    1,    5,    5,    1,    3,    3,    1,
    1,    7,    7,    5,    3,    0,    1,    1,    1,    2,
    0,    1,    1,    1,    0,    3,    1,    3,    1,    0,
    3,    1,    3,    1,    3,    3,    1,    1,    3,    1,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
    5,    6,    3,    4,    5,    6,    3,    4,    3,    4,
    3,    4,    4,    5,    4,    4,    3,    4,    1,    3,
    3,    9,    9,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    1,    1,    3,    1,    1,    1,
    1,    1,    4,    1,    3,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    4,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
    6,    6,    8,    4,    4,    3,    6,    1,    1,    6,
    6,    1,    1,    4,    6,    4,    5,    3,    5,    4,
    5,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  541,  542,  543,    0,
  594,  698,  699,  703,  704,  452,    0,    0,    0,    0,
    0,    0,    0,  388,  549,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  113,    0,    0,   94,    0,
  868,    0,   20,  866,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  466,    0,    0,   36,   33,   35,    0,   34,    0,  941,
    0,    0,    0,    0,   31,   67,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  548,    0,    0,    0,    0,
  654,    0,    0,    0,  943,  635,    0,    0,    0,    0,
  106,    2,    0,    0,    0,    0,  436,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  437,  438,  439,  440,  441,
    0,  417,  934,    0,  938,    0,  396,  940,    0,  393,
    0,  637,  944,    0,  392,  947,    0,  391,    0,  547,
  864,    0,  149,  102,    0,  930,  103,    0,  216,  737,
    0,  937,  101,  144,    0,    0,   97,    0,  104,  870,
    0,   98,    0,   99,    0,  100,  145,  105,  603,  604,
    0,  869,  867,    0,  935,   73,    0,    0,  933,  474,
  467,    0,  473,  478,  468,  469,  476,  470,  471,  472,
  477,    0,   29,    0,   38,  724,   37,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  874,    0,  858,  646,  648,    0,  649,  651,  923,
  611,    0,  612,  652,    0,    0,    0,    0,    0,    0,
    0,  566,  555,    0,  558,  560,  561,  562,  563,  569,
  570,    0,  942,  636,    0,  107,    0,  108,    0,    0,
  595,    0,  593,    0,    0,    0,    0,  453,    0,    0,
  358,    0,  219,    0,  399,  389,  450,  451,    0,    0,
    0,    0,    0,    0,  408,    0,  364,  365,    0,    0,
  553,  551,  865,    0,    0,    0,    0,    0,    0,    0,
  152,  131,    0,   95,    0,    0,    0,  109,    0,  120,
  119,    0,    0,    0,    0,    0,    0,  926,   74,    0,
    0,    0,  700,  701,  475,    0,  925,  840,  839,  838,
    0,    0,  841,  842,    0,    0,  844,  336,  337,  331,
    0,  335,  836,  843,    0,  727,    0,    0,   26,    0,
    0,  945,    0,   70,   68,   66,   32,    0,    0,    0,
  729,    0,   51,    0,    0,    0,    0,    0,    0,    0,
    0,  826,    0,    0,  828,    0,    0,    0,  859,    0,
    0,  830,  831,  832,  860,  861,    0,  862,  863,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  734,  823,
  824,  825,  829,  809,    0,  808,    0,  812,  877,  878,
  811,  805,  806,  807,  810,  875,  876,  898,  899,  902,
  903,    0,  614,    0,  711,    0,    0,  615,    0,    0,
  592,    0,  567,    0,  564,    0,  565,  590,    0,  585,
    0,    0,  559,    0,  738,  707,    0,    0,    0,    0,
    0,  529,    0,    0,    0,  599,    0,  596,    0,  184,
    0,    0,  128,  458,  171,  172,    0,  456,    0,    0,
    0,    0,  459,    0,  454,    0,    0,  403,  405,  404,
    0,  406,    0,  400,  217,    0,    0,  268,    0,    0,
    0,    0,  412,  413,    0,  443,    0,    0,    0,    0,
    0,    0,    0,  369,  368,  462,    0,    0,  356,  148,
    0,    0,  157,    0,  156,    0,  163,  146,    0,  161,
  164,  165,  153,    0,    0,  497,  533,  500,    0,  534,
    0,    0,  501,    0,    0,    0,  524,  537,  496,  519,
  498,  499,  494,  481,  358,  479,  480,  482,    0,    0,
  491,  492,  493,  495,    0,    0,    0,    0,    0,  110,
    0,  111,    0,  112,    0,  123,    0,    0,  200,    0,
    0,  356,    0,  219,    0,    0,   82,    0,    0,  719,
    0,    0,    0,    0,    0,    0,    0,    0,  740,  744,
  745,  746,  747,  748,  749,  750,  751,  752,  753,  845,
  846,  847,  837,    0,    0,    0,  726,   27,    0,    0,
   43,   71,    0,    0,   25,    0,  732,    0,    0,  695,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  946,  308,    0,    0,
    0,    0,    0,    0,    0,  647,    0,    0,  650,    0,
    0,    0,    0,  939,  618,  545,    0,  872,  544,    0,
  568,    0,  576,  572,  571,    0,    0,    0,  587,  575,
    0,    0,  705,  706,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  606,    0,    0,  129,    0,    0,    0,
    0,    0,    0,  358,  402,    0,  358,  359,  407,  489,
    0,  270,    0,  264,  266,  356,  931,  239,    0,    0,
  358,    0,    0,  208,  356,    0,    0,    0,    0,  244,
  238,  241,  242,  243,  411,  448,  447,  410,  409,    0,
    0,    0,    0,    0,    0,  367,    0,  358,    0,    0,
  154,  158,    0,  162,    0,    0,  520,  521,  538,    0,
  535,    0,    0,  527,  525,  526,    0,    0,    0,    0,
  490,    0,    0,    0,    0,  528,    0,    0,    0,  356,
    0,  199,    0,  202,  204,  205,    0,    0,    0,    0,
    0,  219,   77,    0,    0,   76,  927,  508,  509,    0,
    0,    0,  743,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  333,  339,  340,  338,  728,    0,    0,
    0,    0,    0,    0,    0,    0,   52,   60,   62,    0,
    0,   69,    0,    0,    0,  731,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  915,  916,  917,
  918,  919,  920,  921,  922,    0,    0,    0,    0,    0,
    0,  908,    0,    0,    0,  633,    0,    0,  821,  822,
  896,    0,    0,  929,  817,    0,    0,    0,    0,    0,
    0,  827,  736,  735,    0,    0,    0,    0,  623,  624,
    0,    0,  616,  619,  546,  873,  577,  586,  581,  580,
    0,  591,  739,  708,  709,  356,    0,  214,  601,  602,
  600,    0,  180,  174,  181,    0,  177,    0,    0,  176,
    0,  187,  168,  167,  871,  170,  169,  460,    0,    0,
    0,  401,  269,    0,  210,  358,  212,    0,  359,  207,
  213,    0,    0,  245,    0,  414,  415,  358,  356,  359,
    0,    0,    0,  385,    0,    0,    0,    0,  345,  195,
  196,  155,    0,    0,    0,    0,    0,    0,  536,    0,
    0,  358,  359,    0,  485,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  356,    0,    0,    0,    0,  197,
    0,    0,    0,   81,    0,    0,    0,    0,   86,   83,
    0,    0,    0,  932,  702,    0,    0,  754,    0,    0,
    0,  780,  779,    0,    0,    0,  787,  799,  797,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  742,
    0,   64,   56,   57,   63,   58,   59,    0,    0,   21,
    0,    0,    0,   41,    0,    0,    0,  713,  733,  696,
    0,  712,    0,    0,    0,    0,    0,    0,  219,    0,
  879,    0,    0,  894,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  904,    0,  914,    0,
    0,    0,    0,    0,    0,  895,  833,    0,    0,    0,
    0,    0,    0,  638,    0,    0,    0,    0,    0,  583,
  584,  588,    0,  198,    0,    0,    0,    0,    0,    0,
  188,    0,    0,  397,  222,  223,  224,  225,  226,  227,
    0,    0,    0,  273,    0,  220,    0,    0,  246,    0,
  444,  445,  416,    0,    0,    0,    0,    0,    0,  358,
  464,  359,    0,    0,  357,    0,  928,  166,    0,    0,
  503,    0,  502,  539,    0,  531,    0,    0,    0,  483,
    0,  511,    0,    0,  513,  516,  518,  356,    0,    0,
    0,    0,  118,    0,  203,  358,  357,   96,    0,  116,
    0,   92,    0,    0,    0,    0,   85,    0,  795,  796,
    0,    0,    0,    0,    0,    0,  798,    0,    0,    0,
    0,    0,    0,    0,  788,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,   61,   53,   54,   22,  717,  718,    0,  715,  722,
  723,  720,    0,  694,    0,    0,  885,  884,    0,    0,
  881,  880,    0,  889,  888,  887,  886,  883,  882,    0,
    0,  910,    0,    0,    0,  909,    0,    0,    0,  631,
    0,    0,  626,    0,  627,    0,  644,  640,  642,    0,
    0,    0,    0,    0,    0,  182,  178,    0,    0,  193,
  189,    0,  359,  276,    0,    0,  359,  274,    0,    0,
    0,  230,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  461,    0,    0,  343,    0,  346,  505,    0,
  506,    0,  133,    0,    0,    0,  137,  139,  140,  141,
  486,  488,  484,  515,    0,    0,    0,  359,    0,    0,
  341,  358,   87,    0,    0,   89,    0,    0,    0,    0,
    0,    0,  801,  800,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   39,    0,  697,  218,  897,  890,  891,    0,
  892,  906,  905,    0,  911,  900,    0,  901,    0,  629,
    0,    0,  661,    0,  658,  662,  663,  665,  666,  667,
    0,    0,  610,  359,    0,  173,  190,  359,  143,    0,
  282,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  281,  285,  280,    0,    0,
  290,  291,  292,  293,  296,  298,  263,    0,  206,  231,
    0,    0,    0,  236,  232,  235,    0,  359,  383,  384,
  380,  379,  382,  381,    0,    0,  360,  347,  504,  532,
  142,  130,  138,    0,  358,  357,  260,  125,  359,    0,
    0,   90,   91,   78,    0,  766,  774,    0,  767,  775,
  770,  778,    0,    0,  768,  776,  769,  777,  763,  771,
  764,  772,  765,  773,  714,    0,  907,  632,    0,    0,
    0,    0,  678,  680,    0,  675,    0,  261,  183,  398,
    0,    0,    0,    0,  300,    0,    0,    0,  299,    0,
  301,  288,  294,    0,  297,  283,    0,  286,    0,  322,
  287,  209,  233,  237,    0,    0,  248,  387,    0,    0,
  359,    0,  342,  362,    0,   75,   93,    0,  893,    0,
    0,  664,  659,  679,    0,    0,  279,    0,  289,    0,
    0,    0,    0,  295,    0,    0,  315,  316,  330,    0,
    0,    0,    0,  325,  284,  323,    0,    0,  247,    0,
    0,    0,    0,    0,  352,  353,    0,  262,  359,    0,
    0,    0,    0,  686,    0,    0,    0,  278,  275,    0,
    0,    0,  303,    0,    0,    0,  307,    0,  329,  936,
  328,  327,    0,    0,  234,    0,    0,    0,  252,    0,
  251,    0,    0,    0,    0,    0,  363,  117,    0,  803,
  688,  677,    0,    0,  689,    0,  685,    0,    0,    0,
    0,    0,    0,    0,    0,  318,  317,  324,  326,    0,
    0,  256,  255,  254,  355,    0,    0,    0,    0,  684,
    0,  691,  310,    0,    0,  302,    0,    0,    0,  319,
  259,  257,  258,    0,  348,    0,    0,    0,    0,  320,
  304,    0,    0,  802,    0,  690,  313,  305,    0,  693,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1482,   26,   27, 1483,
   29,   30,   31,   32,   33, 1484,   35, 1485,  610,  101,
  378,  865, 1110,  102,  640,  866,  103,  383,  645,  126,
  104,  105,  235,  936,  115,  867,  868,  174,  177,  106,
  869,  107,  385,   77,  216,  349,  427,  605, 1047,  367,
  825,  574,  482,  801,  606,  607,  608, 1049,  217, 1296,
   69,  164,   70,  211, 1737, 1248,  197,  202,  204,  206,
  193,  184,  187,  199,  208,  131,  286,  288,  338,  590,
  592,  594,  375,  236,  750,  507,  617,  982,  342,  597,
 1038, 1243,  541,  698, 1012,  492,  493,  522,  333,  575,
 1023, 1385,  719, 1184, 1386, 1387, 1388, 1389, 1390,  618,
  194,  185,  329,  548,  330,  331,  549,  550,  551,  552,
 1218,  976,  495,  496,  966,  964,  497,  970,  965, 1175,
 1346,  971,  972, 1180,  344,  813,  814,  815,  816,  752,
  989, 1360,  576,  754,  429,  779,  925,  516, 1310, 1185,
  430,  431,  432,  916,  433, 1361, 1362,  525, 1505, 1639,
  760,  761,  748,  762,  763,  764, 1640, 1641, 1713,  310,
  520, 1192, 1486,  170,  517,  518, 1193, 1194, 1355, 1618,
 1487, 1488, 1489, 1589, 1490, 1491, 1492, 1493, 1494, 1495,
 1496, 1661, 1701, 1626, 1703,  434,  678, 1329,  435, 1055,
 1590, 1633, 1634, 1671,  370,  371,  436, 1007, 1215, 1376,
  178, 1008, 1009,  119,  262,  456, 1600,  353, 1169, 1343,
 1463, 1643, 1644, 1645, 1646, 1167,  319,  536,  778, 1211,
  537,  776,  200,   54,  314,  175,  136,  297,  161,  304,
  167,  738,  735,  305,  315,  768,  316,  533, 1000,  162,
  298,  504,  538, 1212,   91,  172,  220,  577,  578,  740,
 1024,  741, 1025, 1026,  581,  582,  583,  584, 1017,  829,
  585,  586,  587,  794,  588,  484,  791,   37,   38,   39,
   56,  180,  322,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  704,  469,  951, 1172,  470,  471,  709,   40,
  135,  293,   41,  485,  486,  724,  691,  263,  457,  458,
  459,  695,  937,  938,  939,  940, 1161,  437, 1149,  120,
  121, 1454, 1455,  438, 1457,  439,  440,  441,    0, 1654,
 1567, 1655, 1656, 1657, 1697, 1738,  390, 1121,   42,   43,
  354,   44,   45,  478,  479,  874, 1118, 1298, 1302,  391,
  648,  190,  619,  620,  621,  622,  623,  624,  625,  626,
  627,  628,  629, 1265, 1065, 1067, 1068,  923,  676,  442,
  443,  444,  445,  374,    0,  213,  446,  447,  906,  448,
  449,  450,  451,  668,  910, 1150, 1145,  669,
};
static short yysindex[] = {                                   4252,
 2603, -155, 3231,  118,  850,  154, 3672,  378, 2452,  389,
  295, 2320, -155,  792,  -89,  340,  401,    0,  746,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  325,
    0,    0,    0,    0,    0,    0, 7997,  398,  420,  477,
  340,  520,  556,    0,    0,  630,  983,  604,  398,  645,
  964,  477,  686,  340,  520,    0,  556,  691,    0,  872,
    0,  779,    0,    0,  940,  816,    0,  340,  845,  398,
  945,  816,  645,  420,  477,  686,  340,  520,  556,  691,
    0,  477,  890,    0,    0,    0, 1286,    0, 1286,    0,
  951,  954,   57, 1313,    0,    0,    0,  604,  340,  604,
  973,  980,  993,   54, 1022,    0,  115,  117,  -13,  904,
    0,  645, 1121, 1570,    0,    0, 1076, 1036,  477,  340,
    0,    0, 1265,   12, 1229,  -14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  842,    0,    0,  983,    0,   -8,    0,    0, 1534,    0,
  783,    0,    0,    4,    0,    0, 1286,    0, 1153,    0,
    0, 1127,    0,    0, 1118,    0,    0, 1332,    0,    0,
  983,    0,    0,    0, 1288, 1534,    0,  -33,    0,    0,
 1291,    0, 1290,    0, 1286,    0,    0,    0,    0,    0,
 1275,    0,    0, 1158,    0,    0, 1277, 1168,    0,    0,
    0, 1158,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  927,    0,  604,    0,    0,    0, -158, 1233,  931,
  691,  758, 1315, 1618, 1336, 1350, -158, 1271,  931, 1321,
 1329,    0, 6795,    0,    0,    0, 6795,    0,    0,    0,
    0, 5116,    0,    0, 1282,  420, 1364, 1283,  641,  340,
 1293,    0,    0, 1570,    0,    0,    0,    0,    0,    0,
    0, 1274,    0,    0, 1534,    0, 1291,    0,  721, 1324,
    0, 1301,    0,  529, 1392,  892,  -14,    0, 1471,  771,
    0,  604,    0,  842,    0,    0,    0,    0,  604, 1349,
  -61, 1298,  -54, 1728,    0, 8058,    0,    0, 1113, 1523,
    0,    0,    0, 1734, 1734,  983, 1424,  983, 2687, 1118,
    0,    0, 5368,    0,  477,  520,  556,    0, 1349,    0,
    0, 1515,  512, 1770,  340, 1540,  420,    0,    0, 1785,
  170, 3273,    0,    0,    0, 1365,    0,    0,    0,    0,
 1378, 1385,    0,    0, 1583, 1083,    0,    0,    0,    0,
 1813,    0,    0,    0,  676,    0,  340, 1429,    0,  477,
 1400,    0,  123,    0,    0,    0,    0,  340, 1274,  239,
    0,  340,    0, 1547,  477, 1828, -158, 1473, 1839, 1840,
 1841,    0, 1849, 1851,    0, 1853, 1855, 1856,    0,    0,
 1858,    0,    0,    0,    0,    0, 1861,    0,    0, 5707,
 1866, 1868, 6795, 6795, 5753, 1422, 1871, 1142,    0,    0,
    0,    0,    0,    0, 1824,    0, 1872,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1514,    0, 1645,    0, 1591, 1876,    0,   23,   32,
    0,  -96,    0, -135,    0, -135,    0,    0, 1877,    0,
  152, 1494,    0,    0,    0,    0, 1880,   49, 1874, 1349,
 1889,    0, 1652, 1652, 1892,    0, 1891,    0, 1555,    0,
  126, 1592,    0,    0,    0,    0,  983,    0, 1734, 1734,
 1734, 1734,    0, 1898,    0, 1669, 1681,    0,    0,    0,
 1642,    0, 5368,    0,    0, 5368, 1252,    0, 1534, 1680,
 1500, 5108,    0,    0,  552,    0, 1500,  938,  783,    0,
 1562, 1528, 1492,    0,    0,    0,  506, 1568,    0,    0,
 1513,  686,    0,  983,    0, 1700,    0,    0, 2687,    0,
    0,    0,    0,   50, 1525,    0,    0,    0, 1530,    0,
 1590, 1952,    0, 1648, 1959,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1910,  133,
    0,    0,    0,    0,   52, 1966, 1967, 1959, 1534,    0,
 1693,    0, 1286,    0, 1755,    0,  983,  983,    0,  -61,
    4,    0, 1632,    0, 1608, 1978,    0, 5530,  159,    0,
 1633, 1646, 1985, 3818, 1988, 3349, 8072,   -4,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1658, 1083,  604,    0,    0,  766, 1595,
    0,    0, 1565,  931,    0, 1715,    0, 1666, 1995,    0,
 1715,  766, 1717, 1727,  477,  542, 5979,  111,  645, 6795,
  616,  997, 1069, 2772, 6795, 3818, 1645, 1597,  491, 6795,
 5979,  612,  612,  792, 1764, 2011,    0,    0, 6025, 1598,
 6795, 6795, 6795, 6795, 6795,    0, 6795,  150,    0,  100,
 1610, 5979, 1600,    0,    0,    0, -164,    0,    0,  -44,
    0, 1607,    0,    0,    0,  340, 1008,  340,    0,    0,
  604, 1274,    0,    0, 5979, 1800,  -61, 1598,  872,  872,
  721,  140,  604,    0,  983,  983,    0,  277, 1513, 1513,
 1613,  686,  892,    0,    0, 2025,    0,    0,    0,    0,
 1789,    0,  604,    0,    0,    0,    0,    0, 1801, 2034,
    0, 1779, 1792,    0,    0, 1740, 1749, 1286, 1806,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  686,
  604, 5802, 1709, 1726, 1729,    0,  686,    0, 1684, 1084,
    0,    0, 1701,    0,   47, 1702,    0,    0,    0,  686,
    0, 1952,  165,    0,    0,    0, 1826,  165, 1703,  165,
    0, 2085,  686,  686,  686,    0, 1349,  340, 1864,    0,
 1775,    0, 1671,    0,    0,    0, 1113, 1684,  340, 1673,
   73,    0,    0, 2095, 1875,    0,    0,    0,    0,  170,
 1677, 1324,    0, 1324, 4896,  565, 6795, 6795, 3894, 2100,
  473, 4153, 6795, 4229,  -22, 4305, 4563, 6251, 4635, 4870,
 4938, 3818, 3818,    0,    0,    0,    0,    0, 1400,  477,
  520, 1400,  556,  691,  135, 2101,    0,    0,    0,  766,
 1760,    0,  -93, 1784, 1274,    0, 5979, 1784, 2109, 2101,
  766,  618, 1833, 6795, 6795, 1893, 6795, 2114, 6795, 2116,
 1771, 6795, 6795, 6795, 6795, 6795, 6795,    0,    0,    0,
    0,    0,    0,    0,    0, 1842, 1373,  -30, 6795,  575,
 5979,    0, 3818, 1843, 1645,    0, 2117,  -13,    0,    0,
    0, 1645, 1679,    0,    0, 1884,  612,  612,  884,  884,
  955,    0,    0,    0,  100, 2129, 2132, 1120,    0,    0,
 3818, 1854,    0,    0,    0,    0,    0,    0,    0,    0,
 -123,    0,    0,    0,    0,    0, 1739,    0,    0,    0,
    0, 2134,    0,    0,    0, 1752,    0, 1734, 1916,    0,
  277,    0,    0,    0,    0,    0,    0,    0, 2145, 3818,
 2340,    0,    0, 1886,    0,    0,    0, 2340,    0,    0,
    0, 1286, 1286,    0, 2147,    0,    0,    0,    0,    0,
  -79,  -95,  693,    0, 1924,  792, 1735, 1750,    0,    0,
    0,    0, 1732,  118, 1776, 1774, 1789, 2153,    0, 1513,
 1778,    0,    0, 1048,    0, 2149, 1732, 1068,  686, 2164,
 2167, 2173, 1956,    4,    0, 1886, 1734, 1592,  -61,    0,
 1568, 1735,   80,    0,  686, 1827, 1914, 5530,    0,    0,
  686, 1743, 1917,    0,    0, 2192, 2198,    0, 2256, 1645,
 2200,    0,    0, 1645, 2204, 6297,    0,    0,    0, 1894,
 2206, 1645, 2209,  916, 2212, 1645, 2215, 6795, 6795, 2100,
 6795, 6523, 2222, 1645, 2225, 2226, 1645, 2227, 6795, 1645,
 2233, 1645, 2234, 2239, 1645, 2240, 2241, 1645, 2242,    0,
 2021,    0,    0,    0,    0,    0,    0, 1957,  766,    0,
  766,  135, 2101,    0,  160,  160,   34,    0,    0,    0,
 1794,    0, 2109, 2101, 2243,  618, 1787, 1939,    0, 1946,
    0, 1968, 6795,    0, 2056, 2159, 2168, 2449, 2469, 2602,
 6795,  686, 5979, 1645, 1848, 5979,    0, 6795,    0, 1982,
  433, 6795, 5979, 6795, 6795,    0,    0, 1120, 2251, 5979,
 1036,  100, 1905,    0, 1906, 1911, 1958, 2030, 1975,    0,
    0,    0, 1886,    0, 1890,  983, 1926, 1513, 1923, 1513,
    0, 3818,  581,    0,    0,    0,    0,    0,    0,    0,
 1878, 2048, 1886,    0, 6795,    0, 2033, 1919,    0, 3818,
    0,    0,    0, 1935, 1937, 1941, 1942, 1943, 1944,    0,
    0,    0,  -13, 2055,    0,  446,    0,    0, 2293,  118,
    0, 1613,    0,    0,  165,    0, 2340, 1961,  165,    0,
  165,    0, 1789, 2296,    0,    0,    0,    0, 1113, 1684,
 2048, 1513,    0, 1592,    0,    0,    0,    0, 2134,    0,
 2298,    0, 2300,  983, -104, 2306,    0,  983,    0,    0,
 6795, 1934, 1934,  792, 2316, 1795,    0, 1934, 1934, 6795,
 1934, 1934, 2269, 1645,    0, 1476, 6795, 1645, 1934, 1934,
 1934, 1934, 1645, 1934, 1934, 1934, 1934, 1934, 1934, 1977,
    0,    0,    0,    0,    0,    0,    0, 1929,    0,    0,
    0,    0, 5979,    0,  618, 2243,    0,    0, 5368, 2328,
    0,    0, 2727,    0,    0,    0,    0,    0,    0, 2909,
   92,    0, 5979, 2064, 1938,    0, 5979, 3063, 1804,    0,
 1445, 1645,    0, 1808,    0, 1120,    0,    0,    0,  100,
 2140, 3818, 1979, 2048, 1734,    0,    0,  983, 1084,    0,
    0,  598,    0,    0,  604, 8066,    0,    0, 1645, 1652,
 2033,    0,  755,  340,  662, 1936, 2038, 1940, 2079, 2045,
 2084, 1886,    0, 5116, 2003,    0, 1684,    0,    0, 2350,
    0, 2351,    0, 2040, 1652, 1961,    0,    0,    0,    0,
    0,    0,    0,    0, 1886, 1568, 1735,    0, 1084, 1924,
    0,    0,    0, 2031, -138,    0, 1789, 2032, 1645, 2361,
 2367,  -13,    0,    0, 2369, 2375, 1645, 2376, 2377, 6795,
 6795, 1645, 2378, 2379, 2380, 2381, 2383, 2387, 2388, 2390,
 2391, 2394,    0,  160,    0,    0,    0,    0,    0,  686,
    0,    0,    0, 5979,    0,    0, 5979,    0, 1610,    0,
 1122, 2156,    0, 2393,    0,    0,    0,    0,    0,    0,
   -4, -103,    0,    0, 1513,    0,    0,    0,    0, 5368,
    0,  398,  471, 2382, 1324, 2398, 2099, 6795, 2385, 2402,
 2392, 2397, 2399, 2106, 2411,    0,    0,    0, 4566, 2412,
    0,    0,    0,    0,    0,    0,    0, 2408,    0,    0,
 2120, 2108,  340,    0,    0,    0, 1286,    0,    0,    0,
    0,    0,    0,    0, 2048, 2154,    0,    0,    0,    0,
    0,    0,    0, 2048,    0,    0,    0,    0,    0, 6795,
  983,    0,    0,    0,  983,    0,    0, 6795,    0,    0,
    0,    0, 1645, 1645,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2440,    0,    0, 1854, 3818,
 1598, 2140,    0,    0, 2115,    0, 2443,    0,    0,    0,
   91, 2426,  477, 6795,    0, 2148, 3818, 2125,    0, 3818,
    0,    0,    0,  164,    0,    0,  767,    0,  -92,    0,
    0,    0,    0,    0, 1286, 2102,    0,    0,  109, 1610,
    0, 1924,    0,    0, 1645,    0,    0, 1445,    0, 1975,
   -4,    0,    0,    0,  920, 2340,    0, 2438,    0, 6569,
 2301,  164,  707,    0,  715, 1099,    0,    0,    0,  398,
 2042,  118,  347,    0,    0,    0, 2102,  -71,    0, 2122,
 2124,  109, 2460, 1120,    0,    0, 1854,    0,    0, 2468,
 1610, 1979,  340,    0, 2474, 2475,  729,    0,    0, 5200,
 2123, 2482,    0,  112, 2091, 2228,    0,  164,    0,    0,
    0,    0, 4873,  767,    0,  541,  541, 2230,    0, 2096,
    0, 1120, 2499,  109, 2199, 1975,    0,    0, 1854,    0,
    0,    0,  920, 2504,    0,  420,    0, 1764, 1814,  106,
 2487, 2257, 2248, 4873, 4873,    0,    0,    0,    0, 2090,
  -55,    0,    0,    0,    0, 1120,  109, 1979, 1975,    0,
  420,    0,    0,  164, 2512,    0, 1677, 4873, 2253,    0,
    0,    0,    0, 1319,    0, 1979, 2515, 2521, 1821,    0,
    0, 4873, 3818,    0,  420,    0,    0,    0,   -4,    0,
};
static short yyrindex[] = {                                      0,
    0,  189,  476,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  732, 3425,    0,    0,    0,    0, 2571,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  733,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  891,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2235,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2188,    0,    0,    0,   64,    0,   64,    0,
    0,    0,    0, 2191,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5435, 3742,
    0,    0,    0, 1050,    0,    0,    0, 1231,    0,    0,
    0,    0,    0,    0,  114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -69,    0,
    0,    0,    0,  373,    0,    0, 2314,    0, 1051,    0,
    0,    0,    0,    0, 1696,    0,    0, 6346,    0,    0,
    0,    0,    0,    0,    0,  -69,    0, -137,    0,    0,
 2549,    0,    0,    0, 2314,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1057,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1077,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  611,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,    0,    0, 1174,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -69,    0, 2549,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1186,    0, 2312,    0,
    0,    0,    0, 1207,    0,    0,    0,    0,    0, 2327,
  750, 8089,    0, 1214,    0,    0,    0,    0,  366,    0,
    0,    0,    0, 2135, 2135,    0,    0,    0, 1246, 1704,
    0,    0,    0,    0,    0,    0,    0,    0, 2327,    0,
    0, 1039,    0,    0,    0,    0,    0,    0,    0, 4738,
 2202,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1281,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1308,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1334,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1909,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2046,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  110,    0,    0, 2277,    0,   98,    0,
    0,    0,    0,  368,    0,  368,    0,    0,  753,    0,
  863,  933,    0, 2817,    0,    0,    0, 1057,    0, 2327,
    0,    0, 1405, 1405,  838,    0,    0,    0,  139,    0,
 3146,   82,    0,    0,    0,    0,    0,    0, 2135, 2135,
 2135, 2135,    0,  162,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2338,    0,
    0,    0,    0,    0, 2312,    0,    0, 1154,    0,  475,
 2136,    0,    0,    0,    0,    0,    0,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1344,    0,
    0,    0,    0,  841, 1042,    0,    0,    0, 1310,    0,
    0, 1193,    0,    0, 1463,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2071, 2899,
    0,    0,    0,    0, 1491, 1366,    0, 1463,  -69,    0,
    0,    0, 2314,    0,    0,    0,    0,    0,    0,  750,
 1167,    0,    0,    0,    0, 2193,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
  102,    0,    0,    0,    0, 6841,    0, 6841,    0,    0,
 6841, 6841, 6841,    0,    0,    0, 2157,    0,    0,    0,
    0, 2660, 2830, 5481,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  548,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  377,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  750,    0,  831,  831,
    0,    0,    0,    0,    0,    0,    0, 3222,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  127,    0,    0,    0,    0,    0,    0,    0, 2566,    0,
    0, 2667, 1452,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  367,  382,  386,    0,    0,    0,    0, 1520,
    0,    0,    0,    0,    0, 1566,    0,    0,    0,    0,
    0, 1193,    0,    0,    0,    0,  664,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2327,    0,    0,    0,
  299,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6074,    0,    0,    0,  192,    0,    0,    0,    0, 2304,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1376, 1382,    0,    0,    0,    0,
    0,    0,    0, 1466,    0,    0,    0, 1466, 1472, 1474,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  713,    0,    0, 6841,    0,    0,
    0,  235,    0,    0,    0, 2216, 2967, 3137, 2353, 2523,
    0,    0,    0,    0,    0,  907,  806,  582,    0,    0,
    0, 1014,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  331,    0,    0,    0,    0,    0, 2135, 2151,    0,
 4129,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2337,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1499, 3425, 1526,   75,    0,    0,
    0,    0,    0,    0,    0,    0, 1639,    0,    0,    0,
    0,    0,    0,    0,    0, 1137,    0,    0,    0,    0,
    0,    0,    0, 1167,    0, 2337, 2135, 1527,  750,    0,
 2347, 1526,    0,    0,    0, 6074,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1695,
    0,    0,    0, 3609,    0,    0,    0,    0,    0,    0,
    0, 7035,    0, 7046,    0, 7123,    0,    0,    0,    0,
    0,    0,    0, 7129,    0,    0, 7206,    0,    0, 7290,
    0, 7353,    0,    0, 7403,    0,    0, 7436,    0,    0,
 2133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1376, 1538,    0, 2181,  124,    0,    0,    0,    0,
    0,    0, 1573, 1593, 1602,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2183,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2276,  981,    0,
 1815,    0, 2279,    0, 2280, 2282,    0,    0,  803,    0,
    0,    0, 2337,    0, 3798,    0,    0,    0, 2162,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2171,    0, 2357,    0,    0,    0, 1863,    0,    0,    0,
    0,    0,    0,  418,  663,  670,  690,  709,  790,    0,
    0,    0, 5435,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  209,    0,    0,
    0,    0, 2853,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1603,    0,    0,    0,    0, 1606,    0,
    0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
    0,    0,    0, 5481,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7530,    0, 7551,    0, 7580,    0,    0,
    0,    0, 7614,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1623,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1665,    0,    0,    0,  921,    0,    0,    0,    0,
    0,    0, 1012,    0, 2135,    0,    0,    0, 2957,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2588, 1622,
 2121,    0, 2312,    0,    0,    0,    0,    0,    0,    0,
    0, 2337,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1638,  807,    0,    0,    0,    0,
    0,    0,    0,    0, 2337, 2347, 1526,    0,  302,    0,
    0,    0,    0,    0,    0,    0,  343,    0, 7710,    0,
    0, 6841,    0,    0,    0,    0, 7760,    0,    0,    0,
    0, 7837,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  124,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
 2276,  399,    0,  454,    0,    0,    0,    0,    0,    0,
  516, 2593,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  294,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7979, 7990,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
    0,    0,    0,    0, 2595,    0,    0,    0,    0,    0,
 2578,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1716, 1634,    0,    0,    0,  264,
    0,    0,    0,    0, 2588,    0,    0,    0,    0,   88,
 3643,    0,    0,    0, 2593,    0,    0,    0,    0,  198,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2683,    0,    0, 3085,
 3160,    0,  194,  271,    0,    0,  125,    0,    0,    0,
   65, 2597, 1254,    0,    0, 2609,    0,    0,    0,    0,
 2592,  222,    0, 2348,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2276, 1034,    0,    0,  128,    0,    0,   89,    0,
    0,    0, 2593,    0,    0,    0,    0, 2610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  453,    0,  132,   88,    0,
    0,    0,    0,    0, 2596,    0,    0,    0, 7929,    0,
    0,    0,    0, 2276,    0, 2597, 2615,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1782,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2658,    0,    0, 2663,
    0,    0,    0,    0,    0,    8,    0, 2664,    1,  698,
  -35, -564, 1554,  724, -257, -477, 2661, 2421,    0,  -41,
    0, 2434,  -90,  -43,    0, -697, -935,  -29,  -26,  -34,
 -188, 2439, 2035,    0,    0,    0, 1294,    0,    0,  -46,
 1636, -512,   18, -791, 2077, 1869, -271, 1640, 2606, -303,
    0,  -53,    0,  809,  -47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -597,  -37, 1647, -270, -150, -924,    0,    0,
    0,    0, -299, -102, -324, 1654, -307,  -40,    0, -484,
    0,    0, -455, -943,    0, 1312,    0,    0, 2400, -544,
  -17,    0,    0,    0,    0, 2366,    0, 2158, 2406, -177,
 1675, -668,    0,    0,    0, -672,    0,    0,    0,    0,
    0,    0, 1738,    0, 2419, 1993, 1676, 2407, 2414,    0,
 1146,    0, -483, 1970,  -57, -547, -690,    0,    0,  -21,
 -941, -931, -914, -219, -908,    0, 1370, -958,    0, 1102,
 1380,    0, 2217,    0,    0,    0, 1095, 1105, 1070,   94,
 -260, -751, -306,    0,    0, 2005,    0, 1553,    0,    0,
 -849,    0,    0,    0, -198,    0,    0,    0,    0,    0,
    0,    0,    0, -611,    0, -153,    0,-1075, -277, 1024,
 1163,    0, 1082,    0,    0, 2395,  -97, -735, -921,-1138,
    0,    0,-1057, -628, -854, 1383,    0, -461, -581, -722,
 -613,    0, -814, 1116,  832, -248, -523, -680, -918,-1256,
    0,    0,   -1,    0,    0,    0,    0,    0, 2444,    0,
    0,    0,    0, 2455, 2236,    0,    0,    0,    0,    0,
 2465,    0,    0,    0,    0,  -16,    0,    0,    0, -309,
 1971, -308, 1544, -416,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2187,    0,-1181, 1984,    0,    0,    0,
 2764,    0,    0,    0,    0, 2505,    0,    0,    0,    0,
 2318,    0, 2322,    0,    0,    0, 2072,    0,    0,    0,
    0,    0,  -74,    0, 2061,    0,-1195, 1128,    0, 2094,
 -599, 2097,    0, -841, 1857,    0,    0, -124, -636,    0,
 2673,    0, 1234,-1160,    0,-1103,-1079, -917,    0, 1335,
    0, 1108,    0, 1151,    0, 1062,    0,    0,    0,    0,
 2331,    0,    0,    0, -320, 2160, 1932, -973,    0,    0,
    0,  829,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3176, 1617, 1733,    0, -587,    0,    0,
    0, -218,    0, 2450,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -112, 1668,    0,
};
#define YYTABLESIZE 8586
static short yytable[] = {                                     128,
  189,  166,   74,  284,   73,  191,  169,   34,  237,  171,
  183,  483,  369,  373,  255,  258,  713,  188,  196,  256,
  259,  547,  201,  579,  580,  542,  221,  958,  720,  739,
  511,  513,  742,  207,  917,  203,  225,  751,  753, 1186,
  205,  226,  455,  699, 1196,  918, 1186,  611,  232, 1187,
  243,  384,  245,  967,  818,  231, 1187,  886,  229,  291,
  384,  128,  230, 1154, 1197,  224, 1188,  244,  647,  833,
  228,  836, 1190, 1188,  344, 1203,  697,  817,  595, 1190,
  198,  455, 1042,  476, 1334,  285,  320,  879,  287,  785,
 1014,  803,  712, 1158,   72,  826,  254,  241, 1228,  931,
  241,  716,  428,  227,  265,  671,  452,  725, 1401,  710,
   88,  454, 1046,  607,  346,  955, 1015,  306,  503,  234,
 1247,  908, 1246,  510,  657,  962,  512,  669,  669,  657,
  670,  676, 1441,  344,  372, 1449, 1041,  653,  609,  935,
  455,  617, 1299, 1529,  334, 1724,  369,  373, 1642,  121,
  710, 1616,  888,  710,  253, 1668,  257,  477, 1378, 1453,
  716,  457,   72,  426,  487,  726,  644,  512,  710, 1405,
  512,  670,  607, 1292,  880, 1294,  376,  254, 1109,  254,
 1456,  933,  510,  657,  727,  512,  669,  512,  550,  670,
  676,  933,  642,  349,  265,  708,  379,  609,  984,  729,
  730,  731,  732,   72,   72,  379, 1206,  991,  135, 1020,
  368,  394,  579,  580,   72,  488, 1635, 1532,  461,  716,
  457,  426,  254,  800,  475, 1223,  521, 1115,  468,  942,
 1676,  852,   84,  527,  340,   84,  122, 1458, 1363,  464,
 1563,  547,  702,  294,  512, 1732,  260,  550,  307, 1078,
  786,  515,  349,  189,  759,  528,  311,  852,  531, 1204,
  317, 1459, 1036,  671,  477, 1564, 1079,  135,  372,  667,
  350,  290,  672,  673,  675,  834,  377, 1120,  834,  543,
  309,  545, 1170, 1383, 1241, 1186,  693, 1373,  998,  339,
  261,  589,  295,  725,  252, 1187,  599, 1733,  124,  603,
   55,  194,  125,  601,  797, 1112,  591, 1100, 1101,  700,
  593, 1080, 1188,  703,  350,  650, 1123, 1125, 1190, 1518,
 1336,  945,  671, 1565,  121,  121,  308,  834,  271,  350,
  608,  475,  341, 1171,  725,  638,  641,  725,  318,  455,
 1081,  123,  265, 1116,  368, 1649,  646, 1207,  124,   74,
  651,  641,  725,  795, 1533,  379,  853,  124, 1374, 1587,
  194,  654, 1406, 1205,  749,  463,  372,  578, 1151, 1292,
  260, 1677,  366,  710,  249, 1702, 1021, 1213,  480,   88,
 1453,  370,  853,  512,  512,  371,  512, 1603,  455,  608,
 1674,  988, 1113,  671,  725,  466,  671,  883,  660,  186,
  512, 1456, 1363, 1124,  296, 1143,  186, 1082, 1173,  799,
 1440, 1291, 1651, 1293,  887,  856,  373,  377,  617,  457,
  657, 1344,  796, 1460,  463,  372,  578,  512, 1469,   14,
  710,  366, 1497,  512, 1498, 1183,  512,  455,  780,  660,
  370, 1393,  660,  483,  371, 1249,  932,  725, 1300,  670,
  728, 1202,  351,  656,  607,  384,  657,  660, 1458,  670,
 1555,  671,  670,  979,  755,  835,  981, 1045,  457,  716,
  707,  670,  455, 1527,   78, 1526,  377, 1525, 1266,  609,
  987,  609, 1459,  694,  669,  657,  358, 1240,  135,  573,
  252,  510,  975,  240,  656,  455,  351,  782, 1451,  802,
  455,  352,  809, 1347, 1397,  975,  454, 1005,   71,  891,
 1239,  351,  656,  954,  907,  668, 1330,  696,  670,  914,
  915,  657,  349, 1330,  669,  349, 1053,  670,  922,  344,
  926,  927,  928,  929,  930,  826,  922,  857,  512, 1568,
  186,  454,  189, 1570, 1662,  512, 1033,  671,  573, 1048,
  811,  812,   74, 1381, 1119,  978,  668, 1538, 1396,  781,
  168, 1306,  710,  512,  454,  657,  474,  110,  669,  125,
  710,  670,  676,  252,  668,  252,   71,  643,  858,  657,
  457,  621,  669, 1597, 1699,  670,  676,  477,  671, 1108,
  349,  609,  671,  512,  946,  671,  487,  512,  550,  350,
  186,  609,  350,   84, 1604, 1058,  671,   74,  311,  828,
  186,  641,  745,  855,  645, 1534,  512,   71,   71,  827,
 1515, 1353,  621,  252,  474,  621,  973,  974,   71,  463,
  372,  366,  309,  968,  349, 1412,  366, 1352, 1468, 1588,
  621,  890,  366, 1524, 1460,  370,  349,  124,  349,  371,
  194, 1673,  512,  684,  475, 1365,   14,  455,  685,  189,
  671,  108,  378,  134,  468,  376,  952,  350, 1178,  374,
 1102,  608, 1658, 1105, 1186, 1466, 1648,  725,  963,  963,
 1650,  377,  807,  649, 1187,  515, 1059, 1060, 1064,  373,
 1395, 1072, 1074, 1076,  852, 1084, 1087, 1090, 1092, 1095,
 1098, 1188, 1508, 1435,  671, 1377,  969, 1190,  376,  112,
  578,  350,  133,  997,  999, 1195,  637,  660,  671,  636,
  994,  378,  134,  350, 1687,  350,  454, 1201,  374,  109,
  660,  550,  598, 1127, 1128,  113, 1130, 1242, 1132,  660,
  114, 1135, 1136, 1137, 1138, 1139, 1140, 1665,  373,  977,
  477, 1227,  579,  634,  512, 1666,  634, 1056, 1144, 1057,
  915, 1189,  373,  463,  372,  134, 1034,  376, 1189,  373,
  366,  634,  656,  578, 1048, 1004,  578, 1043,  114,  370,
   92,  351,  582,  371,  351,  656,  660,  996, 1018,  375,
  550,  598,  578,  386,  656,  660,  645, 1461,  911,  912,
  125,  260,  669,  129,  132,  620,  136,  773, 1382,  512,
 1558,  579,  250,  114, 1392,  377, 1103,  475,  578,  853,
 1030, 1031, 1032, 1708, 1436, 1069,  852, 1682,   74, 1107,
  605, 1104,  573,  582,  668,  130, 1106,  597,  251,  660,
  510,  656,  852,  669,  774,  884,  620,  127,  375,  351,
  656, 1070,  386,  660, 1729, 1730,  668, 1309,  163,  852,
  598,  669,  589, 1006,  620,  136,  671,  573, 1327, 1716,
 1612,  756,  930, 1573,  605,  260,  671,  490, 1741,  671,
  165,  510, 1146, 1147,  510, 1357,  491, 1652,  671,  605,
  552,  680, 1748,  351,  656,  573,  597,  681,  573,  510,
  621,  510, 1734,  668, 1499,  351,  630,  351,  656,  218,
  621,  436,  668,  621,  573,  922, 1574,  946, 1710,  892,
  622,  589,  621,  852,  464,  645,  378, 1273, 1274, 1522,
 1276, 1278,  574,  374, 1398,  671,  727,  168, 1283, 1372,
  573,  134,  913,  134,  671,  930,  859,  630,  775,  552,
  630,  853,  757,  373, 1198, 1199,  668,  684,  682, 1711,
  683,  622,  685, 1718,  622,  630,  366,  853,  852,  621,
  668,  365,  376,  181,  182, 1400,  852, 1610,  621,  622,
  173,  189, 1313, 1330,  853,  376, 1571, 1559,  671,  254,
 1320,  574,  915,  758, 1208,  915, 1736, 1144, 1155,  579,
  580, 1328,  915, 1331, 1332, 1250, 1712, 1189,  373,  915,
 1664,  676,   74,  657, 1219, 1611,  176, 1297, 1297, 1301,
  634,  634,  621, 1330, 1467,  465, 1148,  240,  730, 1629,
 1322, 1209, 1623, 1324,  621, 1625, 1335, 1464, 1690,  179,
  311,  522,  134,  312, 1359, 1465, 1234, 1157,  853,  557,
  554,  598,  676,  375,  657,  730,  671,  386,  509,   94,
  378,  862, 1252, 1452,  186, 1686, 1694,  374, 1256,  240,
  676,  510,  657,  598, 1528, 1349,  334, 1351,  382, 1630,
  466,  522,  522,  455,  358,  522,  136,  373, 1725,  313,
 1631, 1229,  759,  853,  859,  579,   96,  467,  510,  299,
  522,  853,  522, 1695, 1735,  192,  376, 1719,  557,  554,
 1409, 1229, 1739,   74,   74,  671, 1696,  510,  510, 1417,
  510,  669, 1744,  634,  620,  510, 1422,  365,  510,  963,
  579, 1530,  522, 1501,  620,  334,  209,  620, 1647, 1399,
 1230,  510, 1668,  669,   71,  254,  620,  510,  300,  605,
  240,  100,  454,  449,  455, 1502,  597, 1667,  579, 1321,
 1233,  579, 1503,  680,  634,   97,   75,   76,  860,  681,
  499,  605,  915,  556,  210,   98,  915,  579,  597,   71,
  487,  474,  686,  684,  682,  394,  683,  375,  685, 1689,
  669,  240,  540,  620, 1632,  680, 1504,  449, 1749,  669,
   99,  681,  620,  579,  861,  589,  395, 1404, 1598,  862,
 1442, 1408,  449,  390, 1445,  863,  487, 1601,   74,  510,
 1380,  500,  356,  454,  195,  630,  382, 1270,  630,  487,
  637,  477,  556,  540,  864,  630,  540,  212,  630,  622,
  589,  510,  630,  669,  394,  159,  620,  630,  510,  622,
  630,  540,  622,  540, 1602,  501,  260,  510,  620,  510,
  301,  622,  214, 1563,  645,  395,  630,  222,  589, 1543,
 1544,  589,  390,  502,  637,  574,  215,  510,  302,  357,
  332,   93,  510,  540, 1452,  117,  118,  589, 1564,  637,
  630,  233,  744,  915,  630,  743,  915,  189,  475,  522,
  894,  963,  623,  630,  159,  219, 1628,   42,  622,  523,
  574,  510,  303,  589, 1470,  522,  623,  622,  522,  522,
  630,  522, 1507,   94,  623,  234,  522, 1578,  260,  522,
  676, 1557,  657,   50,  238,   95, 1297,  239,  574,  332,
  623,  574,  522,  160, 1628,  657, 1565,  630,  522,  523,
  523,  522,  676,  523,  657,  352,  242,  574,  246,  630,
   96,  622, 1569,  247,  477,  517,   42,  630,  523,  352,
  523,  534,  896,  622,  381,   40,  248,  352,  356, 1605,
  125,   23,  535,  574,  358,  359,  360, 1608,  181,  182,
 1707,  382,   50,  352,  623, 1685, 1189,  373,  118,  676,
  523,  657,  160,  766,  215,  767,  517,  361,  362,  517,
  657,  949,  363,  364,  684,  682, 1596,  683, 1572,  685,
  522,  680, 1628, 1621,  517,  366,  517,  681,  950,   97,
 1627,  475,   74, 1685,   40,  357,  366,  487, 1556,   98,
   23, 1163,  522, 1163,  181,  182, 1628,  352,  215,  522,
  540,  479,  676,  522,  657, 1164,  517, 1164,  266,  487,
  522, 1595,  530,  215,   99,  721,  540, 1685, 1627,  915,
  540,   46,  540,   48,  324, 1010, 1011,  540,  522, 1165,
  540, 1165, 1576,  522, 1606, 1685,  684,  682, 1607,  683,
  514,  685,  479,  540,  282,  479,  283,  487,  465,  540,
  122,  122,  540,  530, 1637, 1560,  530,  350,  522, 1698,
  479,  325,  522,  326, 1706,  355,  934,  684,  682,  194,
  683,  530,  685,  530,  721,  361,  126,  959,  960, 1620,
   46,  514,   48, 1166,  514, 1166,  327,   24,  289,  953,
  358,  359,  360,  487,  181,  182, 1627,  292,  477,  514,
  934,  514,  637,  530,  689,  684,  682,  465,  683,  637,
  685,  328,  637,  361,  362,  507,  637,  523,  363,  364,
 1627,  540,   47,  309,  637,  487, 1669,  321,  194,  477,
  477,  514,  128,  523,  361,  126,  523,  523,  323,  523,
  637,  687,   49,  540,  523,  332,   24,  523, 1653,  487,
  540,   44,  127,  477,  540,  115,  507,  343,  345,  507,
  523,  540,  347,  351,  637,  475,  523,  477,  348,  523,
  352,  215,   45,  517,  507,  128,  507,  637,  687,  540,
   74,   47, 1672,  253,  540,  380, 1653,  215,  512,  517,
 1163,  687,  517,  517,  637,  517,  475,  475, 1722,  637,
  517,   49,  680,  517, 1164,  388,  392,  389,  681,  540,
   44,  127,  215,  540,  115,  215,  517,  128,  393,  215,
  475,  637,  517,  395,  253,  517, 1653,  253, 1165,  512,
  215,   45,  512,  637,  475,  637,  684,  682,  523,  683,
  335,  685,  253, 1142,  789,  150,  215,  512,  854,  512,
  128,  635, 1743,  151,  397,  835,  876,  215,  835,  875,
  523, 1040,  398, 1044, 1039,  725,  822,  523,  460, 1156,
  530,  523, 1155,  215,  680,  462,  336,  472,  523,  479,
  681,  479, 1166,  463,  474,  789,  530,  337,  789,  479,
  530,   14,  530,  489,  517,  215,  523,  530,  514,  498,
  530,  523,  479,  789,  150,  680,  725,  835,  506,  725,
  519,  681,  151,  530,  514,  690,  517,  526,  514,  530,
  514,  529,  530,  517,  725,  514,  523,  517,  514, 1174,
  523,  354, 1039,  885,  517,  889,  539, 1421,  893,  895,
  897,  514, 1177,  680,  540, 1176,  544,  514,  194,  681,
  514,  596,  517,  602,  919,  684,  682,  517,  683,  600,
  685, 1134,  684,  682,  628,  683, 1221,  685, 1226, 1220,
  194, 1225,  354,  507,  604,  354,  630, 1307,  684,  682,
  479,  683,  517,  685, 1304, 1414,  517, 1303, 1155,  631,
  354,  530,  507,  507, 1448,  507,  632, 1447, 1450,  194,
  507, 1447,  479,  507, 1723,  628,  635, 1447,  628,  479,
  382, 1747,  228,  530, 1668,  639,  507,  652,  194,  514,
  530,  644,  507,  628,  530,  655,  194,  194,  656,  657,
  658,  530,  677,  194,  684,  682, 1152,  683,  659,  685,
  660,  514,  661,  479,  662,  663,  512,  664,  514,  530,
  665,  194,  514,  228,  530,  670,  228,  671,  930,  514,
  679,  690,  267,  194,  687,  194,  512,  688,  512,  692,
  706,  228,  710,  512,  680,  711,  512,  514,  717,  530,
  681,  718,  514,  530,  715,  721,  722,  723,  194,  512,
  490,  733,  737,  746,  507,  512,  734,  268,  926,  930,
  930,  930,  930,  930,  942,  930,  789,  514,  736,  770,
  747,  514,  772,  194,  771,  777,  507,  930,  930,  930,
  930,  252,  787,  507,  150,  269,  783,  788,  270, 1308,
  684,  682,  151,  683,  507,  685, 1311,  684,  682,  789,
  683,  790,  685,  725,  271,  725,  150,  792,  793,  930,
  798,  930,  507,  725,  151,  804,  805,  507, 1312,  684,
  682,  808,  683,  789,  685,  819,  789,  512,  810,  821,
  272,  822,  830,  789,  832,  150,  789,  834,  831,  871,
  789,  870,  873,  151,  877,  789,  507,  881,  789,  512,
  358,  359,  360,  680,  150,  804,  512,  882,  909,  681,
  680,  920,  151,  150,  789,  947,  681,  512,  924,  150,
  694,  151,  941,  956,  980,  799,  680,  151,  363,  364,
  489,  975,  681,  986,  985,  512,  749,  150,  789,  988,
  512,  789,  789,  995,  992,  151,  804,  804,  804,  804,
  804,  789,  804,  993,  725, 1001, 1314,  684,  682,  725,
  683, 1006,  685,  354,  804,  804,  804,  804,  789,  512,
  354,  489, 1002,  354,  489, 1003,  725,  354, 1016, 1013,
  229, 1027,  680,  725, 1029,  354, 1022, 1035,  681,  489,
  789, 1037,  741,  628, 1051,  789,  628, 1054,  804, 1066,
  240,  354,  228,  628, 1111, 1114,  628,  789, 1052,  789,
  628, 1117, 1109, 1126, 1131,  628, 1129,  725,  628, 1133,
 1153,  229, 1141,  680,  229,  354,  684,  682, 1160,  683,
  930,  685,  930,  741,  628, 1162,  741,  636,  354,  229,
  930, 1179, 1168, 1624, 1182, 1191, 1200, 1210,  930, 1214,
 1216,  741, 1217, 1224,  930,  354, 1222,  930,  628, 1315,
  684,  682,  628,  683, 1235,  685, 1231, 1236, 1316,  684,
  682,  628,  683, 1237,  685,  816,  930,  930,  680, 1238,
  930, 1045,  354, 1254,  681,  680, 1258,  930,  628,  930,
  930,  681, 1259,  930,  354, 1257,  354,  930, 1260, 1262,
  930,  240,  930, 1263,  930, 1268, 1267,  680, 1269,  930,
  930, 1271,  930,  681, 1272,  628,  816,  816,  816,  816,
  816, 1279,  816,  240, 1280, 1281, 1282,  628,  930,  930,
  240,  930, 1284, 1285,  816,  816,  816,  816, 1286, 1287,
 1288, 1289,  852, 1323, 1290,  930, 1305,  930,  930,  930,
 1326, 1333,  930, 1337, 1338,  930,  930,  684,  682, 1339,
  683, 1340,  685, 1341,  240,  930, 1342,  804,  816,  804,
  684,  682, 1345,  683, 1350,  685, 1348,  804, 1356,  930,
  521, 1366,  930, 1367, 1354,  804, 1364, 1368, 1369, 1370,
 1371,  804, 1375, 1379,  804,  680, 1394, 1402,  930, 1384,
 1403,  681,  684,  682,  930,  683, 1407,  685,  489,  930,
  489, 1264,  819,  804,  804,  489, 1413,  804,  489, 1663,
  930,  930, 1433,  930,  804, 1434,  804,  804, 1437,  930,
  804,  489, 1443, 1444,  804, 1462, 1510,  804, 1509,  804,
 1512,  804, 1511, 1513,  365, 1514,  804,  804, 1517,  804,
 1519, 1520, 1521,  819,  819,  819,  819,  819,  240,  819,
  229, 1536, 1531, 1535,  680,  804,  804, 1537,  804, 1539,
  681,  819,  819,  819,  819, 1540, 1541, 1542, 1545, 1546,
 1547, 1548,  804, 1549,  804,  804,  804, 1550, 1551,  804,
 1552, 1553,  804,  804, 1554, 1561, 1562, 1577,  680,  109,
 1575, 1580,  804, 1579,  681,  819, 1584,  680, 1592,  489,
 1581,  741, 1594,  681,  741, 1582,  804, 1583, 1073,  804,
 1077,  741, 1085, 1088,  741, 1093, 1096, 1099,  741, 1585,
 1591,  489, 1593,  741, 1599,  804,  741,  816,  489,  816,
 1609,  804, 1615, 1614, 1619, 1638,  804,  816, 1622, 1317,
  684,  682,  741,  683,  404,  685, 1659,  804,  804,  240,
  804,  816, 1670, 1684,  816, 1678,  804, 1680, 1688, 1318,
  684,  682,  489,  683, 1692,  685,  741, 1261, 1693,  741,
  741,  240,  820,  816,  816, 1447, 1704,  816,  240,  741,
 1420, 1676, 1705, 1700,  816,  680,  816,  816, 1677, 1715,
  816,  681, 1717, 1721,  816, 1726,  741,  816,  680,  816,
 1727,  816, 1728, 1731,  681, 1668,  816,  816, 1745,  816,
 1742, 1746,  240,  820,  820,  820,  820,  820,  741,  820,
    1,   28,  605,  741,   30,  816,  816,  725,  816,   93,
  680,  820,  820,  820,  820,  741,  681,  741,  201,  358,
  267,  510,  816,  147,  816,  816,  816,  613,   71,  816,
  410,  265,  816,  816,   80,  211,  446,  272,  913,  191,
  386,  411,  816,  510,  819,  820,  819,  510,  912,  645,
  192,   94,  643,  639,  819,  641,  816,  271,  359,  816,
  417,  277,  682,   95,  681,  356,  221,  676,  420,  421,
  422,  819, 1319,  684,  682,  816,  683,  111,  685,  683,
  314,  816,  321,  634,  312,  692,  816,   25,   96,  814,
  819,  819,   28,   36,  819, 1295,  221,  816,  816,  396,
  816,  819,  114,  819,  819,  387,  816,  819,  872,  386,
  820,  819,  253, 1255,  819, 1253,  819,  223,  819, 1251,
 1050, 1244,  357,  819,  819,  553,  819, 1523,  508,  494,
  814, 1232,  814,  814,  814,  481,  784,  221, 1181,  957,
  221,   93,  819,  819, 1245,  819, 1617,  523,  814,  814,
  814,  814,  990,  253,  524,  221,  253,   97,  680,  819,
 1500,  819,  819,  819,  681, 1681,  819,   98, 1675,  819,
  819,  253, 1506,  765, 1679, 1358, 1714,  983,  680,  819,
 1740, 1636,  814,   94,  681, 1709, 1516, 1683,  514,  532,
  634,  505,   99,  819,  769,   95,  819, 1438,  684,  682,
 1028,  683, 1391,  685,  806, 1019,  116,  948,  473,  701,
  100,  961,  819,  409,  820,  943,  820,  705,  819,  944,
   96, 1159,  264,  819,  820, 1613, 1566,  358,  359,  360,
 1720,  181,  182, 1691,  819,  819, 1750,  819,  714, 1122,
  878,  820, 1275,  819,  633, 1325,  930,    0,    0,    0,
  361,  362,  412,  413,  414,  363,  364,  415,  416,  813,
  820,  820,    0,    0,  820,  418,  419,    0,    0,    0,
    0,  820,    0,  820,  820,    0,    0,  820,    0,    0,
    0,  820,  512,    0,  820,    0,  820,  930,  820,   97,
  930,    0,  942,  820,  820,    0,  820,    0,    0,   98,
  813,    0,  813,  813,  813,  930,    0,  930,    0,    0,
    0,  680,  820,  820,    0,  820,    0,  681,  813,  813,
  813,  813,    0,  512,   99,    0,  512,   46,  512,  820,
    0,  820,  820,  820,    0,    0,  820,    0,   47,  820,
  820,  512,  100,    0,    0,   48,    0,    0,    0,  820,
    0,  814,  813,  814,    0,    0,    0,    0,    0,    0,
    0,  814,    0,  820,    0,    0,  820,    0,    0,  512,
   49,    0,  512,    0,  221,    0,  221,    0,  814, 1439,
  684,  682,  820,  683,  221,  685,  194,  512,  820,    0,
  253,    0,  253,  820,    0,  499,  815,  814,  814,    0,
  253,  814,    0,    0,  820,  820,    0,  820,  814,    0,
  814,  814,    0,  820,  814,    0,    0,  546,  814,    0,
    0,  814,    0,  814,    0,  814,    0,    0,    0,    0,
  814,  814,    0,  814,    0,   50,  680,  815,    0,  815,
  815,  815,  681,    0,    0,  194,  500,    0,    0,  814,
  814,    0,  814,    0,    0,  815,  815,  815,  815,    0,
    0,    0,    0,    0,    0,  490,  814,   51,  814,  814,
  814,   52,    0,  814,  491,  221,  814,  814,    0,    0,
  501,    0,   53,    0,    0,    0,  814,    0,    0,  815,
    0,  253,    0,    0,    0,    0,    0,  221,  502,    0,
  814,    0,    0,  814,  221,    0,    0,    0,    0,    0,
  930,  930,    0,  253,  249,    0,    0,    0,    0,  814,
  253,  813,    0,  813,    0,  814,  930,    0,    0,    0,
  814,  813,    0, 1446,  684,  682,    0,  683,  221,  685,
    0,  814,  814,    0,  814,    0,    0,    0,  813,  930,
  814,  930,    0,    0,  253,  249,    0,    0,  249,    0,
  512,    0,  512,    0,    0,  930,  818,  813,  813,    0,
  512,  813,    0,  249,    0,  175,    0,    0,  813,    0,
  813,  813,    0,  512,  813,    0,    0,  930,  813,  250,
    0,  813,    0,  813,    0,  813,    0,    0,    0,    0,
  813,  813,    0,  813,    0,    0,  512,  818,  512,  818,
  818,  818,    0,  512,    0,    0,  512,    0,  680,  813,
  813,    0,  813,    0,  681,  818,  818,  818,  818,  512,
  250,    0,    0,  250,  175,    0,  813,    0,  813,  813,
  813,    0,    0,  813,  194,    0,  813,  813,  250,    0,
    0,  185,    0,    0,    0,    0,  813,    0,  815,  818,
  815,  512,    0,    0,    0,  194,    0,    0,  815,    0,
  813,    0,    0,  813,  898,  899,  900,  901,  902,  903,
  904,  905,    0,  512,    0,  815,    0,  194,    0,  813,
  512,    0,    0,  194,    0,  813,    0,    0,    0,    0,
  813,    0,    0,    0,  815,  815,    0,  512,  815,    0,
  185,  813,  813,    0,  813,  815,  194,  815,  815,    0,
  813,  815,    0,    0,  512,  815,    0,    0,  815,  512,
  815,    0,  815,    0,    0,  194,  512,  815,  815,    0,
  815,    0,  616,  194,  194,  423,    0,  424,    0,    0,
  194,    0,    0,    0,    0,    0,  815,  815,    0,  815,
  426,    0,    0,    0,    0,  254,    0,    0,  194,    0,
  512,    0,  680,  815,    0,  815,  815,  815,  681,    0,
  815,    0,    0,  815,  815,    0,    0,    0,    0,    0,
    0,    0,  249,  815,  249,    0,    0,    0,    0,    0,
    0,    0,  249,    0,    0,  194,    0,  815,    0,    0,
  815,    0,    0,    0,    0,    0,  194,    0,  616,    0,
    0,  423,    0,  424,    0,    0,  815,    0,  818,    0,
  818,    0,  815,  175,    0,    0,  426,  815,  818,    0,
    0,  254,    0,    0,    0,    0,    0,    0,  815,  815,
    0,  815,    0,    0,  175,  818,    0,  815,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,    0,  250,
    0,    0,    0,    0,  818,  818,  175,  250,  818,    0,
    0,    0,  175,    0,    0,  818,    0,  818,  818,    0,
    0,  818,    0,  249,  655,  818,  655,  655,  818,  655,
  818,    0,  818,    0,    0,  175,    0,  818,  818,  185,
  818,    0,  655,    0,    0,  249,    0,  655,    0,    0,
    0,    0,  249,    0,  175,    0,  818,  818,    0,  818,
  185,    0,    0,  175,    0,    0,    0,    0,    0,  175,
    0,    0,    0,  818,    0,  818,  818,  818,    0,    0,
  818,    0,  185,  818,  818,   57,  249,  175,  185,    0,
    0,    0,    0,  818,    0,    0,   58,    0,  250,  399,
    0,    0,    0,   59,    0,    0,    0,  818,  400,    0,
  818,  185,    0,    0,    0,    0,   60,    0,    0,    0,
  250,    0,  401,    0,  175,  612,  818,  250,  356,  402,
  185,    0,  818,    0,    0,    0,    0,  818,    0,  185,
    0,    0,    0,    0,    0,  185,    0,  613,  818,  818,
    0,  818,    0,    0,    0,    0,    0,  818,    0,  403,
    0,  250,    0,  185,    0,    0,    0,    0,  758,    0,
    0,    0,    0,    0,    0,  399,    0,   61,    0,    0,
    0,    0,    0,    0,  400,    0,    0,  404,  405,    0,
    0,    0,    0,   62,    0,    0,    0,    0,  401,  406,
  185,    0,  625,  407,  356,  402,    0,    0,    0,  758,
   63,  614,  758,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  613,    0,   64,    0,  758,    0,   65,
    0,    0,   66,    0,    0,  403,    0,    0,    0,    0,
   67,    0,    0,  625,  655,    0,  625,    0,    0,    0,
    0,  655,    0,    0,  615,    0,    0,    0,    0,   68,
  655,  625,    0,  404,  405,    0,  408,    0,    0,    0,
    0,    0,    0,    0,  655,  406,  409,    0,    0,  407,
  655,  655,    0,    0,    0,    0,    0,  614,  655,    0,
  358,  359,  360,  410,  181,  182,    0,    0,    0,    0,
    0,    0,    0,    0,  411,    0,    0,    0,    0,    0,
    0,  655,    0,  361,  362,  412,  413,  414,  363,  364,
  415,  416,    0,  417,    0,    0,  674,    0,  418,  419,
  615,  420,  421,  422,    0,    0,    0,  655,    0,  655,
  655,  653,  408,  653,  653,    0,  653,    0,    0,    0,
    0,  655,  409,    0,    0,  655,    0,  179,    0,  653,
    0,    0,    0,    0,  653,    0,  358,  359,  360,  410,
  181,  182,    0,    0,    0,    0,    0,    0,    0,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,  361,
  362,  412,  413,  414,  363,  364,  415,  416,  179,  417,
    0,  179,    0,    0,  418,  419,    0,  420,  421,  422,
    0,    0,    0,    0,    0,    0,  179,  616,  655,    0,
  423,    0,  424,    0,    0,    0,    0,    0,  655,    0,
  758,    0,    0,    0,    0,  426,    0,    0,    0,    0,
  254,    0,  655,  655,  655,  655,  655,  655,    0,    0,
    0,    0,    0,    0,    0,    0,  655,    0,    0,    0,
    0,    0,    0,    0,    0,  655,  655,  655,  655,  655,
  655,  655,  655,  655,    0,  655,    0,    0,    0,    0,
  655,  655,    0,  655,  655,  655,    0,  758,    0,    0,
  758,    0,    0,  425,    0,    0,  423,  758,  424,    0,
  758,    0,    0,    0,  758,    0,    0,    0,    0,  758,
    0,  426,  758,    0,    0,    0,  254,    0,    0,    0,
    0,  625,    0,    0,  625,    0,    0,    0,  758,    0,
    0,  625,    0,    0,  625,    0,    0,   79,  625,    0,
    0,    0,    0,  625,   80,    0,  625,    0,   81,   82,
    0,    0,  758,    0,    0,  758,  758,   83,    0,    0,
    0,  653,  625,    0,    0,  758,    0,    0,  653,   84,
    0,    0,    0,    0,    0,    0,    0,  653,    0,    0,
    0,    0,  758,    0,    0,    0,  625,    0,    0,    0,
  625,  653,    0,    0,    0,    0,    0,  653,  653,  625,
    0,    0,    0,    0,  758,  653,    0,    0,    0,  758,
    0,    0,    0,    0,    0,  179,  625,    0,    0,    0,
    0,  758,    0,  758,    0,    0,    0,    0,  653,    0,
    0,    0,    0,    0,   85,    0,  179,    0,    0,    0,
    0,    0,    0,  625,  399,    0,    0,    0,    0,    0,
    0,   86,    0,  400,  653,  625,  653,  653,  179,    0,
    0,    0,    0,    0,  179,    0,   87,  401,  653,    0,
   88,    0,  653,  356,  402,    0,    0,    0,    0,    0,
    0,   89,    0,    0,    0,    0,    0,  179,  186,    0,
    0,    0,  613,    0,    0,    0,    0,    0,    0,    0,
   90,    0,    0,    0,  403,    0,  179,    0,    0,    0,
    0,    0,    0, 1061,    0,  179, 1062,    0,    0,    0,
  399,  179,    0,    0,    0,    0,    0,    0,    0,  400,
    0,    0,  404,  405,    0,  653,    0,    0,    0,  179,
    0,    0,    0,  401,  406,  653,    0,  186,  407,  356,
  402,    0,  425,    0,    0,  423,  614,  424,    0,  653,
  653,  653,  653,  653,  653,    0,    0,    0,    0,    0,
  426,    0,    0,  653,    0,  254,  179,    0,    0,    0,
  403,    0,  653,  653,  653,  653,  653,  653,  653,  653,
  653,    0,  653,    0,    0,    0,    0,  653,  653,  615,
  653,  653,  653,    0,    0,    0,    0,    0,  404,  405,
    0,  408,    0,    0,    0,    0,    0,    0,    0,    0,
  406,  409,    0,    0,  407,    0,    0,    0,  425,    0,
    0,  423,    0,  424,    0,  358,  359,  360,  410,  181,
  182,    0,    0,    0,    0,    0,  426,    0,    0,  411,
    0,  254,    0,    0,    0,    0,    0,    0,  361,  362,
  412,  413,  414,  363,  364,  415,  416,    0,  417,    0,
    0,    0,    0,  418,  419,    0,  420,  421,  422, 1063,
    0,    0,    0,    0,    0,    0,    0,  408,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  409,    0,    0,
    0,    0,    0,    0,  425,    0,    0,  423,    0,  424,
    0,  358,  359,  360,  410,  181,  182,    0,    0,    0,
    0,    0,  426,    0,    0,  411,    0,  254,    0,    0,
    0,    0,    0,    0,  361,  362,  412,  413,  414,  363,
  364,  415,  416,    0,  417,    0,  186,    0,    0,  418,
  419,    0,  420,  421,  422,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  186,    0,    0,
    0,    0, 1071,    0,    0, 1062,    0,    0,    0,  399,
    0,    0,    0,    0,    0,    0,    0,    0,  400,  186,
    0,    0,    0,    0,    0,  186,    0, 1410, 1411,    0,
    0,    0,  401, 1415, 1416,    0, 1418, 1419,  356,  402,
    0,    0,    0,    0, 1423, 1424, 1425, 1426,  186, 1427,
 1428, 1429, 1430, 1431, 1432,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  186,    0,  403,
    0,    0,    0,    0,    0,    0,  186,    0, 1075,    0,
    0, 1062,  186,    0,    0,  399,    0,    0,    0,    0,
    0,    0,    0,    0,  400,    0,    0,  404,  405,    0,
  186,    0,    1,    0,    0,    0,    0,    0,  401,  406,
    0,    0,    0,  407,  356,  402,    0,    0,    0,    0,
    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
    0,    0,    3,    0,    0,    0,    0,  186,    0,    4,
    0,    5,    0,    6,    0,  403,    0,    0,    7,    0,
    0,    0,    0,    0, 1083,    8,    0, 1062,    0,    0,
    0,  399,    0,    0,    0,    0,    0,    0, 1063,    9,
  400,    0,    0,  404,  405,    0,  408,    0,    0,    0,
   10,    0,    0,    0,  401,  406,  409,    0,    0,  407,
  356,  402,  425,    0,    0,  423,    0,  424,    0,    0,
  358,  359,  360,  410,  181,  182,    0,    0,    0,    0,
  426,    0,    0,    0,  411,  254,    0,    0,    0,    0,
    0,  403,    0,  361,  362,  412,  413,  414,  363,  364,
  415,  416,    0,  417,    0,    0,    0,    0,  418,  419,
    0,  420,  421,  422, 1063,    0,    0,   11,    0,  404,
  405,    0,  408,    0,   12,    0,    0,   13,    0,   14,
   15,  406,  409,    0,  425,  407,    0,  423,    0,  424,
    0,    0,    0,    0,    0,    0,  358,  359,  360,  410,
  181,  182,  426,    0,   16,    0,    0,  254,    0,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,  361,
  362,  412,  413,  414,  363,  364,  415,  416,    0,  417,
    0,    0,    0,    0,  418,  419,    0,  420,  421,  422,
 1063,    0,    0,    0,    0,    0,    0,    0,  408,    0,
    0,    0,    0,   17,    0,    0,    0,    0,  409,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  358,  359,  360,  410,  181,  182,    0,    0,
    0,    0,    0,    0,    0,    0,  411,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  362,  412,  413,  414,
  363,  364,  415,  416,    0,  417,    0,    0,    0,    0,
  418,  419,    0,  420,  421,  422,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1086,    0,    0, 1062,    0,    0,    0,  399,
    0,    0,    0,    0,    0,    0, 1356,    0,  400,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  401,    0,    0,    0,    0,    0,  356,  402,
    0,    0,    0,    0,    0,    0,    0,    6,    0,    0,
    0,    0,    0,    0, 1586,    0,    0,    0, 1472, 1473,
    0, 1474,    0,    0, 1475,    0,    0,    0,    0,  403,
    0,    0,    0,    0, 1091,    0,    0, 1062, 1476,    0,
    0,  399,    0,    0, 1477,    0,    0,    0,    0,  425,
  400,    0,  423,    0,  424,    0,    0,  404,  405,    0,
    0,    0,    0,    0,  401,    0,    0,  426,    0,  406,
  356,  402,  254,  407,    0,    0,  919,  684,  682,    0,
  683,    0,  685,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  850,  849,  851,    0,    0,
    0,  403,    0,    0, 1478,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  425,    0,    0,
  423,    0,  424,   14,    0,    0,    0,    0, 1063,  404,
  405,    0,    0,    0,    0,  426,  408,    0, 1479,    0,
  254,  406,    0,    0,    0,  407,  409,    0,   16,    0,
  219,    0,    0,    0,  219,    0,    0, 1587,    0, 1480,
  358,  359,  360,  410,  181,  182,  474,    0,    0,  219,
    0,    0,    0,  219,  411,    0,  219,    0,    0,    0,
    0,    0,    0,  361,  362,  412,  413,  414,  363,  364,
  415,  416,    0,  417,    0, 1481,    0,    0,  418,  419,
 1063,  420,  421,  422,    0,    0,    0,    0,  408,    0,
    0,    0,    0,    0,    0,    0,    0,  219,  409,    0,
    0,    0,    0,  219,  219,  219,    0,  219,  219,  219,
    0,  219,  358,  359,  360,  410,  181,  182,    0,    0,
    0,    0,    0,    0,    0,    0,  411,    0,    0,    0,
    0,  219,    0,  219,    0,  361,  362,  412,  413,  414,
  363,  364,  415,  416,    0,  417,    0,    0,    0, 1094,
  418,  419, 1062,  420,  421,  422,  399,    0,    0,    0,
    0,    0,    0, 1356,  219,  400,    0,    0,    0,   79,
    0,    0,    0,    0,    0,  425,    0,  453,  423,  401,
  424,  219,    0,    0,    0,  356,  402,  837,    0,    0,
    0,    0,    0,  426,    6,  680,    0,    0,  254,    0,
    0,  681,    0,  219,  838, 1472, 1473,    0, 1474,    0,
    0, 1475,    0,    0,    0,    0,  403, 1097,    0,    0,
 1062,    0,    0,    0,  399, 1476,    0,    0,    0,    0,
    0, 1477,    0,  400,    0,    0,    0,    0,  219,  219,
  839,    0,    0,    0,  404,  405,    0,  401,    0,  840,
    0,    0,    0,  356,  402,  219,  406,  841,    0,  425,
  407,    0,  423,    0,  424,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  842,  426,  843,    0,
    0,    0,  254,    0,  403,    0,    0,    0,    0,    0,
    0, 1478,  844,    0,  845,  846,  847,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   14,    0,  404,  405,    0, 1063,    0,    0,    0,    0,
    0,    0,    0,  408,  406, 1479,    0,    0,  407,    0,
    0,    0,    0,  409,    0,   16,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  848, 1480,  358,  359,  360,
  410,  181,  182,  474,    0,    0,    0,    0,    0,    0,
    0,  411,    0,    0,    0,    0,    0,    0,    0,    0,
  361,  362,  412,  413,  414,  363,  364,  415,  416,    0,
  417,    0, 1481, 1063,    0,  418,  419,    0,  420,  421,
  422,  408,    0,    0,    0,    0,    0,    0,    0,    0,
  554,  409,  399,    0,  555,    0,    0,    0,    0,    0,
    0,  400,  749,    0,    0,  358,  359,  360,  410,  181,
  182,    0,    0,  556,    0,  401,  557,    0,    0,  411,
    0,  356,  402,    0,    0,    0,    0,    0,  361,  362,
  412,  413,  414,  363,  364,  415,  416,    0,  417,    0,
    0,    0,    0,  418,  419,    0,  420,  421,  422,    0,
    0,    0,  403,    0,    0,    0,    0,  558,    0,    0,
    0,    0,    0,  559,  560,  561,    0,  562,  563,  564,
    0,  565,    0,    0,    0,    0,  399,    0,  357,    0,
  404,  405,    0,    0,  924,  400,  924,  924,    0,  924,
    0,  566,  406,  567,    0,    0,  407,    0,    0,  401,
    0,    0,  924,    0,    0,  356,  402,  924,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  568,    0,    0,    0,    0,    0,
  655,    0,    0,  655,    0,  655,  403,    0,    0,    0,
    0,  569,    0,    0,    0,    0,    0,    0,  655,    0,
    0,    0,    0,  655,    0,    0,    0,    0,    0,  408,
    0,    0,  357,  570,  404,  405,    0,    0,    0,  409,
    0,    0,    0,    0,    0,    0,  406,    0,  186,    0,
  407,    0,    0,  358,  359,  360,  410,  181,  182,    0,
    0,    0,    0,    0,    0,    0,    0,  411,  571,  572,
    0,    0,    0,    0,    0,    0,  361,  362,  412,  413,
  414,  363,  364,  415,  416,  573,  417,    0,    0,    0,
    0,  418,  419,    0,  420,  421,  422,  674,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  408,    0,    0,    0,    0,    0,    0,
  554,    0,    0,  409,  555,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  358,  359,  360,
  410,  181,  182,  556,    0,    0,  557,    0,    0,    0,
    0,  411,    0,    0,    0,    0,    0,    0,    0,    0,
  361,  362,  412,  413,  414,  363,  364,  415,  416,    0,
  417,    0,    0,    0,    0,  418,  419,    0,  420,  421,
  422,  924,    0,    0,    0,    0,    0,  558,    0,    0,
  924,    0,    0,  559,  560,  561,    0,  562,  563,  564,
    0,  565,    0,    0,  924,    0,    0,    0,    0,    0,
  924,  924,    0,    0,    0,    0,    0,    0,    0,    0,
  655,  566,    0,  567,    0,    0,  425,  655,    0,  423,
    0,  424,    0,    0,    0,    0,  655,    0,    0,    0,
    0,  924,    0,    0,  426,    0,    0,    0,    0,  254,
  655,    0,    0,    0,  568,    0,  655,  655,    0,    0,
    0,    0,    0,    0,  655,    0,    0,  924,    0,  924,
  924,  569,  425,    0,    0,  423,    0,  424,    0,    0,
    0,  924,  823,    0,    0,  924,  555,  655,    0,    0,
  426,    0,    0,  570,    0,  254,    0,    0,    0,    0,
    0,  824,    0,    0,    0,  556,    0,    0,  557,    0,
    0,    0,    0,    0,    0,  655,  655,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  655,  571,  572,
    0,  655,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  573,    0,    0,  924,  558,
    0,    0,    0,    0,    0,  559,  560,  561,  924,  562,
  563,  564,    0,  565,    0,    0,    0,    0,    0,    0,
    0,    0,  924,  924,  924,  924,  924,  924,    0,    0,
    0,    0,    0,  566,    0,  567,  924,    0,    0,    0,
    0,    0,    0,    0,  655,  924,  924,  924,  924,  924,
  924,  924,  924,  924,  655,  924,    0,    0,    0,    0,
  924,  924,    0,  924,  924,  924,  568,    0,  655,  655,
  655,  655,  655,  655,    0,    0,    0,    0,    0,    0,
    0,    0,  655,  569,    0,    0,    0,    0,    0,    0,
    0,  655,  655,  655,  655,  655,  655,  655,  655,  655,
    0,  655,    0,  399,    0,  570,  655,  655,    0,  655,
  655,  655,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  401,    0,    0,    0,
    0,    0,  356,  402,    0,    0,    0,    0,    0,    0,
  571,  572,    0,    0,    0,    0,    0,    0,  425,  399,
    0,  423,    0,  424,    0,    0,    0,  573,  400,    0,
    0,    0,    0,  403,    0,    0,  426,    0,    0,    0,
    0,  254,  401,    0,    0,    0,    0,    0,  356,  402,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  404,  405,    0,  425,  921,    0,  423,    0,  424,
    0,    0,    0,  406,  554,    0,    0,  407,  555,  403,
    0,    0,  426,    0,    0,    0,    0,  254,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  556,    0,    0,
  557,    0,    0,    0,    0,    0,    0,  404,  405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  406,
    0,    0,    0,  407,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  408,  558,    0,    0,    0,    0,    0,  559,  560,  561,
  409,  562,  563,  564,    0,  565,    0,    0,  666,    0,
    0,    0,    0,    0,  358,  359,  360,  410,  181,  182,
  674,    0,    0,    0,    0,  566,    0,  567,  411,    0,
    0,    0,    0,    0,    0,    0,  408,  361,  362,  412,
  413,  414,  363,  364,  415,  416,  409,  417,    0,    0,
    0,    0,  418,  419,    0,  420,  421,  422,  568,    0,
  358,  359,  360,  410,  181,  182,    0,    0,    0,    0,
    0,    0,    0,    0,  411,  569,    0,    0,    0,    0,
    0,    0,    0,  361,  362,  412,  413,  414,  363,  364,
  415,  416,    0,  417,    0,  399,    0,  570,  418,  419,
    0,  420,  421,  422,  400,    0,    0,    0,    0,    0,
    0,    0,  186,    0,    0,    0,    0,    0,  401,    0,
    0,    0,    0,    0,  356,  402,    0,    0,    0,    0,
    0,    0,  571,  572,    0,    0,    0,    0,    0,    0,
  425,  399,    0,  423,    0,  424,    0,    0,    0,  573,
  400,    0,    0,    0,    0,  403,    0,    0,  426,    0,
    0,    0,    0,  254,  401,    0,    0,    0,    0,    0,
  356,  402,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  357,    0,  404,  405,    0,  425,    0,    0,  423,
    0,  424,    0,    0,    0,  406,  219,    0,    0,  407,
  219,  403,    0,    0,  426,    0,    0,    0,    0,  254,
    0,    0,    0,    0,    0,  219,    0,    0,    0,  219,
    0,    0,  219,    0,    0,    0,    0,    0,    0,  404,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  406,    0,    0,    0,  407,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  408,  219,    0,    0,    0,    0,    0,  219,
  219,  219,  409,  219,  219,  219,    0,  219,    0,    0,
    0,    0,    0,    0,    0,    0,  358,  359,  360,  410,
  181,  182,    0,    0,    0,    0,    0,  219,    0,  219,
  411,    0,    0,    0,    0,    0,    0,    0,  408,  361,
  362,  412,  413,  414,  363,  364,  415,  416,  409,  417,
    0,    0,    0,    0,  418,  419,    0,  420,  421,  422,
  219,    0,  358,  359,  360,  410,  181,  182,    0,    0,
    0,    0,    0,    0,    0,    0,  411,  219,    0,    0,
    0,    0,    0,    0,    0,  361,  362,  412,  413,  414,
  363,  364,  415,  416,    0,  417,    0,  399,    0,  219,
  418,  419,    0,  420,  421,  422,  400,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  401,    0,    0,    0,    0,    0,  356,  402,    0,    0,
    0,    0,    0,    0,  219,  219,    0,    0,    0,    0,
    0,    0,  425,  399,    0,  423,    0,  424,    0,    0,
    0,  219,  400,    0,    0,    0,    0,  403,    0,    0,
  426,    0,    0,    0,    0,  254,  401,    0,    0,    0,
    0,    0,  356,  402,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  404,  405,    0, 1660,    0,
    0,  423,    0,  424,    0,    0,    0,  406,  132,    0,
    0,  407,  132,  403,    0,    0,  426,    0,    0,    0,
    0,  254,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  132,    0,    0,  132,    0,    0,    0,    0,    0,
    0,  404,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  406,    0,    0,    0,  407,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  408,  132,    0,    0,    0,    0,
    0,  132,  132,  132,  409,  132,  132,  132,    0,  132,
    0,    0,    0,    0,    0, 1089,    0,    0,  358,  359,
  360,  410,  181,  182, 1264,    0,    0,    0,    0,  132,
    0,  132,  411,    0,    0,    0,    0,    0,    0,    0,
  408,  361,  362,  412,  413,  414,  363,  364,  415,  416,
  409,  417,    0,    0,    0,    0,  418,  419,    0,  420,
  421,  422,  132,    0,  358,  359,  360,  410,  181,  182,
    0,    0,    0,    0,    0,    0,    0,    0,  411,  132,
    0,    0,    0,    0,    0,    0,    0,  361,  362,  412,
  413,  414,  363,  364,  415,  416,    0,  417,    0,  399,
    0,  132,  418,  419,    0,  420,  421,  422,  400,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  401,    0,    0,    0,    0,    0,  356,  402,
    0,    0,    0,    0,    0,    0,  132,  132,    0,    0,
    0,    0,    0,    0,  425,  399,    0,  423,    0,  424,
    0,    0,    0,  132,  400,    0,    0,    0,    0,  403,
    0,    0,  426,    0,    0,    0,    0,  254,  401,    0,
    0,    0,    0,    0,  356,  402,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,  405,    0,
  924,    0,    0,  924,    0,  924,    0,    0,    0,  406,
    0,    0,    0,  407,    0,  403,    0,    0,  924,    0,
    0,    0,    0,  924,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  357,    0,  404,  405,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  406,    0,    0,    0,  407,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  408,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  409,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1277,    0,    0,
  358,  359,  360,  410,  181,  182,    0,    0,    0,    0,
    0,    0,    0,    0,  411,    0,    0,    0,    0,    0,
    0,    0,  408,  361,  362,  412,  413,  414,  363,  364,
  415,  416,  409,  417,    0,    0,    0,    0,  418,  419,
    0,  420,  421,  422,    0,    0,  358,  359,  360,  410,
  181,  182,    0,    0,  759,    0,    0,    0,    0,    0,
  411,    0,    0,    0,    0,  783,    0,    0,    0,  361,
  362,  412,  413,  414,  363,  364,  415,  416,    0,  417,
    0,  399,    0,    0,  418,  419,    0,  420,  421,  422,
  400,    0,    0,    0,    0,  759,    0,    0,  759,    0,
    0,    0,    0,    0,  401,    0,  783,    0,    0,  783,
  356,  402,    0,  759,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  783,    0,    0,  924,    0,    0,
    0,    0,    0,    0,    0,    0,  924,    0,    0,    0,
    0,  403,  762,    0,    0,    0,    0,    0,  760,    0,
  924,    0,    0,    0,    0,    0,  924,  924,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  404,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  406,    0,  762,    0,  407,  762,  924,    0,  760,
    0,    0,  760,    0,    0,    0,    0,    0,    0,    0,
    0,  762,    0,    0,    0,    0,    0,  760,    0,    0,
    0,    0,    0,    0,    0,  924,  924,    0,    0,    0,
    0,    0,    0,    0,    0,  761,    0,  924,    0,    0,
    0,  924,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  408,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  409,    0,
    0,    0,    0,    0,    0,    0,  761,    0,    0,  761,
    0,    0,  358,  359,  360,  410,  181,  182,    0,    0,
    0,    0,    0,    0,  761,    0,  411,    0,    0,    0,
    0,    0,    0,    0,  924,  361,  362,  412,  413,  414,
  363,  364,  415,  416,  924,  417,    0,    0,    0,  791,
  418,  419,    0,  420,  421,  422,  759,    0,  924,  924,
  924,  924,  924,  924,    0,    0,    0,  783,    0,    0,
    0,    0,  924,    0,    0,    0,    0,    0,    0,    0,
    0,  924,  924,  924,  924,  924,  924,  924,  924,  924,
  791,  924,    0,  791,    0,    0,  924,  924,    0,  924,
  924,  924,    0,    0,    0,    0,    0,    0,  791,    0,
    0,    0,  755,  759,    0,    0,  759,    0,    0,    0,
    0,    0,    0,  759,  783,    0,  759,  783,    0,    0,
  759,    0,    0,    0,  783,  759,    0,  783,  759,    0,
    0,  783,    0,    0,  762,    0,  783,    0,    0,  783,
  760,    0,    0,  755,  759,    0,  755,    0,    0,    0,
    0,    0,  756,    0,    0,  783,    0,    0,    0,    0,
    0,  755,    0,    0,    0,    0,    0,    0,  759,    0,
    0,  759,  759,    0,    0,    0,    0,    0,    0,  783,
    0,  759,  783,  783,    0,  757,    0,    0,    0,    0,
    0,  762,  783,  756,  762,    0,  756,  760,  759,    0,
  760,  762,    0,    0,  762,    0,    0,  760,  762,  783,
  760,  756,    0,  762,  760,    0,  762,  761,    0,  760,
  759,    0,  760,    0,    0,  759,  757,    0,    0,  757,
    0,  783,  762,    0,    0,    0,  783,  759,  760,  759,
    0,    0,    0,    0,  757,    0,    0,    0,  783,    0,
  783,    0,    0,    0,    0,    0,  762,    0,    0,  762,
  762,    0,  760,    0,    0,  760,  760,    0,    0,  762,
    0,    0,    0,    0,  761,  760,    0,  761,    0,  790,
    0,    0,    0,    0,  761,    0,  762,  761,    0,    0,
    0,  761,  760,    0,    0,    0,  761,    0,    0,  761,
  784,  791,    0,    0,    0,    0,    0,    0,  762,    0,
    0,    0,    0,  762,  760,  761,    0,    0,    0,  760,
  790,    0,    0,  790,    0,  762,    0,  762,    0,  792,
    0,  760,    0,  760,    0,    0,    0,    0,  790,  761,
    0,  784,  761,  761,  784,    0,    0,    0,    0,    0,
    0,    0,  761,    0,    0,    0,    0,    0,  791,  784,
    0,  791,    0,  793,  755,    0,    0,    0,  791,  761,
  792,  791,    0,  792,    0,  791,    0,    0,    0,    0,
  791,    0,    0,  791,    0,    0,    0,    0,  792,    0,
    0,  761,    0,    0,    0,    0,  761,    0,    0,  791,
    0,    0,    0,    0,  793,    0,    0,  793,  761,    0,
  761,    0,    0,    0,  756,    0,    0,    0,    0,    0,
    0,  755,  793,  791,  755,    0,  791,  791,    0,    0,
    0,  755,    0,    0,  755,    0,  791,    0,  755,    0,
    0,    0,    0,  755,    0,    0,  755,  757,    0,    0,
    0,    0,    0,  791,    0,    0,    0,    0,    0,  781,
    0,    0,  755,    0,    0,    0,    0,    0,    0,    0,
    0,  756,    0,    0,  756,  791,    0,    0,    0,    0,
  791,  756,    0,    0,  756,    0,  755,    0,  756,  755,
  755,    0,  791,  756,  791,    0,  756,    0,    0,  755,
  781,    0,    0,  781,  757,    0,    0,  757,    0,  785,
    0,    0,  756,    0,  757,    0,  755,  757,  781,    0,
    0,  757,    0,    0,    0,    0,  757,    0,    0,  757,
    0,    0,    0,    0,    0,    0,  756,    0,  755,  756,
  756,  790,    0,  755,    0,  757,    0,    0,    0,  756,
  785,    0,    0,  785,    0,  755,    0,  755,    0,    0,
    0,    0,  784,    0,    0,    0,  756,    0,  785,  757,
    0,    0,  757,  757,    0,    0,    0,    0,    0,    0,
    0,    0,  757,    0,    0,    0,  794,    0,  756,    0,
    0,  792,    0,  756,    0,    0,    0,    0,  790,  757,
    0,  790,    0,    0,    0,  756,    0,  756,  790,    0,
    0,  790,    0,    0,    0,  790,    0,    0,    0,  784,
  790,  757,  784,  790,    0,  793,  757,  794,    0,  784,
  794,    0,  784,    0,    0,    0,  784,    0,  757,  790,
  757,  784,    0,    0,  784,  794,    0,    0,  792,    0,
    0,  792,    0,    0,    0,    0,    0,    0,  792,    0,
  784,  792,    0,  790,    0,  792,  790,  790,    0,    0,
  792,    0,    0,  792,    0,    0,  790,    0,    0,    0,
    0,    0,  793,    0,  784,  793,    0,  784,  784,  792,
    0,    0,  793,  790,    0,  793,    0,  784,    0,  793,
    0,    0,    0,    0,  793,    0,    0,  793,    0,    0,
    0,    0,    0,  792,  784,  790,  792,  792,    0,    0,
  790,  781,    0,  793,    0,    0,  792,    0,  782,    0,
    0,    0,  790,    0,  790,    0,  784,    0,    0,  786,
    0,  784,    0,  792,    0,    0,    0,  793,    0,    0,
  793,  793,    0,  784,    0,  784,    0,    0,    0,    0,
  793,    0,    0,    0,    0,  792,    0,    0,    0,  782,
  792,  785,  782,    0,    0,    0,    0,  793,  781,    0,
  786,  781,  792,  786,  792,    0,    0,  782,  781,    0,
    0,  781,    0,    0,    0,  781,    0,    0,  786,  793,
  781,    0,    0,  781,  793,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  793,    0,  793,  781,
    0,    0,    0,    0,    0,    0,    0,    0,  785,    0,
    0,  785,    0,    0,    0,    0,    0,    0,  785,    0,
    0,  785,    0,  781,    0,  785,  781,  781,  794,    0,
  785,    0,    0,  785,    0,    0,  781,    0,    0,    0,
    0,    0,    0,  684,  682,    0,  683,    0,  685,  785,
    0,    0,    0,  781,    0,    0,    0,    0,    0,    0,
    0,  850,  849,  851,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  785,    0,  781,  785,  785,    0,    0,
  781,    0,    0,    0,    0,  794,  785,    0,  794,    0,
    0,    0,  781,    0,  781,  794,    0,    0,  794,    0,
    0,    0,  794,  785,    0,    0,    0,  794,    0,    0,
  794,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  785,  794,    0,    0,  306,
  785,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  785,    0,  785,    0,    0,    0,    0,    0,
  794,    0,    0,  794,  794,    0,    0,    0,    0,    0,
  306,    0,    0,  794,    0,    0,    0,  306,    0,    0,
  782,  306,  306,    0,  306,    0,    0,  306,    0,    0,
  794,  786,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  306,    0,    0,    0,    0,    0,  306,    0,    0,
    0,    0,  794,    0,    0,    0,    0,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  794,
    0,  794,    0,    0,    0,    0,    0,  782,    0,    0,
  782,    0,    0,    0,    0,    0,    0,  782,  786,    0,
  782,  786,    0,    0,  782,    0,    0,    0,  786,  782,
    0,  786,  782,    0,    0,  786,    0,  306,    0,    0,
  786,    0,    0,  786,    0,    0, 1356,    0,  782,    0,
    0,    0,    0,  837,    0,    0,  306,    0,    0,  786,
    0,  680,    0,    0,    0,    0,    0,  681,    0,    0,
  838,  306,  782,    0,    0,  782,  782,    6,    0,    0,
    0,  306,    0,  786, 1471,  782,  786,  786, 1472, 1473,
  306, 1474,  306,    0, 1475,    0,  786,    0,    0,  306,
    0,    0,  782,    0,    0,    0,  839,    0, 1476,    0,
    0,    0,    0,  786, 1477,  840,    0,    0,    0,    0,
    0,    0,    0,  841,  782,    0,    0,    0,  306,  782,
    0,    0,    0,    0,    0,  786,    0,    0,    0,    0,
  786,  782,  842,  782,  843,    0,    0,    0,    0,    0,
    0,    0,  786,    0,  786,    0,    0,    0,  844,    0,
  845,  846,  847,    0,    0,    0,    0,  137,    0,    0,
    0,    0,    0,    0, 1478,    0,  138,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,    0,   14,  154,  155,  156,  157,    0,  158,
    0,    0,  159,  160,    0,    0,    0,    0, 1479,    0,
    0,  848,    0,    0,    0,    0,    0,    0,   16,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  530, 1480,
    0,    0,    0,    0,    0,    0,  474,  138,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,    0,    0,  154,  155,  156,  157,  442,
  158,    0,    0,  159,  160, 1481,    0,    0,    0,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,    0,    0,  442,  442,  442,  442,
    0,  442,    0,    0,  442,  442,
};
static short yycheck[] = {                                      16,
   58,   49,    4,  128,    4,   59,   50,    0,   99,   51,
   57,  289,  232,  232,  117,  118,  478,   58,   62,  117,
  118,  329,   64,  333,  333,  325,   80,  718,  484,  513,
  301,  303,  516,   68,  671,   65,   84,  522,  522,  981,
   67,   85,  262,  460,  988,  674,  988,  351,   92,  981,
  108,  240,  110,  726,  602,   90,  988,  657,   88,  134,
  249,   78,   89,  918,  989,   83,  981,  109,  389,  614,
   87,  616,  981,  988,    0, 1000,   45,  601,  339,  988,
   63,    0,  818,  282, 1160,  129,  177,  652,  130,   40,
   44,   40,   44,  935,   45,  608,   63,   44, 1023,  687,
   44,    0,  253,   86,  122,   41,  257,   44, 1247,    0,
   41,  262,   40,    0,  205,  715,  785,  164,  296,   40,
 1042,  666, 1041,    0,    0,  723,    0,    0,   41,   41,
    0,    0,   41,   59,  232, 1331,  817,  395,    0,   40,
   59,   44, 1116, 1400,  191,   40,  366,  366,   40,  287,
   41,   61,   42,   44,   40,   44,   40,  282, 1216, 1341,
   59,    0,   45,   58,  289,   40,   44,   41,   59,  274,
   44,   41,   59, 1109,  652, 1111,  234,   63,   44,   63,
 1341,   42,   59,   59,  492,   59,   59,   61,    0,   59,
   59,   42,  381,    0,  264,   44,  238,   59,  746,  499,
  500,  501,  502,   45,   45,  247,  302,  755,    0,   45,
  232,  247,  522,  522,   45,  290,  309,  356,  266,  480,
   59,   58,   63,   91,  282, 1017,  288,  321,  270,  691,
  302,  262,   41,  288,  268,   44,  326, 1341, 1197,  284,
  344,  549,  378,  258,  302,  301,  260,   59,  257,  272,
  554,  309,   59,  311,  525,  313,   59,  262,  316,  339,
  257, 1341,  810,    0,  389,  369,  289,   59,  366,  420,
    0,  260,  423,  424,  425,   41,  435,  877,   44,  326,
   59,  328,  406, 1227, 1036, 1227,  264, 1212,  772,  196,
  304,  335,  307,    0,  459, 1227,  343,  353,    0,  347,
  456,    0,  461,  345,  575,  870,  336,  852,  853,  406,
  337,  334, 1227,  449,   44,  390,  881,  882, 1227, 1377,
 1162,  486,   59,  427,  462,  463,  335,   93,  425,   59,
    0,  389,  366,  457,   41,  377,  380,   44,  335,  258,
  363,  431,  412,  437,  366, 1602,  388,  443,  438,  351,
  392,  395,   59,  277,  493,  397,  387,   59, 1213,  452,
   59,  397,  467,  443,  285,    0,    0,    0,  913, 1305,
  260,  443,    0,  264,  321,  264,  793, 1006,  285,  310,
 1562,    0,  387,   41,  258,    0,   44, 1526,  307,   59,
   44,  301,  870,  329,  269,  440,  332,  655,    0,  461,
  274, 1562, 1361,  881,  419,  436,  461,  430,  956,  277,
  319, 1109, 1608, 1111,  304,  635,  635,    0,  321,  258,
  332, 1173,  346, 1341,   59,   59,   59,  301, 1353,  418,
  321,   59, 1357,  307, 1359,  980,  310,  657,  541,   41,
   59, 1233,   44,  721,   59, 1043,  297,  384, 1117,  319,
  497,  999,    0,    0,  341,  644,  332,   59, 1562,  329,
 1434,  397,  332,  734,  522,  616,  737,  395,  307,  368,
  319,  341,  692, 1398,  321, 1397,   59, 1396, 1066,  341,
  751,  432, 1562,  461,  397,  397,  278, 1035,  280,    0,
  459,  368,  459,  437,   41,  715,   44,  544, 1340,  448,
  419,  453,  593, 1176, 1240,  459,  657,  778,  459,  660,
 1034,   59,   59,  712,  665,    0, 1153,  486,  388,  670,
  671,  397,  329, 1160,  397,  332,  830,  397,  679,  455,
  681,  682,  683,  684,  685, 1048,  687,  635,  412, 1464,
  461,  692,  600, 1468, 1620,  419,  807,    0,   59,  821,
  597,  598,  554, 1222,  875,  733,   41, 1412, 1239,  542,
  461, 1126,  453,  437,  715,  441,  461,  273,  441,  461,
  461,  441,  441,  459,   59,  459,  459,  455,  636,  455,
  419,    0,  455, 1508, 1660,  455,  455,  712,   41,  455,
  397,  432,  329,  467,  697,  332,  721,  471,  410,  329,
  461,  432,  332,  412, 1529,   41,   59,  609,  411,  609,
  461,  655,  519,  635,  344, 1407,  274,  459,  459,  461,
 1372,   41,   41,  459,  461,   44,  729,  730,  459,  264,
  264,  259,  411,  357,  441, 1264,  264, 1182,   41, 1489,
   59,  659,  270, 1395, 1562,  264,  453,  349,  455,  264,
  349,  305,  310,   42,  712, 1200,  418,  877,   47,  717,
  397,  273,    0,    0,  706,  723,  708,  397,  968,    0,
  859,  341, 1616,  862, 1616, 1348, 1601,  384,  725,  726,
 1605,  264,  589,  445, 1616,  743,  837,  838,  839,    0,
 1238,  842,  843,  844,  262,  846,  847,  848,  849,  850,
  851, 1616,   41, 1303,  441,  260,  430, 1616,    0,   12,
  343,  441,  388,  771,  772,  986,   41,  319,  455,   44,
  758,   59,   59,  453, 1649,  455,  877,  998,   59,  341,
  332,    0,    0,  884,  885,   12,  887, 1037,  889,  341,
  265,  892,  893,  894,  895,  896,  897,   41,   59,  732,
  875, 1022,    0,   41,  412,   41,   44,  832,  909,  834,
  911,  981,  981,  398,  398,  441,  808,   59,  988,  988,
  398,   59,  319,  406, 1046,  777,  409,  819,  303,  398,
  403,  329,  406,  398,  332,  332,  388,  770,  790,    0,
   59,   59,  425,    0,  341,  397,  344, 1342,  308,  309,
  461,  260,    0,  403,   59,    0,    0,  302, 1225,  467,
 1447,   59,  115,  338, 1231,  398,  860,  875,  451,  387,
  803,  804,  805, 1673, 1309,  353,  262, 1642,  830,  864,
    0,  861,  343,  457,  319,  435,  863,    0,  115,  441,
    0,  388,  262,   41,  339,  304,   41,   16,   59,  397,
  397,  379,   59,  455, 1704, 1705,  341, 1129,  461,  262,
  349,   59,    0,  418,   59,   59,  319,  378,  436, 1684,
 1561,  320,  398,  403,   44,  260,  329,  349, 1728,  332,
  461,   41,  308,  309,   44, 1192,  358, 1610,  341,   59,
    0,  280, 1742,  441,  441,  406,   59,  286,  409,   59,
  319,   61, 1717,  388, 1360,  453,    0,  455,  455,   78,
  329,  437,  397,  332,  425, 1066,  446, 1020,  378,  304,
    0,   59,  341,  262,  284,  344,  264, 1078, 1079, 1385,
 1081, 1082,    0,  264, 1241,  388, 1244,  461, 1089, 1210,
  451,  278,  452,  280,  397,  471,  329,   41,  443,   59,
   44,  387,  401,  264,  992,  993,  441,   42,   43,  419,
   45,   41,   47, 1686,   44,   59,   40,  387,  262,  388,
  455,   45,  264,  462,  463, 1246,  262, 1559,  397,   59,
  461, 1039, 1133, 1620,  387, 1043, 1470, 1449,  441,   63,
 1141,   59, 1143,  442,  302, 1146, 1719, 1148,   44, 1309,
 1309, 1152, 1153, 1154, 1155, 1043,  466, 1227, 1227, 1160,
 1622,    0, 1014,    0, 1014, 1560,  461, 1115, 1116, 1117,
  308,  309,  441, 1660, 1349,  385,  452,  278,  418,  263,
 1143,  339, 1577, 1146,  453, 1580, 1161, 1344, 1652,  410,
  258,    0,  379,  261, 1195, 1345, 1029,   93,  387,    0,
    0,  319,   41,  264,   41,  445,    0,  264,  288,  302,
  398,  444, 1045, 1341,  461, 1647,  338,  398, 1051,  320,
   59,  301,   59,  341, 1399, 1178,    0, 1180,  461,  313,
  440,   40,   41, 1303,  278,   44,  280,  398, 1700,  307,
  324,   44, 1363,  387,  329,  343,  339,  457,  258,  258,
   59,  387,   61,  375, 1718,  461,  398, 1689,   59,   59,
 1261,   44, 1724, 1115, 1116,   59,  388,  277,  278, 1270,
  280,  319, 1736,  411,  319,  285, 1277,   45,  288, 1176,
  378, 1402,   91,  379,  329,   59,  265,  332, 1600, 1242,
   93,  301,   44,  341,  459,   63,  341,  307,  307,  319,
  401,  461, 1303,    0, 1374,  401,  319,   59,  406, 1142,
   93,  409,  408,  280,  452,  408,  317,  318,  403,  286,
  279,  341, 1323,    0,  303,  418, 1327,  425,  341,  459,
   44,  461,   41,   42,   43,    0,   45,  398,   47, 1651,
  388,  442,    0,  388,  428,  280,  442,   44, 1743,  397,
  443,  286,  397,  451,  439,  343,    0, 1254, 1515,  444,
 1323, 1258,   59,    0, 1327,  450, 1341, 1524, 1220,  379,
 1220,  330,  296, 1374,  261,  319,  461,  312,  322,   93,
    0, 1356,   59,   41,  469,  329,   44,  459,  332,  319,
  378,  401,  336,  441,   59,    0,  441,  341,  408,  329,
  344,   59,  332,   61, 1525,  364,  260,  417,  453,  419,
  419,  341,  323,  344,  344,   59,  360,  323,  406, 1420,
 1421,  409,   59,  382,   44,  343,  461,  437,  437,  353,
    0,  260,  442,   91, 1562,  494,  495,  425,  369,   59,
  384,  402,   41, 1444,  388,   44, 1447, 1355, 1356,  258,
  304, 1348,  322,  397,   59,  461, 1584,    0,  388,    0,
  378,  471,  471,  451, 1355,  274,  336,  397,  277,  278,
  414,  280, 1364,  302,  344,   40,  285, 1478,  260,  288,
  319, 1444,  319,    0,  384,  314, 1434,  384,  406,   59,
  360,  409,  301,    0, 1622,  332,  427,  441,  307,   40,
   41,  310,  341,   44,  341,  322,   44,  425,  386,  453,
  339,  441, 1465,  384, 1489,    0,   59,  461,   59,  336,
   61,  259,  304,  453,  444,    0,  384,  344,  296, 1530,
  461,    0,  270,  451,  458,  459,  460, 1538,  462,  463,
 1668,  461,   59,  360,  414, 1644, 1616, 1616,  495,  388,
   91,  388,   59,  466,    0,  468,   41,  481,  482,   44,
  397,  404,  486,  487,   42,   43, 1507,   45, 1472,   47,
  379,  280, 1700, 1574,   59,  259,   61,  286,  421,  408,
 1584, 1489, 1434, 1682,   59,  353,  270, 1562, 1440,  418,
   59,  322,  401,  322,  462,  463, 1724,  414,   44,  408,
  258,    0,  441,  412,  441,  336,   91,  336,  338, 1584,
  419, 1503,    0,   59,  443,    0,  274, 1716, 1622, 1620,
  278,    0,  280,    0,  357,  392,  393,  285,  437,  360,
  288,  360, 1475,  442, 1531, 1734,   42,   43, 1535,   45,
    0,   47,   41,  301,  419,   44,  461, 1622,    0,  307,
  462,  463,  310,   41, 1595,  384,   44,  214,  467, 1660,
   59,  394,  471,  396, 1668,  222,  688,   42,   43,    0,
   45,   59,   47,   61,   59,    0,    0,  719,  720, 1573,
   59,   41,   59,  414,   44,  414,  419,    0,  274,  711,
  458,  459,  460, 1668,  462,  463, 1700,  319, 1673,   59,
  722,   61,  322,   91,   41,   42,   43,   59,   45,  329,
   47,  444,  332,  481,  482,    0,  336,  258,  486,  487,
 1724,  379,    0,   40,  344, 1700, 1630,  425,   59, 1704,
 1705,   91, 1599,  274,   59,   59,  277,  278,  462,  280,
  360,  338,    0,  401,  285,  264,   59,  288, 1615, 1724,
  408,    0,    0, 1728,  412,    0,   41,  317,  319,   44,
  301,  419,  338,  337,  384, 1673,  307, 1742,  461,  310,
  453,    0,    0,  258,   59, 1642,   61,  397,  375,  437,
 1632,   59, 1632,    0,  442,  403, 1653,    0,    0,  274,
  322,  388,  277,  278,  414,  280, 1704, 1705, 1696,  419,
  285,   59,  280,  288,  336,  341,  321,   40,  286,  467,
   59,   59,   41,  471,   59,   44,  301, 1684,  319,  265,
 1728,  441,  307,  403,   41,  310, 1693,   44,  360,   41,
   59,   59,   44,  453, 1742,  455,   42,   43,  379,   45,
  403,   47,   59,  321,    0,    0,   59,   59,   41,   61,
 1717,   44,  384,    0,  384,   41,   41,  303,   44,   44,
  401,   41,  384,   41,   44,    0,   44,  408,  437,   41,
  258,  412,   44,  319,  280,  362,  439,  435,  419,  278,
  286,  280,  414,  451,  461,   41,  274,  450,   44,  288,
  278,  418,  280,  443,  379,  341,  437,  285,  258,  358,
  288,  442,  301,   59,   59,  280,   41,   93,  288,   44,
  412,  286,   59,  301,  274,  321,  401,  470,  278,  307,
  280,   44,  310,  408,   59,  285,  467,  412,  288,   41,
  471,    0,   44,  656,  419,  658,  264,  312,  661,  662,
  663,  301,   41,  280,   61,   44,  373,  307,  279,  286,
  310,  287,  437,  264,   41,   42,   43,  442,   45,   40,
   47,   41,   42,   43,    0,   45,   41,   47,   41,   44,
  301,   44,   41,  258,   40,   44,  462,   41,   42,   43,
  379,   45,  467,   47,   41,   41,  471,   44,   44,  462,
   59,  379,  277,  278,   41,  280,  462,   44,   41,  330,
  285,   44,  401,  288,   41,   41,   44,   44,   44,  408,
  461,   41,    0,  401,   44,  437,  301,  321,  349,  379,
  408,   44,  307,   59,  412,  403,  357,  358,   40,   40,
   40,  419,  461,  364,   42,   43,   44,   45,   40,   47,
   40,  401,   40,  442,   40,   40,  258,   40,  408,  437,
   40,  382,  412,   41,  442,   40,   44,   40,    0,  419,
   40,  321,  343,  394,   91,  396,  278,   46,  280,   44,
   44,   59,  429,  285,  280,   46,  288,  437,   40,  467,
  286,  280,  442,  471,   61,   44,   46,  383,  419,  301,
  349,   44,  301,  264,  379,  307,  278,  378,   40,   41,
   42,   43,   44,   45,   46,   47,  262,  467,  278,  398,
  461,  471,  471,  444,  437,  398,  401,   59,   60,   61,
   62,  459,  448,  408,  279,  406,  277,  448,  409,   41,
   42,   43,  279,   45,  419,   47,   41,   42,   43,  400,
   45,   40,   47,  278,  425,  280,  301,  350,   40,   91,
   91,   93,  437,  288,  301,   40,   40,  442,   41,   42,
   43,  319,   45,  319,   47,  384,  322,  379,  264,  412,
  451,   44,  390,  329,   40,  330,  332,   40,  383,  465,
  336,  437,  318,  330,   40,  341,  471,  321,  344,  401,
  458,  459,  460,  280,  349,    0,  408,  321,  452,  286,
  280,   41,  349,  358,  360,  449,  286,  419,  461,  364,
  461,  358,  453,  264,   40,  277,  280,  364,  486,  487,
    0,  459,  286,   40,  274,  437,  285,  382,  384,  301,
  442,  387,  388,  278,  345,  382,   41,   42,   43,   44,
   45,  397,   47,  345,  379,  387,   41,   42,   43,  384,
   45,  418,   47,  322,   59,   60,   61,   62,  414,  471,
  329,   41,  387,  332,   44,  387,  401,  336,  417,  419,
    0,  419,  280,  408,   40,  344,  301,  264,  286,   59,
  436,  357,    0,  319,   40,  441,  322,  461,   93,   40,
  278,  360,  280,  329,   44,  386,  332,  453,  274,  455,
  336,  368,   44,  321,   41,  341,  264,  442,  344,   44,
   44,   41,  321,  280,   44,  384,   42,   43,   40,   45,
  262,   47,  264,   41,  360,   44,   44,   44,  397,   59,
  272,  266,  329,   59,   40,  300,   40,  264,  280,  455,
  441,   59,  461,   41,  286,  414,  423,  289,  384,   41,
   42,   43,  388,   45,   41,   47,   58,   41,   41,   42,
   43,  397,   45,   41,   47,    0,  308,  309,  280,  264,
  312,  395,  441,  310,  286,  280,  310,  319,  414,  321,
  322,  286,   41,  325,  453,  493,  455,  329,   41,   40,
  332,  379,  334,   40,  336,   40,  353,  280,   40,  341,
  342,   40,  344,  286,   40,  441,   41,   42,   43,   44,
   45,   40,   47,  401,   40,   40,   40,  453,  360,  361,
  408,  363,   40,   40,   59,   60,   61,   62,   40,   40,
   40,   40,  262,  436,  328,  377,   44,  379,  380,  381,
  309,   41,  384,  389,  389,  387,  388,   42,   43,  389,
   45,  344,   47,  274,  442,  397,  332,  262,   93,  264,
   42,   43,  423,   45,  392,   47,  391,  272,  271,  411,
  288,  387,  414,  387,  447,  280,  408,  387,  387,  387,
  387,  286,  278,   41,  289,  280,   41,   40,  430,  379,
   41,  286,   42,   43,  436,   45,   41,   47,  278,  441,
  280,  418,    0,  308,  309,  285,   41,  312,  288,   59,
  452,  453,  386,  455,  319,  437,  321,  322,   41,  461,
  325,  301,  309,  436,  329,  397,  339,  332,  443,  334,
  302,  336,  443,  339,   45,  302,  341,  342,  386,  344,
   41,   41,  353,   41,   42,   43,   44,   45,  278,   47,
  280,   41,  372,  372,  280,  360,  361,   41,  363,   41,
  286,   59,   60,   61,   62,   41,   41,   41,   41,   41,
   41,   41,  377,   41,  379,  380,  381,   41,   41,  384,
   41,   41,  387,  388,   41,  280,   44,   40,  280,  341,
   59,   40,  397,   59,  286,   93,  341,  280,   41,  379,
   59,  319,  345,  286,  322,   59,  411,   59,  842,  414,
  844,  329,  846,  847,  332,  849,  850,  851,  336,   59,
   59,  401,  353,  341,  321,  430,  344,  262,  408,  264,
   41,  436,   40,  369,   59,  384,  441,  272,  341,   41,
   42,   43,  360,   45,  355,   47,   59,  452,  453,  379,
  455,  286,  461,   44,  289,  384,  461,  384,   41,   41,
   42,   43,  442,   45,   41,   47,  384,  262,   44,  387,
  388,  401,    0,  308,  309,   44,  436,  312,  408,  397,
  262,  302,  305,  411,  319,  280,  321,  322,  443,   41,
  325,  286,  344,   40,  329,   59,  414,  332,  280,  334,
  294,  336,  305,  464,  286,   44,  341,  342,   44,  344,
  308,   41,  442,   41,   42,   43,   44,   45,  436,   47,
    0,  384,  338,  441,  384,  360,  361,  264,  363,  260,
  280,   59,   60,   61,   62,  453,  286,  455,   40,  278,
  264,  390,  377,  459,  379,  380,  381,  321,  459,  384,
  461,  264,  387,  388,  412,   40,  471,  271,  452,  459,
  264,  472,  397,  310,  262,   93,  264,  437,  436,  344,
  459,  302,  344,  344,  272,  344,  411,  271,   41,  414,
  491,  461,   40,  314,   40,  296,   59,   41,  499,  500,
  501,  289,   41,   42,   43,  430,   45,  328,   47,   41,
   59,  436,  305,   44,   59,   41,  441,    0,  339,    0,
  308,  309,    0,    0,  312, 1112,    0,  452,  453,  249,
  455,  319,   12,  321,  322,  242,  461,  325,  644,  241,
  604,  329,    0, 1048,  332, 1046,  334,   82,  336, 1043,
  822, 1038,  353,  341,  342,  330,  344, 1386,  299,  294,
   41, 1027,   43,   44,   45,  287,  549,   41,  971,  717,
   44,  260,  360,  361, 1039,  363, 1571,  311,   59,   60,
   61,   62,  753,   41,  311,   59,   44,  408,  280,  377,
 1361,  379,  380,  381,  286, 1641,  384,  418, 1637,  387,
  388,   59, 1363,  527, 1640, 1193, 1677,  743,  280,  397,
 1727, 1589,   93,  302,  286, 1674, 1374, 1642,  304,  316,
  366,  297,  443,  411,  529,  314,  414,   41,   42,   43,
  800,   45, 1229,   47,  588,  792,   13,  706,  274,  462,
  461,  721,  430,  444,  262,  692,  264,  466,  436,  693,
  339,  935,  120,  441,  272, 1562, 1462,  458,  459,  460,
 1693,  462,  463, 1653,  452,  453, 1745,  455,  478,  878,
  651,  289, 1080,  461,  365, 1148,    0,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,    0,
  308,  309,   -1,   -1,  312,  496,  497,   -1,   -1,   -1,
   -1,  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,
   -1,  329,    0,   -1,  332,   -1,  334,   41,  336,  408,
   44,   -1,   46,  341,  342,   -1,  344,   -1,   -1,  418,
   41,   -1,   43,   44,   45,   59,   -1,   61,   -1,   -1,
   -1,  280,  360,  361,   -1,  363,   -1,  286,   59,   60,
   61,   62,   -1,   41,  443,   -1,   44,  295,    0,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,  306,  387,
  388,   59,  461,   -1,   -1,  313,   -1,   -1,   -1,  397,
   -1,  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   41,
  338,   -1,   44,   -1,  278,   -1,  280,   -1,  289,   41,
   42,   43,  430,   45,  288,   47,    0,   59,  436,   -1,
  278,   -1,  280,  441,   -1,  279,    0,  308,  309,   -1,
  288,  312,   -1,   -1,  452,  453,   -1,  455,  319,   -1,
  321,  322,   -1,  461,  325,   -1,   -1,  301,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,  403,  280,   41,   -1,   43,
   44,   45,  286,   -1,   -1,   59,  330,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,  349,  377,  435,  379,  380,
  381,  439,   -1,  384,  358,  379,  387,  388,   -1,   -1,
  364,   -1,  450,   -1,   -1,   -1,  397,   -1,   -1,   93,
   -1,  379,   -1,   -1,   -1,   -1,   -1,  401,  382,   -1,
  411,   -1,   -1,  414,  408,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  401,    0,   -1,   -1,   -1,   -1,  430,
  408,  262,   -1,  264,   -1,  436,  280,   -1,   -1,   -1,
  441,  272,   -1,   41,   42,   43,   -1,   45,  442,   47,
   -1,  452,  453,   -1,  455,   -1,   -1,   -1,  289,  303,
  461,  305,   -1,   -1,  442,   41,   -1,   -1,   44,   -1,
  278,   -1,  280,   -1,   -1,  319,    0,  308,  309,   -1,
  288,  312,   -1,   59,   -1,    0,   -1,   -1,  319,   -1,
  321,  322,   -1,  301,  325,   -1,   -1,  341,  329,    0,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,  278,   41,  280,   43,
   44,   45,   -1,  285,   -1,   -1,  288,   -1,  280,  360,
  361,   -1,  363,   -1,  286,   59,   60,   61,   62,  301,
   41,   -1,   -1,   44,   59,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,  258,   -1,  387,  388,   59,   -1,
   -1,    0,   -1,   -1,   -1,   -1,  397,   -1,  262,   93,
  264,  379,   -1,   -1,   -1,  279,   -1,   -1,  272,   -1,
  411,   -1,   -1,  414,  473,  474,  475,  476,  477,  478,
  479,  480,   -1,  401,   -1,  289,   -1,  301,   -1,  430,
  408,   -1,   -1,  307,   -1,  436,   -1,   -1,   -1,   -1,
  441,   -1,   -1,   -1,  308,  309,   -1,  379,  312,   -1,
   59,  452,  453,   -1,  455,  319,  330,  321,  322,   -1,
  461,  325,   -1,   -1,  442,  329,   -1,   -1,  332,  401,
  334,   -1,  336,   -1,   -1,  349,  408,  341,  342,   -1,
  344,   -1,   40,  357,  358,   43,   -1,   45,   -1,   -1,
  364,   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,  382,   -1,
  442,   -1,  280,  377,   -1,  379,  380,  381,  286,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  397,  280,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,  419,   -1,  411,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,  430,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,  430,   -1,  262,   -1,
  264,   -1,  436,  258,   -1,   -1,   58,  441,  272,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,  452,  453,
   -1,  455,   -1,   -1,  279,  289,   -1,  461,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,
   -1,   -1,   -1,   -1,  308,  309,  301,  288,  312,   -1,
   -1,   -1,  307,   -1,   -1,  319,   -1,  321,  322,   -1,
   -1,  325,   -1,  379,   40,  329,   42,   43,  332,   45,
  334,   -1,  336,   -1,   -1,  330,   -1,  341,  342,  258,
  344,   -1,   58,   -1,   -1,  401,   -1,   63,   -1,   -1,
   -1,   -1,  408,   -1,  349,   -1,  360,  361,   -1,  363,
  279,   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,  301,  387,  388,  295,  442,  382,  307,   -1,
   -1,   -1,   -1,  397,   -1,   -1,  306,   -1,  379,  267,
   -1,   -1,   -1,  313,   -1,   -1,   -1,  411,  276,   -1,
  414,  330,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  401,   -1,  290,   -1,  419,  293,  430,  408,  296,  297,
  349,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,  358,
   -1,   -1,   -1,   -1,   -1,  364,   -1,  315,  452,  453,
   -1,  455,   -1,   -1,   -1,   -1,   -1,  461,   -1,  327,
   -1,  442,   -1,  382,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  387,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,  403,   -1,   -1,   -1,   -1,  290,  367,
  419,   -1,    0,  371,  296,  297,   -1,   -1,   -1,   41,
  420,  379,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  435,   -1,   59,   -1,  439,
   -1,   -1,  442,   -1,   -1,  327,   -1,   -1,   -1,   -1,
  450,   -1,   -1,   41,  260,   -1,   44,   -1,   -1,   -1,
   -1,  267,   -1,   -1,  422,   -1,   -1,   -1,   -1,  469,
  276,   59,   -1,  355,  356,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,  367,  444,   -1,   -1,  371,
  296,  297,   -1,   -1,   -1,   -1,   -1,  379,  304,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,  418,   -1,  496,  497,
  422,  499,  500,  501,   -1,   -1,   -1,  353,   -1,  355,
  356,   40,  434,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,  367,  444,   -1,   -1,  371,   -1,    0,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   41,  491,
   -1,   44,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   40,  434,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  444,   -1,
  262,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,  319,   -1,   -1,
  322,   -1,   -1,   40,   -1,   -1,   43,  329,   45,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   58,  344,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,  360,   -1,
   -1,  329,   -1,   -1,  332,   -1,   -1,  306,  336,   -1,
   -1,   -1,   -1,  341,  313,   -1,  344,   -1,  317,  318,
   -1,   -1,  384,   -1,   -1,  387,  388,  326,   -1,   -1,
   -1,  260,  360,   -1,   -1,  397,   -1,   -1,  267,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,  384,   -1,   -1,   -1,
  388,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,  397,
   -1,   -1,   -1,   -1,  436,  304,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,   -1,  258,  414,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,  403,   -1,  279,   -1,   -1,   -1,
   -1,   -1,   -1,  441,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  420,   -1,  276,  353,  453,  355,  356,  301,   -1,
   -1,   -1,   -1,   -1,  307,   -1,  435,  290,  367,   -1,
  439,   -1,  371,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  450,   -1,   -1,   -1,   -1,   -1,  330,    0,   -1,
   -1,   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  469,   -1,   -1,   -1,  327,   -1,  349,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,  358,  263,   -1,   -1,   -1,
  267,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,  355,  356,   -1,  434,   -1,   -1,   -1,  382,
   -1,   -1,   -1,  290,  367,  444,   -1,   59,  371,  296,
  297,   -1,   40,   -1,   -1,   43,  379,   45,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,  472,   -1,   63,  419,   -1,   -1,   -1,
  327,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,  422,
  499,  500,  501,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  444,   -1,   -1,  371,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,  472,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,  472,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,  258,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,  301,
   -1,   -1,   -1,   -1,   -1,  307,   -1, 1262, 1263,   -1,
   -1,   -1,  290, 1268, 1269,   -1, 1271, 1272,  296,  297,
   -1,   -1,   -1,   -1, 1279, 1280, 1281, 1282,  330, 1284,
 1285, 1286, 1287, 1288, 1289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,  327,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  260,   -1,
   -1,  263,  364,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,  355,  356,   -1,
  382,   -1,  261,   -1,   -1,   -1,   -1,   -1,  290,  367,
   -1,   -1,   -1,  371,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,   -1,   -1,  419,   -1,  298,
   -1,  300,   -1,  302,   -1,  327,   -1,   -1,  307,   -1,
   -1,   -1,   -1,   -1,  260,  314,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  426,  328,
  276,   -1,   -1,  355,  356,   -1,  434,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  290,  367,  444,   -1,   -1,  371,
  296,  297,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,  472,   63,   -1,   -1,   -1,   -1,
   -1,  327,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,
   -1,  499,  500,  501,  426,   -1,   -1,  406,   -1,  355,
  356,   -1,  434,   -1,  413,   -1,   -1,  416,   -1,  418,
  419,  367,  444,   -1,   40,  371,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   58,   -1,  443,   -1,   -1,   63,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  426,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,  492,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,  313,  314,
   -1,  316,   -1,   -1,  319,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,  333,   -1,
   -1,  267,   -1,   -1,  339,   -1,   -1,   -1,   -1,   40,
  276,   -1,   43,   -1,   45,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   58,   -1,  367,
  296,  297,   63,  371,   -1,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  327,   -1,   -1,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,  418,   -1,   -1,   -1,   -1,  426,  355,
  356,   -1,   -1,   -1,   -1,   58,  434,   -1,  433,   -1,
   63,  367,   -1,   -1,   -1,  371,  444,   -1,  443,   -1,
  273,   -1,   -1,   -1,  277,   -1,   -1,  452,   -1,  454,
  458,  459,  460,  461,  462,  463,  461,   -1,   -1,  292,
   -1,   -1,   -1,  296,  472,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,  490,   -1,   -1,  496,  497,
  426,  499,  500,  501,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  444,   -1,
   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,
  496,  497,  263,  499,  500,  501,  267,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  407,  276,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   42,   43,  290,
   45,  424,   -1,   -1,   -1,  296,  297,  272,   -1,   -1,
   -1,   -1,   -1,   58,  302,  280,   -1,   -1,   63,   -1,
   -1,  286,   -1,  446,  289,  313,  314,   -1,  316,   -1,
   -1,  319,   -1,   -1,   -1,   -1,  327,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,  333,   -1,   -1,   -1,   -1,
   -1,  339,   -1,  276,   -1,   -1,   -1,   -1,  481,  482,
  325,   -1,   -1,   -1,  355,  356,   -1,  290,   -1,  334,
   -1,   -1,   -1,  296,  297,  498,  367,  342,   -1,   40,
  371,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  361,   58,  363,   -1,
   -1,   -1,   63,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,  399,  377,   -1,  379,  380,  381,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  418,   -1,  355,  356,   -1,  426,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  367,  433,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  444,   -1,  443,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  430,  454,  458,  459,  460,
  461,  462,  463,  461,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  490,  426,   -1,  496,  497,   -1,  499,  500,
  501,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  273,  444,  267,   -1,  277,   -1,   -1,   -1,   -1,   -1,
   -1,  276,  285,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,  296,   -1,  290,  299,   -1,   -1,  472,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,
   -1,   -1,  327,   -1,   -1,   -1,   -1,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,  267,   -1,  353,   -1,
  355,  356,   -1,   -1,   40,  276,   42,   43,   -1,   45,
   -1,  374,  367,  376,   -1,   -1,  371,   -1,   -1,  290,
   -1,   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,  327,   -1,   -1,   -1,
   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,  353,  446,  355,  356,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  461,   -1,
  371,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,  481,  482,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  498,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  418,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
  273,   -1,   -1,  444,  277,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,  296,   -1,   -1,  299,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  267,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,
  276,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  374,   -1,  376,   -1,   -1,   40,  267,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
  290,   -1,   -1,   -1,  407,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,  304,   -1,   -1,  353,   -1,  355,
  356,  424,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,  367,  273,   -1,   -1,  371,  277,  327,   -1,   -1,
   58,   -1,   -1,  446,   -1,   63,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  481,  482,
   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  498,   -1,   -1,  434,  340,
   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  444,  350,
  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,  407,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,  267,   -1,  446,  496,  497,   -1,  499,
  500,  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   40,  267,
   -1,   43,   -1,   45,   -1,   -1,   -1,  498,  276,   -1,
   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   40,   41,   -1,   43,   -1,   45,
   -1,   -1,   -1,  367,  273,   -1,   -1,  371,  277,  327,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,
  444,  350,  351,  352,   -1,  354,   -1,   -1,  452,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
  418,   -1,   -1,   -1,   -1,  374,   -1,  376,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  444,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,  407,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,  267,   -1,  446,  496,  497,
   -1,  499,  500,  501,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,
   40,  267,   -1,   43,   -1,   45,   -1,   -1,   -1,  498,
  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  355,  356,   -1,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,  367,  273,   -1,   -1,  371,
  277,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,  346,
  347,  348,  444,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  444,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  407,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,  267,   -1,  446,
  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  267,   -1,   43,   -1,   45,   -1,   -1,
   -1,  498,  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,  367,  273,   -1,
   -1,  371,  277,  327,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,
   -1,  346,  347,  348,  444,  350,  351,  352,   -1,  354,
   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,  459,
  460,  461,  462,  463,  418,   -1,   -1,   -1,   -1,  374,
   -1,  376,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,  407,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,  267,
   -1,  446,  496,  497,   -1,  499,  500,  501,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,
   -1,   -1,   -1,  498,  276,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,  327,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,
   -1,  499,  500,  501,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  267,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  276,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   41,   -1,   -1,   44,
  296,  297,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  327,    0,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   41,   -1,  371,   44,  327,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,    0,
  496,  497,   -1,  499,  500,  501,  262,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   41,  491,   -1,   44,   -1,   -1,  496,  497,   -1,  499,
  500,  501,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,    0,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  329,  319,   -1,  332,  322,   -1,   -1,
  336,   -1,   -1,   -1,  329,  341,   -1,  332,  344,   -1,
   -1,  336,   -1,   -1,  262,   -1,  341,   -1,   -1,  344,
  262,   -1,   -1,   41,  360,   -1,   44,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  360,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,  397,  387,  388,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  319,  397,   41,  322,   -1,   44,  319,  414,   -1,
  322,  329,   -1,   -1,  332,   -1,   -1,  329,  336,  414,
  332,   59,   -1,  341,  336,   -1,  344,  262,   -1,  341,
  436,   -1,  344,   -1,   -1,  441,   41,   -1,   -1,   44,
   -1,  436,  360,   -1,   -1,   -1,  441,  453,  360,  455,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  319,  397,   -1,  322,   -1,    0,
   -1,   -1,   -1,   -1,  329,   -1,  414,  332,   -1,   -1,
   -1,  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,
    0,  262,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,
   -1,   -1,   -1,  441,  436,  360,   -1,   -1,   -1,  441,
   41,   -1,   -1,   44,   -1,  453,   -1,  455,   -1,    0,
   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   59,  384,
   -1,   41,  387,  388,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,   59,
   -1,  322,   -1,    0,  262,   -1,   -1,   -1,  329,  414,
   41,  332,   -1,   44,   -1,  336,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,   59,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,  360,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,  453,   -1,
  455,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   59,  384,  322,   -1,  387,  388,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  262,   -1,   -1,
   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,   -1,  322,  436,   -1,   -1,   -1,   -1,
  441,  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,
  388,   -1,  453,  341,  455,   -1,  344,   -1,   -1,  397,
   41,   -1,   -1,   44,  319,   -1,   -1,  322,   -1,    0,
   -1,   -1,  360,   -1,  329,   -1,  414,  332,   59,   -1,
   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,  436,  387,
  388,  262,   -1,  441,   -1,  360,   -1,   -1,   -1,  397,
   41,   -1,   -1,   44,   -1,  453,   -1,  455,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,  414,   -1,   59,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   -1,    0,   -1,  436,   -1,
   -1,  262,   -1,  441,   -1,   -1,   -1,   -1,  319,  414,
   -1,  322,   -1,   -1,   -1,  453,   -1,  455,  329,   -1,
   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,  319,
  341,  436,  322,  344,   -1,  262,  441,   41,   -1,  329,
   44,   -1,  332,   -1,   -1,   -1,  336,   -1,  453,  360,
  455,  341,   -1,   -1,  344,   59,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  360,  332,   -1,  384,   -1,  336,  387,  388,   -1,   -1,
  341,   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,
   -1,   -1,  319,   -1,  384,  322,   -1,  387,  388,  360,
   -1,   -1,  329,  414,   -1,  332,   -1,  397,   -1,  336,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,
   -1,   -1,   -1,  384,  414,  436,  387,  388,   -1,   -1,
  441,  262,   -1,  360,   -1,   -1,  397,   -1,    0,   -1,
   -1,   -1,  453,   -1,  455,   -1,  436,   -1,   -1,    0,
   -1,  441,   -1,  414,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   41,
  441,  262,   44,   -1,   -1,   -1,   -1,  414,  319,   -1,
   41,  322,  453,   44,  455,   -1,   -1,   59,  329,   -1,
   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   59,  436,
  341,   -1,   -1,  344,  441,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  384,   -1,  336,  387,  388,  262,   -1,
  341,   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,  360,
   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,  436,  387,  388,   -1,   -1,
  441,   -1,   -1,   -1,   -1,  319,  397,   -1,  322,   -1,
   -1,   -1,  453,   -1,  455,  329,   -1,   -1,  332,   -1,
   -1,   -1,  336,  414,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  436,  360,   -1,   -1,  271,
  441,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,  397,   -1,   -1,   -1,  309,   -1,   -1,
  262,  313,  314,   -1,  316,   -1,   -1,  319,   -1,   -1,
  414,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  453,
   -1,  455,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,  319,   -1,
  332,  322,   -1,   -1,  336,   -1,   -1,   -1,  329,  341,
   -1,  332,  344,   -1,   -1,  336,   -1,  399,   -1,   -1,
  341,   -1,   -1,  344,   -1,   -1,  271,   -1,  360,   -1,
   -1,   -1,   -1,  272,   -1,   -1,  418,   -1,   -1,  360,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
  289,  433,  384,   -1,   -1,  387,  388,  302,   -1,   -1,
   -1,  443,   -1,  384,  309,  397,  387,  388,  313,  314,
  452,  316,  454,   -1,  319,   -1,  397,   -1,   -1,  461,
   -1,   -1,  414,   -1,   -1,   -1,  325,   -1,  333,   -1,
   -1,   -1,   -1,  414,  339,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  342,  436,   -1,   -1,   -1,  490,  441,
   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,
  441,  453,  361,  455,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,   -1,   -1,  461,   -1,   -1,
   -1,   -1,   -1,   -1,  399,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
  484,  485,   -1,  418,  488,  489,  490,  491,   -1,  493,
   -1,   -1,  496,  497,   -1,   -1,   -1,   -1,  433,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,  443,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,  454,
   -1,   -1,   -1,   -1,   -1,   -1,  461,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
  483,  484,  485,   -1,   -1,  488,  489,  490,  491,  461,
  493,   -1,   -1,  496,  497,  490,   -1,   -1,   -1,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,  488,  489,  490,  491,
   -1,  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 501
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : VIEW replace_view_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
{ yyval = yyvsp[0]; }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
{ yyval = yyvsp[0];}
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = yyvsp[0]; }
break;
case 75:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
{ yyval = (NOD) NULL; }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
{ yyval = yyvsp[-1]; }
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 114:
{ yyval = NULL; }
break;
case 115:
{ yyval = make_list (yyvsp[0]); }
break;
case 117:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 118:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 119:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 120:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 124:
{ yyval = (NOD) 0;}
break;
case 125:
{ yyval = yyvsp[-1]; }
break;
case 126:
{ yyval = (NOD) NULL; }
break;
case 129:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 130:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 131:
{ yyval = NULL; }
break;
case 132:
{ yyval = NULL; }
break;
case 133:
{ yyval = yyvsp[0]; }
break;
case 134:
{ yyval = (NOD) NULL; }
break;
case 135:
{ yyval = (NOD) NULL; }
break;
case 138:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 139:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 142:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 143:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 144:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 145:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 146:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 149:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 150:
{yyval = (NOD) NULL;}
break;
case 153:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 156:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 159:
{yyval = (NOD) NULL;}
break;
case 162:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 166:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 167:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 168:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 171:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 172:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 174:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 175:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 176:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 178:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 179:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 180:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 183:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 184:
{ g_file  = make_file ();}
break;
case 189:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 190:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 197:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 198:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
{ yyval = yyvsp[0]; }
break;
case 200:
{ yyval = yyvsp[0]; }
break;
case 201:
{ yyval = (NOD) NULL; }
break;
case 203:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 206:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 207:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 212:
{ yyval = NULL; }
break;
case 213:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 214:
{ yyval = yyvsp[0]; }
break;
case 215:
{ yyval = (NOD) NULL; }
break;
case 216:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 217:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 218:
{ yyval = yyvsp[-1]; }
break;
case 219:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = (NOD) NULL; }
break;
case 225:
{ yyval = yyvsp[0]; }
break;
case 226:
{ yyval = yyvsp[0]; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = (NOD) NULL; }
break;
case 231:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 233:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 234:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 236:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 237:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 238:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 239:
{ yyval = yyvsp[0]; }
break;
case 240:
{ yyval = NULL ;}
break;
case 245:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 246:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 247:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 249:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 250:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 251:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 252:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 253:
{ yyval = NULL;}
break;
case 254:
{ yyval = yyvsp[0];}
break;
case 255:
{ yyval = yyvsp[0];}
break;
case 256:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 257:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 258:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 259:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 260:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 261:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 262:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 263:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
{ yyval = make_list (yyvsp[-1]); }
break;
case 265:
{ yyval = NULL; }
break;
case 266:
{ yyval = yyvsp[0]; }
break;
case 267:
{ yyval = NULL; }
break;
case 269:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 270:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 271:
{ yyval = make_list (yyvsp[0]); }
break;
case 272:
{ yyval = NULL; }
break;
case 274:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 275:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 276:
{ yyval = NULL; }
break;
case 277:
{ yyval = NULL; }
break;
case 278:
{ yyval = yyvsp[0]; }
break;
case 279:
{ yyval = yyvsp[0]; }
break;
case 282:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 283:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 284:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 286:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 289:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 295:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 299:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 300:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 301:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 302:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 303:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 304:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 305:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 306:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 307:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 308:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 309:
{ yyval = make_list (yyvsp[0]); }
break;
case 310:
{ yyval = make_list (yyvsp[-1]); }
break;
case 311:
{ yyval = NULL; }
break;
case 312:
{ yyval = make_list (yyvsp[0]); }
break;
case 313:
{ yyval = make_list (yyvsp[-1]); }
break;
case 314:
{ yyval = NULL; }
break;
case 317:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 320:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 321:
{ yyval = NULL; }
break;
case 323:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 324:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 331:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 332:
{ yyval = make_list (yyvsp[0]); }
break;
case 333:
{ yyval = make_list (yyvsp[-1]); }
break;
case 334:
{ yyval = NULL; }
break;
case 338:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 340:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 341:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 343:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 344:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 345:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 346:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 347:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 349:
{ yyval = make_list (yyvsp[0]); }
break;
case 351:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 354:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 355:
{ yyval = yyvsp[-1]; }
break;
case 356:
{ beginning = lex_position(); }
break;
case 357:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 358:
{ beginning = last_token; }
break;
case 359:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 360:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 361:
{ yyval = 0; }
break;
case 362:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 363:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 364:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 366:
{ yyval = NULL; }
break;
case 367:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 368:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 373:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 376:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 377:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 378:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 386:
{ yyval = NULL; }
break;
case 387:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 388:
{ yyval = yyvsp[0]; }
break;
case 389:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 390:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 391:
{ yyval = yyvsp[0]; }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = yyvsp[0]; }
break;
case 394:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 395:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 396:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 397:
{ yyval = yyvsp[0]; }
break;
case 398:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 400:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 401:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 402:
{ yyval = yyvsp[0]; }
break;
case 403:
{ yyval = yyvsp[0]; }
break;
case 404:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 405:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 409:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 410:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 411:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 412:
{ yyval = yyvsp[0]; }
break;
case 413:
{ yyval = yyvsp[0]; }
break;
case 414:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 415:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 416:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 417:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 442:
{ yyval = NULL; }
break;
case 443:
{ yyval = NULL; }
break;
case 444:
{ yyval = NULL; }
break;
case 445:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 446:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 447:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 448:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 449:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 450:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 451:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 452:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 454:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 455:
{ yyval = yyvsp[0]; }
break;
case 456:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 457:
{ yyval = yyvsp[0]; }
break;
case 458:
{ yyval = yyvsp[0]; }
break;
case 460:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 463:
{ yyval = NULL; }
break;
case 465:
{ yyval = NULL; }
break;
case 466:
{ yyval = yyvsp[0]; }
break;
case 467:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 468:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 469:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 470:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 471:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 472:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 473:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 474:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 475:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 476:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 483:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 484:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 486:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 487:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 488:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 494:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 495:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 496:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 497:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 498:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 499:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 502:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 506:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 507:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 508:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 509:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 510:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 511:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 513:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 514:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 515:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 516:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 517:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 518:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 527:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 528:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 529:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 530:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 531:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 532:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 535:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 536:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 537:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 538:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 539:
{ yyval = yyvsp[-1]; }
break;
case 540:
{ yyval = 0; }
break;
case 544:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 545:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 546:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 547:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 548:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 551:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 552:
{ yyval = (NOD) NULL; }
break;
case 554:
{ yyval = (NOD) NULL; }
break;
case 555:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 557:
{ yyval = (NOD) NULL; }
break;
case 559:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 564:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 565:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 566:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 567:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 568:
{ yyval = yyvsp[0];}
break;
case 570:
{ yyval = yyvsp[0];}
break;
case 571:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 572:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 573:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 574:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 575:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 576:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 577:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 578:
{ yyval = 0; }
break;
case 579:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 580:
{ yyval = (NOD) NOD_SHARED; }
break;
case 581:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 582:
{ yyval = (NOD) 0; }
break;
case 583:
{ yyval = (NOD) NOD_READ; }
break;
case 584:
{ yyval = (NOD) NOD_WRITE; }
break;
case 586:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 587:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 588:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 589:
{ yyval = 0; }
break;
case 591:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 592:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 593:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 594:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 595:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 597:
{ yyval = make_list (yyvsp[0]); }
break;
case 598:
{ yyval = 0; }
break;
case 600:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 601:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 602:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 603:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 605:
{ yyval = 0; }
break;
case 606:
{ yyval = yyvsp[0]; }
break;
case 607:
{ yyval = 0; }
break;
case 608:
{ yyval = yyvsp[0]; }
break;
case 609:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 610:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 611:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 612:
{ yyval = 0; }
break;
case 613:
{ yyval = make_list (yyvsp[0]); }
break;
case 614:
{ yyval = 0; }
break;
case 616:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 618:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 619:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 620:
{ yyval = make_list (yyvsp[0]); }
break;
case 622:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 626:
{ yyval = yyvsp[-1]; }
break;
case 627:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 628:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 629:
{ yyval = make_list (yyvsp[-1]); }
break;
case 630:
{ yyval = NULL; }
break;
case 632:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 636:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 637:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 638:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 639:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 640:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 641:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 642:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 643:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 644:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 645:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 646:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 647:
{ yyval = yyvsp[-1]; }
break;
case 648:
{ yyval = yyvsp[0]; }
break;
case 649:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 650:
{ yyval = yyvsp[-1]; }
break;
case 651:
{ yyval = yyvsp[0]; }
break;
case 652:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 653:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 654:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 655:
{ yyval = 0; }
break;
case 656:
{ yyval = make_list (yyvsp[0]); }
break;
case 657:
{ yyval = 0; }
break;
case 659:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 664:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 668:
{ yyval = yyvsp[0]; }
break;
case 669:
{ yyval = 0; }
break;
case 670:
{ yyval = yyvsp[0]; }
break;
case 671:
{ yyval = 0; }
break;
case 672:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 673:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 674:
{ yyval = 0;}
break;
case 675:
{ yyval = yyvsp[0]; }
break;
case 676:
{ yyval = 0; }
break;
case 677:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 678:
{ yyval = 0; }
break;
case 679:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 680:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 681:
{ yyval = 0; }
break;
case 682:
{ yyval = 0; }
break;
case 684:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 688:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 690:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 691:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 693:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 695:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 701:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 702:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 705:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 706:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 708:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 712:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 714:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 719:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 720:
{ yyval = yyvsp[0]; }
break;
case 722:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 725:
{ yyval = NULL; }
break;
case 726:
{ yyval = make_list (yyvsp[-1]); }
break;
case 728:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 730:
{ yyval = NULL; }
break;
case 731:
{ yyval = make_list (yyvsp[-1]); }
break;
case 733:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 735:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 736:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 737:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 754:
{ yyval = yyvsp[-1]; }
break;
case 755:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 756:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 757:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 758:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 759:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 761:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 763:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 764:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 765:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 766:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 767:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 768:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 769:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 770:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 771:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 772:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 773:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 774:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 775:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 782:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 783:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 784:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 785:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 787:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 788:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 789:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 790:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 791:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 792:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 793:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 794:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 795:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 796:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 797:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 798:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 800:
{ yyval = make_list (yyvsp[-1]); }
break;
case 801:
{ yyval = yyvsp[-1]; }
break;
case 802:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 803:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 813:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 814:
{ yyval = yyvsp[0]; }
break;
case 815:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 816:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 817:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 818:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 819:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 820:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 821:
{ yyval = yyvsp[-1]; }
break;
case 822:
{ yyval = yyvsp[-1]; }
break;
case 825:
{ yyval = yyvsp[0]; }
break;
case 826:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 827:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 828:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 829:
{ yyval = yyvsp[0]; }
break;
case 830:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 831:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 832:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 833:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 835:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 837:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 838:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 839:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 840:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 841:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 842:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 844:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 845:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 846:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 847:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 853:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 854:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 855:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 856:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 857:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 858:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 859:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 860:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 861:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 862:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 863:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 864:
{ yyval = yyvsp[0]; }
break;
case 865:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 867:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 868:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 869:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 870:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 871:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 873:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 874:
{ yyval = yyvsp[0];}
break;
case 879:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 880:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 881:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 882:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 883:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 884:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 885:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 886:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 887:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 888:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 889:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 890:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 891:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 892:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 893:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 894:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 895:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 896:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 897:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 900:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 901:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 904:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 905:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 906:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 907:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 908:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 909:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 910:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 911:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 915:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 916:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 917:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 918:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 919:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 920:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 921:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 922:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 925:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
