#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 *
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#define DEBUG 298
#endif
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define RECREATE 408
#define REFERENCES 409
#define RESERVING 410
#define RETAIN 411
#define RETURNING_VALUES 412
#define RETURNS 413
#define REVOKE 414
#define RIGHT 415
#define RPAREN 416
#define ROLLBACK 417
#define SEGMENT 418
#define SELECT 419
#define SET 420
#define SHADOW 421
#define SHARED 422
#define SINGULAR 423
#define SIZE 424
#define SMALLINT 425
#define SNAPSHOT 426
#define SOME 427
#define SORT 428
#define SQLCODE 429
#define STABILITY 430
#define STARTING 431
#define STATISTICS 432
#define SUB_TYPE 433
#define SUSPEND 434
#define SUM 435
#define TABLE 436
#define THEN 437
#define TO 438
#define TRANSACTION 439
#define TRIGGER 440
#define UNCOMMITTED 441
#define UNION 442
#define UNIQUE 443
#define UPDATE 444
#define USER 445
#define VALUES 446
#define VARCHAR 447
#define VARIABLE 448
#define VARYING 449
#define VERSION 450
#define VIEW 451
#define WAIT 452
#define WHEN 453
#define WHERE 454
#define WHILE 455
#define WITH 456
#define WORK 457
#define WRITE 458
#define FLOAT 459
#define NUMBER 460
#define NUMERIC 461
#define SYMBOL 462
#define STRING 463
#define INTRODUCER 464
#define ACTION 465
#define ADMIN 466
#define CASCADE 467
#define FREE_IT 468
#define RESTRICT 469
#define ROLE 470
#define COLUMN 471
#define TYPE 472
#define EXTRACT 473
#define YEAR 474
#define MONTH 475
#define DAY 476
#define HOUR 477
#define MINUTE 478
#define SECOND 479
#define WEEKDAY 480
#define YEARDAY 481
#define TIME 482
#define TIMESTAMP 483
#define CURRENT_DATE 484
#define CURRENT_TIME 485
#define CURRENT_TIMESTAMP 486
#define NUMBER64BIT 487
#define SCALEDINT 488
#define CURRENT_USER 489
#define CURRENT_ROLE 490
#define KW_BREAK 491
#define SUBSTRING 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define LARGEINT 498
#define KW_INT64 499
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
    9,    9,    9,    9,   20,   20,   19,   19,   19,   30,
   30,   23,   31,   31,   31,   31,   31,   22,   22,   28,
   28,   24,   13,   13,   13,   13,   13,   13,   13,   34,
   25,   25,   25,   25,   35,   35,   35,   35,   21,   21,
   36,   36,   36,   26,   26,   41,   27,   27,   42,   42,
    6,   43,   43,   45,   50,   50,   50,   47,   47,   47,
   54,   54,   55,   55,   48,   48,   57,   57,   57,   57,
   57,   44,    5,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   12,   75,   75,   62,   62,   65,
   65,   65,   73,   84,   84,   84,   85,   85,   86,   86,
   87,   87,   91,   91,   72,   94,   94,   96,   96,   97,
   97,  100,  100,  101,  102,  102,  103,  104,   70,   74,
   71,   88,   88,  107,  108,  108,  110,  110,  111,  111,
  111,  111,  111,  109,  109,  112,  112,  113,  113,  113,
  113,  115,  115,  115,  115,  114,  114,  119,  119,  118,
   92,  120,  120,  121,  124,  125,  125,  126,  122,  123,
  123,  127,  127,  128,  128,  129,  129,  129,   90,   90,
   90,   67,   77,  130,  130,  130,  131,  131,  132,  132,
  133,  133,  133,  139,   80,   80,  135,  135,   98,   98,
   93,  143,  144,   56,  136,  136,   99,   99,   99,   99,
   99,   99,  137,  137,  151,  151,  152,  154,  154,  154,
  154,  154,  134,  153,  153,  157,  157,  157,  157,  159,
  160,  161,  156,  155,  155,  155,  155,  155,  162,  163,
  164,  164,  164,  164,   66,   76,  169,  165,  165,  166,
  166,  170,  170,  171,  167,  167,  172,  172,  173,  174,
  174,  168,  168,  168,  176,  176,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  179,  180,  181,  182,  182,  183,  189,  185,  185,
  185,  186,  186,  186,  187,  187,  187,  187,  184,  188,
  188,  177,  177,  194,  195,  195,  196,  196,  196,  196,
   11,  198,  198,  198,  199,  199,  199,  199,  199,  199,
   69,  201,  204,  204,  204,  205,  209,  214,  214,  215,
  215,  216,  216,  141,  203,   81,   83,  202,  202,   68,
  219,  219,  219,  220,  223,  223,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  221,  221,  222,    2,  226,  226,  226,  226,  226,
  226,  226,  234,  235,  232,  232,  236,  236,  236,  236,
  236,  236,  236,  227,  227,  237,  237,  237,  237,  237,
  237,  237,  231,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  239,  239,  241,
  241,  240,  238,  238,  238,  233,  233,  229,  230,  230,
  243,  243,  243,  243,  244,  244,  228,  245,  245,  246,
  246,    8,  247,  247,  247,  247,  247,  247,  247,  247,
  247,  247,  247,  247,   95,   95,  138,  138,  250,  250,
  253,  253,  255,  255,   51,   51,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  260,  260,  261,  261,  251,
  251,  251,  251,  262,  262,   59,   59,   59,   53,   53,
  257,  257,  257,  254,  254,  254,  266,  266,  266,  265,
  265,  264,  264,  264,  258,  258,  269,  267,  267,  267,
  268,  268,  259,  259,  259,  259,  270,  270,   16,   16,
   16,  272,  272,  272,    4,   14,  274,  274,  275,  275,
  276,  276,  271,  277,  277,  278,  278,  279,  279,  279,
  279,  280,  280,  281,  281,  282,  282,  284,  284,  284,
  285,  285,  285,  286,  286,  286,  283,  288,  288,  288,
  289,  289,  287,  287,  290,  292,  292,  291,  291,  273,
   15,  293,  293,  293,  294,  294,  297,  297,  298,  298,
   63,   63,   63,  295,  295,  299,  299,  296,  207,  207,
  208,  208,  302,  302,  303,  303,  303,  300,  306,  306,
  307,  307,  308,  308,  309,  309,  310,  310,  191,  191,
  312,  312,  217,  217,   29,  218,  218,  218,  218,  218,
  218,  218,  218,  313,  313,  313,  314,  314,  314,  206,
  206,  206,  206,  211,  211,  315,  315,  316,  316,  316,
  212,  212,  210,  210,  318,  318,  318,  213,  213,  319,
  320,  320,  320,  320,  320,  321,  321,  322,  322,  323,
  323,  324,  324,  324,  325,  325,   10,   10,  326,  326,
    7,    7,  327,  328,  329,   17,   17,  330,  331,  332,
  332,  178,  304,  304,    3,    3,  334,  334,  334,  336,
  336,   59,  335,  335,  337,  337,   32,   32,   79,   78,
   78,  192,  192,  192,  140,  333,  333,  105,  105,  105,
  105,  339,  339,  339,  339,  339,  339,  339,  339,  339,
  339,  339,  340,  340,  340,  340,  340,  340,  340,  340,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  351,  351,  341,  341,
  342,  342,  342,  342,  343,  343,  347,  347,  348,  348,
  348,  348,  346,  349,  344,  344,  352,  352,  350,  354,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,  150,  150,  150,  355,  358,  358,
  145,  145,  359,  359,  359,  359,  359,  357,  357,  357,
  357,  357,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  200,  146,  146,  147,  148,  148,   49,   49,
   18,   18,  225,  360,   52,  117,  256,  256,   89,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,  356,  356,  356,  317,  317,  361,  361,
  361,  361,  361,  361,  361,  361,  301,  301,  149,   46,
  263,  116,  142,  338,  158,  193,  249,   61,   58,  197,
  106,   64,  305,   33,   39,  311,  248,   37,   40,  190,
   38,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
    8,    6,    7,    5,    1,    2,    1,    2,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    3,
    0,    1,    7,    8,    6,    7,    6,    7,    4,    3,
    1,    3,    3,    3,    2,    2,    2,    2,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    3,    1,    2,
    2,    2,    3,    8,    1,    1,    5,    0,    1,    3,
    1,    3,    2,    4,    1,    3,    2,    3,    4,    4,
    2,    9,    2,    3,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    0,    1,
    1,    6,    6,    1,    1,    0,    0,    1,    0,    4,
    0,    1,    1,    2,    8,    1,    0,    3,    0,    0,
    1,    1,    2,    1,    1,    1,    2,    6,    1,    1,
    3,    0,    1,    1,    0,    1,    1,    2,    3,    4,
    2,    2,    3,    0,    1,    1,    2,    1,    1,    1,
    4,    3,    3,    3,    3,    1,    1,    6,    3,    1,
    3,    1,    3,    2,    1,    0,    2,    3,    1,    0,
    1,    1,    2,    3,    4,    0,    1,    2,    0,    1,
    1,    5,    5,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    2,    0,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    6,    4,    7,    8,    6,    4,    2,    1,    3,
    0,    2,    4,    0,    1,    1,    3,    3,    6,    3,
    0,    1,    2,    4,    1,    3,    2,    2,    2,    1,
    4,    1,    3,    0,    1,    1,    1,    3,    3,    3,
    7,    1,    1,    3,    4,    9,    2,    1,    3,    1,
    1,    6,    3,    0,    0,    0,    0,    3,    0,    9,
    1,    1,    0,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
    5,    2,    0,    4,    2,    3,    3,    2,    2,    3,
    3,    2,    3,    6,    1,    2,    4,    3,    2,    2,
    2,    2,    3,    1,    3,    3,    3,    2,    2,    4,
    4,    5,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    0,    2,    2,    0,    1,    2,
    2,    2,    2,    2,    1,    3,    7,    1,    0,    1,
    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    3,    2,    2,    2,    1,    1,    1,    1,    4,    5,
    1,    3,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    2,    4,    2,    2,    4,    2,    2,
    1,    1,    0,    3,    0,    1,    3,    1,    1,    3,
    2,    0,    2,    0,    3,    5,    0,    2,    0,    4,
    1,    2,    1,    1,    0,    1,    3,    2,    1,    1,
    2,    1,    4,    2,    1,    3,    8,    5,    1,    3,
    1,    1,    4,    4,    4,    1,    1,    5,    5,    1,
    3,    3,    1,    1,    7,    7,    5,    3,    0,    1,
    1,    1,    2,    0,    1,    1,    1,    0,    3,    1,
    3,    1,    3,    3,    1,    1,    3,    1,    3,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    1,    1,    5,    6,
    3,    4,    5,    6,    3,    4,    3,    4,    3,    4,
    4,    5,    4,    4,    3,    4,    3,    3,    9,    9,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
    1,    3,    1,    1,    1,    1,    1,    4,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    1,    1,    1,    1,    1,    3,    3,    3,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    1,    1,    1,    1,    2,    1,    4,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    6,    4,    6,    6,    6,    8,    4,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,  529,  530,  531,    0,  582,
  681,  682,  686,  687,  438,    0,    0,    0,    0,    0,
    0,  375,  537,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,    0,   93,    0,  843,    0,   19,
  841,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  452,    0,    0,
   35,   32,   34,    0,   33,    0,  895,    0,    0,    0,
    0,   30,   66,   64,    0,    0,    0,    0,    0,  105,
    0,    0,    0,    0,    0,  536,    0,    0,    0,    0,
  642,    0,    0,    0,  897,  623,    0,    0,    2,    0,
    0,    0,    0,  422,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  423,  424,  425,  426,  427,    0,  403,  888,
    0,  892,    0,  382,  894,    0,  379,    0,  625,  898,
    0,  378,    0,  535,  839,    0,  144,  101,    0,  884,
  102,    0,  211,  715,    0,  891,  100,  139,    0,   96,
    0,  103,  845,    0,   97,    0,   98,  901,    0,   99,
  140,  104,  591,  592,    0,  844,  842,    0,  889,   72,
    0,    0,  887,  460,  453,    0,  459,  464,  454,  455,
  462,  456,  457,  458,  463,    0,   28,    0,   37,  707,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  106,    0,  107,    0,    0,    0,    0,    0,    0,  849,
    0,  833,  634,  636,    0,  637,  639,  877,  599,    0,
  600,  640,    0,    0,    0,    0,    0,    0,    0,  554,
  543,    0,  546,  548,  549,  550,  551,  557,  558,    0,
  896,  624,    0,    0,  583,    0,  581,    0,    0,    0,
    0,  439,    0,    0,  346,    0,  214,    0,  385,  376,
  436,  437,    0,    0,    0,    0,    0,    0,  394,    0,
  351,  352,    0,  541,  539,  840,    0,    0,    0,    0,
    0,    0,    0,  147,  126,    0,   94,    0,  115,  114,
    0,    0,    0,    0,    0,    0,  880,   73,    0,    0,
    0,  683,  684,  461,    0,  879,  815,  814,  813,    0,
    0,  816,  817,    0,    0,  819,  326,  327,  321,    0,
  325,  811,  818,    0,  710,    0,    0,   25,    0,    0,
  899,    0,   69,   67,   65,   31,    0,    0,    0,    0,
    0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
  801,    0,    0,  803,    0,    0,    0,  834,    0,    0,
  805,  806,  807,  835,  836,    0,  837,  838,    0,    0,
    0,    0,    0,    0,  712,  798,  799,  800,  804,  786,
    0,  785,    0,  787,  782,  783,  784,    0,  602,    0,
  694,    0,    0,  603,    0,    0,  580,    0,  555,    0,
  552,    0,  553,  578,    0,  573,    0,    0,  547,    0,
  716,  690,    0,    0,    0,  517,    0,    0,    0,  587,
    0,  584,    0,  179,    0,    0,  123,  444,  166,  167,
    0,  442,    0,    0,    0,    0,  445,    0,  440,    0,
    0,  389,  391,  390,    0,  392,    0,  386,  212,    0,
    0,  262,    0,    0,    0,    0,  398,  399,    0,  429,
    0,    0,    0,    0,    0,    0,    0,  356,  355,  448,
    0,    0,  143,    0,    0,  152,    0,  151,    0,  158,
  141,    0,  156,  159,  160,  148,    0,    0,  483,  521,
  488,    0,  522,    0,    0,  489,    0,    0,    0,  512,
  525,  482,  507,  484,  485,  486,  487,  467,  346,  465,
  466,  468,    0,    0,  477,  478,  479,  480,  481,    0,
    0,    0,    0,    0,  118,    0,    0,  195,    0,    0,
  344,    0,  214,    0,    0,   81,    0,    0,  702,    0,
    0,    0,    0,    0,    0,    0,    0,  718,  722,  723,
  724,  725,  726,  727,  728,  729,  730,  731,  820,  821,
  822,  812,    0,    0,    0,  709,   26,    0,    0,   42,
   70,    0,    0,   24,    0,    0,  678,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  900,
  298,    0,    0,    0,    0,    0,    0,    0,  635,    0,
    0,  638,    0,    0,    0,    0,  893,  606,  533,    0,
  847,  532,    0,  556,    0,  564,  560,  559,    0,    0,
    0,  575,  563,    0,    0,  688,  689,    0,    0,    0,
    0,    0,    0,    0,  594,    0,    0,  124,    0,    0,
    0,    0,    0,    0,  346,  388,    0,  346,  347,  393,
  475,    0,  264,    0,  258,  260,  344,  885,  234,    0,
    0,  346,    0,    0,  203,  344,    0,    0,    0,    0,
  239,  233,  236,  237,  238,  397,  434,  433,  396,  395,
    0,    0,    0,    0,    0,    0,  354,    0,  346,    0,
  149,  153,    0,  157,    0,    0,  508,  509,  526,    0,
  523,    0,    0,  515,  513,  514,    0,    0,    0,    0,
  476,    0,    0,    0,    0,  516,  344,    0,  194,    0,
  197,  199,  200,    0,    0,    0,    0,    0,  214,   76,
    0,    0,   75,  881,  496,  497,    0,    0,    0,  721,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  323,  329,  330,  328,  711,    0,    0,    0,    0,    0,
    0,    0,    0,   51,   59,   61,    0,    0,   68,    0,
    0,    0,    0,  344,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  869,  870,  871,  872,  873,  874,
  875,  876,    0,    0,    0,  796,  797,  868,    0,    0,
  883,  792,    0,    0,    0,    0,    0,    0,  802,  714,
  713,    0,    0,    0,    0,  611,  612,    0,    0,  604,
  607,  534,  848,  565,  574,  569,  568,    0,  579,  717,
  691,  692,  209,  589,  590,  588,    0,  175,  169,  176,
    0,  172,    0,    0,  171,    0,  182,  163,  162,  846,
  165,  164,  446,    0,    0,    0,  387,  263,    0,  205,
  346,  207,    0,  347,  202,  208,    0,    0,  240,    0,
  400,  401,  346,  344,  347,    0,    0,    0,  372,    0,
  190,  191,  150,    0,    0,    0,    0,    0,    0,  524,
    0,    0,  346,  347,    0,  471,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  192,    0,    0,
    0,    0,  333,    0,   80,    0,    0,    0,    0,   85,
   82,    0,    0,    0,  886,  685,    0,    0,  732,    0,
    0,    0,  758,  757,    0,    0,    0,  765,  775,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  720,
    0,   63,   55,   56,   62,   57,   58,    0,    0,   20,
    0,    0,    0,   40,    0,    0,    0,  696,  679,    0,
  695,    0,  193,    0,    0,    0,    0,    0,    0,  214,
    0,  850,    0,    0,  862,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  867,  808,    0,    0,    0,
    0,    0,    0,  626,    0,    0,    0,    0,    0,  571,
  572,  576,    0,    0,    0,    0,    0,    0,  183,    0,
    0,  383,  217,  218,  219,  220,  221,  222,    0,    0,
    0,  267,    0,  215,    0,    0,  241,    0,  430,  431,
  402,    0,    0,    0,    0,    0,    0,  346,  450,  347,
  882,  161,    0,    0,  491,    0,  490,  527,    0,  519,
    0,    0,    0,  469,    0,  499,    0,    0,  501,  504,
  506,    0,    0,  113,    0,  198,  346,    0,    0,  345,
    0,   95,    0,  111,    0,   91,    0,    0,    0,    0,
   84,    0,  773,  774,    0,    0,    0,    0,  823,  825,
  826,  827,  824,    0,    0,  776,    0,    0,    0,    0,
    0,    0,    0,  766,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   60,   52,   53,   21,  700,  701,    0,  698,  705,  706,
  703,    0,  677,    0,    0,    0,  856,  855,    0,    0,
  852,  851,    0,  860,  859,  858,  857,  854,  853,    0,
    0,    0,    0,  614,    0,  621,    0,  619,  615,    0,
  632,  628,  630,    0,    0,    0,    0,    0,  177,  173,
    0,    0,  188,  184,    0,  347,    0,    0,  347,  268,
    0,    0,    0,  225,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  447,  493,    0,  494,    0,  128,
    0,    0,    0,  132,  134,  135,  136,  472,  474,  470,
  503,  347,    0,    0,    0,    0,  331,    0,  334,  346,
   86,    0,    0,   88,    0,    0,    0,    0,    0,    0,
  778,    0,  777,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,  680,  347,  213,  861,  863,  864,    0,
  865,    0,    0,  617,    0,    0,    0,  646,  649,    0,
    0,  598,    0,  168,  185,  347,  138,    0,  272,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  275,  270,    0,    0,  280,  281,
  282,  283,  286,  288,  257,    0,  201,  226,    0,    0,
    0,  231,  227,  230,    0,  347,  370,  371,  367,  366,
  369,  368,    0,  492,  520,  137,  125,  133,  255,  120,
  347,    0,  348,  335,    0,    0,   89,   90,   77,    0,
  744,  752,    0,  828,  830,  831,  832,  829,  745,  753,
  748,  756,    0,    0,  746,  754,  747,  755,  741,  749,
  742,  750,  743,  751,  697,  256,    0,    0,  620,    0,
    0,    0,  661,  663,    0,  658,    0,  178,  384,    0,
    0,    0,    0,  290,    0,    0,    0,  289,    0,  291,
  278,  284,    0,  287,  273,    0,  276,    0,  312,  277,
  204,  228,  232,    0,    0,  243,  374,  350,    0,    0,
    0,   74,   92,    0,  866,    0,    0,  650,  647,  662,
    0,  269,  279,    0,    0,    0,    0,  285,    0,    0,
  305,  306,  320,    0,    0,    0,    0,  315,  274,  313,
    0,    0,  242,    0,    0,    0,    0,    0,  340,  341,
    0,    0,    0,    0,    0,  669,    0,    0,    0,    0,
    0,    0,  293,    0,    0,    0,  297,    0,  319,  890,
  318,  317,    0,    0,  229,    0,    0,    0,  247,    0,
  246,    0,    0,    0,    0,    0,  112,    0,  780,  671,
  660,    0,    0,  672,    0,  668,    0,    0,    0,    0,
    0,    0,    0,    0,  308,  307,  314,  316,    0,    0,
  251,  250,  249,  343,    0,    0,    0,    0,  667,    0,
  674,  300,    0,    0,  292,    0,    0,    0,  309,  254,
  252,  253,    0,  336,    0,    0,    0,    0,  310,  294,
    0,    0,  779,    0,  673,  303,  295,    0,  676,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1390,   26,   27, 1391,
   29,   30,   31,   32, 1392,   34, 1393,  579,   98,  367,
  822, 1050,   99,  609,  823,  100,  372,  614,  126,  101,
  102,  229,  883,  115,  824,  825,  171,  199,  103,  826,
  104,  374,   74,  210,  338,  413,  574,  988,  356,  782,
  548,  456,  761,  575,  576,  577,  990,  211, 1225,   66,
  161,   67,  205, 1636, 1172,  190,  195,  197,  200,  187,
  178,  181,  192,  202,  110,  241,  243,  364,  230,  711,
  481,  586,  927,  331,  566,  976, 1164,  514,  661,  953,
  466,  467,  496,  326,  549,  964, 1302,  680, 1112, 1303,
 1304, 1305, 1306, 1307,  587,  188,  179,  322,  521,  323,
  324,  522,  523,  524,  525, 1142,  921,  469,  470,  911,
  909,  471,  915,  910, 1103, 1269,  916,  917, 1108,  333,
  770,  771,  772,  773,  713,  934, 1282,  550,  715,  415,
  775,  872,  490, 1240, 1113,  416,  417,  418,  431,  419,
 1283, 1284,  499, 1413, 1543,  721,  722,  709,  723,  724,
  725, 1544, 1545, 1612,  304,  494, 1120, 1394,  167,  491,
  492, 1121, 1122, 1395, 1396, 1397, 1498, 1398, 1399, 1400,
 1401, 1402, 1403, 1404, 1561, 1600, 1530, 1602,  420,  641,
 1257,  421,  996, 1499, 1537, 1538, 1571,  359,  360,  422,
  981, 1170, 1317,  982,  983,  119,  260,  432, 1510,  342,
 1099, 1267, 1372, 1547, 1548, 1549, 1550, 1097,  313,  510,
  739, 1139,  511,  737,  193,   52,  308,  172,  133,  291,
  158,  298,  164,  699,  696,  299,  309,  729,  310,  507,
  945,  159,  292,  478,  512, 1140,   88,  169,  214,  551,
  552,  701,  965,  702,  966,  967,  555,  556,  557,  558,
  559,  958,  786,  560,  561,  562,  754,  563,  458,  751,
   36,   37,   38,   54,  174,  315,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  667,  445,  898, 1102,  446,
  447,  672,   39,  132,  287,   40,  459,  460,  685,  654,
  261,  433,  434,  435,  658,  884,  885,  886,  887, 1091,
  423, 1258,  120,  121, 1367, 1368,  424,    0, 1556, 1477,
 1557, 1558, 1559, 1596, 1637, 1060,   41,   42,  343,   43,
   44,  454,  455,  831, 1058, 1227, 1231,  184,  588,  589,
  590,  591,  592,  593,  594,  595,  596,  597,  598, 1194,
 1006, 1008, 1195,  639,  425,  426,  427,  870,  363,  207,
  863,
};
static short yysindex[] = {                                   5325,
 1061, -231, 2906,  126, 1279,   65, 2568,   -5, 2363,  440,
  159,  736, 1205, -231, -226,  485,  344,    0,  670,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  509,    0,
    0,    0,    0,    0,    0, 3964,  358,  425,  439,  344,
  506,    0,    0,  471, 1243,  516,  358,  531,  439,  609,
  344,  506,    0,  551,  631,    0,  886,    0,  648,    0,
    0,  801,  691,    0,  344,  744,  358,  907,  691,  531,
  425,  439,  609,  344,  506,  551,  631,    0,  439,  882,
    0,    0,    0, 1200,    0, 1200,    0,  929,  938,  167,
 1294,    0,    0,    0,  516,  344,  516,  439,  344,    0,
  948,  969,  995,   82,  761,    0,   46,   47,  -15,  897,
    0,  531, 1071,  791,    0,    0, 1004,  966,    0, 1186,
 -105, 1159,  -23,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  748,    0,    0,
 1243,    0,  -56,    0,    0, 1462,    0, 1368,    0,    0,
  -25,    0, 1089,    0,    0, 1060,    0,    0, 1134,    0,
    0, 1283,    0,    0, 1243,    0,    0,    0, 1462,    0,
  -68,    0,    0, 1296,    0, 1298,    0,    0, 1200,    0,
    0,    0,    0,    0, 1224,    0,    0, 1165,    0,    0,
 1321, 1220,    0,    0,    0, 1165,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1598,    0,  516,    0,    0,
    0,  512, 1299,  221,  631, 1024, 1356, 1200, 1394, 1462,
    0, 1296,    0, 1402,  512, 1328,  221, 1351, 1358,    0,
 5716,    0,    0,    0, 5716,    0,    0,    0,    0, 4605,
    0,    0, 1302,  425, 1392, 1313,  655,  344, 1338,    0,
    0,  791,    0,    0,    0,    0,    0,    0,    0, 1331,
    0,    0, 1048, 1360,    0, 1353,    0, 1055, 1451,  896,
  -23,    0, 1529,  967,    0,  516,    0,  748,    0,    0,
    0,    0,  516, 1399, -106, 1355,  -50, 1784,    0, 4199,
    0,    0,  904,    0,    0,    0, 1768, 1768, 1243, 1458,
 1243, 2771, 1134,    0,    0, 7224,    0, 1399,    0,    0,
 1548, -159, 1797,  344, 1574,  425,    0,    0, 1810,  140,
 3011,    0,    0,    0, 1388,    0,    0,    0,    0, 1389,
 1405,    0,    0, 1297, 2072,    0,    0,    0,    0, 1811,
    0,    0,    0, 1274,    0,  344, 1416,    0,  439, 1395,
    0,   19,    0,    0,    0,    0,  344, 1189,  344, 1399,
 1825,    0, 1550,  439, 1830,  512, 1473, 1835, 1838, 1839,
    0, 1848, 1849,    0, 1852, 1857, 1858,    0,    0, 1860,
    0,    0,    0,    0,    0, 1861,    0,    0, 5716, 5716,
 5075, 1440, 1865, 1290,    0,    0,    0,    0,    0,    0,
 1815,    0, 1866,    0,    0,    0,    0, 1687,    0, 1916,
    0, 1592, 1871,    0, -111,    8,    0,  537,    0, -141,
    0, -141,    0,    0, 1872,    0,   92, 1489,    0,    0,
    0,    0, 1874,   30, 1862,    0, 1641, 1641, 1878,    0,
 1879,    0, 1541,    0,  109, 1586,    0,    0,    0,    0,
 1243,    0, 1768, 1768, 1768, 1768,    0, 1892,    0, 1664,
 1666,    0,    0,    0, 1648,    0, 7224,    0,    0, 7224,
 1391,    0, 1462, 1688, 1492, 7060,    0,    0,  447,    0,
 1492, 1172, 1368,    0, 1557, 1518, 1488,    0,    0,    0,
  474, 1566,    0, 1508,  609,    0, 1243,    0, 1689,    0,
    0, 2771,    0,    0,    0,    0,   20, 1520,    0,    0,
    0, 1523,    0, 1571, 1934,    0, 1626, 1937,  511,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1887,  113,    0,    0,    0,    0,    0,   50,
 1942, 1944, 1937, 1722,    0, 1243, 1243,    0, -106,  -25,
    0, 1612,    0, 1581, 1962,    0, 5255,   28,    0, 1611,
 1624, 1970, 3555, 1971, 3083, 7024,  443,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1512, 2072,  516,    0,    0, 1242, 1575,    0,
    0, 1549,  221,    0, 1704, 1983,    0, 1704, 1760, -106,
 1242, 1706, 1707,  439,  672, 5225,   87,  531, 5716,  854,
  890,  900, 2449, 5716,  818,  818, -226, 1946, 1984,    0,
    0, 5323, 1567, 5716, 5716, 5716, 5716, 5716,    0, 5716,
   38,    0,   77, 1576, 5225, 1578,    0,    0,    0, 1184,
    0,    0,  -40,    0, 1588,    0,    0,    0,  344,  581,
  344,    0,    0,  516, 1331,    0,    0, 5225, 1567,  886,
  886, 1048,   60,  516,    0, 1243, 1243,    0,  553, 1508,
 1508, 1582,  609,  896,    0,    0, 2001,    0,    0,    0,
    0, 1766,    0,  516,    0,    0,    0,    0,    0, 1770,
 2006,    0, 1755, 1780,    0,    0, 1702, 1710, 1200, 1789,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  609,  516, 7069, 1681, 1682, 1683,    0,  609,    0, 1422,
    0,    0, 1652,    0,   17, 1653,    0,    0,    0,  609,
    0, 1934,  129,    0,    0,    0, 1772,  129, 1656,  129,
    0, 2039,  609,  609,  609,    0,    0, 1727,    0, 1522,
    0,    0,    0,  904, 1668,  344, 1562,  220,    0,    0,
 2049, 1820,    0,    0,    0,    0,  140, 1633, 1360,    0,
 1360, 3905,  414, 5716, 5716, 3665, 2056,  806, 3815, 5716,
 3900,  813, 4050, 4135, 5369, 4285, 4370, 4520, 3555, 3555,
    0,    0,    0,    0,    0, 1395,  439,  506, 1395,  551,
  631,   81, 2053,    0,    0,    0, 1242, 1712,    0, -116,
 1731, 5225, 1731,    0, 1629, 2057, 2053, 1242,  557, 1786,
 5716, 5716, 1845, 5716, 2070, 5716, 2068, 1957, 5716, 5716,
 5716, 5716, 5716, 5716,    0,    0,    0,    0,    0,    0,
    0,    0, 1798, 1166,  -15,    0,    0,    0, 1916, 1640,
    0,    0, 1840,  818,  818,  420,  420,  646,    0,    0,
    0,   77, 2078, 2084,  746,    0,    0, 3555, 1800,    0,
    0,    0,    0,    0,    0,    0,    0, -170,    0,    0,
    0,    0,    0,    0,    0,    0, 2086,    0,    0,    0,
 1695,    0, 1768, 1867,    0,  553,    0,    0,    0,    0,
    0,    0,    0, 2092, 3555, 1263,    0,    0, 1837,    0,
    0,    0, 1263,    0,    0,    0, 1200, 1200,    0, 2099,
    0,    0,    0,    0,    0, -131,  356,  -93,    0, 1876,
    0,    0,    0, 1680,  126, 1720, 1721, 1766, 2106,    0,
 1508, 1725,    0,    0,  800,    0, 2091, 1680, 1051,  609,
 2110, 2111, 2112, 1837, 1768, 1586, -106,    0, 1566, -226,
 1698, 1713,    0,   16,    0,  609, 1769, 1847, 5255,    0,
    0,  609, 1675, 1863,    0,    0, 2130, 2136,    0, 1610,
 1916, 2140,    0,    0, 1916, 2144, 1940,    0,    0, 1834,
 2148, 1916, 2151, 1342, 2152, 1916, 2153, 5716, 5716, 2056,
 5716, 5572, 2154, 1916, 2155, 2157, 1916, 2163, 5716, 1916,
 2166, 1916, 2170, 2172, 1916, 2173, 2176, 1916, 2181,    0,
 1938,    0,    0,    0,    0,    0,    0, 1896, 1242,    0,
 1242,   81, 2053,    0,  112,  112,  120,    0,    0, 1729,
    0, 1837,    0, 2057, 2053, 2185,  557, 2061, 2313,    0,
 2418,    0, 2458, 5716,    0, 2477, 2501, 2549, 2602, 2743,
 2759, 5716,  609, 5716, 5716,    0,    0,  746, 2184, 5225,
  966,   77, 1842,    0, 1850, 1851, 1890, 1964, 1909,    0,
    0,    0, 1818, 1243, 1864, 1508, 1856, 1508,    0, 3555,
  583,    0,    0,    0,    0,    0,    0,    0, 1803, 1986,
 1837,    0, 5716,    0, 1972, 1875,    0, 3555,    0,    0,
    0, 1882, 1884, 1885, 1888, 1894, 1898,    0,    0,    0,
    0,    0, 2218,  126,    0, 1582,    0,    0,  129,    0,
 1263, 1912,  129,    0,  129,    0, 1766, 2220,    0,    0,
    0, 1986, 1508,    0, 1586,    0,    0,  -15, 2015,    0,
  -96,    0, 2086,    0, 2255,    0, 2256, 1243, -107, 2258,
    0, 1243,    0,    0, 5716, 1877, 1877, -226,    0,    0,
    0,    0,    0, 2259, 1739,    0, 1877, 1877, 5716, 1877,
 1877, 2671, 1916,    0, 1547, 5716, 1916, 1877, 1877, 1877,
 1877, 1916, 1877, 1877, 1877, 1877, 1877, 1877, 1917,    0,
    0,    0,    0,    0,    0,    0, 1870,    0,    0,    0,
    0, 5225,    0, 1986,  557, 2185,    0,    0, 7224, 2269,
    0,    0, 2795,    0,    0,    0,    0,    0,    0, 2875,
   56, 1240, 1916,    0, 1916,    0, 1746,    0,    0,  746,
    0,    0,    0,   77, 1854, 3555, 1921, 1768,    0,    0,
 1243, 1422,    0,    0,  618,    0,  516, 3910,    0,    0,
 1916, 1641, 1972,    0, 1084,  344,  629, 1869, 1975, 1881,
 2018, 1982, 2021, 1837,    0,    0, 2286,    0, 2288,    0,
 1977, 1641, 1912,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1422, 1876, 4605, 1947,    0, 1668,    0,    0,
    0, 1963,  317,    0, 1766, 1965, 1916, 2295, 2298,  -15,
    0, 1421,    0, 2302, 2303, 1916, 2304, 2305, 5716, 5716,
 1916, 2311, 2316, 2320, 2321, 2322, 2323, 2324, 2325, 2331,
 2332,    0,  112,    0,    0,    0,    0,    0,    0,  609,
    0, 1576, 5225,    0,  906, 2095, 2337,    0,    0,  443,
  942,    0, 1508,    0,    0,    0,    0, 7224,    0,  358,
 1064, 2317, 1360, 2342, 2042, 5716, 2327, 2344, 2330, 2338,
 2339, 2065, 2348,    0,    0,    0, 7275, 2353,    0,    0,
    0,    0,    0,    0,    0, 2372,    0,    0, 2062, 2069,
  344,    0,    0,    0, 1200,    0,    0,    0,    0,    0,
    0,    0, 1986,    0,    0,    0,    0,    0,    0,    0,
    0, 2096,    0,    0, 5716, 1243,    0,    0,    0, 1243,
    0,    0, 5716,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1916, 1916,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2375, 1800,    0, 3555,
 1567, 1854,    0,    0, 2050,    0, 2384,    0,    0, 2367,
 2376,  439, 5716,    0, 2090, 3555, 2235,    0, 3555,    0,
    0,    0,   74,    0,    0,  571,    0, -133,    0,    0,
    0,    0,    0, 1200, 2055,    0,    0,    0,   84, 1576,
 1916,    0,    0, 1240,    0, 1909,  443,    0,    0,    0,
  576,    0,    0, 5618, 2989,   74,  669,    0,  703,  686,
    0,    0,    0,  358, 1979,  126,  102,    0,    0,    0,
 2055,  373,    0, 2059, 2063,   84, 2405,  746,    0,    0,
 1800, 2409, 1576, 1921,  344,    0, 2410, 2413,  972, 4755,
 2041, 2420,    0,  170, 2017, 2161,    0,   74,    0,    0,
    0,    0, 3802,  571,    0,  834,  834, 2167,    0, 2024,
    0,  746, 2430,   84, 2128, 1909,    0, 1800,    0,    0,
    0,  576, 2435,    0,  425,    0, 1946, 1754,   90, 2414,
 2186, 2174, 3802, 3802,    0,    0,    0,    0, 2016,   52,
    0,    0,    0,    0,  746,   84, 1921, 1909,    0,  425,
    0,    0,   74, 2438,    0, 1633, 3802, 2175,    0,    0,
    0,    0, 1021,    0, 1921, 2440, 2444, 1762,    0,    0,
 3802, 3555,    0,  425,    0,    0,    0,  443,    0,
};
static short yyrindex[] = {                                      0,
    0,  143,  918,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  203, 3329,    0,    0,    0, 2488,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  384,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  964,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2158,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2107,
    0,    0,    0,  183,    0,  183,    0,    0,    0,    0,
 2114,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4840, 3402,
    0,    0,    0,  986,    0,    0,    0,  272,    0,    0,
    0,  340,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -76,    0,    0,    0,    0,
  613,    0,  992,    0,    0,    0,    0,    0, 1336,    0,
    0, 7296,    0,    0,    0,    0,    0,    0,  -76,    0,
  365,    0,    0, 2450,    0,    0,    0,    0, 2238,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1014,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1245,    0,  -76,
    0, 2450,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   76,    0,
    0, 1178,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1305,    0, 2226,    0,    0,    0,    0, 1312,    0,    0,
    0,    0,    0, 2242,  554, 4432,    0, 1316,    0,    0,
    0,    0,  195,    0,    0,    0, 2048, 2048,    0,    0,
    0, 1317, 1509,    0,    0,    0,    0, 2242,    0,    0,
 1357,    0,    0,    0,    0,    0,    0,    0, 4851, 2121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1323,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1378,    0,    0,    0,    0,    0,    0,    0, 2242,
    0,    0,    0,    0, 1386,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1802,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1886,    0,    0,    0,    0,    0,    0,    0,    0,   79,
    0,    0, 2191,    0,   89,    0,    0,    0,    0,  584,
    0,  584,    0,    0,  212,    0,  381,  437,    0, 2115,
    0,    0,    0, 1014,    0,    0, 1155, 1155,  625,    0,
    0,    0,  345,    0, 3257,  151,    0,    0,    0,    0,
    0,    0, 2048, 2048, 2048, 2048,    0,  312,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2252,    0,    0,    0,    0,    0, 2226,    0,
    0,  795,    0,  426, 2058,    0,    0,    0,    0,    0,
    0,  192,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1418,    0,    0,    0,    0,  809,   72,    0,    0,
    0,  987,    0,    0, 1300,    0,    0, 1324,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2808, 2809,    0,    0,    0,    0,    0, 1362,
 1018,    0, 1324,    0,    0,    0,    0,    0,  554, 1152,
    0,    0,    0,    0, 2116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  101,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   99,    0,    0,   99,    0,  554,
    0,    0,    0,    0, 5860,    0, 5860,    0,    0, 5860,
 5860, 5860,    0,    0, 2433, 2680, 4990,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1020,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  479,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  782,
  782,    0,    0,    0,    0,    0,    0,    0, 3330,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,    0,    0,    0,    0,    0, 2485,
    0,    0, 1498,  837,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  364,  635,  636,    0,    0,    0, 1696,
    0,    0,    0,    0,    0,  764,    0,    0,    0,    0,
    0, 1300,    0,    0,    0,    0,  645,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  234,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7158,    0,    0,
    0,  288,    0,    0,    0,    0, 2217,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1441, 1476,    0,    0,    0,    0,    0,    0,    0,
 1482,    0, 1482,    0,    0, 1506, 1514,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5860,    0,    0,    0,  936,    0,
    0,    0, 1990, 2818, 2902, 2245, 2349,    0,    0,    0,
    0,    0,  172,  799, 1651,    0,    0,    0,  428,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  650,    0,    0,    0,
    0,    0, 2048, 2077,    0, 3418,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2257,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1524,
    0,    0,    0,    0,    0,    0,    0, 1398,    0,    0,
    0,    0,    0,    0,    0,    0, 1063,    0,    0,    0,
    0,    0,    0, 2257, 2048, 1536,  554,    0, 2274, 3329,
 1546,   78,    0,    0,    0,    0, 7158,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1621,    0,    0,    0, 2126,    0,    0,    0,    0,    0,
    0, 2571,    0, 5823,    0, 5920,    0,    0,    0,    0,
    0,    0,    0, 6075,    0,    0, 6125,    0,    0, 6214,
    0, 6225,    0,    0, 6314,    0,    0, 6325,    0,    0,
 6882,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1441, 1552,    0, 2102,  299,    0,    0,    0,    0,
    0, 2257,    0, 1560, 1564, 1587,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2201, 1090,    0,
 1472,    0, 2203,    0, 2205, 2206,    0,    0,  424,    0,
    0,    0, 3253,    0,    0,    0, 2093,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2280,    0,    0,    0, 2160,    0,    0,    0,    0,    0,
    0,  682,  735,  779,  783,  793,  802,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  128,    0,    0,    0,    0, 1410,    0,    0,    0,
    0,    0,    0,    0, 1600,    0,    0, 4840,    0,    0,
    0,    0, 1618,    0,    0,    0,    0,    0,   67,    0,
    0,    0,    0,    0,    0,    0,    0, 4990,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6401,    0, 6430,    0, 6464,    0,    0,    0,
    0, 6493,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1630,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1540,    0,  198,    0,    0,    0,    0, 1781,
    0,    0,    0,    0,    0,    0,  223, 2048,    0,    0,
    0,  668,    0,    0,    0,    0,    0,    0,    0,    0,
 2511, 1429, 2891,    0, 2226,    0,    0,    0,    0,    0,
    0,    0,    0, 2257,    0,    0,    0,    0,    0,    0,
    0, 1660,  792,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  306,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   44,    0, 6573,    0,    0, 5860,
    0,    0,    0,    0,    0, 6649,    0,    0,    0,    0,
 6675,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  299,    0,    0,    0,    0,    0,    0,    0,
    0,   63,    0,    0, 2201,  256,  266,    0,    0,  380,
 2516,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6751, 6832,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,    0, 2518,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  971, 1481,    0,    0,    0,    0,  106,
 2511,    0,    0,    0,    0,   48, 6932,    0,    0,    0,
 2516,    0,    0,   32,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2209,    0,    0, 2897, 2976,    0,  206,  277,    0,    0,
  215,    0,   63, 2521, 1157,    0,    0, 2522,    0,    0,
 2506,   62,    0, 2267,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2201, 1233,    0,    0,  181,    0,   53,    0,    0,
    0, 2516,    0,    0,    0,    0, 2529,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  417,    0,  107,   48,    0,    0,
    0,    0,    0, 2517,    0,    0,    0, 7319,    0,    0,
    0,    0, 2201,    0, 2521, 2534,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  835,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2578,    0,    0, 2583,
    0,    0,    0,    0,   10,    0, 2584,    1,  204,  -16,
 -544, 1533,  209, -262,  210, 2582, 2350,    0,  -38,    0,
 2362,  -88,  -42,    0,  665, -788,  -34,  -49,  -32, -177,
 2365, 1988,    0,    0,    0, 1054,    0,    0,  -46, 1613,
 -436,    9, -877, 2031, 1828, -267, 1622, 2535, -278,    0,
  -51,    0, 1143,  -45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -601,   51, 1632,
 -246,  108, -850,    0,    0,    0,    0, -296,  -99, -167,
 1643, -298,  -43,    0, -461,    0,    0, -433, -735,    0,
 1314,    0,    0, 2334, -551,  -26,    0,    0,    0,    0,
 2297,    0, 2109, 2340, -120, 1667, -458,    0,    0,    0,
 -641,    0,    0,    0,    0,    0,    0, 1718,    0, 2394,
 2019, 1663, 2336, 2341,    0,    0,    0, -448, 1923,  -55,
  139, -652,    0,    0, -211, -764, -737, -705, -215, -779,
    0, 1365, -479,    0, 1109, 1366,    0, 2162,    0,    0,
    0, 1108, 1110, 1078,  187,  680, -876,-1001,    0,    0,
 1952,    0, 1537, -492,    0,    0,    0, -205,    0,    0,
    0,    0,    0,    0,    0,    0, -360,    0, -222,    0,
 -440, -269, 1033, 1164,    0, 1092,    0,    0, 2309,  -74,
    0,    0,    0,    0, -974, -592, -801, 1352,    0, -434,
 -761, -820, -402,    0, -728, 1123,  201, -313, 2103, 1901,
 1693, 1370,    0,    0,   -2,    0,    0,    0,    0,    0,
 2369,    0,    0,    0,    0, 2388, 2179,    0,    0,    0,
    0,    0, 2397,    0,    0,    0,    0,  -17,    0,    0,
    0, -305, 1929, -297, 1539, -398,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2131,    0,    0, 1948,
    0,    0,    0, 2682,    0,    0,    0,    0, 2431,    0,
    0,    0,    0, 2268,    0, 2266,    0,    0,    0, 2046,
    0,    0,    0,    0,    0, -100,    0, 2029,    0,-1118,
 1307,    0, 2064, -585, 2071,    0, -800, 1853,    0,    0,
 -124, 1354,    0, 2600,    0, 1259,-1138,    0, 1361,    0,
 1142,    0, 1188,    0, 1104,    0,    0,    0, 2293,    0,
    0,    0,    0, 2132, 1918, -951,    0,  838,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2214,
 1213, 1733,    0,    0,    0,    0, -210, 2118, 2395,    0,
    0,
};
#define YYTABLESIZE 7810
static short yytable[] = {                                     128,
  183,   71,  163,  282,   70,  185,  166,  231,  177,   33,
  358,  168,  182,  457,  357,  362,  189,  253,  256,  676,
  553,  515,  194,  520,  681,  215,  903,  196,  554,  487,
  285,  790,  201,  793,  712,  219,  224,  662,  700,  220,
  843,  703,  254,  257,  865,  912,  226,  714,  485,  237,
  223,  239,  660,  218,  225,  228,  373,  128,  500,  745,
  955,  580,  613, 1084,   69,  240,  222,  238,  191,  373,
  242,  510,   69,  675,  452,  561,  836,  332,  693,  880,
 1147, 1088,  907, 1125,  500,  251,  255,  500,  652,  763,
  301,  221,  902,  645, 1131,  263, 1361, 1162,  699,  500,
  653,  880,  500,  654, 1228,  654,  659,   87,  252,  252,
  335,  510,  510, 1152,  300,  510,  882,  500, 1279,  693,
  299,  622,  693, 1546, 1049,  235, 1369,  130,  845, 1623,
  510,  412,  605, 1362,  561,  671,  332,  693,  327,  358,
  783,  653,  538,  357,  362, 1574, 1118,  412,  687,  378,
  441,  361,  656, 1118,  284,  453,   69,  699,  461,  653,
 1312, 1114,  510, 1318,  654,  659, 1323,  688, 1114,  477,
   69,  618,  365,  961,  252, 1539,  690,  691,  692,  693,
  652,  495,  252,  462,   69, 1234,  130,  259, 1115,  567,
  553,  373,  611,  368,  449, 1115, 1319, 1124,  554,  329,
  301,  538,  538,  760, 1055,  337,  368, 1132, 1136,  441,
  235,  567,  618, 1568,  645,  618,  112,  127,  437,  889,
 1116,  113,  659,  520,  451,   53,  708, 1116,  383,  444,
  618,  311, 1355,  119,  288, 1100,  665,  501,  622,  652,
  486,  622, 1190,  440,  258, 1137, 1059,  489,  746,  183,
  373,  502,  720,  449,  505,  648,  622, 1040, 1041,  987,
 1221,  538, 1223,  659,  337,  644,  708,  117,  118, 1191,
  567,  625,  516,  645,  518,  212,  338,  617,  302, 1310,
  361,  659, 1052,  289,  943,  568,  956, 1101,  259, 1295,
  572, 1260,  119, 1064, 1066,  570,  648,  330,  498,  648,
  710, 1192,  757,  175,  176,  189,  644,  708,  666,  312,
  708,  443, 1133,   15,  648,  625,  500,  500,  248, 1496,
  338, 1056,  980,  249,  644,  708,  610,  607,   83,  510,
  625,   83,  500, 1369,  879,  338,  259,   71,  615,  595,
  618,  610,  693, 1434,  597,  510,  258,  368,  510,  510,
  657,  510, 1631,  500,  962,  180,  510,  498,  414,  510,
 1324,  840,  428,  359,  189,  500, 1315,  430,  500,  623,
  443, 1118,  510, 1111, 1360,  328,   87,  686,  510,  651,
  577,  510, 1173,  586,  645,   75, 1114, 1168,  813,  759,
  844,  654,  812,  362,  654, 1553,  290,   89,  595,  693,
  442, 1465,  247,  597, 1632,  346, 1573,  130,  441,  605,
  670,  180,  457, 1115,  740, 1300,  339, 1423,  561,  653,
  651, 1507,  359,  652,  689, 1377,  380,  645, 1405,  653,
 1406,  107,  653, 1601,  654,  373,  562,  654,  651,  577,
  716,  653,  586,  301,  652, 1116, 1221, 1439,  924,  645,
  510,  926,  578,  561,  999,  373,  500,  441,  449,  654,
  339, 1429, 1270, 1365,  652,  932,  699,  250,  645,  901,
  742,  500,  510,  299,  612,  339,  920,  180,  500,   68,
  510,  561,  652,  341,  510,  561,  645,   68,  653,  784,
  618,  510,  950,  618,  659,  562,  500,  653,  762,  180,
  618,  561,  654,  618, 1466,  250,  250,  618,  994,  510,
  989,  500,  618,  183,  510,  618,  635,  636,  638,  768,
  769,  180, 1236,  741,   71, 1479,  500,  561, 1443,  814,
  500,  618,  693,  332,  337,  450, 1048,  337,  165,  510,
  693,  659,  653,  510,  578,  125,  645,  654,  659,  815,
  453,  450,  783,  538,  567,  618,  653,  461, 1275,  618,
  893,  654,  659,  659,  183, 1506,  708, 1445,  618,  443,
  441,   68,  578,  923,  648,   71, 1287,  652,  785,  920,
 1508,  610,  119,  566,  644,   68,  618,  648,  250,  567,
  918,  919,  449,  625, 1446, 1330,  648,  644, 1229,   68,
  625,  847,  337,  625,  234,  338,  644,  625,  338,  622,
  659,  645,  353,  618,  986,  625, 1106,  567,  443,  451,
  633,  567,  652, 1276,  585,  618, 1447,  359,  365, 1374,
  444,  625,  899,  618,  357,  358,  652,  567, 1042,  908,
  908, 1045,  566,  648,  129, 1285, 1354,  337,  489,  596,
  708,  116,  648,  644,  189,  625,  645, 1134, 1376,  337,
 1552,  337,  644,  567,  659,  370,  498,  189,  625, 1416,
  645,  353, 1437,  338, 1576,  809,  942,  944, 1163,  706,
  595,  364,  371,  585, 1123,  597,  625, 1298,  997, 1085,
  998,  625,  792,  357,  358, 1554, 1129,  648,  651,  643,
   83,  922,  586,  129,  809,  644, 1516,  644,  596, 1565,
 1117,  648,  105,  625, 1370,  362, 1151, 1117,  338,  989,
  651,  644,  362,  577,  586,  625,  189,  625,  129, 1568,
  338,  443,  338,  430,  365,  949,  848,  984, 1087,  941,
  364,  864,  652, 1566, 1567,  339,  645,  959,  339,  869,
 1299,  873,  874,  875,  876,  877, 1309,  869,  577,  645,
  633,  359,  430,  495,  652, 1617,  717,  651,  645,  939,
 1046,  971,  972,  973, 1043,  734,  651, 1356,  361,  562,
  106,  593,  360, 1044,   71,  430,  577,  755, 1047, 1586,
  577,  131,  363,  365,  435, 1189,  362, 1635,  608, 1135,
  810,  362, 1239, 1285,  495,  125,  577,  495,  498, 1438,
  122,  652,  735,  339,  562,  645, 1577, 1582, 1518,  160,
  652,  651,  495,  884,  645,  593, 1618,  116,  116,  810,
  837,  235,  577, 1533,  342,  651,  465,  361,  435,  608,
  593,  360,  562, 1153,  809,  929,  562,  718, 1407,  498,
  131,  363,  498,  435,  936, 1615,  756,  608,  339,  647,
  362,  893,  562,  422,  648,  652,  688,  498, 1427,  645,
  339,  353,  339,  235, 1256,  342,  353,  465,  342,  809,
  465,  173,  353, 1534,  570,  816,  162, 1633,  562,  719,
  809, 1294, 1154,  342, 1535,  465,  130,  884,  357,  358,
  165, 1000, 1001, 1005, 1497,  974, 1012, 1014, 1016,  913,
 1024, 1027, 1030, 1032, 1035, 1038,  123,  736, 1517, 1473,
 1314,  183,  129,  124,  129,  189,  566, 1468,  365, 1480,
  809,  258, 1193,  553, 1527, 1117,  570, 1529,  440,  430,
  362,  554,  663,  585, 1474,  364,  189,  366, 1068, 1069,
  131, 1071,   71, 1073,  235, 1143, 1076, 1077, 1078, 1079,
 1080, 1081,  269,  540,  809,  585, 1259,  170,  189,  810,
  708, 1373, 1062,  125,  189,  841,  809,  180, 1158,  809,
 1226, 1226, 1230,  914,  896,  545,  511, 1126, 1127,  566,
  596,  542,  186,  566, 1176, 1366,  235,  189,  365, 1536,
 1180,  819,  897, 1475,  810,  293, 1272,  564, 1274,  566,
  353,  708,  198,  654,  708,  810,  189,  505,  371,  654,
   90,  495,  540,  129,  189,  189,  511,  511,  809,  708,
  511,  189,  357,  358, 1174,  566, 1053,  125,  720,  441,
  495,  495,  361,  495,  545,  511,  360, 1065,  495,  189,
  542,  495,   71,   71,  294,  810,  363,  908,  505,  619,
  654,  505,   91, 1313,  495,  362,  498, 1093,   68,  346,
  495,  131,  654, 1435,   92, 1551,  505,  511,  654,  364,
 1607, 1094, 1130, 1562, 1018,  498,  498,  189,  498,  810,
 1648, 1251,   97,  498, 1153,  442,  498,  643,  189,   93,
  593, 1019,  324,  644, 1375, 1095,  473,  206,  505,  498,
 1628, 1629,  443,  258,  465,  498,  465,  608, 1588, 1598,
 1444,  362,  593,  208,  465, 1202, 1203,  608, 1205, 1207,
  608, 1322,  365,  265, 1640, 1326, 1212,  465,  108,  608,
  461,   71,  495, 1157, 1297, 1430, 1020, 1256, 1647,  258,
  203, 1589,  209,  453,  210,  473,  342,  849, 1009,  258,
 1096,  324,  508,  342,  495, 1564,  342,  295,  266,   94,
  342,  109,  495,  509,  473, 1021,  361,  544,  342,   95,
  360, 1243,  109,  495, 1010,  296,  608,  498,  204, 1250,
  363, 1252, 1253,  851,  342,  608,  267, 1255,  210,  362,
  268,  495, 1366,  853,   96,  213,  495,  647,  645,  498,
  646, 1609,  648,  210, 1634,  465,  269,  498,  342,  297,
  109,  183,  451, 1532,  908,  474,  498, 1093,  498,  216,
 1281,  342, 1643, 1378, 1585,  495,  544,  465, 1624,  228,
  608, 1094,  270, 1022,  511,  465,  498, 1415,  708,  342,
  708,  498,  608, 1610,  483,  109, 1532, 1448,  708,  475,
  511,  339, 1638,  511,  511, 1095,  511,  484, 1585,  344,
 1531,  511,  453, 1478,  511,  505,  342,  476, 1226,  465,
  498,  647,  645,  227,  646, 1473,  648,  511,  342, 1470,
  342,  505, 1327,  511,  505,  505,  511,  505, 1606,  528,
 1611, 1585,  505, 1531,  380,  505, 1336,  354, 1256, 1593,
 1474,  381,  232, 1341,  606,  377,  154,  605,  505, 1585,
 1096,  233,  322,  518,  505,   91, 1505,  505, 1481, 1532,
  649,  647,  645,  244,  646,  145,  648,  236,  654,  430,
  528,  451, 1093,  528, 1256, 1605, 1594,  461,  654,  708,
   71,  654,  245, 1532,  708,   45, 1094, 1467,  528, 1595,
  654,  502,   93,  380,  518,  511,   46,  518,  461, 1475,
  381,  708, 1504,   47,  377,  154, 1531,   41,  246,  708,
 1095,  322,  518,  647,  645,   49,  646,  511,  648, 1512,
  528,  118, 1485, 1513,  145,  511,  505,  500,   48,  511,
 1531,  461,  502,  464, 1642,  502,  511,  654,  264,  500,
  353,  611,  465,  708,  518, 1541,  654,  155,  505,  210,
  502,  353,  430,  280,  511,  611,  505,  281,  210,  511,
  505,  705,   94,  611,  704, 1096,   41,  505,  500, 1524,
   39,  500,   95,  461,   49,  643, 1453, 1454,  453,  611,
  500,  644,  502,  500,  511,  505,  500,  210,  511,  283,
  505,  654, 1409,   49,   90,  354, 1482,   96,  500,  210,
 1255,  616,  210,  210,  461,   22,  155,  286,  453,  453,
  248,  704, 1569,  252, 1410,  505, 1083,  210,  881,  505,
  317,  128, 1411, 1487,  670,  210,   50,  216,  461,   39,
   51,  303,  453, 1555,  611,   45,   91,   68,  146,  450,
 1483,  900,  616,   47,  314,  616,  453,  451,   92,  643,
  881,  248,  316,  451,  248,  644, 1412,  318,  128,  319,
  616,  670,  111,   71,   22,  121, 1572, 1555,  216,  248,
  704,  216, 1511,   93,  670,  349,  325,  451,  451, 1621,
 1514,   23,  811,  320,  340,  604,  216,  528,  345,   46,
  653,  336,  978,   48,   45,  977,  128,  146,  340,  643,
  816,  451,   47,  528, 1555,  644,  340,  528,  321,  528,
  810,  518,  451,  810,  528,  451,   43,  528,  647,  645,
 1525,  646,  340,  648,  121,   72,   73,  518,  128,  122,
  528,  518,  985,  518,  349,  779,  528,   15,  518,  528,
   23,  518,  332,   94,  145,  346,  334,  110,   46,  502,
  767,  643,   48,   95,  518,  305,  337,  644,  306,   44,
  518, 1255,  810,  518,  616,  502,  145,  355,  727,  502,
  728,  502,  354,  250,  817,   43,  502,  340,   96,  502,
  609,  647,  645, 1199,  646,  500,  648,  340,  122,  210,
  252,  767,  502,  708,  767,  145,   97, 1597,  502, 1063,
  892,  502,  977,  341,  307,  500,  110,  500,  528,  767,
 1086,  818,  500, 1085,  145,  500,  819,  500,   44,  500,
  708,  609,  820,  145,  609,  189,  377,  500,  500,  145,
  528,  369,  518,  371,  500,  175,  176,  398,  528,  609,
  500,  821,  528, 1220,  379, 1222,  345,  145,  210,  528,
  382,  347,  348,  349,  518,  175,  176,  652,  647,  645,
  384,  646,  518,  648,  386, 1105,  518,  528, 1104,  436,
  502,  387,  528,  518,  350,  351,  401,  402,  403,  352,
  353,  404,  405,  438,  189,  347,  348,  349,  407,  408,
 1145,  518,  502, 1144,  439, 1150,  518,  528, 1149, 1233,
  502,  528, 1232,  448,  502,  216,  500,  216,   15, 1333,
  610,  502, 1332,  352,  353,  216, 1364,  146,  500, 1363,
  616,  518,  450,  616, 1622,  518,  463, 1363,  500,  502,
  616,  884, 1646,  616,  502, 1568,  500,  616,  472,  146,
  500,  493,  616,  951,  952,  616,  480,  500,  500,  117,
  117,  610,  904,  905,  610,  500,  643,  503,  513,  502,
  517,  616,  644,  502,  565,  500,  569,  571,  146,  610,
  500,  880,  884,  884,  884,  884,  884,  896,  884,  573,
  599,  600,  500,  608,  604,  616,  371,  146, 1340,  616,
  884,  884,  884,  884,  620,  398,  146,  601,  616,  500,
  621, 1185,  146,  613,  625,  624,  216,  626,  627,  347,
  348,  349,  767,  175,  176,  781,  616,  628,  629,  643,
  146,  630,  884,  345,  884,  644,  631,  632,  216,  633,
  634,  640,  350,  351,  642,  650,  216,  352,  353,  404,
  405,  651,  653,  616,  655,  669,  407,  408,  673,  674,
  679,  682,  678,  684,  683,  616,  781,  781,  781,  781,
  781,  842,  781,  846,  464,  694,  850,  852,  854,  767,
  216,  695,  767,  697,  781,  781,  781,  781,  698,  767,
  346,  707,  767,  708,  731,  732,  767,  647,  645,  733,
  646,  767,  648,  738,  767,  743,  643,  250,  747,  609,
  749,  748,  644,  750,  189,  752,  753,  758,  781,  609,
  767,  764,  609,  765,  354,  767,  866,  647,  645,  791,
  646,  609,  648,  778,  633,  776,  189, 1075,  647,  645,
  787,  646,  252,  648,  767,  779,  788,  767,  767,  789,
  791, 1013,  827, 1017,  828, 1025, 1028,  767, 1033, 1036,
 1039,  830,  832,  834,  867,  189,  838,  839,  871,  888,
  791,  791,  791,  791,  791,  767,  791,  894,  609,  657,
  925,  920,  759,  930,  189,  931,  937,  609,  791,  791,
  791,  791,  189,  189,  938,  933,  347,  348,  349,  189,
  175,  176,  767,  884,  710,  884,  940,  946,  947,  948,
  957,  954,  963,  884,  767,  968,  767,  189,  970,  350,
  351,  884,  791,  975,  352,  353,  980,  884,  992,  189,
  884,  189,  609,  993,  995, 1007, 1051, 1054, 1057,  610,
 1049, 1237,  647,  645,  609,  646, 1067,  648, 1070,  610,
 1072, 1074,  610,  884,  884,  189,  354, 1090, 1082,  643,
  884,  610,  884,  884,  633,  736,  884, 1092, 1098,  605,
  884, 1110, 1107,  884,  252,  884, 1119,  884, 1128, 1138,
  189, 1141,  884,  884, 1146,  884, 1148,  781, 1155,  781,
 1159, 1160, 1161, 1169, 1171,  884, 1178,  781,  884,  223,
  896,  884,  884,  986,  884,  781,  736, 1181,  610,  736,
 1183,  781, 1182,  884,  781,  884, 1184,  610,  884, 1186,
  884,  884,  884, 1187,  736,  884, 1196, 1197,  884,  884,
 1198, 1200, 1201, 1208, 1209,  643, 1210,  781,  884,  809,
  223,  644, 1211,  223,  781, 1213,  781,  781,  248, 1214,
  781, 1215, 1216,  884,  781, 1217,  884,  781,  223,  781,
 1218,  781,  610, 1219, 1254,  643,  781,  781, 1235,  781,
 1261,  644,  884, 1264,  610,  345,  643, 1265, 1262, 1263,
 1266, 1268,  644,  884,  794,  781,  781, 1273,  781,  248,
 1277,  791,  248,  791, 1271,  884, 1278,  884, 1296,  495,
 1311,  791,  781,  884,  781,  781,  781,  248, 1288,  781,
 1289, 1290,  781,  781, 1291,  791,  647,  645,  791,  646,
 1292,  648,  781, 1286, 1293,  794,  794,  794,  794,  794,
 1301,  794, 1316, 1528, 1320, 1188, 1321,  781, 1325, 1331,
  781,  791, 1352,  794,  794,  794,  794, 1353,  791, 1357,
  791,  791, 1417, 1418,  791,  399,  781, 1371,  791, 1420,
 1421,  791, 1422,  791, 1419,  791, 1424,  781, 1425, 1426,
  791,  791, 1433,  791, 1436, 1441, 1440,  794, 1442,  781,
  643,  781, 1449, 1450, 1451, 1452,  644,  781,  795,  791,
  791, 1455,  791, 1238,  647,  645, 1456,  646, 1188,  648,
 1457, 1458, 1459, 1460, 1461, 1462,  791,  345,  791,  791,
  791, 1463, 1464,  791, 1471, 1484,  791,  791,  884,  884,
 1472, 1486,  106, 1489,  398, 1488,  791,  736, 1490,  795,
  795,  795,  795,  795,  884,  795, 1491, 1492,  347,  348,
  349,  791,  175,  176,  791, 1493, 1494,  795,  795,  795,
  795, 1500, 1501, 1503, 1502, 1515, 1509,  884, 1520,  884,
  791,  350,  351, 1521,  346, 1522,  352,  353,  404,  405,
 1526,  791,  789,  884, 1523,  407,  408,  235, 1542,  223,
 1570,  795, 1578,  791,  736,  791, 1580,  736, 1584, 1587,
 1591,  791, 1599, 1603,  736,  884, 1592,  736, 1241,  647,
  645,  736,  646, 1363,  648, 1604,  736, 1577, 1576,  736,
 1614, 1616, 1625,  789, 1620,  789,  789,  789, 1627, 1626,
 1630, 1568, 1641, 1644, 1645,  736,  248,    1,  248,  196,
   27,  789,  789,  789,  789,  593,  248,   29, 1242,  647,
  645,  708,  646,  346,  648,  261,  794,  142,  794,  736,
  498,  601,  736,  736,  643,  259,  794, 1244,  647,  645,
  644,  646,  736,  648,  206,  789,  498,  266,   79,  432,
  347,  348,  349,  794,  175,  176,  186,  373,  235,  498,
  736, 1245,  647,  645,  633,  646,  631,  648,  627,  629,
  265,  347,  187,  350,  351,  665,  794,  664,  352,  353,
  235,  659,  666,  794,  304,  794,  794,  736,  235,  794,
  737,  311,  622,  794,  675,  302,  794,   25,  794,  736,
  794,  736,   28,   35, 1224,  794,  794,  248,  794, 1246,
  647,  645,  643,  646,  114,  648,  385,  376,  644,  375,
  829, 1179,  235,  777,  794,  794,  991,  794, 1177,  248,
  795,  737,  795,  217,  737, 1175, 1428,  248, 1165,  526,
  795,  794,   90,  794,  794,  794,  482,  468,  794,  737,
  744,  794,  794, 1109, 1156,  381,  935,  795,  835, 1166,
  497,  794, 1247,  647,  645,  498,  646, 1408,  648, 1575,
 1414,  248, 1581, 1579, 1613,  928,  794, 1280, 1639,  794,
  795, 1540,  726,  603,   91, 1608, 1432,  795, 1583,  795,
  795, 1167,  774,  795,  979,  794,   92,  795,  506,  788,
  795,  730,  795, 1431,  795,  488,  794,  479,  969,  795,
  795, 1308,  795,  766,  789,  116,  789,  643,  794,  960,
  794,   93,  449,  644,  789,  664,  794,  668,  795,  795,
  906,  795,  647,  645,  895,  646, 1469,  648,  890,  262,
  788,  789,  788,  788,  788,  795,  891,  795,  795,  795,
 1519, 1476,  795, 1619, 1089,  795,  795,  643,  788,  788,
  788,  788, 1590,  644,  789,  795,  677, 1649,  602,  833,
 1061,  789, 1204,  789,  789,    0,  643,  789,    0,    0,
  795,  789,  644,  795,  789,    0,  789,  878,  789,    0,
    0,   94,  788,  789,  789,    0,  789,    0,    0,  795,
  643,   95,    0, 1248,  647,  645,  644,  646,    0,  648,
  795,    0,  789,  789,    0,  789,    0,    0,    0, 1249,
  647,  645,  795,  646,  795,  648,   96,  475,  500,  789,
  795,  789,  789,  789,    0,    0,  789,  790,    0,  789,
  789,    0,    0,    0,   97,    0,    0,    0,  643,  789,
    0,    0,  737,    0,  644, 1358,  647,  645,    0,  646,
    0,  648,    0,    0,  789,    0,    0,  789,  475,  500,
    0,  475,  500,    0,    0,    0,    0,    0,  790,    0,
  790,  790,  790,  789,    0,    0,  475,  500,    0,    0,
    0,    0,    0,   76,  789,    0,  790,  790,  790,  790,
   77,  643,    0,    0,   78,   79,  789,  644,  789,  737,
  224,    0,  737,   80,  789,    0,  244,    0,    0,  737,
    0,  793,  737,    0,    0,   81,  737,    0,    0,    0,
  790,  737,    0,    0,  737, 1359,  647,  645,    0,  646,
    0,  648,  855,  856,  857,  858,  859,  860,  861,  862,
  737,  224, 1339,    0,  224,    0,    0,  244,    0,    0,
  244,  788,  793,  788,  793,  793,  793,    0,    0,  224,
  643,  788,    0,    0,  737,  244,  644,  737,  737,    0,
  793,  793,  793,  793,    0,    0,    0,  737,  788,    0,
   82,    0,    0,    0,    0,  245,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  737,    0,    0,   83,    0,
    0,  788,    0,    0,  793,    0,    0,    0,  788,    0,
  788,  788,    0,   84,  788,    0,    0,   85,  788,    0,
    0,  788,  737,  788,    0,  788,  245,    0,   86,  245,
  788,  788,  643,  788,  737,    0,  737,    0,  644,    0,
  647,  645,    0,  646,  245,  648,    0,   87,  643,  788,
  788,    0,  788,    0,  644,    0,    0, 1563,    0,  473,
  585,    0,    0,  409,    0,  410,  788,    0,  788,  788,
  788,    0,    0,  788,    0,    0,  788,  788,  412,    0,
    0,  519,    0,  252,  643,    0,  788,    0,    0,  790,
  644,  790,    0,    0,    0,  475,  500,  475,  500,  790,
    0,  788,  475,  500,  788,  475,  500,    0,    0,    0,
  474,    0,    0,    0,    0,    0,  790,    0,  475,  500,
  788,    0,    0,    0,    0,    0,    0,    0,    0,  464,
    0,  788,  585,    0,    0,  409,    0,  410,  465,  790,
    0,    0,    0,  788,  475,  788,  790,    0,  790,  790,
  412,  788,  790,    0,    0,  252,  790,    0,    0,  790,
    0,  790,  476,  790,  643,    0,    0,    0,  790,  790,
  644,  790,    0,  793,    0,  793,    0,    0,  235,    0,
  224,    0,    0,  793,  244,    0,  244,  790,  790,    0,
  790,    0,    0,    0,  244,    0,  475,  500,    0,    0,
  793,    0,    0,    0,  790,    0,  790,  790,  790,    0,
   55,  790,    0,    0,  790,  790,    0,    0,  475,  500,
    0,   56,    0,  793,  790,    0,  475,  500,   57,    0,
  793,    0,  793,  793,    0,    0,  793,    0,    0,  790,
  793,   58,  790,  793,    0,  793,    0,  793,    0,    0,
    0,    0,  793,  793,    0,  793,    0,    0,  790,    0,
  475,  500,  174,  245,    0,  245,  170,    0,    0,  790,
    0,  793,  793,  245,  793,    0,    0,    0,  643,  235,
    0,  790,    0,  790,  644,  244,    0,  388,  793,  790,
  793,  793,  793,    0,    0,  793,  389,    0,  793,  793,
    0,  235,    0,  174,    0,    0,  174,  244,  793,  235,
  390,    0,    0,  581,    0,  244,  345,  391,   59,    0,
    0,  174,    0,  793,    0,  170,  793,    0,    0,    0,
    0,    0,    0,    0,    0,  582,   60,    0,    0,  180,
    0,    0,  793,  235,    0,    0,    0,  392,    0,  244,
    0,   61,    0,  793,    0,   62,    0,    0,   63,  388,
    0,    0,    0,    0,  245,  793,   64,  793,  389,    0,
    0,    0,    0,  793,    0,  393,  394,    0,  643,    0,
  643,  643,  390,  643,    0,   65,  245,  395,  345,  391,
    0,  396,    0,    0,  245,    0,  643,    0,  180,  583,
    0,  643,    0,    0,    0,    0,    0,  582,    0, 1328,
 1329,    0,    0,    0,    0,    0,    0,    0,    0,  392,
 1334, 1335,    0, 1337, 1338,    0,    0,  181,  245,    0,
    0, 1342, 1343, 1344, 1345,    0, 1346, 1347, 1348, 1349,
 1350, 1351,    0,  584,    0,    0,    0,  393,  394,    0,
    0,  641,    0,  641,  641,  397,  641,    0,    0,  395,
    0,    0,    0,  396,    0,  398,    0,    0,    0,  641,
    0,  583,    0,    0,  641,    0,    0,    0,    0,  347,
  348,  349,  399,  175,  176,    0,  181,    0,    0,    0,
    0,    0,    0,  400,    0,    0,    0,    0,    0,    0,
    0,    0,  350,  351,  401,  402,  403,  352,  353,  404,
  405,  637,  406,    0,    0,  584,  407,  408,    0,    0,
  174,    0,    0,    0,  170,    0,    0,  397,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  398,    0,    0,
    0,  174,    0,    0,    0,  170,    0,    0,    0,    0,
    0,  347,  348,  349,  399,  175,  176,    0,    0,    0,
    0,    0,    0,  174,    0,  400,    0,  170,    0,  174,
    0,    0,    0,  170,  350,  351,  401,  402,  403,  352,
  353,  404,  405,    0,  406,    0,    0,    0,  407,  408,
    0,    0,  174,    0,    0,    0,  170,  180,  643,    0,
    0,    0,    0,    0,  585,  643,    0,  409,    0,  410,
    0,  174,    0,    0,  643,  170,    0,    0,  180,    0,
  174,    0,  412,    0,  170,    0,  174,  252,  643,    0,
  170,    0,    0,    0,  643,  643,    0,    0,    0,    0,
  180,    0,  643,    0,  174,    0,  180,    0,  170,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  643,    0,    0,    0,  180,
    0,  641,    0,    0,    0,    0,    0,    0,  641,    0,
    0,    0,  174,    0,    0,  181,  170,  641,  180,    0,
    0,  643,    0,  643,  643,    0,    0,  180,    0,    0,
    0,  641,    0,  180,    0,  643,  181,  641,  641,  643,
    0,    0,    0,    0,  411,  641,    0,  409,    0,  410,
    0,  180,    0,    0,    0,    0,    0,    0,  181,    0,
    0,    0,  412,    0,  181,    0,    0,  252,  641,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  181,    0,  180,
    0,    0,    0,    0,  641,    0,  641,  641,    0,    0,
    0,    0,    0,  643,    0,    0,  181,    0,  641,    0,
    0,    0,  641,  643,    0,  181,    0,    0,    0,    0,
    0,  181,    0,    0,    0,    0,    0,  643,  643,  643,
  643,  643,  643,    0,    0,    0,    0,    0,    0,  181,
    0,  643,    0,    0,    0,    0,    0,    0,    0,    0,
  643,  643,  643,  643,  643,  643,  643,  643,  643,    0,
  643,  388,    0,    0,  643,  643,    0,    0,    0,    0,
  389,    0,    0,    0,    0,    0,  641,  181,    0,    0,
    0,    0,    0,    0,  390,    0,  641,    0,    0,    0,
  345,  391,    0,    0,  411,    0,    0,  409,    0,  410,
  641,  641,  641,  641,  641,  641,    0,    0,    0,  582,
    0,    0,  412,    0,  641,    0,    0,  252,    0,    0,
    0,  392,    0,  641,  641,  641,  641,  641,  641,  641,
  641,  641,    0,  641,    0,    0,    0,  641,  641,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  393,
  394,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  395,    0,    0, 1002,  396,    0, 1003,    0,    0,
    0,  388,    0,  583,    0,    0,    0,    0,    0,  411,
  389,    0,  409,    0,  410,  866,  647,  645,    0,  646,
    0,  648,    0,    0,  390,    0,    0,  412,    0,    0,
  345,  391,  252,    0,  807,  806,  808,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  584,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  397,
    0,  392,    0,    0,    0,    0,    0,    0,    0,  398,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  347,  348,  349,  399,  175,  176,  393,
  394,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,  395,    0,    0,    0,  396,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0,    0,
  407,  408,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1278,    0, 1011,    0,    0, 1003,    0,    0,
    0,  388,    0,    0,    0,    0,    0,    0,    0,  411,
  389, 1004,  409,    0,  410,    0,    0,    0,    0,  397,
    0,    0,    0,    6,  390,    0,    0,  412,    0,  398,
  345,  391,  252,    0, 1380, 1381,    0, 1382,    0,    0,
 1383,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0, 1384,    0,    0,  400,    0,    0,
 1385,  392,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0, 1015,
  407,  408, 1003,    0,    0,    0,  388,    0,    0,  393,
  394,    0,    0,    0,  411,  389,  794,  409,    0,  410,
 1278,  395,    0,    0,  643,  396,    0,    0,    0,  390,
  644,    0,  412,  795,    0,  345,  391,  252,    0,    0,
 1386,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    6,    0,    0,    0,    0,    0,    0, 1379,    0,
   15,    0, 1380, 1381,    0, 1382,  392,    0, 1383,  796,
    0,    0,    0,    0,    0, 1387,    0,    0,  797,    0,
    0, 1004, 1384,    0,    0,   17,  798,    0, 1385,  397,
    0,    0,    0,    0,  393,  394, 1388,    0,    0,  398,
    0,    0,    0,  450,    0,  799,  395,  800,    0,    0,
  396,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,  801,    0,  802,  803,  804,    0,  400,    0,    0,
    0,    0, 1389,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0, 1386, 1023,
  407,  408, 1003,    0,    0,    0,  388,    0,    0,    0,
    0,    0,    0,    0,  411,  389, 1004,  409,   15,  410,
    0,    0,    0,    0,  397,  805,    0,    0,    0,  390,
    0,    0,  412, 1387,  398,  345,  391,  252,    0,    0,
    0,    0,    0,   17,    0,    0,    0,    0,  347,  348,
  349,  399,  175,  176, 1388,    0,    0,    0,    0,    0,
    0,  450,  400,    0,    0,    0,  392,    0,    0,    0,
    0,  350,  351,  401,  402,  403,  352,  353,  404,  405,
    0,  406,    0,    0, 1026,  407,  408, 1003,    0,    0,
 1389,  388,    0,    0,  393,  394,    0,    0,    0,  411,
  389,    0,  409,    0,  410,    0,  395,    0,    0,    0,
  396,    0,    0,    0,  390,  134,    0,  412,    0,    0,
  345,  391,  252,    0,  135,  136,  137,  138,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
    0,    0,  151,  152,  153,  154,  155,    0,    0,  156,
  157,  392,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1004,    0,    0,    0,
    0,    0,    0,    0,  397,    0,    0,    0,    0,  393,
  394,    0,    0,    0,  398,    0,    0,    0,    0,    0,
    0,  395,    0,    0,    0,  396,    0,    0,  347,  348,
  349,  399,  175,  176,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,  350,  351,  401,  402,  403,  352,  353,  404,  405,
    0,  406,    0,    0, 1031,  407,  408, 1003,    0,    0,
    0,  388,    0,    0,    0,    0,    0,    0,    0,  411,
  389, 1004,  409,    0,  410,    0,    0,    0,    0,  397,
    0,    0,    0,    0,  390,    0,    0,  412,    0,  398,
  345,  391,  252,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,  392,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0, 1034,
  407,  408, 1003,    0,    0,    0,  388,    0,    0,  393,
  394,    0,    0,    0,  411,  389,  429,  409,    0,  410,
    0,  395,    0,    0,    0,  396,    0,    0,    0,  390,
  504,    0,  412,    0,    0,  345,  391,  252,    0,  135,
  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,    0,    0,  151,  152,  153,
  154,  155,    0,    0,  156,  157,  392,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1004,    0,    0,    0,    0,    0,    0,    0,  397,
    0,    0,    0,    0,  393,  394,    0,    0,    0,  398,
    0,    0,    0,    0,    0,    0,  395,    0,    0,    0,
  396,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,    0,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0, 1037,
  407,  408, 1003,    0,    0,    0,  388,    0,    0,    0,
    0,    0,    0,    0,  411,  389, 1004,  409,    0,  410,
    0,    0,    0,    0,  397,    0,    0,    0,    0,  390,
    0,    0,  412,    0,  398,  345,  391,  252,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  347,  348,
  349,  399,  175,  176,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,  392,    0,    0,    0,
    0,  350,  351,  401,  402,  403,  352,  353,  404,  405,
    0,  406,    0,    0,    0,  407,  408,    0,    0,    0,
    0,  388,    0,    0,  393,  394,    0,    0,    0,  878,
  389,  878,  878,    0,  878,    0,  395,    0,    0,    0,
  396,    0,    0,  428,  390,    0,    0,  878,    0,    0,
  345,  391,  878,  428,  428,  428,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,  428,    0,    0,
  428,  428,  428,  428,  428,    0,    0,  428,  428,    0,
    0,  392,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1004,    0,    0,    0,
    0,    0,    0,    0,  397,    0,    0,  346,    0,  393,
  394,    0,    0,    0,  398,    0,    0,    0,    0,    0,
    0,  395,    0,    0,    0,  396,    0,    0,  347,  348,
  349,  399,  175,  176,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,  350,  351,  401,  402,  403,  352,  353,  404,  405,
    0,  406,    0,    0,    0,  407,  408,    0,    0,    0,
    0,  388,    0,    0,    0,    0,    0,    0,    0,  643,
  389,    0,  643,    0,  643,    0,    0,    0,    0,  397,
    0,    0,    0,    0,  390,    0,    0,  643,    0,  398,
  345,  391,  643,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,  392,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0,    0,
  407,  408,    0,    0,    0,    0,  878,  346,    0,  393,
  394,    0,    0,    0,  411,  878,    0,  409,    0,  410,
    0,  395,    0,  214,    0,  396,    0,  214,    0,  878,
    0,    0,  412,    0,    0,  878,  878,  252,    0,    0,
    0,    0,  214,    0,    0,    0,  214,    0,    0,  214,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  878,    0,    0,    0,
    0,    0,    0,  637,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  397,
  214,    0,  878,    0,  878,  878,  214,  214,  214,  398,
  214,  214,  214,    0,  214,    0,  878,    0,    0,    0,
  878,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,  214,    0,  214,  400,    0,    0,
    0,    0,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0,  643,
  407,  408,    0,    0,    0,    0,  643,  214,    0,    0,
    0,    0,    0,   78,  411,  643,    0,  409,    0,  410,
    0,    0,    0,    0,  878,  214,    0,    0,    0,  643,
    0,    0,  412,    0,  878,  643,  643,  252,    0,    0,
    0,    0,    0,  643,    0,    0,    0,  214,  878,  878,
  878,  878,  878,  878,    0,    0,    0,    0,    0,    0,
    0,    0,  878,    0,    0,    0,  643,    0,    0,    0,
    0,  878,  878,  878,  878,  878,  878,  878,  878,  878,
    0,  878,  214,  214,    0,  878,  878,    0,    0,    0,
    0,  388,    0,    0,  643,  643,    0,    0,  214,  214,
  389,    0,    0,    0,    0,    0,  643,    0,    0,    0,
  643,    0,  411,  868,  390,  409,    0,  410,    0,    0,
  345,  391,    0,    0,    0,    0,    0,    0,    0,    0,
  412,    0,    0,    0,    0,  252,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  392,    0,    0,    0,    0,    0,    0,  411,    0,
    0,  409,    0,  410,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  643,    0,  412,    0,    0,  393,
  394,  252,    0,    0,  643,    0,    0,    0,    0,    0,
    0,  395,    0,    0,    0,  396,    0,    0,  643,  643,
  643,  643,  643,  643,    0,    0,    0,    0,    0,    0,
    0,    0,  643,    0,    0,    0,    0,    0,    0,    0,
    0,  643,  643,  643,  643,  643,  643,  643,  643,  643,
    0,  643,    0,    0,    0,  643,  643,    0,    0,    0,
    0,  388,    0,  637,    0,    0,    0,    0,    0,    0,
  389,    0,    0,    0,    0,    0,    0,    0,    0,  397,
    0,    0,    0,    0,  390,    0,    0,    0,    0,  398,
  345,  391,    0,    0,    0,    0,    0,  780,    0,    0,
    0,  528,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,    0,    0,  781,  400,    0,    0,
  529,  392,    0,  530,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0,    0,
  407,  408,    0,    0,    0,    0,    0,  346,    0,  393,
  394,    0,    0,    0,    0,    1,    0,    0,    0,  388,
    0,  395,    0,    0,  531,  396,    0,    0,  389,    0,
  532,  533,  534,    0,  535,  536,  537,    2,  538,    0,
    0,  411,  390,    0,  409,    3,  410,    0,  345,  391,
    0,    0,    4,    0,    5,    0,    6,    0,  539,  412,
  540,    7,    0,    0,  252,  388,    0,    0,    8,    0,
    0,    0,    0,    0,  389,    0,    0,    0,    0,  392,
    0,    0,    9,    0,    0,    0,    0, 1560,  390,  397,
  409,  541,  410,   10,  345,  391,    0,    0,    0,  398,
    0,    0,    0,    0,    0,  412,    0,  393,  394,  542,
  252,    0,    0,  347,  348,  349,  399,  175,  176,  395,
    0,    0,    0,  396,    0,  392,    0,  400,    0,    0,
    0,  543,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,    0,  406,    0,    0,    0,
  407,  408,    0,  393,  394,    0,    0,    0,    0,    0,
   11,    0,   12,    0,    0,  395,  544,  545,   13,  396,
    0,   14,    0,   15,   16,    0,    0,    0,    0,    0,
    0,    0,  546,  547,    0,  411,    0,  397,  409,    0,
  410,    0,    0,    0,    0,    0,    0,  398,   17,    0,
    0,    0,    0,  412,    0,    0,    0,    0,  252,    0,
    0,  347,  348,  349,  399,  175,  176,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,  397,  350,  351,  401,  402,  403,  352,
  353,  404,  405,  398,  406,    0,    0,    0,  407,  408,
    0,    0,  761,    0, 1029,    0,    0,  347,  348,  349,
  399,  175,  176,    0,    0,    0,    0,    0,  388,    0,
    0,  400,    0,    0,    0,    0,    0,  389,    0,    0,
  350,  351,  401,  402,  403,  352,  353,  404,  405,    0,
  406,  390,    0,  761,  407,  408,  761,  345,  391,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  761,    0,    0,  388,    0,    0,    0,    0,    0,
    0,    0,    0,  389,    0,    0,    0,    0,  392,  878,
    0,    0,  878,    0,  878,    0,    0,  390,    0,    0,
    0,    0,    0,  345,  391,    0,    0,  878,    0,  740,
    0,    0,  878,    0,    0,    0,  393,  394,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  395,    0,
    0,    0,  396,    0,  392,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  740,    0,    0,  740,    0,    0,    0,    0,    0,    0,
  346,    0,  393,  394,    0,    0,    0,    0,  740,    0,
    0,    0,  388,    0,  395,    0,    0,    0,  396,    0,
    0,  389,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,  397,    0,    0,    0,
    0,  345,  391,    0,    0,    0,  398,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1206,    0,    0,
  347,  348,  349,  399,  175,  176,    0,    0,    0,    0,
    0,    0,  392,    0,  400,    0,    0,    0,    0,    0,
    0,    0,  397,  350,  351,  401,  402,  403,  352,  353,
  404,  405,  398,  406,    0,    0,    0,  407,  408,    0,
  393,  394,    0,    0,  738,    0,  347,  348,  349,  399,
  175,  176,  395,    0,  761,    0,  396,    0,    0,    0,
  400,    0,    0,    0,    0,    0,    0,    0,    0,  350,
  351,  401,  402,  403,  352,  353,  404,  405,    0,  406,
    0,    0,    0,  407,  408,  738,    0,    0,  738,    0,
    0,    0,    0,    0,  739,    0,  878,    0,    0,    0,
    0,    0,    0,  738,    0,  878,    0,    0,    0,    0,
    0,  761,    0,    0,  761,    0,    0,    0,    0,  878,
  397,  761,    0,    0,  761,  878,  878,    0,  761,    0,
  398,    0,    0,  761,    0,  739,  761,    0,  739,    0,
    0,    0,    0,    0,  347,  348,  349,  399,  175,  176,
    0,  740,  761,  739,    0,    0,  878,    0,  400,    0,
    0,    0,    0,    0,    0,    0,    0,  350,  351,  401,
  402,  403,  352,  353,  404,  405,  761,  406,    0,  761,
  761,  407,  408,  769,  878,  878,    0,    0,    0,  761,
    0,    0,    0,    0,  733,    0,  878,    0,    0,    0,
  878,    0,    0,    0,    0,    0,    0,  761,  740,    0,
    0,  740,    0,    0,    0,    0,    0,    0,  740,    0,
    0,  740,    0,    0,  769,  740,    0,  769,    0,    0,
  740,    0,    0,  740,  761,  733,    0,    0,  733,    0,
    0,    0,  769,    0,    0,    0,  761,    0,  761,  740,
    0,    0,    0,  733,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  878,    0,    0,    0,    0,    0,
    0,    0,    0,  740,  878,    0,  740,  740,    0,    0,
    0,    0,    0,  734,    0,    0,  740,    0,  878,  878,
  878,  878,  878,  878,  735,    0,    0,    0,    0,    0,
    0,    0,  878,    0,  740,    0,  738,    0,    0,    0,
    0,  878,  878,  878,  878,  878,  878,  878,  878,  878,
    0,  878,    0,    0,  734,  878,  878,  734,    0,    0,
    0,  740,    0,    0,    0,  735,    0,    0,  735,    0,
    0,    0,  734,  740,    0,  740,    0,    0,    0,    0,
    0,    0,    0,  735,    0,    0,  739,    0,    0,    0,
    0,    0,    0,  738,    0,    0,  738,    0,    0,    0,
  768,    0,    0,  738,    0,    0,  738,    0,    0,    0,
  738,    0,    0,    0,    0,  738,    0,    0,  738,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  762,
    0,    0,    0,    0,  738,    0,    0,    0,    0,    0,
    0,  768,    0,  739,  768,    0,  739,    0,    0,    0,
    0,    0,    0,  739,    0,    0,  739,    0,  738,  768,
  739,  738,  738,  770,    0,  739,    0,    0,  739,    0,
  762,  738,    0,  762,    0,  769,    0,    0,    0,    0,
    0,    0,    0,    0,  739,    0,  733,    0,  762,  738,
    0,    0,  771,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  770,    0,    0,  770,  739,    0,
    0,  739,  739,    0,    0,    0,  738,    0,    0,    0,
    0,  739,  770,    0,    0,    0,    0,    0,  738,    0,
  738,    0,  769,  771,    0,  769,  771,    0,    0,  739,
    0,    0,  769,  733,    0,  769,  733,    0,    0,  769,
    0,  771,    0,  733,  769,    0,  733,  769,    0,    0,
  733,    0,    0,    0,    0,  733,  739,    0,  733,    0,
    0,    0,  759,  769,    0,  734,    0,    0,  739,    0,
  739,    0,    0,    0,  733,    0,  735,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  769,    0,    0,
  769,  769,    0,    0,    0,    0,    0,    0,  733,    0,
  769,  733,  733,  759,    0,    0,  759,    0,    0,    0,
    0,  733,    0,    0,    0,    0,    0,    0,  769,    0,
    0,  759,  734,    0,    0,  734,    0,    0,    0,  733,
    0,    0,  734,  735,    0,  734,  735,    0,  763,  734,
    0,    0,    0,  735,  734,  769,  735,  734,    0,    0,
  735,    0,  768,    0,    0,  735,  733,  769,  735,  769,
    0,    0,    0,  734,  772,    0,    0,    0,  733,    0,
  733,    0,    0,    0,  735,    0,    0,    0,    0,  763,
    0,  762,  763,    0,    0,    0,    0,  734,    0,    0,
  734,  734,    0,    0,    0,    0,    0,  763,  735,    0,
  734,  735,  735,    0,    0,  772,    0,    0,  772,  768,
    0,  735,  768,    0,    0,  770,    0,    0,  734,  768,
    0,    0,  768,  772,    0,    0,  768,    0,    0,  735,
    0,  768,    0,    0,  768,    0,    0,    0,  762,    0,
  760,  762,    0,    0,  771,  734,    0,    0,  762,    0,
  768,  762,    0,    0,    0,  762,  735,  734,    0,  734,
  762,    0,    0,  762,    0,    0,    0,    0,  735,    0,
  735,    0,  770,    0,  768,  770,    0,  768,  768,  762,
    0,  760,  770,    0,  760,  770,    0,  768,    0,  770,
    0,    0,    0,    0,  770,    0,    0,  770,    0,  760,
    0,  771,    0,  762,  771,  768,  762,  762,    0,    0,
    0,  771,    0,  770,  771,    0,  762,    0,  771,    0,
    0,  764,    0,  771,  759,    0,  771,    0,    0,    0,
    0,    0,  768,    0,  762,    0,    0,  770,    0,    0,
  770,  770,  771,    0,  768,    0,  768,    0,    0,    0,
  770,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  762,  764,    0,    0,  764,  771,    0,  770,  771,
  771,  719,    0,  762,    0,  762,    0,    0,    0,  771,
  764,  759,    0,    0,  759,    0,    0,    0,    0,    0,
    0,  759,    0,    0,  759,  770,    0,  771,  759,    0,
  763,    0,    0,  759,    0,    0,  759,  770,    0,  770,
    0,    0,  719,    0,    0,  719,    0,    0,    0,    0,
    0,  613,  759,    0,  771,    0,  772,    0,    0,    0,
  719,    0,    0,    0,    0,    0,  771,    0,  771,    0,
    0,    0,    0,    0,    0,    0,  759,    0,    0,  759,
  759,    0,    0,    0,    0,    0,    0,  763,    0,  759,
  763,    0,  613,    0,    0,  613,    0,  763,    0,    0,
  763,    0,    0,    0,  763,    0,    0,  759,    0,  763,
  613,    0,  763,  772,    0,    0,  772,    0,    0,    0,
    0,    0,    0,  772,    0,    0,  772,    0,  763,    0,
  772,    0,  760,    0,  759,  772,    0,    0,  772,    0,
    0,    0,    0,    0,    0,    0,  759,    0,  759,    0,
    0,    0,  763,    0,  772,  763,  763,    0,    0,    0,
    0,    0,    0,    0,    0,  763,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  772,    0,
    0,  772,  772,  763,    0,  647,  645,    0,  646,  760,
  648,  772,  760,    0,    0,    0,    0,    0,    0,  760,
    0,    0,  760,  807,  806,  808,  760,    0,    0,  772,
  763,  760,    0,  764,  760,    0,    0,    0,    0,    0,
    0,    0,  763,    0,  763,    0,    0,    0,    0,    0,
  760,    0,    0,    0,    0,    0,  772,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  772,    0,
  772,    0,    0,    0,  760,    0,    0,  760,  760,    0,
    0,    0,    0,    0,    0,    0,    0,  760,    0,    0,
  764,    0,    0,  764,    0,    0,    0,    0,    0,    0,
  764,    0,    0,  764,    0,  760,    0,  764,    0,    0,
    0,    0,  764,    0,    0,  764,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  764,  760,    0,    0,    0,    0,    0,    0,    0,
  719,    0,    0,  719,  760,    0,  760,    0,    0,    0,
  719,    0,    0,  719,    0,  764,    0,  719,  764,  764,
    0,    0,  719,    0,    0,  719,    0,    0,  764,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  719,    0,    0,    0,    0,  764,    0,    0,    0,
  613,    0,    0,  613,    0,    0,    0,    0,    0,    0,
  613,    0,    0,  613,    0,  719,    0,  613,  719,  719,
    0,    0,  613,  764,    0,  613,    0,    0,  719,    0,
    0,    0,    0,    0,    0,  764,    0,  764,    0,    0,
    0,  613,    0,    0,    0,  794,  719,    0,    0,    0,
    0,    0,    0,  643,    0,    0,    0,    0,    0,  644,
    0,    0,  795,    0,    0,  613,    0,    0,    0,  613,
    0,    0,    0,  719,    0,    0,    0,    0,  613,    0,
    0,    0,  527,    0,    0,  719,  528,  719,    0,    0,
    0,  527,    0,    0,  710,  528,  613,    0,  796,    0,
    0,    0,    0,    0,    0,  529,    0,  797,  530,    0,
    0,    0,    0,    0,  529,  798,    0,  530,    0,    0,
    0,    0,    0,  613,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  799,  613,  800,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  531,
  801,    0,  802,  803,  804,  532,  533,  534,  531,  535,
  536,  537,    0,  538,  532,  533,  534,    0,  535,  536,
  537,    0,  538,    0,    0,    0,    0,    0,    0,    0,
  214,    0,    0,  539,  214,  540,    0,    0,    0,    0,
    0,    0,  539,    0,  540,    0,    0,    0,    0,  214,
    0,    0,    0,  214,  805,    0,  214,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  541,    0,    0,    0,
    0,    0,    0,    0,    0,  541,    0,    0,    0,    0,
    0,    0,    0,    0,  542,    0,    0,    0,    0,    0,
    0,    0,    0,  542,    0,    0,  527,  214,    0,    0,
  528,    0,    0,  214,  214,  214,  543,  214,  214,  214,
    0,  214,    0,    0,    0,  543,    0,    0,    0,  529,
    0,  180,  530,    0,    0,    0,    0,    0,    0,    0,
  180,  214,    0,  214,    0,    0,    0,    0,    0,    0,
    0,  544,  545,    0,    0, 1278,    0,    0,    0,    0,
  544,  545,    0,    0,    0,    0,    0,  546,  547,    0,
    0,    0,    0,  531,  214,    0,  546,  547,  127,  532,
  533,  534,  127,  535,  536,  537,    6,  538,    0,    0,
    0,    0,  214, 1495,    0,    0,    0, 1380, 1381,  296,
 1382,  127,    0, 1383,  127,    0,    0,  539,    0,  540,
    0,    0,    0,    0,  214,    0,    0, 1384,    0,    0,
    0,    0,    0, 1385,    0,    0,    0,    0,    0,    0,
  296,    0,    0,    0,    0,    0,    0,  296,    0,    0,
  541,  296,  296,    0,  296,  127,    0,  296,    0,  214,
  214,  127,  127,  127,    0,  127,  127,  127,  542,  127,
    0,  296,    0,    0,    0,  214,  214,  296,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
  543,  127,    0, 1386,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    0,    0,  544,  545,    0, 1387,    0,
    0,    0,    0,    0,    0,    0,    0,  296,   17,    0,
  127,  546,  547,    0,    0,    0,    0, 1496,    0, 1388,
    0,    0,    0,    0,    0,    0,  450,  296,    0,    0,
    0,    0,  127,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  296,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  296,    0,    0, 1389,    0,    0,    0,    0,
    0,  296,    0,  296,    0,    0,    0,  127,  127,    0,
  296,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,  127,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  296,
};
static short yycheck[] = {                                      17,
   56,    4,   48,  128,    4,   57,   49,   96,   55,    0,
  226,   50,   56,  283,  226,  226,   59,  117,  118,  454,
  326,  318,   61,  322,  458,   77,  679,   62,  326,  297,
  131,  583,   65,  585,  496,   81,   86,  436,  487,   82,
  626,  490,  117,  118,  637,  687,   89,  496,  295,  105,
   85,  107,   45,   80,   87,   40,  234,   75,    0,   40,
   44,  340,   44,  865,   45,  108,   84,  106,   60,  247,
  109,    0,   45,   44,  280,    0,  621,    0,    0,   42,
  958,  882,  684,  934,   41,   40,   40,   44,   41,   40,
   59,   83,  678,   41,  945,  122,   41,  974,    0,   41,
    0,   42,   44,   41, 1056,    0,    0,   41,   63,   63,
  199,   40,   41,  964,  161,   44,   40,   59, 1120,   41,
   59,  384,   44,   40,   44,   44, 1265,    0,   42,   40,
   59,   58,   44, 1252,   59,   44,   59,   59,  185,  355,
  577,   41,    0,  355,  355,   44,  926,   58,   40,  238,
    0,  226,  264,  933,  260,  280,   45,   59,  283,   59,
 1162,  926,   91,  260,   59,   59,  274,  466,  933,  290,
   45,    0,  228,   45,   63,  309,  473,  474,  475,  476,
    0,  288,   63,  284,   45, 1062,   59,  264,  926,  349,
  496,    0,  370,  232,    0,  933, 1171,  933,  496,  268,
  257,   59,    0,   91,  321,    0,  245,  339,  302,   59,
   44,    0,   41,   44,    0,   44,   13,   17,  264,  654,
  926,   13,    0,  522,  280,  457,   44,  933,  245,  268,
   59,  257, 1234,    0,  258,  406,  378,  288,   41,   59,
  296,   44, 1007,  284,  260,  339,  832,  303,  527,  305,
   59,  307,  499,   59,  310,    0,   59,  809,  810,   40,
 1049,   59, 1051,   41,   59,    0,    0,  494,  495, 1007,
   59,    0,  319,   59,  321,   75,    0,  378,  335, 1157,
  355,   59,  827,  307,  733,  332,  745,  458,  304, 1140,
  336, 1092,   59,  838,  839,  334,   41,  366,    0,   44,
  285, 1007,  549,  463,  464,    0,   41,   41,  450,  335,
   44,    0,  444,  419,   59,   44,  258,  274,  115,  453,
   44,  438,  419,  115,   59,   59,  369,  366,   41,  258,
   59,   44,  274, 1472,  297,   59,  413,  340,  377,    0,
  379,  384,  264, 1318,    0,  274,  260,  386,  277,  278,
  462,  280,  301,  310,  753,  462,  285,   59,  251,  288,
  468,  624,  255,    0,   59,  307, 1168,  260,  310,  386,
   59, 1151,  301,  925,  319,  189,  310,  269,  307,    0,
    0,  310,  984,    0,  332,  321, 1151,  980,  604,  277,
  304,  329,  604,  604,  332, 1514,  420,  403,   59,  321,
  441, 1353,  321,   59,  353,  278,  305,  280,  258,  321,
  319,  462,  682, 1151,  514, 1151,    0, 1294,  343,  319,
   41, 1423,   59,    0,  471, 1276,  240,    0, 1279,  329,
 1281,  273,  332,  264,  329,  613,    0,  332,   59,   59,
  496,  341,   59,  412,  397, 1151, 1235, 1325,  695,  397,
  379,  698,  433,  378,   41,  264,  413,  307,  264,  397,
   44, 1312, 1104, 1264,   41,  712,  368,  460,   41,  675,
  517,  413,  401,  412,  456,   59,  460,  462,  420,  460,
  409,  406,   59,  454,  413,  410,   59,  460,  388,  462,
  319,  420,  739,  322,  487,   59,  438,  397,  449,  462,
  329,  426,  397,  332, 1355,  460,  460,  336,  787,  438,
  778,  468,  341,  569,  443,  344,  409,  410,  411,  566,
  567,  462, 1067,  515,  527, 1376,  468,  452, 1330,  604,
  472,  360,  454,  456,  329,  462,  456,  332,  462,  468,
  462,  319,  442,  472,  433,  462,  332,  442,  442,  605,
  675,  462,  989,  411,  343,  384,  456,  682, 1110,  388,
  660,  456,  456,  341,  620, 1416,  384, 1332,  397,  258,
  420,  460,  433,  694,  319,  578, 1128,  397,  578,  460,
 1431,  624,  349,    0,  319,  460,  415,  332,  460,  378,
  690,  691,  398,  322, 1332, 1188,  341,  332, 1057,  460,
  329,  628,  397,  332,  438,  329,  341,  336,  332,  412,
  388,  397,    0,  442,  395,  344,  913,  406,  307,  675,
  344,  410,  442,   41,    0,  454, 1332,  264,  684, 1271,
  669,  360,  671,  462,    0,    0,  456,  426,  816,  686,
  687,  819,   59,  388,    0, 1125, 1232,  442,  704,    0,
  384,  287,  397,  388,  349,  384,  442,  302,   41,  454,
 1511,  456,  397,  452,  442,  445,  368,    0,  397,   41,
  456,   59,  356,  397,  302,  262,  732,  733,  975,  493,
  341,    0,  462,   59,  931,  341,  415, 1146,  789,   44,
  791,  420,  585,   59,   59, 1516,  943,  442,  319,  280,
  413,  693,  319,   59,  262,  286, 1468,  442,   59,   41,
  926,  456,  273,  442, 1266,  926,  963,  933,  442,  987,
  341,  456,  933,  343,  341,  454,   59,  456,   59,   44,
  454,  420,  456,  626,    0,  738,  629,  776,   93,  731,
   59,  634,  319,   41,   59,  329,  319,  750,  332,  642,
 1149,  644,  645,  646,  647,  648, 1155,  650,  378,  332,
  344,  398,  655,    0,  341, 1586,  320,  388,  341,  719,
  820,  763,  764,  765,  817,  302,  397, 1239,    0,  343,
  341,    0,    0,  818,  787,  678,  406,  277,  821, 1551,
  410,    0,    0,   59,    0, 1007, 1007, 1618,    0,  444,
  387,    0, 1070, 1283,   41,  462,  426,   44,    0,  493,
  326,  388,  339,  397,  378,  388,  444, 1546, 1471,  462,
  397,  442,   59,  398,  397,   44, 1588,  463,  464,  387,
  621,  278,  452,  263,    0,  456,    0,   59,   44,   41,
   59,   59,  406,   44,  262,  707,  410,  401, 1282,   41,
   59,   59,   44,   59,  716, 1584,  346,   59,  442,   42,
   59,  961,  426,  438,   47,  442, 1165,   59, 1302,  442,
  454,  259,  456,  320, 1090,   41,  264,   41,   44,  262,
   44,  411,  270,  313,  406,  329,  462, 1616,  452,  443,
  262, 1138,   93,   59,  324,   59,  388,  472,  264,  264,
  462,  794,  795,  796, 1397,  767,  799,  800,  801,  357,
  803,  804,  805,  806,  807,  808,  432,  444, 1470,  344,
 1167,  977,  278,  439,  280,  258,  343, 1362,  984, 1378,
  262,  260, 1007, 1239, 1486, 1151,  458, 1489,  284,  832,
 1151, 1239,  406,  319,  369,  264,  279,  436,  841,  842,
  442,  844,  955,  846,  401,  955,  849,  850,  851,  852,
  853,  854,  426,    0,  262,  341, 1091,  462,  301,  387,
    0, 1268,  834,  462,  307,  304,   41,  462,  970,   44,
 1055, 1056, 1057,  431,  404,    0,    0,  937,  938,  406,
  341,    0,  462,  410,  986, 1265,  443,  330,  264,  429,
  992,  445,  422,  428,  387,  258, 1106,  328, 1108,  426,
  398,   41,  462,    0,   44,  387,  349,    0,  462,    0,
  260,  258,   59,  379,  357,  358,   40,   41,   93,   59,
   44,  364,  398,  398,  984,  452,  827,  462, 1285,  385,
  277,  278,  264,  280,   59,   59,  264,  838,  285,  382,
   59,  288, 1055, 1056,  307,  387,  264, 1104,   41,  380,
   41,   44,  302, 1163,  301,  264,  258,  322,  460,  278,
  307,  280,   59, 1320,  314, 1510,   59,   91,   59,  398,
 1573,  336,  944, 1524,  272,  277,  278,  420,  280,  387,
 1642, 1083,  462,  285,   44,  441,  288,  280,  431,  339,
  319,  289,    0,  286, 1272,  360,   44,  460,   91,  301,
 1603, 1604,  458,  260,  278,  307,  280,  319, 1553, 1560,
 1332, 1332,  341,  323,  288, 1018, 1019,  329, 1021, 1022,
  332, 1178,  398,  343, 1627, 1182, 1029,  301,  403,  341,
 1265, 1144,  379,   93, 1144, 1313,  334, 1363, 1641,  260,
  265, 1554,  462, 1278,    0,   93,  322,  304,  353,  260,
  415,   59,  259,  329,  401, 1526,  332,  420,  378,  409,
  336,  436,  409,  270,  279,  363,  398,    0,  344,  419,
  398, 1074,  265,  420,  379,  438,  388,  379,  303, 1082,
  398, 1084, 1085,  304,  360,  397,  406, 1090,   44,  398,
  410,  438, 1472,  304,  444,  462,  443,   42,   43,  401,
   45,  378,   47,   59, 1617,  379,  426,  409,  384,  472,
  303, 1277, 1278, 1493, 1271,  330,  418,  322,  420,  323,
 1123,  397, 1635, 1277, 1548,  472,   59,  401, 1599,   40,
  442,  336,  452,  431,  258,  409,  438, 1286,  278,  415,
  280,  443,  454,  420,  288,  338, 1526, 1332,  288,  364,
  274,  208, 1623,  277,  278,  360,  280,  301, 1582,  216,
 1493,  285, 1397, 1373,  288,  258,  442,  382, 1353,  443,
  472,   42,   43,  402,   45,  344,   47,  301,  454,  384,
  456,  274, 1185,  307,  277,  278,  310,  280, 1568,    0,
  467, 1615,  285, 1526,    0,  288, 1199,   45, 1524,  338,
  369,    0,  384, 1206,   41,    0,    0,   44,  301, 1633,
  415,  384,    0,    0,  307,  302, 1415,  310, 1380, 1599,
   41,   42,   43,  386,   45,    0,   47,   44,  319, 1232,
   41, 1397,  322,   44, 1560, 1568,  375, 1472,  329,  379,
 1353,  332,  384, 1623,  384,  295,  336, 1360,   59,  388,
  341,    0,  339,   59,   41,  379,  306,   44, 1493,  428,
   59,  401, 1411,  313,   59,   59, 1599,    0,  384,  409,
  360,   59,   59,   42,   43,    0,   45,  401,   47, 1436,
   91,  495, 1383, 1440,   59,  409,  379,    0,  338,  413,
 1623, 1526,   41,  349,  384,   44,  420,  388,  338,    0,
  259,  322,  358,  443,   91, 1504,  397,    0,  401,  265,
   59,  270, 1315,  420,  438,  336,  409,  462,    0,  443,
  413,   41,  409,  344,   44,  415,   59,  420,   41, 1482,
    0,   44,  419, 1568,   59,  280, 1339, 1340, 1573,  360,
   41,  286,   91,   44,  468,  438,   59,  303,  472,  274,
  443,  442,  379,  403,  260,   45,  403,  444,   59,   41,
 1363,    0,   44,  319, 1599,    0,   59,  319, 1603, 1604,
    0,    0, 1534,   63,  401,  468,  321,   59,  651,  472,
  357, 1509,  409, 1386,  338,  341,  436,    0, 1623,   59,
  440,   40, 1627, 1521,  415,    0,  302,  460,    0,  462,
  447,  674,   41,    0,  426,   44, 1641, 1573,  314,  280,
  683,   41,  463,    0,   44,  286,  443,  394, 1546,  396,
   59,  375,  328, 1536,   59,    0, 1536, 1555,   41,   59,
   59,   44, 1435,  339,  388,    0,  264, 1603, 1604, 1595,
 1443,    0,   41,  420,  322,   44,   59,  258,  296,    0,
  321,  338,   41,    0,   59,   44, 1584,   59,  336,  280,
  329, 1627,   59,  274, 1592,  286,  344,  278,  445,  280,
   41,  258,   59,   44,  285, 1641,    0,  288,   42,   43,
 1483,   45,  360,   47,   59,  317,  318,  274, 1616,    0,
  301,  278,   41,  280,   59,   44,  307,  419,  285,  310,
   59,  288,  317,  409,  279,  353,  319,    0,   59,  258,
    0,  280,   59,  419,  301,  258,  462,  286,  261,    0,
  307, 1524,   93,  310,  446,  274,  301,   40,  467,  278,
  469,  280,   45,  460,  403,   59,  285,  415,  444,  288,
    0,   42,   43,  312,   45,  258,   47,  337,   59,    0,
   63,   41,  301,  419,   44,  330,  462, 1560,  307,   41,
  487,  310,   44,  454,  307,  278,   59,  280,  379,   59,
   41,  440,  285,   44,  349,  288,  445,  278,   59,  280,
  446,   41,  451,  358,   44,    0,  341,  288,  301,  364,
  401,  403,  379,  462,  307,  463,  464,  445,  409,   59,
  301,  470,  413, 1049,  321, 1051,  296,  382,   59,  420,
  319,  459,  460,  461,  401,  463,  464,   41,   42,   43,
  403,   45,  409,   47,  384,   41,  413,  438,   44,  438,
  379,  384,  443,  420,  482,  483,  484,  485,  486,  487,
  488,  489,  490,  362,   59,  459,  460,  461,  496,  497,
   41,  438,  401,   44,  452,   41,  443,  468,   44,   41,
  409,  472,   44,  436,  413,  278,  379,  280,  419,   41,
    0,  420,   44,  487,  488,  288,   41,  279,  379,   44,
  319,  468,  462,  322,   41,  472,  444,   44,  401,  438,
  329,    0,   41,  332,  443,   44,  409,  336,  358,  301,
  401,  413,  341,  392,  393,  344,  288,  420,  409,  463,
  464,   41,  680,  681,   44,  471,  280,   44,   61,  468,
  373,  360,  286,  472,  287,  438,   40,  264,  330,   59,
  443,   40,   41,   42,   43,   44,   45,   46,   47,   40,
  463,  463,  443,  438,   44,  384,  462,  349,  312,  388,
   59,   60,   61,   62,   40,  445,  358,  463,  397,  472,
  321,  262,  364,   44,   40,  403,  379,   40,   40,  459,
  460,  461,  262,  463,  464,    0,  415,   40,   40,  280,
  382,   40,   91,  296,   93,  286,   40,   40,  401,   40,
   40,  462,  482,  483,   40,   91,  409,  487,  488,  489,
  490,   46,  321,  442,   44,   44,  496,  497,  430,   46,
  280,   44,   61,  383,   46,  454,   41,   42,   43,   44,
   45,  625,   47,  627,  349,   44,  630,  631,  632,  319,
  443,  278,  322,  278,   59,   60,   61,   62,  301,  329,
  353,  264,  332,  462,  398,  438,  336,   42,   43,  472,
   45,  341,   47,  398,  344,  277,  280,  460,  449,  319,
  400,  449,  286,   40,  279,  350,   40,   91,   93,  329,
  360,   40,  332,   40,   45,  264,   41,   42,   43,    0,
   45,  341,   47,  413,  344,  384,  301,   41,   42,   43,
  390,   45,   63,   47,  384,   44,  383,  387,  388,   40,
   40,  799,  438,  801,  466,  803,  804,  397,  806,  807,
  808,  318,   40,  264,   41,  330,  321,  321,  462,  454,
   41,   42,   43,   44,   45,  415,   47,  450,  388,  462,
   40,  460,  277,  274,  349,   40,  345,  397,   59,   60,
   61,   62,  357,  358,  345,  301,  459,  460,  461,  364,
  463,  464,  442,  262,  285,  264,  278,  387,  387,  387,
  418,  420,  301,  272,  454,  420,  456,  382,   40,  482,
  483,  280,   93,  357,  487,  488,  419,  286,   40,  394,
  289,  396,  442,  274,  462,   40,   44,  386,  368,  319,
   44,   41,   42,   43,  454,   45,  321,   47,  264,  329,
   41,   44,  332,  312,    0,  420,   45,   40,  321,  280,
  319,  341,  321,  322,  344,    0,  325,   44,  329,   44,
  329,   40,  266,  332,   63,  334,  300,  336,   40,  264,
  445,  462,  341,  342,  424,  344,   41,  262,   58,  264,
   41,   41,   41,  456,  442,   41,  310,  272,   44,    0,
   46,  360,  361,  395,  363,  280,   41,  493,  388,   44,
   41,  286,  310,   59,  289,   61,   41,  397,  377,   40,
  379,  380,  381,   40,   59,  384,  353,   40,  387,  388,
   40,   40,   40,   40,   40,  280,   40,  312,  397,  262,
   41,  286,   40,   44,  319,   40,  321,  322,    0,   40,
  325,   40,   40,  412,  329,   40,  415,  332,   59,  334,
   40,  336,  442,  328,   41,  280,  341,  342,   44,  344,
  389,  286,  431,  344,  454,  296,  280,  274,  389,  389,
  332,  424,  286,  442,    0,  360,  361,  392,  363,   41,
  448,  262,   44,  264,  391,  454,  271,  456,   41,  288,
   41,  272,  377,  462,  379,  380,  381,   59,  387,  384,
  387,  387,  387,  388,  387,  286,   42,   43,  289,   45,
  387,   47,  397,  409,  387,   41,   42,   43,   44,   45,
  379,   47,  278,   59,   40,  419,   41,  412,   41,   41,
  415,  312,  386,   59,   60,   61,   62,  438,  319,   41,
  321,  322,  444,  339,  325,  462,  431,  397,  329,  302,
  339,  332,  302,  334,  444,  336,   41,  442,   41,  353,
  341,  342,  386,  344,  372,   41,  372,   93,   41,  454,
  280,  456,   41,   41,   41,   41,  286,  462,    0,  360,
  361,   41,  363,   41,   42,   43,   41,   45,  419,   47,
   41,   41,   41,   41,   41,   41,  377,  296,  379,  380,
  381,   41,   41,  384,  280,   59,  387,  388,  264,  265,
   44,   40,  341,   40,  445,   59,  397,  262,   59,   41,
   42,   43,   44,   45,  280,   47,   59,   59,  459,  460,
  461,  412,  463,  464,  415,  341,   59,   59,   60,   61,
   62,   59,   41,  345,  353,   41,  321,  303,  369,  305,
  431,  482,  483,   40,  353,   59,  487,  488,  489,  490,
  341,  442,    0,  319,   59,  496,  497,  278,  384,  280,
  462,   93,  384,  454,  319,  456,  384,  322,   44,   41,
   41,  462,  412,  437,  329,  341,   44,  332,   41,   42,
   43,  336,   45,   44,   47,  305,  341,  444,  302,  344,
   41,  344,   59,   41,   40,   43,   44,   45,  305,  294,
  465,   44,  308,   44,   41,  360,  278,    0,  280,   40,
  384,   59,   60,   61,   62,  338,  288,  384,   41,   42,
   43,  264,   45,  278,   47,  264,  262,  460,  264,  384,
  390,  321,  387,  388,  280,  264,  272,   41,   42,   43,
  286,   45,  397,   47,   40,   93,  310,  271,  413,  472,
  459,  460,  461,  289,  463,  464,  460,  264,  379,  438,
  415,   41,   42,   43,  344,   45,  344,   47,  344,  344,
  271,   41,  460,  482,  483,   40,  312,   40,  487,  488,
  401,   41,   41,  319,   59,  321,  322,  442,  409,  325,
    0,  305,   44,  329,   41,   59,  332,    0,  334,  454,
  336,  456,    0,    0, 1052,  341,  342,  379,  344,   41,
   42,   43,  280,   45,   13,   47,  247,  236,  286,  235,
  613,  989,  443,  573,  360,  361,  779,  363,  987,  401,
  262,   41,  264,   79,   44,  984, 1303,  409,  976,  323,
  272,  377,  260,  379,  380,  381,  293,  288,  384,   59,
  522,  387,  388,  916,  968,  242,  714,  289,  620,  977,
  305,  397,   41,   42,   43,  305,   45, 1283,   47, 1541,
 1285,  443, 1545, 1544, 1577,  704,  412, 1121, 1626,  415,
  312, 1498,  501,  355,  302, 1574, 1315,  319, 1546,  321,
  322,  979,  570,  325,  774,  431,  314,  329,  310,    0,
  332,  503,  334, 1314,  336,  298,  442,  291,  760,  341,
  342, 1153,  344,  563,  262,   14,  264,  280,  454,  752,
  456,  339,  272,  286,  272,  438,  462,  442,  360,  361,
  682,  363,   42,   43,  669,   45, 1363,   47,  655,  120,
   41,  289,   43,   44,   45,  377,  656,  379,  380,  381,
 1472, 1371,  384, 1592,  882,  387,  388,  280,   59,   60,
   61,   62, 1555,  286,  312,  397,  454, 1644,  354,  618,
  833,  319, 1020,  321,  322,   -1,  280,  325,   -1,   -1,
  412,  329,  286,  415,  332,   -1,  334,  650,  336,   -1,
   -1,  409,   93,  341,  342,   -1,  344,   -1,   -1,  431,
  280,  419,   -1,   41,   42,   43,  286,   45,   -1,   47,
  442,   -1,  360,  361,   -1,  363,   -1,   -1,   -1,   41,
   42,   43,  454,   45,  456,   47,  444,    0,    0,  377,
  462,  379,  380,  381,   -1,   -1,  384,    0,   -1,  387,
  388,   -1,   -1,   -1,  462,   -1,   -1,   -1,  280,  397,
   -1,   -1,  262,   -1,  286,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,  412,   -1,   -1,  415,   41,   41,
   -1,   44,   44,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   43,   44,   45,  431,   -1,   -1,   59,   59,   -1,   -1,
   -1,   -1,   -1,  306,  442,   -1,   59,   60,   61,   62,
  313,  280,   -1,   -1,  317,  318,  454,  286,  456,  319,
    0,   -1,  322,  326,  462,   -1,    0,   -1,   -1,  329,
   -1,    0,  332,   -1,   -1,  338,  336,   -1,   -1,   -1,
   93,  341,   -1,   -1,  344,   41,   42,   43,   -1,   45,
   -1,   47,  474,  475,  476,  477,  478,  479,  480,  481,
  360,   41,  262,   -1,   44,   -1,   -1,   41,   -1,   -1,
   44,  262,   41,  264,   43,   44,   45,   -1,   -1,   59,
  280,  272,   -1,   -1,  384,   59,  286,  387,  388,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,  397,  289,   -1,
  403,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  415,   -1,   -1,  421,   -1,
   -1,  312,   -1,   -1,   93,   -1,   -1,   -1,  319,   -1,
  321,  322,   -1,  436,  325,   -1,   -1,  440,  329,   -1,
   -1,  332,  442,  334,   -1,  336,   41,   -1,  451,   44,
  341,  342,  280,  344,  454,   -1,  456,   -1,  286,   -1,
   42,   43,   -1,   45,   59,   47,   -1,  470,  280,  360,
  361,   -1,  363,   -1,  286,   -1,   -1,   59,   -1,  279,
   40,   -1,   -1,   43,   -1,   45,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   58,   -1,
   -1,  301,   -1,   63,  280,   -1,  397,   -1,   -1,  262,
  286,  264,   -1,   -1,   -1,  278,  278,  280,  280,  272,
   -1,  412,  285,  285,  415,  288,  288,   -1,   -1,   -1,
  330,   -1,   -1,   -1,   -1,   -1,  289,   -1,  301,  301,
  431,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,
   -1,  442,   40,   -1,   -1,   43,   -1,   45,  358,  312,
   -1,   -1,   -1,  454,  364,  456,  319,   -1,  321,  322,
   58,  462,  325,   -1,   -1,   63,  329,   -1,   -1,  332,
   -1,  334,  382,  336,  280,   -1,   -1,   -1,  341,  342,
  286,  344,   -1,  262,   -1,  264,   -1,   -1,  278,   -1,
  280,   -1,   -1,  272,  278,   -1,  280,  360,  361,   -1,
  363,   -1,   -1,   -1,  288,   -1,  379,  379,   -1,   -1,
  289,   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,
  295,  384,   -1,   -1,  387,  388,   -1,   -1,  401,  401,
   -1,  306,   -1,  312,  397,   -1,  409,  409,  313,   -1,
  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,  412,
  329,  326,  415,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,  431,   -1,
  443,  443,    0,  278,   -1,  280,    0,   -1,   -1,  442,
   -1,  360,  361,  288,  363,   -1,   -1,   -1,  280,  379,
   -1,  454,   -1,  456,  286,  379,   -1,  267,  377,  462,
  379,  380,  381,   -1,   -1,  384,  276,   -1,  387,  388,
   -1,  401,   -1,   41,   -1,   -1,   44,  401,  397,  409,
  290,   -1,   -1,  293,   -1,  409,  296,  297,  403,   -1,
   -1,   59,   -1,  412,   -1,   59,  415,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  421,   -1,   -1,    0,
   -1,   -1,  431,  443,   -1,   -1,   -1,  327,   -1,  443,
   -1,  436,   -1,  442,   -1,  440,   -1,   -1,  443,  267,
   -1,   -1,   -1,   -1,  379,  454,  451,  456,  276,   -1,
   -1,   -1,   -1,  462,   -1,  355,  356,   -1,   40,   -1,
   42,   43,  290,   45,   -1,  470,  401,  367,  296,  297,
   -1,  371,   -1,   -1,  409,   -1,   58,   -1,   59,  379,
   -1,   63,   -1,   -1,   -1,   -1,   -1,  315,   -1, 1186,
 1187,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
 1197, 1198,   -1, 1200, 1201,   -1,   -1,    0,  443,   -1,
   -1, 1208, 1209, 1210, 1211,   -1, 1213, 1214, 1215, 1216,
 1217, 1218,   -1,  423,   -1,   -1,   -1,  355,  356,   -1,
   -1,   40,   -1,   42,   43,  435,   45,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,  445,   -1,   -1,   -1,   58,
   -1,  379,   -1,   -1,   63,   -1,   -1,   -1,   -1,  459,
  460,  461,  462,  463,  464,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  482,  483,  484,  485,  486,  487,  488,  489,
  490,  419,  492,   -1,   -1,  423,  496,  497,   -1,   -1,
  258,   -1,   -1,   -1,  258,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,
   -1,   -1,   -1,  301,   -1,  473,   -1,  301,   -1,  307,
   -1,   -1,   -1,  307,  482,  483,  484,  485,  486,  487,
  488,  489,  490,   -1,  492,   -1,   -1,   -1,  496,  497,
   -1,   -1,  330,   -1,   -1,   -1,  330,  258,  260,   -1,
   -1,   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,
   -1,  349,   -1,   -1,  276,  349,   -1,   -1,  279,   -1,
  358,   -1,   58,   -1,  358,   -1,  364,   63,  290,   -1,
  364,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
  301,   -1,  304,   -1,  382,   -1,  307,   -1,  382,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,  330,
   -1,  260,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,  420,   -1,   -1,  258,  420,  276,  349,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,  358,   -1,   -1,
   -1,  290,   -1,  364,   -1,  367,  279,  296,  297,  371,
   -1,   -1,   -1,   -1,   40,  304,   -1,   43,   -1,   45,
   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,  301,   -1,
   -1,   -1,   58,   -1,  307,   -1,   -1,   63,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,   -1,  420,
   -1,   -1,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,  435,   -1,   -1,  349,   -1,  367,   -1,
   -1,   -1,  371,  445,   -1,  358,   -1,   -1,   -1,   -1,
   -1,  364,   -1,   -1,   -1,   -1,   -1,  459,  460,  461,
  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,  382,
   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  482,  483,  484,  485,  486,  487,  488,  489,  490,   -1,
  492,  267,   -1,   -1,  496,  497,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,   -1,  435,  420,   -1,   -1,
   -1,   -1,   -1,   -1,  290,   -1,  445,   -1,   -1,   -1,
  296,  297,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,  315,
   -1,   -1,   58,   -1,  473,   -1,   -1,   63,   -1,   -1,
   -1,  327,   -1,  482,  483,  484,  485,  486,  487,  488,
  489,  490,   -1,  492,   -1,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,  260,  371,   -1,  263,   -1,   -1,
   -1,  267,   -1,  379,   -1,   -1,   -1,   -1,   -1,   40,
  276,   -1,   43,   -1,   45,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,  290,   -1,   -1,   58,   -1,   -1,
  296,  297,   63,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,   -1,
  496,  497,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  276,  427,   43,   -1,   45,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,  302,  290,   -1,   -1,   58,   -1,  445,
  296,  297,   63,   -1,  313,  314,   -1,  316,   -1,   -1,
  319,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  473,   -1,   -1,
  339,  327,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,  260,
  496,  497,  263,   -1,   -1,   -1,  267,   -1,   -1,  355,
  356,   -1,   -1,   -1,   40,  276,  272,   43,   -1,   45,
  271,  367,   -1,   -1,  280,  371,   -1,   -1,   -1,  290,
  286,   -1,   58,  289,   -1,  296,  297,   63,   -1,   -1,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
  419,   -1,  313,  314,   -1,  316,  327,   -1,  319,  325,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,  334,   -1,
   -1,  427,  333,   -1,   -1,  444,  342,   -1,  339,  435,
   -1,   -1,   -1,   -1,  355,  356,  455,   -1,   -1,  445,
   -1,   -1,   -1,  462,   -1,  361,  367,  363,   -1,   -1,
  371,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,  377,   -1,  379,  380,  381,   -1,  473,   -1,   -1,
   -1,   -1,  491,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,  399,  260,
  496,  497,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  276,  427,   43,  419,   45,
   -1,   -1,   -1,   -1,  435,  431,   -1,   -1,   -1,  290,
   -1,   -1,   58,  434,  445,  296,  297,   63,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,  455,   -1,   -1,   -1,   -1,   -1,
   -1,  462,  473,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,  260,  496,  497,  263,   -1,   -1,
  491,  267,   -1,   -1,  355,  356,   -1,   -1,   -1,   40,
  276,   -1,   43,   -1,   45,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  290,  462,   -1,   58,   -1,   -1,
  296,  297,   63,   -1,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
   -1,   -1,  489,  490,  491,  492,  493,   -1,   -1,  496,
  497,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  427,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,  260,  496,  497,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  276,  427,   43,   -1,   45,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   58,   -1,  445,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,  260,
  496,  497,  263,   -1,   -1,   -1,  267,   -1,   -1,  355,
  356,   -1,   -1,   -1,   40,  276,   42,   43,   -1,   45,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,  290,
  462,   -1,   58,   -1,   -1,  296,  297,   63,   -1,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,  486,   -1,   -1,  489,  490,  491,
  492,  493,   -1,   -1,  496,  497,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  427,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,  260,
  496,  497,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  276,  427,   43,   -1,   45,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   58,   -1,  445,  296,  297,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,   -1,  496,  497,   -1,   -1,   -1,
   -1,  267,   -1,   -1,  355,  356,   -1,   -1,   -1,   40,
  276,   42,   43,   -1,   45,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  462,  290,   -1,   -1,   58,   -1,   -1,
  296,  297,   63,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,  486,   -1,   -1,
  489,  490,  491,  492,  493,   -1,   -1,  496,  497,   -1,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  427,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,   -1,  496,  497,   -1,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  276,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   58,   -1,  445,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,   -1,
  496,  497,   -1,   -1,   -1,   -1,  267,  353,   -1,  355,
  356,   -1,   -1,   -1,   40,  276,   -1,   43,   -1,   45,
   -1,  367,   -1,  273,   -1,  371,   -1,  277,   -1,  290,
   -1,   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
  340,   -1,  353,   -1,  355,  356,  346,  347,  348,  445,
  350,  351,  352,   -1,  354,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,  260,
  496,  497,   -1,   -1,   -1,   -1,  267,  407,   -1,   -1,
   -1,   -1,   -1,  413,   40,  276,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,  435,  425,   -1,   -1,   -1,  290,
   -1,   -1,   58,   -1,  445,  296,  297,   63,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,  447,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,  482,  483,   -1,  496,  497,   -1,   -1,   -1,
   -1,  267,   -1,   -1,  355,  356,   -1,   -1,  498,  499,
  276,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   40,   41,  290,   43,   -1,   45,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   58,   -1,   -1,  355,
  356,   63,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,   -1,  496,  497,   -1,   -1,   -1,
   -1,  267,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,  445,
  296,  297,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,  277,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  292,  473,   -1,   -1,
  296,  327,   -1,  299,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,   -1,
  496,  497,   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,  267,
   -1,  367,   -1,   -1,  340,  371,   -1,   -1,  276,   -1,
  346,  347,  348,   -1,  350,  351,  352,  283,  354,   -1,
   -1,   40,  290,   -1,   43,  291,   45,   -1,  296,  297,
   -1,   -1,  298,   -1,  300,   -1,  302,   -1,  374,   58,
  376,  307,   -1,   -1,   63,  267,   -1,   -1,  314,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,  327,
   -1,   -1,  328,   -1,   -1,   -1,   -1,   40,  290,  435,
   43,  407,   45,  339,  296,  297,   -1,   -1,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   58,   -1,  355,  356,  425,
   63,   -1,   -1,  459,  460,  461,  462,  463,  464,  367,
   -1,   -1,   -1,  371,   -1,  327,   -1,  473,   -1,   -1,
   -1,  447,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,  489,  490,   -1,  492,   -1,   -1,   -1,
  496,  497,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
  406,   -1,  408,   -1,   -1,  367,  482,  483,  414,  371,
   -1,  417,   -1,  419,  420,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  498,  499,   -1,   40,   -1,  435,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  445,  444,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  435,  482,  483,  484,  485,  486,  487,
  488,  489,  490,  445,  492,   -1,   -1,   -1,  496,  497,
   -1,   -1,    0,   -1,  456,   -1,   -1,  459,  460,  461,
  462,  463,  464,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,  473,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
  482,  483,  484,  485,  486,  487,  488,  489,  490,   -1,
  492,  290,   -1,   41,  496,  497,   44,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,  327,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   58,   -1,    0,
   -1,   -1,   63,   -1,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,  267,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  435,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,  445,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  456,   -1,   -1,
  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,  482,  483,  484,  485,  486,  487,  488,
  489,  490,  445,  492,   -1,   -1,   -1,  496,  497,   -1,
  355,  356,   -1,   -1,    0,   -1,  459,  460,  461,  462,
  463,  464,  367,   -1,  262,   -1,  371,   -1,   -1,   -1,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,  489,  490,   -1,  492,
   -1,   -1,   -1,  496,  497,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  276,   -1,   -1,   -1,   -1,
   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,  290,
  435,  329,   -1,   -1,  332,  296,  297,   -1,  336,   -1,
  445,   -1,   -1,  341,   -1,   41,  344,   -1,   44,   -1,
   -1,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,  262,  360,   59,   -1,   -1,  327,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,  489,  490,  384,  492,   -1,  387,
  388,  496,  497,    0,  355,  356,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,    0,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,  415,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,   -1,   41,  336,   -1,   44,   -1,   -1,
  341,   -1,   -1,  344,  442,   41,   -1,   -1,   44,   -1,
   -1,   -1,   59,   -1,   -1,   -1,  454,   -1,  456,  360,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,  445,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,  397,   -1,  459,  460,
  461,  462,  463,  464,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,  415,   -1,  262,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,  489,  490,
   -1,  492,   -1,   -1,   41,  496,  497,   44,   -1,   -1,
   -1,  442,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   59,  454,   -1,  456,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,
    0,   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,  319,   44,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  384,   59,
  336,  387,  388,    0,   -1,  341,   -1,   -1,  344,   -1,
   41,  397,   -1,   44,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,  262,   -1,   59,  415,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,  442,   -1,   -1,   -1,
   -1,  397,   59,   -1,   -1,   -1,   -1,   -1,  454,   -1,
  456,   -1,  319,   41,   -1,  322,   44,   -1,   -1,  415,
   -1,   -1,  329,  319,   -1,  332,  322,   -1,   -1,  336,
   -1,   59,   -1,  329,  341,   -1,  332,  344,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,  442,   -1,  344,   -1,
   -1,   -1,    0,  360,   -1,  262,   -1,   -1,  454,   -1,
  456,   -1,   -1,   -1,  360,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  397,  387,  388,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  415,   -1,
   -1,   59,  319,   -1,   -1,  322,   -1,   -1,   -1,  415,
   -1,   -1,  329,  319,   -1,  332,  322,   -1,    0,  336,
   -1,   -1,   -1,  329,  341,  442,  332,  344,   -1,   -1,
  336,   -1,  262,   -1,   -1,  341,  442,  454,  344,  456,
   -1,   -1,   -1,  360,    0,   -1,   -1,   -1,  454,   -1,
  456,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,   41,
   -1,  262,   44,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   59,  384,   -1,
  397,  387,  388,   -1,   -1,   41,   -1,   -1,   44,  319,
   -1,  397,  322,   -1,   -1,  262,   -1,   -1,  415,  329,
   -1,   -1,  332,   59,   -1,   -1,  336,   -1,   -1,  415,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,  319,   -1,
    0,  322,   -1,   -1,  262,  442,   -1,   -1,  329,   -1,
  360,  332,   -1,   -1,   -1,  336,  442,  454,   -1,  456,
  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,  454,   -1,
  456,   -1,  319,   -1,  384,  322,   -1,  387,  388,  360,
   -1,   41,  329,   -1,   44,  332,   -1,  397,   -1,  336,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   59,
   -1,  319,   -1,  384,  322,  415,  387,  388,   -1,   -1,
   -1,  329,   -1,  360,  332,   -1,  397,   -1,  336,   -1,
   -1,    0,   -1,  341,  262,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  442,   -1,  415,   -1,   -1,  384,   -1,   -1,
  387,  388,  360,   -1,  454,   -1,  456,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  442,   41,   -1,   -1,   44,  384,   -1,  415,  387,
  388,    0,   -1,  454,   -1,  456,   -1,   -1,   -1,  397,
   59,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,  442,   -1,  415,  336,   -1,
  262,   -1,   -1,  341,   -1,   -1,  344,  454,   -1,  456,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,    0,  360,   -1,  442,   -1,  262,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,  454,   -1,  456,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  397,
  322,   -1,   41,   -1,   -1,   44,   -1,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,  415,   -1,  341,
   59,   -1,  344,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  360,   -1,
  336,   -1,  262,   -1,  442,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  454,   -1,  456,   -1,
   -1,   -1,  384,   -1,  360,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,  415,   -1,   42,   43,   -1,   45,  319,
   47,  397,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,
   -1,   -1,  332,   60,   61,   62,  336,   -1,   -1,  415,
  442,  341,   -1,  262,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  454,   -1,  456,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,   -1,   -1,  442,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  454,   -1,
  456,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  415,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  442,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,  454,   -1,  456,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
   -1,   -1,  341,  442,   -1,  344,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,  454,   -1,  456,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  272,  415,   -1,   -1,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  384,   -1,   -1,   -1,  388,
   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,  397,   -1,
   -1,   -1,  273,   -1,   -1,  454,  277,  456,   -1,   -1,
   -1,  273,   -1,   -1,  285,  277,  415,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,  334,  299,   -1,
   -1,   -1,   -1,   -1,  296,  342,   -1,  299,   -1,   -1,
   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  361,  454,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
  377,   -1,  379,  380,  381,  346,  347,  348,  340,  350,
  351,  352,   -1,  354,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  273,   -1,   -1,  374,  277,  376,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,   -1,  292,
   -1,   -1,   -1,  296,  431,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,  273,  340,   -1,   -1,
  277,   -1,   -1,  346,  347,  348,  447,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,  447,   -1,   -1,   -1,  296,
   -1,  462,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  462,  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,   -1,   -1,  271,   -1,   -1,   -1,   -1,
  482,  483,   -1,   -1,   -1,   -1,   -1,  498,  499,   -1,
   -1,   -1,   -1,  340,  407,   -1,  498,  499,  273,  346,
  347,  348,  277,  350,  351,  352,  302,  354,   -1,   -1,
   -1,   -1,  425,  309,   -1,   -1,   -1,  313,  314,  271,
  316,  296,   -1,  319,  299,   -1,   -1,  374,   -1,  376,
   -1,   -1,   -1,   -1,  447,   -1,   -1,  333,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,
  407,  313,  314,   -1,  316,  340,   -1,  319,   -1,  482,
  483,  346,  347,  348,   -1,  350,  351,  352,  425,  354,
   -1,  333,   -1,   -1,   -1,  498,  499,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  447,  376,   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  407,   -1,   -1,  482,  483,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,  444,   -1,
  425,  498,  499,   -1,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,  462,  419,   -1,   -1,
   -1,   -1,  447,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,  491,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,  482,  483,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  498,  499,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  491,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 499
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL","RECREATE",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID","LARGEINT",
"KW_INT64",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"function : SUBSTRING '(' value FROM pos_short_integer ')'",
"function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


/* This method is currently used in isql/isql.epp to check if a 
   user field is a reserved word, and hence needs to be quoted.
   Obviously a hash table would make this a little quicker 
   MOD 29-June-2002
*/

bool LEX_StringIsAToken(const char*in_str)
{
    CONST TOK *tok_ptr = tokens;
    while (tok_ptr -> tok_string) {
        if (!strcmp(tok_ptr -> tok_string, in_str)) {
            return true;
        }
        ++tok_ptr;
    }
    return false;
}


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
line_start_bk = line_start;
lines_bk = lines;
first_time = TRUE;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (g_file->fil_partitions)
    {
    if (!g_file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*g_file->fil_length,g_file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv(const char*);

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 19:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 26:
{ yyval = yyvsp[0]; }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_list (yyvsp[0]); }
break;
case 31:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 32:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 33:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 39:
{ yyval = 0; }
break;
case 40:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 41:
{ yyval = 0; }
break;
case 42:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 50:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 63:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = yyvsp[0];}
break;
case 72:
{ yyval = yyvsp[0]; }
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 76:
{ g_field->fld_dtype = dtype_blob; }
break;
case 77:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 78:
{ yyval = (NOD) NULL; }
break;
case 80:
{ yyval = yyvsp[-1]; }
break;
case 82:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 83:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 86:
{ yyval = yyvsp[-1]; }
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 95:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 109:
{ yyval = NULL; }
break;
case 110:
{ yyval = make_list (yyvsp[0]); }
break;
case 112:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 113:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 114:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 115:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 116:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 117:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 118:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 119:
{ yyval = (NOD) 0;}
break;
case 120:
{ yyval = yyvsp[-1]; }
break;
case 121:
{ yyval = (NOD) NULL; }
break;
case 124:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 125:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 126:
{ yyval = NULL; }
break;
case 127:
{ yyval = NULL; }
break;
case 128:
{ yyval = yyvsp[0]; }
break;
case 129:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = (NOD) NULL; }
break;
case 133:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 137:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 138:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 139:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 144:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 145:
{yyval = (NOD) NULL;}
break;
case 148:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 149:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 150:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 151:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 152:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 153:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 154:
{yyval = (NOD) NULL;}
break;
case 157:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 161:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 162:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 163:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 164:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 165:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 166:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 167:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 168:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 169:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 170:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 171:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 173:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 174:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 175:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 178:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 179:
{ g_file  = make_file ();}
break;
case 184:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 192:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 193:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 194:
{ yyval = yyvsp[0]; }
break;
case 195:
{ yyval = yyvsp[0]; }
break;
case 196:
{ yyval = (NOD) NULL; }
break;
case 198:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 201:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 202:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 203:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 204:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 207:
{ yyval = NULL; }
break;
case 208:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = (NOD) NULL; }
break;
case 211:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 212:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 213:
{ yyval = yyvsp[-1]; }
break;
case 214:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 227:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 228:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 229:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 232:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = yyvsp[0]; }
break;
case 235:
{ yyval = NULL ;}
break;
case 240:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 241:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 242:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 243:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 244:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 245:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 246:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 247:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 248:
{ yyval = NULL;}
break;
case 249:
{ yyval = yyvsp[0];}
break;
case 250:
{ yyval = yyvsp[0];}
break;
case 251:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 252:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 253:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 254:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 255:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 256:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 257:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 258:
{ yyval = make_list (yyvsp[-1]); }
break;
case 259:
{ yyval = NULL; }
break;
case 260:
{ yyval = yyvsp[0]; }
break;
case 261:
{ yyval = NULL; }
break;
case 263:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 264:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 265:
{ yyval = make_list (yyvsp[0]); }
break;
case 266:
{ yyval = NULL; }
break;
case 268:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 272:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 273:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 274:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 276:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 285:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 289:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 290:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 291:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 292:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 293:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 294:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 295:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 296:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 297:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 298:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 299:
{ yyval = make_list (yyvsp[0]); }
break;
case 300:
{ yyval = make_list (yyvsp[-1]); }
break;
case 301:
{ yyval = NULL; }
break;
case 302:
{ yyval = make_list (yyvsp[0]); }
break;
case 303:
{ yyval = make_list (yyvsp[-1]); }
break;
case 304:
{ yyval = NULL; }
break;
case 307:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 311:
{ yyval = NULL; }
break;
case 313:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 317:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 321:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 322:
{ yyval = make_list (yyvsp[0]); }
break;
case 323:
{ yyval = make_list (yyvsp[-1]); }
break;
case 324:
{ yyval = NULL; }
break;
case 328:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 337:
{ yyval = make_list (yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = yyvsp[-1]; }
break;
case 344:
{ beginning = lex_position(); }
break;
case 345:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 346:
{ beginning = last_token; }
break;
case 347:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 348:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 349:
{ yyval = 0; }
break;
case 350:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = NULL; }
break;
case 354:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 355:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 373:
{ yyval = NULL; }
break;
case 374:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 377:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = yyvsp[0]; }
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 381:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 382:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 386:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 387:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 388:
{ yyval = yyvsp[0]; }
break;
case 389:
{ yyval = yyvsp[0]; }
break;
case 390:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 395:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 397:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = yyvsp[0]; }
break;
case 400:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 401:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 402:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 403:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 428:
{ yyval = NULL; }
break;
case 429:
{ yyval = NULL; }
break;
case 430:
{ yyval = NULL; }
break;
case 431:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 432:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 433:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 434:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 435:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 436:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 437:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 438:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 440:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 443:
{ yyval = yyvsp[0]; }
break;
case 444:
{ yyval = yyvsp[0]; }
break;
case 446:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 449:
{ yyval = NULL; }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = yyvsp[0]; }
break;
case 453:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 454:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 455:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 456:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 457:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 458:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 459:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 460:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 462:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 463:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 464:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 469:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 470:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 472:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 473:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 474:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 480:
{ 
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 481:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 482:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 483:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 484:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 485:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 490:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 491:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 492:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 493:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 494:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 495:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 496:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 497:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 498:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 499:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 501:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 502:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 515:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 516:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 517:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 518:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 519:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 520:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 523:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 527:
{ yyval = yyvsp[-1]; }
break;
case 528:
{ yyval = 0; }
break;
case 532:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 533:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 534:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 535:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 536:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 539:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 540:
{ yyval = (NOD) NULL; }
break;
case 542:
{ yyval = (NOD) NULL; }
break;
case 543:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 545:
{ yyval = (NOD) NULL; }
break;
case 547:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 552:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 553:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 554:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 555:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 556:
{ yyval = yyvsp[0];}
break;
case 558:
{ yyval = yyvsp[0];}
break;
case 559:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 562:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 563:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 564:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 565:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 566:
{ yyval = 0; }
break;
case 567:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 568:
{ yyval = (NOD) NOD_SHARED; }
break;
case 569:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 570:
{ yyval = (NOD) 0; }
break;
case 571:
{ yyval = (NOD) NOD_READ; }
break;
case 572:
{ yyval = (NOD) NOD_WRITE; }
break;
case 574:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 575:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 577:
{ yyval = 0; }
break;
case 579:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 580:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 581:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 582:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 583:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 584:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 585:
{ yyval = make_list (yyvsp[0]); }
break;
case 586:
{ yyval = 0; }
break;
case 588:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 589:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 590:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 594:
{ yyval = yyvsp[0]; }
break;
case 595:
{ yyval = 0; }
break;
case 596:
{ yyval = yyvsp[0]; }
break;
case 597:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 598:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 599:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 600:
{ yyval = 0; }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 608:
{ yyval = make_list (yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 613:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = yyvsp[-1]; }
break;
case 615:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 616:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 617:
{ yyval = make_list (yyvsp[-1]); }
break;
case 618:
{ yyval = NULL; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 626:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 627:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 628:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 629:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 630:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 631:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 632:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 633:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 634:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 635:
{ yyval = yyvsp[-1]; }
break;
case 636:
{ yyval = yyvsp[0]; }
break;
case 637:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = yyvsp[0]; }
break;
case 640:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 641:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 642:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 643:
{ yyval = 0; }
break;
case 644:
{ yyval = make_list (yyvsp[0]); }
break;
case 645:
{ yyval = 0; }
break;
case 647:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 650:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 651:
{ yyval = yyvsp[0]; }
break;
case 652:
{ yyval = 0; }
break;
case 653:
{ yyval = yyvsp[0]; }
break;
case 654:
{ yyval = 0; }
break;
case 655:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 656:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 657:
{ yyval = 0;}
break;
case 658:
{ yyval = yyvsp[0]; }
break;
case 659:
{ yyval = 0; }
break;
case 660:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 661:
{ yyval = 0; }
break;
case 662:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 663:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 664:
{ yyval = 0; }
break;
case 665:
{ yyval = 0; }
break;
case 667:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 671:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 672:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 673:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 674:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 677:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 678:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 680:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 683:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 684:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 688:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 689:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 691:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 695:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 702:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 703:
{ yyval = yyvsp[0]; }
break;
case 705:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 708:
{ yyval = NULL; }
break;
case 709:
{ yyval = make_list (yyvsp[-1]); }
break;
case 711:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 714:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 715:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 717:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 720:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 721:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 732:
{ yyval = yyvsp[-1]; }
break;
case 733:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 735:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 736:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 737:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 738:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 742:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 743:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 744:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 745:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 746:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 747:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 748:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 749:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 750:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 751:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 753:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 754:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 755:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 756:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 759:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 761:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 763:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 764:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 765:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 766:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 767:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 768:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 769:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 771:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 772:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 773:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 774:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 775:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 776:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 777:
{ yyval = make_list (yyvsp[-1]); }
break;
case 778:
{ yyval = yyvsp[-1]; }
break;
case 779:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 780:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 788:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 789:
{ yyval = yyvsp[0]; }
break;
case 790:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 791:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 792:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 793:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 794:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 795:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 796:
{ yyval = yyvsp[-1]; }
break;
case 797:
{ yyval = yyvsp[-1]; }
break;
case 800:
{ yyval = yyvsp[0]; }
break;
case 801:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 802:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 803:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 804:
{ yyval = yyvsp[0]; }
break;
case 805:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 806:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 807:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 808:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 810:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 812:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 813:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 814:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 815:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 816:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 817:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 819:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 820:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 821:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 822:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 828:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 829:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 830:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 831:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 832:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 833:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 834:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 835:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 836:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 837:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 838:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 839:
{ yyval = yyvsp[0]; }
break;
case 840:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 842:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 843:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 844:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 845:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 846:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 848:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 849:
{ yyval = yyvsp[0];}
break;
case 850:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 851:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 852:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 853:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 854:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 855:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 856:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 857:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 858:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 859:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 860:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 861:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 862:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 863:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 864:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 865:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 866:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 867:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 868:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 869:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 870:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 871:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 872:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 873:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 874:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 875:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 876:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 879:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
