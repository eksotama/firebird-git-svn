#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem. (TODO: allow these functions in select_group_by_list inside the engine)
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define LARGEINT 498
#define KW_INT64 499
#define CASE 500
#define NULLIF 501
#define COALESCE 502
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
    9,    9,    9,    9,   20,   20,   19,   19,   19,   30,
   30,   23,   31,   31,   31,   31,   31,   22,   22,   28,
   28,   24,   13,   13,   13,   13,   13,   13,   13,   34,
   25,   25,   25,   25,   35,   35,   35,   35,   21,   21,
   36,   36,   36,   26,   26,   41,   27,   27,   42,   42,
    6,   43,   43,   45,   50,   50,   50,   47,   47,   47,
   54,   54,   55,   55,   48,   48,   57,   57,   57,   57,
   57,   44,    5,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   12,   75,   75,   62,   62,   65,
   65,   65,   73,   84,   84,   84,   85,   85,   86,   86,
   87,   87,   91,   91,   72,   94,   94,   96,   96,   97,
   97,  100,  100,  101,  102,  102,  103,  104,   70,   74,
   71,   88,   88,  107,  108,  108,  110,  110,  111,  111,
  111,  111,  111,  109,  109,  112,  112,  113,  113,  113,
  113,  115,  115,  115,  115,  114,  114,  119,  119,  118,
   92,  120,  120,  121,  124,  125,  125,  126,  122,  123,
  123,  127,  127,  128,  128,  129,  129,  129,   90,   90,
   90,   67,   77,  130,  130,  130,  131,  131,  132,  132,
  133,  133,  133,  139,   80,   80,  135,  135,   98,   98,
   93,  143,  144,   56,  136,  136,   99,   99,   99,   99,
   99,   99,  137,  137,  151,  151,  152,  154,  154,  154,
  154,  154,  134,  153,  153,  157,  157,  157,  157,  159,
  160,  161,  156,  155,  155,  155,  155,  155,  162,  163,
  164,  164,  164,  164,   66,   76,  169,  165,  165,  166,
  166,  170,  170,  171,  167,  167,  172,  172,  173,  174,
  174,  168,  168,  168,  176,  176,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  179,  180,  181,  182,  182,  183,  189,  185,  185,
  185,  186,  186,  186,  187,  187,  187,  187,  184,  188,
  188,  177,  177,  194,  195,  195,  196,  196,  196,  196,
   11,  198,  198,  198,  199,  199,  199,  199,  199,  199,
   69,  201,  204,  204,  204,  205,  209,  214,  214,  215,
  215,  216,  216,  141,  203,   81,   83,  202,  202,   68,
  219,  219,  219,  220,  223,  223,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  221,  221,  222,    2,  226,  226,  226,  226,  226,
  226,  226,  234,  235,  232,  232,  236,  236,  236,  236,
  236,  236,  236,  227,  227,  237,  237,  237,  237,  237,
  237,  237,  231,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  239,  239,  241,
  241,  240,  238,  238,  238,  233,  233,  229,  230,  230,
  243,  243,  243,  243,  244,  244,  228,  245,  245,  246,
  246,    8,  247,  247,  247,  247,  247,  247,  247,  247,
  247,  247,  247,  247,   95,   95,  138,  138,  250,  250,
  253,  253,  255,  255,   51,   51,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  260,  260,  261,  261,  251,
  251,  251,  251,  262,  262,   59,   59,   59,   53,   53,
  257,  257,  257,  254,  254,  254,  266,  266,  266,  265,
  265,  264,  264,  264,  258,  258,  269,  267,  267,  267,
  268,  268,  259,  259,  259,  259,  270,  270,   16,   16,
   16,  272,  272,  272,    4,   14,  274,  274,  275,  275,
  276,  276,  271,  277,  277,  278,  278,  279,  279,  279,
  279,  280,  280,  281,  281,  282,  282,  284,  284,  284,
  285,  285,  285,  286,  286,  286,  283,  288,  288,  288,
  289,  289,  287,  287,  290,  292,  292,  291,  291,  273,
   15,  293,  293,  293,  294,  294,  297,  297,  298,  298,
   63,   63,   63,  295,  295,  299,  299,  296,  207,  207,
  208,  208,  302,  302,  303,  303,  303,  300,  306,  306,
  307,  307,  308,  308,  309,  309,  310,  310,  191,  191,
  312,  312,  217,  217,   29,  218,  218,  218,  218,  218,
  218,  218,  218,  313,  313,  313,  314,  314,  314,  206,
  206,  206,  206,  211,  211,  315,  315,  316,  316,  316,
  316,  318,  318,  318,  212,  212,  210,  210,  322,  322,
  322,  213,  213,  323,  324,  324,  324,  324,  324,  325,
  325,  326,  326,  327,  327,  328,  328,  328,  329,  329,
   10,   10,  331,  331,    7,    7,  332,  333,  334,   17,
   17,  335,  336,  337,  337,  178,  304,  304,    3,    3,
  339,  339,  339,  341,  341,   59,  340,  340,  342,  342,
   32,   32,   79,   78,   78,  330,  330,  343,  344,  344,
  192,  192,  192,  140,  338,  338,  105,  105,  105,  105,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  347,  347,  347,  347,  347,  347,  347,  347,  352,
  352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
  352,  352,  352,  352,  352,  358,  358,  348,  348,  349,
  349,  349,  349,  350,  350,  354,  354,  355,  355,  355,
  355,  353,  356,  351,  351,  359,  359,  360,  357,  362,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,  150,  150,  150,  363,
  361,  361,  145,  145,  367,  367,  367,  367,  367,  365,
  365,  365,  365,  365,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  200,  146,  146,  147,  148,  148,
   49,   49,   18,   18,  225,  369,   52,  117,  256,  256,
   89,  364,  364,  364,  364,  370,  370,  370,  370,  370,
  370,  370,  370,  370,  370,  370,  371,  319,  320,  320,
  320,  317,  317,  366,  321,  321,  373,  373,  374,  374,
  375,  375,  378,  378,  376,  376,  381,  381,  380,  377,
  379,  372,  372,  372,  372,  372,  372,  372,  372,  301,
  301,  149,   46,  263,  116,  142,  345,  158,  193,  249,
   61,   58,  197,  106,   64,  305,   33,   39,  311,  248,
   37,   40,  190,   38,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
    8,    6,    7,    5,    1,    2,    1,    2,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    3,
    0,    1,    7,    8,    6,    7,    6,    7,    4,    3,
    1,    3,    3,    3,    2,    2,    2,    2,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    3,    1,    2,
    2,    2,    3,    8,    1,    1,    5,    0,    1,    3,
    1,    3,    2,    4,    1,    3,    2,    3,    4,    4,
    2,    9,    2,    3,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    0,    1,
    1,    6,    6,    1,    1,    0,    0,    1,    0,    4,
    0,    1,    1,    2,    8,    1,    0,    3,    0,    0,
    1,    1,    2,    1,    1,    1,    2,    6,    1,    1,
    3,    0,    1,    1,    0,    1,    1,    2,    3,    4,
    2,    2,    3,    0,    1,    1,    2,    1,    1,    1,
    4,    3,    3,    3,    3,    1,    1,    6,    3,    1,
    3,    1,    3,    2,    1,    0,    2,    3,    1,    0,
    1,    1,    2,    3,    4,    0,    1,    2,    0,    1,
    1,    5,    5,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    2,    0,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    6,    4,    7,    8,    6,    4,    2,    1,    3,
    0,    2,    4,    0,    1,    1,    3,    3,    6,    3,
    0,    1,    2,    4,    1,    3,    2,    2,    2,    1,
    4,    1,    3,    0,    1,    1,    1,    3,    3,    3,
    7,    1,    1,    3,    4,    9,    2,    1,    3,    1,
    1,    6,    3,    0,    0,    0,    0,    3,    0,    9,
    1,    1,    0,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
    5,    2,    0,    4,    2,    3,    3,    2,    2,    3,
    3,    2,    3,    6,    1,    2,    4,    3,    2,    2,
    2,    2,    3,    1,    3,    3,    3,    2,    2,    4,
    4,    5,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    0,    2,    2,    0,    1,    2,
    2,    2,    2,    2,    1,    3,    7,    1,    0,    1,
    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    3,    2,    2,    2,    1,    1,    1,    1,    4,    5,
    1,    3,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    2,    4,    2,    2,    4,    2,    2,
    1,    1,    0,    3,    0,    1,    3,    1,    1,    1,
    3,    1,    1,    1,    2,    0,    2,    0,    3,    5,
    0,    2,    0,    4,    1,    2,    1,    1,    0,    1,
    3,    2,    1,    1,    2,    1,    4,    2,    1,    3,
    8,    5,    1,    3,    1,    1,    4,    4,    4,    1,
    1,    5,    5,    1,    3,    3,    1,    1,    7,    7,
    5,    3,    0,    1,    1,    1,    2,    0,    1,    1,
    1,    0,    3,    1,    3,    1,    0,    3,    1,    3,
    1,    3,    3,    1,    1,    3,    1,    3,    3,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    1,    1,    5,    6,    3,
    4,    5,    6,    3,    4,    3,    4,    3,    4,    4,
    5,    4,    4,    3,    4,    1,    3,    3,    9,    9,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    1,    1,    1,    3,    1,    1,    1,    1,    1,    4,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    4,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    6,    6,    6,    8,
    4,    4,    3,    6,    1,    1,    6,    6,    1,    1,
    4,    6,    4,    5,    3,    5,    4,    5,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,  529,  530,  531,    0,  582,
  685,  686,  690,  691,  438,    0,    0,    0,    0,    0,
    0,  375,  537,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,    0,   93,    0,  855,    0,   19,
  853,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  452,    0,    0,
   35,   32,   34,    0,   33,    0,  928,    0,    0,    0,
    0,   30,   66,   64,    0,    0,    0,    0,    0,    0,
    0,    0,  536,    0,    0,    0,    0,  642,    0,    0,
    0,  930,  623,    0,    0,    0,    0,  105,    2,    0,
    0,    0,    0,  422,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  423,  424,  425,  426,  427,    0,  403,  921,
    0,  925,    0,  382,  927,    0,  379,    0,  625,  931,
    0,  378,    0,  535,  851,    0,  144,  101,    0,  917,
  102,    0,  211,  724,    0,  924,  100,  139,    0,   96,
    0,  103,  857,    0,   97,    0,   98,  934,    0,   99,
  140,  104,  591,  592,    0,  856,  854,    0,  922,   72,
    0,    0,  920,  460,  453,    0,  459,  464,  454,  455,
  462,  456,  457,  458,  463,    0,   28,    0,   37,  711,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  861,    0,  845,  634,  636,
    0,  637,  639,  910,  599,    0,  600,  640,    0,    0,
    0,    0,    0,    0,    0,  554,  543,    0,  546,  548,
  549,  550,  551,  557,  558,    0,  929,  624,    0,  106,
    0,  107,    0,    0,  583,    0,  581,    0,    0,    0,
    0,  439,    0,    0,  346,    0,  214,    0,  385,  376,
  436,  437,    0,    0,    0,    0,    0,    0,  394,    0,
  351,  352,    0,  541,  539,  852,    0,    0,    0,    0,
    0,    0,    0,  147,  126,    0,   94,    0,  115,  114,
    0,    0,    0,    0,    0,    0,  913,   73,    0,    0,
    0,  687,  688,  461,    0,  912,  827,  826,  825,    0,
    0,  828,  829,    0,    0,  831,  326,  327,  321,    0,
  325,  823,  830,    0,  714,    0,    0,   25,    0,    0,
  932,    0,   69,   67,   65,   31,    0,    0,    0,  716,
    0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
  813,    0,    0,  815,    0,    0,    0,  846,    0,    0,
  817,  818,  819,  847,  848,    0,  849,  850,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  721,  810,  811,
  812,  816,  796,    0,  795,    0,  799,  864,  865,  798,
  792,  793,  794,  797,  862,  863,  885,  886,  889,  890,
    0,  602,    0,  698,    0,    0,  603,    0,    0,  580,
    0,  555,    0,  552,    0,  553,  578,    0,  573,    0,
    0,  547,    0,  725,  694,    0,    0,    0,    0,    0,
  517,    0,    0,    0,  587,    0,  584,    0,  179,    0,
    0,  123,  444,  166,  167,    0,  442,    0,    0,    0,
    0,  445,    0,  440,    0,    0,  389,  391,  390,    0,
  392,    0,  386,  212,    0,    0,  262,    0,    0,    0,
    0,  398,  399,    0,  429,    0,    0,    0,    0,    0,
    0,    0,  356,  355,  448,    0,    0,  143,    0,    0,
  152,    0,  151,    0,  158,  141,    0,  156,  159,  160,
  148,    0,    0,  483,  521,  488,    0,  522,    0,    0,
  489,    0,    0,    0,  512,  525,  482,  507,  484,  485,
  486,  487,  467,  346,  465,  466,  468,    0,    0,  477,
  478,  479,  480,  481,    0,    0,    0,    0,    0,  118,
    0,    0,  195,    0,    0,  344,    0,  214,    0,    0,
   81,    0,    0,  706,    0,    0,    0,    0,    0,    0,
    0,    0,  727,  731,  732,  733,  734,  735,  736,  737,
  738,  739,  740,  832,  833,  834,  824,    0,    0,    0,
  713,   26,    0,    0,   42,   70,    0,    0,   24,    0,
  719,    0,    0,  682,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  933,  298,    0,    0,    0,    0,    0,    0,    0,  635,
    0,    0,  638,    0,    0,    0,    0,  926,  606,  533,
    0,  859,  532,    0,  556,    0,  564,  560,  559,    0,
    0,    0,  575,  563,    0,    0,  692,  693,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  594,    0,    0,
  124,    0,    0,    0,    0,    0,    0,  346,  388,    0,
  346,  347,  393,  475,    0,  264,    0,  258,  260,  344,
  918,  234,    0,    0,  346,    0,    0,  203,  344,    0,
    0,    0,    0,  239,  233,  236,  237,  238,  397,  434,
  433,  396,  395,    0,    0,    0,    0,    0,    0,  354,
    0,  346,    0,  149,  153,    0,  157,    0,    0,  508,
  509,  526,    0,  523,    0,    0,  515,  513,  514,    0,
    0,    0,    0,  476,    0,    0,    0,    0,  516,  344,
    0,  194,    0,  197,  199,  200,    0,    0,    0,    0,
    0,  214,   76,    0,    0,   75,  914,  496,  497,    0,
    0,    0,  730,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  323,  329,  330,  328,  715,    0,    0,
    0,    0,    0,    0,    0,    0,   51,   59,   61,    0,
    0,   68,    0,    0,    0,  718,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  902,  903,  904,
  905,  906,  907,  908,  909,    0,    0,    0,    0,    0,
    0,  895,    0,    0,    0,  621,    0,    0,  808,  809,
  883,    0,    0,  916,  804,    0,    0,    0,    0,    0,
    0,  814,  723,  722,    0,    0,    0,    0,  611,  612,
    0,    0,  604,  607,  534,  860,  565,  574,  569,  568,
    0,  579,  726,  695,  696,  344,    0,  209,  589,  590,
  588,    0,  175,  169,  176,    0,  172,    0,    0,  171,
    0,  182,  163,  162,  858,  165,  164,  446,    0,    0,
    0,  387,  263,    0,  205,  346,  207,    0,  347,  202,
  208,    0,    0,  240,    0,  400,  401,  346,  344,  347,
    0,    0,    0,  372,    0,  190,  191,  150,    0,    0,
    0,    0,    0,    0,  524,    0,    0,  346,  347,    0,
  471,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  192,    0,    0,    0,    0,  333,    0,   80,
    0,    0,    0,    0,   85,   82,    0,    0,    0,  919,
  689,    0,    0,  741,    0,    0,    0,  767,  766,    0,
    0,    0,  774,  786,  784,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  729,    0,   63,   55,   56,
   62,   57,   58,    0,    0,   20,    0,    0,    0,   40,
    0,    0,    0,  700,  720,  683,    0,  699,    0,    0,
    0,    0,    0,    0,  214,    0,  866,    0,    0,  881,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  891,    0,  901,    0,    0,    0,    0,    0,
    0,  882,  820,    0,    0,    0,    0,    0,    0,  626,
    0,    0,    0,    0,    0,  571,  572,  576,    0,  193,
    0,    0,    0,    0,    0,    0,  183,    0,    0,  383,
  217,  218,  219,  220,  221,  222,    0,    0,    0,  267,
    0,  215,    0,    0,  241,    0,  430,  431,  402,    0,
    0,    0,    0,    0,    0,  346,  450,  347,  915,  161,
    0,    0,  491,    0,  490,  527,    0,  519,    0,    0,
    0,  469,    0,  499,    0,    0,  501,  504,  506,    0,
    0,  113,    0,  198,  346,    0,    0,  345,    0,   95,
    0,  111,    0,   91,    0,    0,    0,    0,   84,    0,
  782,  783,    0,    0,    0,    0,    0,    0,  785,    0,
    0,    0,    0,    0,    0,    0,  775,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   54,   60,   52,   53,   21,  704,  705,    0,
  702,  709,  710,  707,    0,  681,    0,    0,  872,  871,
    0,    0,  868,  867,    0,  876,  875,  874,  873,  870,
  869,    0,    0,  897,    0,    0,    0,  896,    0,    0,
    0,  619,    0,    0,  614,    0,  615,    0,  632,  628,
  630,    0,    0,    0,    0,    0,    0,  177,  173,    0,
    0,  188,  184,    0,  347,    0,    0,  347,  268,    0,
    0,    0,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  447,  493,    0,  494,    0,  128,    0,
    0,    0,  132,  134,  135,  136,  472,  474,  470,  503,
  347,    0,    0,    0,    0,  331,    0,  334,  346,   86,
    0,    0,   88,    0,    0,    0,    0,    0,    0,  788,
  787,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,  684,  213,  884,  877,  878,    0,  879,  893,  892,
    0,  898,  887,    0,  888,    0,  617,    0,    0,    0,
  646,  649,  650,  652,  653,  654,    0,    0,  598,  347,
    0,  168,  185,  347,  138,    0,  272,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,  275,  270,    0,    0,  280,  281,  282,  283,
  286,  288,  257,    0,  201,  226,    0,    0,    0,  231,
  227,  230,    0,  347,  370,  371,  367,  366,  369,  368,
    0,  492,  520,  137,  125,  133,  255,  120,  347,    0,
  348,  335,    0,    0,   89,   90,   77,    0,  753,  761,
    0,  754,  762,  757,  765,    0,    0,  755,  763,  756,
  764,  750,  758,  751,  759,  752,  760,  701,    0,  894,
  620,    0,    0,    0,    0,  665,  667,    0,  662,    0,
  256,  178,  384,    0,    0,    0,    0,  290,    0,    0,
    0,  289,    0,  291,  278,  284,    0,  287,  273,    0,
  276,    0,  312,  277,  204,  228,  232,    0,    0,  243,
  374,  350,    0,    0,    0,   74,   92,    0,  880,    0,
    0,  651,  647,  666,    0,  269,  279,    0,    0,    0,
    0,  285,    0,    0,  305,  306,  320,    0,    0,    0,
    0,  315,  274,  313,    0,    0,  242,    0,    0,    0,
    0,    0,  340,  341,    0,    0,    0,    0,    0,  673,
    0,    0,    0,    0,    0,    0,  293,    0,    0,    0,
  297,    0,  319,  923,  318,  317,    0,    0,  229,    0,
    0,    0,  247,    0,  246,    0,    0,    0,    0,    0,
  112,    0,  790,  675,  664,    0,    0,  676,    0,  672,
    0,    0,    0,    0,    0,    0,    0,    0,  308,  307,
  314,  316,    0,    0,  251,  250,  249,  343,    0,    0,
    0,    0,  671,    0,  678,  300,    0,    0,  292,    0,
    0,    0,  309,  254,  252,  253,    0,  336,    0,    0,
    0,    0,  310,  294,    0,    0,  789,    0,  677,  303,
  295,    0,  680,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1448,   26,   27, 1449,
   29,   30,   31,   32, 1450,   34, 1451,  594,   98,  367,
  845, 1086,   99,  624,  846,  100,  372,  629,  123,  101,
  102,  229,  916,  112,  847,  848,  171,  199,  103,  849,
  104,  374,   74,  210,  338,  416,  589, 1023,  356,  805,
  563,  471,  784,  590,  591,  592, 1025,  211, 1268,   66,
  161,   67,  205, 1690, 1220,  190,  195,  197,  200,  187,
  178,  181,  192,  202,  128,  280,  282,  364,  230,  734,
  496,  601,  962,  331,  581, 1011, 1212,  529,  682,  988,
  481,  482,  511,  326,  564,  999, 1351,  703, 1160, 1352,
 1353, 1354, 1355, 1356,  602,  188,  179,  322,  536,  323,
  324,  537,  538,  539,  540, 1190,  956,  484,  485,  946,
  944,  486,  950,  945, 1151, 1318,  951,  952, 1156,  333,
  793,  794,  795,  796,  736,  969, 1331,  565,  738,  418,
  798,  905,  505, 1282, 1161,  419,  420,  421,  896,  422,
 1332, 1333,  514, 1471, 1597,  744,  745,  732,  746,  747,
  748, 1598, 1599, 1666,  304,  509, 1168, 1452,  167,  506,
  507, 1169, 1170, 1453, 1454, 1455, 1552, 1456, 1457, 1458,
 1459, 1460, 1461, 1462, 1615, 1654, 1584, 1656,  423,  662,
 1301,  424, 1031, 1553, 1591, 1592, 1625,  359,  360,  425,
 1016, 1218, 1366, 1017, 1018,  116,  256,  445, 1564,  342,
 1145, 1315, 1429, 1601, 1602, 1603, 1604, 1143,  313,  525,
  762, 1187,  526,  760,  193,   52,  308,  172,  133,  291,
  158,  298,  164,  722,  719,  299,  309,  752,  310,  522,
  980,  159,  292,  493,  527, 1188,   88,  169,  214,  566,
  567,  724, 1000,  725, 1001, 1002,  570,  571,  572,  573,
  574,  993,  809,  575,  576,  577,  777,  578,  473,  774,
   36,   37,   38,   54,  174,  315,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  688,  458,  931, 1148,  459,
  460,  693,   39,  132,  287,   40,  474,  475,  708,  675,
  257,  446,  447,  448,  679,  917,  918,  919,  920, 1137,
  426, 1125,  117,  118, 1420, 1421,  427, 1423,  428,  429,
  430,    0, 1610, 1530, 1611, 1612, 1613, 1650, 1691,  379,
 1097,   41,   42,  343,   43,   44,  467,  468,  854, 1094,
 1270, 1274,  380,  632,  184,  603,  604,  605,  606,  607,
  608,  609,  610,  611,  612,  613, 1237, 1041, 1043, 1044,
  903,  660,  431,  432,  433,  434,  363,    0,  207,  435,
  436,  886,  437,  438,  439,  440,  652,  890, 1126, 1121,
  653,
};
static short yysindex[] = {                                   4603,
 1499, -205, 2893,  114, 1111,  -56, 3351,   57, 2628,  -63,
   17, 2884, -205, 1144, -150,  142, 1132,    0,  653,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  437,    0,
    0,    0,    0,    0,    0, 7631,  354,  438,  461,  142,
  518,    0,    0,  589, 1221,  708,  354,  760,  461,  473,
  142,  518,    0,  778,  836,    0,  988,    0,  617,    0,
    0,  983,  858,    0,  142,  911,  354, 1025,  858,  760,
  438,  461,  473,  142,  518,  778,  836,    0,  461,  965,
    0,    0,    0, 1405,    0, 1405,    0, 1080, 1096,   50,
 1469,    0,    0,    0,  708,  142,  708, 1139, 1134, 1157,
   70, 2785,    0,   37,   88,  -24, 1063,    0,  760, 1224,
  964,    0,    0, 1166, 1137,  461,  142,    0,    0, 1344,
  383, 1314,  -60,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  904,    0,    0,
 1221,    0,   15,    0,    0, 1611,    0, 1217,    0,    0,
  565,    0, 1232,    0,    0, 1200,    0,    0, 1125,    0,
    0, 1406,    0,    0, 1221,    0,    0,    0, 1611,    0,
  541,    0,    0, 1365,    0, 1376,    0,    0, 1405,    0,
    0,    0,    0,    0, 1379,    0,    0, 1261,    0,    0,
 1395, 1273,    0,    0,    0, 1261,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1489,    0,  708,    0,    0,
    0,  962, 1335,  974,  836,  773, 1393, 1702, 1431, 1451,
  962, 1369,  974, 1392, 1403,    0, 4818,    0,    0,    0,
 4818,    0,    0,    0,    0, 3384,    0,    0, 1352,  438,
 1429, 1342, -101,  142, 1374,    0,    0,  964,    0,    0,
    0,    0,    0,    0,    0, 1355,    0,    0, 1611,    0,
 1365,    0,  284, 1404,    0, 1380,    0,  469, 1466,  957,
  -60,    0, 1537,  712,    0,  708,    0,  904,    0,    0,
    0,    0,  708, 1415, -127, 1359, -113, 1786,    0, 7752,
    0,    0, 1177,    0,    0,    0, 1780, 1780, 1221, 1470,
 1221, 1113, 1125,    0,    0, 5855,    0, 1415,    0,    0,
 1557,  603, 1807,  142, 1584,  438,    0,    0, 1812,  169,
 1610,    0,    0,    0, 1391,    0,    0,    0,    0, 1396,
 1397,    0,    0, 1216, 1662,    0,    0,    0,    0, 1810,
    0,    0,    0, 1389,    0,  142, 1420,    0,  461, 1399,
    0,  103,    0,    0,    0,    0,  142, 1355,  230,    0,
  142,    0, 1546,  461, 1825,  962, 1468, 1833, 1836, 1838,
    0, 1839, 1841,    0, 1842, 1845, 1847,    0,    0, 1848,
    0,    0,    0,    0,    0, 1849,    0,    0, 3876, 1861,
 1870, 4818, 4818, 4015, 1430, 1874, 1823,    0,    0,    0,
    0,    0,    0, 1824,    0, 1871,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2182,    0, 1866,    0, 1595, 1876,    0, -106,   22,    0,
 -132,    0,  538,    0,  538,    0,    0, 1879,    0,  120,
 1495,    0,    0,    0,    0, 1872,  106, 1869, 1415, 1887,
    0, 1651, 1651, 1889,    0, 1894,    0, 1552,    0,  152,
 1593,    0,    0,    0,    0, 1221,    0, 1780, 1780, 1780,
 1780,    0, 1899,    0, 1672, 1675,    0,    0,    0, 1644,
    0, 5855,    0,    0, 5855, 1502,    0, 1611, 1690, 1494,
 5241,    0,    0, -155,    0, 1494, 1161, 1217,    0, 1558,
 1522, 1486,    0,    0,    0,  673, 1566,    0, 1510,  473,
    0, 1221,    0, 1691,    0,    0, 1113,    0,    0,    0,
    0,  146, 1525,    0,    0,    0, 1526,    0, 1579, 1951,
    0, 1645, 1954,  -80,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1905,  165,    0,
    0,    0,    0,    0,  147, 1959, 1960, 1954, 1737,    0,
 1221, 1221,    0, -127,  565,    0, 1621,    0, 1592, 1962,
    0, 7571,  101,    0, 1622, 1627, 1973, 2168, 1976, 1696,
 7524,  -59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1620, 1662,  708,
    0,    0, 1173, 1580,    0,    0, 1555,  974,    0, 1707,
    0, 1628, 1987,    0, 1707, 1173, 1708, 1710,  461,  522,
 4099,  710,  760, 4818,  837,  915,  971, 2980, 4818, 2168,
 1866, 1576,  616, 4818, 4099,  662,  662, 1144, 2228, 1989,
    0,    0, 4238, 1572, 4818, 4818, 4818, 4818, 4818,    0,
 4818,  118,    0,   87, 1582, 4099, 1577,    0,    0,    0,
  939,    0,    0,  -78,    0, 1591,    0,    0,    0,  142,
  266,  142,    0,    0,  708, 1355,    0,    0, 4099, 1779,
 -127, 1572,  988,  988,  284,   96,  708,    0, 1221, 1221,
    0, -114, 1510, 1510, 1587,  473,  957,    0,    0, 2009,
    0,    0,    0,    0, 1770,    0,  708,    0,    0,    0,
    0,    0, 1776, 2017,    0, 1761, 1775,    0,    0, 1720,
 1732, 1405, 1808,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  473,  708, 5548, 1677, 1700, 1703,    0,
  473,    0, 1307,    0,    0, 1670,    0,   40, 1683,    0,
    0,    0,  473,    0, 1951,  123,    0,    0,    0, 1801,
  123, 1685,  123,    0, 2065,  473,  473,  473,    0,    0,
 1751,    0, 1636,    0,    0,    0, 1177, 1695,  142, 1637,
   79,    0,    0, 2075, 1843,    0,    0,    0,    0,  169,
 1655, 1404,    0, 1404, 5175,  400, 4818, 4818, 2265, 2079,
 1246, 2348, 4818, 2526,  542, 2649, 2798, 4347, 2895, 3138,
 3261, 2168, 2168,    0,    0,    0,    0,    0, 1399,  461,
  518, 1399,  778,  836,  125, 2082,    0,    0,    0, 1173,
 1741,    0, -139, 1755, 1355,    0, 4099, 1755, 2084, 2082,
 1173,  454, 1813, 4818, 4818, 1875, 4818, 2092, 4818, 2091,
 2313, 4818, 4818, 4818, 4818, 4818, 4818,    0,    0,    0,
    0,    0,    0,    0,    0, 1815,  846,  -83, 4818,  631,
 4099,    0, 2168, 1851, 1866,    0, 2094,  -24,    0,    0,
    0, 1866, 1667,    0,    0, 1862,  662,  662, 1285, 1285,
 1000,    0,    0,    0,   87, 2101, 2107,  945,    0,    0,
 2168, 1816,    0,    0,    0,    0,    0,    0,    0,    0,
  547,    0,    0,    0,    0,    0, 1668,    0,    0,    0,
    0, 2117,    0,    0,    0, 1680,    0, 1780, 1896,    0,
 -114,    0,    0,    0,    0,    0,    0,    0, 2124, 2168,
  385,    0,    0, 1865,    0,    0,    0,  385,    0,    0,
    0, 1405, 1405,    0, 2126,    0,    0,    0,    0,    0,
 -161,  396,  -70,    0, 1906,    0,    0,    0, 1712,  114,
 1686, 1746, 1770, 2130,    0, 1510, 1687,    0,    0, 1040,
    0, 2116, 1712, 1065,  473, 2135, 2145, 2147, 1865, 1780,
 1593, -127,    0, 1566, 1144, 1734, 1749,    0,   39,    0,
  473, 1799, 1885, 7571,    0,    0,  473, 1706, 1891,    0,
    0, 2161, 2162,    0, 1443, 1866, 2164,    0,    0, 1866,
 2165, 4486,    0,    0,    0, 1856, 2170, 1866, 2172, 1465,
 2174, 1866, 2181, 4818, 4818, 2079, 4818, 4570, 2192, 1866,
 2193, 2195, 1866, 2198, 4818, 1866, 2199, 1866, 2200, 2201,
 1866, 2202, 2203, 1866, 2208,    0, 1990,    0,    0,    0,
    0,    0,    0, 1921, 1173,    0, 1173,  125, 2082,    0,
  160,  160,   30,    0,    0,    0, 1705,    0, 2084, 2082,
 2207,  454, 2320, 2404,    0, 2495,    0, 2511, 4818,    0,
 2675, 2688, 2753, 2817, 2833, 2861, 4818,  473, 4099, 1866,
 1817, 4099,    0, 4818,    0, 1945,  449, 4818, 4099, 4818,
 4818,    0,    0,  945, 2214, 4099, 1137,   87, 1868,    0,
 1873, 1888, 1915, 1986, 1929,    0,    0,    0, 1865,    0,
 1855, 1221, 1883, 1510, 1890, 1510,    0, 2168,  594,    0,
    0,    0,    0,    0,    0,    0, 1834, 1993, 1865,    0,
 4818,    0, 1992, 1877,    0, 2168,    0,    0,    0, 1900,
 1901, 1902, 1903, 1904, 1911,    0,    0,    0,    0,    0,
 2245,  114,    0, 1587,    0,    0,  123,    0,  385, 1920,
  123,    0,  123,    0, 1770, 2260,    0,    0,    0, 1993,
 1510,    0, 1593,    0,    0,  -24, 2024,    0,  414,    0,
 2117,    0, 2263,    0, 2268, 1221, -107, 2273,    0, 1221,
    0,    0, 4818, 1886, 1886, 1144, 2274, 1709,    0, 1886,
 1886, 4818, 1886, 1886, 1759, 1866,    0, 1722, 4818, 1866,
 1886, 1886, 1886, 1886, 1866, 1886, 1886, 1886, 1886, 1886,
 1886, 1931,    0,    0,    0,    0,    0,    0,    0, 1881,
    0,    0,    0,    0, 4099,    0,  454, 2207,    0,    0,
 5855, 2278,    0,    0, 2949,    0,    0,    0,    0,    0,
    0, 3025,  100,    0, 4099, 2012, 1897,    0, 4099, 3132,
 1717,    0,  888, 1866,    0, 1719,    0,  945,    0,    0,
    0,   87, 1105, 2168, 1925, 1993, 1780,    0,    0, 1221,
 1307,    0,    0,  597,    0,  708, 7749,    0,    0, 1866,
 1651, 1992,    0,  876,  142,  624, 1884, 1985, 1907, 2035,
 2001, 2040, 1865,    0,    0, 2304,    0, 2306,    0, 1998,
 1651, 1920,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1307, 1906, 3384, 1966,    0, 1695,    0,    0,    0,
 2003, -168,    0, 1770, 2005, 1866, 2323, 2329,  -24,    0,
    0, 2337, 2339, 1866, 2340, 2341, 4818, 4818, 1866, 2344,
 2349, 2351, 2353, 2355, 2356, 2364, 2366, 2367, 2368,    0,
  160,    0,    0,    0,    0,    0,  473,    0,    0,    0,
 4099,    0,    0, 4099,    0, 1582,    0, 1047, 2133, 2370,
    0,    0,    0,    0,    0,    0,  -59, -116,    0,    0,
 1510,    0,    0,    0,    0, 5855,    0,  354,  880, 2357,
 1404, 2375, 2069, 4818, 2358, 2378, 2360, 2371, 2373, 2093,
 2374,    0,    0,    0, 6749, 2379,    0,    0,    0,    0,
    0,    0,    0, 2398,    0,    0, 2090, 2108,  142,    0,
    0,    0, 1405,    0,    0,    0,    0,    0,    0,    0,
 1993,    0,    0,    0,    0,    0,    0,    0,    0, 2131,
    0,    0, 4818, 1221,    0,    0,    0, 1221,    0,    0,
 4818,    0,    0,    0,    0, 1866, 1866,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2413,    0,
    0, 1816, 2168, 1572, 1105,    0,    0, 2087,    0, 2417,
    0,    0,    0, 2400, 2407,  461, 4818,    0, 2122, 2168,
 2175,    0, 2168,    0,    0,    0,  138,    0,    0,  599,
    0,  -85,    0,    0,    0,    0,    0, 1405, 2085,    0,
    0,    0,   93, 1582, 1866,    0,    0,  888,    0, 1929,
  -59,    0,    0,    0,  787,    0,    0, 4709, 2287,  138,
  630,    0,  632, 1174,    0,    0,    0,  354, 2010,  114,
  174,    0,    0,    0, 2085,  533,    0, 2086, 2089,   93,
 2428,  945,    0,    0, 1816, 2439, 1582, 1925,  142,    0,
 2440, 2438, 1240, 3507, 2074, 2443,    0,  186, 2055, 2187,
    0,  138,    0,    0,    0,    0, 5073,  599,    0,  471,
  471, 2191,    0, 2063,    0,  945, 2468,   93, 2166, 1929,
    0, 1816,    0,    0,    0,  787, 2471,    0,  438,    0,
 2228, 1727,   62, 2456, 2225, 2215, 5073, 5073,    0,    0,
    0,    0, 2057,  549,    0,    0,    0,    0,  945,   93,
 1925, 1929,    0,  438,    0,    0,  138, 2478,    0, 1655,
 5073, 2218,    0,    0,    0,    0, 1167,    0, 1925, 2483,
 2488, 1739,    0,    0, 5073, 2168,    0,  438,    0,    0,
    0,  -59,    0,
};
static short yyrindex[] = {                                      0,
    0,  121,  671,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  212, 1940,    0,    0,    0,    0, 2533,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  722,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2205,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2160,
    0,    0,    0,   52,    0,   52,    0,    0,    0,    0,
 2167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3630, 2016,    0,    0,    0,
  240,    0,    0,    0,  769,    0,    0,    0,    0,    0,
    0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -93,    0,    0,    0,    0,
  895,    0,  887,    0,    0,    0,    0,    0, 1660,    0,
    0, 7654,    0,    0,    0,    0,    0,    0,  -93,    0,
  499,    0,    0, 2505,    0,    0,    0,    0, 2282,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  918,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1069,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1028,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  209,    0,    0, 1077,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -93,    0,
 2505,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1085,    0, 2270,    0,    0,    0,    0, 1123,    0,    0,
    0,    0,    0, 2286,  801, 7783,    0, 1185,    0,    0,
    0,    0,  342,    0,    0,    0, 2098, 2098,    0,    0,
    0, 1186, 1967,    0,    0,    0,    0, 2286,    0,    0,
 1333,    0,    0,    0,    0,    0,    0,    0, 7336, 2169,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1242,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1268,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5289,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5426,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   63,    0,    0, 2239,    0,  112,    0,    0,
    0,    0, 1015,    0, 1015,    0,    0,  764,    0,  860,
 1033,    0, 3172,    0,    0,    0,  918,    0, 2286,    0,
    0, 1005, 1005,  806,    0,    0,    0,  352,    0, 2613,
   85,    0,    0,    0,    0,    0,    0, 2098, 2098, 2098,
 2098,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2299,    0,    0,
    0,    0,    0, 2270,    0,    0, 1278,    0,  587, 2097,
    0,    0,    0,    0,    0,    0,  163,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1296,    0,    0,    0,
    0, 1409,  793,    0,    0,    0, 1055,    0,    0, 1086,
    0,    0, 1336,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1978, 2088,    0,
    0,    0,    0,    0, 1378,  949,    0, 1336,    0,    0,
    0,    0,    0,  801, 1331,    0,    0,    0,    0, 2152,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  242,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  244,
    0,    0,    0,    0,  244,    0,    0,    0,    0, 4957,
    0, 4957,    0,    0, 4957, 4957, 4957,    0,    0,    0,
 2113,    0,    0,    0,    0, 6040, 6210, 3753,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2007,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  789,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  801,    0,  372,  372,    0,    0,    0,    0,    0,    0,
    0, 3903,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
    0,    0, 2530,    0,    0, 2206, 2294,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  358,  363,  387,    0,
    0,    0, 1417,    0,    0,    0,    0,    0, 1413,    0,
    0,    0,    0,    0, 1086,    0,    0,    0,    0,  378,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 7592,    0,    0,    0,  190,    0,    0,    0,    0, 2266,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1320, 1325,    0,    0,    0,    0,
    0,    0,    0, 1353,    0,    0,    0, 1353, 1390, 1441,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  394,    0,    0, 4957,    0,    0,
    0,  995,    0,    0,    0, 5596, 6347, 6517, 5733, 5903,
    0,    0,    0,    0,    0,   64,  609,  585,    0,    0,
    0,  816,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  364,    0,    0,    0,    0,    0, 2098, 2118,    0,
 4160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2308,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1481,    0,    0,    0,    0,    0,
    0,    0, 1455,    0,    0,    0,    0,    0,    0,    0,
    0, 1270,    0,    0,    0,    0,    0,    0, 2308, 2098,
 1483,  801,    0, 2311, 1940, 1491,   75,    0,    0,    0,
    0, 7592,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1600,    0,    0,    0, 2637,
    0,    0,    0,    0,    0,    0,    0, 3249,    0, 4344,
    0, 4815,    0,    0,    0,    0,    0,    0,    0, 6601,
    0,    0, 6673,    0,    0, 6709,    0, 6772,    0,    0,
 6793,    0,    0, 6921,    0,    0, 3495,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1320, 1509,    0,
 2144,  249,    0,    0,    0,    0,    0,    0, 1511, 1516,
 1530,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2150,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2243,  994,    0, 1831,    0, 2247,    0,
 2250, 2252,    0,    0,  906,    0,    0,    0, 2308,    0,
 3167,    0,    0,    0, 2138,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2312,    0,
    0,    0, 1002,    0,    0,    0,    0,    0,    0,  413,
  637,  647,  649,  739,  851,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  779,
    0,    0,    0,    0, 2300,    0,    0,    0,    0,    0,
    0,    0, 1533,    0,    0, 3630,    0,    0,    0,    0,
 1549,    0,    0,    0,    0,    0,   60,    0,    0,    0,
    0,    0,    0,    0,    0, 3753,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6932,    0, 6966,    0, 7076,
    0,    0,    0,    0, 7165,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1554,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1308,    0,    0,    0,  820,    0,    0,
    0,    0,    0,    0,  799,    0, 2098,    0,    0,    0,
 3059,    0,    0,    0,    0,    0,    0,    0,    0, 2557,
 1119, 1504,    0, 2270,    0,    0,    0,    0,    0,    0,
    0,    0, 2308,    0,    0,    0,    0,    0,    0,    0,
 1586,  824,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  318,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  441,    0, 7215,    0,    0, 4957,    0,
    0,    0,    0, 7311,    0,    0,    0,    0, 7331,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  313,    0, 2243,  292,   71,
    0,    0,    0,    0,    0,    0,  366, 2563,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  226,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7439, 7459,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  291,    0,    0,    0,    0,    0, 2564,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1520, 1258,    0,
    0,    0,    0,  347, 2557,    0,    0,    0,    0,   54,
 5037,    0,    0,    0, 2563,    0,    0,   44,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2490,    0,    0, 2639, 2826,    0,
  135,   65,    0,    0,  166,    0,  313, 2568, 1244,    0,
    0, 2569,    0,    0, 2546,   77,    0, 2314,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2243, 1195,    0,    0,   73,
    0,  291,    0,    0,    0, 2563,    0,    0,    0,    0,
 2572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
   86,   54,    0,    0,    0,    0,    0, 2558,    0,    0,
    0, 7727,    0,    0,    0,    0, 2243,    0, 2568, 2577,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1251,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2622,    0,    0, 2623,
    0,    0,    0,    0,   10,    0, 2625,    1,  223,  -21,
 -556, 1545,  729, -258,   59, 2629, 2391,    0,  -37,    0,
 2399,  -88,  -43,    0,  562, -332,  -29,  -49,  -25, -185,
 2408, 2014,    0,    0,    0,  963,    0,    0,  -46, 1623,
 -511,  -38, -734, 2058, 1858, -250, 1639, 2579, -266,    0,
  -50,    0, 1115,  -45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -554, -599, 1643,
 -252,  -99, -881,    0,    0,    0,    0, -289, -100,-1108,
 1652, -292,  -36,    0, -477,    0,    0, -454, -828,    0,
 1315,    0,    0, 2381, -572,  -27,    0,    0,    0,    0,
 2343,    0, 2134, 2388, -214, 1674, -679,    0,    0,    0,
 -659,    0,    0,    0,    0,    0,    0, 1731,    0, 2405,
 1984, 1676, 2382, 2392,    0,    0,    0, -467, 1956,  -55,
  262, -670,    0,    0, -144, -819, -336, -177, -165, -151,
    0, 1368,-1001,    0, 1110, 1372,    0, 2194,    0,    0,
    0, 1112, 1116, 1082,   90,  552, -911, -474,    0,    0,
 1994,    0, 1563, -395,    0,    0,    0, -206,    0,    0,
    0,    0,    0,    0,    0,    0, -750,    0, -425,    0,
-1081, -271, 1054, 1187,    0, 1117,    0,    0, 2383,  -97,
    0,    0,    0,    0,-1045, -616, -841, 1377,    0, -456,
-1305,-1377, -972,    0,-1361, 1140,  615, -549, 2158, 1947,
 1743, 1400,    0,    0,   -2,    0,    0,    0,    0,    0,
 2445,    0,    0,    0,    0, 2460, 2241,    0,    0,    0,
    0,    0, 2469,    0,    0,    0,    0,  -16,    0,    0,
    0, -303, 1981, -295, 1568, -408,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2209,    0,    0, 1996,
    0,    0,    0, 2759,    0,    0,    0,    0, 2508,    0,
    0,    0,    0, 2322,    0, 2324,    0,    0,    0, 2095,
    0,    0,    0,    0,    0,  -77,    0, 2072,    0,-1166,
 1193,    0, 2104, -593, 2106,    0, -818, 1898,    0,    0,
 -121, -634,    0, 2667,    0, 1263,-1136,    0,-1080, -928,
 -856,    0, 1362,    0, 1153,    0, 1192,    0, 1106,    0,
    0,    0,    0, 2336,    0,    0,    0, -318, 2177, 1957,
 -975,    0,    0,    0,  925,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2781, 1254, 1758,    0,
 -584,    0,    0,    0, -201,    0, 2451,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -938, 1693,
    0,
};
#define YYTABLESIZE 8280
static short yytable[] = {                                     125,
  183,   71,  163,  278,   70,  166,  185,  231,  177,   33,
  697,  472,  168,  249,  252,  189,  250,  253,  704,  182,
  897,  191,  568,  194,  362,  813,  215,  816,  530,  535,
  569,  938,  196,  735,  723,  219,  224,  726,  220,  201,
  683,  898,  500,  737,  221,  226,  502,  866,  373,  237,
  947,  239,  218,  285, 1306,  223, 1130,  373,  125,  631,
  358,  225,  697,  618,  338,  339,  681,  222,  238,  465,
  644,  500,  656,  595,  332,  492,  247,  888,  228,  859,
  806,  357,  279,  990,  441,  663,  911, 1173,  991,  281,
  444,  259,  248,  235,  656,  712, 1134, 1210, 1179,  248,
   87, 1677,  301,  697,  618,  935,  697,  618,  338,  339,
  335,  644,  500,  235,  300,  500, 1271, 1200, 1022,  415,
  538,  697,  618,  338,  339,  637,  915,  251,  361,  644,
  500,  656, 1600,  332,  337,  299, 1416,  913,  327, 1172,
 1408, 1162,  974,  441,  663,   69,  628,  417, 1162,  696,
  248,  441,  942,  362,  466,  605,  443,  677,   69,  913,
  510,  476,  373,  692,  740,  645, 1372,  996, 1085,  443,
  259, 1334,  365, 1368,  516,  119, 1422, 1180,  832,  538,
 1294, 1091,  453, 1296,  626,  768,  786, 1495,  711,  358,
   69,  710, 1608,  337,  368,  415,  778,  288,  713,  714,
  715,  716,  832,  368,   69,  453,  477,  568,  561,  105,
  357,  538, 1433,   69,  450,  569, 1570, 1628,  922,  383,
  464,  373,  248, 1593,  645,  712,  457, 1526,  443, 1622,
   83, 1184, 1424,   83,  109,  254,  540, 1316, 1636,  545,
  501,  657,  948,  703,  535,  741,  289,  504,  498,  183,
   53,  517, 1527, 1488,  520,  783,  466,  361, 1195, 1076,
 1077,  743, 1671, 1096,   75,  779,  712,  561, 1185,  712,
  538,  301,  531,  684,  533,  769, 1669,  106,  328,  255,
  120, 1181,  657,  454,  712,  583,  742,  121,  978,  107,
  587,  648,  265, 1088, 1689,  540,  585, 1092,  545, 1640,
  657,  634,  703,  833, 1099, 1101, 1344,  498, 1687,  651,
 1528,  780,  656,  657,  659,  949,  119,  189,  259, 1308,
 1127, 1492,  464,  733, 1496,  625,  697,  833,  622,  500,
 1334,  645,  648,  180,  244,  648, 1672,   71,  455,  630,
  625,  449,  441,  635,  595,  500,  658,  180,  368,  302,
  648,  597, 1119,  658,  678,  456, 1409,  359,  290, 1373,
 1412,  455,  357,  596,  638,  655, 1550,  997,  469,   87,
 1349,  593, 1174, 1175, 1364,  119,  189,  129,  500, 1162,
  863,  500,  618,  697, 1425,  618,  358, 1159, 1422,  644,
  243,  441,  618,  338,  339,  618,  338,  339, 1216,  618,
  449, 1607,  644,  595,  618,  658,  655,  618,  633,  633,
  597,  644,  364, 1272,  912,  593,  359,  362, 1407, 1222,
  709,  357,  596,  618,  655, 1518,  373,  443,  763,  354,
  593, 1481,  605,  472,  622,  712,  129,  622,  691,  712,
 1034,  782,  373, 1435, 1424,  358, 1463,  618, 1464, 1655,
  656,  618,  622,  836,  301,  739, 1426, 1238,  644,   89,
  618,  338,  339,  337, 1221,  959,  337,  644,  961,  656,
 1359,  364, 1520, 1021,  835,  444,  443,  618, 1627, 1487,
  246,  500,  967,  500,  500,  765,  234,  299,  955,  934,
  500,  764, 1319, 1418, 1302,  246, 1616,  645,  955,  180,
  815, 1302,  958,  441,  618,  338,  339,  680,  500,  985,
  444,  644,  806,  656, 1347,  697,  618,  338,  339,  338,
  339,  837,  463,  697,  618,  644,  663,  656,  183,  332,
  538,  337, 1652,  444,  791,  792, 1095, 1501,  500,   71,
  663,  443,  500, 1029,  871, 1278,  246,  165, 1531,  887,
 1024,  561, 1533,  122,  894,  895,  180,  627,  341,   68,
  657,  807,  645,  902,  838,  906,  907,  908,  909,  910,
  657,  902,   68,  657,  466,  337,  443,  593,  180, 1084,
  926,  246,  657,  476,  609, 1324,  561,  337,  443,  337,
   71,  593, 1560,  808,  785,  625, 1425,  729,  463,  443,
  593,   83,  122, 1336,   68,  449,  645, 1562,  608,  712,
  648,  703,  953,  954,  561,  870,  498,  561,   68, 1379,
  645,  359,  645,  648, 1163,  609,  357,   68,  609,  657,
  124, 1163,  648,  561, 1325, 1643,  365, 1434,  657, 1497,
  464,  658,  284,  609,  658,  183,  361,   14,  360,  608,
  358,  365,  457, 1078,  932,  129, 1081,  129, 1154,  561,
 1432,  832,  943,  943, 1474,  119,  189,  608, 1426,  929,
 1619,  504, 1620, 1367,  633,  658,  364,  957,  658,  648,
  345, 1402,  657, 1606,  655,  595,  930,  645,  648,  212,
  593,  444,  597, 1328,  860,  365,  657, 1182, 1688,  977,
  979,  622,  622,  668,  596,  361,  655,  360,  669,  658,
  832,  129,  593, 1171,  500,  976, 1697, 1035, 1036, 1040,
 1211,  586, 1048, 1050, 1052, 1177, 1060, 1063, 1066, 1068,
 1071, 1074,  648,  466, 1032, 1361, 1033,  346,  363,  449,
  110, 1427,   68,  658,  463, 1199,  648, 1006, 1007, 1008,
  500,  868, 1264,  655, 1266,  359,  129,  443,  984,  362,
  357, 1019,  655,  567, 1103, 1104,  362, 1106,  625, 1108,
  994, 1024, 1111, 1112, 1113, 1114, 1115, 1116,  130, 1521,
  586,  254,  839, 1164,  358,  116,  833,  658, 1348, 1120,
 1164,  895,  510, 1082, 1358, 1165, 1079,  363,  663,  464,
   14,  658, 1165, 1403,  622,  585,  655,   71,  329, 1166,
  364, 1080,  625, 1054,  160,  645, 1166,  479, 1083,  610,
  655,  311,  567,  131,  130,  864,  480,  625,  398, 1618,
 1055, 1015,  510,  510, 1630,  833,  510,  130, 1183,  663,
  245, 1430,  347,  348,  349,  622,  175,  176, 1663, 1685,
  362,  510,  500, 1572, 1281,  832,  645,  663,  832,  577,
  610, 1587, 1163,  610,  585,  350,  351,  401,  402,  403,
  352,  353,  404,  405,  645, 1056, 1465,  131,  610,  579,
  407,  408,  131,  510, 1299,  832,  542,  668,  666, 1664,
  667,  832,  669,  832,  353,  926, 1485,  842,  162,  312,
  365, 1686, 1678,  609, 1057,  656,  330,  500, 1089,  362,
  361, 1588,  360,  609,  371,  686,  609,  658,  577, 1100,
  711,  165, 1589,  891,  892,  609, 1692,  608,  633,  668,
  666,   68,  667, 1343,  669,  109, 1665,  608, 1122, 1123,
  608,  664,  902, 1302, 1264,  542,  656,  665,  505,  608,
 1571,  582, 1146,  353, 1245, 1246,  183, 1248, 1250, 1522,
  116,  116, 1363,  365,  656, 1255, 1206, 1581, 1534,  254,
 1583, 1058,  609,  109,  757, 1631,  658,  568,  170, 1302,
  833,  609, 1224,  833,  917,  569,  687,   71, 1228,  505,
 1191,  964,  505, 1269, 1269, 1273,  608,  362,  173,  498,
  971,  223,  363, 1147,  210,  608, 1561,  505,  109, 1285,
  833,  758,  499,  867,  566, 1307,  833, 1292,  833,  895,
  700, 1164,  895,  422, 1120,  609, 1590, 1431, 1300,  895,
 1303, 1304,  562, 1165,  365,  821,  895,  609,  821,  505,
  586, 1419,  223, 1131,  361,  223,  360, 1166,  210,  608,
  510, 1009, 1639, 1321,  511, 1323,  346,  917,  130, 1551,
  223,  608,  586,  210,  175,  176,  510,  893,  324,  510,
  510, 1330,  510,  566,   91,  206,  544,  510,  235, 1293,
  510,  743, 1124, 1201,  380,  528, 1639,  821,   71,   71,
  625,  562, 1133,  510,  511,  511,  254,  625,  511,  510,
  625,  346,  510,  131,  625,  943,  567, 1605, 1201,  444,
 1362,   93,  625,  511,  362,  759, 1493,  663,  210, 1639,
  235, 1585,  381, 1702,  585,  664,  528,  324,  625,  528,
 1526,  665, 1202, 1376,  645,  544,  363, 1639,  610,  663,
  872,  567, 1384,  380,  528,  511,  585,  645,  610, 1389,
 1642,  610,  625,  353, 1585, 1527,  645, 1205,  353,  210,
  610,  293,  210,  633,  353,  625, 1118,  664,  180,  567,
  339,  510,  567,  665,  254,  443,  528,  210,  344, 1371,
   94,  381,  625, 1375,  377,  154,  663,  625,  567,   71,
   95,  476, 1346,  510,  570,  895, 1659, 1149,  444,  895,
  510,  235,  577,  645,  510,  466,  505,  610,  674,  625,
  294,  510,  645, 1528,  567,   96,  610, 1622,  874,  322,
  186,  625,  505,  625,  656,  505,  505, 1585,  505,  510,
  254, 1661, 1621,  505,  510,  488,  505,  577,  198,  663,
 1178,   41,  235,  377,  154,  570,  656,  122,  362,  505,
  342, 1585,  203, 1419, 1467,  505,  645,  248,  505,  510,
  610, 1682, 1683,  510,  443,  577, 1139,   49,  577,  210,
  183,  464,  610,  943,  876, 1586, 1468,  435,  322,  235,
 1140,  223, 1536, 1469,  577, 1694,  489, 1506, 1507, 1436,
  204,  342,  353,  656,  342,  155,   97, 1473,  248, 1701,
   41,  248,  656, 1269, 1141,  208,  261,  210, 1586,  342,
  577,  895,  511,  473,  895,  611,  248, 1470,  209,   39,
  490,  435,  295,  210,   22, 1537,   49,  505,  511,  611,
 1532,  511,  511,  466,  511,  518,  435,  611,  491,  511,
  296,  262,  511,  528, 1541,  210,  656,  216,  822,  505,
 1660,  822,  708,  611,  155,  511,  505,  566, 1142,  528,
  505,  511,  473,  528,  511,  528,  227,  505, 1139,  263,
  528,  213,  264,  528,  297,  562,  518,  502,   39,  518,
  235, 1586, 1140,   22, 1559,  505,  528, 1535,  265,   45,
  505,  488,  528, 1565,  518,  528,  366,  246,   71,  464,
  822, 1568,  235,  476, 1519, 1586, 1141,  611,  498,  235,
  562,  708,  495,  534,  266,  505,  189,  370,  502,  505,
  566,  502,  122,  566,  925,  476,  518,   72,   73,  621,
 1523, 1558,  620,  511,  371,  523,  502, 1579,  562,  566,
   47,  562,  489,  235,  228,  717,  524, 1566,   45,  498,
 1539, 1567,  498,  495,  500,  511,  495,  562,  476,  393,
 1142,  479,  511,  232,  528,  566,  511,  498,  502, 1595,
  480,  495,  717,  511,  305,  189,  490,  306,  895,  233,
  451,  317,  121,  562,  668,  666,  528,  667, 1139,  669,
  349,  511, 1578,  528,  491,  500,  511,  528,  500,   47,
  476,  839, 1140,  224,  528,  466,  668,  666,   23,  667,
   46,  669,  236,  500, 1651,   48,  340,  241,  318,  712,
  319,  511,  528,  307,  240,  511, 1141,  528,  355,   43,
  340,  476,  122,  354,  126,  466,  466, 1623,  340,  451,
  242,  121,  728,  320,  224,  727,  125,  224,  110,  349,
 1696,  248,  528,   44,  340,  476,  528,  115, 1609,  466,
  712,  260,  224,  712,  664,  399,  127,   23,  321,   46,
  665,  464,  342,  466,   48,  840,  400, 1647,  712,  342,
 1142,  674,  342,  125,  276,  210,  342,   71,   43,  353,
 1626,  122, 1609,  518,  342,  406,  914,  277, 1045,  776,
  353,  464,  464, 1675,  409,  410,  411,  110,  340,  518,
  342,  841,   44,  518, 1648,  518,  842,  283,  674,  933,
  518,  125,  843,  518, 1046,  464,  750, 1649,  751, 1609,
  914,  674,  286,  371,  342,  502,  518,  114,  115,  464,
  776,  844,  518,  776,  210,  518, 1263,  342, 1265,  600,
  303,  502,  412,  125,  413,  502,  314,  502,  776,  145,
  834,  316,  502,  619,  342,  502,  498,  415,  856,  325,
  495,  855,  248,  347,  348,  349, 1013, 1020,  502, 1012,
  802,  332,  175,  176,  502,  498,  498,  502,  498,  495,
  495,  342,  495,  498,  334,  189,  498,  495,  986,  987,
  495,  352,  353,  342, 1233,  342,  354, 1132, 1150,  498,
 1131, 1012,  500,  495,  518,  498,  336,  189,  145,  495,
 1153,  337,  664, 1152,  248,  341, 1193, 1198,  665, 1192,
 1197,  340,  500,  377,  500,  600,  518,  369,  412,  500,
  413,  378,  500,  518,  664, 1276,  189,  518, 1275, 1381,
  665,  381, 1131,  415,  518,  500,  502, 1415,  248, 1417,
 1414,  500, 1414,  668,  666,  189,  667, 1676,  669,  382,
 1414,  384,  518,  189,  189,  386, 1242,  518,  502, 1700,
  189,  235, 1622,  224,  345,  502,  387,  498,  449,  502,
  451,  495,  452,   45,  117,  117,  502,  712,  189,  712,
  668,  666,  518,  667,   46,  669,  518,  712,  461,  498,
  189,   47,  189,  495,  502,  463,  498,  939,  940,  502,
  495,   14,  478,  487,  495,  498,  508,  498,  515,  518,
  616,  495,  865,  500,  869,  189,   48,  873,  875,  877,
  528,  346,  532,  580,  502,  498,  584,  586,  502,  495,
  498,  588,  614,  619,  495,  500,  623,  615,  616,  371,
  189,  776,  500,  670,  668,  666,  636,  667,  628,  669,
  639,  616,  640,  500,  616,  641,  388,  642,  643,  498,
  644,  645,  235,  495,  646,  389,  647,  648,  649,  616,
  661,  500,  668,  666, 1128,  667,  500,  669,  712,  390,
  654,   49,  596,  712,  235,  345,  391,  668,  666,  655,
  667,  235,  669,  663,  671,  674,  672,  695,  776,  676,
  712,  776,  690,  694,  597,  500,  701,  712,  776,  699,
  702,  776,  705,   50,  707,  776,  392,   51,  145,  706,
  776,  479,  717,  776,  721,  235,  347,  348,  349,  718,
  175,  176,  720,  730,  731,  754,  756,  345,  755,  776,
  145,  712,  388,  761,  393,  394,  146,  766,  246,  350,
  351,  389,  770,  771,  352,  353,  395,  475,  772,  643,
  396,  643,  643,  776,  643,  390,  776,  776,  598,  145,
  773,  345,  391,  776,  775,  781,  776,  643,  787,  788,
  790,  664,  643,  801,  799,  802,  658,  665,  145,  811,
  597,  810,  812,  776,  346,  814,  850,  145,  475,  851,
 1387,  475,  392,  145,  853,  146,  857,  889,  861,  900,
  862,  599,  904, 1388,  921,  776,  475,  678,  664,  927,
  776,  145,  936,  397,  665,  955,  782,  658,  960,  965,
  393,  394,  776,  398,  776,  641,  966,  641,  641,  733,
  641,  968,  395,  981,  972,  658,  396,  347,  348,  349,
  399,  175,  176,  641,  598, 1049,  973, 1053,  641, 1061,
 1064,  400, 1069, 1072, 1075,  975,  982,  500,  989,  983,
  350,  351,  401,  402,  403,  352,  353,  404,  405,  992,
  406,  998,  664, 1003, 1005,  407,  408, 1010,  665,  409,
  410,  411, 1015,  658, 1027, 1030, 1028,  599, 1042,  347,
  348,  349, 1093,  175,  176, 1087, 1090, 1085,  500,  397,
  664,  500, 1107, 1102, 1109, 1117,  665, 1129, 1105,  398,
 1136,  664,  350,  351, 1144,  664,  500,  352,  353,  616,
 1138,  665,  616,  347,  348,  349,  399,  175,  176,  616,
  620, 1155,  616, 1158, 1167, 1176,  616,  400, 1194, 1186,
 1196,  616, 1189, 1203,  616, 1207,  350,  351,  401,  402,
  403,  352,  353,  404,  405, 1208,  406, 1209, 1217, 1219,
  616,  407,  408, 1021, 1226,  409,  410,  411, 1229,  643,
 1230, 1231, 1232, 1234, 1235,  216,  643,  600, 1239, 1240,
  412, 1241,  413, 1243,  616,  643,  668,  666,  616,  667,
 1244,  669,  673,  668,  666,  415,  667,  616,  669,  643,
  248, 1251, 1252, 1582, 1253,  643,  643, 1254, 1256, 1257,
 1258, 1259, 1260,  643,  616,  146,  216, 1261, 1262,  216,
 1277,  832, 1295, 1298, 1305,  475, 1309,  475, 1312, 1313,
 1314, 1310,  475, 1327,  216,  475,  643,  146,  899,  668,
  666,  616,  667, 1320,  669,  641, 1311, 1317,  475,  510,
 1326, 1322,  641,  616, 1335, 1345, 1337, 1338, 1339, 1340,
 1341,  641,  643,  465,  643,  643,  146, 1342, 1350,  500,
 1360, 1365, 1369, 1236,  414,  641,  643,  412, 1370,  413,
  643,  641,  641, 1374, 1380,  146, 1400, 1401, 1404,  641,
 1410, 1428,  415, 1476,  146,  658, 1475,  248,  668,  666,
  146,  667, 1411,  669,  465,  658, 1478,  465,  658, 1479,
  500, 1480,  641,  500, 1482, 1617, 1483,  658,  146, 1477,
 1484, 1491,  465, 1110,  668,  666,  475,  667,  500,  669,
 1279,  668,  666, 1499,  667,  500,  669,  500,  641, 1500,
  641,  641,  500,  643, 1494,  500, 1498, 1502,  475, 1503,
 1504, 1505,  641,  643, 1508,  475,  641,  414,  500, 1509,
  412, 1510,  413, 1511,  658, 1512, 1513,  643,  643,  643,
  643,  643,  643,  658, 1514,  415, 1515, 1516, 1517,  106,
  248,  643, 1524, 1525, 1540, 1538, 1542, 1543, 1544,  475,
  643,  643,  643,  643,  643,  643,  643,  643,  643, 1545,
  643, 1546, 1548, 1547,  388,  643,  643, 1554, 1555,  643,
  643,  643, 1556,  389, 1280,  668,  666,  658,  667,  641,
  669, 1563, 1557, 1569,  664, 1574, 1575,  390, 1576,  641,
  665,  664, 1580,  345,  391, 1577,  500,  665, 1596, 1632,
 1624, 1638, 1634,  641,  641,  641,  641,  641,  641, 1641,
 1645, 1646,  597,  216, 1653,  216, 1414,  641,  500,  248,
 1657, 1658, 1630,  216,  392,  500,  641,  641,  641,  641,
  641,  641,  641,  641,  641, 1631,  641,  664, 1668, 1670,
 1674,  641,  641,  665, 1679,  641,  641,  641, 1680, 1681,
 1684, 1622,  393,  394, 1037, 1695, 1698, 1038, 1699,  500,
  248,  388,    1,  248,  395, 1283,  668,  666,  396,  667,
  389,  669,  593,   27,  196,  712,  598,  346,  248,  261,
   29, 1284,  668,  666,  390,  667,  142,  669,  498,  601,
  345,  391,  259,   79,  900,  414,  664,  432,  412,  206,
  413,  465,  665,  465,  373,  498,  186,  500,  266,  500,
  498,  465,  265,  415,  216,  899,  633,  500,  248,  599,
  631,  392,  664,  627,  465,  629,  187,  347,  665,  664,
  500,  397,  669,  668,  304,  665,  216, 1047,  663,  670,
 1038,  398,  170,  216,  388,  622,  302,  679,  311,  393,
  394,   25,   28,  389,   35,  347,  348,  349,  399,  175,
  176,  395, 1267,  385,  376,  396,  745,  390,  244,  400,
  111,  852,  375,  345,  391,  800, 1227,  216,  350,  351,
  401,  402,  403,  352,  353,  404,  405,  217,  406, 1026,
 1225, 1223, 1213,  407,  408,  541, 1486,  409,  410,  411,
  767,  170,  465,  497,  392,  483, 1204,  745,  500,  244,
  745, 1157,  244,  664,  937,  470,  512, 1214,  414,  665,
 1039,  412,  970,  413,  465,  745,  513,  244,  397, 1466,
  500,  465,  393,  394, 1629, 1472,  415,  500,  398,  749,
 1635,  248, 1667, 1633,  395, 1286,  668,  666,  396,  667,
  963,  669,  347,  348,  349,  399,  175,  176, 1287,  668,
  666, 1329,  667, 1693,  669,  465,  400,  618, 1594, 1637,
 1490,  500,  797, 1014, 1662,  350,  351,  401,  402,  403,
  352,  353,  404,  405,  521,  406, 1215,  503,  753,  494,
  407,  408, 1489, 1004,  409,  410,  411,  248, 1357,  248,
  995,  113,  685, 1039,  664,  462,  941,  248,  689,  923,
  665,  397,  924,  258,  928, 1051,  789, 1573, 1038, 1529,
  664,  398,  388, 1288,  668,  666,  665,  667, 1673,  669,
 1644,  389,  698, 1703,  617,  347,  348,  349,  399,  175,
  176,  858, 1135, 1247, 1098,  390, 1297,    0,    0,  400,
    0,  345,  391,    0,    0,  245,    0,    0,  350,  351,
  401,  402,  403,  352,  353,  404,  405,  414,  406,    0,
  412,    0,  413,  407,  408,    0,    0,  409,  410,  411,
    0,    0,  392,    0,    0,  415,    0, 1289,  668,  666,
  248,  667,    0,  669,    0,    0,  245,    0,  248,  245,
  170,    0,    0, 1290,  668,  666,    0,  667,    0,  669,
  393,  394,    0,    0,  245,    0,    0,   90,    0,    0,
  248,  170,  395,    0,    0,    0,  396,  248,  745,    0,
    0, 1291,  668,  666,    0,  667,    0,  669, 1059,    0,
    0, 1038,    0,  170,    0,  388,  244,    0,  244,  170,
    0,    0,    0,    0,  389,    0,  244,    0,    0,   91,
    0,  248,    0,    0,  414,    0,    0,  412,  390,  413,
    0,   92,  170,    0,  345,  391,    0,    0,    0,    0,
    0, 1039,  415,    0,  664,  745,    0,  248,  745,  397,
  665,  170,    0,    0,    0,  745,   93,  664,  745,  398,
  170,    0,  745,  665,    0,  392,  170,  745,    0,    0,
  745,    0,    0,  347,  348,  349,  399,  175,  176, 1405,
  668,  666,    0,  667,  170,  669,  745,  400,    0,    0,
    0,    0,    0,  393,  394,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,  395,  406,  244,    0,  396,
  745,  407,  408,  745,  745,  409,  410,  411,    0,    0,
    0,  170,  664,  745,    0,   94,    0,    0,  665,  244,
    0,    0,    0,    0,   90,   95,  244,    0,    0,    0,
  745,    0,    0,    0,    0,    0,    0, 1062,  189,    0,
 1038,    0,    0,    0,  388, 1406,  668,  666,    0,  667,
   96,  669,  745,  389, 1039,    0,    0,  745,    0,    0,
  244,    0,  397,    0,    0,    0,   91,  390,   97,  745,
    0,  745,  398,  345,  391,    0,  664,    0,   92,    0,
    0,    0,  665,  245,    0,  245,  347,  348,  349,  399,
  175,  176,  664,  245,    0,    0,    0,  189,  665,    0,
  400,    0,    0,   93,  392,    0,    0,    0,    0,  350,
  351,  401,  402,  403,  352,  353,  404,  405,    0,  406,
  664,    0,    0,   90,  407,  408,  665,    0,  409,  410,
  411,    0,  393,  394, 1067,    0,    0, 1038,    0,    0,
    0,  388,    0,    0,  395,    0,  174,    0,  396,    0,
  389,  917, 1413,  668,  666,    0,  667,  414,  669,    0,
  412,    0,  413,    0,  390,   91,    0,   55,    0,    0,
  345,  391,   94,    0,    0,  415,    0,   92,   56,    0,
  248,    0,   95,    0,  245,   57,    0,  174,    0,    0,
  174,  108,  917,    0,    0,  917,    0,  929,   58,    0,
    0,  392,   93, 1039,    0,  174,  245,   96,  664,    0,
  917,  397,  917,  245,  665,    0,    0,    0,    0,    0,
    0,  398,    0,    0,    0,    0,    0,    0,  746,  393,
  394,    0,    0,    0,    0,  347,  348,  349,  399,  175,
  176,  395,    0,    0,    0,  396,    0,  245,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,  350,  351,
  401,  402,  403,  352,  353,  404,  405,    0,  406,  746,
    0,   94,  746,  407,  408,   59,    0,  409,  410,  411,
  414,   95,    0,  412,  664,  413,    0,  746,    0,    0,
  665,    0,   60,    0,    0,    0,  189,    0,  415,    0,
 1039,    0,    0,  248,    0,    0,   96,   61,  397,    0,
    0,   62,    0,    0,   63,    0,    0,  189,  398,    0,
    0,    0,   64,    0,   97,    0,    0,    0,    0,    0,
    0,    0,  347,  348,  349,  399,  175,  176,    0,  189,
    0,   65,    0,    0,    0,  189,  400,    0,    0,    0,
    0,    0,    0,    0,    0,  350,  351,  401,  402,  403,
  352,  353,  404,  405,    0,  406,    0,    0,  189,    0,
  407,  408,    0,    0,  409,  410,  411, 1070,    0,    0,
 1038,    0,    0,    0,  388,    0,    0,  189,    0,    0,
    0,  664,    0,  389,    0,  189,  189,  665,    0,    0,
    0,    0,  189,  414,  174,  442,  412,  390,  413,    0,
    0,    0,    0,  345,  391,  917,  917,    0,    0,    0,
  189,  415,    0,    0,    0,  174,  248,    0,    0,    0,
    0,  917,  878,  879,  880,  881,  882,  883,  884,  885,
    0,    0,    0,    0,  392,    0,    0,  174,    0,    0,
    0,    0,    0,  174,  917,    0,  917,  189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  189,    0,
  917,    0,  393,  394,  728,    0,  174,    0,    0,    0,
    0,    0,    0,    0,  395,    0,    0,    0,  396,    0,
  746,    0,  917,    0,    0,  174,    0,    0,    0,    0,
 1073,    0,    0, 1038,  174,    0,    0,  388,    0,    0,
  174,    0,    0,    0,    0,  728,  389,    0,  728,    0,
    0,    0,    0,    0,    0,    0,  414,    0,  174,  412,
  390,  413,    0,  728,    0,    0,  345,  391,    0,    0,
    0,    0,    0, 1039,  415,    0,    0,  746,    0,  248,
  746,  397,    0,    0,    0,    0,    0,  746,    0,    0,
  746,  398,    0,    0,  746,  174,    0,  392,    0,  746,
    0,    0,  746,    0,    0,  347,  348,  349,  399,  175,
  176,    0,    0,    0,    0,    0,    0,    0,  746,  400,
    0,    0,    0,    0,    0,  393,  394,    0,  350,  351,
  401,  402,  403,  352,  353,  404,  405,  395,  406,    0,
    0,  396,  746,  407,  408,  746,  746,  409,  410,  411,
    0,    0,    0,    0,    0,  746,    0,    0,    0,    0,
  388,    0,    0,    0,    0,    0,   76,    0,    0,  389,
    0,    0,  746,   77,    0,    0,    0,   78,   79,  911,
    0,  911,  911,  390,  911,    0,   80,    0,    0,  345,
  391,    0,    0,    0,  746,    0, 1039,  911,   81,  746,
    0,    0,  911,    0,  397,    0,    0,    0,    0,    0,
    0,  746,    0,  746,  398,    0,    0,    0,    0,    0,
  392,    0,    0,    0,    0,    0,    0,    0,  347,  348,
  349,  399,  175,  176,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,  346,    0,  393,  394,
    0,  350,  351,  401,  402,  403,  352,  353,  404,  405,
  395,  406,    0,   82,  396,    0,  407,  408,    0,    0,
  409,  410,  411,    0,    0,    0,    0,    0,    0,    0,
   83,    0,    0,  388,    0,    0,    0,    0,    0,    0,
    0,    0,  389,    0,    0,   84,    0,    0,    0,   85,
    0,    0,  643,    0,    0,  643,  390,  643,    0,    0,
   86,    0,  345,  391,    0,    0,    0,    0,    0,    0,
  643,    0,    0,  728,    0,  643,  728,  397,    0,   87,
    0,    0,    0,  728,    0,    0,  728,  398,    0,    0,
  728,    0,    0,  392,    0,  728,    0,    0,  728,    0,
    0,  347,  348,  349,  399,  175,  176,    0,    0,    0,
    0,    0,    0,    0,  728,  400,    0,    0,    0,  346,
    0,  393,  394,    0,  350,  351,  401,  402,  403,  352,
  353,  404,  405,  395,  406,    0,    0,  396,  728,  407,
  408,  728,  728,  409,  410,  411,    0,    0,    0,    0,
    0,  728,    0,    0,    0,    0,  911,    0,    0,    0,
    0,    0,  180,    0,    0,  911,    0,    0,  728,    0,
    0,    0,    0,    0,    0,  414,    0,    0,  412,  911,
  413,    0,    0,    0,  658,  911,  911,    0,    0,    0,
  728,    0,    0,  415,    0,  728,    0,    0,  248,    0,
  397,    0,    0,    0,    0,    0,    0,  728,    0,  728,
  398,    0,    0,    0,    0,    0,  911,    0,    0,    0,
    0,  180,    0,    0,  347,  348,  349,  399,  175,  176,
    0,    0,    0,    0,    0,    0,    0,    0,  400,    0,
    0,    0,  911,    0,  911,  911,    0,  350,  351,  401,
  402,  403,  352,  353,  404,  405,  911,  406,    0,    0,
  911,    0,  407,  408,    0,    0,  409,  410,  411,    0,
    0,    0,  643,    0, 1377, 1378,    0,    0,    0,  643,
 1382, 1383,    0, 1385, 1386,    0,    0,    0,  643,    0,
    0, 1390, 1391, 1392, 1393,    0, 1394, 1395, 1396, 1397,
 1398, 1399,  643,    0,    0,    0,    0,    0,  643,  643,
    0,    0,    0,    0,  414,    0,  643,  412,    0,  413,
    0,    0,    0,  911,    0,    0,    0,    0,    0,    0,
    0,    0,  415,  911,    0,    0,    0,  248,    0,  643,
    0,    0,    0,    0,    0,    0,    0,  911,  911,  911,
  911,  911,  911,    0,    0,    0,    0,    0,    0,    0,
    0,  911,    0,    0,    0,    0,    0,  643,  643,    0,
  911,  911,  911,  911,  911,  911,  911,  911,  911,  643,
  911,    0,    0,  643,    0,  911,  911,    0,    0,  911,
  911,  911,    0,    0,    0,    0,    0,    0,  414,    0,
    0,  412,  388,  413,    0,    0,    0,    0,    0,    0,
    0,  389,    0,    0,    0,    0,  415,    0,    0,  181,
  180,  248,    0,    0,    0,  390,    0,    0,    0,    0,
    0,  345,  391,    0,    0,    0,    0,    0,    0,    0,
    0,  180,    0,    0,    0,    0,  643,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  643,    0,    0,    0,
    0,    0,  392,  180,    0,    0,    0,    0,    0,  180,
  643,  643,  643,  643,  643,  643,    0,    0,  181,    0,
    0,    0,    0,    0,  643,    0,    0,    0,    0,    0,
  393,  394,  180,  643,  643,  643,  643,  643,  643,  643,
  643,  643,  395,  643,    0,    0,  396,    0,  643,  643,
    0,  180,  643,  643,  643,    0,    0,    0,    0,    0,
  180,    0,    0,    0,    0,    0,  180,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  414,  901,    0,
  412,  388,  413,    0,  180,    0,    0,    0,    0,    0,
  389,    0,    0,    0,    0,  415,    0,    0,    0,    0,
  248,    0,    0,    0,  390,    0,    0,    0,    0,  397,
  345,  391,    0,    0,    0,    0,    0,    0,    0,  398,
    0,  180,    0,    0,    0,    0,    0,  650,    0,    0,
    0,    0,    0,  347,  348,  349,  399,  175,  176,    0,
    0,  392,    0,  770,    0,    0,    0,  400,    0,    0,
    0,    0,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,  388,  406,    0,    0,  393,
  394,  407,  408,    0,  389,  409,  410,  411,    0,    0,
    0,  395,    0,    0,  770,  396,  414,  770,  390,  412,
    0,  413,    0,    0,  345,  391,    0,    0,    0,    0,
    0,    0,  770,    0,  415,    0,    0,    0,    0,  248,
    0,    0,    0,    0,    0,    0,    0,  181,    0,    0,
    0,    0,    0,    0,    0,  392,    0,    0,    0,    0,
    0,    0,  658,    0,    0,    0,    0,    0,  181,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  397,    0,
    0,  346,    0,  393,  394,    0,    0,    0,  398,    0,
  181,    0,    0,    0,    0,  395,  181,    0,    0,  396,
    0,    0,  347,  348,  349,  399,  175,  176,    0,    0,
    0,    0,    0,    0,    0,    0,  400,    0,    0,  181,
    0,    0,    0,    0,    0,  350,  351,  401,  402,  403,
  352,  353,  404,  405,  388,  406,    0,    0,  181,    0,
  407,  408,    0,  389,  409,  410,  411,  181,    0,    0,
    0,    0,    0,  181,    0,  414,    0,  390,  412,    0,
  413,    0,  397,  345,  391,    0,    0,    0,    0,    0,
    0,  181,  398,  415,    0,    0,    0,    0,  248,    0,
    0,    0,    0,    0,    0,    0,  347,  348,  349,  399,
  175,  176,    0,    0,  392,    0,    0,    0,    0,    0,
  400,    0,    0,    0,    0,    0,    0,    0,  181,  350,
  351,  401,  402,  403,  352,  353,  404,  405,    0,  406,
    0,    0,  393,  394,  407,  408,    0,    0,  409,  410,
  411,    0,    0,    0,  395,  770,    0,    0,  396,  414,
    0,    0,  412,  388,  413,    0,    0,    0,    0,    0,
    0,    0,  389,    0,    0,    0,    0,  415,    0,    0,
    0,    0,  248,    0,    0,    0,  390,    0,    0,    0,
    0,    0,  345,  391,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  770,    0,    0,  770,    0,    0,    0,    0,
    0,  397,  770,  392,    0,  770,    0,    0,    0,  770,
    0,  398,    0,    0,  770,    0,    0,  770,    0,    0,
    0,    0,    0,    0,    0,  347,  348,  349,  399,  175,
  176,  393,  394,  770,    0,    0,    0,    0,    0,  400,
    0,    0,    0,  395,    0,    0,    0,  396,  350,  351,
  401,  402,  403,  352,  353,  404,  405,  770,  406,    0,
  770,  770,    0,  407,  408,    0,    0,  409,  410,  411,
  770,    0,    0,    0,    0,    0,    0,    0, 1614,    0,
    0,  412,  388,  413,    0,    0,    0,  770,    0,    0,
    0,  389,    0,    0,    0,    0,  415,    0,    0,    0,
    0,  248,    0,    0,    0,  390,    0,    0,    0,  770,
  397,  345,  391,    0,  770,    0,    0,    0,    0,    0,
  398,    0,    0,    0,    0,    0,  770,    0,  770,    0,
    0, 1065,    0,    0,  347,  348,  349,  399,  175,  176,
    0,    0,  392,    0,  749,    0,    0,    0,  400,    0,
    0,    0,    0,    0,    0,    0,    0,  350,  351,  401,
  402,  403,  352,  353,  404,  405,  388,  406,    0,    0,
  393,  394,  407,  408,    0,  389,  409,  410,  411,    0,
    0,    0,  395,    0,    0,  749,  396,  414,  749,  390,
  412,    0,  413,    1,    0,  345,  391,    0,    0,    0,
    0,    0,    0,  749,    0,  415,    0,    0,    0,    0,
  248,    0,    0,    0,    0,    2,    0,    0,    0,    0,
    0,    0,    0,    3,    0,    0,  392,    0,    0,    0,
    4,    0,    5, 1236,    6,    0,    0,    0,    0,    7,
    0,    0,    0,    0,    0,    0,    8,    0,    0,  397,
    0,    0,    0,    0,  393,  394,    0,    0,    0,  398,
    9,    0,    0,    0,    0,    0,  395,    0,    0,    0,
  396,   10,    0,  347,  348,  349,  399,  175,  176,    0,
    0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,    0,    0,    0,    0,    0,  350,  351,  401,  402,
  403,  352,  353,  404,  405,  388,  406,    0,    0,    0,
    0,  407,  408,    0,  389,  409,  410,  411,    0,    0,
    0,    0,    0,    0,    0,    0,  911,    0,  390,  911,
    0,  911,    0,  397,  345,  391,    0,    0,   11,    0,
    0,    0,    0,  398,  911,   12,    0,    0,   13,  911,
   14,   15,    0,    0, 1249,    0,    0,  347,  348,  349,
  399,  175,  176,    0,    0,  392,  613,    0,    0,    0,
    0,  400,    0,    0,    0,   16,    0,    0,    0,    0,
  350,  351,  401,  402,  403,  352,  353,  404,  405,    0,
  406,  346,    0,  393,  394,  407,  408,    0,    0,  409,
  410,  411,    0,    0,    0,  395,  749,  613,    0,  396,
  613,    0,    0,    0,  388,    0,    0,    0,    0,    0,
    0,    0,    0,  389,   17,  613,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
    0,    0,    0,  345,  391,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  749,    0,    0,  749,    0,    0,    0,
    0,    0,  397,  749,  392,    0,  749,    0,    0,    0,
  749,    0,  398,    0,    0,  749,    0,    0,  749,    0,
    0,    0,    0,    0,    0,    0,  347,  348,  349,  399,
  175,  176,  393,  394,  749,    0,    0,    0,    0,    0,
  400,    0,    0,    0,  395,    0,    0,    0,  396,  350,
  351,  401,  402,  403,  352,  353,  404,  405,  749,  406,
    0,  749,  749,    0,  407,  408,    0,    0,  409,  410,
  411,  749,    0,    0,    0,  899,  668,  666,    0,  667,
    0,  669,    0,  911,    0,    0,    0,    0,  749,    0,
    0,    0,  911,    0,  830,  829,  831,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  911,    0,    0,    0,
  749,  397,  911,  911,    0,  749,    0,    0,    0,    0,
    0,  398,    0,    0,    0,    0,    0,  749,    0,  749,
    0,    0,    0,    0,    0,  347,  348,  349,  399,  175,
  176,    0,    0,  911,    0,    0,    0,    0,  917,  400,
    0,    0,    0,    0,    0,    0,    0,    0,  350,  351,
  401,  402,  403,  352,  353,  404,  405,    0,  406,    0,
    0,  911,  911,  407,  408,    0,    0,  409,  410,  411,
    0,    0,    0,  911,    0,    0,    0,  911,  913,  917,
  917,  917,  917,  917,  929,  917,    0,    0,    0,    0,
    0,    0,    0, 1327,    0,    0,    0,  917,  917,  917,
  917,    0,    0,    0,    0,  613,    0,    0,  613,    0,
    0,    0,    0,    0,    0,  613,    0,    0,  613,    0,
    0,    0,  613,    0,    6,    0,    0,  613,    0,  917,
  613,  917,    0,    0,    0, 1438, 1439,    0, 1440,    0,
  911, 1441,    0,    0,    0,    0,  613,    0,    0,    0,
  911,    0,    0,    0,    0, 1442,    0,    0,    0,    0,
    0, 1443,    0,    0,  911,  911,  911,  911,  911,  911,
  613,    0,    0,    0,  613,  791,    0,    0,  911,    0,
    0,    0,    0,  613,    0,    0,    0,  911,  911,  911,
  911,  911,  911,  911,  911,  911,  817,  911,    0,    0,
  613,    0,  911,  911,  664,    0,  911,  911,  911,    0,
  665,    0,    0,  818,    0,    0,  791,  791,  791,  791,
  791, 1444,  791,    0,    0,    0,    0,  613,    0,    0,
    0,    0,    0,    0,  791,  791,  791,  791,    0,  613,
   14,    0,    0,    0,    0,    0,    0,    0,    0,  819,
    0,    0,    0,    0,    0, 1445,    0,    0,  820,    0,
    0,    0,    0,  542,    0,   16,  821,  543,  791,    0,
    0,    0,    0,    0,    0,  733, 1446,    0,    0,    0,
    0,    0,    0,  463,    0,  822,  544,  823,    0,  545,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  917,  824,  917,  825,  826,  827,    0,    0,    0,    0,
  917,    0, 1447,    0,    0,    0,    0,    0,  917,    0,
    0,    0,    0,    0,  917,    0,    0,  917,    0,    0,
  546,    0,    0,    0,    0,    0,  547,  548,  549,    0,
  550,  551,  552,    0,  553,  803,  917,  917,    0,    0,
  917,    0,    0,    0,  828,    0,    0,  917,    0,  917,
  917,    0,    0,  917,  554,    0,  555,  917,    0,    0,
  917,    0,  917,    0,  917,    0,    0,    0,    0,  917,
  917,    0,  917,    0,    0,    0,  803,  803,  803,  803,
  803,    0,  803,    0,    0,    0,    0,  556,  917,  917,
    0,  917,    0,    0,  803,  803,  803,  803,    0,    0,
    0,    0,    0,    0,  557,  917,    0,  917,  917,  917,
    0,    0,  917,    0,    0,  917,  917,    0,    0,    0,
    0,    0,    0,    0,    0,  917,  558,  791,  803,  791,
    0,    0,    0,    0,    0,    0,    0,  791,    0,  917,
    0,  180,  917,    0,    0,  791,    0,    0,    0,    0,
    0,  791,    0,    0,  791,    0,    0,    0,  917,    0,
    0,  559,  560,    0,  917,    0,    0,    0,    0,  917,
    0,    0,  806,  791,  791,    0,    0,  791,  561,  562,
  917,  917,    0,  917,  791,    0,  791,  791,    0,  917,
  791,    0,    0,    0,  791,    0,    0,  791,    0,  791,
    0,  791,    0,    0,    0,    0,  791,  791,    0,  791,
    0,    0,    0,  806,  806,  806,  806,  806,    0,  806,
    0,    0,    0,    0,    0,  791,  791,    0,  791,    0,
    0,  806,  806,  806,  806,    0,    0,    0,    0,    0,
    0,    0,  791,    0,  791,  791,  791,    0,    0,  791,
    0,    0,  791,  791,    0,    0,    0,    0,    0,    0,
  542,    0,  791,    0,  543,  806,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  791,    0,    0,  791,
    0,    0,    0,  544,    0,    0,  545,    0,    0,    0,
    0,    0,    0,    0,    0,  791,    0,  803,    0,  803,
    0,  791,    0,    0,    0,    0,  791,  803,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  791,  791,    0,
  791,  803,    0,    0,  803,    0,  791,  546,    0,    0,
    0,    0,    0,  547,  548,  549,    0,  550,  551,  552,
    0,  553,  807,  803,  803,    0,    0,  803,    0,    0,
    0,    0,    0,    0,  803,    0,  803,  803,    0,    0,
  803,  554,    0,  555,  803,    0,    0,  803,    0,  803,
    0,  803,    0,    0,    0,    0,  803,  803,    0,  803,
    0,    0,    0,  807,  807,  807,  807,  807,    0,  807,
    0,    0,    0,    0,  556,  803,  803,    0,  803,    0,
    0,  807,  807,  807,  807,    0,    0,    0,    0,    0,
    0,  557,  803,    0,  803,  803,  803,    0,    0,  803,
    0,    0,  803,  803,    0,    0,    0,    0,    0,    0,
    0,    0,  803,  558,  806,  807,  806,    0,    0,    0,
    0,    0,    0,    0,  806,    0,  803,    0,  180,  803,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  806,    0,    0,    0,  803,    0,    0,  559,  560,
    0,  803,    0,    0,    0,    0,  803,    0,    0,  801,
  806,  806,    0,    0,  806,  561,  562,  803,  803,    0,
  803,  806,    0,  806,  806,    0,  803,  806,    0,    0,
    0,  806,    0,    0,  806,    0,  806,    0,  806,    0,
    0,    0,    0,  806,  806,    0,  806,    0,    0,    0,
  801,    0,  801,  801,  801,    0,    0,    0,    0,    0,
    0,    0,  806,  806,    0,  806,    0,    0,  801,  801,
  801,  801,    0,    0,    0,    0,    0,    0,    0,  806,
    0,  806,  806,  806,    0,    0,  806,    0,    0,  806,
  806,    0,    0,    0,    0,    0,    0,  542,    0,  806,
    0,  543,  801,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  806,    0,    0,  806,    0,    0,    0,
  544,    0,    0,  545,    0,    0,    0,    0,    0,    0,
    0,    0,  806,    0,  807,    0,  807,    0,  806,    0,
    0,    0,    0,  806,  807,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  806,  806,    0,  806,    0,    0,
    0,  807,    0,  806,  546,    0,    0,    0,    0,    0,
  547,  548,  549,    0,  550,  551,  552,    0,  553,  800,
  807,  807,    0,    0,  807,    0,    0,    0,    0,    0,
    0,  807,    0,  807,  807,    0,    0,  807,  554,    0,
  555,  807,    0,    0,  807,    0,  807,    0,  807,    0,
    0,    0,    0,  807,  807,    0,  807,    0,    0,    0,
  800,    0,  800,  800,  800,    0,    0,    0,    0,    0,
    0,  556,  807,  807,    0,  807,    0,    0,  800,  800,
  800,  800,    0,    0,    0,    0,    0,    0,  557,  807,
    0,  807,  807,  807,    0,    0,  807,    0,    0,  807,
  807,    0,    0,    0,    0,    0,    0,    0,    0,  807,
  558,  801,  800,  801,    0,    0,    0,    0,    0,    0,
    0,  801,    0,  807,    0,    0,  807,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,    0,
    0,    0,  807,    0,    0,  559,  560,    0,  807,    0,
    0,    0,    0,  807,    0,    0,  802,  801,  801,    0,
    0,  801,  561,  562,  807,  807,    0,  807,  801,    0,
  801,  801,    0,  807,  801,    0,    0,    0,  801,    0,
    0,  801,    0,  801,    0,  801,    0,    0,    0,    0,
  801,  801,    0,  801,    0,    0,    0,  802,    0,  802,
  802,  802,    0,    0,    0,    0,    0,    0,    0,  801,
  801,    0,  801,    0,    0,  802,  802,  802,  802,    0,
    0,    0,    0,    0,    0,    0,  801,    0,  801,  801,
  801,    0,    0,  801,    0,    0,  801,  801,    0,    0,
    0,    0,    0,    0,    0,    0,  801,    0,    0,  802,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  801,    0,    0,  801,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  801,
    0,  800,    0,  800,    0,  801,    0,    0,    0,    0,
  801,  800,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  801,  801,    0,  801,    0,    0,    0,  800,    0,
  801,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  805,  800,  800,    0,
    0,  800,    0,    0,    0,    0,    0,    0,  800,    0,
  800,  800,    0,    0,  800,    0,    0,    0,  800,    0,
    0,  800,    0,  800,    0,  800,    0,    0,    0,    0,
  800,  800,    0,  800,    0,    0,    0,  805,    0,  805,
  805,  805,    0,    0,    0,    0,    0,    0,    0,  800,
  800,    0,  800,    0,    0,  805,  805,  805,  805,    0,
    0,    0,    0,    0,    0,    0,  800,    0,  800,  800,
  800,    0,    0,  800,    0,    0,  800,  800,    0,    0,
  747,    0,    0,    0,    0,    0,  800,    0,  802,  805,
  802,    0,    0,    0,    0,    0,    0,    0,  802,    0,
  800,    0,    0,  800,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  802,    0,    0,    0,  800,
    0,  747,    0,    0,  747,  800,    0,    0,    0,    0,
  800,    0,    0,    0,  802,  802,    0,    0,  802,  747,
    0,  800,  800,    0,  800,  802,    0,  802,  802,    0,
  800,  802,  748,    0,    0,  802,    0,    0,  802,    0,
  802,    0,  802,    0,    0,    0,    0,  802,  802,    0,
  802,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  802,  802,  778,  802,
    0,    0,    0,  748,    0,    0,  748,    0,    0,    0,
    0,    0,    0,  802,    0,  802,  802,  802,    0,    0,
  802,  748,    0,  802,  802,    0,    0,    0,    0,    0,
    0,    0,    0,  802,    0,    0,    0,    0,    0,  778,
    0,    0,  778,    0,    0,    0,    0,  802,    0,    0,
  802,    0,    0,    0,    0,    0,    0,  778,    0,    0,
    0,  742,    0,    0,    0,    0,  802,    0,  805,    0,
  805,    0,  802,    0,    0,    0,    0,  802,  805,    0,
    0,    0,  743,    0,    0,    0,    0,    0,  802,  802,
    0,  802,    0,    0,    0,  805,    0,  802,    0,    0,
    0,    0,  742,    0,    0,  742,    0,    0,    0,    0,
    0,    0,    0,    0,  805,  805,    0,    0,  805,    0,
  742,    0,    0,  743,    0,  805,  743,  805,  805,    0,
    0,  805,    0,    0,    0,  805,    0,    0,  805,    0,
  805,  743,  805,    0,    0,    0,    0,  805,  805,    0,
  805,    0,  747,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  805,  805,    0,  805,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  805,    0,  805,  805,  805,    0,    0,
  805,    0,    0,  805,  805,    0,    0,    0,    0,    0,
    0,    0,    0,  805,    0,    0,    0,    0,    0,  747,
  744,    0,  747,    0,    0,    0,    0,  805,    0,  747,
  805,  777,  747,    0,  748,    0,  747,    0,    0,    0,
    0,  747,    0,    0,  747,    0,  805,    0,    0,    0,
    0,    0,  805,    0,    0,    0,    0,  805,    0,    0,
  747,  744,    0,    0,  744,  771,    0,    0,  805,  805,
  778,  805,  777,    0,    0,  777,    0,  805,    0,  744,
    0,    0,    0,    0,  747,    0,    0,  747,  747,    0,
  777,  748,    0,    0,  748,    0,    0,  747,    0,    0,
    0,  748,    0,    0,  748,    0,  771,    0,  748,  771,
    0,    0,    0,  748,  747,    0,  748,    0,    0, 1327,
    0,    0,    0,    0,  771,    0,    0,  778,    0,    0,
  778,    0,  748,  742,    0,    0,  747,  778,    0,    0,
  778,  747,    0,    0,  778,    0,    0,    0,    0,  778,
    6,    0,  778,  747,  743,  747,  748, 1549,    0,  748,
  748, 1438, 1439,    0, 1440,    0,    0, 1441,  778,  748,
    0,    0,    0,    0,    0,  779,    0,    0,    0,    0,
    0, 1442,    0,    0,    0,    0,  748, 1443,    0,    0,
  742,    0,  778,  742,    0,  778,  778,    0,    0,    0,
  742,    0,    0,  742,    0,  778,    0,  742,  748,    0,
    0,  743,  742,  748,  743,  742,  779,    0,    0,  779,
    0,  743,  778,    0,  743,  748,    0,  748,  743,    0,
    0,  742,    0,  743,  779,    0,  743,    0,    0,    0,
    0,    0,    0,    0,  778,    0,    0, 1444,    0,  778,
    0,    0,  743,    0,    0,  742,    0,    0,  742,  742,
    0,  778,    0,  778,  780,    0,   14,    0,  742,    0,
    0,    0,    0,    0,    0,    0,  743,    0,    0,  743,
  743, 1445,  744,    0,    0,  742,    0,    0,    0,  743,
    0,   16,    0,  777,    0,    0,    0,    0,    0,    0,
 1550,    0, 1446,    0,    0,  780,  743,  742,  780,  463,
    0,    0,  742,    0,  768,    0,    0,    0,    0,    0,
    0,    0,    0,  780,  742,    0,  742,  771,  743,    0,
    0,    0,    0,  743,    0,    0,    0,    0, 1447,  744,
    0,    0,  744,    0,    0,  743,    0,  743,    0,  744,
  777,    0,  744,  777,    0,  768,  744,    0,  768,    0,
  777,  744,    0,  777,  744,    0,    0,  777,    0,    0,
    0,    0,  777,  768,    0,  777,    0,    0,    0,    0,
  744,    0,    0,    0,  771,    0,    0,  771,    0,    0,
    0,  777,    0,    0,  771,    0,    0,  771,    0,    0,
    0,  771,    0,    0,  744,    0,  771,  744,  744,  771,
  772,    0,    0,    0,    0,  777,    0,  744,  777,  777,
    0,    0,    0,    0,    0,  771,    0,    0,  777,    0,
  781,    0,    0,    0,  744,    0,    0,  779,    0,    0,
    0,    0,    0,    0,    0,  777,    0,    0,    0,  771,
    0,  772,  771,  771,  772,    0,  744,    0,    0,    0,
    0,  744,  771,    0,    0,    0,    0,  777,    0,  772,
    0,  781,  777,  744,  781,  744,    0,    0,    0,  771,
    0,    0,    0,    0,  777,    0,  777,    0,    0,  781,
    0,    0,    0,    0,  779,    0,    0,  779,    0,    0,
    0,  771,    0,    0,  779,    0,  771,  779,    0,    0,
    0,  779,    0,    0,    0,    0,  779,    0,  771,  779,
  771,    0,    0,    0,    0,    0,  780,    0,    0,    0,
    0,    0,    0,    0,    0,  779,    0,    0,  769,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  773,  779,
    0,    0,  779,  779,    0,    0,    0,    0,    0,    0,
    0,    0,  779,    0,    0,    0,  768,    0,    0,  769,
    0,    0,  769,  780,    0,    0,  780,    0,    0,  779,
    0,    0,    0,  780,    0,    0,  780,  769,    0,  773,
  780,    0,  773,    0,    0,  780,    0,    0,  780,    0,
    0,  779,    0,    0,    0,    0,  779,  773,    0,    0,
    0,    0,    0,    0,  780,    0,    0,    0,  779,    0,
  779,    0,    0,  768,    0,    0,  768,    0,    0,    0,
    0,    0,    0,  768,    0,    0,  768,    0,  780,    0,
  768,  780,  780,    0,    0,  768,    0,    0,  768,    0,
    0,  780,    0,    0,    0,  668,  666,    0,  667,    0,
  669,    0,  772,    0,  768,    0,    0,    0,  780,    0,
    0,    0,    0,  830,  829,  831,    0,    0,    0,    0,
    0,    0,  781,    0,    0,    0,    0,    0,  768,    0,
  780,  768,  768,    0,    0,  780,    0,    0,  214,    0,
    0,  768,  214,    0,    0,    0,    0,  780,    0,  780,
    0,    0,    0,    0,    0,    0,    0,  214,  768,  772,
    0,  214,  772,    0,  214,    0,    0,    0,    0,  772,
    0,    0,  772,    0,    0,    0,  772,    0,    0,  781,
  768,  772,  781,    0,  772,  768,    0,    0,    0,  781,
    0,    0,  781,    0,    0,    0,  781,  768,    0,  768,
  772,  781,    0,    0,  781,  214,    0,    0,    0,    0,
    0,  214,  214,  214,    0,  214,  214,  214,    0,  214,
  781,    0,    0,    0,  772,    0,    0,  772,  772,    0,
  769,    0,    0,    0,    0,    0,    0,  772,    0,  214,
    0,  214,    0,    0,  781,    0,    0,  781,  781,    0,
  773,    0,    0,    0,  772,    0,    0,  781,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  214,    0,  781,    0,  772,   78,    0,    0,
    0,  772,    0,    0,    0,    0,    0,  769,    0,  214,
  769,    0,    0,  772,    0,  772,  781,  769,    0,    0,
  769,  781,    0,    0,  769,    0,    0,  773,    0,  769,
  773,  214,  769,  781,    0,  781,    0,  773,    0,    0,
  773,    0,    0,    0,  773,  817,    0,    0,  769,  773,
    0,    0,  773,  664,    0,    0,    0,    0,    0,  665,
    0,    0,  818,    0,    0,    0,  214,  214,  773,    0,
    0,    0,  769,    0,    0,  769,  769,    0,    0,    0,
    0,    0,    0,  214,  214,  769,    0,    0,    0,    0,
    0,    0,  773,  803,    0,  773,  773,  543,  819,    0,
    0,    0,  769,    0,    0,  773,    0,  820,    0,    0,
    0,    0,  804,    0,  214,  821,  544,    0,  214,  545,
    0,    0,  773,    0,  769,    0,    0,    0,    0,  769,
    0,    0,    0,  214,  822,    0,  823,  214,    0,    0,
  214,  769,    0,  769,  773,    0,    0,    0,    0,  773,
  824,    0,  825,  826,  827,    0,    0,    0,    0,    0,
  546,  773,    0,  773,    0,    0,  547,  548,  549,    0,
  550,  551,  552,    0,  553,    0,  127,    0,    0,    0,
  127,  214,    0,    0,    0,    0,    0,  214,  214,  214,
    0,  214,  214,  214,  554,  214,  555,    0,    0,  127,
    0,    0,  127,  828,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  214,    0,  214,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  556,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,  557,    0,    0,  296,  214,  127,
  127,  127,    0,  127,  127,  127,    0,  127,    0,    0,
    0,    0,    0,    0,    0,  214,  558,    0,    0, 1327,
    0,    0,    0,    0,    0,    0,    0,  127,  296,  127,
    0,    0,    0,    0,    0,  296,    0,  214,    0,  296,
  296,    0,  296,    0,    0,  296,    0,    0,    0,    0,
    6,  559,  560,    0,    0,    0,    0, 1437,    0,  296,
  127, 1438, 1439,    0, 1440,  296,    0, 1441,  561,  562,
    0,    0,  214,  214,    0,    0,    0,  127,    0,    0,
    0, 1442,    0,    0,    0,    0,    0, 1443,    0,  214,
  214,  134,    0,    0,    0,    0,    0,    0,    0,  127,
  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,    0,    0,  151,  152,
  153,  154,    0,  155,    0,  296,  156,  157,    0,    0,
    0,    0,    0,    0,  127,  127,    0,    0,    0,    0,
    0,    0,    0,    0,  296,    0,    0, 1444,    0,    0,
    0,  127,  127,    0,    0,    0,    0,    0,    0,  296,
    0,    0,    0,    0,    0,    0,   14,    0,    0,  296,
    0,    0,    0,    0,    0,    0,    0,    0,  296,    0,
  296, 1445,    0,    0,    0,    0,    0,  296,    0,    0,
    0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1446,    0,    0,    0,    0,    0,    0,  463,
    0,    0,  519,    0,    0,    0,  296,    0,    0,    0,
    0,  135,  136,  137,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,    0, 1447,  151,
  152,  153,  154,  428,  155,    0,    0,  156,  157,    0,
    0,    0,    0,  428,  428,  428,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,  428,    0,    0,
  428,  428,  428,  428,    0,  428,    0,    0,  428,  428,
};
static short yycheck[] = {                                      16,
   56,    4,   48,  125,    4,   49,   57,   96,   55,    0,
  467,  283,   50,  114,  115,   59,  114,  115,  473,   56,
  655,   60,  326,   61,  226,  598,   77,  600,  318,  322,
  326,  702,   62,  511,  502,   81,   86,  505,   82,   65,
  449,  658,  295,  511,   83,   89,  297,  641,  234,  105,
  710,  107,   80,  131, 1136,   85,  898,  243,   75,  378,
  226,   87,    0,    0,    0,    0,   45,   84,  106,  276,
    0,    0,    0,  340,    0,  290,   40,  650,   40,  636,
  592,  226,  126,   44,    0,    0,  671,  969,  768,  127,
  256,  119,   63,   44,   41,   44,  915, 1009,  980,   63,
   41,   40,   59,   41,   41,  699,   44,   44,   44,   44,
  199,   41,   41,   44,  161,   44, 1092,  999,   40,   58,
    0,   59,   59,   59,   59,  384,   40,   40,  226,   59,
   59,   59,   40,   59,    0,   59, 1303,   42,  185,  968,
   41,  961,  742,   59,   59,   45,   44,  247,  968,   44,
   63,  251,  707,  355,  276,   44,  256,  264,   45,   42,
  288,  283,    0,   44,  320,    0,  274,   45,   44,    0,
  264, 1173,  228, 1219,  288,  326, 1313,  339,  262,   59,
 1119,  321,  284, 1122,  370,   40,   40,  356,  481,  355,
   45,   40, 1570,   59,  232,   58,  277,  258,  488,  489,
  490,  491,  262,  241,   45,  284,  284,  511,    0,  273,
  355,    0, 1321,   45,  260,  511, 1522,   44,  675,  241,
  276,   59,   63,  309,   59,    0,  264,  344,   59,   44,
   41,  302, 1313,   44,   12,  260,    0, 1149, 1600,    0,
  296,    0,  357,    0,  537,  401,  307,  303,    0,  305,
  456,  307,  369, 1362,  310,   91,  378,  355,  993,  832,
  833,  514, 1640,  857,  321,  346,   41,   59,  339,   44,
   59,  257,  319,  406,  321,  542, 1638,  341,  189,  304,
  431,  443,   41,  385,   59,  332,  442,  438,  756,  273,
  336,    0,  425,  850, 1672,   59,  334,  437,   59, 1605,
   59,  379,   59,  387,  861,  862, 1188,   59, 1670,  409,
  427,  564,  412,  413,  414,  430,    0,    0,  412, 1138,
  893, 1367,  378,  285,  493,  369,  264,  387,  366,  258,
 1332,   41,   41,  461,  112,   44, 1642,  340,  440,  377,
  384,    0,  258,  381,    0,  274,    0,  461,  386,  335,
   59,    0,  436,   41,  461,  457, 1295,    0,  419,  467,
 1299,  440,    0,    0,  386,    0,  452,  776,  279,  310,
 1199,    0,  972,  973, 1216,   59,   59,    0,  307, 1199,
  639,  310,  319,  321, 1313,  322,    0,  960, 1525,  319,
  321,  307,  329,  329,  329,  332,  332,  332, 1015,  336,
   59, 1568,  332,   59,  341,   59,   41,  344,  344,  344,
   59,  341,    0, 1093,  297,   44,   59,  619,  319, 1019,
  269,   59,   59,  360,   59, 1401,  264,  258,  529,   45,
   59, 1343,  321,  705,   41,  384,   59,   44,  319,  486,
   41,  277,  628, 1325, 1525,   59, 1328,  384, 1330,  264,
  397,  388,   59,  619,  411,  511, 1313, 1042,  388,  403,
  397,  397,  397,  329, 1019,  718,  332,  397,  721,  397,
 1205,   59, 1411,  395,  619,  641,  307,  414,  305, 1361,
  459,   41,  735,  412,   44,  532,  437,  411,  459,  696,
  419,  530, 1152, 1312, 1129,  459, 1578,  332,  459,  461,
  600, 1136,  717,  419,  441,  441,  441,  486,  437,  762,
  676,  441, 1024,  441, 1194,  453,  453,  453,  453,  455,
  455,  619,  461,  461,  461,  455,  441,  455,  584,  455,
  410,  397, 1614,  699,  581,  582,  855, 1379,  467,  542,
  455,  641,  471,  810,  644, 1102,  459,  461, 1430,  649,
  801,  343, 1434,  461,  654,  655,  461,  455,  453,  459,
  319,  461,  397,  663,  620,  665,  666,  667,  668,  669,
  329,  671,  459,  332,  696,  441,  676,  432,  461,  455,
  681,  459,  341,  705,    0, 1158,  378,  453,  419,  455,
  593,  432, 1474,  593,  448,  639, 1525,  508,  461,  699,
  432,  412,  461, 1176,  459,  264,  441, 1489,    0,  384,
  319,  368,  713,  714,  406,  643,  368,  409,  459, 1236,
  455,  264,  332,  332,  961,   41,  264,  459,   44,  388,
   16,  968,  341,  425,   41, 1608,    0,   41,  397, 1374,
  696,  329,  260,   59,  332,  701,    0,  418,    0,   41,
  264,  707,  690,  839,  692,  278,  842,  280,  948,  451,
 1320,  262,  709,  710,   41,  349,  349,   59, 1525,  404,
   41,  727,   41,  260,  445,  329,  264,  716,  332,  388,
  296, 1275,  441, 1565,  319,  341,  421,  397,  397,   75,
  319,  857,  341, 1168,  636,   59,  455,  302, 1671,  755,
  756,  308,  309,   42,  341,   59,  341,   59,   47,  397,
  262,   59,  341,  966,  274,  754, 1689,  817,  818,  819,
 1010,    0,  822,  823,  824,  978,  826,  827,  828,  829,
  830,  831,  441,  855,  812, 1210,  814,  353,    0,  398,
   12, 1314,  459,  397,  461,  998,  455,  786,  787,  788,
  310,   42, 1085,  388, 1087,  398,  379,  857,  761,  961,
  398,  799,  397,    0,  864,  865,  968,  867,    0,  869,
  773, 1022,  872,  873,  874,  875,  876,  877,    0, 1414,
   59,  260,  329,  961,  398,  287,  387,  441, 1197,  889,
  968,  891,    0,  843, 1203,  961,  840,   59,    0,  855,
  418,  455,  968, 1281,  411,    0,  441,  810,  268,  961,
  398,  841,   44,  272,  461,    0,  968,  349,  844,    0,
  455,  257,   59,    0,  388,  304,  358,   59,  444, 1580,
  289,  418,   40,   41,  302,  387,   44,   59,  443,   41,
  112, 1316,  458,  459,  460,  452,  462,  463,  378,  301,
    0,   59,  412, 1524, 1105,  262,   41,   59,  262,    0,
   41,  263, 1199,   44,   59,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   59,  334, 1331,  441,   59,  328,
  496,  497,   59,   91,  436,  262,    0,   42,   43,  419,
   45,  262,   47,  262,    0,  996, 1351,  444,  461,  335,
  264,  353, 1653,  319,  363,    0,  366,  467,  850,   59,
  264,  313,  264,  329,  461,  378,  332,    0,   59,  861,
 1213,  461,  324,  308,  309,  341, 1677,  319,  344,   42,
   43,  459,   45, 1186,   47,  265,  466,  329,  308,  309,
  332,  280, 1042, 1578, 1277,   59,   41,  286,    0,  341,
 1523,  349,  406,   59, 1054, 1055, 1012, 1057, 1058, 1416,
  462,  463, 1215, 1019,   59, 1065, 1005, 1540, 1436,  260,
 1543,  430,  388,  303,  302,  443,   59, 1281,  461, 1614,
  387,  397, 1021,  387,  398, 1281,  449,  990, 1027,   41,
  990,  730,   44, 1091, 1092, 1093,  388, 1199,  410,  288,
  739,    0,  264,  457,    0,  397, 1481,   59,  338, 1109,
  387,  339,  301,  304,    0, 1137,  387, 1117,  387, 1119,
  469, 1199, 1122,  437, 1124,  441,  428, 1317, 1128, 1129,
 1130, 1131,    0, 1199,  398,   41, 1136,  453,   44,   91,
  319, 1313,   41,   44,  398,   44,  398, 1199,   44,  441,
  258,  790, 1602, 1154,    0, 1156,  278,  471,  280, 1455,
   59,  453,  341,   59,  462,  463,  274,  452,    0,  277,
  278, 1171,  280,   59,  302,  459,    0,  285,  278, 1118,
  288, 1334,  452,   44,    0,    0, 1636,   93, 1091, 1092,
  322,   59,   93,  301,   40,   41,  260,  329,   44,  307,
  332,  278,  310,  280,  336, 1152,  343, 1564,   44, 1275,
 1211,  339,  344,   59,  264,  443, 1369,  319,    0, 1669,
  320, 1547,    0, 1696,  319,  280,   41,   59,  360,   44,
  344,  286,   93, 1233,  319,   59,  398, 1687,  319,  341,
  304,  378, 1242,   59,   59,   91,  341,  332,  329, 1249,
 1607,  332,  384,  259, 1580,  369,  341,   93,  264,   41,
  341,  258,   44,  344,  270,  397,  321,  280,  461,  406,
  208,  379,  409,  286,  260, 1275,   91,   59,  216, 1226,
  408,   59,  414, 1230,    0,    0,  388,  419,  425, 1192,
  418, 1313, 1192,  401,  406, 1295, 1622,  936, 1364, 1299,
  408,  401,  343,  388,  412, 1327,  258,  388,  321,  441,
  307,  419,  397,  427,  451,  443,  397,   44,  304,    0,
  461,  453,  274,  455,  319,  277,  278, 1653,  280,  437,
  260, 1627,   59,  285,  442,  279,  288,  378,  461,  441,
  979,    0,  442,   59,   59,  457,  341,  461,  398,  301,
    0, 1677,  265, 1525,  379,  307,  441,    0,  310,  467,
  441, 1657, 1658,  471, 1364,  406,  322,    0,  409,  265,
 1326, 1327,  453, 1320,  304, 1547,  401,    0,   59,  278,
  336,  280,  403,  408,  425, 1681,  330, 1387, 1388, 1326,
  303,   41,  398,  388,   44,    0,  461, 1335,   41, 1695,
   59,   44,  397, 1401,  360,  323,  343,  303, 1580,   59,
  451, 1411,  258,   44, 1414,  322,   59,  442,  461,    0,
  364,   44,  419,  319,    0,  446,   59,  379,  274,  336,
 1431,  277,  278, 1455,  280,    0,   59,  344,  382,  285,
  437,  378,  288,  258, 1444,  341,  441,  323,   41,  401,
 1622,   44,    0,  360,   59,  301,  408,  343,  414,  274,
  412,  307,   93,  278,  310,  280,  402,  419,  322,  406,
  285,  461,  409,  288,  471,  343,   41,    0,   59,   44,
  379, 1653,  336,   59, 1473,  437,  301, 1438,  425,    0,
  442,  279,  307, 1493,   59,  310,  435,  459, 1401, 1455,
   93, 1501,  401, 1525, 1407, 1677,  360,  414,    0,  408,
  378,   59,    0,  301,  451,  467,    0,  444,   41,  471,
  406,   44,  461,  409,  486, 1547,   91,  317,  318,   41,
  384, 1469,   44,  379,  461,  259,   59, 1537,  406,  425,
    0,  409,  330,  442,   40,  418,  270, 1494,   59,   41,
 1441, 1498,   44,   41,    0,  401,   44,  425, 1580,  355,
  414,  349,  408,  384,  379,  451,  412,   59,   91, 1558,
  358,   59,  445,  419,  258,   59,  364,  261, 1578,  384,
    0,  357,    0,  451,   42,   43,  401,   45,  322,   47,
    0,  437, 1536,  408,  382,   41,  442,  412,   44,   59,
 1622,  329,  336,    0,  419, 1627,   42,   43,    0,   45,
    0,   47,   44,   59, 1614,    0,  322,  384,  394,    0,
  396,  467,  437,  307,  386,  471,  360,  442,   40,    0,
  336, 1653,    0,   45,  403, 1657, 1658, 1588,  344,   59,
  384,   59,   41,  419,   41,   44, 1563,   44,    0,   59,
  384,   63,  467,    0,  360, 1677,  471,  495, 1575, 1681,
   41,  338,   59,   44,  280,  461,  435,   59,  444,   59,
  286, 1627,  322, 1695,   59,  403,  472,  338,   59,  329,
  414,  338,  332, 1600,  419,    0,  336, 1590,   59,  259,
 1590,   59, 1609,  258,  344,  491,  672,  461,  353,    0,
  270, 1657, 1658, 1649,  500,  501,  502,   59,  414,  274,
  360,  439,   59,  278,  375,  280,  444,  274,  375,  695,
  285, 1638,  450,  288,  379, 1681,  466,  388,  468, 1646,
  706,  388,  319,  461,  384,  258,  301,  494,  495, 1695,
   41,  469,  307,   44,   59,  310, 1085,  397, 1087,   40,
   40,  274,   43, 1670,   45,  278,  425,  280,   59,    0,
   41,  462,  285,   44,  414,  288,  258,   58,   41,  264,
  258,   44,   63,  458,  459,  460,   41,   41,  301,   44,
   44,  317,  462,  463,  307,  277,  278,  310,  280,  277,
  278,  441,  280,  285,  319,  279,  288,  285,  392,  393,
  288,  486,  487,  453,  262,  455,   45,   41,   41,  301,
   44,   44,  258,  301,  379,  307,  338,  301,   59,  307,
   41,  461,  280,   44,   63,  453,   41,   41,  286,   44,
   44,  337,  278,  341,  280,   40,  401,  403,   43,  285,
   45,   40,  288,  408,  280,   41,  330,  412,   44,   41,
  286,  321,   44,   58,  419,  301,  379,   41,   63,   41,
   44,  307,   44,   42,   43,  349,   45,   41,   47,  319,
   44,  403,  437,  357,  358,  384,  312,  442,  401,   41,
  364,  278,   44,  280,  296,  408,  384,  379,  437,  412,
  362,  379,  451,  295,  462,  463,  419,  278,  382,  280,
   42,   43,  467,   45,  306,   47,  471,  288,  435,  401,
  394,  313,  396,  401,  437,  461,  408,  703,  704,  442,
  408,  418,  443,  358,  288,  417,  412,  419,  470,   44,
    0,  419,  640,  379,  642,  419,  338,  645,  646,  647,
   61,  353,  373,  287,  467,  437,   40,  264,  471,  437,
  442,   40,  462,   44,  442,  401,  437,  462,  462,  461,
  444,  262,  408,   41,   42,   43,  321,   45,   44,   47,
  403,   41,   40,  419,   44,   40,  267,   40,   40,  471,
   40,   40,  379,  471,   40,  276,   40,   40,   40,   59,
  461,  437,   42,   43,   44,   45,  442,   47,  379,  290,
   40,  403,  293,  384,  401,  296,  297,   42,   43,   40,
   45,  408,   47,   40,   91,  321,   46,   46,  319,   44,
  401,  322,   44,  429,  315,  471,   40,  408,  329,   61,
  280,  332,   44,  435,  383,  336,  327,  439,  279,   46,
  341,  349,   44,  344,  301,  442,  458,  459,  460,  278,
  462,  463,  278,  264,  461,  398,  471,  296,  437,  360,
  301,  442,  267,  398,  355,  356,    0,  277,  459,  481,
  482,  276,  448,  448,  486,  487,  367,    0,  400,   40,
  371,   42,   43,  384,   45,  290,  387,  388,  379,  330,
   40,  296,  297,   40,  350,   91,  397,   58,   40,   40,
  264,  280,   63,  412,  384,   44,    0,  286,  349,  383,
  315,  390,   40,  414,  353,   40,  437,  358,   41,  465,
  262,   44,  327,  364,  318,   59,   40,  452,  321,   41,
  321,  422,  461,  312,  453,  436,   59,  461,  280,  449,
  441,  382,  264,  434,  286,  459,  277,   41,   40,  274,
  355,  356,  453,  444,  455,   40,   40,   42,   43,  285,
   45,  301,  367,  387,  345,   59,  371,  458,  459,  460,
  461,  462,  463,   58,  379,  822,  345,  824,   63,  826,
  827,  472,  829,  830,  831,  278,  387,    0,  419,  387,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  417,
  491,  301,  280,  419,   40,  496,  497,  357,  286,  500,
  501,  502,  418,  418,   40,  461,  274,  422,   40,  458,
  459,  460,  368,  462,  463,   44,  386,   44,   41,  434,
  280,   44,   41,  321,   44,  321,  286,   44,  264,  444,
   40,  280,  481,  482,  329,  280,   59,  486,  487,  319,
   44,  286,  322,  458,  459,  460,  461,  462,  463,  329,
   44,  266,  332,   40,  300,   40,  336,  472,  423,  264,
   41,  341,  461,   58,  344,   41,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   41,  491,   41,  455,  441,
  360,  496,  497,  395,  310,  500,  501,  502,  493,  260,
  310,   41,   41,   40,   40,    0,  267,   40,  353,   40,
   43,   40,   45,   40,  384,  276,   42,   43,  388,   45,
   40,   47,   41,   42,   43,   58,   45,  397,   47,  290,
   63,   40,   40,   59,   40,  296,  297,   40,   40,   40,
   40,   40,   40,  304,  414,  279,   41,   40,  328,   44,
   44,  262,  436,  309,   41,  278,  389,  280,  344,  274,
  332,  389,  285,  271,   59,  288,  327,  301,   41,   42,
   43,  441,   45,  391,   47,  260,  389,  423,  301,  288,
  447,  392,  267,  453,  408,   41,  387,  387,  387,  387,
  387,  276,  353,    0,  355,  356,  330,  387,  379,    0,
   41,  278,   40,  418,   40,  290,  367,   43,   41,   45,
  371,  296,  297,   41,   41,  349,  386,  437,   41,  304,
  309,  397,   58,  339,  358,  319,  443,   63,   42,   43,
  364,   45,  436,   47,   41,  329,  302,   44,  332,  339,
   41,  302,  327,   44,   41,   59,   41,  341,  382,  443,
  353,  386,   59,   41,   42,   43,  379,   45,   59,   47,
   41,   42,   43,   41,   45,  278,   47,  280,  353,   41,
  355,  356,  285,  434,  372,  288,  372,   41,  401,   41,
   41,   41,  367,  444,   41,  408,  371,   40,  301,   41,
   43,   41,   45,   41,  388,   41,   41,  458,  459,  460,
  461,  462,  463,  397,   41,   58,   41,   41,   41,  341,
   63,  472,  280,   44,   40,   59,   59,   40,   59,  442,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   59,
  491,   59,   59,  341,  267,  496,  497,   59,   41,  500,
  501,  502,  353,  276,   41,   42,   43,  441,   45,  434,
   47,  321,  345,   41,  280,  369,   40,  290,   59,  444,
  286,  280,  341,  296,  297,   59,  379,  286,  384,  384,
  461,   44,  384,  458,  459,  460,  461,  462,  463,   41,
   41,   44,  315,  278,  411,  280,   44,  472,  401,    0,
  436,  305,  302,  288,  327,  408,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  443,  491,  280,   41,  344,
   40,  496,  497,  286,   59,  500,  501,  502,  294,  305,
  464,   44,  355,  356,  260,  308,   44,  263,   41,  442,
   41,  267,    0,   44,  367,   41,   42,   43,  371,   45,
  276,   47,  338,  384,   40,  264,  379,  278,   59,  264,
  384,   41,   42,   43,  290,   45,  459,   47,  390,  321,
  296,  297,  264,  412,  452,   40,  280,  471,   43,   40,
   45,  278,  286,  280,  264,  310,  459,  278,  271,  280,
  437,  288,  271,   58,  379,  436,  344,  288,   63,  422,
  344,  327,  280,  344,  301,  344,  459,   41,  286,  280,
  301,  434,   40,   40,   59,  286,  401,  260,   41,   41,
  263,  444,    0,  408,  267,   44,   59,   41,  305,  355,
  356,    0,    0,  276,    0,  458,  459,  460,  461,  462,
  463,  367, 1088,  243,  236,  371,    0,  290,    0,  472,
   12,  628,  235,  296,  297,  588, 1024,  442,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   79,  491,  802,
 1022, 1019, 1011,  496,  497,  323, 1352,  500,  501,  502,
  537,   59,  379,  293,  327,  288, 1003,   41,  379,   41,
   44,  951,   44,  280,  701,  281,  305, 1012,   40,  286,
  426,   43,  737,   45,  401,   59,  305,   59,  434, 1332,
  401,  408,  355,  356, 1595, 1334,   58,  408,  444,  516,
 1599,   63, 1631, 1598,  367,   41,   42,   43,  371,   45,
  727,   47,  458,  459,  460,  461,  462,  463,   41,   42,
   43, 1169,   45, 1680,   47,  442,  472,  355, 1552, 1600,
 1364,  442,  585,  797, 1628,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  310,  491, 1014,  298,  518,  291,
  496,  497, 1363,  783,  500,  501,  502,  278, 1201,  280,
  775,   13,  451,  426,  280,  268,  705,  288,  455,  676,
  286,  434,  677,  117,  690,  260,  578, 1525,  263, 1428,
  280,  444,  267,   41,   42,   43,  286,   45, 1646,   47,
 1609,  276,  467, 1698,  354,  458,  459,  460,  461,  462,
  463,  635,  915, 1056,  858,  290, 1124,   -1,   -1,  472,
   -1,  296,  297,   -1,   -1,    0,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   40,  491,   -1,
   43,   -1,   45,  496,  497,   -1,   -1,  500,  501,  502,
   -1,   -1,  327,   -1,   -1,   58,   -1,   41,   42,   43,
   63,   45,   -1,   47,   -1,   -1,   41,   -1,  379,   44,
  258,   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,
  355,  356,   -1,   -1,   59,   -1,   -1,  260,   -1,   -1,
  401,  279,  367,   -1,   -1,   -1,  371,  408,  262,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,  260,   -1,
   -1,  263,   -1,  301,   -1,  267,  278,   -1,  280,  307,
   -1,   -1,   -1,   -1,  276,   -1,  288,   -1,   -1,  302,
   -1,  442,   -1,   -1,   40,   -1,   -1,   43,  290,   45,
   -1,  314,  330,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,  426,   58,   -1,  280,  319,   -1,   63,  322,  434,
  286,  349,   -1,   -1,   -1,  329,  339,  280,  332,  444,
  358,   -1,  336,  286,   -1,  327,  364,  341,   -1,   -1,
  344,   -1,   -1,  458,  459,  460,  461,  462,  463,   41,
   42,   43,   -1,   45,  382,   47,  360,  472,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  367,  491,  379,   -1,  371,
  384,  496,  497,  387,  388,  500,  501,  502,   -1,   -1,
   -1,  419,  280,  397,   -1,  408,   -1,   -1,  286,  401,
   -1,   -1,   -1,   -1,  260,  418,  408,   -1,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,  260,    0,   -1,
  263,   -1,   -1,   -1,  267,   41,   42,   43,   -1,   45,
  443,   47,  436,  276,  426,   -1,   -1,  441,   -1,   -1,
  442,   -1,  434,   -1,   -1,   -1,  302,  290,  461,  453,
   -1,  455,  444,  296,  297,   -1,  280,   -1,  314,   -1,
   -1,   -1,  286,  278,   -1,  280,  458,  459,  460,  461,
  462,  463,  280,  288,   -1,   -1,   -1,   59,  286,   -1,
  472,   -1,   -1,  339,  327,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  280,   -1,   -1,  260,  496,  497,  286,   -1,  500,  501,
  502,   -1,  355,  356,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,  367,   -1,    0,   -1,  371,   -1,
  276,    0,   41,   42,   43,   -1,   45,   40,   47,   -1,
   43,   -1,   45,   -1,  290,  302,   -1,  295,   -1,   -1,
  296,  297,  408,   -1,   -1,   58,   -1,  314,  306,   -1,
   63,   -1,  418,   -1,  379,  313,   -1,   41,   -1,   -1,
   44,  328,   41,   -1,   -1,   44,   -1,   46,  326,   -1,
   -1,  327,  339,  426,   -1,   59,  401,  443,  280,   -1,
   59,  434,   61,  408,  286,   -1,   -1,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,    0,  355,
  356,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,  367,   -1,   -1,   -1,  371,   -1,  442,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   41,
   -1,  408,   44,  496,  497,  403,   -1,  500,  501,  502,
   40,  418,   -1,   43,  280,   45,   -1,   59,   -1,   -1,
  286,   -1,  420,   -1,   -1,   -1,  258,   -1,   58,   -1,
  426,   -1,   -1,   63,   -1,   -1,  443,  435,  434,   -1,
   -1,  439,   -1,   -1,  442,   -1,   -1,  279,  444,   -1,
   -1,   -1,  450,   -1,  461,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,  301,
   -1,  469,   -1,   -1,   -1,  307,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,  330,   -1,
  496,  497,   -1,   -1,  500,  501,  502,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,   -1,   -1,  349,   -1,   -1,
   -1,  280,   -1,  276,   -1,  357,  358,  286,   -1,   -1,
   -1,   -1,  364,   40,  258,   42,   43,  290,   45,   -1,
   -1,   -1,   -1,  296,  297,  264,  265,   -1,   -1,   -1,
  382,   58,   -1,   -1,   -1,  279,   63,   -1,   -1,   -1,
   -1,  280,  473,  474,  475,  476,  477,  478,  479,  480,
   -1,   -1,   -1,   -1,  327,   -1,   -1,  301,   -1,   -1,
   -1,   -1,   -1,  307,  303,   -1,  305,  419,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,   -1,
  319,   -1,  355,  356,    0,   -1,  330,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
  262,   -1,  341,   -1,   -1,  349,   -1,   -1,   -1,   -1,
  260,   -1,   -1,  263,  358,   -1,   -1,  267,   -1,   -1,
  364,   -1,   -1,   -1,   -1,   41,  276,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,  382,   43,
  290,   45,   -1,   59,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,  426,   58,   -1,   -1,  319,   -1,   63,
  322,  434,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,  444,   -1,   -1,  336,  419,   -1,  327,   -1,  341,
   -1,   -1,  344,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  472,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  367,  491,   -1,
   -1,  371,  384,  496,  497,  387,  388,  500,  501,  502,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,  306,   -1,   -1,  276,
   -1,   -1,  414,  313,   -1,   -1,   -1,  317,  318,   40,
   -1,   42,   43,  290,   45,   -1,  326,   -1,   -1,  296,
  297,   -1,   -1,   -1,  436,   -1,  426,   58,  338,  441,
   -1,   -1,   63,   -1,  434,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,  444,   -1,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,  353,   -1,  355,  356,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  367,  491,   -1,  403,  371,   -1,  496,  497,   -1,   -1,
  500,  501,  502,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  420,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,  435,   -1,   -1,   -1,  439,
   -1,   -1,   40,   -1,   -1,   43,  290,   45,   -1,   -1,
  450,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,  319,   -1,   63,  322,  434,   -1,  469,
   -1,   -1,   -1,  329,   -1,   -1,  332,  444,   -1,   -1,
  336,   -1,   -1,  327,   -1,  341,   -1,   -1,  344,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  472,   -1,   -1,   -1,  353,
   -1,  355,  356,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  367,  491,   -1,   -1,  371,  384,  496,
  497,  387,  388,  500,  501,  502,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  276,   -1,   -1,  414,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,  290,
   45,   -1,   -1,   -1,  418,  296,  297,   -1,   -1,   -1,
  436,   -1,   -1,   58,   -1,  441,   -1,   -1,   63,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,
  444,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   59,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,  353,   -1,  355,  356,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  367,  491,   -1,   -1,
  371,   -1,  496,  497,   -1,   -1,  500,  501,  502,   -1,
   -1,   -1,  260,   -1, 1234, 1235,   -1,   -1,   -1,  267,
 1240, 1241,   -1, 1243, 1244,   -1,   -1,   -1,  276,   -1,
   -1, 1251, 1252, 1253, 1254,   -1, 1256, 1257, 1258, 1259,
 1260, 1261,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   40,   -1,  304,   43,   -1,   45,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,  444,   -1,   -1,   -1,   63,   -1,  327,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  367,
  491,   -1,   -1,  371,   -1,  496,  497,   -1,   -1,  500,
  501,  502,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,  267,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   58,   -1,   -1,    0,
  258,   63,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  279,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,  327,  301,   -1,   -1,   -1,   -1,   -1,  307,
  458,  459,  460,  461,  462,  463,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
  355,  356,  330,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  367,  491,   -1,   -1,  371,   -1,  496,  497,
   -1,  349,  500,  501,  502,   -1,   -1,   -1,   -1,   -1,
  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,
   43,  267,   45,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,  434,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,  327,   -1,    0,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  267,  491,   -1,   -1,  355,
  356,  496,  497,   -1,  276,  500,  501,  502,   -1,   -1,
   -1,  367,   -1,   -1,   41,  371,   40,   44,  290,   43,
   -1,   45,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,
   -1,   -1,  418,   -1,   -1,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,   -1,  444,   -1,
  301,   -1,   -1,   -1,   -1,  367,  307,   -1,   -1,  371,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,  330,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  267,  491,   -1,   -1,  349,   -1,
  496,  497,   -1,  276,  500,  501,  502,  358,   -1,   -1,
   -1,   -1,   -1,  364,   -1,   40,   -1,  290,   43,   -1,
   45,   -1,  434,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  444,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,  355,  356,  496,  497,   -1,   -1,  500,  501,
  502,   -1,   -1,   -1,  367,  262,   -1,   -1,  371,   40,
   -1,   -1,   43,  267,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,  290,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  434,  329,  327,   -1,  332,   -1,   -1,   -1,  336,
   -1,  444,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,  355,  356,  360,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  384,  491,   -1,
  387,  388,   -1,  496,  497,   -1,   -1,  500,  501,  502,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,  267,   45,   -1,   -1,   -1,  414,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,  290,   -1,   -1,   -1,  436,
  434,  296,  297,   -1,  441,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,
   -1,  455,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,  327,   -1,    0,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  267,  491,   -1,   -1,
  355,  356,  496,  497,   -1,  276,  500,  501,  502,   -1,
   -1,   -1,  367,   -1,   -1,   41,  371,   40,   44,  290,
   43,   -1,   45,  261,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,   -1,   -1,  327,   -1,   -1,   -1,
  298,   -1,  300,  418,  302,   -1,   -1,   -1,   -1,  307,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,  434,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  444,
  328,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,  339,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  267,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  276,  500,  501,  502,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,  290,   43,
   -1,   45,   -1,  434,  296,  297,   -1,   -1,  406,   -1,
   -1,   -1,   -1,  444,   58,  413,   -1,   -1,  416,   63,
  418,  419,   -1,   -1,  455,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,  327,    0,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,  443,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,  353,   -1,  355,  356,  496,  497,   -1,   -1,  500,
  501,  502,   -1,   -1,   -1,  367,  262,   41,   -1,  371,
   44,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,  492,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  434,  329,  327,   -1,  332,   -1,   -1,   -1,
  336,   -1,  444,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  355,  356,  360,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  384,  491,
   -1,  387,  388,   -1,  496,  497,   -1,   -1,  500,  501,
  502,  397,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,  267,   -1,   -1,   -1,   -1,  414,   -1,
   -1,   -1,  276,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,
  436,  434,  296,  297,   -1,  441,   -1,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,  327,   -1,   -1,   -1,   -1,    0,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,  355,  356,  496,  497,   -1,   -1,  500,  501,  502,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
   -1,   -1,  336,   -1,  302,   -1,   -1,  341,   -1,   91,
  344,   93,   -1,   -1,   -1,  313,  314,   -1,  316,   -1,
  434,  319,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,  458,  459,  460,  461,  462,  463,
  384,   -1,   -1,   -1,  388,    0,   -1,   -1,  472,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  272,  491,   -1,   -1,
  414,   -1,  496,  497,  280,   -1,  500,  501,  502,   -1,
  286,   -1,   -1,  289,   -1,   -1,   41,   42,   43,   44,
   45,  399,   47,   -1,   -1,   -1,   -1,  441,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,  453,
  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  334,   -1,
   -1,   -1,   -1,  273,   -1,  443,  342,  277,   93,   -1,
   -1,   -1,   -1,   -1,   -1,  285,  454,   -1,   -1,   -1,
   -1,   -1,   -1,  461,   -1,  361,  296,  363,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,  377,  264,  379,  380,  381,   -1,   -1,   -1,   -1,
  272,   -1,  490,   -1,   -1,   -1,   -1,   -1,  280,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,    0,  308,  309,   -1,   -1,
  312,   -1,   -1,   -1,  430,   -1,   -1,  319,   -1,  321,
  322,   -1,   -1,  325,  374,   -1,  376,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,  407,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  424,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,  446,  262,   93,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,  411,
   -1,  461,  414,   -1,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  430,   -1,
   -1,  481,  482,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,    0,  308,  309,   -1,   -1,  312,  498,  499,
  452,  453,   -1,  455,  319,   -1,  321,  322,   -1,  461,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  273,   -1,  397,   -1,  277,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  430,   -1,  262,   -1,  264,
   -1,  436,   -1,   -1,   -1,   -1,  441,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,
  455,  286,   -1,   -1,  289,   -1,  461,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,    0,  308,  309,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,  374,   -1,  376,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,  407,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  424,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,  446,  262,   93,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,  411,   -1,  461,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  289,   -1,   -1,   -1,  430,   -1,   -1,  481,  482,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,    0,
  308,  309,   -1,   -1,  312,  498,  499,  452,  453,   -1,
  455,  319,   -1,  321,  322,   -1,  461,  325,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  397,
   -1,  277,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  430,   -1,  262,   -1,  264,   -1,  436,   -1,
   -1,   -1,   -1,  441,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  452,  453,   -1,  455,   -1,   -1,
   -1,  289,   -1,  461,  340,   -1,   -1,   -1,   -1,   -1,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,    0,
  308,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  321,  322,   -1,   -1,  325,  374,   -1,
  376,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  407,  360,  361,   -1,  363,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  424,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
  446,  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,
   -1,   -1,  430,   -1,   -1,  481,  482,   -1,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,    0,  308,  309,   -1,
   -1,  312,  498,  499,  452,  453,   -1,  455,  319,   -1,
  321,  322,   -1,  461,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
   -1,  262,   -1,  264,   -1,  436,   -1,   -1,   -1,   -1,
  441,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  452,  453,   -1,  455,   -1,   -1,   -1,  289,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,  308,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,
  321,  322,   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,  397,   -1,  262,   93,
  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,
  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,  430,
   -1,   41,   -1,   -1,   44,  436,   -1,   -1,   -1,   -1,
  441,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   59,
   -1,  452,  453,   -1,  455,  319,   -1,  321,  322,   -1,
  461,  325,    0,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,    0,  363,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   59,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  411,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,  430,   -1,  262,   -1,
  264,   -1,  436,   -1,   -1,   -1,   -1,  441,  272,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  452,  453,
   -1,  455,   -1,   -1,   -1,  289,   -1,  461,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,
   59,   -1,   -1,   41,   -1,  319,   44,  321,  322,   -1,
   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   59,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,
    0,   -1,  322,   -1,   -1,   -1,   -1,  411,   -1,  329,
  414,    0,  332,   -1,  262,   -1,  336,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,  430,   -1,   -1,   -1,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,
  360,   41,   -1,   -1,   44,    0,   -1,   -1,  452,  453,
  262,  455,   41,   -1,   -1,   44,   -1,  461,   -1,   59,
   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   59,  319,   -1,   -1,  322,   -1,   -1,  397,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,   41,   -1,  336,   44,
   -1,   -1,   -1,  341,  414,   -1,  344,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   59,   -1,   -1,  319,   -1,   -1,
  322,   -1,  360,  262,   -1,   -1,  436,  329,   -1,   -1,
  332,  441,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
  302,   -1,  344,  453,  262,  455,  384,  309,   -1,  387,
  388,  313,  314,   -1,  316,   -1,   -1,  319,  360,  397,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,   -1,   -1,  414,  339,   -1,   -1,
  319,   -1,  384,  322,   -1,  387,  388,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  397,   -1,  336,  436,   -1,
   -1,  319,  341,  441,  322,  344,   41,   -1,   -1,   44,
   -1,  329,  414,   -1,  332,  453,   -1,  455,  336,   -1,
   -1,  360,   -1,  341,   59,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,   -1,   -1,  399,   -1,  441,
   -1,   -1,  360,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,  453,   -1,  455,    0,   -1,  418,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,  433,  262,   -1,   -1,  414,   -1,   -1,   -1,  397,
   -1,  443,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  452,   -1,  454,   -1,   -1,   41,  414,  436,   44,  461,
   -1,   -1,  441,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,  453,   -1,  455,  262,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,  490,  319,
   -1,   -1,  322,   -1,   -1,  453,   -1,  455,   -1,  329,
  319,   -1,  332,  322,   -1,   41,  336,   -1,   44,   -1,
  329,  341,   -1,  332,  344,   -1,   -1,  336,   -1,   -1,
   -1,   -1,  341,   59,   -1,  344,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   -1,  360,   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,
   -1,  336,   -1,   -1,  384,   -1,  341,  387,  388,  344,
    0,   -1,   -1,   -1,   -1,  384,   -1,  397,  387,  388,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,  397,   -1,
    0,   -1,   -1,   -1,  414,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  384,
   -1,   41,  387,  388,   44,   -1,  436,   -1,   -1,   -1,
   -1,  441,  397,   -1,   -1,   -1,   -1,  436,   -1,   59,
   -1,   41,  441,  453,   44,  455,   -1,   -1,   -1,  414,
   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,   59,
   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   -1,  436,   -1,   -1,  329,   -1,  441,  332,   -1,   -1,
   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,  453,  344,
  455,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   -1,  262,   -1,   -1,   41,
   -1,   -1,   44,  319,   -1,   -1,  322,   -1,   -1,  414,
   -1,   -1,   -1,  329,   -1,   -1,  332,   59,   -1,   41,
  336,   -1,   44,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   59,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  453,   -1,
  455,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  384,   -1,
  336,  387,  388,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,  397,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,
   47,   -1,  262,   -1,  360,   -1,   -1,   -1,  414,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  436,  387,  388,   -1,   -1,  441,   -1,   -1,  273,   -1,
   -1,  397,  277,   -1,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  414,  319,
   -1,  296,  322,   -1,  299,   -1,   -1,   -1,   -1,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,  319,
  436,  341,  322,   -1,  344,  441,   -1,   -1,   -1,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,  453,   -1,  455,
  360,  341,   -1,   -1,  344,  340,   -1,   -1,   -1,   -1,
   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,  354,
  360,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,  374,
   -1,  376,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
  262,   -1,   -1,   -1,  414,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  407,   -1,  414,   -1,  436,  412,   -1,   -1,
   -1,  441,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,
  322,   -1,   -1,  453,   -1,  455,  436,  329,   -1,   -1,
  332,  441,   -1,   -1,  336,   -1,   -1,  319,   -1,  341,
  322,  446,  344,  453,   -1,  455,   -1,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,  272,   -1,   -1,  360,  341,
   -1,   -1,  344,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,  481,  482,  360,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,  498,  499,  397,   -1,   -1,   -1,   -1,
   -1,   -1,  384,  273,   -1,  387,  388,  277,  325,   -1,
   -1,   -1,  414,   -1,   -1,  397,   -1,  334,   -1,   -1,
   -1,   -1,  292,   -1,  273,  342,  296,   -1,  277,  299,
   -1,   -1,  414,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,   -1,  292,  361,   -1,  363,  296,   -1,   -1,
  299,  453,   -1,  455,  436,   -1,   -1,   -1,   -1,  441,
  377,   -1,  379,  380,  381,   -1,   -1,   -1,   -1,   -1,
  340,  453,   -1,  455,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,  273,   -1,   -1,   -1,
  277,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,
   -1,  350,  351,  352,  374,  354,  376,   -1,   -1,  296,
   -1,   -1,  299,  430,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,  424,   -1,   -1,  271,  407,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  424,  446,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  302,  376,
   -1,   -1,   -1,   -1,   -1,  309,   -1,  446,   -1,  313,
  314,   -1,  316,   -1,   -1,  319,   -1,   -1,   -1,   -1,
  302,  481,  482,   -1,   -1,   -1,   -1,  309,   -1,  333,
  407,  313,  314,   -1,  316,  339,   -1,  319,  498,  499,
   -1,   -1,  481,  482,   -1,   -1,   -1,  424,   -1,   -1,
   -1,  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,  498,
  499,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  446,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,   -1,   -1,  488,  489,
  490,  491,   -1,  493,   -1,  399,  496,  497,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  418,   -1,   -1,  399,   -1,   -1,
   -1,  498,  499,   -1,   -1,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  418,   -1,   -1,  443,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,   -1,
  454,  433,   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,
   -1,  443,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  454,   -1,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,  461,   -1,   -1,   -1,  490,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,  490,  488,
  489,  490,  491,  461,  493,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,   -1,   -1,
  488,  489,  490,  491,   -1,  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 502
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"LARGEINT","KW_INT64","CASE","NULLIF","COALESCE",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 19:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 26:
{ yyval = yyvsp[0]; }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_list (yyvsp[0]); }
break;
case 31:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 32:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 33:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 39:
{ yyval = 0; }
break;
case 40:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 41:
{ yyval = 0; }
break;
case 42:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 50:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 63:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = yyvsp[0];}
break;
case 72:
{ yyval = yyvsp[0]; }
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 76:
{ g_field->fld_dtype = dtype_blob; }
break;
case 77:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 78:
{ yyval = (NOD) NULL; }
break;
case 80:
{ yyval = yyvsp[-1]; }
break;
case 82:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 83:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 86:
{ yyval = yyvsp[-1]; }
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 95:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 109:
{ yyval = NULL; }
break;
case 110:
{ yyval = make_list (yyvsp[0]); }
break;
case 112:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 113:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 114:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 115:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 116:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 117:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 118:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 119:
{ yyval = (NOD) 0;}
break;
case 120:
{ yyval = yyvsp[-1]; }
break;
case 121:
{ yyval = (NOD) NULL; }
break;
case 124:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 125:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 126:
{ yyval = NULL; }
break;
case 127:
{ yyval = NULL; }
break;
case 128:
{ yyval = yyvsp[0]; }
break;
case 129:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = (NOD) NULL; }
break;
case 133:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 137:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 138:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 139:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 144:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 145:
{yyval = (NOD) NULL;}
break;
case 148:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 149:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 150:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 151:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 152:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 153:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 154:
{yyval = (NOD) NULL;}
break;
case 157:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 161:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 162:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 163:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 164:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 165:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 166:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 167:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 168:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 169:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 170:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 171:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 173:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 174:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 175:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 178:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 179:
{ g_file  = make_file ();}
break;
case 184:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 192:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 193:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 194:
{ yyval = yyvsp[0]; }
break;
case 195:
{ yyval = yyvsp[0]; }
break;
case 196:
{ yyval = (NOD) NULL; }
break;
case 198:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 201:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 202:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 203:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 204:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 207:
{ yyval = NULL; }
break;
case 208:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = (NOD) NULL; }
break;
case 211:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 212:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 213:
{ yyval = yyvsp[-1]; }
break;
case 214:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 227:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 228:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 229:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 232:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = yyvsp[0]; }
break;
case 235:
{ yyval = NULL ;}
break;
case 240:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 241:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 242:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 243:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 244:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 245:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 246:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 247:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 248:
{ yyval = NULL;}
break;
case 249:
{ yyval = yyvsp[0];}
break;
case 250:
{ yyval = yyvsp[0];}
break;
case 251:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 252:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 253:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 254:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 255:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 256:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 257:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 258:
{ yyval = make_list (yyvsp[-1]); }
break;
case 259:
{ yyval = NULL; }
break;
case 260:
{ yyval = yyvsp[0]; }
break;
case 261:
{ yyval = NULL; }
break;
case 263:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 264:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 265:
{ yyval = make_list (yyvsp[0]); }
break;
case 266:
{ yyval = NULL; }
break;
case 268:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 272:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 273:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 274:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 276:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 285:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 289:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 290:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 291:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 292:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 293:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 294:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 295:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 296:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 297:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 298:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 299:
{ yyval = make_list (yyvsp[0]); }
break;
case 300:
{ yyval = make_list (yyvsp[-1]); }
break;
case 301:
{ yyval = NULL; }
break;
case 302:
{ yyval = make_list (yyvsp[0]); }
break;
case 303:
{ yyval = make_list (yyvsp[-1]); }
break;
case 304:
{ yyval = NULL; }
break;
case 307:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 311:
{ yyval = NULL; }
break;
case 313:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 317:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 321:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 322:
{ yyval = make_list (yyvsp[0]); }
break;
case 323:
{ yyval = make_list (yyvsp[-1]); }
break;
case 324:
{ yyval = NULL; }
break;
case 328:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 337:
{ yyval = make_list (yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = yyvsp[-1]; }
break;
case 344:
{ beginning = lex_position(); }
break;
case 345:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 346:
{ beginning = last_token; }
break;
case 347:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 348:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 349:
{ yyval = 0; }
break;
case 350:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = NULL; }
break;
case 354:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 355:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 373:
{ yyval = NULL; }
break;
case 374:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 377:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = yyvsp[0]; }
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 381:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 382:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 386:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 387:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 388:
{ yyval = yyvsp[0]; }
break;
case 389:
{ yyval = yyvsp[0]; }
break;
case 390:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 395:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 397:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = yyvsp[0]; }
break;
case 400:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 401:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 402:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 403:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 428:
{ yyval = NULL; }
break;
case 429:
{ yyval = NULL; }
break;
case 430:
{ yyval = NULL; }
break;
case 431:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 432:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 433:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 434:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 435:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 436:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 437:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 438:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 440:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 443:
{ yyval = yyvsp[0]; }
break;
case 444:
{ yyval = yyvsp[0]; }
break;
case 446:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 449:
{ yyval = NULL; }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = yyvsp[0]; }
break;
case 453:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 454:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 455:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 456:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 457:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 458:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 459:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 460:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 462:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 463:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 464:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 469:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 470:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 472:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 473:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 474:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 480:
{ 
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 481:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 482:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 483:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 484:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 485:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 490:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 491:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 492:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 493:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 494:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 495:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 496:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 497:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 498:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 499:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 501:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 502:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 515:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 516:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 517:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 518:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 519:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 520:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 523:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 527:
{ yyval = yyvsp[-1]; }
break;
case 528:
{ yyval = 0; }
break;
case 532:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 533:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 534:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 535:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 536:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 539:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 540:
{ yyval = (NOD) NULL; }
break;
case 542:
{ yyval = (NOD) NULL; }
break;
case 543:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 545:
{ yyval = (NOD) NULL; }
break;
case 547:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 552:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 553:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 554:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 555:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 556:
{ yyval = yyvsp[0];}
break;
case 558:
{ yyval = yyvsp[0];}
break;
case 559:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 562:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 563:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 564:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 565:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 566:
{ yyval = 0; }
break;
case 567:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 568:
{ yyval = (NOD) NOD_SHARED; }
break;
case 569:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 570:
{ yyval = (NOD) 0; }
break;
case 571:
{ yyval = (NOD) NOD_READ; }
break;
case 572:
{ yyval = (NOD) NOD_WRITE; }
break;
case 574:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 575:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 577:
{ yyval = 0; }
break;
case 579:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 580:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 581:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 582:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 583:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 584:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 585:
{ yyval = make_list (yyvsp[0]); }
break;
case 586:
{ yyval = 0; }
break;
case 588:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 589:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 590:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 594:
{ yyval = yyvsp[0]; }
break;
case 595:
{ yyval = 0; }
break;
case 596:
{ yyval = yyvsp[0]; }
break;
case 597:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 598:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 599:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 600:
{ yyval = 0; }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 608:
{ yyval = make_list (yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 613:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = yyvsp[-1]; }
break;
case 615:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 616:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 617:
{ yyval = make_list (yyvsp[-1]); }
break;
case 618:
{ yyval = NULL; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 626:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 627:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 628:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 629:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 630:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 631:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 632:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 633:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 634:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 635:
{ yyval = yyvsp[-1]; }
break;
case 636:
{ yyval = yyvsp[0]; }
break;
case 637:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = yyvsp[0]; }
break;
case 640:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 641:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 642:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 643:
{ yyval = 0; }
break;
case 644:
{ yyval = make_list (yyvsp[0]); }
break;
case 645:
{ yyval = 0; }
break;
case 647:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 651:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 655:
{ yyval = yyvsp[0]; }
break;
case 656:
{ yyval = 0; }
break;
case 657:
{ yyval = yyvsp[0]; }
break;
case 658:
{ yyval = 0; }
break;
case 659:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 660:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 661:
{ yyval = 0;}
break;
case 662:
{ yyval = yyvsp[0]; }
break;
case 663:
{ yyval = 0; }
break;
case 664:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 665:
{ yyval = 0; }
break;
case 666:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 667:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 668:
{ yyval = 0; }
break;
case 669:
{ yyval = 0; }
break;
case 671:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 672:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 675:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 677:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 678:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 680:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 681:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 682:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 684:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 687:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 688:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 692:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 693:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 695:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 699:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 702:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 706:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 707:
{ yyval = yyvsp[0]; }
break;
case 709:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 712:
{ yyval = NULL; }
break;
case 713:
{ yyval = make_list (yyvsp[-1]); }
break;
case 715:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 717:
{ yyval = NULL; }
break;
case 718:
{ yyval = make_list (yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 722:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 723:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 724:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 726:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 728:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 729:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 730:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 741:
{ yyval = yyvsp[-1]; }
break;
case 742:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 744:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 745:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 747:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 749:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 750:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 751:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 753:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 754:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 755:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 756:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 757:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 758:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 759:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 760:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 761:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 762:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 763:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 764:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 765:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 768:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 769:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 770:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 771:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 772:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 773:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 774:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 775:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 776:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 777:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 778:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 779:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 780:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 781:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 782:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 783:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 784:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 785:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 787:
{ yyval = make_list (yyvsp[-1]); }
break;
case 788:
{ yyval = yyvsp[-1]; }
break;
case 789:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 790:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 800:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 801:
{ yyval = yyvsp[0]; }
break;
case 802:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 803:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 804:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 805:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 806:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 807:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 808:
{ yyval = yyvsp[-1]; }
break;
case 809:
{ yyval = yyvsp[-1]; }
break;
case 812:
{ yyval = yyvsp[0]; }
break;
case 813:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 814:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 815:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 816:
{ yyval = yyvsp[0]; }
break;
case 817:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 818:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 819:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 820:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 822:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 824:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 825:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 826:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 827:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 828:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 829:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 831:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 832:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 833:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 834:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 840:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 841:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 842:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 843:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 844:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 845:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 846:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 847:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 848:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 849:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 850:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 851:
{ yyval = yyvsp[0]; }
break;
case 852:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 854:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 855:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 856:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 857:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 858:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 860:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 861:
{ yyval = yyvsp[0];}
break;
case 866:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 867:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 868:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 869:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 870:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 871:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 872:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 873:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 874:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 875:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 876:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 877:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 878:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 879:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 880:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 881:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 882:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 883:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 884:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 887:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 888:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 891:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 892:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 893:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 894:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 895:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 896:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 897:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 898:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 902:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 903:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 904:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 905:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 906:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 907:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 908:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 909:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 912:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
