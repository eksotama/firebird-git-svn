#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 *
 */

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

#define YYSTYPE		NOD
#ifdef DEBUG
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/

static FLD	field;
static FIL	file;
static NOD	field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;


#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#endif
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define LIMIT 488
#define SUBSTRING 489
#define CONNECTION_ID 490
#define TRANSACTION_ID 491
#define LARGEINT 492
#define KW_INT64 493
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    9,    9,
    9,    9,    9,   19,   19,   18,   18,   18,   29,   29,
   22,   30,   30,   30,   30,   30,   21,   21,   27,   27,
   23,   12,   12,   12,   12,   12,   12,   12,   33,   24,
   24,   24,   24,   34,   34,   34,   20,   20,   35,   35,
   35,   25,   25,   39,   26,   26,   41,   41,    6,   42,
   42,   44,   49,   49,   49,   46,   46,   46,   53,   53,
   54,   47,   47,   56,   56,   56,   56,   43,    5,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   61,   61,   64,   64,   64,   72,   80,   80,   80,   81,
   81,   82,   82,   83,   83,   87,   87,   71,   90,   90,
   92,   92,   93,   93,   96,   96,   97,   98,   98,   99,
  100,   69,   73,   70,   84,   84,  103,  104,  104,  106,
  106,  107,  107,  107,  107,  107,  105,  105,  108,  108,
  109,  109,  109,  109,  111,  111,  111,  111,  110,  110,
  115,  115,  114,   88,  116,  116,  117,  120,  121,  121,
  122,  118,  119,  119,  123,  123,  124,  124,  125,  125,
  125,   86,   86,   86,   66,  126,  126,  126,  127,  127,
  128,  128,  129,  129,  129,  135,   76,   76,  131,  131,
   94,   94,   89,  140,  141,   55,  132,  132,   95,   95,
   95,   95,   95,  133,  133,  146,  146,  147,  149,  149,
  149,  149,  149,  130,  148,  148,  152,  152,  152,  152,
  154,  155,  156,  151,  150,  150,  150,  150,  150,  157,
  158,  159,  159,  159,  159,   65,  164,  160,  160,  161,
  161,  165,  165,  166,  162,  162,  167,  167,  168,  169,
  169,  163,  163,  171,  171,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  174,
  175,  176,  177,  177,  178,  184,  180,  180,  180,  181,
  181,  181,  186,  186,  186,  186,  186,  186,  186,  186,
  182,  182,  182,  182,  179,  183,  183,  172,  172,  188,
  189,  189,  190,  190,  190,  190,   11,  192,  192,  192,
  193,  193,  193,  193,  193,  193,   68,  195,  198,  198,
  198,  199,  202,  207,  207,  208,  208,  209,  209,  137,
  197,   77,   79,  196,  196,   67,  212,  212,  212,  213,
  216,  216,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  214,  214,  215,
    2,  219,  219,  219,  219,  219,  219,  219,  225,  225,
  227,  227,  227,  227,  227,  227,  227,  220,  220,  228,
  228,  228,  228,  228,  228,  228,  224,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  230,  230,  232,  232,
  231,  229,  229,  229,  226,  226,  222,  223,  223,  234,
  234,  234,  234,  235,  235,  221,  236,  236,  237,  237,
    8,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,   91,   91,  134,  134,  241,  241,  244,  244,
  246,  246,   50,   50,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  251,  251,  252,  252,  242,  242,  242,
  242,  253,  253,   58,   58,   58,   52,   52,  248,  248,
  248,  245,  245,  245,  257,  257,  257,  256,  256,  255,
  255,  255,  249,  249,  260,  258,  258,  258,  259,  259,
  250,  250,  250,  250,  261,  261,   15,   15,   15,  263,
  263,  263,    4,   13,  265,  265,  266,  266,  267,  267,
  262,  268,  268,  269,  269,  270,  270,  270,  270,  271,
  271,  272,  272,  273,  273,  275,  275,  275,  276,  276,
  276,  277,  277,  277,  274,  279,  279,  279,  280,  280,
  278,  278,  281,  283,  283,  282,  282,  264,   14,  284,
  284,  284,  285,  285,  288,  288,  289,  289,   62,   62,
   62,  286,  286,  290,  290,  287,  200,  200,  201,  201,
  294,  294,  295,  295,  295,  291,  298,  298,  299,  299,
  300,  300,  301,  301,  302,  302,  304,  304,  305,  305,
  210,  210,   28,  211,  211,  211,  211,  211,  211,  211,
  211,  204,  204,  306,  306,  307,  307,  307,  205,  205,
  203,  203,  292,  292,  309,  309,  309,  206,  206,  310,
  311,  311,  311,  311,  311,  312,  312,  313,  313,  314,
  314,  315,  315,  315,  316,  316,   10,   10,  317,  317,
    7,    7,  318,  319,  320,   16,   16,  321,  322,  323,
  323,  173,  296,  296,    3,    3,  324,  324,  324,  326,
  326,   58,  325,  325,  327,  327,   31,   31,   75,   74,
   74,  139,  139,  139,  136,  101,  101,  101,  101,  329,
  329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
  330,  330,  330,  330,  330,  330,  330,  330,  335,  335,
  335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
  335,  335,  335,  335,  341,  341,  331,  331,  332,  332,
  332,  332,  333,  333,  337,  337,  338,  338,  338,  338,
  336,  339,  334,  334,  342,  342,  340,  344,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,  145,  145,  145,  345,  348,  348,  142,  142,  349,
  349,  349,  349,  349,  347,  347,  347,  347,  347,  343,
  343,  343,  343,  343,  343,  343,  343,  194,  350,  143,
  143,   48,   48,   17,   17,  218,  351,   51,  113,  247,
  247,   85,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  308,  308,  352,
  352,  352,  352,  352,  352,  352,  352,  293,  293,  144,
   45,  254,  112,  138,  328,  153,  187,  240,   60,   57,
  191,  102,   63,  297,   32,   40,  303,  239,   36,   38,
  185,   37,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    7,    8,
    6,    7,    5,    1,    2,    1,    2,    1,    1,    3,
    1,    1,    1,    1,    2,    2,    3,    0,    3,    0,
    1,    7,    8,    6,    7,    6,    7,    4,    3,    1,
    3,    3,    3,    2,    2,    2,    1,    3,    1,    2,
    2,    1,    3,    1,    1,    3,    1,    2,    2,    2,
    3,    8,    1,    1,    5,    0,    1,    3,    1,    3,
    2,    1,    3,    2,    3,    4,    2,    9,    2,    3,
    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    0,    0,    1,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    1,    1,    4,    3,    3,    3,    3,    1,    1,
    6,    3,    1,    3,    1,    3,    2,    1,    0,    2,
    3,    1,    0,    1,    1,    2,    3,    4,    0,    1,
    2,    0,    1,    1,    5,    3,    2,    0,    1,    3,
    1,    1,    6,    3,    2,    6,    2,    1,    2,    2,
    2,    0,    1,    1,    2,    0,    2,    0,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    2,    2,    4,
    1,    1,    2,    2,    2,    0,    1,    1,    1,    1,
    2,    3,    7,    6,    1,    1,    2,    2,    0,    3,
    3,    1,    2,    2,    2,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    3,    4,    1,    2,    2,    2,    3,    1,    1,
    1,    1,    2,    3,    1,    2,    1,    2,    2,    6,
    4,    7,    8,    6,    4,    2,    1,    3,    0,    2,
    4,    0,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    1,    3,    3,    6,    3,    0,    1,    2,    4,
    1,    3,    2,    2,    2,    1,    4,    1,    3,    0,
    1,    1,    1,    3,    3,    3,    7,    1,    1,    3,
    4,    8,    2,    1,    3,    1,    1,    6,    3,    0,
    0,    0,    0,    3,    0,    9,    1,    1,    0,    2,
    1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    5,    5,    5,    5,    5,    5,    2,    0,    4,
    2,    3,    3,    2,    2,    3,    3,    2,    1,    2,
    4,    3,    2,    2,    2,    2,    3,    1,    3,    3,
    3,    2,    2,    4,    4,    5,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    1,    1,    1,    0,    2,    2,    0,    1,    2,    2,
    2,    2,    2,    1,    3,    7,    1,    0,    1,    0,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    2,    2,    1,    1,    1,    1,    4,    5,    1,    3,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    4,    4,    6,
    5,    3,    0,    2,    2,    0,    3,    0,    4,    1,
    5,    4,    1,    4,    1,    2,    2,    1,    1,    1,
    2,    2,    2,    2,    1,    0,    3,    5,    1,    1,
    2,    3,    1,    2,    3,    0,    1,    1,    1,    5,
    5,    6,    3,    2,    1,    0,    2,    0,    1,    0,
    3,    1,    0,    1,    2,    1,    1,    1,    1,    2,
    2,    1,    2,    3,    1,    1,    3,    3,    1,    2,
    3,    1,    2,    0,    2,    1,    1,    0,    1,    1,
    1,    3,    2,    3,    0,    1,    3,    4,    3,    1,
    3,    4,    3,    0,    1,    3,    3,    3,    1,    1,
    0,    3,    0,    2,    0,    9,    1,    1,    1,    1,
    1,    3,    1,    2,    3,    2,    1,    3,    1,    1,
    6,    3,    3,    2,    3,    0,    1,    3,    1,    1,
    1,    2,    1,    1,    1,    2,    1,    2,    1,    2,
    0,    3,    0,    1,    3,    1,    1,    3,    2,    0,
    2,    0,    2,    0,    3,    5,    0,    2,    0,    4,
    1,    2,    1,    1,    0,    1,    3,    2,    1,    1,
    2,    1,    4,    2,    1,    3,    8,    5,    1,    3,
    1,    1,    4,    4,    4,    1,    1,    5,    5,    1,
    3,    3,    1,    1,    7,    7,    5,    3,    0,    1,
    1,    1,    2,    0,    1,    1,    1,    0,    3,    1,
    3,    1,    3,    3,    1,    1,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    1,    1,    5,    6,    3,    4,
    5,    6,    3,    4,    3,    4,    3,    4,    4,    5,
    4,    4,    3,    4,    3,    3,    8,    8,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    1,    1,    3,    1,
    1,    1,    1,    1,    4,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    1,    1,    3,    3,    3,    3,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    1,    1,    1,    1,
    2,    1,    4,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    6,    4,    6,    6,    4,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,  517,  518,  519,    0,  570,  661,  662,
  666,  667,  427,    0,    0,    0,    0,    0,    0,  371,
  525,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,   89,    0,  816,    0,   18,  814,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  441,    0,    0,   34,   31,   33,
    0,   32,    0,  866,    0,    0,    0,    0,   29,   62,
   64,    0,    0,    0,    0,    0,    0,    0,    0,  524,
  848,  587,    0,  588,    0,    0,    0,  868,  611,    0,
    0,    2,    0,    0,    0,    0,  414,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  415,  416,    0,  397,  859,    0,  863,
    0,  378,  865,    0,  375,    0,  613,  869,    0,  374,
    0,  523,  812,    0,  137,   97,    0,    0,   98,    0,
  692,  203,    0,  695,    0,  862,   96,  132,    0,   92,
    0,   99,  818,    0,   93,    0,   94,  872,    0,   95,
  133,  100,  579,  580,    0,  817,  815,    0,  860,   70,
    0,    0,  858,  449,  442,    0,  448,  443,  444,  451,
  445,  446,  447,  452,    0,   27,    0,   36,  687,   35,
    0,    0,    0,    0,    0,  855,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  778,
    0,  850,    0,  780,    0,    0,    0,  776,  792,  791,
  790,    0,    0,    0,    0,  782,  783,  784,  793,  794,
  810,  811,    0,    0,  590,    0,    0,  808,    0,  796,
    0,    0,  777,  674,  781,  764,  763,    0,    0,  591,
    0,    0,  765,  760,  761,  762,  795,    0,    0,    0,
    0,    0,    0,    0,  542,  531,    0,  534,  536,  537,
  538,  539,  545,  546,    0,  867,  612,    0,    0,  571,
    0,  569,    0,    0,    0,    0,  428,    0,    0,  340,
    0,  206,    0,  379,  372,  425,  426,    0,    0,    0,
    0,    0,    0,  388,    0,  347,  348,    0,  529,  527,
  813,    0,    0,    0,    0,    0,    0,    0,  140,  119,
    0,    0,   90,    0,  108,  107,    0,    0,    0,    0,
    0,    0,  851,   71,    0,    0,    0,  663,  664,  450,
    0,    0,  322,  323,  317,    0,  321,  788,    0,  690,
    0,    0,   24,    0,    0,  870,    0,   67,   65,   63,
   30,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,  797,    0,    0,    0,    0,    0,    0,
  798,  799,    0,    0,    0,    0,    0,  871,  286,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  864,  594,    0,    0,  568,    0,  543,    0,  540,
    0,  541,  566,    0,  561,    0,    0,  535,    0,  670,
    0,  505,    0,    0,    0,  575,  572,    0,  172,    0,
    0,  116,  433,  159,  160,    0,  431,    0,    0,    0,
    0,  434,    0,  429,  342,    0,  383,  385,  384,    0,
  386,    0,  380,  204,    0,    0,  252,    0,    0,    0,
    0,  392,  393,    0,  418,    0,    0,    0,    0,    0,
    0,    0,  352,  351,  437,    0,    0,  136,    0,    0,
  145,    0,  144,    0,  151,  134,    0,  149,  152,  153,
  141,    0,    0,  471,  509,  476,    0,  510,    0,    0,
  477,    0,    0,    0,  500,  513,  470,  495,  472,  473,
  474,  475,  455,  342,  453,  454,  456,    0,    0,  465,
  466,  467,  468,  469,    0,    0,    0,    0,  694,  693,
    0,  111,    0,    0,  187,    0,    0,  340,    0,  206,
    0,    0,   79,    0,    0,  682,    0,    0,    0,    0,
    0,    0,    0,    0,  696,  700,  701,  702,  703,  704,
  705,  706,  707,  708,  709,  789,    0,    0,    0,  689,
   25,    0,    0,   41,   68,    0,    0,   23,    0,    0,
  658,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  840,  841,  842,  843,  844,  845,  846,  847,    0,    0,
  774,  775,  839,    0,    0,  854,  770,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  599,  600,    0,
    0,  592,  595,  779,  822,  521,    0,  820,  520,    0,
  544,    0,  552,  548,  547,    0,    0,    0,  563,  551,
    0,    0,  668,  669,    0,    0,    0,    0,    0,  582,
    0,    0,  117,    0,    0,    0,    0,    0,    0,  382,
    0,    0,  343,  387,  463,    0,  254,    0,  248,  250,
  340,  856,  225,    0,    0,  342,    0,    0,  195,  340,
    0,    0,    0,    0,  230,  224,  227,  228,  229,  391,
  423,  422,  390,  389,    0,    0,    0,    0,    0,    0,
  350,    0,  342,    0,  142,  146,    0,  150,    0,    0,
  496,  497,  514,    0,  511,    0,    0,  503,  501,  502,
    0,    0,    0,    0,  464,    0,    0,    0,    0,  504,
  340,    0,  186,    0,  189,  191,  192,    0,    0,    0,
    0,    0,  206,   74,    0,   81,   73,  852,  484,  485,
    0,    0,    0,  699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  319,  325,  326,  324,  691,    0,
    0,    0,    0,    0,    0,    0,   50,   57,   59,    0,
    0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  206,    0,  823,    0,    0,  835,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  838,  785,
    0,    0,    0,    0,    0,    0,  614,    0,    0,    0,
    0,    0,  522,  821,  553,  562,  557,  556,    0,  567,
  672,  671,  201,  577,  578,  576,    0,  168,  162,  169,
    0,  165,    0,    0,  164,    0,  175,  156,  155,  819,
  158,  157,  435,    0,  210,  207,  209,  211,  212,  213,
  381,  253,    0,  197,  342,  199,  343,  194,  200,    0,
    0,  231,    0,  394,  395,  342,  340,  343,    0,    0,
    0,  368,    0,  183,  184,  143,    0,    0,    0,    0,
    0,    0,  512,    0,    0,  342,  343,    0,  459,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,    0,    0,    0,    0,  329,    0,   78,    0,    0,
    0,    0,   82,   80,    0,    0,  857,  665,    0,    0,
  710,    0,    0,    0,  736,  735,    0,    0,    0,  743,
  753,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  698,    0,   61,   54,   55,   60,   56,    0,    0,
   19,    0,    0,    0,   39,    0,    0,    0,  676,  659,
    0,  675,    0,    0,    0,    0,  829,  828,    0,    0,
  825,  824,    0,  833,  832,  831,  830,  827,  826,    0,
    0,    0,  602,    0,  609,    0,  607,  603,    0,  620,
  616,  618,    0,    0,    0,    0,  559,  560,  564,    0,
    0,    0,    0,    0,    0,  176,    0,    0,    0,    0,
  257,    0,    0,    0,  232,    0,  419,  420,  396,    0,
    0,    0,    0,    0,    0,  342,  439,  343,  853,  154,
    0,    0,  479,    0,  478,  515,    0,  507,    0,    0,
    0,  457,    0,  487,    0,    0,  489,  492,  494,    0,
    0,  106,    0,  190,  342,    0,    0,  341,    0,   91,
    0,  104,    0,   87,    0,    0,    0,    0,    0,  751,
  752,    0,    0,    0,    0,  809,  800,  803,  801,    0,
    0,  802,  754,    0,    0,    0,    0,    0,    0,    0,
  744,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,   58,   51,   52,
   20,  680,  681,    0,  678,  685,  686,  683,    0,  657,
    0,    0,  205,  834,  836,  837,    0,    0,  605,    0,
    0,    0,  624,  627,    0,    0,    0,    0,  170,  166,
    0,    0,  181,  177,  343,    0,    0,  343,  258,    0,
    0,    0,  216,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  436,  481,    0,  482,    0,  121,    0,
    0,    0,  125,  127,  128,  129,  460,  462,  458,  491,
  343,    0,    0,    0,    0,  327,    0,  330,  342,   83,
    0,    0,   85,    0,    0,    0,    0,    0,    0,  756,
    0,  755,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,  660,    0,  608,    0,    0,    0,    0,  633,
    0,  586,    0,  161,  178,  131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  261,  264,  260,    0,    0,  269,  270,  271,  272,  275,
  277,  247,    0,  193,  217,    0,    0,    0,  222,  218,
  221,    0,  343,  366,  367,  363,  362,  365,  364,    0,
  480,  508,  130,  118,  126,  246,  113,  343,    0,    0,
  344,  331,    0,    0,   86,   75,    0,  722,  730,    0,
  804,  807,  805,  806,  723,  731,  726,  734,    0,    0,
  724,  732,  725,  733,  719,  727,  720,  728,  721,  729,
  677,    0,    0,  628,  625,    0,  641,  643,    0,  638,
    0,  171,    0,    0,    0,    0,  279,    0,    0,    0,
  278,    0,  267,  273,    0,  276,  262,    0,  265,    0,
  308,  266,  196,  219,  223,    0,    0,  234,  370,  346,
    0,    0,    0,  336,  337,    0,    0,   72,   88,    0,
  758,  635,    0,  642,    0,  259,  268,    0,    0,    0,
    0,  274,    0,  302,    0,  301,  316,    0,    0,    0,
    0,  311,  263,  309,    0,    0,  233,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  649,    0,
    0,    0,    0,  295,  294,  296,    0,  293,    0,  281,
    0,    0,    0,  285,    0,  315,  861,  314,  313,    0,
    0,  220,    0,    0,    0,  238,    0,  237,  339,    0,
    0,    0,  105,    0,  636,  651,  640,    0,    0,  652,
    0,  648,    0,    0,    0,    0,    0,    0,    0,    0,
  303,  304,  310,  312,    0,    0,  242,  241,  240,    0,
  332,    0,  647,    0,  654,  288,    0,    0,  280,  299,
  298,  300,  297,    0,    0,    0,  305,  245,  243,  244,
    0,  757,    0,    0,    0,  306,  282,    0,    0,    0,
  653,  291,  283,  656,
};
static short yydgoto[] = {                                      17,
   18,   19,   20,   21,   22,   23, 1327,   25,   26, 1328,
   28,   29,   30, 1329,   32, 1330,  576,   95,  382,  825,
 1031,   96,  603,  826,   97,  387,  608,  119,   98,   99,
  218,  655,  109,  827,  828,  159,  189,  829,  100,  101,
  389,   72,  200,  364,  269,  571,  971,  270,  786,  543,
  452,  765,  572,  573,  574,  973,  201, 1192,   64,  149,
   65,  195, 1573, 1140,  180,  185,  187,  190,  177,  166,
  169,  182,  192,  379,  219,  715,  476,  583,  911,  357,
  563,  959, 1132,  509,  668,  936,  461,  462,  491,  351,
  544,  947, 1251,  686,  906, 1252, 1253, 1254, 1255, 1256,
  584,  178,  167,  347,  516,  348,  349,  517,  518,  519,
  520, 1110,  901,  464,  465,  891,  889,  466,  895,  890,
 1080, 1219,  896,  897, 1085,  359,  774,  775,  776,  777,
  717,  703, 1231,  545,  719,  171,  480,  647,  272,  485,
 1050,  373,  273,  274,  275, 1232, 1233,  494, 1350, 1477,
  725,  726,  713,  727,  728,  729, 1478, 1479, 1548,  329,
  489, 1089, 1331,  155,  486,  487, 1090, 1091, 1332, 1333,
 1334, 1430, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1497,
 1535, 1465, 1538,  276,  419, 1499,  978, 1431, 1471, 1472,
 1508,  375,  376,  277,  964, 1138, 1266,  965,  966,  113,
  278, 1370,  368,  872, 1076, 1312, 1442, 1443, 1444, 1445,
  870,  338,  505,  743, 1107,  506,  741,  183,   50,  333,
  160,  126,  316,  146,  323,  152,  324,  334,  733,  335,
  502,  928,  147,  317,  473,  507, 1108,   85,  157,  204,
  546,  547,  705,  948,  706,  949,  950,  550,  551,  552,
  553,  554,  941,  790,  555,  556,  557,  758,  558,  454,
  755,   34,   35,   36,   52,  162,  340,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  674,  444,  879, 1079,
  445,  446,  679,   37,  125,  312,   38,  455,  456,  690,
  429, 1217,  114,  279,  280,  281,  433,  656,  657,  658,
  659,  864,  282, 1066, 1067, 1212, 1213,  283, 1310, 1489,
 1411, 1490, 1491, 1492, 1532, 1574, 1041,   39,   40,  369,
   41,   42,  451,  834, 1039, 1194, 1198,  174,  585,  586,
  587,  588,  589,  590,  591,  592,  593,  594,  595, 1160,
  988,  990, 1161,  417,  284,  285,  286,  645,  287, 1162,
  197,  639,
};
static short yysindex[] = {                                   5317,
 2108,  141, 2560,   91,  850,  296, 2726,  406, 1631,  -71,
  558, 2332,  141,  595,  421,  395,    0,  778,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -184,    0,    0,    0,
    0,    0,    0, 4371,  428,  484,  500,  395,  506,    0,
    0,  586,  962,  537,  428,  539,  500,  564,  395,  506,
    0,  612,  620,    0,  486,    0,  646,    0,    0,  797,
  668,    0,  395,  672,  428,  822,  668,  484,  500,  564,
  395,  506,  612,  620,    0,  500,  750,    0,    0,    0,
 1126,    0, 1126,    0,  894,  909,  114, 1261,    0,    0,
    0,  860,  395,  860,  955,  964,  979,   58, 2261,    0,
    0,    0, 5543,    0,  539, 1065,  684,    0,    0,  995,
  969,    0, 1158, -174, 1130,  408,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  873,    0,    0,  962,    0,
  384,    0,    0, 1430,    0, 1183,    0,    0,  505,    0,
 1056,    0,    0, 1030,    0,    0,  903,    0,    0, 1229,
    0,    0, 1455,    0,  962,    0,    0,    0, 1430,    0,
  -79,    0,    0, 1191,    0, 1198,    0,    0, 1126,    0,
    0,    0,    0,    0, 1172,    0,    0, 1057,    0,    0,
 1199, 1069,    0,    0,    0, 1057,    0,    0,    0,    0,
    0,    0,    0,    0, 1156,    0,  537,    0,    0,    0,
  976, 1134, -223,  620, 1025,    0, 1200, 1126, 1226, 1233,
  976, 1161, -223, 1188, 1202, 1548, 1552, 1553, 1132,    0,
 1565,    0, 1571,    0, 1572, 1573, 1580,    0,    0,    0,
    0,    0, 1581, 1165, 1177,    0,    0,    0,    0,    0,
    0,    0, 6244, 6244,    0, 5686, 1167,    0, 1594,    0,
 1782, 1549,    0,    0,    0,    0,    0, 1325, 1606,    0,
 -147, 1608,    0,    0,    0,    0,    0, 1215,  484, 1300,
 1225,  376,  395, 1268,    0,    0,  684,    0,    0,    0,
    0,    0,    0,    0,  537,    0,    0, -227, 1260,    0,
 1263,    0, -122, 1310, 1036,  408,    0, 1419,  698,    0,
  860,    0,  873,    0,    0,    0,    0,  860, 1296, -162,
 1240, -154, 1669,    0, 5382,    0,    0,  403,    0,    0,
    0, 1653, 1653,  962, 1346,  962, 1560,  903,    0,    0,
 6792,   56,    0, 1296,    0,    0, 1436,  416, 1689,  395,
 1466,  484,    0,    0, 1695,  129, 4286,    0,    0,    0,
 1018, 1384,    0,    0,    0, 1692,    0,    0,  189,    0,
  395, 1302,    0,  500, 1286,    0,   84,    0,    0,    0,
    0,  395, -192,  395,    0, 1427,  500, 1705,  976, 1347,
  711, 5784,  572,    0,  539, 6244,  900,  973, 1160, 2460,
    0,    0,  753,  753,  595, 1343, 1712,    0,    0, 5923,
 1297, 6244, 6244, 6244, 6244, 6244, 6244,   15, 1304, 5784,
 1298,    0,    0,   77,   16,    0, -175,    0, -187,    0,
 -187,    0,    0, 1716,    0,  108, 1332,    0, 1713,    0,
   24,    0, 1493, 1493, 1732,    0,    0, 1396,    0,   69,
 1432,    0,    0,    0,    0,  962,    0, 1653, 1653, 1653,
 1653,    0, 1750,    0,    0, 1514,    0,    0,    0, 1496,
    0, 6792,    0,    0, 6792,  380,    0, 1430, 1535, 1339,
 6478,    0,    0, -120,    0, 1339,  305, 1183,    0, 1403,
 1366, 1340,    0,    0,    0,  618, 1408,    0, 1349,  564,
    0,  962,    0, 1536,    0,    0, 1560,    0,    0,    0,
    0,   90, 1367,    0,    0,    0, 1382,    0, 1414, 1777,
    0, 1481, 1792,  -62,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1742,   68,    0,
    0,    0,    0,    0,  117, 1796, 1800, 1792,    0,    0,
 1585,    0,  962,  962,    0, -162,  505,    0, 1467,    0,
 1441, 1810,    0, 6644,   73,    0, 1465, 1476, 1822, 4460,
 1827, 4320, 6600,  341,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  853, 1384,  537,    0,
    0, 1145, 1431,    0,    0, 1407, -223,    0, 1555, 1834,
    0, 1555, 1145, 1554, 1557,  500, 6244, 6244, 1617, 6244,
 1842, 6244, 1843, 1412, 6244, 6244, 6244, 6244, 6244, 6244,
    0,    0,    0,    0,    0,    0,    0,    0, 1577, 6244,
    0,    0,    0, 1782, 1196,    0,    0, 1619,  753,  753,
  495,  495,  173,   15, 1861, 1862,  528,    0,    0, 4460,
 1576,    0,    0,    0,    0,    0, -231,    0,    0, -103,
    0, 1463,    0,    0,    0,  395,  924,  395,    0,    0,
 5784,  537,    0,    0, 1297,  486,  486, -227,  537,    0,
  962,  962,    0, -133, 1349, 1349, 1458,  564, 1036,    0,
 1874, 2432,    0,    0,    0, 1638,    0,  860,    0,    0,
    0,    0,    0, 1645, 1881,    0, 1496, 1635,    0,    0,
 1578, 1582, 1126, 1647,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  564,  860, 6709, 1542, 1561, 1562,
    0,  564,    0,  829,    0,    0, 1503,    0,   13, 1538,
    0,    0,    0,  564,    0, 1777,  124,    0,    0,    0,
 1652,  124, 1541,  124,    0, 1921,  564,  564,  564,    0,
    0, 1605,    0, 1390,    0,    0,    0,  403, 1550,  395,
 1456,   71,    0,    0, 1939,    0,    0,    0,    0,    0,
  129, 1519, 1260,    0, 1260, 6514,   44, 6244, 6244, 4603,
 1941, 1119, 4754, 6244, 4838, 1012, 4991, 5073, 6063, 5226,
 5308, 5461, 4460, 4460,    0,    0,    0,    0,    0, 1286,
  500,  506, 1286,  612,   89, 1940,    0,    0,    0, 1145,
 1600,    0, -144, 1620, 5784, 1620, 1950, 1940, 1145, -158,
 1674, 1497, 1540,    0, 1630,    0, 1679, 6244,    0, 1748,
 1975, 1984, 2037, 2053, 2242, 6244,  889, 6244,    0,    0,
  528, 1955, 5784,  969,   15, 1609,    0, 1611, 1616, 1663,
 1734, 1680,    0,    0,    0,    0,    0,    0, -211,    0,
    0,    0,    0,    0,    0,    0, 1969,    0,    0,    0,
 1510,    0, 1653, 1749,    0, -133,    0,    0,    0,    0,
    0,    0,    0, 4460,    0,    0,    0,    0,    0,    0,
    0,    0, 1723,    0,    0,    0,    0,    0,    0, 1126,
 1126,    0, 1990,    0,    0,    0,    0,    0,  345,  -60,
  608,    0, 1768,    0,    0,    0, 1574,   91, 1524, 1610,
 1638, 1997,    0, 1349, 1529,    0,    0, 1060,    0, 1987,
 1574, 1149,  564, 2001, 2015, 2017, 1723, 1653, 1432, -162,
    0, 1408,  595, 1618, 1624,    0,   30,    0,  564, 1665,
 1761, 6644,    0,    0,  564, 1762,    0,    0, 2040, 2046,
    0, 1097, 1782, 2050,    0,    0, 1782, 2051, 1671,    0,
    0, 1740, 2057, 1782, 2059,  911, 2061, 1782, 2063, 6244,
 6244, 1941, 6244, 6135, 2067, 1782, 2068, 2071, 1782, 2074,
 6244, 1782, 2084, 1782, 2085, 2086, 1782, 2087, 2088, 1782,
 2092,    0, 1854,    0,    0,    0,    0,    0, 1813, 1145,
    0, 1145,   89, 1940,    0,  105,  105,   -3,    0,    0,
 1530,    0, 1950, 1940, 2099, -158,    0,    0, 6792, 2103,
    0,    0, 2387,    0,    0,    0,    0,    0,    0, 2471,
 1304, 1782,    0, 1782,    0, 1591,    0,    0,  528,    0,
    0,    0,   15, 1684, 4460, 1658,    0,    0,    0, 1724,
  962, 1758, 1349, 1759, 1349,    0,  329, 1703, 1885, 1723,
    0, 6244, 1872, 1755,    0, 4460,    0,    0,    0, 1778,
 1780, 1781, 1785, 1787, 1788,    0,    0,    0,    0,    0,
 2136,   91,    0, 1458,    0,    0,  124,    0, 2432, 1805,
  124,    0,  124,    0, 1638, 2144,    0,    0,    0, 1885,
 1349,    0, 1432,    0,    0, 5543, 1911,    0, -107,    0,
 1969,    0, 2150,    0, 2151,  962, -150, 2155,  962,    0,
    0, 6244, 1773, 1773,  595,    0,    0,    0,    0, 2156,
 1592,    0,    0, 1773, 1773, 6244, 1773, 1773, 1602, 1782,
    0, 1081, 6244, 1782, 1773, 1773, 1773, 1773, 1782, 1773,
 1773, 1773, 1773, 1773, 1773, 1812,    0,    0,    0,    0,
    0,    0,    0, 1764,    0,    0,    0,    0, 5784,    0,
 -158, 2099,    0,    0,    0,    0, 1576, 5784,    0,  774,
 1922, 2160,    0,    0,  341, 2166, 1811, 1653,    0,    0,
  962,  829,    0,    0,    0,  537, 5085,    0,    0, 1782,
 1493, 1872,    0,  810,  395,  389, 1766, 1873, 1771, 1909,
 1876, 1914, 1723,    0,    0, 2178,    0, 2180,    0, 1870,
 1493, 1805,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  829, 1768, 1901, 1838,    0, 1550,    0,    0,    0,
 1853, 1879,    0, 1638, 1858, 1782, 2185, 2191, 6244,    0,
 1844,    0, 2198, 2199, 1782, 2200, 2201, 6244, 6244, 1782,
 2206, 2207, 2208, 2213, 2216, 2217, 2218, 2225, 2227, 2228,
    0,  105,    0, 1680,    0, 4460, 1297, 1684, 1349,    0,
  643,    0, 1349,    0,    0,    0, 6792,  428,  382, 2212,
 1260, 2238, 1945, 6244, 2223, 2250, 2234, 2241, 1960, 2246,
    0,    0,    0, 4034, 2254,    0,    0,    0,    0,    0,
    0,    0, 2268,    0,    0, 1961, 1971,  395,    0,    0,
    0, 1126,    0,    0,    0,    0,    0,    0,    0, 1885,
    0,    0,    0,    0,    0,    0,    0,    0,   42, 1304,
    0,    0, 6244,  962,    0,    0,  962,    0,    0,  889,
    0,    0,    0,    0,    0,    0,    0,    0, 1782, 1782,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1811,  341,    0,    0, 1039,    0,    0, 1951,    0,
 2281,    0, 2263, 2273,  500, 6244,    0, 1986, 4460, 1893,
    0, 4460,    0,    0,   23,    0,    0,  567,    0,  -17,
    0,    0,    0,    0,    0, 1126, 1952,    0,    0,    0,
   42, 2293,  528,    0,    0, 1576, 1782,    0,    0, 1304,
    0,    0, 1349,    0,  583,    0,    0, 1892, 2299,   23,
  589,    0,  591,    0,  176,    0,    0,  428, 1882,   91,
   60,    0,    0,    0, 1952,  321,    0, 1963, 1965,  528,
 2315,   42, 2013, 1680, 2318, 1576, 2319,  395,    0, 2321,
 2320, 1020, 2149,    0,    0,    0, 1956,    0, 2322,    0,
   55, 1927, 2064,    0,   23,    0,    0,    0,    0, 5085,
  567,    0, -172, -172, 2066,    0, 1928,    0,    0,  528,
   42, 1811,    0, 1680,    0,    0,    0,  583, 2330,    0,
  484,    0, 1644,   31, 2316, 2149, 2082, 2072, 5085, 5085,
    0,    0,    0,    0, 1916,  459,    0,    0,    0, 1166,
    0, 1811,    0,  484,    0,    0,   23, 2338,    0,    0,
    0,    0,    0, 1519, 5085, 2075,    0,    0,    0,    0,
 4460,    0, 2341, 2346, 1650,    0,    0, 5085,  341,  484,
    0,    0,    0,    0,
};
static short yyrindex[] = {                                      0,
    0,  137,  635,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  944, 5604,    0,    0,    0, 2389,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  695,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  948,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2052,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2007,    0,    0,    0,
   39,    0,   39,    0,    0,    0,    0, 2009,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  950,    0,    0,    0,
  724,    0,    0,    0,  264,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -78,    0,    0,    0,    0,  400,    0,
 1024,    0,    0,    0,    0,    0, 1369, 1250,    0, 6875,
    0,    0,    0,    0,    0,    0,    0,    0,  -78,    0,
 -167,    0,    0, 2354,    0,    0,    0,    0, 2132,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1071,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1095,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    8,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1516,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  178, 1622,    0,    0,    0,    0,    0,    0, 2078,    0,
   83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  388,    0,    0, 1098,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1117,    0, 2122,    0,    0,
    0,    0, 1136,    0,    0,    0,    0,    0, 2138,  706,
 5837,    0, 1146,    0,    0,    0,    0,  210,    0,    0,
    0, 1947, 1947,    0,    0,    0, 1150, 1869,    0,    0,
    0,    0,    0, 2138,    0,    0, 1000,    0,    0,    0,
    0,    0,    0,    0, 6561, 2014,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1217,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1243,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1245,    0,    0,
 6383,    0, 6383,    0,    0,    0, 6383, 6383, 6383,    0,
    0,    0, 2236, 2381, 6383,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  381,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  390,    0,
  390,    0,    0,  676,    0,  849,  930,    0,    0,    0,
 1071,    0,  905,  905,  758,    0,    0,  283,    0, 4633,
   92,    0,    0,    0,    0,    0,    0, 1947, 1947, 1947,
 1947,    0,  101,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,    0,    0, 2145,    0,    0,
    0,    0,    0, 2122,    0,    0,  843,    0,  615, 1942,
    0,    0,    0,    0,    0,    0,  164,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1257,    0,    0,    0,
    0, 4213, 3915,    0,    0,    0, 3927,    0,    0, 4096,
    0,    0, 4127,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2187, 2407,    0,
    0,    0,    0,    0, 4158, 4012,    0, 4127,    0,    0,
    0,    0,    0,    0,    0,  706, 1048,    0,    0,    0,
    0, 1999,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  213,    0,
    0,  213,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1194,    0,    0,    0, 1725, 2491, 2686,
 1931, 2076,    0,    0,   53,  653,  563,    0,    0,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -198,    0,    0,    0,
    0,    0,    0,    0,    0,  358,  358,    0,    0,    0,
    0,    0,    0, 5001,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   88,    0,    0,    0,    0,
    0,    0,    0, 2375,    0,    0, 3374,  981,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  288,  325,  328,
    0,    0,    0, 1880,    0,    0,    0,    0,    0, 1763,
    0,    0,    0,    0,    0, 4096,    0,    0,    0,    0,
  655,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  209,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6727,    0,    0,    0,    0,    0,    0,    0,    0,
 2106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1264, 1265,    0,    0,    0,    0,
    0,    0,    0, 1275,    0, 1275, 1279, 1290,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2079, 1185,    0,  842,    0, 2083,    0, 2089, 2091,    0,
    0,  360,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  357,    0,    0,    0,
    0,    0, 1947, 1972,    0, 5130,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2173,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1306,    0,    0,    0,    0,    0,    0,    0,
 4244,    0,    0,    0,    0,    0,    0,    0,    0, 1352,
    0,    0,    0,    0,    0,    0, 2173, 1947, 1314,  706,
    0, 2183, 5604, 1319,   54,    0,    0,    0,    0, 6727,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  661,    0,    0,    0, 1368,    0,    0,    0,
    0,    0,    0, 2637,    0, 2799,    0, 2841,    0,    0,
    0,    0,    0,    0,    0, 2883,    0,    0, 2947,    0,
    0, 2996,    0, 3060,    0,    0, 3149,    0,    0, 3198,
    0,    0, 3710,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1264, 1333,    0, 2012,  216,    0,    0,    0,
    0,    0, 1335, 1362, 1376,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  634, 1312,    0, 1661,    0,    0,    0,    0, 1078,    0,
    0,    0,    0,    0,    0,  844,    0,    0,    0, 3112,
    0,    0,    0, 1991,    0,    0,    0,    0,    0, 2181,
    0,    0, 1484,    0,    0,    0,    0,    0,    0,  348,
  351,  352,  355,  543,  613,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  697,
    0,    0,    0,    0, 2438,    0,    0,    0,    0,    0,
    0,    0, 1379,    0,    0,    0,    0,    0,    0,    0,
 1391,    0,    0,    0,    0,    0,  115,    0,    0,    0,
    0,    0,    0,    0, 6383,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3262,
    0, 3304,    0, 3346,    0,    0,    0,    0, 3436,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1399,    0,    0,    0,    0,   37,    0,    0, 2079,
  138,  577,    0,    0,  199,  929,  806, 1947,    0,    0,
    0, 4626,    0,    0,    0,    0,    0,    0,    0, 2413,
 1028, 1775,    0, 2122,    0,    0,    0,    0,    0,    0,
    0,    0, 2173,    0,    0,    0,    0,    0,    0,    0,
 1402,  779,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  261,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0, 3459,    0,    0,    0,    0,
    0,    0,    0,    0, 3508,    0,    0,    0,    0, 3597,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  216,    0,   36,    0,    0,    0,    0,    0,    0,
 2418,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  767,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  405,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3661, 3681,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2420,  884,    0,    0,    0,    0,    0, 2419,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2884, 1190,    0,    0,    0,
    0,  116,  277,    0,    0,  107, 2413,    0,    0,  634,
    0,    0,    0,    0, 2418,    0,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3831,    0,    0, 3835, 3866, 2079,
 1281,    0,    0,  131,    0,   37,    0, 1108,    0,    0,
 2421,    0,    0,    0,    0,    0, 2409,    0,  142,    0,
 2164,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  759,
    0,   64,    0,   36,    0,    0,    0, 2418,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2079,
    0, 2420,    0,    0,    0,    0,    0, 2411,    0,    0,
    0,    0,    0,    0,    0, 4709,    0,    0,    0,    0,
    0,    0, 2430,    0,    0,    0,    0,    0, 1357,    0,
    0,    0,    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2476,    0,    0, 2478,
    0,    0,    0,   11,    0, 2480,   -1,  781,  -91, -550,
 1448,  808, -275, -499, 2472, 2252,    0,  -28,    0, 2258,
  -86,  -41,    0, -365, -838,  -32,  -50, -171, 2262,  155,
 1886,    0,    0,    0,  392,    0,    0,  -34, 1515, -426,
  -29, -854, 1919, 1709, -274, 1525, 2417, -293,    0,  -51,
    0,  626,  -44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -581,  122, 1532, -464,   63, -852,    0,
    0,    0,    0, -325, -484, -254, 1537, -312,  -42,    0,
 -449,    0,    0, -427, 1385,    0, 1249,    0,    0, -145,
 -565,  -25,    0,    0,    0,    0, 2157,    0, 1992, 2190,
 -256, 1556, -670,    0,    0,    0, -643,    0,    0,    0,
    0,    0,    0, 1614,    0,    0,    0, 1559, 2193, 2194,
    0, 1798,    0, -459, 1802,  -30,   52, -644,  -45,    0,
    0, -577, -656, -207, -646,    0, 1294, -826,    0, 1052,
 1299,    0, 2034,    0,    0,    0, 1059, 1061, 1026,  -73,
 2188, -866, -968,    0,    0, 1833,    0, 1454, -548,    0,
    0,    0, -236,    0,    0,    0,    0,    0,    0,    0,
    0, -743,    0,   74,    0, 1053,  985, 1115,    0, 1043,
    0,    0, 2184, -202,    0,    0,    0,    0, -932, -378,
 1423,    0, -415, -778,-1211,-1248,    0, -323, 1121,  709,
 -388, 1993, 1789, 1607, 1308,    0,    0,    1,    0,    0,
    0,    0,    0, 2239,    0,    0, 2253, 2093,    0,    0,
    0,    0,    0, 2257,    0,    0,    0,    0,  -15,    0,
    0,    0, -307, 1817, -304, 1461, -396,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2025,    0,    0,
 1830,    0,    0,    0, 2574,    0,    0,    0,    0, 2292,
    0,    0,    0,    0, 2153,    0, 2152,    0,    0,    0,
 1918,    0,    0,    0,    0,    0,  -84,    0, 1910,    0,
 -814,    0, 1337,    0, 2171, -380, 2172,    0, -549, 1948,
    0,    0,  -54,    0, 1397,    0, 1311, -964,    0, 1293,
    0, 1086,    0, 1118,    0, 1038,    0,    0,    0, 2170,
    0,    0,    0, 2010, 1790, -953,    0, -191,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1904,
  848, 1623,    0,    0,    0,    0, -205, 2205, 2256, 1358,
    0,    0,
};
#define YYTABLESIZE 7368
static short yytable[] = {                                     173,
  121,  151,   68,  175,   69,  154,  220,  374,  172,  378,
   31,  170,  377,  661,  794,  179,  797,  510,  165,  156,
  816,  619,  704,  205,  744,  707,  687,  186,  181,  724,
  184,  718,  213,  208,  515,  683,  640,  209,  669,  310,
  883,  716, 1061,  548,  215,  908,  549,  482,  892,  212,
  210,  388,  606,  328,  654,  910,  938,  121,  472,  268,
  667,  388,  837,  639, 1093,  211,  307,  682,  450,  217,
 1557,  227,  577,  229,  228, 1099,  630,  623,  939,  761,
  267, 1441,  688, 1195,  981,  309, 1115,  488,  267,  288,
 1130,  430, 1402,  606, 1120,  208,  606,  559, 1505,  289,
  432,  224,  361, 1511,  861,  354,  623,  887,  692, 1214,
  970,  606,  328,  838,  325,  333,  431,   67,  559,  109,
 1228,  614,  639, 1272,  907,  490,  593,  607,  488,  749,
  630,  488, 1030,  496,   67,   67,  526,  626,  631,  396,
  353,  393,  695,  696,  697,  698,  488,  787,  693,   67,
  430,  678, 1267, 1451,  208,   84,  767,  224,  764,  432,
  560, 1261,  173,  369,  374,  623,  378,  268,  944,  377,
  820,  380,  477,   67,  333,  271, 1036,  673,  626,  631,
  439,  626,  874,  548,  488,  249,  549,  488,  355,  630,
  672, 1188,  383, 1190, 1077,  526,  626,  631,  629,  721,
  287,  102,  383,  123,  515, 1545, 1268,  558,  112,  438,
  898,  899,  679,  605,  759,  486,  858,  191,  673, 1505,
  385,  673,  369,  893,  457,   14,  459,  665,  750,  600,
  670,   66,  599,  168, 1504,  460,  673,  386,  214,  629,
  623, 1102,  560,   14,  436, 1078, 1546, 1022, 1023,  294,
  173,  916,  610,  173,  873, 1244,  124,  629,  558,  449,
  182,  673,  453,  583,  443,  860, 1234,  112,  438,  103,
 1259,  679, 1522, 1551,  486,  173,  334,  926,  933, 1033,
  722,  623,  585,  760,  172,  823,  356,  355, 1043, 1045,
  481, 1473, 1037, 1547,  109,  109,  894,  484,  168,  623,
  881,  497,  386, 1572,  500,  813,  226,  615,  611,  511,
  963,  513, 1552,  432,  714, 1069, 1273,  569, 1537,  182,
  334,  723,  583,  565,  353,  413,  414,  354,  416,  700,
 1034,  567, 1158,  249, 1372,  334,  441,  691, 1087, 1044,
  841,  585,  604, 1214,  763,  488,  355,  360, 1401,  430,
  361,  357,  601,  208,  356,  604,  584,  581,  432,  630,
  945,  488, 1188,  609, 1510,  612,   69, 1196,  623, 1225,
  383,  606, 1316,  664,  606, 1342, 1360, 1343,  233,  623,
  632,  606, 1103,  353,  606, 1141,  354,  549,  606,  554,
  817, 1439,  378,  606,  488,  818,  606,  488,  430,  349,
  630,  581,  208,  593,  632, 1234,  360,  432, 1366,  361,
  357, 1157,  606,  356,  710,  584,  581,  488,  630, 1376,
  709,  632,  688,  708,   84,  688,  677,  369, 1304, 1353,
  814,  694,  630,  623, 1428,  388,  606, 1220,  623,  632,
  606,  673,  903, 1247,  333,  882,  549,  333,  554,  606,
 1092,  289,  688,  488, 1040,  900,  626,  631,  349,  874,
  720, 1097,  908,  632,  271,  969,  606,  631,  624,  626,
  631,  900,  910,  438,  665,  153,  367,  746,  626,  631,
  745, 1119,  644,  168,  648,  649,  650,  651,  652,  644,
  168,  168,  271,  606,  909, 1202,  378,  976,  673,  488,
 1438,  666,  118,  623,  639,  606,  488,  972,  328, 1215,
  430,  173,  333,  606,  208, 1440,  226,  629,  639,  432,
  172,  575,   69, 1210,  488,  626,  631,  630,  772,  773,
 1236,   66,  208,  788,  626,  631,  575,  226,  606,  629,
  606,  907,  359, 1029,  173,  787,  526,  623,   66,   66,
  223,  355,  287,  819,  488,  488,  333,  112,  488,  623,
  575,  623,  597,   66,  766, 1450,  208, 1083,  333, 1049,
  333,  630,  623,  789,  604,   69,  622, 1314,  626,  631,
  679,  623,  665,  486, 1136,  630,  629,   66,  353,  365,
  813,  354,  626,  631, 1485,  629,   51,  370, 1222, 1203,
 1224,  359,  813,  597,  583,  334,  597,  438,  334,  182,
  488,  360,  358,  621,  361,  357,   73,  622,  356,  779,
  621,  597, 1513,  585, 1382,  626,  631,  173,  623, 1502,
  673, 1503, 1131,  173,  173,  622,  449,  623,  673,  629,
  326, 1243,  453,  380,  796, 1207, 1262,  443, 1024,  880,
  813, 1027,  596,  629,  122, 1065,  888,  888,  349,  439,
  745,  503, 1404,  349, 1187,  313, 1189, 1484,  902,  349,
 1263,  358,  504,  334,  632,  555,  581,  484,  630,  842,
  843,  623,  845, 1100,  847,  355,  629,  850,  851,  852,
  853,  854,  855,  596,  574,  972,  123,  584,  581,  632,
  630,  745,  857, 1381,  745,  925,  927, 1524,  979,  632,
  980,  596,  632,  122,  314,  814, 1501,  334,  327,  745,
 1248,  632,  353,  613,  120,  354, 1258,  814,  623,  334,
  549,  334,  554,  632,  555,  924,  632,  954,  955,  956,
 1403,  548,  932,  271,  549,  360,  115,  630,  361,  357,
  193,  967,  356,  574,  942,  123,  630,  573,  335, 1569,
  440,  336,  913, 1514,  564,  549,  688,  613,  632,  724,
  731,  919,  732, 1028,  421,  814, 1279,  632,  124, 1025,
  422,  202,  613,  378, 1415, 1429, 1159, 1101,  194, 1026,
 1558,   69,  106,  549,  425,  554,  549,  349,  554,  426,
  630,  632,  335, 1344, 1373,  639,  359,  688,   86, 1068,
  688, 1570,  549, 1575,  554,  441,  573,  335, 1303,  107,
  693,  632,  957, 1364, 1406,  688,  315, 1416, 1412, 1467,
  104,  111,  442, 1193, 1193, 1197,  122,  124,  549,  337,
  554,  604,  424,  634,  922,  632,  639,  630,  565,  866,
  813,  116,  813, 1461,  111,  118, 1463, 1413,  117,  632,
  982,  983,  987,  867,  639,  994,  996,  998,  632, 1006,
 1009, 1012, 1014, 1017, 1020,  620,  358,  163,  164, 1468,
 1495,  597,  604,  601,  634,  604,  424,  868,  148,  234,
 1469,  597, 1313,  815,  597,  622,  598,  271,  112,  102,
  604,  424,  634,  597,  202,  173,  621,  565,  622, 1104,
 1053,  909,  173,  378,  172, 1495,  235,  622, 1060,  738,
 1062,  380,  745, 1126,  601, 1064, 1407,  601,  637,  550,
  425,  423,  122,  424,  122,  426, 1111,  102,   69, 1144,
  359,  869,  601,  526,  150, 1148, 1105,  528,  202,  533,
  597, 1408,  425,  423, 1446,  424,  739,  426, 1561,  597,
  153, 1543,  632,  202,  622,  632,  158, 1315, 1487,  637,
  111,  596,  102,  622,  342,  814,  123,  814, 1098,  745,
  453,  596,  745,  226,  596,  478, 1407,  637,  550,  745,
 1566, 1567,  745,  596, 1470,  161,  745,  168,  479,  176,
 1065,  745,  526,  597,  745, 1579,  528, 1367,  533, 1409,
  358, 1408,  855,  574,  617,  597, 1577,  622,  555,  173,
  745,  453,   66,  530,  453,  226,  290,  202, 1211, 1583,
  632,  622,  421,  122, 1486,  574,   69,   69,  422,  453,
  596, 1094, 1095,  118,  745,  613,  888,  745,  745,  596,
  597,  414,  613,  555, 1483,  613,  342,  745,  124,  613,
  740,  291, 1169, 1170,  622, 1172, 1174,  613,  202, 1409,
  632,  202,  188, 1179,  745,  378,  573,  598, 1383, 1452,
   94,  555,  530,  613,  555,  855,  202,  335, 1142,  292,
  335, 1483,  293,  596,  320,  866, 1453,  532,  573, 1193,
  555,  745,  621, 1121,  196,  596,  226,  613,  294,  867,
 1246, 1271,   69,  745, 1275,  745,  376, 1480,  598,  198,
  613,  598,  425,  423,  639,  424,  555,  426,  199,  632,
  318, 1483,  203,  868,  295,  377,  598,  613,  425,  423,
  596,  424,  613,  426,  206,  373,  639,  226,  745,  147,
  688,  216, 1122,  320, 1230,  335,  532, 1306, 1520,  111,
  604, 1483,  634,  604,  613,  217,   70,   71,  421,  202,
  604,  173,  173,  604,  422,  376,  613,  604,  613,  319,
  172,  449,  604, 1317,  634,  604,  888,  869, 1346,  239,
  421,  565, 1121,  639,  377,  372,  422, 1550,  271,  335,
  371,  604,  601,  625,  373,  601, 1352,  202,  147,  428,
 1347,  335,  601,  335, 1276,  601,  318, 1348,  268,  601,
  934,  935, 1166,  202,  601,  604,  565,  601, 1285,  604,
  239,  634,  111,  239,  786, 1290,  859,  786,  604,  858,
  634, 1125,   40,  601,   48,  202,  639,  637,  239,  855,
 1496, 1349,  378,  173,  565,  604,  148,  565,  453,  342,
  453,  271, 1211,   38,   21, 1437, 1414,  601,  453,  637,
 1064,  601,  550,  565,  684,  318,  627,  221,   44,  173,
  601,  453,  604, 1000,  634, 1496,  786,  378,  449,   46,
  855,  320,  222,  855,  604,  867,  343,  601,  344,  565,
 1001,   40,   69,   48,  225,  440,  349,  550,  855,  321,
  855,  884,  885,  114,  468,  148,  637,  349,  345, 1436,
  226,  345,   38,   21,  601,  637,   88,  877, 1562,  604,
  378, 1418,   22,  684,   45,  550,  601,   44,  550, 1448,
  230, 1380, 1449,  322,  878, 1002,  346,  231,   46, 1475,
 1389, 1390,  787,  121,  550,  787,  338, 1529, 1152,  453,
  421,   47,  232,   90,  440,  469,  422,  714,  138,  637,
  173,  601,  114, 1458, 1003,   42,  421,  345,  115, 1464,
  550,  453,  422,  641,  425,  423, 1420,  424,  453,  426,
  103,   22, 1289,   45, 1530,  461,  598,  338,   43,  470,
  338,  202,  289,  173,  787,  173,  598, 1531,  714,  598,
  381,  714, 1494,  305, 1464,  338, 1506,  471,  598,  111,
   47,  621,  453,  163,  164,  121,  714,  138,  371,  306,
  961,  308,   91,  960,   42, 1447,  118,  115,  173, 1488,
  330, 1004,   92,  331,  461,  650,  268, 1494,  311,  103,
  173,  239,  849,  425,  423,  173,  424,   43,  426, 1541,
  202,  110,  110,  629,  449,  598,  121,   93, 1509,  328,
   69,  991, 1488,  820,  598,  249,  250,  251, 1459,  173,
  339,  173,  650,  214,  173,  173, 1555,  866, 1464,  332,
 1560,  341,  350,  449,  449,  650,  968,  992, 1466,  783,
  352,  867,  173,  259,  260,  121,  599,  358,  242,  362,
  173, 1464, 1488,  855,  855,  855,  360,  363,  598,  449,
  599,  367,  855,  173,  214,  868,  855,  214,  599,  855,
  598, 1498,  449, 1466,  855,  366,  384, 1047,  425,  423,
  392,  424,  214,  426,  599,  855,  394,  821,  855, 1571,
 1082,  395,  855, 1081,  855,  851,  855,  855,  855,  855,
  855,  867,  855,  397, 1113,  598, 1498, 1112,  855, 1118,
 1200,  399, 1117, 1199,  855,  855,  855,  855, 1542,  869,
 1048,  425,  423,  822,  424,  400,  426,  401,  823,  855,
  855,  402,  403,  404,  824,  855,  855,  855,  599,  855,
  855,  855,  336,  855,  405,  386,  855, 1466,  855, 1563,
  406,  407,  408,  249,  250,  251,  336,  163,  164,  409,
  410,  759,  421,  855,  336,  855,  411,  418,  422,  714,
 1466, 1209, 1282,  420, 1208, 1281,  254,  255,  412,  427,
  336,  259,  260,  425,  423,  428,  424,  138,  426,  430,
  995,  435,  999,  434, 1007, 1010,  855, 1015, 1018, 1021,
  855,  437,  759,  759,  759,  759,  759,  467,  759,  138,
 1051,  425,  423,  855,  424,  438,  426,   14,  338,  239,
  759,  759,  759,  759, 1556,  338,  714, 1536,  338,  714,
 1582,  421,  338, 1505,  336,  855,  714,  422,  138,  714,
  338,  610,  447,  714,  610,  458,  475,  488,  714,  495,
  855,  714,  498,  508,  759,  371,  338,  138,  512, 1052,
  425,  423,  562,  424,  769,  426,  138,  714,  566,  568,
  855,  855,  138,  268,  570,  598,  242,  618,  602,  622,
  338,  855,  855,  626,  628,  630,  386,  613,  607,  616,
  138,  714,  642,  338,  714,  714,  660,  646,  432,  676,
  680,  226,  483,  214,  714,  769,  769,  769,  769,  769,
  338,  769,  685,  681,  215,  688,  421,  855,  689,  855,
  459,  714,  422,  769,  769,  769,  769,  855, 1054,  425,
  423,  701,  424,  699,  426,  855,  702,  338,  711,  712,
  735,  855,  736,  483,  855,  742,  483,  665,  714,  338,
  737,  338,  747,  753,  751,  215,  754,  769,  215,  421,
  714,  483,  714,  425,  423,  422,  424,  855,  426,  752,
  756,  757,  762,  215,  855,  768,  855,  855,  468,  769,
  855,  249,  250,  251,  855,  163,  164,  855,  771,  855,
  780,  855,  782,  783,  791,  714,  855,  855,  792,  855,
  514,  793,  226, 1288,  254,  255,  795,  830,  139,  259,
  260,  831,  833,  835,  839,  855,  855,  840,  855,  182,
  844,  421,  846,  759,  226,  759,  848,  422,  371,  469,
   87,  226,  855,  759,  855,  855,  855,  856,  421,  855,
  863,  759,  855,  855,  871,  865,  268,  759,  459,  421,
  759,  875,  855,  904,  763,  422,  900,  460,  914,  714,
  915,  937,  920,  470,  923,  226,  921,  139,  929,  855,
  772, 1493,   88,  759,  425,  423,  371,  424,  182,  426,
  759,  471,  759,  759,   89,  855,  759,  930,  931,  267,
  759, 1462,  946,  759,  940,  759,  855,  759,  421,  951,
  953,  958,  759,  759,  422,  759,  239,  963,  855,   90,
  855,  772,  772,  772,  772,  772,  855,  772,  975,  977,
  989,  759,  759, 1032,  759, 1035,  769, 1038,  769,  772,
  772,  772,  772, 1030, 1046, 1063,  769, 1070,  759, 1071,
  759,  759,  759,  855, 1072,  759, 1073, 1074,  759,  759,
  769, 1075,  599,  769, 1084, 1055,  425,  423,  759,  424,
  483,  426, 1088,  772, 1056,  425,  423,  421,  424, 1096,
  426, 1106, 1114,  422, 1109,  759,  769, 1116,   91,  483,
  483, 1127,  483,  769, 1123,  769,  769,  483,   92,  769,
  483,  759,  226,  769,  215, 1128,  769, 1129,  769,  969,
  769,  421,  759,  483, 1139,  769,  769,  422,  769,  483,
 1146, 1149, 1137,   93,  759,  773,  759, 1057,  425,  423,
 1150,  424,  759,  426,  769,  769, 1151,  769, 1155, 1153,
 1154,   94, 1163, 1058,  425,  423, 1164,  424, 1165,  426,
 1167,  769, 1168,  769,  769,  769, 1175, 1176,  769,  759,
 1177,  769,  769, 1178, 1156,  813,  773,  773,  773,  773,
  773,  769,  773, 1180, 1181, 1182, 1183, 1184,  249,  250,
  251, 1185,  163,  164,  773,  773,  773,  773,  769,  239,
 1186,  483, 1201, 1204,  252, 1216, 1218,  139, 1221, 1226,
 1223,  254,  255,  226,  769, 1227,  259,  260,  182,  490,
  261,  262, 1235,  483, 1237,  769, 1238, 1239,  773,  139,
  483, 1240,  421, 1241, 1242,  226, 1245,  769,  422,  769,
  182,  483,  226, 1250, 1260,  769,  463,  239, 1265, 1269,
 1155, 1270,  772,  371,  772, 1274, 1280, 1301,  139,  483,
 1302, 1307,  772, 1308,  483, 1309,  267, 1311, 1354,  182,
 1357, 1355,  769, 1356, 1358, 1359,  226,  139, 1361,  772,
 1362, 1369, 1363, 1371, 1374, 1378,  139,  463,  182, 1377,
  463, 1379,  139,  483, 1375,  767,  182,  182, 1385, 1386,
 1387, 1388,  772,  182,  242,  463, 1391, 1392, 1393,  772,
  139,  772,  772, 1394,  421,  772, 1395, 1396, 1397,  772,
  422,  182,  772,  421,  772, 1398,  772, 1399, 1400,  422,
 1417,  772,  772,  182,  772,  182,  767, 1419,  767,  767,
  767, 1421, 1059,  425,  423,  103,  424, 1156,  426, 1422,
  772,  772, 1423,  772,  767,  767,  767,  767,  182, 1424,
 1425,  249,  250,  251, 1426,  163,  164,  772, 1433,  772,
  772,  772, 1432, 1434,  772, 1435,  421,  772,  772, 1454,
 1455, 1456,  422,  182,  254,  255, 1460,  772,  767,  259,
  260, 1457,  421,  261,  262, 1476, 1482,  773,  422,  773,
  425,  423, 1507,  424,  772,  426, 1515,  773, 1517,  249,
  250,  251,  168,  163,  164, 1519, 1521, 1500, 1523, 1525,
  772, 1527, 1539, 1528,  773, 1536, 1534, 1513, 1540, 1554,
 1514,  772,  254,  255, 1559, 1564, 1565,  259,  260, 1568,
  766, 1505, 1578,  772, 1580,  772, 1581,  773,    1,  581,
   26,  772,   28,  188,  773,  688,  773,  773,  589,  342,
  773,  251,   43,  486,  773,  135,  488,  773,  249,  773,
   77,  773,  421,   44,  198,  486,  773,  773,  772,  773,
   45,  766,  621,  766,  766,  766,  619, 1205,  425,  423,
  179,  424,  615,  426,  617,  773,  773,  488,  773,  766,
  766,  766,  766,  256,  239,   46,  369,  488,  486,  180,
  488,  255,  773,  343,  773,  773,  773,  645,  644,  773,
  639,  646,  773,  773,  463,  488,  463,  292,  307,  290,
  655,  463,  773,  766,  463,   24,  371,   27,  488,   33,
 1191,  488,  391,  108,  398,  390, 1147,  463,  781,  773,
  768,  974,  832,  207, 1145, 1133,  488,  767, 1143,  767,
 1365,  242,  463, 1249,  521,  773, 1124,  767,  748, 1086,
   47, 1206,  425,  423,  917,  424,  773,  426, 1134,  918,
   87,  421,  492,  493,  767, 1345, 1512,  422,  773,  730,
  773,  768, 1351,  768,  768,  768,  773, 1518, 1516, 1549,
  912,  561,   48, 1229, 1474, 1533,   49,  767, 1576,  768,
  768,  768,  768, 1544,  767,  597,  767,  767, 1264,  778,
  767, 1481,   88,  773,  767,  463,  962,  767, 1135,  767,
 1368,  767,  474,  501,   89,  483,  767,  767,  421,  767,
  952, 1257,  770,  768,  422,  943,  110,  463,  448,  671,
  734,   87,  675,  876,  463,  767,  767,  886,  767,   90,
  662,  862,  663, 1410, 1305, 1526,  249,  250,  251,  168,
  163,  164,  767, 1553,  767,  767,  767, 1584, 1405,  767,
  684,  836,  767,  767, 1171, 1042,  596,    0,  463,  254,
  255,  653,  767,   88,  259,  260,  715,    0, 1384,    0,
    0,    0,  766,    0,  766,   89,    0,    0,    0,  767,
    0,    0,  766,    0,    0,    0,    0,    0,    0,  105,
    0,    0,    0,    0,    0,  767,  421,    0,   91,  766,
   90,    0,  422,    0,    0,    0,  767,  715,   92,    0,
  715,    0,    0,    0,  488,  771,  488,    0,  767,    0,
  767,  488,  766,    0,  488,  715,  767,    0,    0,  766,
    0,  766,  766,   93,    0,  766,    0,  488,    0,  766,
    0,    0,  766,    0,  766,  488,  766,  488,    0,    0,
    0,  766,  766,  767,  766,  488,  771,  239,  771,  771,
  771,    0,    0,    0,    0,    0,    0,    0,  488,   91,
  766,  766,    0,  766,  771,  771,  771,  771,    0,   92,
  421,    0,  768,    0,  768,    0,  422,  766,    0,  766,
  766,  766,  768,    0,  766,    0,    0,  766,  766,    0,
    0,    0,    0,    0,   93,    0,    0,  766,  771,  768,
    0,    0,    0,    0,  242,  488,    0,    0,    0,    0,
    0,    0,   94,    0,  766,    0,    0,    0,  739,    0,
    0,    0,  768,    0,    0,    0,    0,  488,    0,  768,
  766,  768,  768,    0,  488,  768,  488,    0,    0,  768,
    0,  766,  768,    0,  768,    0,  768,    0,    0,    0,
    0,  768,  768,  766,  768,  766,    0,    0,  488,  739,
  718,  766,  739,    0,    0,  488,    0,    0,  488,    0,
  768,  768,    0,  768,   53,    0,    0,  739,    0,    0,
    0,    0,    0,    0,    0,   54,    0,  768,  766,  768,
  768,  768,   55,    0,  768,  905,    0,  768,  768,  488,
    0,  718,  716,  688,  718,   56,    0,  768,    0,  249,
  250,  251,    0,  163,  164,    0,    0,    0,  715,  718,
    0,    0,    0,    0,  768,    0,    0,    0,    0,    0,
    0,    0,  254,  255,  256,  257,  258,  259,  260,    0,
  768,  261,  262,  716,  688,    0,  716,  688,    0,    0,
    0,  768,  631,  632,  633,  634,  635,  636,  637,  638,
    0,  716,  688,  768,    0,  768,  717,  771,    0,  771,
    0,  768,    0,    0,    0,  715,    0,  771,  715,    0,
    0,    0,   57,    0,    0,  715,    0,    0,  715,    0,
    0,    0,  715,    0,  771,    0,    0,  715,  768,   58,
  715,    0,    0,    0,    0,    0,    0,  717,    0,    0,
  717,    0,    0,    0,   59,  747,  715,  771,   60,    0,
    0,   61,    0,    0,  771,  717,  771,  771,    0,   62,
  771,    0,    0,    0,  771,    0,    0,  771,    0,  771,
  715,  771,    0,  715,  715,    0,  771,  771,   63,  771,
    0,   74,    0,  715,    0,    0,  747,    0,   75,  747,
    0,    0,   76,   77,    0,  771,  771,    0,  771,    0,
  715,    0,    0,    0,  747,    0, 1277, 1278,    0,  711,
  739,    0,  771,   78,  771,  771,  771, 1283, 1284,  771,
 1286, 1287,  771,  771,    0,    0,    0,  715, 1291, 1292,
 1293, 1294,  771, 1295, 1296, 1297, 1298, 1299, 1300,  715,
    0,  715,    0,    0,    0,    0,    0,    0,    0,  771,
  711,    0,  718,  711,    0,    0,    0,    0,    0,    0,
    0,  167,    0,    0,    0,  771,    0,  739,  711,    0,
  739,    0,    0,    0,  715,    0,  771,  739,   79,    0,
  739,    0,    0,    0,  739,    0,    0,    0,  771,  739,
  771,    0,  739,    0,  716,   80,  771,    0,  712,    0,
    0,    0,  167,    0,    0,  167,    0,    0,  739,  718,
   81,  688,  718,  688,   82,    0,    0,    0,    0,  718,
  167,  688,  718,  771,    0,   83,  718,    0,    0,    0,
    0,  718,  739,    0,  718,  739,  739,    0,    0,  712,
    0,    0,  712,    0,   84,  739,    0,  713,    0,    0,
  718,  716,    0,    0,  716,    0,    0,  712,  717,    0,
    0,  716,  739,    0,  716,    0,    0,    0,  716,    0,
    0,    0,    0,  716,  718,    0,  716,  718,  718,    0,
    0,    0,    0,    0,    0,    0,    0,  718,  713,  739,
    0,  713,  716,    0,    0,    0,    0,    0,    0,    0,
    0,  739,    0,  739,  718,    0,  713,  747,    0,    0,
    0,  746,  688,    0,    0,  717,  716,  688,  717,  716,
  716,    0,    0,    0,    0,  717,    0,    0,  717,  716,
    0,  718,  717,    0,  688,    0,  739,  717,    0,    0,
  717,  688,    0,  718,    0,  718,  716,    0,    0,    0,
    0,    0,  746,  740,    0,  746,  717,    0,    0,    0,
    0,    0,    0,    0,  747,    0,    0,  747,    0,    0,
  746,  711,    0,  716,  747,  688,    0,  747,  718,    0,
  717,  747,    0,  717,  717,  716,  747,  716,    0,  747,
    0,    0,    0,  717,  740,  748,    0,  740,    0,    0,
    0,    0,    0,    0,    0,  747,    0,    0,    0,    0,
  717,    0,  740,    0,    0,    0,    0,    0,    0,  167,
  716,    0,    0,  208,    0,    0,    0,    0,  711,  747,
    0,  711,  747,  747,    0,    0,  748,  717,  711,  748,
  167,  711,  747,    0,    0,  711,    0,    0,    0,  717,
  711,  717,    0,  711,  748,    0,    0,    0,    0,  747,
  712,    0,  167,    0,  208,    0,    0,  208,  167,  711,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  208,    0,  717,  749,  747,    0,    0,    0,
    0,  167,    0,  711,    0,    0,  711,  711,  747,    0,
  747,    0,    0,    0,    0,    0,  711,    0,  737,  713,
  167,    0,    0,    0,    0,    0,    0,  712,    0,  167,
  712,    0,    0,  711,    0,  167,  749,  712,    0,  749,
  712,    0,    0,  747,  712,    0,    0,    0,    0,  712,
    0,    0,  712,  167,  749,    0,    0,    0,    0,  737,
  711,    0,  737,    0,    0,    0,    0,  741,  712,    0,
    0,    0,  711,    0,  711,    0,  713,  737,    0,  713,
    0,    0,    0,  746,    0,    0,  713,    0,    0,  713,
  167,    0,  712,  713,    0,  712,  712,    0,  713,    0,
    0,  713,    0,    0,    0,  712,    0,  711,  741,    0,
    0,  741,    0,    0,    0,    0,    0,  713,    0,    0,
    0,    0,  712,    0,    0,  740,  741,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  746,  713,    0,  746,  713,  713,    0,    0,    0,  712,
  746,    0,    0,  746,  713,    0,  750,  746,    0,    0,
    0,  712,  746,  712,    0,  746,    0,  748,    0,    0,
    0,  713,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  746,  740,    0,    0,  740,    0,    0,    0,    0,
    0,    0,  740,    0,    0,  740,  712,  750,  713,  740,
  750,    0,    0,    0,  740,  746,    0,  740,  746,  746,
  713,  208,  713,  208,    0,  750,    0,    0,  746,    0,
  738,  208,    0,  740,  748,    0,    0,  748,    0,    0,
    0,    0,    0,    0,  748,  746,    0,  748,    0,    0,
  742,  748,    0,    0,    0,  713,  748,  740,    0,  748,
  740,  740,    0,    0,    0,    0,    0,  749,    0,    0,
  740,  738,  746,    0,  738,  748,    0,    0,    0,  697,
    0,    0,    0,    0,  746,    0,  746,  740,    0,  738,
  737,  742,    0,    0,  742,    0,    0,    0,    0,  748,
    0,    0,  748,  748,    0,    0,    0,    0,    0,  742,
    0,    0,  748,    0,  740,    0,    0,    0,    0,  746,
  697,    0,  208,  697,  749,    0,  740,  749,  740,  748,
    0,    0,    0,    0,  749,    0,    0,  749,  697,  741,
    0,  749,    0,    0,  208,    0,  749,  737,    0,  749,
  737,  208,    0,    0,    0,    0,  748,  737,    0,    0,
  737,  740,    0,    0,  737,  749,    0,    0,  748,  737,
  748,    0,  737,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  208,    0,    0,  737,  749,
    0,    0,  749,  749,    0,    0,  741,    0,    0,  741,
  239,    0,  749,  748,  235,    0,  741,    0,    0,  741,
    0,    0,  737,  741,    0,  737,  737,    0,  741,  749,
    0,  741,    0,    0,    0,  737,    0,    0,  750,    0,
    0,    0,    0,    0,    0,  236,    0,  741,    0,    0,
    0,  239,  737,    0,  239,  235,  749,    0,  235,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  749,  239,
  749,  741,    0,  235,  741,  741,    0,    0,    0,  737,
    0,    0,    0,    0,  741,    0,  236,    0,    0,  236,
    0,  737,    0,  737,  498,  750,    0,    0,  750,    0,
    0,  741,  738,  749,  236,  750,  499,    0,  750,    0,
    0,    0,  750,    0,    0,    0,    0,  750,    0,    0,
  750,    0,  742,    0,    0,    0,  737,    0,  741,    0,
    0,    0,    0,    0,  498,  498,  750,    0,  498,    0,
  741,    0,  741,    0,    0,    0,  499,  499,    0,    0,
  499,    0,    0,  498,    0,    0,    0,    0,    0,  738,
  750,    0,  738,  750,  750,  499,    0,    0,    0,  738,
    0,    0,  738,  750,    0,  741,  738,    0,    0,  742,
    0,  738,  742,    0,  738,  498,    0,    0,    0,  742,
  750,  493,  742,    0,    0,    0,  742,  499,    0,    0,
  738,  742,    0,    0,  742,    0,    0,    0,  697,    0,
    0,  697,    0,    0,    0,    0,    0,  750,  697,    0,
  742,  697,    0,    0,  738,  697,    0,  738,  738,  750,
  697,  750,  493,  697,    0,  493,    0,  738,    0,    0,
    0,    0,    0,    0,  742,    0,    0,  742,  742,  697,
  493,    0,    0,    0,  738,    0,    0,  742,    0,    0,
    0,    0,    0,    0,  750,    0,    0,    0,    0,    0,
    0,    0,    0,  697,  742,  516,  697,  697,    0,    0,
    0,  738,  493,    0,    0,    0,  697,    0,  239,    0,
  239,    0,  235,  738,  235,  738,    0,    0,  239,    0,
    0,  742,  235,  697,    0,    0,  506,    0,    0,    0,
    0,    0,    0,  742,    0,  742,  516,    0,    0,  516,
    0,    0,    0,  236,    0,  236,    0,    0,  738,    0,
  697,    0,    0,  236,  516,    0,    0,  490,    0,    0,
    0,    0,  697,    0,  697,    0,    0,  506,  742,    0,
  506,    0,  498,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  499,  506,  516,    0,  498,    0,
    0,  498,  498,    0,  498,    0,    0,  697,  490,  498,
  499,  490,  498,  499,  499,    0,  499,    0,    0,  239,
    0,  499,  486,  235,  499,  498,  490,  506,    0,    0,
    0,  498,    0,    0,  498,    0,    0,  499,    0,    0,
    0,  239,    0,  499,    0,  235,  499,    0,  239,    0,
    0,    0,  235,  488,  236,    0,    0,    0,  490,    0,
    0,    0,    0,  486,    0,    0,  486,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  236,    0,    0,  493,
    0,  486,  239,  236,    0,    0,  235,    0,    0,    0,
    0,    0,    0,    0,  488,  493,    0,  488,  493,  493,
    0,  493,    0,  498,    0,    0,  493,    0,    0,  493,
    0,    0,  488,    0, 1227,  499,    0,  236,    0,    0,
    0,    0,  493,    0,    0,  498,    0,    0,  493,    0,
    0,  493,  498,    0,    0,  582,  498,  499,  263,    0,
  264,    0,    0,  498,  499,    6,    0,    0,  499,    0,
    0,    0, 1427,  267,    0,  499, 1318, 1319,  268, 1320,
    0,  498, 1321,  516,    0,    0,  498,    0,    0,  582,
    0,    0,  263,  499,  264,    0, 1322,    0,  499,  516,
    0,    0, 1323,  516,    0,  516,    0,  267,    0,    0,
  516,  498,  268,  516,  506,  498,    0,    0,    0,    0,
  493,    0,    0,  499,    0,    0,  516,  499,    0,    0,
  506,    0,  516,    0,  506,  516,  506,    0,    0,    0,
    0,  506,  493,    0,  506,  490,    0,    0,    0,  493,
    0,    0,    0,  493,    0,    0,    0,  506,    0,    0,
  493,  490, 1324,  506,    0,  490,  506,  490,    0,    0,
    0,    0,  490,    0,    0,  490,    0,    0,  493,    0,
    0,   14,    0,  493,    0,    0,    0,    0,  490,    0,
    0,    0,    0,    0,  490,    0, 1325,  490,    0,    0,
  486,    0,    0,    0,  516,    0,   16,    0,  493,    0,
    0,    0,  493,    0,    0, 1428,    0, 1326,    0,  486,
  486,    0,  486,    0,  168,    0,  516,  486,    0,  582,
  486,  488,  263,  516,  264,  506,    0,  516,    0,    0,
    0,    0,    0,  486,  516,    0,    0,  267,    0,  486,
    0,  488,  268,  488,    0,    0,    0,  506,  488,    0,
    0,  488,  516,    0,  506,    0,  490,  516,  506,    0,
    0,    0,    0,    0,  488,  506,    0,    0,    0,    0,
  488,    0,  236,    0,    0,    0,    0,    0,  490,    0,
    0,  237,  516,  506,    0,  490,  516,    0,  506,  490,
    0,    0,    0,    0,    0,  238,  490,    0,  578,    0,
    0,  239,  240,    0,    0,    0,  236,    0,    0,    0,
    0,  486,    0,  506,  490,  237,    0,  506,    0,  490,
  579,    0,    0,    0,    0,    0,    0,    0,    0,  238,
    0,    0,  241,  486,    0,  239,  240,    0,    0,    0,
  486,    0,  488,    0,  490,  182,    0,    0,  490,  486,
    0,  486,  163,    0,  579,    0,    0,    0,    0,    0,
  243,  244,  266,    0,  488,  263,  241,  264,    0,  486,
    0,  488,  245,    0,  486,    0,  246,    0,    0,    0,
  267,    0,  488,    0,  580,  268,    0,    0,    0,    0,
    0,    0,    0,    0,  243,  244,    0,    0,    0,    0,
  488,    0,    0,  486,  182,  488,  245,    0,    0,    0,
  246,  163,    0,    0,    0,    0,    0,    0,  580,    0,
    0,    0,    0,    0,    0,    0,    0,  581,    0,    0,
    0,    0,    0,    0,  488,    0,    0,    0,    0,  247,
    0,    0,    0,    0,    0,    0,  236,    0,    0,  248,
    0,    0,    0,    0,    0,  237,    0,  415,    0,    0,
    0,  581,    0,  249,  250,  251,  252,  163,  164,  238,
    0,    0,    0,  247,    0,  239,  240,  253,    0,    0,
    0,    0,    0,  248,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,  579,  261,  262,  249,  250,  251,
  252,  163,  164,    0,    0,    0,  241,    0,    0,    0,
    0,  253,    0,  266,    0,    0,  263,    0,  264,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,  267,    0,    0,  243,  244,  268,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
  246,  127,    0,    0,    0,    0,    0,    0,  580,    0,
  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
  138,  139,  140,  141,  142,  143,    0,    0,    0,    0,
  144,  145,  984,    0,    0,  985,    0,    0,    0,  236,
    0,    0,    0,    0,    0,    0,    0,  266,  237,    0,
  263,  581,  264,  182,    0,    0,    0,    0,    0,    0,
  163,    0,  238,  247,    0,  267,    0,    0,  239,  240,
  268,    0,    0,  248,  182,    0,    0,    0,    0,    0,
    0,  163,    0,    0,    0,    0,    0,  249,  250,  251,
  252,  163,  164,    0,    0,    0,  182,    0,    0,  241,
    0,  253,  182,  163,    0,    0,    0,    0,    0,  163,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,    0,    0,    0,  182,    0,  243,  244,    0,
    0,    0,  163,    0,    0,    0,    0,    0,    0,  245,
    0,    0,    0,  246,  182,    0,    0,    0,    0,  284,
    0,  163,  182,  182,    0,    0,    0,    0,    0,  182,
  163,    0,    0,    0,    0,    0,  163,    0,    0,    0,
  173,    0,    0,    0,    0,    0,    0,  182,    0,    0,
  284,    0,    0,  993,  163,    0,  985,  284,    0,    0,
  236,  284,  284,    0,  284,    0,    0,  284,  986,  237,
  266,    0,    0,  263,    0,  264,  247,    0,    0,    0,
    0,  284,    0,  238,  182,    0,  248,  284,  267,  239,
  240,  163,    0,  268,    0,  182,    0,    0,    0,  173,
  249,  250,  251,  252,  163,  164,    0,    0,    0,    0,
    0,    0,    0,    0,  253,    0,    0,    0,    0,    0,
  241,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0,    0,  997,    0,    0,
  985,    0,    0,    0,  236,    0,    0,  284,  243,  244,
    0,    0,  266,  237,    0,  263,    0,  264,    0,    0,
  245,    0,    0,    0,  246,    0,  284,  238,    0,  174,
  267,    0,    0,  239,  240,  268,    0,    0,    0,    0,
    0,  284,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  284,    0,    0,    0,    0,    0,    0,    0,    0,
  284,    0,  284,    0,  241,    0,    0,    0,    0,  284,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  986,
    0,    0,    0,    0,    0,    0,    0,  247,  174,    0,
    0,    0,  243,  244,    0,    0,    0,  248,    0,    0,
    0,    0,    0,    0,  245,    0,    0,    0,  246,    0,
    0,  249,  250,  251,  252,  163,  164,    0,    0,    0,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,    0,    0,    0,    0,    0,
 1005,    0,    0,  985,    0,    0,    0,  236,  173,    0,
    0,    0,    0,  986,    0,  266,  237,    0,  263,    0,
  264,  247,    0,    0,    0,    0,    0,    0,    0,  173,
  238,  248,    0,  267,    0,    0,  239,  240,  268,    0,
    0,    0,    0,    0,    0,  249,  250,  251,  252,  163,
  164,  173,    0,    0,    0,    0,    0,  173,    0,  253,
    0,    0,    0,    0,    0,    0,    0,  241,  254,  255,
  256,  257,  258,  259,  260,    0,    0,  261,  262,    0,
  173,    0, 1008,    0,    0,  985,    0,    0,    0,  236,
    0,    0,    0,    0,    0,  243,  244,  266,  237,  173,
  263,    0,  264,    0,    0, 1227,    0,  245,  173,    0,
    0,  246,  238,    0,  173,  267,    0,    0,  239,  240,
  268,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  173,    0,    0,    0,    6,  174,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1318, 1319,  241,
 1320,    0,    0, 1321,    0,    0,    0,    0,  174,    0,
    0,    0,    0,    0,    0,    0,  986, 1322,    0,  173,
    0,    0,    0, 1323,  247,    0,    0,  243,  244,    0,
  174,    0,    0,    0,  248,    0,  174,    0,    0,  245,
    0,    0,    0,  246,    0,    0,    0,    0,  249,  250,
  251,  252,  163,  164,    0,    0,    0,    0,    0,  174,
    0,    0,  253,    0,    0,    0,    0,    0,    0,    0,
    0,  254,  255,  256,  257,  258,  259,  260,  174,    0,
  261,  262,    0, 1324,    0, 1013,    0,  174,  985,    0,
    0,    0,  236,  174,    0,    0,    0,    0,  986,    0,
  266,  237,   14,  263,    0,  264,  247,    0,    0,    0,
    0,  174,    0,    0,    0,  238,  248, 1325,  267,    0,
    0,  239,  240,  268,    0,    0,    0,   16,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0, 1326,    0,
    0,    0,    0,    0,  253,  168,    0,    0,  174,    0,
    0,    0,  241,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0,    0, 1016,    0,    0,
  985,    0,    0,    0,  236,    0,    0,    1,    0,    0,
  243,  244,  266,  237,  265,  263,    0,  264,    0,    0,
    0,    0,  245,    0,    0,    0,  246,  238,    0,    2,
  267,    0,    0,  239,  240,  268,    0,    3,    0,    0,
    0,    0,    0,    0,    4,    0,    5,    0,    6,    0,
    0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
    8,    0,    0,    0,  241,    0,    0,    0,    0,    0,
    0,    0,    0,  849,    9,  849,  849,    0,  849,    0,
    0,  986,    0,    0,    0,   10,    0,    0,    0,  247,
    0,  849,  243,  244,    0,    0,  849,    0,    0,  248,
    0,    0,    0,    0,  245,    0,    0,    0,  246,    0,
    0,    0,    0,  249,  250,  251,  252,  163,  164,    0,
    0,    0,    0,    0,    0,    0,    0,  253,    0,    0,
    0,    0,    0,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,    0,    0,
 1019,    0,   11,  985,    0,  266,    0,  236,  263,   12,
  264,    0,   13,  986,   14,   15,  237,    0,    0,    0,
    0,  247,    0,  267,    0,    0,    0,    0,  268,    0,
  238,  248,    0,    0,    0,    0,  239,  240,    0,   16,
    0,    0,    0,    0,    0,  249,  250,  251,  252,  163,
  164,    0,    0,    0,    0,    0,    0,    0,    0,  253,
    0,    0,    0,    0,    0,    0,    0,  241,  254,  255,
  256,  257,  258,  259,  260,    0,    0,  261,  262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
    0,    0,    0,    0,    0,  243,  244,    0,  237,    0,
    0,    0,    0,  266,    0,    0,  263,  245,  264,    0,
    0,  246,  238,    0,    0,    0,    0,    0,  239,  240,
    0,  267,  499,    0,    0,    0,  268,    0,    0,    0,
    0,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,    0,    0,  241,
  849,  144,  145,    0,    0,    0,    0,    0,    0,  849,
    0,    0,    0,    0,    0,    0,  986,    0,    0,    0,
    0,    0,    0,  849,  247,  242,    0,  243,  244,  849,
  849,    0,    0,    0,  248,    0,    0,    0,    0,  245,
    0,    0,    0,  246,    0,    0,    0,    0,  249,  250,
  251,  252,  163,  164,    0,    0,    0,    0,    0,    0,
  849,    0,  253,    0,    0,    0,    0,    0,    0,    0,
    0,  254,  255,  256,  257,  258,  259,  260,    0,    0,
  261,  262,  236,    0,    0,    0,  849,    0,  849,  849,
    0,  237,  266,  643,    0,  263,    0,  264,    0,    0,
  849,    0,    0,    0,  849,  238,  247,    0,    0,    0,
  267,  239,  240,    0,    0,  268,  248,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0,    0,    0,
    0,    0,  241,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0,    0,  849,    0,    0,
  243,  244,    0,    0,    0,    0,    0,  849,    0,    0,
  236,    0,  245,    0,    0,    0,  246,    0,    0,  237,
    0,  849,  849,  849,  849,  849,  849,    0,    0,    0,
    0,    0,    0,  238,    0,  849,    0,    0,    0,  239,
  240,    0,    0,    0,  849,  849,  849,  849,  849,  849,
  849,    0,    0,  849,  849,    0,    0,    0,    0,    0,
    0,    0,  266,  415,    0,  263,    0,  264,    0,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    0,  247,
  267,    0,    0,    0,    0,  268,    0,    0,    0,  248,
    0,    0,    0,    0,    0,    0,  242,    0,  243,  244,
    0,    0,    0,  249,  250,  251,  252,  163,  164,    0,
  245,    0,    0,    0,  246,    0,    0,  253,    0,    0,
    0,    0,    0,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,  266,  261,  262,  263,    0,  264,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
    0,    0,  267,    0,    0,    0,    0,  268,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  238,    0,    0,    0,    0,  247,  239,  240,
    0,    0,    0,    0,    0,    0,    0,  248,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  249,  250,  251,  252,  163,  164,    0,    0,  241,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,    0,    0,  243,  244,    0,
    0,    0,    0,  266,    0,    0,  263,    0,  264,  245,
    0,    0,    0,  246,    0,    0,    0,  417,    0,    0,
    0,  267,    0,    0,    0,    0,  268,  417,  417,  417,
  417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
  417,  417,    0,    0,    0,    0,  417,  417,    0,  236,
    0,    0,    0,    0,    0,    0,    0,    0,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  238,    0,    0,    0,  247,    0,  239,  240,
    0,    0,    0,    0,    0,    0,  248,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0,    0,  241,
    0,    0,    0,    0,  253,    0,    0,    0,    0,    0,
    0,  236,    0,  254,  255,  256,  257,  258,  259,  260,
  237,    0,  261,  262,    0,    0,    0,  243,  244,    0,
    0,    0,  849,    0,  238,  849,    0,  849,    0,  245,
  239,  240,    0,  246,    0,    0,    0,    0,    0,    0,
  849,    0,    0,    0,    0,  849,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  241,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  243,
  244,    0,    0,    0,    0,    0,  247,    0,    0,    0,
    0,  245,    0,    0,    0,  246,  248,    0,    0,    0,
  236,    0,    0,    0,    0,    0,    0, 1011,    0,  237,
  249,  250,  251,  252,  163,  164,    0,    0,    0,    0,
    0,    0,    0,  238,  253,    0,    0,    0,    0,  239,
  240,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,  641,  425,  423,    0,  424,    0,
  426,    0,    0,    0,    0,    0,    0,    0,  247,    0,
  241,    0,    0,  811,  810,  812,    0,    0,  248,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1173,
    0,    0,  249,  250,  251,  252,  163,  164,  243,  244,
    0,    0,    0,    0,    0,    0,  253,    0,    0,    0,
  245,    0,    0,    0,  246,  254,  255,  256,  257,  258,
  259,  260,    0,    0,  261,  262,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  425,  423,    0,  424,    0,  426,    0,    0,  849,
    0,    0,    0,    0,    0,    0,    0,    0,  849,  811,
  810,  812,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  849,    0,    0,    0,    0,  247,  849,  849,
    0,    0,    0,    0,    0,    0,    0,  248,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  249,  250,  251,  252,  163,  164,    0,    0,  849,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,    0,    0,  254,  255,  256,  257,  258,  259,
  260,    0,    0,  261,  262,    0,    0,  849,  849,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  849,
  522,    0,    0,  849,  523,    0,    0,    0,    0,    0,
    0,    0,  714,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  524,    0,    0,  525,    0,    0,    0,
    0,    0,    0,    0,    0,  798,    0,    0,    0,    0,
    0,    0,    0,  421,    0,    0,    0,    0,    0,  422,
    0,    0,  799,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  849,  526,    0,    0,
    0,    0,    0,  527,  528,  529,  849,  530,  531,  532,
    0,  533,    0,  206,    0,    0,    0,  206,  800,    0,
  849,  849,  849,  849,  849,  849,    0,  801,    0,    0,
    0,  534,  206,  535,  849,  802,  206,    0,    0,  206,
    0,    0,    0,  849,  849,  849,  849,  849,  849,  849,
    0,  798,  849,  849,  803,    0,  804,    0,    0,  421,
    0,    0,    0,    0,  536,  422,    0,    0,  799,    0,
  805,    0,  806,  807,  808,    0,    0,    0,    0,    0,
  206,  537,    0,    0,    0,    0,  206,  206,  206,    0,
  206,  206,  206,    0,  206,    0,  784,    0,    0,    0,
  523,    0,    0,  538,  800,    0,    0,    0,    0,    0,
    0,    0,    0,  801,  206,  785,  206,    0,  226,  524,
    0,  802,  525,  809,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  539,  540,
  803,    0,  804,    0,    0,    0,    0,  206,    0,  541,
  542,    0,   76,    0,    0,    0,  805,    0,  806,  807,
  808,  522,    0,  526,  206,  523,    0,    0,    0,  527,
  528,  529,    0,  530,  531,  532,    0,  533,    0,  206,
    0,    0,    0,  206,  524,    0,  206,  525,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  534,  206,  535,
    0,    0,  206,    0,    0,  206,    0,    0,    0,  809,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  206,  206,    0,    0,    0,    0,    0,  526,    0,
  536,    0,  206,  206,  527,  528,  529,    0,  530,  531,
  532,    0,  533,    0,  522,    0,  206,  537,  523,    0,
    0,    0,  206,  206,  206,    0,  206,  206,  206,    0,
  206,    0,  534,    0,  535,    0,    0,  524,    0,  538,
  525,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  206,    0,  206,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  536,    0,    0,    0,    0,
    0,    0,    0,    0,  539,  540,    0,    0,    0,    0,
    0,  526,  537,  206,    0,  541,  542,  527,  528,  529,
    0,  530,  531,  532,    0,  533,    0,  120,    0,    0,
  206,  120,    0,    0,  538,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  534,    0,  535,    0,  226,
  120,    0,  206,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  539,
  540,    0,    0,    0,    0,    0,    0,    0,  536,    0,
  541,  542,    0,    0,    0,    0,    0,  206,  206,    0,
    0,    0,    0,    0,  120,  537,    0,    0,  206,  206,
  120,  120,  120,    0,  120,  120,  120,    0,  120,    0,
    0,    0,    0,    0,    0,    0,    0,  538,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  120,    0,
  120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  539,  540,    0,    0,    0,    0,    0,    0,
    0,  120,    0,  541,  542,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  120,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  120,  120,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  120,  120,
};
static short yycheck[] = {                                      54,
   16,   46,    4,   55,    4,   47,   93,  215,   54,  215,
    0,   54,  215,  429,  580,   57,  582,  343,   53,   48,
  598,  402,  482,   75,  509,  485,  454,   60,   58,  494,
   59,  491,   83,   78,  347,  451,  415,   79,  435,  124,
  685,  491,  857,  351,   86,  702,  351,  322,  692,   82,
   80,  223,    0,    0,   40,  702,   44,   73,  315,   63,
   45,  233,  613,    0,  917,   81,  121,   44,  305,   40,
   40,  102,  366,  104,  103,  928,   41,   41,  749,  544,
   58,   40,   44, 1037,   41,  260,  941,    0,   58,  115,
  957,    0, 1304,   41,  947,    0,   44,   42,   44,   59,
    0,   44,  189,   44,  654,  179,    0,  689,   40, 1074,
   40,   59,   59,  613,  149,    0,  264,   45,   42,  287,
 1089,  397,   59,  274,  702,  288,   44,   44,   41,   40,
    0,   44,   44,  288,   45,   45,    0,    0,    0,  231,
  175,  228,  468,  469,  470,  471,   59,  574,  461,   45,
   59,   44,  260, 1402,   59,   41,   40,   44,   91,   59,
  352, 1130,  217,    0,  372,   59,  372,   63,   45,  372,
  329,  217,  318,   45,   59,  113,  321,    0,   41,   41,
  284,   44,  667,  491,   41,  264,  491,   44,  268,   59,
  378, 1030,  221, 1032,  406,   59,   59,   59,    0,  320,
   59,  273,  231,  388,  517,  378, 1139,  406,    0,    0,
  695,  696,    0,  385,  277,    0,   44,   63,   41,   44,
  444,   44,   59,  357,  309,  418,  349,  459,  522,   41,
  406,  459,   44,  461,   59,  358,   59,  461,   84,   41,
    0,  302,  434,  418,  289,  457,  419,  813,  814,  425,
  305,  716,  445,  308,  486, 1108,  441,   59,  457,  305,
    0,  449,  308,    0,  293,   93, 1093,   59,   59,  341,
 1125,   59, 1484, 1522,   59,  330,    0,  737,  743,  830,
  401,   41,    0,  346,  330,  444,  366,    0,  839,  840,
  321,  309,  437,  466,  462,  463,  430,  328,  461,   59,
  681,  332,  461, 1552,  335,  262,  461,  399,  393,  344,
  418,  346, 1524,  461,  285,  865,  467,  362,  264,   59,
   44,  442,   59,  358,    0,  263,  264,    0,  266,  475,
  830,  360,  989,  412, 1267,   59,  440,  269,  904,  839,
  616,   59,  384, 1308,  277,  258,   59,    0, 1302,  258,
    0,    0,  381,  258,    0,  397,    0,    0,  258,    0,
  757,  274, 1201,  392,  305,  394,  366, 1038,  332,   41,
  399,  319, 1225,  297,  322, 1228, 1243, 1230,  321,  405,
    0,  329,  443,   59,  332,  967,   59,    0,  336,    0,
  598, 1360,  598,  341,  307,  598,  344,  310,  307,    0,
   41,   44,  307,  321,    0, 1232,   59,  307, 1261,   59,
   59,  989,  360,   59,  488,   59,   59,  274,   59, 1274,
   41,   41,  384,   44,  310,  418,  319,  264, 1207,   41,
  387,  466,  397,  397,  452,  607,  384, 1081,  332,   59,
  388,  264,  699, 1114,  329,  682,   59,  332,   59,  397,
  915,  411,  445,  310,  835,  459,  319,  319,   59,  944,
  491,  926, 1119,   59,  402,  395,  414,  329,  406,  332,
  332,  459, 1119,  264,  459,  461,  453,  512,  341,  341,
  510,  946,  420,  461,  422,  423,  424,  425,  426,  427,
  461,  461,  430,  441,  702, 1046,  702,  791,  321,  412,
 1353,  486,  461,  397,  441,  453,  419,  782,  455, 1075,
  419,  566,  397,  461,  419, 1368,  461,  319,  455,  419,
  566,  432,  522, 1073,  437,  388,  388,  397,  563,  564,
 1096,  459,  437,  461,  397,  397,  432,  461,  455,  341,
  488, 1119,    0,  455,  599,  972,  410,  441,  459,  459,
  437,  264,  411,  599,  467,  412,  441,  349,  471,  319,
  432,  455,    0,  459,  448, 1380,  471,  893,  453,  844,
  455,  441,  332,  575,  616,  575,    0, 1221,  441,  441,
  368,  341,  459,  368,  963,  455,  388,  459,  264,  198,
  262,  264,  455,  455, 1447,  397,  456,  206, 1083, 1049,
 1085,   59,  262,   41,  341,  329,   44,  398,  332,  349,
  467,  264,    0,   42,  264,  264,  321,   41,  264,  568,
  344,   59,  302,  341, 1281,  488,  488,  682,  388,   41,
  453,   41,  958,  688,  689,   59,  682,  397,  461,  441,
  257, 1106,  688,  689,  582, 1061, 1131,  676,  820,  678,
  262,  823,    0,  455,    0,  863,  691,  692,  259,  284,
    0,  259, 1307,  264, 1030,  258, 1032, 1446,  698,  270,
 1135,   59,  270,  397,   41,    0,  319,  708,  319,  617,
  618,  441,  620,  339,  622,  398,  488,  625,  626,  627,
  628,  629,  630,   41,    0,  970,    0,  341,  341,  319,
  341,   41,  640, 1281,   44,  736,  737, 1486,  793,  329,
  795,   59,  332,   59,  307,  387, 1460,  441,  335,   59,
 1117,  341,  398,    0,   16,  398, 1123,  387,  488,  453,
  343,  455,  343,  329,   59,  735,  332,  767,  768,  769,
 1306, 1049,  742,  681, 1049,  398,  326,  388,  398,  398,
  265,  780,  398,   59,  754,   59,  397,    0,    0,  301,
  385,  257,  711,  443,  349,  378,    0,   44,  388, 1234,
  466,  720,  468,  824,  280,  387, 1155,  397,    0,  821,
  286,   73,   59,  989,  403, 1334,  989,  443,  303,  822,
 1534,  791,   12,  406,   42,  406,  409,  398,  409,   47,
  441,  397,   44, 1231, 1269,    0,  264,   41,  403,  864,
   44,  353,  425, 1557,  425,  440,   59,   59, 1199,   12,
 1133,  441,  771, 1251, 1309,   59,  419,  446, 1313,  263,
  273,  260,  457, 1036, 1037, 1038,   59,   59,  451,  335,
  451,    0,    0,    0,  723,  441,   41,  488,    0,  322,
  262,  431,  262, 1419,  260,  461, 1422, 1317,  438,  455,
  798,  799,  800,  336,   59,  803,  804,  805,  488,  807,
  808,  809,  810,  811,  812,  304,  264,  462,  463,  313,
 1458,  319,   41,    0,   41,   44,   44,  360,  461,  109,
  324,  329, 1218,   41,  332,  319,   44,  835,  304,  265,
   59,   59,   59,  341,    0,  960,  344,   59,  332,  302,
  848, 1119,  967, 1119,  960, 1493,  109,  341,  856,  302,
  858,  967,  262,  953,   41,  863,  344,   44,    0,    0,
   42,   43,  278,   45,  280,   47,  938,  303,  938,  969,
  398,  414,   59,    0,  461,  975,  339,    0,   44,    0,
  388,  369,   42,   43, 1370,   45,  339,   47, 1536,  397,
  461, 1510,  329,   59,  388,  332,  461, 1222, 1453,   41,
  260,  319,  338,  397,  278,  387,  280,  387,  927,  319,
    0,  329,  322,  278,  332,  288,  344,   59,   59,  329,
 1539, 1540,  332,  341,  428,  410,  336,  461,  301,  461,
 1208,  341,   59,  441,  344, 1571,   59, 1262,   59,  427,
  398,  369,  398,  319,  304,  453, 1565,  441,  343, 1074,
  360,   41,  459,    0,   44,  320,  343,    0, 1074, 1578,
  397,  455,  280,  379, 1450,  341, 1036, 1037,  286,   59,
  388,  920,  921,  461,  384,  322, 1081,  387,  388,  397,
  488,  437,  329,  378, 1443,  332,  278,  397,  280,  336,
  443,  378, 1000, 1001,  488, 1003, 1004,  344,   41,  427,
    0,   44,  461, 1011,  414, 1281,  319,    0, 1281,   41,
  461,  406,   59,  360,  409,  471,   59,  329,  967,  406,
  332, 1480,  409,  441,    0,  322,   58,    0,  341, 1302,
  425,  441,  344,   44,  459,  453,  401,  384,  425,  336,
 1112, 1146, 1112,  453, 1149,  455,    0, 1441,   41,  323,
  397,   44,   42,   43,  319,   45,  451,   47,  461,   59,
  258, 1520,  461,  360,  451,    0,   59,  414,   42,   43,
  488,   45,  419,   47,  323,    0,  341,  442,  488,    0,
  384,  402,   93,   59, 1092,  397,   59,  384, 1482,  260,
  319, 1550,  319,  322,  441,   40,  317,  318,  280,  265,
  329, 1226, 1227,  332,  286,   59,  453,  336,  455,  307,
 1226, 1227,  341, 1226,  341,  344, 1221,  414,  379,    0,
  280,  343,   44,  388,   59,   40,  286, 1521, 1136,  441,
   45,  360,  319,  304,   59,  322, 1235,  303,   59,  321,
  401,  453,  329,  455, 1152,  332,    0,  408,   63,  336,
  392,  393,  312,  319,  341,  384,  378,  344, 1166,  388,
   41,  388,  260,   44,   41, 1173,   41,   44,  397,   44,
  397,   93,    0,  360,    0,  341,  441,  319,   59,    0,
 1458,  442, 1458, 1308,  406,  414,    0,  409,  278,  357,
  280, 1199, 1308,    0,    0, 1352, 1318,  384,  288,  341,
 1208,  388,  343,  425,    0,   59,  304,  384,    0, 1334,
  397,  301,  441,  272,  441, 1493,   93, 1493, 1334,    0,
   41,  419,  384,   44,  453,   46,  394,  414,  396,  451,
  289,   59, 1302,   59,   44,    0,  259,  378,   59,  437,
   61,  686,  687,    0,  279,   59,  388,  270,    0, 1348,
  461,  419,   59,   59,  441,  397,  302,  404, 1536,  488,
 1536, 1321,    0,   59,    0,  406,  453,   59,  409, 1374,
  386, 1279, 1377,  471,  421,  334,  444,  384,   59, 1436,
 1288, 1289,   41, 1369,  425,   44,    0,  338,  262,  379,
  280,    0,  384,  339,   59,  330,  286,    0,    0,  441,
 1425,  488,   59, 1415,  363,    0,  280,   59,    0, 1425,
  451,  401,  286,   41,   42,   43, 1324,   45,  408,   47,
    0,   59,  312,   59,  375,   44,  319,   41,    0,  364,
   44,    0,  338, 1458,   93, 1460,  329,  388,   41,  332,
  435,   44, 1458,  419, 1460,   59, 1468,  382,  341,  260,
   59,  344,  442,  462,  463, 1441,   59,   59,   45,  461,
   41,  274,  408,   44,   59, 1373,  461,   59, 1493, 1455,
  258,  430,  418,  261,   93,  338,   63, 1493,  319,   59,
 1505,  296,   41,   42,   43, 1510,   45,   59,   47, 1505,
   59,  462,  463,  304, 1510,  388, 1482,  443, 1470,   40,
 1470,  353, 1488,  329,  397,  458,  459,  460, 1416, 1534,
  425, 1536,  375,    0, 1539, 1540, 1531,  322, 1534,  307,
 1536,  462,  264, 1539, 1540,  388,   41,  379, 1425,   44,
   46,  336, 1557,  486,  487, 1521,  322,  317,  353,  338,
 1565, 1557, 1528,  264,  265,    0,  319,  461,  441, 1565,
  336,  453,  273, 1578,   41,  360,  277,   44,  344,  280,
  453, 1458, 1578, 1460,  285,  337,  403,   41,   42,   43,
  341,   45,   59,   47,  360,  296,  321,  403,  299,  384,
   41,  319,  303,   44,  305,   40,   41,   42,   43,   44,
   45,   46,   47,  403,   41,  488, 1493,   44,  319,   41,
   41,  384,   44,   44,   59,   60,   61,   62, 1505,  414,
   41,   42,   43,  439,   45,  384,   47,   40,  444,  340,
  341,   40,   40,  462,  450,  346,  347,  348,  414,  350,
  351,  352,  322,  354,   40,  461,   91, 1534,   93, 1536,
   40,   40,   40,  458,  459,  460,  336,  462,  463,   40,
   40,    0,  280,  374,  344,  376,  462,  461,  286,  262,
 1557,   41,   41,   40,   44,   44,  481,  482,  462,   91,
  360,  486,  487,   42,   43,  321,   45,  279,   47,   44,
  803,  437,  805,   46,  807,  808,  407,  810,  811,  812,
  411,  362,   41,   42,   43,   44,   45,  358,   47,  301,
   41,   42,   43,  424,   45,  451,   47,  418,  322,  296,
   59,   60,   61,   62,   41,  329,  319,   44,  332,  322,
   41,  280,  336,   44,  414,  446,  329,  286,  330,  332,
  344,   41,  435,  336,   44,  443,  288,  412,  341,  470,
  461,  344,   44,   61,   93,   45,  360,  349,  373,   41,
   42,   43,  287,   45,    0,   47,  358,  360,   40,  264,
  481,  482,  364,   63,   40,   44,  353,  401,  437,  403,
  384,  492,  493,  407,  408,  409,  461,  321,   44,  403,
  382,  384,   41,  397,  387,  388,  453,  461,  461,   44,
  429,  278,    0,  280,  397,   41,   42,   43,   44,   45,
  414,   47,  280,   61,    0,   44,  280,  262,  383,  264,
  349,  414,  286,   59,   60,   61,   62,  272,   41,   42,
   43,  278,   45,   44,   47,  280,  301,  441,  264,  461,
  398,  286,  437,   41,  289,  398,   44,  459,  441,  453,
  471,  455,  277,  400,  448,   41,   40,   93,   44,  280,
  453,   59,  455,   42,   43,  286,   45,  312,   47,  448,
  350,   40,   91,   59,  319,   40,  321,  322,  279,   40,
  325,  458,  459,  460,  329,  462,  463,  332,  264,  334,
  384,  336,  412,   44,  390,  488,  341,  342,  383,  344,
  301,   40,  379,  262,  481,  482,   40,  437,    0,  486,
  487,  465,  318,   40,  321,  360,  361,  321,  363,    0,
  264,  280,   41,  262,  401,  264,   44,  286,   45,  330,
  260,  408,  377,  272,  379,  380,  381,  321,  280,  384,
   40,  280,  387,  388,  329,   44,   63,  286,  349,  280,
  289,  449,  397,   40,  277,  286,  459,  358,  274,  285,
   40,  419,  345,  364,  278,  442,  345,   59,  387,  414,
    0,   40,  302,  312,   42,   43,   45,   45,   59,   47,
  319,  382,  321,  322,  314,  430,  325,  387,  387,   58,
  329,   59,  301,  332,  417,  334,  441,  336,  280,  419,
   40,  357,  341,  342,  286,  344,  296,  418,  453,  339,
  455,   41,   42,   43,   44,   45,  461,   47,   40,  461,
   40,  360,  361,   44,  363,  386,  262,  368,  264,   59,
   60,   61,   62,   44,  321,   41,  272,  389,  377,  389,
  379,  380,  381,  488,  389,  384,  344,  274,  387,  388,
  286,  332,   44,  289,  266,   41,   42,   43,  397,   45,
  258,   47,  300,   93,   41,   42,   43,  280,   45,   40,
   47,  264,  423,  286,  461,  414,  312,   41,  408,  277,
  278,   41,  280,  319,   58,  321,  322,  285,  418,  325,
  288,  430,  278,  329,  280,   41,  332,   41,  334,  395,
  336,  280,  441,  301,  441,  341,  342,  286,  344,  307,
  310,  310,  455,  443,  453,    0,  455,   41,   42,   43,
   41,   45,  461,   47,  360,  361,   41,  363,  418,   40,
   40,  461,  353,   41,   42,   43,   40,   45,   40,   47,
   40,  377,   40,  379,  380,  381,   40,   40,  384,  488,
   40,  387,  388,   40,  444,  262,   41,   42,   43,   44,
   45,  397,   47,   40,   40,   40,   40,   40,  458,  459,
  460,   40,  462,  463,   59,   60,   61,   62,  414,  296,
  328,  379,   44,   41,  461,  488,  423,  279,  391,  447,
  392,  481,  482,  379,  430,  271,  486,  487,  279,  288,
  490,  491,  408,  401,  387,  441,  387,  387,   93,  301,
  408,  387,  280,  387,  387,  401,   41,  453,  286,  455,
  301,  419,  408,  379,   41,  461,    0,  296,  278,   40,
  418,   41,  262,   45,  264,   41,   41,  386,  330,  437,
  437,  280,  272,   44,  442,   40,   58,  397,  443,  330,
  302,  339,  488,  443,  339,  302,  442,  349,   41,  289,
   41,  321,  353,  386,  372,   41,  358,   41,  349,  372,
   44,   41,  364,  471,  356,    0,  357,  358,   41,   41,
   41,   41,  312,  364,  353,   59,   41,   41,   41,  319,
  382,  321,  322,   41,  280,  325,   41,   41,   41,  329,
  286,  382,  332,  280,  334,   41,  336,   41,   41,  286,
   59,  341,  342,  394,  344,  396,   41,   40,   43,   44,
   45,   59,   41,   42,   43,  341,   45,  444,   47,   40,
  360,  361,   59,  363,   59,   60,   61,   62,  419,   59,
  341,  458,  459,  460,   59,  462,  463,  377,   41,  379,
  380,  381,   59,  353,  384,  345,  280,  387,  388,  369,
   40,   59,  286,  444,  481,  482,  341,  397,   93,  486,
  487,   59,  280,  490,  491,  384,   44,  262,  286,  264,
   42,   43,  461,   45,  414,   47,  384,  272,  384,  458,
  459,  460,  461,  462,  463,   41,  344,   59,   41,   41,
  430,   41,  436,   44,  289,   44,  411,  302,  305,   40,
  443,  441,  481,  482,   59,  294,  305,  486,  487,  464,
    0,   44,  308,  453,   44,  455,   41,  312,    0,  338,
  384,  461,  384,   40,  319,  264,  321,  322,  321,  278,
  325,  264,  295,  390,  329,  459,    0,  332,  264,  334,
  412,  336,  471,  306,   40,  310,  341,  342,  488,  344,
  313,   41,  344,   43,   44,   45,  344,   41,   42,   43,
  459,   45,  344,   47,  344,  360,  361,    0,  363,   59,
   60,   61,   62,  271,  296,  338,  264,   41,  437,  459,
   44,  271,  377,   41,  379,  380,  381,   40,   40,  384,
   41,   41,  387,  388,  278,   59,  280,   59,  305,   59,
   41,  285,  397,   93,  288,    0,   45,    0,   41,    0,
 1033,   44,  225,   12,  233,  224,  972,  301,  570,  414,
    0,  783,  607,   77,  970,  959,   59,  262,  967,  264,
 1252,  353,  313, 1119,  348,  430,  951,  272,  517,  896,
  403,   41,   42,   43,  717,   45,  441,   47,  960,  718,
  260,  280,  330,  330,  289, 1232, 1475,  286,  453,  496,
  455,   41, 1234,   43,   44,   45,  461, 1479, 1478, 1514,
  708,  354,  435, 1090, 1430, 1493,  439,  312, 1564,   59,
   60,   61,   62, 1511,  319,  372,  321,  322, 1136,  567,
  325, 1441,  302,  488,  329,  379,  778,  332,  962,  334,
 1263,  336,  316,  335,  314,  323,  341,  342,  280,  344,
  764, 1121,  558,   93,  286,  756,   13,  401,  297,  437,
  498,  260,  441,  676,  408,  360,  361,  688,  363,  339,
  430,  654,  431, 1311, 1208, 1488,  458,  459,  460,  461,
  462,  463,  377, 1528,  379,  380,  381, 1580, 1308,  384,
  451,  612,  387,  388, 1002,  836,  371,   -1,  442,  481,
  482,  427,  397,  302,  486,  487,    0,   -1, 1281,   -1,
   -1,   -1,  262,   -1,  264,  314,   -1,   -1,   -1,  414,
   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   -1,   -1,  430,  280,   -1,  408,  289,
  339,   -1,  286,   -1,   -1,   -1,  441,   41,  418,   -1,
   44,   -1,   -1,   -1,  278,    0,  280,   -1,  453,   -1,
  455,  285,  312,   -1,  288,   59,  461,   -1,   -1,  319,
   -1,  321,  322,  443,   -1,  325,   -1,  301,   -1,  329,
   -1,   -1,  332,   -1,  334,  278,  336,  280,   -1,   -1,
   -1,  341,  342,  488,  344,  288,   41,  296,   43,   44,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  301,  408,
  360,  361,   -1,  363,   59,   60,   61,   62,   -1,  418,
  280,   -1,  262,   -1,  264,   -1,  286,  377,   -1,  379,
  380,  381,  272,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,  443,   -1,   -1,  397,   93,  289,
   -1,   -1,   -1,   -1,  353,  379,   -1,   -1,   -1,   -1,
   -1,   -1,  461,   -1,  414,   -1,   -1,   -1,    0,   -1,
   -1,   -1,  312,   -1,   -1,   -1,   -1,  401,   -1,  319,
  430,  321,  322,   -1,  408,  325,  379,   -1,   -1,  329,
   -1,  441,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,
   -1,  341,  342,  453,  344,  455,   -1,   -1,  401,   41,
    0,  461,   44,   -1,   -1,  408,   -1,   -1,  442,   -1,
  360,  361,   -1,  363,  295,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  306,   -1,  377,  488,  379,
  380,  381,  313,   -1,  384,  444,   -1,  387,  388,  442,
   -1,   41,    0,    0,   44,  326,   -1,  397,   -1,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,  262,   59,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,   -1,
  430,  490,  491,   41,   41,   -1,   44,   44,   -1,   -1,
   -1,  441,  473,  474,  475,  476,  477,  478,  479,  480,
   -1,   59,   59,  453,   -1,  455,    0,  262,   -1,  264,
   -1,  461,   -1,   -1,   -1,  319,   -1,  272,  322,   -1,
   -1,   -1,  403,   -1,   -1,  329,   -1,   -1,  332,   -1,
   -1,   -1,  336,   -1,  289,   -1,   -1,  341,  488,  420,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,  435,    0,  360,  312,  439,   -1,
   -1,  442,   -1,   -1,  319,   59,  321,  322,   -1,  450,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
  384,  336,   -1,  387,  388,   -1,  341,  342,  469,  344,
   -1,  306,   -1,  397,   -1,   -1,   41,   -1,  313,   44,
   -1,   -1,  317,  318,   -1,  360,  361,   -1,  363,   -1,
  414,   -1,   -1,   -1,   59,   -1, 1153, 1154,   -1,    0,
  262,   -1,  377,  338,  379,  380,  381, 1164, 1165,  384,
 1167, 1168,  387,  388,   -1,   -1,   -1,  441, 1175, 1176,
 1177, 1178,  397, 1180, 1181, 1182, 1183, 1184, 1185,  453,
   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,
   41,   -1,  262,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,  430,   -1,  319,   59,   -1,
  322,   -1,   -1,   -1,  488,   -1,  441,  329,  403,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,  453,  341,
  455,   -1,  344,   -1,  262,  420,  461,   -1,    0,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,  360,  319,
  435,  278,  322,  280,  439,   -1,   -1,   -1,   -1,  329,
   59,  288,  332,  488,   -1,  450,  336,   -1,   -1,   -1,
   -1,  341,  384,   -1,  344,  387,  388,   -1,   -1,   41,
   -1,   -1,   44,   -1,  469,  397,   -1,    0,   -1,   -1,
  360,  319,   -1,   -1,  322,   -1,   -1,   59,  262,   -1,
   -1,  329,  414,   -1,  332,   -1,   -1,   -1,  336,   -1,
   -1,   -1,   -1,  341,  384,   -1,  344,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   41,  441,
   -1,   44,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,  414,   -1,   59,  262,   -1,   -1,
   -1,    0,  379,   -1,   -1,  319,  384,  384,  322,  387,
  388,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,  397,
   -1,  441,  336,   -1,  401,   -1,  488,  341,   -1,   -1,
  344,  408,   -1,  453,   -1,  455,  414,   -1,   -1,   -1,
   -1,   -1,   41,    0,   -1,   44,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   59,  262,   -1,  441,  329,  442,   -1,  332,  488,   -1,
  384,  336,   -1,  387,  388,  453,  341,  455,   -1,  344,
   -1,   -1,   -1,  397,   41,    0,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,
  414,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  488,   -1,   -1,    0,   -1,   -1,   -1,   -1,  319,  384,
   -1,  322,  387,  388,   -1,   -1,   41,  441,  329,   44,
  279,  332,  397,   -1,   -1,  336,   -1,   -1,   -1,  453,
  341,  455,   -1,  344,   59,   -1,   -1,   -1,   -1,  414,
  262,   -1,  301,   -1,   41,   -1,   -1,   44,  307,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,  488,    0,  441,   -1,   -1,   -1,
   -1,  330,   -1,  384,   -1,   -1,  387,  388,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,  397,   -1,    0,  262,
  349,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  358,
  322,   -1,   -1,  414,   -1,  364,   41,  329,   -1,   44,
  332,   -1,   -1,  488,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  382,   59,   -1,   -1,   -1,   -1,   41,
  441,   -1,   44,   -1,   -1,   -1,   -1,    0,  360,   -1,
   -1,   -1,  453,   -1,  455,   -1,  319,   59,   -1,  322,
   -1,   -1,   -1,  262,   -1,   -1,  329,   -1,   -1,  332,
  419,   -1,  384,  336,   -1,  387,  388,   -1,  341,   -1,
   -1,  344,   -1,   -1,   -1,  397,   -1,  488,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,   -1,  414,   -1,   -1,  262,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,  384,   -1,  322,  387,  388,   -1,   -1,   -1,  441,
  329,   -1,   -1,  332,  397,   -1,    0,  336,   -1,   -1,
   -1,  453,  341,  455,   -1,  344,   -1,  262,   -1,   -1,
   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,   -1,  332,  488,   41,  441,  336,
   44,   -1,   -1,   -1,  341,  384,   -1,  344,  387,  388,
  453,  278,  455,  280,   -1,   59,   -1,   -1,  397,   -1,
    0,  288,   -1,  360,  319,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  329,  414,   -1,  332,   -1,   -1,
    0,  336,   -1,   -1,   -1,  488,  341,  384,   -1,  344,
  387,  388,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  397,   41,  441,   -1,   44,  360,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,  453,   -1,  455,  414,   -1,   59,
  262,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,  397,   -1,  441,   -1,   -1,   -1,   -1,  488,
   41,   -1,  379,   44,  319,   -1,  453,  322,  455,  414,
   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,   59,  262,
   -1,  336,   -1,   -1,  401,   -1,  341,  319,   -1,  344,
  322,  408,   -1,   -1,   -1,   -1,  441,  329,   -1,   -1,
  332,  488,   -1,   -1,  336,  360,   -1,   -1,  453,  341,
  455,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  442,   -1,   -1,  360,  384,
   -1,   -1,  387,  388,   -1,   -1,  319,   -1,   -1,  322,
    0,   -1,  397,  488,    0,   -1,  329,   -1,   -1,  332,
   -1,   -1,  384,  336,   -1,  387,  388,   -1,  341,  414,
   -1,  344,   -1,   -1,   -1,  397,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  360,   -1,   -1,
   -1,   41,  414,   -1,   44,   41,  441,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  453,   59,
  455,  384,   -1,   59,  387,  388,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,  397,   -1,   41,   -1,   -1,   44,
   -1,  453,   -1,  455,    0,  319,   -1,   -1,  322,   -1,
   -1,  414,  262,  488,   59,  329,    0,   -1,  332,   -1,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,  262,   -1,   -1,   -1,  488,   -1,  441,   -1,
   -1,   -1,   -1,   -1,   40,   41,  360,   -1,   44,   -1,
  453,   -1,  455,   -1,   -1,   -1,   40,   41,   -1,   -1,
   44,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,  319,
  384,   -1,  322,  387,  388,   59,   -1,   -1,   -1,  329,
   -1,   -1,  332,  397,   -1,  488,  336,   -1,   -1,  319,
   -1,  341,  322,   -1,  344,   91,   -1,   -1,   -1,  329,
  414,    0,  332,   -1,   -1,   -1,  336,   91,   -1,   -1,
  360,  341,   -1,   -1,  344,   -1,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  441,  329,   -1,
  360,  332,   -1,   -1,  384,  336,   -1,  387,  388,  453,
  341,  455,   41,  344,   -1,   44,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,  360,
   59,   -1,   -1,   -1,  414,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  488,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,  414,    0,  387,  388,   -1,   -1,
   -1,  441,   91,   -1,   -1,   -1,  397,   -1,  278,   -1,
  280,   -1,  278,  453,  280,  455,   -1,   -1,  288,   -1,
   -1,  441,  288,  414,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,  453,   -1,  455,   41,   -1,   -1,   44,
   -1,   -1,   -1,  278,   -1,  280,   -1,   -1,  488,   -1,
  441,   -1,   -1,  288,   59,   -1,   -1,    0,   -1,   -1,
   -1,   -1,  453,   -1,  455,   -1,   -1,   41,  488,   -1,
   44,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,   59,   91,   -1,  274,   -1,
   -1,  277,  278,   -1,  280,   -1,   -1,  488,   41,  285,
  274,   44,  288,  277,  278,   -1,  280,   -1,   -1,  379,
   -1,  285,    0,  379,  288,  301,   59,   91,   -1,   -1,
   -1,  307,   -1,   -1,  310,   -1,   -1,  301,   -1,   -1,
   -1,  401,   -1,  307,   -1,  401,  310,   -1,  408,   -1,
   -1,   -1,  408,    0,  379,   -1,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  401,   -1,   -1,  258,
   -1,   59,  442,  408,   -1,   -1,  442,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  274,   -1,   44,  277,  278,
   -1,  280,   -1,  379,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   59,   -1,  271,  379,   -1,  442,   -1,   -1,
   -1,   -1,  301,   -1,   -1,  401,   -1,   -1,  307,   -1,
   -1,  310,  408,   -1,   -1,   40,  412,  401,   43,   -1,
   45,   -1,   -1,  419,  408,  302,   -1,   -1,  412,   -1,
   -1,   -1,  309,   58,   -1,  419,  313,  314,   63,  316,
   -1,  437,  319,  258,   -1,   -1,  442,   -1,   -1,   40,
   -1,   -1,   43,  437,   45,   -1,  333,   -1,  442,  274,
   -1,   -1,  339,  278,   -1,  280,   -1,   58,   -1,   -1,
  285,  467,   63,  288,  258,  471,   -1,   -1,   -1,   -1,
  379,   -1,   -1,  467,   -1,   -1,  301,  471,   -1,   -1,
  274,   -1,  307,   -1,  278,  310,  280,   -1,   -1,   -1,
   -1,  285,  401,   -1,  288,  258,   -1,   -1,   -1,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,  301,   -1,   -1,
  419,  274,  399,  307,   -1,  278,  310,  280,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,  437,   -1,
   -1,  418,   -1,  442,   -1,   -1,   -1,   -1,  301,   -1,
   -1,   -1,   -1,   -1,  307,   -1,  433,  310,   -1,   -1,
  258,   -1,   -1,   -1,  379,   -1,  443,   -1,  467,   -1,
   -1,   -1,  471,   -1,   -1,  452,   -1,  454,   -1,  277,
  278,   -1,  280,   -1,  461,   -1,  401,  285,   -1,   40,
  288,  258,   43,  408,   45,  379,   -1,  412,   -1,   -1,
   -1,   -1,   -1,  301,  419,   -1,   -1,   58,   -1,  307,
   -1,  278,   63,  280,   -1,   -1,   -1,  401,  285,   -1,
   -1,  288,  437,   -1,  408,   -1,  379,  442,  412,   -1,
   -1,   -1,   -1,   -1,  301,  419,   -1,   -1,   -1,   -1,
  307,   -1,  267,   -1,   -1,   -1,   -1,   -1,  401,   -1,
   -1,  276,  467,  437,   -1,  408,  471,   -1,  442,  412,
   -1,   -1,   -1,   -1,   -1,  290,  419,   -1,  293,   -1,
   -1,  296,  297,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  379,   -1,  467,  437,  276,   -1,  471,   -1,  442,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,  327,  401,   -1,  296,  297,   -1,   -1,   -1,
  408,   -1,  379,   -1,  467,    0,   -1,   -1,  471,  417,
   -1,  419,    0,   -1,  315,   -1,   -1,   -1,   -1,   -1,
  355,  356,   40,   -1,  401,   43,  327,   45,   -1,  437,
   -1,  408,  367,   -1,  442,   -1,  371,   -1,   -1,   -1,
   58,   -1,  419,   -1,  379,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
  437,   -1,   -1,  471,   59,  442,  367,   -1,   -1,   -1,
  371,   59,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  422,   -1,   -1,
   -1,   -1,   -1,   -1,  471,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,  276,   -1,  418,   -1,   -1,
   -1,  422,   -1,  458,  459,  460,  461,  462,  463,  290,
   -1,   -1,   -1,  434,   -1,  296,  297,  472,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,  315,  490,  491,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  472,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   58,   -1,   -1,  355,  356,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,  461,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,   -1,   -1,   -1,   -1,
  490,  491,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,  276,   -1,
   43,  422,   45,  258,   -1,   -1,   -1,   -1,   -1,   -1,
  258,   -1,  290,  434,   -1,   58,   -1,   -1,  296,  297,
   63,   -1,   -1,  444,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  301,   -1,   -1,  327,
   -1,  472,  307,  301,   -1,   -1,   -1,   -1,   -1,  307,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,   -1,   -1,   -1,  330,   -1,  355,  356,   -1,
   -1,   -1,  330,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,  349,   -1,   -1,   -1,   -1,  271,
   -1,  349,  357,  358,   -1,   -1,   -1,   -1,   -1,  364,
  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
  302,   -1,   -1,  260,  382,   -1,  263,  309,   -1,   -1,
  267,  313,  314,   -1,  316,   -1,   -1,  319,  426,  276,
   40,   -1,   -1,   43,   -1,   45,  434,   -1,   -1,   -1,
   -1,  333,   -1,  290,  419,   -1,  444,  339,   58,  296,
  297,  419,   -1,   63,   -1,  430,   -1,   -1,   -1,   59,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
  327,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,   -1,   -1,  399,  355,  356,
   -1,   -1,   40,  276,   -1,   43,   -1,   45,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  418,  290,   -1,    0,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,   -1,  454,   -1,  327,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   59,   -1,
   -1,   -1,  355,  356,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,  267,  258,   -1,
   -1,   -1,   -1,  426,   -1,   40,  276,   -1,   43,   -1,
   45,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  290,  444,   -1,   58,   -1,   -1,  296,  297,   63,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,  301,   -1,   -1,   -1,   -1,   -1,  307,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,  481,  482,
  483,  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,
  330,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,  355,  356,   40,  276,  349,
   43,   -1,   45,   -1,   -1,  271,   -1,  367,  358,   -1,
   -1,  371,  290,   -1,  364,   58,   -1,   -1,  296,  297,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,  302,  258,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,  314,  327,
  316,   -1,   -1,  319,   -1,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  426,  333,   -1,  419,
   -1,   -1,   -1,  339,  434,   -1,   -1,  355,  356,   -1,
  301,   -1,   -1,   -1,  444,   -1,  307,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,  330,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  349,   -1,
  490,  491,   -1,  399,   -1,  260,   -1,  358,  263,   -1,
   -1,   -1,  267,  364,   -1,   -1,   -1,   -1,  426,   -1,
   40,  276,  418,   43,   -1,   45,  434,   -1,   -1,   -1,
   -1,  382,   -1,   -1,   -1,  290,  444,  433,   58,   -1,
   -1,  296,  297,   63,   -1,   -1,   -1,  443,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,  454,   -1,
   -1,   -1,   -1,   -1,  472,  461,   -1,   -1,  419,   -1,
   -1,   -1,  327,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,   -1,   -1,  261,   -1,   -1,
  355,  356,   40,  276,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,  290,   -1,  283,
   58,   -1,   -1,  296,  297,   63,   -1,  291,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,  300,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  328,   42,   43,   -1,   45,   -1,
   -1,  426,   -1,   -1,   -1,  339,   -1,   -1,   -1,  434,
   -1,   58,  355,  356,   -1,   -1,   63,   -1,   -1,  444,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,
  260,   -1,  406,  263,   -1,   40,   -1,  267,   43,  413,
   45,   -1,  416,  426,  418,  419,  276,   -1,   -1,   -1,
   -1,  434,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
  290,  444,   -1,   -1,   -1,   -1,  296,  297,   -1,  443,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,  481,  482,
  483,  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,  276,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,  367,   45,   -1,
   -1,  371,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   58,  461,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,   -1,  327,
  267,  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  434,  353,   -1,  355,  356,  296,
  297,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  490,  491,  267,   -1,   -1,   -1,  353,   -1,  355,  356,
   -1,  276,   40,   41,   -1,   43,   -1,   45,   -1,   -1,
  367,   -1,   -1,   -1,  371,  290,  434,   -1,   -1,   -1,
   58,  296,  297,   -1,   -1,   63,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,  434,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
  267,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  276,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,  290,   -1,  472,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  418,   -1,   43,   -1,   45,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   40,  490,  491,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,  434,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,  327,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  461,   -1,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
  484,  485,   -1,   -1,   -1,   -1,  490,  491,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,  434,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,  327,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  481,  482,  483,  484,  485,  486,  487,
  276,   -1,  490,  491,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,   40,   -1,  290,   43,   -1,   45,   -1,  367,
  296,  297,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,  444,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,  276,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  472,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
  327,   -1,   -1,   60,   61,   62,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,
   -1,   -1,  458,  459,  460,  461,  462,  463,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,  481,  482,  483,  484,  485,
  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   42,   43,   -1,   45,   -1,   47,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,  434,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,  327,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,  490,  491,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  273,   -1,   -1,  371,  277,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,  444,  350,  351,  352,
   -1,  354,   -1,  273,   -1,   -1,   -1,  277,  325,   -1,
  458,  459,  460,  461,  462,  463,   -1,  334,   -1,   -1,
   -1,  374,  292,  376,  472,  342,  296,   -1,   -1,  299,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,  272,  490,  491,  361,   -1,  363,   -1,   -1,  280,
   -1,   -1,   -1,   -1,  407,  286,   -1,   -1,  289,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,   -1,   -1,   -1,
  340,  424,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,  273,   -1,   -1,   -1,
  277,   -1,   -1,  446,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  334,  374,  292,  376,   -1,  461,  296,
   -1,  342,  299,  430,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  361,   -1,  363,   -1,   -1,   -1,   -1,  407,   -1,  492,
  493,   -1,  412,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,  273,   -1,  340,  424,  277,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,  273,
   -1,   -1,   -1,  277,  296,   -1,  446,  299,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  292,  376,
   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,  430,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,  340,   -1,
  407,   -1,  492,  493,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,   -1,  273,   -1,  340,  424,  277,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,  374,   -1,  376,   -1,   -1,  296,   -1,  446,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,  340,  424,  407,   -1,  492,  493,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,   -1,  273,   -1,   -1,
  424,  277,   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  461,
  296,   -1,  446,  299,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,
  492,  493,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
   -1,   -1,   -1,   -1,  340,  424,   -1,   -1,  492,  493,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  407,   -1,  492,  493,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  492,  493,
};
#define YYFINAL 17
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 493
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","LIMIT","SUBSTRING","CONNECTION_ID","TRANSACTION_ID",
"LARGEINT","KW_INT64",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : USER",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : var_const_list",
"proc_inputs : '(' var_const_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"var_const_list : variable",
"var_const_list : constant",
"var_const_list : column_name",
"var_const_list : null_value",
"var_const_list : var_const_list ',' variable",
"var_const_list : var_const_list ',' constant",
"var_const_list : var_const_list ',' column_name",
"var_const_list : var_const_list ',' null_value",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_string default_opt end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION nonneg_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : SYMBOL",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT distinct_clause select_list from_clause where_clause group_clause having_clause limit_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : column_name",
"column_list : column_list ',' column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : USER",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyerror (TEXT *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static SSHORT	lines, att_charset;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (file->fil_partitions)
    {
    if (!file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*file->fil_length,file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((file->fil_length) && (file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    if (c == '\n')
	{
	lines++;
	line_start = ptr + 1;
	}

    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr + 1;
		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p,UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	};
    yylval = (NOD) MAKE_string (string, p - string);
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start), 
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 18:
{ DSQL_debug = (int) yyvsp[0];
			  if (DSQL_debug > 10)
			      yydebug = DSQL_debug;
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 19:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 25:
{ yyval = yyvsp[0]; }
break;
case 26:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_list (yyvsp[0]); }
break;
case 30:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 31:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 32:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 33:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 36:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 38:
{ yyval = 0; }
break;
case 39:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 42:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 49:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 51:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = yyvsp[0];}
break;
case 70:
{ yyval = yyvsp[0]; }
break;
case 71:
{ yyval = yyvsp[0]; }
break;
case 72:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 74:
{ field->fld_dtype = dtype_blob; }
break;
case 75:
{ 
			field->fld_dtype = dtype_cstring; 
			field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 76:
{ yyval = (NOD) NULL; }
break;
case 78:
{ yyval = yyvsp[-1]; }
break;
case 80:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 84:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 85:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 86:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 89:
{ yyval = yyvsp[0]; }
break;
case 90:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 91:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 92:
{ yyval = yyvsp[0]; }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = yyvsp[0]; }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 102:
{ yyval = NULL; }
break;
case 103:
{ yyval = make_list (yyvsp[0]); }
break;
case 105:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 106:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 107:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 108:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 109:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 110:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 111:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 112:
{ yyval = (NOD) 0;}
break;
case 113:
{ yyval = yyvsp[-1]; }
break;
case 114:
{ yyval = (NOD) NULL; }
break;
case 117:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 119:
{ yyval = NULL; }
break;
case 120:
{ yyval = NULL; }
break;
case 121:
{ yyval = yyvsp[0]; }
break;
case 122:
{ yyval = (NOD) NULL; }
break;
case 123:
{ yyval = (NOD) NULL; }
break;
case 126:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 127:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 130:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 131:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 132:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 133:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 137:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 138:
{yyval = (NOD) NULL;}
break;
case 141:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 142:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 144:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 145:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 146:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 147:
{yyval = (NOD) NULL;}
break;
case 150:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 159:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 160:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 161:
{ file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 162:
{ file->fil_flags |= LOG_serial;
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 163:
{ file = make_file(); 
			  file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) file);}
break;
case 164:
{ file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) file); }
break;
case 166:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 167:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) file); }
break;
case 168:
{ file = make_file();
			  file->fil_name = (STR) yyvsp[0]; }
break;
case 171:
{ file->fil_length = (SLONG) yyvsp[0]; }
break;
case 172:
{ file  = make_file ();}
break;
case 177:
{ file->fil_start = (SLONG) yyvsp[0];}
break;
case 178:
{ file->fil_length = (SLONG) yyvsp[-1];}
break;
case 185:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 186:
{ yyval = yyvsp[0]; }
break;
case 187:
{ yyval = yyvsp[0]; }
break;
case 188:
{ yyval = (NOD) NULL; }
break;
case 190:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 193:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 194:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 195:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 196:
{ 
			field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 199:
{ yyval = NULL; }
break;
case 200:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 203:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 204:
{ field = make_field (yyvsp[0]);
				  yyval = (NOD) field; }
break;
case 205:
{ yyval = yyvsp[-1]; }
break;
case 206:
{ field = make_field (NULL);
			  yyval = (NOD) field; }
break;
case 207:
{ yyval = yyvsp[0]; }
break;
case 208:
{ yyval = (NOD) NULL; }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = make_node (nod_user_name, (int) 0, NULL); }
break;
case 211:
{ yyval = yyvsp[0]; }
break;
case 212:
{ yyval = yyvsp[0]; }
break;
case 213:
{ yyval = yyvsp[0]; }
break;
case 214:
{ yyval = (NOD) NULL; }
break;
case 217:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 218:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 219:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 220:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 222:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 223:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 224:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 225:
{ yyval = yyvsp[0]; }
break;
case 226:
{ yyval = NULL ;}
break;
case 231:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 235:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 236:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 237:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 238:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 239:
{ yyval = NULL;}
break;
case 240:
{ yyval = yyvsp[0];}
break;
case 241:
{ yyval = yyvsp[0];}
break;
case 242:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 243:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 244:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 245:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 246:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 247:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 248:
{ yyval = make_list (yyvsp[-1]); }
break;
case 249:
{ yyval = NULL; }
break;
case 250:
{ yyval = yyvsp[0]; }
break;
case 251:
{ yyval = NULL; }
break;
case 253:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 254:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 255:
{ yyval = make_list (yyvsp[0]); }
break;
case 256:
{ yyval = NULL; }
break;
case 258:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 259:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 262:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 263:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 265:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 268:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 274:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 278:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 279:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 280:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 281:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 282:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0]); }
break;
case 283:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 284:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 285:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 286:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 287:
{ yyval = make_list (yyvsp[0]); }
break;
case 288:
{ yyval = make_list (yyvsp[-1]); }
break;
case 289:
{ yyval = NULL; }
break;
case 290:
{ yyval = make_list (yyvsp[0]); }
break;
case 291:
{ yyval = make_list (yyvsp[-1]); }
break;
case 292:
{ yyval = NULL; }
break;
case 297:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 298:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 299:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 300:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 303:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 304:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 305:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 306:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 307:
{ yyval = NULL; }
break;
case 309:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 310:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 312:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 313:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 315:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 317:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 318:
{ yyval = make_list (yyvsp[0]); }
break;
case 319:
{ yyval = make_list (yyvsp[-1]); }
break;
case 320:
{ yyval = NULL; }
break;
case 324:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 325:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 329:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_list (yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 338:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 339:
{ yyval = yyvsp[-1]; }
break;
case 340:
{ beginning = lex_position(); }
break;
case 341:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 342:
{ beginning = last_token; }
break;
case 343:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 344:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 345:
{ yyval = 0; }
break;
case 346:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 347:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 348:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 349:
{ yyval = NULL; }
break;
case 350:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 354:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 355:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 369:
{ yyval = NULL; }
break;
case 370:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 371:
{ yyval = yyvsp[0]; }
break;
case 372:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 373:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 374:
{ yyval = yyvsp[0]; }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 377:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 380:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 381:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 382:
{ yyval = yyvsp[0]; }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 385:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 386:
{ yyval = yyvsp[0]; }
break;
case 387:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 389:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 390:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = yyvsp[0]; }
break;
case 394:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 395:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 397:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 417:
{ yyval = NULL; }
break;
case 418:
{ yyval = NULL; }
break;
case 419:
{ yyval = NULL; }
break;
case 420:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 421:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 422:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 423:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 424:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 425:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 426:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 427:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 429:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 430:
{ yyval = yyvsp[0]; }
break;
case 431:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 432:
{ yyval = yyvsp[0]; }
break;
case 433:
{ yyval = yyvsp[0]; }
break;
case 435:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 436:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 438:
{ yyval = NULL; }
break;
case 440:
{ yyval = NULL; }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 443:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 444:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 445:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 446:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 448:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 449:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 450:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 451:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 452:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 457:
{ field->fld_ranges = make_list (yyvsp[-1]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 458:
{ field->fld_ranges = make_list (yyvsp[-2]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 460:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 461:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 462:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 468:
{ 
			field->fld_dtype = dtype_int64; 
			field->fld_length = sizeof (SINT64); 
			}
break;
case 469:
{ 
			field->fld_dtype = dtype_long; 
			field->fld_length = sizeof (SLONG); 
			}
break;
case 470:
{ 
			field->fld_dtype = dtype_short; 
			field->fld_length = sizeof (SSHORT); 
			}
break;
case 471:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    field->fld_dtype = dtype_timestamp; 
			    field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    field->fld_dtype = dtype_sql_date; 
			    field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 472:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			field->fld_dtype = dtype_sql_time; 
			field->fld_length = sizeof (SLONG);
			}
break;
case 473:
{ 
			field->fld_dtype = dtype_timestamp; 
			field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 478:
{ 
			field->fld_dtype = dtype_blob; 
			}
break;
case 479:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-1];
			field->fld_sub_type = 0;
			}
break;
case 480:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-3];
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 481:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = 80;
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 482:
{
			field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 483:
{
			field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 484:
{
			field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 485:
{
			field->fld_sub_type_name = yyvsp[0];
			}
break;
case 486:
{
			field->fld_sub_type = (USHORT) 0;
			}
break;
case 487:
{
			field->fld_character_set = yyvsp[0];
			}
break;
case 489:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 490:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			field->fld_flags |= FLD_national;
			}
break;
case 491:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 492:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 493:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			}
break;
case 494:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 503:
{ 
			  field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 504:
{  
			   field->fld_sub_type = dsc_num_type_decimal;
			   if (field->fld_dtype == dtype_short)
				{
				field->fld_dtype = dtype_long;
				field->fld_length = sizeof (SLONG);
				};
			}
break;
case 505:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 506:
{
			field->fld_dtype = dtype_long; 
		    	field->fld_length = sizeof (SLONG); 
			field->fld_precision = 9;
		    	}
break;
case 507:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 508:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			    }
			field->fld_precision = (USHORT) yyvsp[-3];
			field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 511:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    field->fld_dtype = dtype_double;
			    field->fld_length = sizeof (double); 
			    }
			else
			    {
			    field->fld_dtype = dtype_real; 
			    field->fld_length = sizeof (float);
			    }
			}
break;
case 512:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 513:
{ 
			field->fld_dtype = dtype_real; 
			field->fld_length = sizeof (float); 
			}
break;
case 514:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 515:
{ yyval = yyvsp[-1]; }
break;
case 516:
{ yyval = 0; }
break;
case 520:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 521:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 522:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 523:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 524:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 527:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 528:
{ yyval = (NOD) NULL; }
break;
case 530:
{ yyval = (NOD) NULL; }
break;
case 531:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 533:
{ yyval = (NOD) NULL; }
break;
case 535:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 540:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 541:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 542:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 543:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 544:
{ yyval = yyvsp[0];}
break;
case 546:
{ yyval = yyvsp[0];}
break;
case 547:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 548:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 549:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 550:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 551:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 552:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 553:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 554:
{ yyval = 0; }
break;
case 555:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 556:
{ yyval = (NOD) NOD_SHARED; }
break;
case 557:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 558:
{ yyval = (NOD) 0; }
break;
case 559:
{ yyval = (NOD) NOD_READ; }
break;
case 560:
{ yyval = (NOD) NOD_WRITE; }
break;
case 562:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 563:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 564:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 565:
{ yyval = 0; }
break;
case 567:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 568:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 569:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 570:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 571:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 572:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 573:
{ yyval = make_list (yyvsp[0]); }
break;
case 574:
{ yyval = 0; }
break;
case 576:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 577:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 578:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 579:
{ yyval = 0; }
break;
case 580:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 581:
{ yyval = 0; }
break;
case 582:
{ yyval = yyvsp[0]; }
break;
case 583:
{ yyval = 0; }
break;
case 584:
{ yyval = yyvsp[0]; }
break;
case 585:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 586:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 587:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 588:
{ yyval = 0; }
break;
case 589:
{ yyval = make_list (yyvsp[0]); }
break;
case 590:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 594:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 595:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{ yyval = make_list (yyvsp[0]); }
break;
case 598:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 601:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 602:
{ yyval = yyvsp[-1]; }
break;
case 603:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 604:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 605:
{ yyval = make_list (yyvsp[-1]); }
break;
case 606:
{ yyval = NULL; }
break;
case 608:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 612:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 613:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 614:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 615:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 616:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 617:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 618:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 619:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 620:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 621:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 622:
{ yyval = make_list (yyvsp[0]); }
break;
case 623:
{ yyval = 0; }
break;
case 625:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 628:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 629:
{ yyval = yyvsp[0]; }
break;
case 630:
{ yyval = 0; }
break;
case 631:
{ yyval = yyvsp[0]; }
break;
case 632:
{ yyval = 0; }
break;
case 633:
{ yyval = yyvsp[0]; }
break;
case 634:
{ yyval = 0;}
break;
case 635:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 636:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 637:
{ yyval = 0;}
break;
case 638:
{ yyval = yyvsp[0]; }
break;
case 639:
{ yyval = 0; }
break;
case 640:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 641:
{ yyval = 0; }
break;
case 642:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 643:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 644:
{ yyval = 0; }
break;
case 645:
{ yyval = 0; }
break;
case 647:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 648:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 651:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 652:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 653:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 654:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 656:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 657:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 658:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 660:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 663:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 664:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 665:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 668:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 669:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 671:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 672:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 675:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 677:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 678:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 682:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 683:
{ yyval = yyvsp[0]; }
break;
case 685:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 688:
{ yyval = NULL; }
break;
case 689:
{ yyval = make_list (yyvsp[-1]); }
break;
case 691:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 693:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 695:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 699:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 710:
{ yyval = yyvsp[-1]; }
break;
case 711:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 714:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 716:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 717:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 718:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 721:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 722:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 723:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 724:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 725:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 726:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 727:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 728:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 729:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 730:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 731:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 732:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 733:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 734:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 737:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 738:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 739:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 741:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 743:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 744:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 745:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 747:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 749:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 750:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 751:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 753:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 754:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 755:
{ yyval = make_list (yyvsp[-1]); }
break;
case 756:
{ yyval = yyvsp[-1]; }
break;
case 757:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 758:
{ yyval = make_node (nod_select_expr, e_sel_count, 
		 		yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 766:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 767:
{ yyval = yyvsp[0]; }
break;
case 768:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 769:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 771:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 772:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 773:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 774:
{ yyval = yyvsp[-1]; }
break;
case 775:
{ yyval = yyvsp[-1]; }
break;
case 776:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 777:
{ yyval = yyvsp[0]; }
break;
case 778:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 779:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 780:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 781:
{ yyval = yyvsp[0]; }
break;
case 782:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 783:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 784:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 785:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 787:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 789:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 790:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 791:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 792:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 793:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 794:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 796:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 797:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 798:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 799:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 804:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 805:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 806:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 807:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 808:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 809:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 810:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 811:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 812:
{ yyval = yyvsp[0]; }
break;
case 813:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 815:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 816:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 817:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 818:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 819:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 821:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 822:
{ yyval = yyvsp[0];}
break;
case 823:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 824:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 825:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 826:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 827:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 828:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 829:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 830:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 831:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 832:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 833:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 834:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 835:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 836:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 837:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 838:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 839:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 840:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 841:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 842:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 843:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 844:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 845:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 846:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 847:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 850:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
