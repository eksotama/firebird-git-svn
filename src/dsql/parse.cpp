#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 *
 */

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

#define YYSTYPE		NOD
#ifdef DEBUG
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	// extern "C"

static FLD	field;
static FIL	file;
static NOD	field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;


#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#endif
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define LIMIT 488
#define INT64 489
#define SUBSTRING 490
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    9,    9,
    9,    9,    9,   19,   19,   18,   18,   18,   29,   29,
   22,   30,   30,   30,   30,   30,   21,   21,   27,   27,
   23,   12,   12,   12,   12,   12,   12,   12,   33,   24,
   24,   24,   24,   34,   34,   34,   20,   20,   35,   35,
   35,   25,   25,   39,   26,   26,   41,   41,    6,   42,
   42,   44,   49,   49,   49,   46,   46,   46,   53,   53,
   54,   47,   47,   56,   56,   56,   56,   43,    5,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   61,   61,   64,   64,   64,   72,   80,   80,   80,   81,
   81,   82,   82,   83,   83,   87,   87,   71,   90,   90,
   92,   92,   93,   93,   96,   96,   97,   98,   98,   99,
  100,   69,   73,   70,   84,   84,  103,  104,  104,  106,
  106,  107,  107,  107,  107,  107,  105,  105,  108,  108,
  109,  109,  109,  109,  111,  111,  111,  111,  110,  110,
  115,  115,  114,   88,  116,  116,  117,  120,  121,  121,
  122,  118,  119,  119,  123,  123,  124,  124,  125,  125,
  125,   86,   86,   86,   66,  126,  126,  126,  127,  127,
  128,  128,  129,  129,  129,  135,   76,   76,  131,  131,
   94,   94,   89,  140,  141,   55,  132,  132,   95,   95,
   95,   95,  133,  133,  145,  145,  146,  148,  148,  148,
  148,  148,  130,  147,  147,  151,  151,  151,  151,  153,
  154,  155,  150,  149,  149,  149,  149,  149,  156,  157,
  158,  158,  158,  158,   65,  163,  159,  159,  160,  160,
  164,  164,  165,  161,  161,  166,  166,  167,  168,  168,
  162,  162,  170,  170,  169,  169,  169,  169,  169,  169,
  169,  169,  169,  169,  169,  169,  169,  169,  173,  174,
  175,  176,  176,  177,  183,  179,  179,  179,  180,  180,
  180,  185,  185,  185,  185,  185,  185,  185,  185,  181,
  181,  181,  181,  178,  182,  182,  171,  171,  187,  188,
  188,  189,  189,  189,  189,   11,  191,  191,  191,  192,
  192,  192,  192,  192,  192,   68,  194,  197,  197,  197,
  198,  201,  206,  206,  207,  207,  208,  208,  137,  196,
   77,   79,  195,  195,   67,  211,  211,  211,  212,  212,
  212,  212,  212,  212,  213,  213,  214,    2,  216,  216,
  216,  216,  216,  216,  216,  222,  222,  224,  224,  224,
  224,  224,  224,  224,  217,  217,  225,  225,  225,  225,
  225,  225,  225,  221,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  227,  227,  229,  229,  228,  226,  226,  226,  223,
  223,  219,  220,  220,  231,  231,  231,  231,  232,  232,
  218,  233,  233,  234,  234,    8,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,   91,   91,  134,
  134,  238,  238,  241,  241,  243,  243,   50,   50,  240,
  240,  240,  240,  240,  240,  240,  240,  248,  248,  239,
  239,  239,  239,  249,  249,   58,   58,   58,   52,   52,
  245,  245,  245,  242,  242,  242,  253,  253,  253,  252,
  252,  251,  251,  251,  246,  246,  256,  254,  254,  254,
  255,  255,  247,  247,  247,  247,  257,  257,   15,   15,
   15,  259,  259,  259,    4,   13,  261,  261,  262,  262,
  263,  263,  258,  264,  264,  265,  265,  266,  266,  266,
  266,  267,  267,  268,  268,  269,  269,  271,  271,  271,
  272,  272,  272,  273,  273,  273,  270,  275,  275,  275,
  276,  276,  274,  274,  277,  279,  279,  278,  278,  260,
   14,  280,  280,  280,  281,  281,  284,  284,  285,  285,
   62,   62,   62,  282,  282,  286,  286,  283,  199,  199,
  200,  200,  290,  290,  291,  291,  291,  287,  294,  294,
  295,  295,  296,  296,  297,  297,  298,  298,  300,  300,
  301,  301,  209,  209,   28,  210,  210,  210,  210,  210,
  210,  210,  210,  203,  203,  302,  302,  303,  303,  303,
  204,  204,  202,  202,  288,  288,  305,  305,  305,  205,
  205,  306,  307,  307,  307,  307,  307,  308,  308,  309,
  309,  310,  310,  311,  311,  311,  312,  312,   10,   10,
  313,  313,    7,    7,  314,  315,  316,   16,   16,  317,
  318,  319,  319,  172,  292,  292,    3,    3,  320,  320,
  320,  322,  322,   58,  321,  321,  323,  323,   31,   31,
   75,   74,   74,  139,  139,  139,  136,  101,  101,  101,
  101,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  326,  326,  326,  326,  326,  326,  326,  326,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  331,  331,  337,  337,  327,  327,
  328,  328,  328,  328,  329,  329,  333,  333,  334,  334,
  334,  334,  332,  335,  330,  330,  338,  338,  336,  340,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,  144,  144,  144,  341,  344,  344,  142,  142,
  345,  345,  345,  345,  345,  343,  343,  343,  343,  343,
  339,  339,  339,  339,  339,  339,  193,  346,   48,   48,
   17,   17,  215,  347,   51,  113,  244,  244,   85,  342,
  342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
  342,  342,  342,  342,  304,  304,  348,  348,  348,  348,
  348,  348,  348,  348,  289,  289,  143,   45,  250,  112,
  138,  324,  152,  186,  237,   60,   57,  190,  102,   63,
  293,   32,   40,  299,  236,   36,   38,  184,   37,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    7,    8,
    6,    7,    5,    1,    2,    1,    2,    1,    1,    3,
    1,    1,    1,    1,    2,    2,    3,    0,    3,    0,
    1,    7,    8,    6,    7,    6,    7,    4,    3,    1,
    3,    3,    3,    2,    2,    2,    1,    3,    1,    2,
    2,    1,    3,    1,    1,    3,    1,    2,    2,    2,
    3,    8,    1,    1,    5,    0,    1,    3,    1,    3,
    2,    1,    3,    2,    3,    4,    2,    9,    2,    3,
    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    0,    0,    1,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    1,    1,    4,    3,    3,    3,    3,    1,    1,
    6,    3,    1,    3,    1,    3,    2,    1,    0,    2,
    3,    1,    0,    1,    1,    2,    3,    4,    0,    1,
    2,    0,    1,    1,    5,    3,    2,    0,    1,    3,
    1,    1,    6,    3,    2,    6,    2,    1,    2,    2,
    2,    0,    1,    1,    2,    0,    2,    0,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    3,    0,    2,    0,
    1,    3,    2,    1,    0,    1,    2,    5,    1,    1,
    3,    4,    1,    2,    2,    2,    3,    1,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    6,    4,
    7,    8,    6,    4,    2,    1,    3,    0,    2,    4,
    0,    1,    1,    1,    1,    3,    3,    3,    3,    1,
    1,    3,    3,    6,    3,    0,    1,    2,    4,    1,
    3,    2,    2,    2,    1,    4,    1,    3,    0,    1,
    1,    1,    3,    3,    3,    7,    1,    1,    3,    4,
    8,    2,    1,    3,    1,    1,    6,    3,    0,    0,
    0,    0,    3,    0,    9,    1,    1,    0,    2,    2,
    2,    2,    2,    2,    2,    0,    4,    2,    3,    3,
    2,    2,    3,    3,    2,    1,    2,    4,    3,    2,
    2,    2,    2,    3,    1,    3,    3,    3,    2,    2,
    4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    1,    1,    0,    2,
    2,    0,    1,    2,    2,    2,    2,    2,    1,    3,
    7,    1,    0,    1,    0,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    2,    2,    1,    1,    1,
    1,    4,    5,    1,    3,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    3,    0,    1,    3,    1,    1,    3,
    2,    0,    2,    0,    2,    0,    3,    5,    0,    2,
    0,    4,    1,    2,    1,    1,    0,    1,    3,    2,
    1,    1,    2,    1,    4,    2,    1,    3,    8,    5,
    1,    3,    1,    1,    4,    4,    4,    1,    1,    5,
    5,    1,    3,    3,    1,    1,    7,    7,    5,    3,
    0,    1,    1,    1,    2,    0,    1,    1,    1,    0,
    3,    1,    3,    1,    3,    3,    1,    1,    3,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    1,    1,    5,    6,
    3,    4,    5,    6,    3,    4,    3,    4,    3,    4,
    4,    5,    4,    4,    3,    4,    3,    3,    8,    8,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    1,    3,
    1,    1,    1,    1,    1,    4,    1,    3,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    1,    1,    1,    3,    3,    3,    1,    1,    1,    2,
    1,    2,    1,    1,    1,    1,    1,    2,    1,    4,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    6,    4,    6,    6,    4,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,  499,  500,  501,    0,  552,  643,  644,
  648,  649,  412,    0,    0,    0,    0,    0,    0,  358,
  507,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,   89,    0,  793,    0,   18,  791,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  426,    0,    0,   34,   31,   33,
    0,   32,    0,  843,    0,    0,    0,    0,   29,   62,
   64,    0,    0,    0,    0,    0,    0,    0,    0,  506,
  825,  569,    0,  570,    0,    0,    0,  845,  593,    0,
    0,    2,    0,    0,    0,    0,  401,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,    0,  384,  836,    0,  840,    0,  365,
  842,    0,  362,    0,  595,  846,    0,  361,    0,  505,
  789,    0,  137,   97,    0,    0,   98,    0,  674,  203,
    0,  677,    0,  839,   96,  132,    0,   92,    0,   99,
  795,    0,   93,    0,   94,  849,    0,   95,  133,  100,
  561,  562,    0,  794,  792,    0,  837,   70,    0,    0,
  835,  434,  427,    0,  433,  428,  429,  436,  430,  431,
  432,  437,    0,   27,    0,   36,  669,   35,    0,    0,
    0,    0,    0,  832,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  759,    0,  827,
    0,  761,    0,    0,    0,  758,  773,  772,  771,    0,
    0,    0,    0,  763,  764,  765,  774,  775,    0,    0,
  572,    0,    0,  787,    0,  777,    0,    0,  656,  762,
  746,  745,    0,    0,  573,    0,    0,  747,  742,  743,
  744,  776,    0,    0,    0,    0,    0,    0,    0,  524,
  513,    0,  516,  518,  519,  520,  521,  527,  528,    0,
  844,  594,    0,    0,  553,    0,  551,    0,    0,    0,
    0,  413,    0,    0,  339,    0,  206,    0,  366,  359,
  410,  411,    0,    0,    0,    0,    0,    0,  375,    0,
  346,  347,    0,  511,  509,  790,    0,    0,    0,    0,
    0,    0,    0,  140,  119,    0,    0,   90,    0,  108,
  107,    0,    0,    0,    0,    0,    0,  828,   71,    0,
    0,    0,  645,  646,  435,    0,    0,  321,  322,  316,
    0,  320,  769,    0,  672,    0,    0,   24,    0,    0,
  847,    0,   67,   65,   63,   30,    0,    0,    0,   49,
    0,    0,    0,    0,    0,    0,    0,    0,  778,    0,
    0,    0,    0,    0,    0,  779,  780,    0,    0,    0,
    0,    0,  848,  285,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  841,  576,    0,    0,
  550,    0,  525,    0,  522,    0,  523,  548,    0,  543,
    0,    0,  517,    0,  652,    0,  487,    0,    0,    0,
  557,  554,    0,  172,    0,    0,  116,  418,  159,  160,
    0,  416,    0,    0,    0,    0,  419,    0,  414,  341,
    0,  370,  372,  371,    0,  373,    0,  367,  204,    0,
    0,  251,    0,    0,    0,    0,  379,  380,    0,  403,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  422,
    0,  136,    0,    0,  145,    0,  144,    0,  151,  134,
    0,  149,  152,  153,  141,    0,    0,  455,  491,  458,
    0,  492,    0,    0,  459,    0,    0,    0,  482,  495,
  454,  477,  456,  457,  440,  341,  438,  439,  441,    0,
    0,  450,  451,  452,  453,    0,    0,    0,    0,  676,
  675,    0,  111,    0,    0,  187,    0,    0,  339,    0,
  206,    0,    0,   79,    0,    0,  664,    0,    0,    0,
    0,    0,    0,    0,    0,  678,  682,  683,  684,  685,
  686,  687,  688,  689,  690,  691,  770,    0,    0,    0,
  671,   25,    0,    0,   41,   68,    0,    0,   23,    0,
    0,  640,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  817,  818,  819,  820,  821,  822,  823,  824,    0,
    0,  756,  757,  816,    0,    0,  831,  752,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  581,  582,
    0,    0,  574,  577,  760,  799,  503,    0,  797,  502,
    0,  526,    0,  534,  530,  529,    0,    0,    0,  545,
  533,    0,    0,  650,  651,    0,    0,    0,    0,    0,
  564,    0,    0,  117,    0,    0,    0,    0,    0,    0,
  369,    0,    0,  342,  374,  448,    0,  253,    0,  247,
  249,  339,  833,  224,    0,    0,  341,    0,    0,  195,
  339,    0,    0,    0,    0,  229,  223,  226,  227,  228,
  378,  408,  407,  377,  376,    0,    0,    0,  354,  350,
  352,  353,  349,  351,    0,  341,    0,  142,  146,    0,
  150,    0,    0,  478,  479,  496,    0,  493,    0,    0,
  485,  483,  484,    0,    0,    0,    0,  449,    0,    0,
    0,    0,  486,  339,    0,  186,    0,  189,  191,  192,
    0,    0,    0,    0,    0,  206,   74,    0,   81,   73,
  829,  466,  467,    0,    0,    0,  681,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  318,  324,  325,
  323,  673,    0,    0,    0,    0,    0,    0,    0,   50,
   57,   59,    0,    0,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  206,    0,  800,    0,
    0,  812,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  815,  766,    0,    0,    0,    0,    0,    0,  596,
    0,    0,    0,    0,    0,  504,  798,  535,  544,  539,
  538,    0,  549,  654,  653,  201,  559,  560,  558,    0,
  168,  162,  169,    0,  165,    0,    0,  164,    0,  175,
  156,  155,  796,  158,  157,  420,    0,  210,  207,  209,
  211,  212,  368,  252,    0,  197,  341,  199,  342,  194,
  200,    0,    0,  230,    0,  381,  382,  341,  339,  342,
  355,    0,  183,  184,  143,    0,    0,    0,    0,    0,
    0,  494,    0,    0,  341,  342,    0,  444,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  185,
    0,    0,    0,    0,  328,    0,   78,    0,    0,    0,
    0,   82,   80,    0,    0,  834,  647,    0,    0,  692,
    0,    0,    0,  718,  717,    0,    0,    0,  725,  735,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  680,    0,   61,   54,   55,   60,   56,    0,    0,   19,
    0,    0,    0,   39,    0,    0,    0,  658,  641,    0,
  657,    0,    0,    0,    0,  806,  805,    0,    0,  802,
  801,    0,  810,  809,  808,  807,  804,  803,    0,    0,
    0,  584,    0,  591,    0,  589,  585,    0,  602,  598,
  600,    0,    0,    0,    0,  541,  542,  546,    0,    0,
    0,    0,    0,    0,  176,    0,    0,    0,    0,  256,
    0,    0,    0,  231,    0,  404,  405,  383,  341,  424,
  342,  830,  154,    0,    0,  461,    0,  460,  497,    0,
  489,    0,    0,    0,  442,    0,  469,    0,    0,  471,
  474,  476,    0,    0,  106,    0,  190,  341,    0,    0,
  340,    0,   91,    0,  104,    0,   87,    0,    0,    0,
    0,    0,  733,  734,    0,    0,    0,    0,  788,  781,
  782,    0,    0,  783,  736,    0,    0,    0,    0,    0,
    0,    0,  726,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,   58,
   51,   52,   20,  662,  663,    0,  660,  667,  668,  665,
    0,  639,    0,    0,  205,  811,  813,  814,    0,    0,
  587,    0,    0,    0,  606,  609,    0,    0,    0,    0,
  170,  166,    0,    0,  181,  177,  342,    0,    0,  342,
  257,    0,    0,    0,  215,    0,    0,    0,    0,  421,
  463,    0,  464,    0,  121,    0,    0,    0,  125,  127,
  128,  129,  445,  447,  443,  473,  342,    0,    0,    0,
    0,  326,    0,  329,  341,   83,    0,    0,   85,    0,
    0,    0,    0,    0,    0,  738,    0,  737,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,  642,    0,
  590,    0,    0,    0,    0,  615,    0,  568,    0,  161,
  178,  131,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,  263,  259,    0,
    0,  268,  269,  270,  271,  274,  276,  246,    0,  193,
  216,    0,    0,    0,  221,  217,  220,    0,  342,    0,
  462,  490,  130,  118,  126,  245,  113,  342,    0,    0,
  343,  330,    0,    0,   86,   75,    0,  704,  712,    0,
  784,  785,  786,  705,  713,  708,  716,    0,    0,  706,
  714,  707,  715,  701,  709,  702,  710,  703,  711,  659,
    0,    0,  610,  607,    0,  623,  625,    0,  620,    0,
  171,    0,    0,    0,    0,  278,    0,    0,    0,  277,
    0,  266,  272,    0,  275,  261,    0,  264,    0,  307,
  265,  196,  218,  222,    0,    0,  233,  357,  345,    0,
    0,    0,  335,  336,    0,    0,   72,   88,    0,  740,
  617,    0,  624,    0,  258,  267,    0,    0,    0,    0,
  273,    0,  301,    0,  300,  315,    0,    0,    0,    0,
  310,  262,  308,    0,    0,  232,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  631,    0,    0,
    0,    0,  294,  293,  295,    0,  292,    0,  280,    0,
    0,    0,  284,    0,  314,  838,  313,  312,    0,    0,
  219,    0,    0,    0,  237,    0,  236,  338,    0,    0,
    0,  105,    0,  618,  633,  622,    0,    0,  634,    0,
  630,    0,    0,    0,    0,    0,    0,    0,    0,  302,
  303,  309,  311,    0,    0,  241,  240,  239,    0,  331,
    0,  629,    0,  636,  287,    0,    0,  279,  298,  297,
  299,  296,    0,    0,    0,  304,  244,  242,  243,    0,
  739,    0,    0,    0,  305,  281,    0,    0,    0,  635,
  290,  282,  638,
};
static short yydgoto[] = {                                      17,
   18,   19,   20,   21,   22,   23, 1303,   25,   26, 1304,
   28,   29,   30, 1305,   32, 1306,  567,   95,  377,  818,
 1020,   96,  594,  819,   97,  382,  599,  119,   98,   99,
  216,  646,  109,  820,  821,  157,  187,  822,  100,  101,
  384,   72,  198,  359,  265,  562,  960,  266,  779,  535,
  447,  758,  563,  564,  565,  962,  199, 1174,   64,  147,
   65,  193, 1542, 1123,  178,  183,  185,  188,  175,  164,
  167,  180,  190,  374,  217,  706,  471,  574,  903,  352,
  554,  948, 1115,  503,  659,  925,  456,  457,  486,  346,
  536,  936, 1227,  677,  899, 1228, 1229, 1230, 1231, 1232,
  575,  176,  165,  342,  510,  343,  344,  511,  512,  513,
  514, 1093,  894,  459,  460,  884,  882,  461,  888,  883,
 1069, 1201,  889,  890, 1074,  354,  767,  768,  769,  770,
  708,  694, 1213,  537,  710,  169,  475,  638,  268,  480,
 1039,  368,  269,  270, 1214, 1215,  489, 1326, 1446,  716,
  717,  704,  718,  719,  720, 1447, 1448, 1517,  324,  484,
 1078, 1307,  153,  481,  482, 1079, 1080, 1308, 1309, 1310,
 1399, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1466, 1504,
 1434, 1507,  271,  414, 1468,  967, 1400, 1440, 1441, 1477,
  370,  371,  272,  953, 1121, 1242,  954,  955,  113,  273,
 1340,  363,  865, 1065, 1288, 1411, 1412, 1413, 1414,  863,
  333,  500,  736, 1090,  181,   50,  328,  158,  126,  311,
  144,  318,  150,  319,  329,  724,  330,  497,  920,  145,
  312,  468,  501, 1091,   85,  155,  202,  538,  539,  696,
  937,  697,  938,  939,  542,  543,  544,  545,  930,  783,
  546,  547,  548,  751,  549,  449,  748,   34,   35,   36,
   52,  160,  335,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  665,  439,  872, 1068,  440,  441,  670,   37,
  125,  307,   38,  450,  451,  681,  424, 1199,  114,  274,
  275,  276,  428,  647,  648,  649,  650,  857,  277, 1055,
 1056, 1194, 1195,  278, 1286, 1458, 1380, 1459, 1460, 1461,
 1501, 1543, 1030,   39,   40,  364,   41,   42,  446,  827,
 1028, 1176, 1180,  172,  576,  577,  578,  579,  580,  581,
  582,  583,  584,  585,  586, 1142,  977,  979, 1143,  412,
  279,  280,  281,  636,  282, 1144,  195,  630,
};
static short yysindex[] = {                                   4545,
  879, -212, 2724,   60, 1016,   82, 4474, -143, 3117,  360,
  341, 2868, -212,  475,  478,  252,    0,  670,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -165,    0,    0,    0,
    0,    0,    0, 5912,  370,  380,  430,  252,  464,    0,
    0,  567, 1028,  532,  370,  574,  430,  618,  252,  464,
    0,  620,  656,    0,  843,    0,  668,    0,    0,  800,
  686,    0,  252,  711,  370,  808,  686,  380,  430,  618,
  252,  464,  620,  656,    0,  430,  797,    0,    0,    0,
 1181,    0, 1181,    0,  877,  894,   18, 1182,    0,    0,
    0,  840,  252,  840,  920,  931,  970,   77,  682,    0,
    0,    0, 5328,    0,  574, 1042,  844,    0,    0, 1008,
  910,    0, 1130, -104, 1104,  581,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  347,    0,    0, 1028,    0,  -40,    0,
    0, 1392,    0, 1161,    0,    0,   33,    0, 1012,    0,
    0,  981,    0,    0,  578,    0,    0, 1183,    0,    0,
 1407,    0, 1028,    0,    0,    0, 1392,    0,  -43,    0,
    0, 1167,    0, 1142,    0,    0, 1181,    0,    0,    0,
    0,    0, 1135,    0,    0, 1036,    0,    0, 1174, 1060,
    0,    0,    0, 1036,    0,    0,    0,    0,    0,    0,
    0,    0, 2190,    0,  532,    0,    0,    0, -207, 1118,
  466,  656,  530,    0, 1192, 1181, 1201, 1221, -207, 1132,
  466, 1157, 1189, 1539, 1542, 1546, 1126,    0, 1552,    0,
 1554,    0, 1555, 1558, 1559,    0,    0,    0,    0,    0,
 1561, 1141, 1146,    0,    0,    0,    0,    0, 6054, 6054,
    0, 5540, 1105,    0, 1565,    0, 2148, 1518,    0,    0,
    0,    0, 1290, 1568,    0, -128, 1567,    0,    0,    0,
    0,    0, 1186,  380, 1256, 1179, -129,  252, 1196,    0,
    0,  844,    0,    0,    0,    0,    0,    0,    0,  532,
    0,    0,  699, 1215,    0, 1191,    0, -117, 1277,  710,
  581,    0, 1352,  344,    0,  840,    0,  347,    0,    0,
    0,    0,  840, 1224, -125, 1169, -120, 1597,    0, 6370,
    0,    0,  457,    0,    0,    0, 1581, 1581, 1028, 1274,
 1028,  870,  578,    0,    0, 5300,   31,    0, 1224,    0,
    0, 1362,  459, 1611,  252, 1388,  380,    0,    0, 1613,
  117, 4087,    0,    0,    0, 1018, 2488,    0,    0,    0,
 1623,    0,    0,  775,    0,  252, 1218,    0,  430, 1207,
    0,   13,    0,    0,    0,    0,  252,  318,  252,    0,
 1349,  430, 1627, -207, 1271,  541, 5689,   61,    0,  574,
 6054,  771,  947, 1004, 1381,    0,    0,  664,  664,  475,
 1403, 1644,    0,    0, 5786, 1225, 6054, 6054, 6054, 6054,
 6054, 6054,   55, 1234, 5689, 1230,    0,    0,    2,   24,
    0, -177,    0, -188,    0, -188,    0,    0, 1646,    0,
   38, 1259,    0, 1631,    0,   73,    0, 1414, 1414, 1651,
    0,    0, 1314,    0,   80, 1355,    0,    0,    0,    0,
 1028,    0, 1581, 1581, 1581, 1581,    0, 1654,    0,    0,
 1422,    0,    0,    0, 1400,    0, 5300,    0,    0, 5300,
 1317,    0, 1392, 1441, 1246, 2454,    0,    0,  338,    0,
 1246,  -22, 1161,    0, 1315, 1280, 1249,  435,  548,    0,
 1323,    0, 1263,  618,    0, 1028,    0, 1446,    0,    0,
  870,    0,    0,    0,    0,   10, 1276,    0,    0,    0,
 1282,    0, 1325, 1691,    0, 1382, 1693,  -61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1648,
   32,    0,    0,    0,    0,   89, 1695, 1701, 1693,    0,
    0, 1479,    0, 1028, 1028,    0, -125,   33,    0, 1360,
    0, 1337, 1703,    0, 4792,   25,    0, 1369, 1384, 1730,
 4265, 1732, 4196, 6369,  -55,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1380, 2488,  532,
    0,    0,  589, 1345,    0,    0, 1309,  466,    0, 1467,
 1751,    0, 1467,  589, 1471, 1481,  430, 6054, 6054, 1540,
 6054, 1762, 6054, 1761, 1489, 6054, 6054, 6054, 6054, 6054,
 6054,    0,    0,    0,    0,    0,    0,    0,    0, 1487,
 6054,    0,    0,    0, 2148, 1387,    0,    0, 1530,  664,
  664,  700,  700,  617,   55, 1771, 1769,  701,    0,    0,
 4265, 1485,    0,    0,    0,    0,    0, -241,    0,    0,
  -71,    0, 1367,    0,    0,    0,  252,  774,  252,    0,
    0, 5689,  532,    0,    0, 1225,  843,  843,  699,  532,
    0, 1028, 1028,    0,  399, 1263, 1263, 1359,  618,  710,
    0, 1779, 3023,    0,    0,    0, 1544,    0,  840,    0,
    0,    0,    0,    0, 1549, 1784,    0, 1400, 1545,    0,
    0, 1486, 1488, 1181, 1556,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  618,  840, 4950,    0,    0,
    0,    0,    0,    0,  618,    0, 1074,    0,    0, 1413,
    0,   58, 1419,    0,    0,    0,  618,    0, 1691,   63,
    0,    0,    0, 1537,   63, 1420,   63,    0, 1797,  618,
  618,  618,    0,    0, 1483,    0, 1418,    0,    0,    0,
  457, 1423,  252, 1442,   20,    0,    0, 1803,    0,    0,
    0,    0,    0,  117, 1386, 1215,    0, 1215, 5874,  377,
 6054, 6054, 4444, 1808, -110, 4541, 6054, 4719,  814, 4781,
 5009, 5831, 5054, 5130, 5282, 4265, 4265,    0,    0,    0,
    0,    0, 1207,  430,  464, 1207,  620,   75, 1806,    0,
    0,    0,  589, 1482,    0,  -97, 1508, 5689, 1508, 1807,
 1806,  589,  327, 1569, 1503, 1844,    0, 1866,    0, 1969,
 6054,    0, 2084, 2186, 2248, 2304, 2326, 2349, 6054, 1358,
 6054,    0,    0,  701, 1836, 5689,  910,   55, 1507,    0,
 1514, 1515, 1548, 1626, 1578,    0,    0,    0,    0,    0,
    0,  387,    0,    0,    0,    0,    0,    0,    0, 1853,
    0,    0,    0, 1444,    0, 1581, 1635,    0,  399,    0,
    0,    0,    0,    0,    0,    0, 4265,    0,    0,    0,
    0,    0,    0,    0, 1612,    0,    0,    0,    0,    0,
    0, 1181, 1181,    0, 1874,    0,    0,    0,    0,    0,
    0, 1652,    0,    0,    0, 1458,   60, 1510, 1498, 1544,
 1882,    0, 1263, 1511,    0,    0,  820,    0, 1869, 1458,
  873,  618, 1883, 1888, 1891, 1612, 1581, 1355, -125,    0,
 1323,  475, 1478, 1493,    0,   50,    0,  618, 1541, 1629,
 4792,    0,    0,  618, 1630,    0,    0, 1901, 1902,    0,
 1669, 2148, 1906,    0,    0, 2148, 1907, 1056,    0,    0,
 1598, 1914, 2148, 1916,  830, 1919, 2148, 1921, 6054, 6054,
 1808, 6054, 6009, 1922, 2148, 1923, 1924, 2148, 1927, 6054,
 2148, 1931, 2148, 1932, 1934, 2148, 1935, 1938, 2148, 1940,
    0, 1720,    0,    0,    0,    0,    0, 1637,  589,    0,
  589,   75, 1806,    0,  163,  163,   94,    0,    0, 1512,
    0, 1807, 1806, 1944,  327,    0,    0, 5300, 1948,    0,
    0, 2405,    0,    0,    0,    0,    0,    0, 2436, 1234,
 2148,    0, 2148,    0, 1519,    0,    0,  701,    0,    0,
    0,   55, 1529, 4265, 1506,    0,    0,    0, 1575, 1028,
 1608, 1263, 1610, 1263,    0,  533, 1562, 1734, 1612,    0,
 6054, 1718, 1609,    0, 4265,    0,    0,    0,    0,    0,
    0,    0,    0, 1978,   60,    0, 1359,    0,    0,   63,
    0, 3023, 1641,   63,    0,   63,    0, 1544, 1980,    0,
    0,    0, 1734, 1263,    0, 1355,    0,    0, 5328, 1744,
    0,  -88,    0, 1853,    0, 1983,    0, 1985, 1028, -130,
 1986, 1028,    0,    0, 6054, 1606, 1606,  475,    0,    0,
    0, 1987, 1520,    0,    0, 1606, 1606, 6054, 1606, 1606,
 1753, 2148,    0, 1456, 6054, 2148, 1606, 1606, 1606, 1606,
 2148, 1606, 1606, 1606, 1606, 1606, 1606, 1649,    0,    0,
    0,    0,    0,    0,    0, 1592,    0,    0,    0,    0,
 5689,    0,  327, 1944,    0,    0,    0,    0, 1485, 5689,
    0,  976, 1752, 1990,    0,    0,  -55, 1996, 1640, 1581,
    0,    0, 1028, 1074,    0,    0,    0,  532, 4791,    0,
    0, 2148, 1414, 1718,    0,  789,  252,  558, 1612,    0,
    0, 2001,    0, 2002,    0, 1692, 1414, 1641,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1074, 1652, 1726,
 1663,    0, 1423,    0,    0,    0, 1678, 1696,    0, 1544,
 1686, 2148, 2018, 2021, 6054,    0,  906,    0, 2024, 2025,
 2148, 2026, 2027, 6054, 6054, 2148, 2029, 2031, 2032, 2033,
 2034, 2037, 2040, 2042, 2044, 2046,    0,  163,    0, 1578,
    0, 4265, 1225, 1529, 1263,    0, -148,    0, 1263,    0,
    0,    0, 5300,  370,  659, 2030, 1215, 2048, 1749, 6054,
 2036, 2051, 2038, 2043, 1760, 2049,    0,    0,    0, 6254,
 2050,    0,    0,    0,    0,    0,    0,    0, 2052,    0,
    0, 1739, 1765,  252,    0,    0,    0, 1181,    0, 1734,
    0,    0,    0,    0,    0,    0,    0,    0,   57, 1234,
    0,    0, 6054, 1028,    0,    0, 1028,    0,    0, 1358,
    0,    0,    0,    0,    0,    0,    0, 2148, 2148,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1640,  -55,    0,    0, 1152,    0,    0, 1736,    0, 2072,
    0, 2054, 2055,  430, 6054,    0, 1774, 4265, 2450,    0,
 4265,    0,    0,   96,    0,    0,  -82,    0, -108,    0,
    0,    0,    0,    0, 1181, 1738,    0,    0,    0,   57,
 2074,  701,    0,    0, 1485, 2148,    0,    0, 1234,    0,
    0, 1263,    0, -149,    0,    0, 1412, 2460,   96,  560,
    0,  575,    0,  192,    0,    0,  370, 1662,   60,   72,
    0,    0,    0, 1738, -142,    0, 1748, 1755,  701, 2087,
   57, 1796, 1578, 2101, 1485, 2104,  252,    0, 2107, 2106,
  317, 1872,    0,    0,    0, 1742,    0, 2113,    0,   84,
 1723, 1856,    0,   96,    0,    0,    0,    0, 4791,  -82,
    0,  362,  362, 1860,    0, 1722,    0,    0,  701,   57,
 1640,    0, 1578,    0,    0,    0, -149, 2127,    0,  380,
    0, 1526,   40, 2111, 1872, 1877, 1868, 4791, 4791,    0,
    0,    0,    0, 1711,  -87,    0,    0,    0, 1055,    0,
 1640,    0,  380,    0,    0,   96, 2132,    0,    0,    0,
    0,    0, 1386, 4791, 1870,    0,    0,    0,    0, 4265,
    0, 2137, 2145, 1534,    0,    0, 4791,  -55,  380,    0,
    0,    0,    0,
};
static short yyrindex[] = {                                      0,
    0,  171,  633,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211, 5508,    0,    0,    0, 2188,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  637,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  239,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1854,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1810,    0,    0,    0,
  218,    0,  218,    0,    0,    0,    0, 1812,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  811,    0,    0,    0,
 1374,    0,    0,    0,  100,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -73,    0,    0,    0,    0,  695,    0,  815,    0,
    0,    0,    0,    0, 1238, 3569,    0, 6393,    0,    0,
    0,    0,    0,    0,    0,    0,  -73,    0,  -49,    0,
    0, 2158,    0,    0,    0,    0, 1936,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  967,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  985,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  474,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1285,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143, 1465,    0,    0,
    0,    0,    0, 1884,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  308,    0,
    0,  994,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1006,    0, 1926,    0,    0,    0,    0, 1007,    0,    0,
    0,    0,    0, 1947,  388, 6455,    0, 1013,    0,    0,
    0,    0,  194,    0,    0,    0, 1754, 1754,    0,    0,
    0, 1030, 1643,    0,    0,    0,    0,    0, 1947,    0,
    0, 1033,    0,    0,    0,    0,    0,    0,    0, 6232,
 1818,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1043,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1063,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1080,    0,    0, 6151,    0, 6151,    0,    0,
    0, 6151, 6151, 6151,    0,    0,    0, 1925, 2076, 6151,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  275,    0,  275,    0,    0,  366,    0,
  528,  551,    0,    0,    0,  967,    0,  842,  842,  765,
    0,    0,  272,    0, 3617,  283,    0,    0,    0,    0,
    0,    0, 1754, 1754, 1754, 1754,    0,  300,    0,    0,
    0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
    0,    0, 1951,    0,    0,    0,    0,    0, 1926,    0,
    0,  983,    0,  487, 1741,    0,    0,    0,    0,    0,
  153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1082,    0,    0,    0,    0, 3988, 3760,    0,    0,    0,
 3786,    0,    0, 3732,    0,    0, 3814,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3683,
 3957,    0,    0,    0,    0, 3933, 2592,    0, 3814,    0,
    0,    0,    0,    0,    0,    0,  388, 1143,    0,    0,
    0,    0, 1804,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  227,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
    0,    0,   83,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1091,    0,    0,    0, 1616, 2179,
 2282, 1719, 1822,    0,    0,   52,  611,   91,    0,    0,
    0,  671,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  557,    0,    0,
    0,    0,    0,    0,    0,    0,  750,  750,    0,    0,
    0,    0,    0,    0, 3828,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1213,    0,    0,    0,
    0,    0,    0,    0, 2177,    0,    0, 1776, 4387,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3242,    0,    0,    0,
    0,    0, 4014,    0,    0,    0,    0,    0, 3732,    0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 6377,    0,    0,    0,    0,    0,
    0,    0,    0, 1911,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1144, 1156,    0,
    0,    0,    0,    0,    0,    0, 1216,    0, 1216, 1227,
 1229,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1890,  876,    0, 1240,    0, 1898,    0,
 1899, 1904,    0,    0,  402,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  303,
    0,    0,    0,    0,    0, 1754, 1767,    0, 4738,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1961,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1232,    0,    0,    0,    0,    0,    0,    0, 4059,
    0,    0,    0,    0,    0,    0,    0,    0,  888,    0,
    0,    0,    0,    0,    0, 1961, 1754, 1241,  388,    0,
 1981, 5508, 1283,   47,    0,    0,    0,    0, 6377,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  792,    0,    0,    0,  821,    0,    0,    0,    0,
    0,    0, 2385,    0, 2430,    0, 2524,    0,    0,    0,
    0,    0,    0,    0, 2569,    0,    0, 2665,    0,    0,
 2751,    0, 2780,    0,    0, 2890,    0,    0, 2896,    0,
    0,  426,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1144, 1296,    0, 1814,  205,    0,    0,    0,    0,
    0, 1322, 1335, 1338,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  288,
 1318,    0, 1536,    0,    0,    0,    0,  206,    0,    0,
    0,    0,    0,    0,  975,    0,    0,    0, 4731,    0,
    0,    0, 1799,    0,    0,    0,    0,    0, 1989,    0,
    0,  988,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,    0,    0,    0,    0, 4475,    0,    0,
    0,    0,    0,    0,    0, 1339,    0,    0,    0,    0,
    0,    0,    0, 1348,    0,    0,    0,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0, 6151,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2919,    0, 3060,    0, 3132,    0,    0,    0,    0,
 3143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1351,    0,    0,    0,    0,  265,    0,
    0, 1890,  679,  663,    0,    0,  882, 1038,  141, 1754,
    0,    0,    0, 4588,    0,    0,    0,    0,    0,    0,
    0, 2215, 1129, 1214,    0, 1926,    0,    0, 1961,    0,
    0,    0,    0,    0,    0,    0, 1353,  690,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  263,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  142,
    0, 3261,    0,    0,    0,    0,    0,    0,    0,    0,
 3282,    0,    0,    0,    0, 3324,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  205,    0,   34,
    0,    0,    0,    0,    0,    0, 2222,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3411, 3453,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2223, 3369,    0,    0,    0,    0,    0, 2225,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2778, 1248,    0,    0,    0,    0,
  130,  564,    0,    0,   59, 2215,    0,    0,  288,    0,
    0,    0,    0, 2222,    0,    0,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2917,    0,    0, 3110, 4406, 1890,  927,
    0,    0,  107,    0,  265,    0,  929,    0,    0, 2227,
    0,    0,    0,    0,    0, 2211,    0,   28,    0, 1966,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  741,    0,
   53,    0,   34,    0,    0,    0, 2222,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1890,    0,
 2223,    0,    0,    0,    0,    0, 2214,    0,    0,    0,
    0,    0,    0,    0, 6463,    0,    0,    0,    0,    0,
    0, 2233,    0,    0,    0,    0,    0, 3568,    0,    0,
    0,    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2276,    0,    0, 2278,
    0,    0,    0,    8,    0, 2279,    1,  292,  -77, -480,
 1258,  609, -215,   23, 2269, 2053,    0,  -31,    0, 2064,
  -86,  -41,    0,  364, -822,  -28,  -57, -170, 2070, 1046,
 1698,    0,    0,    0, 1210,    0,    0,  -34, 1333, -389,
   -9, -841, 1737, 1521, -276, 1340, 2224, -297,    0,  -51,
    0,  851,  -44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -586, -144, 1344, -411,   56, -832,    0,
    0,    0,    0, -317, -483, -598, 1363, -319,  -42,    0,
 -450,    0,    0, -431, 1205,    0, 1075,    0,    0, -168,
 -525,   -6,    0,    0,    0,    0, 1965,    0, 1805, 2006,
 -236, 1375, -663,    0,    0,    0, -640,    0,    0,    0,
    0,    0,    0, 1428,    0,    0,    0, 1370, 1993, 1995,
    0, 1620,    0, -455, 1615,  -39, -326, -641,  -45,    0,
    0, -559, -203, -571,    0, 1107, -860,    0,  885, 1120,
    0, 1846,    0,    0,    0,  902,  905,  874, -101, 2007,
 -836, -940,    0,    0, 1661,    0, 1284, -421,    0,    0,
    0, -244,    0,    0,    0,    0,    0,    0,    0,    0,
 -779,    0, 1286,    0,  899,  829,  973,    0,  896,    0,
    0, 2010, -200,    0,    0,    0,    0, -848, -377, 1255,
    0, -409,-1105,-1166, -714,    0, -575,  969,  219, -448,
 1823, 1618, 1431, 1145,   -1,    0,    0,    0,    0,    0,
 2057,    0,    0, 2065, 1900,    0,    0,    0,    0,    0,
 2088,    0,    0,    0,    0,  -15,    0,    0,    0, -307,
 1645, -306, 1299, -403,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1851,    0,    0, 1655,    0,    0,    0,
 2393,    0,    0,    0,    0, 2115,    0,    0,    0,    0,
 1977,    0, 1975,    0,    0,    0, 1747,    0,    0,    0,
    0,    0,  -95,    0, 1740,    0, -808,    0, 1187,    0,
 1991, -383, 1997,    0, -564, 1770,    0,    0,  -54,    0,
 1231,    0, 1138, -885,    0, 1137,    0,  928,    0,  974,
    0,  878,    0,    0,    0, 1992,    0,    0,    0, 1829,
 1604, -700,    0, -132,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4555,  952, 1449,    0,    0,
    0,    0, -202, 2013, 2079, 1185,    0,    0,
};
#define YYTABLESIZE 6940
static short yytable[] = {                                     171,
  121,  149,   69,  173,   68,  152,  218,   31,  170,  369,
  373,  168,  372,  610,  652,  177,  154,  678,  163,  737,
  504,  695,  509,  203,  698,  211,  660,  182,  305,  809,
  709,  184,  631,  206,  876,  707,  674,  207,  540,  541,
  477, 1050,  885,  550,  213,  787,  327,  790,  179,  742,
  383,  588,  621,  210,   67,  445,  598,  121,  605,  959,
  383,  222,  225,  568,  227,  209,  302,  614,  658,   67,
  208,  226,  550,  467,  612,  349, 1082,  715,  928, 1526,
  854,  669,  661, 1280,  288,   84,  286, 1088, 1098,  215,
  579,  614,  588,  880,  645,  588, 1410,  263,  112,  565,
  356,  927,  612, 1103,   67,  327,  612,  933,  283, 1113,
  588,  621,  320, 1371,  208, 1480,  673,  605, 1019,  683,
  222,  902,  757,  830,  754,  123,  614, 1474,  760,  332,
  575,  579,  614,  900,  579,  426,  684, 1210,  348,  388,
  621,  661,  655, 1248,  472,  686,  687,  688,  689,  579,
  614,  391,  356,  263,  434,  304,  264,  112,  565, 1482,
  171,   67,  485,  369,  373,  612,  372,  491,  267,  375,
  508, 1243, 1237,  208,  867,  780,  605, 1196,  540,  541,
 1436,  621,  470,  655,  123,  470,  655,  378,  332,  663,
  248,  509,  670,  423, 1376, 1376, 1170,  378, 1172,  621,
 1442,  655,  891,  892,  468,  580,  806,   67,  452,  596,
  508,  356,  434, 1538,  551,  752,  321,  656,  743, 1377,
 1377, 1216,  123, 1025,  350,  264,  613,  376,  661,  508,
 1437,  454,  772,  670,  120, 1474,  670,  109,  510,  431,
  455, 1438,  980,   51,  866,  171,  580,  289,  171,  580,
 1473,  670,  423,  118,  444,  435,  438,  448, 1220,   86,
  664,  670,  182,  468,  580, 1539, 1235,  613,  981,  508,
  171,  567,  918, 1244,  536,  124,  476, 1378, 1378,  170,
 1011, 1012,  415,  479,  753,  613, 1491,  492,  874,  331,
  495,  200,  602, 1058,  322,  908,  551,  510,  655,  417,
 1483,  691,  566,  106,  505,  605,  507,  531,  756, 1453,
  436,  118,  560,   14,  408,  409,  606,  411,  556,  122,
  111,  182,  351,  558,  922, 1177, 1521,  437,  614,  952,
  567,  807,  427,  536,  705,  166, 1249,  595,  248, 1026,
  224,  415, 1022, 1397,  592, 1439,  934, 1506,  682, 1493,
  595, 1032, 1034, 1216,   84,  600,  668,  603,  417,   69,
 1170,  566,  378, 1178,  611,  537,  531,  332,  436, 1124,
  588, 1076,  208,  588, 1292,  905, 1479, 1318,  122, 1319,
  588,  701, 1330,  588,  911,  810,  373,  588,  811, 1408,
  605,  834,  588,  614, 1342,  588,  614,  231, 1196,  614,
  232,  612,   73,  341, 1336,  123,  655,  575, 1346,  579,
  614,  588,  109,  109,  958,  470,  356,  970, 1140,  579,
  614,  208,  579,  614,  537,  679,  685,  383,  875, 1202,
  612,  579,  614, 1223,  603,  588,  288,  946,  286,  588,
  565,  566,  612,  722, 1029,  723,  711,  112,  588,  867,
  661,  470,  267,  896,  221,  605,  615,  423,  332,  621,
  612,  332,  224,  655,  614,  588,  679,  597,   66,  679,
  635,  739,  639,  640,  641,  642,  643,  635,  579,  614,
  267,  621,  656,   66,  679,  781,  965,  579,  614,  901,
  373,  224,  588,  621,  738, 1081, 1407, 1192,  961,  605,
  166,  327,  171,  612,  588, 1409, 1086,  621,  614,  657,
  166,  170,  588,  605,   69,  151,  893,  118,   66,  765,
  766,  656,  614, 1102,  580,  362,  332,  547,  621, 1018,
  902,  579,  614,  208,  580,  171,  759,  580, 1197,  588,
  415, 1419,  900,  579,  812,  613,  580,  612,  566,  603,
  532,  208,  893,  470, 1184,  613,  166,  417,  613, 1218,
 1038,  612, 1290,  333,   69,  595,  782,  613, 1072,  914,
  332,  780,  468, 1207, 1119,   66,  670, 1370,  579,  614,
  508,  621,  332, 1454,  332,  208,  547, 1185, 1204,  415,
 1206,  423, 1087,  580,  566,  655,  605,  122, 1329,  122,
 1471,  670,  580,  655,  313, 1291,  417,  333,  470,  532,
  578,  182,  567,  104,  613, 1472,  614,  536,  171,  614,
  107,   66,  333,  613,  171,  171,  831,  444,  789, 1114,
 1238,  473,  102,  448,  375,  438,  556,  873,  806, 1337,
 1189, 1373, 1013,  566,  474, 1016,  580,  881,  881, 1470,
  531,  578, 1054,  314, 1498,  813, 1420,  712,  580,  479,
  851,  605,  604,  835,  836,  225,  838,  613,  840,  578,
  605,  843,  844,  845,  846,  847,  848, 1219,  608,  895,
  536,  613,  961,  536,  614,  531,  850,  917,  919,  124,
  968, 1499,  969,  580,  348,  556, 1224, 1351,  122,  536,
  103,  415, 1234,  604, 1500,  420, 1239,  225,  537,  853,
  421,  605,  118,  531,  613,  498,  531,  233,  417,  608,
  612,  604,  608, 1527,  916,  536,  499,  267,  122,  605,
  540,  541,  531,  921,  111,   14,  729,  608,  713, 1514,
  334,  956,  612,  537,  679,  931, 1544,  679,  124,  563,
  943,  944,  945,  348,  679,  886, 1372,  679,  531, 1017,
 1255,  679,  601,  807,  555,  315,  679, 1083, 1084,  679,
  816,  537, 1014,  730,  537,  373, 1520, 1141,  112,  714,
 1515, 1320,   69,  316,  334,  679, 1015,  381,  225,  612,
  537,  727, 1066,  563,  806, 1334,  684, 1279,  612,  334,
  111, 1375, 1057,  115,  715, 1381, 1541,  555,  563,  679,
  515, 1125,  679,  679,  512,  591,  537,  317,  590,  806,
  696,  806,  679,  555, 1175, 1175, 1179, 1516,  887,  225,
  146,   88,  727, 1343, 1449,  727,  806, 1382,  308,  679,
  148,  202,  612, 1067,  608, 1023,  971,  972,  976,  732,
  727,  983,  985,  987, 1033,  995,  998, 1001, 1003, 1006,
 1009,  696, 1430, 1104,  696, 1432,  679, 1464,   90,  515,
  547,  420,  418,  512,  419, 1489,  421,  731,  679,  696,
  679,  611, 1289,  267,  832,  202,  733,  309, 1398,  612,
  151,  670,  333,  532,  171,  333, 1042,  102,  901,  373,
  202,  171, 1464,  170, 1049,  547, 1051,  603,  116,  380,
  375, 1053, 1105,  679, 1519,  117, 1104,  813,  670,  807,
  161,  162,  611,  401,  156,   69,  381, 1094,  532,  578,
 1415,  446, 1109,  547,  337,  102,  547,   91, 1456,  578,
  611,   87,  578,  416,  807, 1530,  807,   92, 1127,  417,
  366,  578,  547,  348, 1131,  556,  532,  832,  348,  532,
  333,  807,  540, 1452,  348, 1108,  614,  341,  264,  124,
  102,  338,   93,  339,  616,  532,  159,  556,  547,  416,
  446,  604,  409,   88,  319,  417, 1054,  213,  463,  605,
  734,  814,  166,  514,  604,   89,  340,  608,  578,  310,
 1452,  532,  605,  604,  333,  363,  364,  578,  171, 1455,
  608,  605,  360,  540, 1548,  616,  333, 1193,  333,  608,
   90,  341,  859,   69,   69,  614,  409,  815,  213,  147,
  111,  213,  816,  616,  174,  881,  860,  619,  817,  464,
 1452,  409,  317,  319, 1151, 1152,  213, 1154, 1156,  381,
  604,  578,  514,  727,  373, 1161, 1352, 1512,  605,  604,
  861, 1384,   40,  578,  363,  364,  608,  605,  563,  334,
 1452,  360,  334,  465,  616,  608,   66, 1175,  619,   48,
  186,  148,  696,  555,  603,  989, 1535, 1536,  147,   91,
  563,  466,  348,   69, 1247, 1222,  619, 1251,  578,   92,
  366,  317,  990,  604, 1385,  555,  202,  191,  189,  416,
  727,  605, 1546,  727,  862,  417,   94,  604,  264,  608,
  727,   40,  196,  727,   93, 1552,  194,  727,  202,  212,
  204,  767,  727,  608,  767,  727, 1212,  334,   48,  696,
  148, 1148,  696,   38,  202,  192,  197,  991,  463,  696,
  604,  727,  696,  171,  171,   21,  696,   66,  605,  166,
  202,  696,  170,  444,  696, 1293,  608, 1322,  881,  202,
  508,  201,  202,   43,  267,  727,  992,  870,  727,  727,
  696,  334,  202,  767,   44, 1328,  285,  202,  727, 1323,
 1252,   45, 1421,  334,  871,  334, 1324,  581,  214,  464,
  611,  237,   38, 1261,  696,  727,  111,  696,  696, 1422,
 1266,  581,  470,  214,   21,  666,   46,  696,  454,  581,
  215,  286,  611, 1465,  373,  223,   44,  455,   46,  171,
 1325,  425,  727,  465,  696,  581,  267,  138, 1193,  586,
  114, 1406, 1383,  993,  727, 1053,  727,  238,  335,  287,
  618,  466,  288,  470,  214,  171,  470,  214, 1465,  373,
  219,  696,  335,  111,  444,  225,  632,  213,  289,  611,
  335,  470,  214,  696,  666,  696,   69,  220,  611,  727,
  586,   47,  344,  586,  832,   44,  335,   46,  238,  581,
  425,  238, 1405,  616,  290,   22,  138,  859,  586,  114,
  224, 1531,  373,  632, 1387,  228,  238,  620,  696, 1417,
 1350,  860, 1418,   48,  229,  616,  632,   49, 1444, 1358,
 1359,   45,  611,  121,  828,  832,  832,  832,  832,  832,
  844,  832,   70,   71,   47,  861,  611,   42,  115,  171,
  335,  344, 1427,  832,  832,  832,  832,  103, 1433, 1139,
   43,  237,  202,  230,   22, 1389,  619,  700,  768, 1282,
  699,  768,  616,  247,  248,  249,  225,  161,  162,  611,
  301,  616,  171,  595,  171,  832,  859,  832,  619,  284,
   45, 1463, 1169, 1433, 1171, 1475,  252,  253,  225,  862,
  860,  257,  258,   47,  121,  225,   42,  115, 1416,  420,
  418,  348,  419,  303,  421,  360,  103,  171, 1457,   43,
  768,  202,  348,  365,  861,  616, 1463,  595,  325,  171,
  808,  326,  306,  589,  171,  619,  300,  852, 1510,  225,
  851,  323,  595,  444,  619,  121,  334,   69, 1540, 1478,
 1428, 1457,  336,  632,  420,  418,  345,  419,  171,  421,
  171, 1462,  347,  171,  171, 1524,  366, 1433,  950, 1529,
  355,  949,  444,  444,  741,  923,  924,  327,  862,  263,
  470,  171,  357, 1138,  121,  247,  248,  249,  619,  171,
 1433, 1457,  957,  353, 1071,  776,  470, 1070,  444,  161,
  162,  225,  171,  214,  110,  110,  358,  420,  418, 1139,
  419,  444,  421,  257,  258,  741,  741,  741,  741,  741,
  361,  741,  362,  247,  248,  249,  138,  161,  162,  470,
  379,  389,  470,  741,  741,  741,  741,  877,  878,  842,
  420,  418,  387,  419,  392,  421,  252,  253,  138,  390,
  394,  257,  258, 1036,  420,  418,  832,  419,  832,  421,
 1096, 1101, 1182, 1095, 1100, 1181,  832,  741,  586, 1191,
 1258,  586, 1190, 1257,  832,  413, 1525,  138,  586, 1505,
  832,  586,  395,  832, 1551,  586,  592, 1474,  396,  592,
  586,  397,  609,  586,  613,  398,  138,  399,  617,  619,
  621,  400,  225,  401,  402,  138,  832,  403,  404,  586,
  405,  138,  406,  832,  415,  832,  832,  407,  422,  832,
  423,  425,  429,  832,  225,  751,  832,  432,  832,  138,
  832,  225,  430,  586,  470,  832,  832,  586,  832,  433,
  442,  470,   14,  453,  462,  483,  586,  416,  490,  470,
  493,  502,  139,  417,  832,  832,  506,  832,  553,  470,
  557,  559,  561,  586,  593,  225,  751,  751,  751,  751,
  751,  832,  751,  832,  832,  832,  589,  381,  832,  604,
  598,  832,  832,  607,  751,  751,  751,  751,  423,  470,
  586,  832,  416,  470,  633,  637,  651,  671,  417,  667,
  427,  672,  586,  676,  679,  595,  680,  690,  832,  692,
  693,  139,  595,  454,  702,  595,  703,  237,  751,  595,
  420,  418,  726,  419,  832,  421,  727,  595,  754,  728,
  735,  656,  740,  744,  746,  832,  741,  586,  741,  745,
  747,  749,  750,  595,  761,  416,  741,  832,  755,  832,
  762,  417,  764,  773,  741,  832,  776,  984,  775,  988,
  741,  996,  999,  741, 1004, 1007, 1010,  595,  784,  754,
  754,  754,  754,  754,  240,  754,  785, 1265,  416,  786,
  595,  788,  832,  824,  417,  208,  741,  754,  754,  754,
  754,  823,  416,  741,  826,  741,  741,  595,  417,  741,
  828,  832,  595,  741,  420,  418,  741,  419,  741,  421,
  741,  833,  839,  837,  841,  741,  741,  849,  741,  416,
  856,  754,  858,  864,  595,  868,  208,  893,  897,  208,
  756,  755,  906,  907,  741,  741,  595,  741,  595,  705,
  912,  926,  913,  915,  208,  929,  942,  935,  940,  947,
  952,  741,  964,  741,  741,  741,  966,  978,  741, 1021,
 1019,  741,  741,  622,  623,  624,  625,  626,  627,  628,
  629,  741,  755,  755,  755,  755,  755, 1024,  755,  247,
  248,  249,  166,  161,  162, 1027, 1052,  751,  741,  751,
  755,  755,  755,  755, 1037,  420,  418,  751,  419, 1035,
  421, 1062,  252,  253,  741, 1059,  590,  257,  258, 1063,
 1073,  751, 1060, 1061,  751,  741, 1040,  420,  418, 1064,
  419, 1077,  421, 1085,  755, 1089,  366,  741, 1092,  741,
 1097,  139, 1099, 1110,  749,  741, 1106,  751, 1111,  263,
 1135, 1112, 1120, 1122,  751,  958,  751,  751, 1129, 1132,
  751, 1133, 1134,  139,  751, 1136, 1137,  751,  416,  751,
 1145,  751,  741, 1146,  417, 1147,  751,  751, 1149,  751,
 1150, 1157, 1158, 1159, 1168,  749, 1160,  749,  749,  749,
 1162, 1163,  139, 1164, 1165,  751,  751, 1166,  751, 1167,
  754,  806,  754,  749,  749,  749,  749, 1183, 1186,  250,
  754,  139,  751, 1198,  751,  751,  751, 1200, 1203,  751,
  139, 1205,  751,  751, 1209,  485,  139,  754, 1208, 1041,
  420,  418,  751,  419, 1264,  421, 1217,  749, 1221, 1226,
 1236, 1241, 1245, 1138,  139, 1246, 1250, 1256, 1278,  751,
  754, 1283,  416, 1284, 1277, 1285, 1287,  754,  417,  754,
  754, 1331, 1332,  754, 1333,  751, 1339,  754, 1341, 1344,
  754, 1345,  754,  208,  754,  208,  751, 1347, 1348,  754,
  754, 1349,  754,  208, 1354, 1355, 1356, 1357,  751, 1360,
  751, 1361, 1362, 1363, 1364,  748,  751, 1365,  754,  754,
 1366,  754, 1367,  755, 1368,  755, 1369, 1388, 1386,  103,
 1391, 1403, 1402,  755, 1390,  754, 1392,  754,  754,  754,
 1394, 1393,  754,  751, 1423,  754,  754, 1395, 1401, 1404,
  755, 1424, 1425, 1426, 1429,  754,  748, 1451,  748,  748,
  748, 1445, 1476,  416, 1043,  420,  418, 1488,  419,  417,
  421, 1484,  754,  755,  748,  748,  748,  748, 1486, 1490,
  755, 1492,  755,  755, 1494,  416,  755, 1496,  754, 1497,
  755,  417, 1503,  755,  208,  755, 1505,  755, 1508,  754,
 1509, 1482,  755,  755, 1483,  755, 1523,  237,  748, 1528,
 1533,  754, 1534,  754, 1537, 1474,  208, 1547,  750,  754,
 1549,  755,  755,  208,  755, 1550,  749,    1,  749,  420,
  418,  563,  419,   26,  421,   28,  749,  188,  755,  670,
  755,  755,  755,  341,  571,  755,  754,  468,  755,  755,
  250,  406,  135,  749,  248,   77,  198,  208,  755,  750,
  468,  750,  750,  750,  240,  179, 1044,  420,  418,  367,
  419,  255,  421,  603,  366,  755,  749,  750,  750,  750,
  750,  601,  597,  749,  356,  749,  749,  599,  416,  749,
  468,  755,  264,  749,  417,  342,  749,  180,  749,  254,
  749,  627,  755,  621,  626,  749,  749,  628,  749,  291,
  306,  750,  289,  637,  755,   24,  755,   27,   33, 1173,
  108,  753,  755,  393,  749,  749,  386,  749, 1045,  420,
  418,  385,  419, 1130,  421,  825,  963,  774, 1128, 1126,
  205,  749, 1335,  749,  749,  749, 1225,  515,  749,  755,
 1116,  749,  749,  458, 1107,  741, 1075,  487, 1117,  488,
 1321,  749,  753,  910,  753,  753,  753,  909, 1481,  247,
  248,  249,  166,  161,  162, 1327,  721,  748,  749,  748,
  753,  753,  753,  753, 1046,  420,  418,  748,  419, 1487,
  421, 1485,  252,  253,  749,  552, 1518,  257,  258,  904,
 1502, 1545, 1211,  416,  748,  749, 1047,  420,  418,  417,
  419, 1443,  421, 1240,  753, 1513,  588,  749, 1450,  749,
  771, 1118,  478, 1338,  697,  749,  496,  748,  951, 1048,
  420,  418,  725,  419,  748,  421,  748,  748,  469,  763,
  748,  941, 1233,  932,  748,  110,  443,  748,  662,  748,
  666,  748,  749,  869,  855,  653,  748,  748,  879,  748,
 1281, 1374,  654, 1379, 1522,  697, 1553,  416,  697,  721,
 1495,  829, 1031,  417,  644,  748,  748,  675,  748, 1153,
  750, 1353,  750,  697,  587, 1187,  420,  418,    0,  419,
  750,  421,  748,    0,  748,  748,  748,    0,    0,  748,
    0,    0,  748,  748,    0,  416,    0,  750,    0,    0,
  721,  417,  748,  721,    0,    0, 1188,  420,  418,    0,
  419,    0,  421,    0,    0,  237,    0,    0,  721,  748,
  750,  420,  418,    0,  419,    0,  421,  750,    0,  750,
  750,  420,  418,  750,  419,  748,  421,  750, 1431,    0,
  750,    0,  750,    0,  750,    0,  748,    0, 1469,  750,
  750,    0,  750,  700,    0,    0,    0,  416,  748,    0,
  748,    0,  366,  417,    0,    0,  748,    0,  750,  750,
    0,  750,  240,  753,    0,  753,    0,    0,    0,    0,
  264,    0,    0,  753,    0,  750,    0,  750,  750,  750,
    0,    0,  750,  748,  700,  750,  750,  700,  698,    0,
  753,    0,    0,    0,    0,  750,    0,    0,    0,    0,
    0,    0,  700,  416,    0,    0,    0,    0,    0,  417,
    0,  475,  750,  753,    0,    0,    0,    0,    0,    0,
  753,    0,  753,  753,    0,  416,  753,    0,  750,  698,
  753,  417,  698,  753,    0,  753,    0,  753,    0,  750,
    0,    0,  753,  753,    0,  753,    0,  698,  416,    0,
    0,  750,  475,  750,  417,  475,    0,    0,    0,  750,
    0,  753,  753,    0,  753,    0,  697,  247,  248,  249,
  475,  161,  162,    0,    0,    0,    0,    0,  753,    0,
  753,  753,  753,    0,  699,  753,  750,    0,  753,  753,
  252,  253,    0,    0,    0,  257,  258,    0,  753, 1435,
    0,    0,  475,    0,  416,    0,    0,    0,    0,    0,
  417,  721,    0,    0,    0,  753,    0,    0,    0,    0,
    0,    0,    0,  697,    0,  699,  697,    0,  699,    0,
    0,  753, 1467,  697, 1435,  416,  697,    0,    0,    0,
  697,  417,  753,  699,    0,  697,  516,    0,  697,  416,
  517,    0,    0,    0,  753,  417,  753,    0,  705,  416,
    0,    0,  753,    0,  697,  417,    0, 1467,  721,  518,
  729,  721,  519,    0,    0,    0,    0,    0,  721, 1511,
    0,  721,    0,    0,    0,  721,    0,    0,  697,  753,
  721,  697,  697,  721,    0,    0,    0,  670,    0,  693,
    0,  697,    0,  237,    0,  700,    0,    0, 1435,  721,
 1532,  729,    0,  520,  729,    0,    0,    0,  697,  521,
  522,  523,    0,  524,  525,  526,    0,  527,    0,  729,
    0, 1435,    0,  721,    0,    0,  721,  721,  670,    0,
  693,  670,    0,  693,    0,  697,  721,  528,    0,  529,
  698,    0,    0,    0,    0,    0,  670,  697,  693,  697,
  240,    0,  700,  721,    0,  700,    0,    0,    0,  475,
    0,    0,  700,    0,    0,  700,    0,    0,    0,  700,
  530,    0,    0,    0,  700,  475,    0,  700,  475,  475,
  721,  475,  697,    0,    0,    0,  475,  531,    0,  475,
    0,    0,  721,  700,  721,    0,    0,  698,    0,  694,
  698,    0,  475,    0,    0,  695,    0,  698,  475,  532,
  698,  475,    0,    0,  698,    0,    0,  700,    0,  698,
  700,  700,  698,    0,  224,    0,  238,  721,  728,    0,
  700,    0,    0,    0,    0,    0,  699,    0,  698,    0,
  694,    0,    0,  694,  533,  534,  695,  700,    0,  695,
    0,    0,    0,    0,    0,  247,  248,  249,  694,  161,
  162,    0,  698,    0,  695,  698,  698,  238,    0,  728,
  238,    0,  728,    0,  700,  698,    0,    0,  252,  253,
  475,    0,    0,  257,  258,  238,  700,  728,  700,    0,
    0,    0,  698,  699,    0,    0,  699,    0,    0,    0,
    0,    0,  475,  699,    0,    0,  699,    0,    0,  475,
  699,    0,    0,  475,    0,  699,    0,    0,  699,  698,
  475,  700,  729,    0,    0,    0,    0,    0,   53,    0,
    0,  698,    0,  698,  699,    0,    0,    0,  475,   54,
    0,    0,    0,  475,    0,    0,   55,    0,    0,    0,
    0,  693,    0,    0,    0,    0,    0,    0,  699,   56,
    0,  699,  699,    0,    0,  670,  698,  670,  475,  722,
    0,  699,  475,    0,    0,  670,    0,  366,    0,  729,
    0,    0,  729,    0,    0,    0,    0,    0,  699,  729,
    0,    0,  729,    0,    0,    0,  729,    0,    0,    0,
    0,  729,    0,    0,  729,    0,    0,    0,  693,    0,
  722,  693,    0,  722,    0,  699,    0,    0,  693,  234,
  729,  693,    0,    0,    0,  693,    0,  699,  722,  699,
  693,    0,    0,  693,    0,    0,   57,   87,    0,    0,
    0,  730,    0,    0,  729,    0,    0,  729,  729,  693,
    0,    0,  731,   58,    0,    0,    0,  729,    0,    0,
  234,  694,  699,  234,    0,    0,  670,  695,   59,    0,
    0,  670,   60,  693,  729,   61,  693,  693,  234,   88,
    0,    0,  730,   62,    0,  730,  693,    0,  670,    0,
  728,   89,    0,  731,    0,  670,  731,    0,    0,    0,
  730,  729,   63,  693,  238,  105,  238,    0,    0,    0,
    0,  731,    0,  729,  238,  729,   90,    0,  694,    0,
    0,  694,    0,    0,  695,    0,    0,  695,  694,  670,
  693,  694,    0,    0,  695,  694,    0,  695,    0,    0,
  694,  695,  693,  694,  693,    0,  695,  728,  729,  695,
  728,  182,    0,    0,    0,    0,    0,  728,    0,  694,
  728,    0,    0,    0,  728,  695,    0,    0,    0,  728,
  719,    0,  728,    0,    0,    0,    0,  693,    0,    0,
    0,    0,    0,  694,    0,   91,  694,  694,  728,  695,
    0,  723,  695,  695,    0,   92,  694,    0,    0,    0,
    0,    0,  695,    0,    0,  238,    0,    0,    0,    0,
  182,  719,  728,  694,  719,  728,  728,    0,    0,  695,
   93,    0,    0,    0,    0,  728,    0,  238,  237,  719,
    0,  722,  723,  732,  238,  723,    0,    0,   94,    0,
  694,    0,  728,    0,    0,    0,  695,    0,    0,    0,
  723,    0,  694,    0,  694,    0,    0,    0,  695,    0,
  695,    0,    0,    0,    0,    0,    0,    0,  238,  728,
    0,    0,    0,    0,  732,    0,    0,  732,  583,    0,
    0,  728,    0,  728,    0,  240,   87,  694,  722,    0,
    0,  722,  732,  695,    0,    0,    0,  234,  722,  234,
    0,  722,    0,  730,    0,  722,    0,  234,    0,    0,
  722,    0,    0,  722,  731,    0,  728,    0,    0,  583,
  720,    0,  583,    0,    0,    0,    0,    0,   88,  722,
    0,    0,    0,    0,    0,    0,    0,  583,    0,    0,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  722,    0,    0,  722,  722,    0,    0,
  730,  720,  724,  730,  720,   90,  722,    0,    0,    0,
  730,  731,    0,  730,  731,    0,  898,  730,    0,  720,
    0,  731,  730,  722,  731,  730,    0,    0,  731,    0,
  247,  248,  249,  731,  161,  162,  731,    0,  234,    0,
    0,  730,    0,  724,    0,    0,  724,    0,    0,    0,
  722,    0,  731,  252,  253,  254,  255,  256,  257,  258,
  234,  724,  722,    0,  722,  730,    0,  234,  730,  730,
  182,    0,  719,    0,   91,    0,  731,    0,  730,  731,
  731,    0,    0,    0,   92,    0,    0,    0,    0,  731,
    0,    0,  182,  723,    0,  730,    0,  722,    0,    0,
    0,  234,    0,    0,    0,    0,  731,    0,    0,   93,
    0,    0,    0,    0,    0,    0,    0,  337,  832,    0,
    0,  182,  730,    0,    0,    0,    0,   94,    0,  719,
    0,    0,  719,  731,  730,  732,  730,    0,    0,  719,
  182,    0,  719,    0,    0,  731,  719,  731,  182,  182,
  723,  719,    0,  723,  719,  182,    0,    0,  337,  832,
  723,  337,  832,  723,  844,    0,  163,  723,    0,  730,
  719,    0,  723,  182,    0,  723,  337,  832,    0,  832,
  731,    0,    0,    0,    0,  182,    0,  182,    0,    0,
    0,  723,  732,    0,  719,  732,    0,  719,  719,    0,
    0,    0,  732,    0,    0,  732,    0,  719,    0,  732,
  182,    0,    0,    0,  732,  723,    0,  732,  723,  723,
    0,    0,  720,    0,  719,  163,    0,    0,  723,    0,
    0,    0,  448,  732,    0,  182,    0,  583,    0,    0,
  583,    0,    0,    0,    0,  723,    0,  583,    0,    0,
  583,  719,    0,    0,  583,    0,    0,  732,    0,  583,
  732,  732,  583,  719,  724,  719,    0,    0,    0,    0,
  732,    0,  723,  448,    0,    0,  448,    0,  583,  720,
    0,  498,  720,    0,  723,    0,  723,  732,    0,  720,
    0,  448,  720,    0,    0,    0,  720,    0,  719,    0,
    0,  720,  583,    0,  720,    0,  583,    0,    0,  480,
    0,    0,    0,    0,  732,  583,    0,    0,    0,  723,
  720,  724,  498,    0,  724,  498,  732,    0,  732,    0,
    0,  724,  583,    0,  724,  481,    0,    0,  724,    0,
  498,    0,    0,  724,  720,    0,  724,  720,  720,  480,
  480,    0,    0,  480,    0,    0,    0,  720,    0,  583,
    0,  732,  724,  488,    0,    0,    0,    0,  480,    0,
    0,  583,  498,    0,  720,  481,  481,  173,    0,  481,
    0,    0,  832,  832,    0,    0,  724,    0,    0,  724,
  724,  832,    0,    0,  481,  832,    0,    0,  832,  724,
  480,  720,    0,  832,  488,    0,  583,  488,    0,    0,
    0,    0,    0,  720,  832,  720,  724,  832,    0,    0,
    0,  832,  488,  832,  163,    0,  481,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  173,  832,    0,  337,
    0,    0,    0,  724,    0,  163,  337,    0,  720,  337,
    0,    0,    0,  337,  488,  724,    0,  724,  832,  832,
    0,  337,    0,    0,  832,  832,  832,  163,  832,  832,
  832,    0,  832,  163,    0,    0,    0,  337,    0,    0,
    0,    0,  472,    0,    0,    0,    0,    0,    0,    0,
  724,    0,  832,    0,  832,    0,  163,    0,    0,    0,
    0,  337,    0,    0,    0,    0,  470,    0,    0,    0,
  448,    0,  448,    0,  337,  163,    0,  448,    0,    0,
  448,    0,    0,  472,  163,  832,  472,    0,    0,  832,
  163,  337,    0,  448,    0,    0,    0,  468,    0,  498,
    0,  472,  832,    0,    0,    0,    0,  470,  163,    0,
  470,    0,    0,    0,    0,  498,    0,    0,  337,  498,
    0,  498,    0,  465,  832,  470,  498,  480,    0,  498,
  337,    0,  337,  472,    0,    0,    0,    0,  468,  832,
    0,  468,  498,  480,    0,  163,  480,  480,  498,  480,
    0,  498,    0,  481,  480,    0,  468,  480,    0,  832,
  832,    0,    0,    0,  465,    0,    0,  465,  470,  481,
  480,  448,  481,  481,    0,  481,  480,    0,    0,  480,
  481,  488,  465,  481,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  448,    0,  173,  481,  488,    0,    0,
  448,  488,  481,  488,    0,  481,    0,    0,  488,  470,
    0,  488,  470,    0,    0,    0,  173,    0,    0,    0,
  498,    0,    0,    0,  488,    0,    0,  470,    0,    0,
  488,    0,    0,  488,  448,    0,  573,    0,  173,  259,
    0,  260,  498,    0,  173,    0,    0,    0,  480,  498,
    0,    0,    0,  498,  263,    0,    0,    0,    0,  264,
  498,    0,    0,    0,    0,    0,    0,  173,    0,    0,
  480,    0,    0,    0,  481,    0,    0,  480,  498,    0,
    0,  480,    0,  498,    0,    0,  173,    0,  480,    0,
    0,    0,    0,    0,    0,  173,  481,    0,    0,    0,
  472,  173,  488,  481,    0,    0,  480,  481,  498,    0,
    0,  480,  498,    0,  481,    0,  472,    0,    0,  173,
  472,    0,  472,    0,  488,    0,    0,  472,    0,    0,
  472,  488,  481,    0,    0,  488,  480,  481,    0,    0,
  480,    0,  488,  472,  470,  573,  470,    0,  259,  472,
  260,  470,  472,    0,  470,  468,  173,    0,    0,    0,
  488,    0,  481,  263,    0,  488,  481,  470,  264,    0,
    0,    0,    0,    0,  468,  468,    0,  468,    0,    0,
    0,  465,  468,    0,    0,  468,    0,    0,    0,    0,
  488,    0,    0,    0,  488,    0,    0,    0,  468,    0,
  465,  465,    0,  465,  468,    0,    0,    0,  465,    0,
    0,  465,    0,    0,  573,    0,    0,  259,    0,  260,
    0,  472,    0,    0,  465,    0,  470,    0,    0,    0,
  465,    0,  263,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  472,    0,  470,  470,    0,  470,    0,
  472,    0,    0,  470,  472,    0,  470,    0,    0,    0,
    0,  472,    0,  234,    0,    0,    0,  470,    0,  470,
    0,    0,  235,    0,  470,  470,  468,    0,    0,  472,
    0,    0,    0,    0,  472,    0,  236,    0,    0,  569,
    0,    0,  237,  238,    0,    0,  438,    0,  468,    0,
    0,    0,  465,    0,    0,  468,    0,    0,  470,  472,
    0,  570,    0,  472,  468,  235,  468,    0,    0,    0,
    0,    0,    0,  239,  465,    0,    0,    0,    0,    0,
    0,  465,    0,    0,  468,    0,    0,  438,    0,  468,
  438,    0,  465,    0,    0,    0,    0,  470,    0,    0,
    0,  241,  242,    0,    0,  438,  235,    0,    0,  235,
  465,    0,    0,  243,    0,  465,    0,  244,  468,  470,
    0,    0,  234,    0,  235,  571,  470,    0,    0,    0,
    0,  235,    0,    0,  470,    0,    0,  470,    0,    0,
    0,    0,    0,  262,  465,  236,  259,    0,  260,    0,
    0,  237,  238,    0,    0,  470,    0,    0,    0,    0,
  470,  263,    0,    0,    0,    0,  264,    0,  572,    0,
  570,    0,    0,    0,    0,  470,    0,    0,  470,    0,
  245,    0,  239,    0,    0,    0,    0,    0,    0,  470,
  246,  234,    0,  470,    0,    0,    0,    0,    0,    0,
  235,    0,    0,    0,  247,  248,  249,  250,  161,  162,
  241,  242,    0,    0,  236,    0,    0,    0,  251,    0,
  237,  238,  243,    0,    0,    0,  244,  252,  253,  254,
  255,  256,  257,  258,  571,    0,    0,    0,    0,  570,
  262,    0,    0,  259,    0,  260,    0,  182,    0,    0,
    0,  239,    0,    0,    0,    0,    0,    0,  263,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  410,    0,    0,    0,  572,    0,  241,
  242,    0,    0,    0,    0,    0,    0,    0,    0,  245,
    0,  243,    0,    0,    0,  244,    0,    0,    0,  246,
    0,    0,    0,  571,    0,    0,  182,    0,    0,    0,
    0,    0,    0,  247,  248,  249,  250,  161,  162,    0,
    0,    0,    0,    0,  438,    0,  438,  251,    0,    0,
    0,    0,    0,    0,  438,    0,  252,  253,  254,  255,
  256,  257,  258,  235,    0,  235,  572,  438,    0,    0,
    0,    0,    0,  235,    0,    0,    0,    0,  245,    0,
    0,    0,    0,  973,    0,    0,  974,    0,  246,    0,
  234,    0,    0,    0,    0,    0,    0,    0,    0,  235,
    0,    0,  247,  248,  249,  250,  161,  162,    0,    0,
  167,    0,    0,  236,    0,    0,  251,  174,    0,  237,
  238,    0,    0,    0,    0,  252,  253,  254,  255,  256,
  257,  258,  470,    0,  470,    0,    0,    0,  262,    0,
    0,  259,  470,  260,    0,  438,    0,    0,    0,    0,
  239,  167,    0,    0,  167,  470,  263,    0,    0,   74,
    0,  264,    0,    0,  235,    0,   75,  438,    0,  167,
   76,   77,    0,    0,  438,    0,  174,    0,  241,  242,
  982,    0,    0,  974,    0,    1,  235,  234,    0,    0,
  243,   78,    0,  235,  244,    0,  235,    0,    0,    0,
  262,    0,    0,  259,    0,  260,    0,    2,  438,    0,
  236,    0,    0,    0,    0,    3,  237,  238,  263,    0,
    0,    0,    4,  264,    5,  182,    6,  235,    0,    0,
    0,    7,    0,  470,    0,    0,    0,    0,    8,    0,
    0,    0,    0,    0,    0,    0,  182,  239,    0,  975,
    0,    0,    9,    0,    0,  470,   79,  245,    0,    0,
    0,    0,  470,   10,    0,    0,    0,  246,  182,    0,
    0,    0,    0,   80,  182,  241,  242,    0,    0,    0,
    0,  247,  248,  249,  250,  161,  162,  243,   81,    0,
    0,  244,   82,    0,    0,  251,  470,  182,    0,    0,
    0,    0,    0,   83,  252,  253,  254,  255,  256,  257,
  258,    0,    0,    0,    0,    0,  182,    0,    0,    0,
    0,    0,   84,    0,  182,  182,    0,    0,    0,    0,
   11,  182,    0,    0,    0,    0,    0,   12,    0,    0,
   13,    0,   14,   15,    0,    0,  975,    0,    0,  182,
    0,    0,    0,    0,  245,    0,    0,    0,  986,    0,
    0,  974,    0,    0,  246,  234,    0,   16,  167,    0,
    0,    0,    0,    0,  235,  174,    0,    0,  247,  248,
  249,  250,  161,  162,    0,    0,  182,    0,  236,  167,
    0,    0,  251,    0,  237,  238,  174,  182,    0,    0,
    0,  252,  253,  254,  255,  256,  257,  258,    0,    0,
    0,  167,    0,    0,    0,    0,    0,  167,  174,    0,
  994,    0,    0,  974,  174,  239,    0,  234,  262,    0,
    0,  259,    0,  260,    0,    0,  235,    0,    0,    0,
  167, 1209,    0,    0,  777,    0,  263,  174,  517,    0,
  236,  264,    0,  241,  242,    0,  237,  238,    0,  167,
    0,    0,    0,  778,    0,  243,  174,  518,  167,  244,
  519,    0,    6,  262,  167,  174,  259,    0,  260,    0,
    0,  174,    0, 1294, 1295,    0, 1296,  239,    0, 1297,
    0,  263,  167,    0,    0,    0,  264,    0,    0,  174,
    0,    0,    0, 1298,    0,    0,    0,    0,    0, 1299,
    0,  520,    0,    0,    0,  241,  242,  521,  522,  523,
    0,  524,  525,  526,  975,  527,    0,  243,    0,  167,
    0,  244,  245,    0,    0,    0,  174,    0,    0,    0,
    0,    0,  246,    0,    0,  528,    0,  529,    0,  262,
    0,    0,  259,    0,  260,    0,  247,  248,  249,  250,
  161,  162,    0,    0,    0,    0,    0,  263,    0, 1300,
  251,    0,  264,    0,    0,    0,    0,    0,  530,  252,
  253,  254,  255,  256,  257,  258,  975,    0,   14,    0,
    0,    0,    0,    0,  245,  531,    0,    0,    0,    0,
    0,    0,  516, 1301,  246,    0,  517,    0,    0,    0,
    0,    0,    0,   16,    0,    0,    0,  532,  247,  248,
  249,  250,  161,  162, 1302,  518,    0,    0,  519,    0,
    0,  166,  251,    0,    0,    0,    0,    0,    0,    0,
    0,  252,  253,  254,  255,  256,  257,  258,  997,    0,
    0,  974,  533,  534,    0,  234,    0,    0,    0,    0,
    0,    0,    0,    0,  235,    0,    0,    0,    0,  520,
    0,    0,    0,    0,    0,  521,  522,  523,  236,  524,
  525,  526,    0,  527,  237,  238,    0,    0,    0,    0,
    0,    0,    0, 1002,    0,    0,  974,    0,    0,    0,
  234,  262,    0,  528,  259,  529,  260,    0,    0,  235,
    0,    0,    0,    0,    0,  239,    0,    0,    0,  263,
    0,    0,    0,  236,  264,    0,    0,    0,    0,  237,
  238,    0,    0,    0,    0,    0,  530,    0,    0,    0,
    0,    0,    0,  241,  242,    0,    0,  262,    0,  261,
  259,    0,  260,  531,    0,  243,    0,    0,    0,  244,
  239,    0,    0,    0,    0,  263,    0,    0,    0, 1005,
  264,    0,  974,    0,    0,  532,  234,    0,    0,    0,
    0,    0,    0,    0,    0,  235,    0,    0,  241,  242,
  224,    0,    0,    0,    0,    0,    0,    0,    0,  236,
  243,    0,    0,    0,  244,  237,  238,    0,    0,    0,
  533,  534,    0,    0,  975,    0,    0,    0,    0,    0,
    0,    0,  245,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  246,    0,    0,    0,  239,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  247,  248,  249,  250,
  161,  162,    0,    0,    0,    0,    0,    0,    0,  975,
  251,    0,    0,    0,  241,  242,    0,  245,    0,  252,
  253,  254,  255,  256,  257,  258,  243,  246,    0,    0,
  244,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  247,  248,  249,  250,  161,  162,    0,    0,    0,
    0,    0,    0,    0,    0,  251,    0,    0,    0,    0,
    0,    0,    0,    0,  252,  253,  254,  255,  256,  257,
  258, 1008,    0,    0,  974,    0,    0,  826,  234,  826,
  826,    0,  826,    0,    0,  975,    0,  235,    0,    0,
    0,    0,    0,  245,    0,  826,    0,    0,    0,    0,
  826,  236,  516,  246,    0,    0,  517,  237,  238,  262,
    0,    0,  259,    0,  260,    0,    0,  247,  248,  249,
  250,  161,  162,    0,  234,  518,    0,  263,  519,    0,
    0,  251,  264,  235,    0,    0,    0,    0,  239,    0,
  252,  253,  254,  255,  256,  257,  258,  236,    0,    0,
    0,    0,    0,  237,  238,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  241,  242,    0,  520,
    0,    0,    0,    0,    0,  521,  522,  523,  243,  524,
  525,  526,  244,  527,  239,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  528,    0,  529,    0,    0,    0,    0,
  240,    0,  241,  242,    0,    0,    0,    0,    0,    0,
 1253, 1254,    0,    0,  243,    0,    0,    0,  244,    0,
 1259, 1260,    0, 1262, 1263,    0,  530,  975,    0,    0,
    0, 1267, 1268, 1269, 1270,  245, 1271, 1272, 1273, 1274,
 1275, 1276,    0,  531,    0,  246,    0,    0,  262,    0,
    0,  259,    0,  260,    0,    0,    0,    0,    0,  247,
  248,  249,  250,  161,  162,  532,  263,    0,    0,    0,
    0,  264,    0,  251,    0,    0,    0,    0,    0,    0,
    0,  245,  252,  253,  254,  255,  256,  257,  258,    0,
    0,  246,    0,    0,  826,    0,    0,    0,    0,    0,
  533,  534,    0,  826,    0,  247,  248,  249,  250,  161,
  162,    0,    0,    0,    0,    0,    0,  826,    0,  251,
    0,    0,    0,  826,  826,    0,  234,    0,  252,  253,
  254,  255,  256,  257,  258,  235,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  634,    0,  259,  236,
  260,    0,    0,    0,  826,  237,  238,    0,    0,    0,
    0,    0,    0,  263,    0,    0,    0,    0,  264,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  826,    0,  826,  826,    0,    0,  239,    0,    0,    0,
  262,    0,    0,  259,  826,  260,    0,    0,  826,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  263,    0,
    0,    0,    0,  264,  241,  242,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  243,    0,    0,    0,
  244,    0,    0,    0,  632,  420,  418,    0,  419,    0,
  421,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  804,  803,  805,    0,    0,    0,    0,
    0,  826,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  826,    0,    0,    0,  234,    0,  410,    0,    0,
    0,    0,    0,    0,  235,  826,  826,  826,  826,  826,
  826,    0,    0,  245,    0,    0,    0,    0,  236,  826,
    0,    0,    0,  246,  237,  238,    0,    0,  826,  826,
  826,  826,  826,  826,  826,    0,    0,  247,  248,  249,
  250,  161,  162,    0,    0,    0,    0,    0,    0,    0,
    0,  251,    0,    0,    0,  239,    0,    0,    0,    0,
  252,  253,  254,  255,  256,  257,  258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  240,    0,  241,  242,    0,    0,    0,  262,    0,
    0,  259,  234,  260,    0,  243,    0,    0,    0,  244,
    0,  235,    0,    0,    0,    0,  263,    0,    0,    0,
    0,  264,    0,    0,    0,  236,    0,    0,    0,    0,
    0,  237,  238,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,  259,  234,  260,    0,
    0,    0,    0,    0,    0,    0,  235,    0,    0,    0,
    0,  263,  239,    0,    0,    0,  264,    0,    0,    0,
  236,    0,  245,    0,    0,    0,  237,  238,    0,    0,
    0,    0,  246,    0,    0,    0,    0,    0,    0,    0,
  241,  242,    0,    0,    0,  791,  247,  248,  249,  250,
  161,  162,  243,  416,    0,    0,  244,  239,    0,  417,
  251,    0,  792,    0,    0,    0,    0,    0,    0,  252,
  253,  254,  255,  256,  257,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  241,  242,    0,    0,    0,
  826,    0,    0,  826,    0,  826,    0,  243,  793,    0,
    0,  244,    0,    0,    0,    0,    0,  794,  826,    0,
    0,    0,    0,  826,    0,  795,    0,    0,    0,  245,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  246,
    0,    0,    0,    0,  796,    0,  797,    0,    0,    0,
    0,    0,    0,  247,  248,  249,  250,  161,  162,    0,
  798,    0,  799,  800,  801,    0,    0,  251,    0,    0,
    0,    0,    0,    0,  245,    0,  252,  253,  254,  255,
  256,  257,  258,    0,  246,  234,    0,    0,    0,    0,
    0,    0,    0,    0,  235, 1000,    0,    0,  247,  248,
  249,  250,  161,  162,    0,    0,    0,    0,  236,    0,
    0,    0,  251,  802,  237,  238,    0,    0,    0,    0,
    0,  252,  253,  254,  255,  256,  257,  258,    0,    0,
  234,    0,    0,    0,    0,    0,    0,    0,    0,  235,
    0,    0,    0,    0,    0,  239,    0,    0,    0,    0,
    0,    0,    0,  236,    0,    0,    0,    0,    0,  237,
  238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  241,  242,    0,    0,    0,    0,    0,
    0,    0,  127,    0,    0,  243,    0,    0,    0,  244,
  239,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  241,  242,
  420,  418,    0,  419,    0,  421,    0,  826,    0,    0,
  243,    0,    0,    0,  244,    0,  826,    0,  804,  803,
  805,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  826,    0,  245,    0,    0,    0,  826,  826,    0,    0,
    0,    0,  246,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1155,    0,    0,  247,  248,  249,  250,
  161,  162,    0,    0,    0,    0,    0,  826,    0,    0,
  251,    0,    0,    0,    0,    0,    0,  245,    0,  252,
  253,  254,  255,  256,  257,  258,    0,  246,    0,    0,
    0,    0,    0,    0,  206,  826,  826,    0,  206,    0,
    0,  247,  248,  249,  250,  161,  162,  826,    0,    0,
    0,  826,    0,  206, 1209,  251,    0,  206,    0,    0,
  206,    0,    0,    0,  252,  253,  254,  255,  256,  257,
  258,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,
    0,    0, 1396,    0,    0,    0, 1294, 1295,    0, 1296,
    0,  206, 1297,    0,    0,    0,    0,  206,  206,  206,
    0,  206,  206,  206,  826,  206, 1298,    0,    0,    0,
    0,    0, 1299,    0,  826,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  206,    0,  206,  826,  826,
  826,  826,  826,  826,    0,    0,    0,    0,    0,    0,
    0,    0,  826,    0,    0,    0,    0,    0,    0,    0,
    0,  826,  826,  826,  826,  826,  826,  826,  206,    0,
  791,    0,    0,   76,    0,    0,    0,    0,  416,  206,
    0,    0, 1300,  206,  417,  206,    0,  792,    0,    0,
    0,    0,    0,    0,    0,  120,    0,    0,  206,  120,
    0,   14,  206,    0,    0,  206,    0,  206,    0,    0,
    0,    0,    0,    0,    0,    0, 1301,    0,  120,    0,
    0,  120,    0,  793,    0,    0,   16,    0,    0,    0,
    0,    0,  794,    0,    0, 1397,    0, 1302,    0,    0,
  795,    0,  206,  206,  166,    0,  206,    0,    0,    0,
    0,    0,  206,  206,  206,    0,  206,  206,  206,  796,
  206,  797,  120,  283,    0,    0,    0,    0,  120,  120,
  120,    0,  120,  120,  120,  798,  120,  799,  800,  801,
  206,    0,  206,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  283,    0,  120,    0,  120,    0,
    0,  283,    0,    0,    0,  283,  283,    0,  283,    0,
    0,  283,    0,  206,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  283,    0,    0,  802,  120,
  206,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  120,    0,    0,    0,
    0,    0,  206,    0,    0,    0,    0,    0,    0,    0,
  494,    0,    0,    0,    0,    0,    0,    0,  120,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,  140,  141,  142,  143,    0,    0,  206,  206,    0,
    0,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,  120,    0,    0,    0,    0,    0,
  283,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  283,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  283,    0,    0,    0,    0,
    0,    0,    0,    0,  283,  402,  283,    0,    0,    0,
    0,    0,    0,  283,    0,  402,  402,  402,  402,  402,
  402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
};
static short yycheck[] = {                                      54,
   16,   46,    4,   55,    4,   47,   93,    0,   54,  213,
  213,   54,  213,  397,  424,   57,   48,  449,   53,  503,
  338,  477,  342,   75,  480,   83,  430,   59,  124,  589,
  486,   60,  410,   78,  676,  486,  446,   79,  346,  346,
  317,  850,  683,   42,   86,  571,    0,  573,   58,   40,
  221,    0,    0,   82,   45,  300,   44,   73,    0,   40,
  231,   44,  102,  361,  104,   81,  121,    0,   45,   45,
   80,  103,   42,  310,   41,  177,  909,  489,  742,   40,
  645,   44,    0, 1189,   59,   41,   59,  920,  930,   40,
    0,    0,   41,  680,   40,   44,   40,   58,    0,    0,
  187,   44,   42,  936,   45,   59,    0,   45,  115,  946,
   59,   59,  147, 1280,    0,   44,   44,   59,   44,   40,
   44,  693,   91,  604,  536,    0,   59,   44,   40,    0,
   44,   41,   41,  693,   44,  264,  456, 1078,  173,  226,
    0,   59,    0,  274,  313,  463,  464,  465,  466,   59,
   59,  229,    0,   58,  284,  260,   63,   59,   59,  302,
  215,   45,  288,  367,  367,   59,  367,  288,  113,  215,
    0,  260, 1113,   59,  658,  565,  392, 1063,  486,  486,
  263,   41,   41,   41,   59,   44,   44,  219,   59,  378,
  264,  511,    0,    0,  344,  344, 1019,  229, 1021,   59,
  309,   59,  686,  687,    0,    0,  262,   45,  304,  380,
    0,   59,  284,  301,  347,  277,  257,  459,  516,  369,
  369, 1082,  388,  321,  268,   63,    0,  435,  406,   59,
  313,  349,  559,   41,   16,   44,   44,  287,    0,  284,
  358,  324,  353,  456,  486,  300,   41,  425,  303,   44,
   59,   59,   59,  461,  300,  385,  288,  303, 1091,  403,
  449,   44,    0,   59,   59,  353, 1108,   41,  379,   59,
  325,    0,  728, 1122,    0,  441,  316,  427,  427,  325,
  806,  807,    0,  323,  346,   59, 1453,  327,  672,  257,
  330,   73,  388,  858,  335,  707,  429,   59,  297,    0,
  443,  470,    0,   12,  339,   41,  341,    0,  277, 1415,
  440,  461,  357,  418,  259,  260,  394,  262,  353,    0,
  260,   59,  366,  355,  736, 1026, 1493,  457,   41,  418,
   59,  387,  461,   59,  285,  461,  467,  379,  412,  437,
  461,   59,  823,  452,  376,  428,  750,  264,  269, 1455,
  392,  832,  833, 1214,  310,  387,  319,  389,   59,  361,
 1183,   59,  394, 1027,  304,    0,   59,  335,  440,  956,
  319,  897,  258,  322, 1207,  702,  305, 1210,   59, 1212,
  329,  483, 1219,  332,  711,  589,  589,  336,  589, 1330,
  332,  607,  341,  400, 1243,  344,  329,  321, 1284,  332,
  109,    0,  321,  278, 1237,  280,  264,  321, 1250,  319,
  319,  360,  462,  463,  395,  274,  264,   41,  978,  329,
  329,  307,  332,  332,   59,    0,  461,  598,  673, 1070,
  397,  341,  341, 1097,  344,  384,  411,  764,  411,  388,
  341,  432,   41,  466,  828,  468,  486,  349,  397,  933,
  368,  310,  397,  690,  437,  397,  401,  264,  329,  319,
   59,  332,  461,  321,  397,  414,   41,  455,  459,   44,
  415,  506,  417,  418,  419,  420,  421,  422,  388,  388,
  425,  341,  459,  459,   59,  461,  784,  397,  397,  693,
  693,  461,  441,  441,  504,  907, 1329, 1062,  775,  441,
  461,  455,  557,  397,  453, 1338,  918,  455,  441,  486,
  461,  557,  461,  455,  516,  461,  459,  461,  459,  554,
  555,  459,  455,  935,  319,  453,  397,    0,  388,  455,
 1102,  441,  441,  419,  329,  590,  448,  332, 1064,  488,
  258, 1350, 1102,  453,  590,  319,  341,  441,  432,  344,
    0,  437,  459,  412, 1035,  329,  461,  258,  332, 1085,
  837,  455, 1203,    0,  566,  607,  566,  341,  886,  714,
  441,  961,  368,   41,  952,  459,  384, 1278,  488,  488,
  410,  441,  453, 1416,  455,  471,   59, 1038, 1072,  307,
 1074,  398,  919,  388,  432,  453,  332,  278,   41,  280,
   41,  384,  397,  461,  258, 1204,  307,   44,  467,   59,
    0,  349,  341,  273,  388,   41,  329,  343,  673,  332,
   12,  459,   59,  397,  679,  680,  604,  673,  573,  947,
 1114,  288,  273,  679,  680,  667,    0,  669,  262, 1238,
 1050, 1283,  813,  341,  301,  816,  441,  682,  683, 1429,
  343,   41,  856,  307,  338,  329, 1371,  320,  453,  699,
   44,  397,    0,  608,  609,  278,  611,  441,  613,   59,
    0,  616,  617,  618,  619,  620,  621, 1089,    0,  689,
  406,  455,  959,  409,  397,  378,  631,  727,  728,    0,
  786,  375,  788,  488,    0,   59, 1100, 1257,  379,  425,
  341,  419, 1106,   41,  388,   42, 1118,  320,  343,   93,
   47,   41,  461,  406,  488,  259,  409,  109,  419,   41,
  319,   59,   44, 1503,  726,  451,  270,  672,   59,   59,
 1038, 1038,  425,  735,  260,  418,  302,   59,  401,  378,
    0,  773,  341,  378,  319,  747, 1526,  322,   59,    0,
  760,  761,  762,   59,  329,  357, 1282,  332,  451,  817,
 1138,  336,  445,  387,    0,  419,  341,  912,  913,  344,
  444,  406,  814,  339,  409,  978, 1491,  978,  304,  442,
  419, 1213,  784,  437,   44,  360,  815,  461,  401,  388,
  425,    0,  406,   44,  262, 1227, 1116, 1181,  397,   59,
  260, 1285,  857,  326, 1216, 1289, 1521,  349,   59,  384,
    0,  956,  387,  388,    0,   41,  451,  471,   44,  262,
    0,  262,  397,   59, 1025, 1026, 1027,  466,  430,  442,
  461,  302,   41, 1245, 1410,   44,  262, 1293,  258,  414,
  461,    0,  441,  457,  304,  823,  791,  792,  793,  302,
   59,  796,  797,  798,  832,  800,  801,  802,  803,  804,
  805,   41, 1388,   44,   44, 1391,  441, 1427,  339,   59,
  343,   42,   43,   59,   45, 1451,   47,  443,  453,   59,
  455,    0, 1200,  828,  398,   44,  339,  307, 1310,  488,
  461,  418,  329,  343,  949,  332,  841,  265, 1102, 1102,
   59,  956, 1462,  949,  849,  378,  851,  344,  431,  444,
  956,  856,   93,  488, 1490,  438,   44,  329,  445,  387,
  462,  463,   41,  437,  461,  927,  461,  927,  378,  319,
 1340,   44,  942,  406,  357,  303,  409,  408, 1422,  329,
   59,  260,  332,  280,  387, 1505,  387,  418,  958,  286,
   45,  341,  425,  259,  964,  319,  406,  471,  264,  409,
  397,  387,  406, 1412,  270,   93,    0,  278,   63,  280,
  338,  394,  443,  396,    0,  425,  410,  341,  451,  280,
   93,  319,    0,  302,    0,  286, 1190,    0,  279,  319,
  443,  403,  461,    0,  332,  314,  419,  319,  388,  419,
 1449,  451,  332,  341,  441,    0,    0,  397, 1063, 1419,
  332,  341,    0,  457, 1540,   41,  453, 1063,  455,  341,
  339,  444,  322, 1025, 1026,   59,   44,  439,   41,    0,
  260,   44,  444,   59,  461, 1070,  336,    0,  450,  330,
 1489,   59,    0,   59,  989,  990,   59,  992,  993,  461,
  388,  441,   59,  262, 1257, 1000, 1257, 1479,  388,  397,
  360,  403,    0,  453,   59,   59,  388,  397,  319,  329,
 1519,   59,  332,  364,  304,  397,  459, 1278,   41,    0,
  461,    0,  262,  319,  344,  272, 1508, 1509,   59,  408,
  341,  382,  398, 1095, 1129, 1095,   59, 1132,  488,  418,
   45,   59,  289,  441,  446,  341,  265,  265,   63,  280,
  319,  441, 1534,  322,  414,  286,  461,  455,   63,  441,
  329,   59,  323,  332,  443, 1547,  459,  336,    0,   84,
  323,   41,  341,  455,   44,  344, 1081,  397,   59,  319,
   59,  312,  322,    0,  303,  303,  461,  334,  279,  329,
  488,  360,  332, 1208, 1209,    0,  336,  459,  488,  461,
  319,  341, 1208, 1209,  344, 1208,  488,  379, 1203,   41,
  301,  461,   44,  295, 1119,  384,  363,  404,  387,  388,
  360,  441,  341,   93,  306, 1217,  343,   59,  397,  401,
 1135,  313,   41,  453,  421,  455,  408,  322,  402,  330,
  319,  296,   59, 1148,  384,  414,  260,  387,  388,   58,
 1155,  336,    0,    0,   59,    0,  338,  397,  349,  344,
   40,  378,  341, 1427, 1427,   44,    0,  358,    0, 1284,
  442,    0,  441,  364,  414,  360, 1181,    0, 1284,    0,
    0, 1328, 1294,  430,  453, 1190,  455,    0,  322,  406,
  304,  382,  409,   41,   41, 1310,   44,   44, 1462, 1462,
  384,  441,  336,  260, 1310,  278,  338,  280,  425,  388,
  344,   59,   59,  453,   59,  455, 1278,  384,  397,  488,
   41,  403,    0,   44,    0,   59,  360,   59,   41,  414,
   59,   44, 1324,  319,  451,    0,   59,  322,   59,   59,
  461, 1505, 1505,  375, 1297,  386,   59,  304,  488, 1344,
 1255,  336, 1347,  435,  384,  341,  388,  439, 1405, 1264,
 1265,    0,  441, 1339,   40,   41,   42,   43,   44,   45,
   46,   47,  317,  318,    0,  360,  455,    0,    0, 1394,
  414,   59, 1384,   59,   60,   61,   62,    0, 1394,  444,
    0,  296,    0,  384,   59, 1300,  319,   41,   41,  384,
   44,   44,  388,  458,  459,  460,  379,  462,  463,  488,
  461,  397, 1427,    0, 1429,   91,  322,   93,  341,  338,
   59, 1427, 1019, 1429, 1021, 1437,  481,  482,  401,  414,
  336,  486,  487,   59, 1410,  408,   59,   59, 1343,   42,
   43,  259,   45,  274,   47,  196,   59, 1462, 1424,   59,
   93,   59,  270,  204,  360,  441, 1462,   44,  258, 1474,
   41,  261,  319,   44, 1479,  388,  419,   41, 1474,  442,
   44,   40,   59, 1479,  397, 1451,  425, 1439,  384, 1439,
 1385, 1457,  462,   41,   42,   43,  264,   45, 1503,   47,
 1505,   40,   46, 1508, 1509, 1500,   45, 1503,   41, 1505,
  319,   44, 1508, 1509,    0,  392,  393,  307,  414,   58,
  258, 1526,  338,  418, 1490,  458,  459,  460,  441, 1534,
 1526, 1497,   41,  317,   41,   44,  274,   44, 1534,  462,
  463,  278, 1547,  280,  462,  463,  461,   42,   43,  444,
   45, 1547,   47,  486,  487,   41,   42,   43,   44,   45,
  337,   47,  453,  458,  459,  460,  279,  462,  463,  307,
  403,  321,  310,   59,   60,   61,   62,  677,  678,   41,
   42,   43,  341,   45,  403,   47,  481,  482,  301,  319,
  384,  486,  487,   41,   42,   43,  262,   45,  264,   47,
   41,   41,   41,   44,   44,   44,  272,   93,  319,   41,
   41,  322,   44,   44,  280,  461,   41,  330,  329,   44,
  286,  332,  384,  289,   41,  336,   41,   44,   40,   44,
  341,   40,  396,  344,  398,   40,  349,  462,  402,  403,
  404,   40,  379,   40,   40,  358,  312,   40,   40,  360,
   40,  364,  462,  319,   40,  321,  322,  462,   91,  325,
  321,   44,   46,  329,  401,    0,  332,  362,  334,  382,
  336,  408,  437,  384,  412,  341,  342,  388,  344,  451,
  435,  419,  418,  443,  358,  412,  397,  280,  470,  288,
   44,   61,    0,  286,  360,  361,  373,  363,  287,  437,
   40,  264,   40,  414,  437,  442,   41,   42,   43,   44,
   45,  377,   47,  379,  380,  381,   44,  461,  384,  321,
   44,  387,  388,  403,   59,   60,   61,   62,  321,  467,
  441,  397,  280,  471,   41,  461,  453,  429,  286,   44,
  461,   61,  453,  280,   44,  322,  383,   44,  414,  278,
  301,   59,  329,  349,  264,  332,  461,  296,   93,  336,
   42,   43,  398,   45,  430,   47,  437,  344,    0,  471,
  398,  459,  277,  448,  400,  441,  262,  488,  264,  448,
   40,  350,   40,  360,   40,  280,  272,  453,   91,  455,
   40,  286,  264,  384,  280,  461,   44,  796,  412,  798,
  286,  800,  801,  289,  803,  804,  805,  384,  390,   41,
   42,   43,   44,   45,  353,   47,  383,  312,  280,   40,
  397,   40,  488,  465,  286,    0,  312,   59,   60,   61,
   62,  437,  280,  319,  318,  321,  322,  414,  286,  325,
   40,  321,  419,  329,   42,   43,  332,   45,  334,   47,
  336,  321,   41,  264,   44,  341,  342,  321,  344,  280,
   40,   93,   44,  329,  441,  449,   41,  459,   40,   44,
  277,    0,  274,   40,  360,  361,  453,  363,  455,  285,
  345,  419,  345,  278,   59,  417,   40,  301,  419,  357,
  418,  377,   40,  379,  380,  381,  461,   40,  384,   44,
   44,  387,  388,  473,  474,  475,  476,  477,  478,  479,
  480,  397,   41,   42,   43,   44,   45,  386,   47,  458,
  459,  460,  461,  462,  463,  368,   41,  262,  414,  264,
   59,   60,   61,   62,   41,   42,   43,  272,   45,  321,
   47,  344,  481,  482,  430,  389,   44,  486,  487,  274,
  266,  286,  389,  389,  289,  441,   41,   42,   43,  332,
   45,  300,   47,   40,   93,  264,   45,  453,  461,  455,
  423,  279,   41,   41,    0,  461,   58,  312,   41,   58,
  262,   41,  455,  441,  319,  395,  321,  322,  310,  310,
  325,   41,   41,  301,  329,   40,   40,  332,  280,  334,
  353,  336,  488,   40,  286,   40,  341,  342,   40,  344,
   40,   40,   40,   40,  328,   41,   40,   43,   44,   45,
   40,   40,  330,   40,   40,  360,  361,   40,  363,   40,
  262,  262,  264,   59,   60,   61,   62,   44,   41,  461,
  272,  349,  377,  488,  379,  380,  381,  423,  391,  384,
  358,  392,  387,  388,  271,  288,  364,  289,  447,   41,
   42,   43,  397,   45,  262,   47,  408,   93,   41,  379,
   41,  278,   40,  418,  382,   41,   41,   41,  437,  414,
  312,  280,  280,   44,  386,   40,  397,  319,  286,  321,
  322,   41,   41,  325,  353,  430,  321,  329,  386,  372,
  332,  356,  334,  278,  336,  280,  441,  372,   41,  341,
  342,   41,  344,  288,   41,   41,   41,   41,  453,   41,
  455,   41,   41,   41,   41,    0,  461,   41,  360,  361,
   41,  363,   41,  262,   41,  264,   41,   40,   59,  341,
   40,  353,   41,  272,   59,  377,   59,  379,  380,  381,
  341,   59,  384,  488,  369,  387,  388,   59,   59,  345,
  289,   40,   59,   59,  341,  397,   41,   44,   43,   44,
   45,  384,  461,  280,   41,   42,   43,   41,   45,  286,
   47,  384,  414,  312,   59,   60,   61,   62,  384,  344,
  319,   41,  321,  322,   41,  280,  325,   41,  430,   44,
  329,  286,  411,  332,  379,  334,   44,  336,  436,  441,
  305,  302,  341,  342,  443,  344,   40,  296,   93,   59,
  294,  453,  305,  455,  464,   44,  401,  308,    0,  461,
   44,  360,  361,  408,  363,   41,  262,    0,  264,   42,
   43,  338,   45,  384,   47,  384,  272,   40,  377,  264,
  379,  380,  381,  278,  321,  384,  488,  390,  387,  388,
  264,  471,  459,  289,  264,  412,   40,  442,  397,   41,
  310,   43,   44,   45,  353,  459,   41,   42,   43,   40,
   45,  271,   47,  344,   45,  414,  312,   59,   60,   61,
   62,  344,  344,  319,  264,  321,  322,  344,  280,  325,
  437,  430,   63,  329,  286,   41,  332,  459,  334,  271,
  336,   40,  441,   41,   40,  341,  342,   41,  344,   59,
  305,   93,   59,   41,  453,    0,  455,    0,    0, 1022,
   12,    0,  461,  231,  360,  361,  223,  363,   41,   42,
   43,  222,   45,  961,   47,  598,  776,  561,  959,  956,
   77,  377, 1228,  379,  380,  381, 1102,  343,  384,  488,
  948,  387,  388,  308,  940,  511,  889,  325,  949,  325,
 1214,  397,   41,  709,   43,   44,   45,  708, 1444,  458,
  459,  460,  461,  462,  463, 1216,  491,  262,  414,  264,
   59,   60,   61,   62,   41,   42,   43,  272,   45, 1448,
   47, 1447,  481,  482,  430,  349, 1483,  486,  487,  699,
 1462, 1533, 1079,  280,  289,  441,   41,   42,   43,  286,
   45, 1399,   47, 1119,   93, 1480,  367,  453, 1410,  455,
  558,  951,  318, 1239,    0,  461,  330,  312,  771,   41,
   42,   43,  493,   45,  319,   47,  321,  322,  311,  549,
  325,  757, 1104,  749,  329,   13,  292,  332,  432,  334,
  436,  336,  488,  667,  645,  425,  341,  342,  679,  344,
 1190, 1284,  426, 1287, 1497,   41, 1549,  280,   44,    0,
 1457,  603,  829,  286,  422,  360,  361,  446,  363,  991,
  262, 1257,  264,   59,  366,   41,   42,   43,   -1,   45,
  272,   47,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,  280,   -1,  289,   -1,   -1,
   41,  286,  397,   44,   -1,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,  296,   -1,   -1,   59,  414,
  312,   42,   43,   -1,   45,   -1,   47,  319,   -1,  321,
  322,   42,   43,  325,   45,  430,   47,  329,   59,   -1,
  332,   -1,  334,   -1,  336,   -1,  441,   -1,   59,  341,
  342,   -1,  344,    0,   -1,   -1,   -1,  280,  453,   -1,
  455,   -1,   45,  286,   -1,   -1,  461,   -1,  360,  361,
   -1,  363,  353,  262,   -1,  264,   -1,   -1,   -1,   -1,
   63,   -1,   -1,  272,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,  488,   41,  387,  388,   44,    0,   -1,
  289,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   59,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,    0,  414,  312,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,  280,  325,   -1,  430,   41,
  329,  286,   44,  332,   -1,  334,   -1,  336,   -1,  441,
   -1,   -1,  341,  342,   -1,  344,   -1,   59,  280,   -1,
   -1,  453,   41,  455,  286,   44,   -1,   -1,   -1,  461,
   -1,  360,  361,   -1,  363,   -1,  262,  458,  459,  460,
   59,  462,  463,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,    0,  384,  488,   -1,  387,  388,
  481,  482,   -1,   -1,   -1,  486,  487,   -1,  397, 1394,
   -1,   -1,   91,   -1,  280,   -1,   -1,   -1,   -1,   -1,
  286,  262,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   41,  322,   -1,   44,   -1,
   -1,  430, 1427,  329, 1429,  280,  332,   -1,   -1,   -1,
  336,  286,  441,   59,   -1,  341,  273,   -1,  344,  280,
  277,   -1,   -1,   -1,  453,  286,  455,   -1,  285,  280,
   -1,   -1,  461,   -1,  360,  286,   -1, 1462,  319,  296,
    0,  322,  299,   -1,   -1,   -1,   -1,   -1,  329, 1474,
   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,  384,  488,
  341,  387,  388,  344,   -1,   -1,   -1,    0,   -1,    0,
   -1,  397,   -1,  296,   -1,  262,   -1,   -1, 1503,  360,
 1505,   41,   -1,  340,   44,   -1,   -1,   -1,  414,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   59,
   -1, 1526,   -1,  384,   -1,   -1,  387,  388,   41,   -1,
   41,   44,   -1,   44,   -1,  441,  397,  374,   -1,  376,
  262,   -1,   -1,   -1,   -1,   -1,   59,  453,   59,  455,
  353,   -1,  319,  414,   -1,  322,   -1,   -1,   -1,  258,
   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,
  407,   -1,   -1,   -1,  341,  274,   -1,  344,  277,  278,
  441,  280,  488,   -1,   -1,   -1,  285,  424,   -1,  288,
   -1,   -1,  453,  360,  455,   -1,   -1,  319,   -1,    0,
  322,   -1,  301,   -1,   -1,    0,   -1,  329,  307,  446,
  332,  310,   -1,   -1,  336,   -1,   -1,  384,   -1,  341,
  387,  388,  344,   -1,  461,   -1,    0,  488,    0,   -1,
  397,   -1,   -1,   -1,   -1,   -1,  262,   -1,  360,   -1,
   41,   -1,   -1,   44,  481,  482,   41,  414,   -1,   44,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,   59,  462,
  463,   -1,  384,   -1,   59,  387,  388,   41,   -1,   41,
   44,   -1,   44,   -1,  441,  397,   -1,   -1,  481,  482,
  379,   -1,   -1,  486,  487,   59,  453,   59,  455,   -1,
   -1,   -1,  414,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  401,  329,   -1,   -1,  332,   -1,   -1,  408,
  336,   -1,   -1,  412,   -1,  341,   -1,   -1,  344,  441,
  419,  488,  262,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,  453,   -1,  455,  360,   -1,   -1,   -1,  437,  306,
   -1,   -1,   -1,  442,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  384,  326,
   -1,  387,  388,   -1,   -1,  278,  488,  280,  467,    0,
   -1,  397,  471,   -1,   -1,  288,   -1,   45,   -1,  319,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  414,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,  319,   -1,
   41,  322,   -1,   44,   -1,  441,   -1,   -1,  329,    0,
  360,  332,   -1,   -1,   -1,  336,   -1,  453,   59,  455,
  341,   -1,   -1,  344,   -1,   -1,  403,  260,   -1,   -1,
   -1,    0,   -1,   -1,  384,   -1,   -1,  387,  388,  360,
   -1,   -1,    0,  420,   -1,   -1,   -1,  397,   -1,   -1,
   41,  262,  488,   44,   -1,   -1,  379,  262,  435,   -1,
   -1,  384,  439,  384,  414,  442,  387,  388,   59,  302,
   -1,   -1,   41,  450,   -1,   44,  397,   -1,  401,   -1,
  262,  314,   -1,   41,   -1,  408,   44,   -1,   -1,   -1,
   59,  441,  469,  414,  278,  328,  280,   -1,   -1,   -1,
   -1,   59,   -1,  453,  288,  455,  339,   -1,  319,   -1,
   -1,  322,   -1,   -1,  319,   -1,   -1,  322,  329,  442,
  441,  332,   -1,   -1,  329,  336,   -1,  332,   -1,   -1,
  341,  336,  453,  344,  455,   -1,  341,  319,  488,  344,
  322,    0,   -1,   -1,   -1,   -1,   -1,  329,   -1,  360,
  332,   -1,   -1,   -1,  336,  360,   -1,   -1,   -1,  341,
    0,   -1,  344,   -1,   -1,   -1,   -1,  488,   -1,   -1,
   -1,   -1,   -1,  384,   -1,  408,  387,  388,  360,  384,
   -1,    0,  387,  388,   -1,  418,  397,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,  379,   -1,   -1,   -1,   -1,
   59,   41,  384,  414,   44,  387,  388,   -1,   -1,  414,
  443,   -1,   -1,   -1,   -1,  397,   -1,  401,  296,   59,
   -1,  262,   41,    0,  408,   44,   -1,   -1,  461,   -1,
  441,   -1,  414,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   59,   -1,  453,   -1,  455,   -1,   -1,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  442,  441,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,    0,   -1,
   -1,  453,   -1,  455,   -1,  353,  260,  488,  319,   -1,
   -1,  322,   59,  488,   -1,   -1,   -1,  278,  329,  280,
   -1,  332,   -1,  262,   -1,  336,   -1,  288,   -1,   -1,
  341,   -1,   -1,  344,  262,   -1,  488,   -1,   -1,   41,
    0,   -1,   44,   -1,   -1,   -1,   -1,   -1,  302,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
  319,   41,    0,  322,   44,  339,  397,   -1,   -1,   -1,
  329,  319,   -1,  332,  322,   -1,  444,  336,   -1,   59,
   -1,  329,  341,  414,  332,  344,   -1,   -1,  336,   -1,
  458,  459,  460,  341,  462,  463,  344,   -1,  379,   -1,
   -1,  360,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
  441,   -1,  360,  481,  482,  483,  484,  485,  486,  487,
  401,   59,  453,   -1,  455,  384,   -1,  408,  387,  388,
  279,   -1,  262,   -1,  408,   -1,  384,   -1,  397,  387,
  388,   -1,   -1,   -1,  418,   -1,   -1,   -1,   -1,  397,
   -1,   -1,  301,  262,   -1,  414,   -1,  488,   -1,   -1,
   -1,  442,   -1,   -1,   -1,   -1,  414,   -1,   -1,  443,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,    0,   -1,
   -1,  330,  441,   -1,   -1,   -1,   -1,  461,   -1,  319,
   -1,   -1,  322,  441,  453,  262,  455,   -1,   -1,  329,
  349,   -1,  332,   -1,   -1,  453,  336,  455,  357,  358,
  319,  341,   -1,  322,  344,  364,   -1,   -1,   41,   41,
  329,   44,   44,  332,   46,   -1,    0,  336,   -1,  488,
  360,   -1,  341,  382,   -1,  344,   59,   59,   -1,   61,
  488,   -1,   -1,   -1,   -1,  394,   -1,  396,   -1,   -1,
   -1,  360,  319,   -1,  384,  322,   -1,  387,  388,   -1,
   -1,   -1,  329,   -1,   -1,  332,   -1,  397,   -1,  336,
  419,   -1,   -1,   -1,  341,  384,   -1,  344,  387,  388,
   -1,   -1,  262,   -1,  414,   59,   -1,   -1,  397,   -1,
   -1,   -1,    0,  360,   -1,  444,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,  414,   -1,  329,   -1,   -1,
  332,  441,   -1,   -1,  336,   -1,   -1,  384,   -1,  341,
  387,  388,  344,  453,  262,  455,   -1,   -1,   -1,   -1,
  397,   -1,  441,   41,   -1,   -1,   44,   -1,  360,  319,
   -1,    0,  322,   -1,  453,   -1,  455,  414,   -1,  329,
   -1,   59,  332,   -1,   -1,   -1,  336,   -1,  488,   -1,
   -1,  341,  384,   -1,  344,   -1,  388,   -1,   -1,    0,
   -1,   -1,   -1,   -1,  441,  397,   -1,   -1,   -1,  488,
  360,  319,   41,   -1,  322,   44,  453,   -1,  455,   -1,
   -1,  329,  414,   -1,  332,    0,   -1,   -1,  336,   -1,
   59,   -1,   -1,  341,  384,   -1,  344,  387,  388,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,  397,   -1,  441,
   -1,  488,  360,    0,   -1,   -1,   -1,   -1,   59,   -1,
   -1,  453,   91,   -1,  414,   40,   41,    0,   -1,   44,
   -1,   -1,  264,  265,   -1,   -1,  384,   -1,   -1,  387,
  388,  273,   -1,   -1,   59,  277,   -1,   -1,  280,  397,
   91,  441,   -1,  285,   41,   -1,  488,   44,   -1,   -1,
   -1,   -1,   -1,  453,  296,  455,  414,  299,   -1,   -1,
   -1,  303,   59,  305,  258,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,  319,   -1,  322,
   -1,   -1,   -1,  441,   -1,  279,  329,   -1,  488,  332,
   -1,   -1,   -1,  336,   91,  453,   -1,  455,  340,  341,
   -1,  344,   -1,   -1,  346,  347,  348,  301,  350,  351,
  352,   -1,  354,  307,   -1,   -1,   -1,  360,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  488,   -1,  374,   -1,  376,   -1,  330,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
  278,   -1,  280,   -1,  397,  349,   -1,  285,   -1,   -1,
  288,   -1,   -1,   41,  358,  407,   44,   -1,   -1,  411,
  364,  414,   -1,  301,   -1,   -1,   -1,    0,   -1,  258,
   -1,   59,  424,   -1,   -1,   -1,   -1,   41,  382,   -1,
   44,   -1,   -1,   -1,   -1,  274,   -1,   -1,  441,  278,
   -1,  280,   -1,    0,  446,   59,  285,  258,   -1,  288,
  453,   -1,  455,   91,   -1,   -1,   -1,   -1,   41,  461,
   -1,   44,  301,  274,   -1,  419,  277,  278,  307,  280,
   -1,  310,   -1,  258,  285,   -1,   59,  288,   -1,  481,
  482,   -1,   -1,   -1,   41,   -1,   -1,   44,    0,  274,
  301,  379,  277,  278,   -1,  280,  307,   -1,   -1,  310,
  285,  258,   59,  288,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  401,   -1,  258,  301,  274,   -1,   -1,
  408,  278,  307,  280,   -1,  310,   -1,   -1,  285,   41,
   -1,  288,   44,   -1,   -1,   -1,  279,   -1,   -1,   -1,
  379,   -1,   -1,   -1,  301,   -1,   -1,   59,   -1,   -1,
  307,   -1,   -1,  310,  442,   -1,   40,   -1,  301,   43,
   -1,   45,  401,   -1,  307,   -1,   -1,   -1,  379,  408,
   -1,   -1,   -1,  412,   58,   -1,   -1,   -1,   -1,   63,
  419,   -1,   -1,   -1,   -1,   -1,   -1,  330,   -1,   -1,
  401,   -1,   -1,   -1,  379,   -1,   -1,  408,  437,   -1,
   -1,  412,   -1,  442,   -1,   -1,  349,   -1,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  401,   -1,   -1,   -1,
  258,  364,  379,  408,   -1,   -1,  437,  412,  467,   -1,
   -1,  442,  471,   -1,  419,   -1,  274,   -1,   -1,  382,
  278,   -1,  280,   -1,  401,   -1,   -1,  285,   -1,   -1,
  288,  408,  437,   -1,   -1,  412,  467,  442,   -1,   -1,
  471,   -1,  419,  301,  278,   40,  280,   -1,   43,  307,
   45,  285,  310,   -1,  288,  258,  419,   -1,   -1,   -1,
  437,   -1,  467,   58,   -1,  442,  471,  301,   63,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,  280,   -1,   -1,
   -1,  258,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  467,   -1,   -1,   -1,  471,   -1,   -1,   -1,  301,   -1,
  277,  278,   -1,  280,  307,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
   -1,  379,   -1,   -1,  301,   -1,  258,   -1,   -1,   -1,
  307,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,  401,   -1,  379,  278,   -1,  280,   -1,
  408,   -1,   -1,  285,  412,   -1,  288,   -1,   -1,   -1,
   -1,  419,   -1,  267,   -1,   -1,   -1,  401,   -1,  301,
   -1,   -1,  276,   -1,  408,  307,  379,   -1,   -1,  437,
   -1,   -1,   -1,   -1,  442,   -1,  290,   -1,   -1,  293,
   -1,   -1,  296,  297,   -1,   -1,    0,   -1,  401,   -1,
   -1,   -1,  379,   -1,   -1,  408,   -1,   -1,  442,  467,
   -1,  315,   -1,  471,  417,    0,  419,   -1,   -1,   -1,
   -1,   -1,   -1,  327,  401,   -1,   -1,   -1,   -1,   -1,
   -1,  408,   -1,   -1,  437,   -1,   -1,   41,   -1,  442,
   44,   -1,  419,   -1,   -1,   -1,   -1,  379,   -1,   -1,
   -1,  355,  356,   -1,   -1,   59,   41,   -1,   -1,   44,
  437,   -1,   -1,  367,   -1,  442,   -1,  371,  471,  401,
   -1,   -1,  267,   -1,   59,  379,  408,   -1,   -1,   -1,
   -1,  276,   -1,   -1,    0,   -1,   -1,  419,   -1,   -1,
   -1,   -1,   -1,   40,  471,  290,   43,   -1,   45,   -1,
   -1,  296,  297,   -1,   -1,  437,   -1,   -1,   -1,   -1,
  442,   58,   -1,   -1,   -1,   -1,   63,   -1,  422,   -1,
  315,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
  434,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,  471,
  444,  267,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
  355,  356,   -1,   -1,  290,   -1,   -1,   -1,  472,   -1,
  296,  297,  367,   -1,   -1,   -1,  371,  481,  482,  483,
  484,  485,  486,  487,  379,   -1,   -1,   -1,   -1,  315,
   40,   -1,   -1,   43,   -1,   45,   -1,    0,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  418,   -1,   -1,   -1,  422,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,  444,
   -1,   -1,   -1,  379,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  472,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,  481,  482,  483,  484,
  485,  486,  487,  278,   -1,  280,  422,  301,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,  444,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
    0,   -1,   -1,  290,   -1,   -1,  472,    0,   -1,  296,
  297,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  278,   -1,  280,   -1,   -1,   -1,   40,   -1,
   -1,   43,  288,   45,   -1,  379,   -1,   -1,   -1,   -1,
  327,   41,   -1,   -1,   44,  301,   58,   -1,   -1,  306,
   -1,   63,   -1,   -1,  379,   -1,  313,  401,   -1,   59,
  317,  318,   -1,   -1,  408,   -1,   59,   -1,  355,  356,
  260,   -1,   -1,  263,   -1,  261,  401,  267,   -1,   -1,
  367,  338,   -1,  408,  371,   -1,  276,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,  283,  442,   -1,
  290,   -1,   -1,   -1,   -1,  291,  296,  297,   58,   -1,
   -1,   -1,  298,   63,  300,  258,  302,  442,   -1,   -1,
   -1,  307,   -1,  379,   -1,   -1,   -1,   -1,  314,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  279,  327,   -1,  426,
   -1,   -1,  328,   -1,   -1,  401,  403,  434,   -1,   -1,
   -1,   -1,  408,  339,   -1,   -1,   -1,  444,  301,   -1,
   -1,   -1,   -1,  420,  307,  355,  356,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,  367,  435,   -1,
   -1,  371,  439,   -1,   -1,  472,  442,  330,   -1,   -1,
   -1,   -1,   -1,  450,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,   -1,   -1,   -1,  349,   -1,   -1,   -1,
   -1,   -1,  469,   -1,  357,  358,   -1,   -1,   -1,   -1,
  406,  364,   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,
  416,   -1,  418,  419,   -1,   -1,  426,   -1,   -1,  382,
   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,  444,  267,   -1,  443,  258,   -1,
   -1,   -1,   -1,   -1,  276,  258,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,  419,   -1,  290,  279,
   -1,   -1,  472,   -1,  296,  297,  279,  430,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
   -1,  301,   -1,   -1,   -1,   -1,   -1,  307,  301,   -1,
  260,   -1,   -1,  263,  307,  327,   -1,  267,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,  276,   -1,   -1,   -1,
  330,  271,   -1,   -1,  273,   -1,   58,  330,  277,   -1,
  290,   63,   -1,  355,  356,   -1,  296,  297,   -1,  349,
   -1,   -1,   -1,  292,   -1,  367,  349,  296,  358,  371,
  299,   -1,  302,   40,  364,  358,   43,   -1,   45,   -1,
   -1,  364,   -1,  313,  314,   -1,  316,  327,   -1,  319,
   -1,   58,  382,   -1,   -1,   -1,   63,   -1,   -1,  382,
   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,   -1,  339,
   -1,  340,   -1,   -1,   -1,  355,  356,  346,  347,  348,
   -1,  350,  351,  352,  426,  354,   -1,  367,   -1,  419,
   -1,  371,  434,   -1,   -1,   -1,  419,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,  374,   -1,  376,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   58,   -1,  399,
  472,   -1,   63,   -1,   -1,   -1,   -1,   -1,  407,  481,
  482,  483,  484,  485,  486,  487,  426,   -1,  418,   -1,
   -1,   -1,   -1,   -1,  434,  424,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  433,  444,   -1,  277,   -1,   -1,   -1,
   -1,   -1,   -1,  443,   -1,   -1,   -1,  446,  458,  459,
  460,  461,  462,  463,  454,  296,   -1,   -1,  299,   -1,
   -1,  461,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  260,   -1,
   -1,  263,  481,  482,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  290,  350,
  351,  352,   -1,  354,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
  267,   40,   -1,  374,   43,  376,   45,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   58,
   -1,   -1,   -1,  290,   63,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,   40,   -1,   42,
   43,   -1,   45,  424,   -1,  367,   -1,   -1,   -1,  371,
  327,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,  260,
   63,   -1,  263,   -1,   -1,  446,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,  355,  356,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
  367,   -1,   -1,   -1,  371,  296,  297,   -1,   -1,   -1,
  481,  482,   -1,   -1,  426,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,
  472,   -1,   -1,   -1,  355,  356,   -1,  434,   -1,  481,
  482,  483,  484,  485,  486,  487,  367,  444,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  260,   -1,   -1,  263,   -1,   -1,   40,  267,   42,
   43,   -1,   45,   -1,   -1,  426,   -1,  276,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   58,   -1,   -1,   -1,   -1,
   63,  290,  273,  444,   -1,   -1,  277,  296,  297,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,  267,  296,   -1,   58,  299,   -1,
   -1,  472,   63,  276,   -1,   -1,   -1,   -1,  327,   -1,
  481,  482,  483,  484,  485,  486,  487,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,  340,
   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  367,  350,
  351,  352,  371,  354,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
 1136, 1137,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
 1146, 1147,   -1, 1149, 1150,   -1,  407,  426,   -1,   -1,
   -1, 1157, 1158, 1159, 1160,  434, 1162, 1163, 1164, 1165,
 1166, 1167,   -1,  424,   -1,  444,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,  446,   58,   -1,   -1,   -1,
   -1,   63,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,  444,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  276,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,  472,
   -1,   -1,   -1,  296,  297,   -1,  267,   -1,  481,  482,
  483,  484,  485,  486,  487,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,   43,  290,
   45,   -1,   -1,   -1,  327,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,  327,   -1,   -1,   -1,
   40,   -1,   -1,   43,  367,   45,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,  267,   -1,  418,   -1,   -1,
   -1,   -1,   -1,   -1,  276,  458,  459,  460,  461,  462,
  463,   -1,   -1,  434,   -1,   -1,   -1,   -1,  290,  472,
   -1,   -1,   -1,  444,  296,  297,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,   -1,   40,   -1,
   -1,   43,  267,   45,   -1,  367,   -1,   -1,   -1,  371,
   -1,  276,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,  267,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   58,  327,   -1,   -1,   -1,   63,   -1,   -1,   -1,
  290,   -1,  434,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,  272,  458,  459,  460,  461,
  462,  463,  367,  280,   -1,   -1,  371,  327,   -1,  286,
  472,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,  367,  325,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  334,   58,   -1,
   -1,   -1,   -1,   63,   -1,  342,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,  434,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,  444,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,  455,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,  290,   -1,
   -1,   -1,  472,  430,  296,  297,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  461,   -1,   -1,  367,   -1,   -1,   -1,  371,
  327,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   42,   43,   -1,   45,   -1,   47,   -1,  267,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  276,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,  434,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  455,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  355,  356,   -1,  277,   -1,
   -1,  458,  459,  460,  461,  462,  463,  367,   -1,   -1,
   -1,  371,   -1,  292,  271,  472,   -1,  296,   -1,   -1,
  299,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,  309,   -1,   -1,   -1,  313,  314,   -1,  316,
   -1,  340,  319,   -1,   -1,   -1,   -1,  346,  347,  348,
   -1,  350,  351,  352,  434,  354,  333,   -1,   -1,   -1,
   -1,   -1,  339,   -1,  444,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  407,   -1,
  272,   -1,   -1,  412,   -1,   -1,   -1,   -1,  280,  273,
   -1,   -1,  399,  277,  286,  424,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,  292,  277,
   -1,  418,  296,   -1,   -1,  299,   -1,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  433,   -1,  296,   -1,
   -1,  299,   -1,  325,   -1,   -1,  443,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,  452,   -1,  454,   -1,   -1,
  342,   -1,  481,  482,  461,   -1,  340,   -1,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,  361,
  354,  363,  340,  271,   -1,   -1,   -1,   -1,  346,  347,
  348,   -1,  350,  351,  352,  377,  354,  379,  380,  381,
  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,   -1,  374,   -1,  376,   -1,
   -1,  309,   -1,   -1,   -1,  313,  314,   -1,  316,   -1,
   -1,  319,   -1,  407,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  430,  407,
  424,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,
   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  446,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,  483,  484,  485,   -1,   -1,  481,  482,   -1,
   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,
  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  443,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  452,  461,  454,   -1,   -1,   -1,
   -1,   -1,   -1,  461,   -1,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
};
#define YYFINAL 17
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 490
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","LIMIT","INT64","SUBSTRING",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : USER",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : var_const_list",
"proc_inputs : '(' var_const_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"var_const_list : variable",
"var_const_list : constant",
"var_const_list : column_name",
"var_const_list : null_value",
"var_const_list : var_const_list ',' variable",
"var_const_list : var_const_list ',' constant",
"var_const_list : var_const_list ',' column_name",
"var_const_list : var_const_list ',' null_value",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : BEFORE INSERT",
"trigger_type : AFTER INSERT",
"trigger_type : BEFORE UPDATE",
"trigger_type : AFTER UPDATE",
"trigger_type : BEFORE DELETE",
"trigger_type : AFTER DELETE",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_string default_opt end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION nonneg_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : SYMBOL",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT distinct_clause select_list from_clause where_clause group_clause having_clause limit_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : column_name",
"column_list : column_list ',' column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : USER",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"parameter : '?'",
"current_user : USER",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyerror (TEXT *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static SSHORT	lines, att_charset;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif
 
typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (file->fil_partitions)
    {
    if (!file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*file->fil_length,file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((file->fil_length) && (file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    if (c == '\n')
	{
	lines++;
	line_start = ptr + 1;
	}

    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr + 1;
		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p,UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	};
    yylval = (NOD) MAKE_string (string, p - string);
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start), 
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 18:
{ DSQL_debug = (int) yyvsp[0];
			  if (DSQL_debug > 10)
			      yydebug = DSQL_debug;
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 19:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 25:
{ yyval = yyvsp[0]; }
break;
case 26:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_list (yyvsp[0]); }
break;
case 30:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 31:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 32:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 33:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 36:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 38:
{ yyval = 0; }
break;
case 39:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 42:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 49:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 51:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = yyvsp[0];}
break;
case 70:
{ yyval = yyvsp[0]; }
break;
case 71:
{ yyval = yyvsp[0]; }
break;
case 72:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 74:
{ field->fld_dtype = dtype_blob; }
break;
case 75:
{ 
			field->fld_dtype = dtype_cstring; 
			field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 76:
{ yyval = (NOD) NULL; }
break;
case 78:
{ yyval = yyvsp[-1]; }
break;
case 80:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 84:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 85:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 86:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 89:
{ yyval = yyvsp[0]; }
break;
case 90:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 91:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 92:
{ yyval = yyvsp[0]; }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = yyvsp[0]; }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 102:
{ yyval = NULL; }
break;
case 103:
{ yyval = make_list (yyvsp[0]); }
break;
case 105:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 106:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 107:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 108:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 109:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 110:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 111:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 112:
{ yyval = (NOD) 0;}
break;
case 113:
{ yyval = yyvsp[-1]; }
break;
case 114:
{ yyval = (NOD) NULL; }
break;
case 117:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 119:
{ yyval = NULL; }
break;
case 120:
{ yyval = NULL; }
break;
case 121:
{ yyval = yyvsp[0]; }
break;
case 122:
{ yyval = (NOD) NULL; }
break;
case 123:
{ yyval = (NOD) NULL; }
break;
case 126:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 127:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 130:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 131:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 132:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 133:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 137:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 138:
{yyval = (NOD) NULL;}
break;
case 141:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 142:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 144:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 145:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 146:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 147:
{yyval = (NOD) NULL;}
break;
case 150:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 159:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 160:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 161:
{ file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 162:
{ file->fil_flags |= LOG_serial;
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 163:
{ file = make_file(); 
			  file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) file);}
break;
case 164:
{ file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) file); }
break;
case 166:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 167:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) file); }
break;
case 168:
{ file = make_file();
			  file->fil_name = (STR) yyvsp[0]; }
break;
case 171:
{ file->fil_length = (SLONG) yyvsp[0]; }
break;
case 172:
{ file  = make_file ();}
break;
case 177:
{ file->fil_start = (SLONG) yyvsp[0];}
break;
case 178:
{ file->fil_length = (SLONG) yyvsp[-1];}
break;
case 185:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 186:
{ yyval = yyvsp[0]; }
break;
case 187:
{ yyval = yyvsp[0]; }
break;
case 188:
{ yyval = (NOD) NULL; }
break;
case 190:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 193:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 194:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 195:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 196:
{ 
			field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 199:
{ yyval = NULL; }
break;
case 200:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 203:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 204:
{ field = make_field (yyvsp[0]);
				  yyval = (NOD) field; }
break;
case 205:
{ yyval = yyvsp[-1]; }
break;
case 206:
{ field = make_field (NULL);
			  yyval = (NOD) field; }
break;
case 207:
{ yyval = yyvsp[0]; }
break;
case 208:
{ yyval = (NOD) NULL; }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = make_node (nod_user_name, (int) 0, NULL); }
break;
case 211:
{ yyval = yyvsp[0]; }
break;
case 212:
{ yyval = yyvsp[0]; }
break;
case 213:
{ yyval = (NOD) NULL; }
break;
case 216:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 217:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 218:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 219:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 221:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 222:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 223:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 224:
{ yyval = yyvsp[0]; }
break;
case 225:
{ yyval = NULL ;}
break;
case 230:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 234:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 235:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 236:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 237:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 238:
{ yyval = NULL;}
break;
case 239:
{ yyval = yyvsp[0];}
break;
case 240:
{ yyval = yyvsp[0];}
break;
case 241:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 242:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 243:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 244:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 245:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 246:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 247:
{ yyval = make_list (yyvsp[-1]); }
break;
case 248:
{ yyval = NULL; }
break;
case 249:
{ yyval = yyvsp[0]; }
break;
case 250:
{ yyval = NULL; }
break;
case 252:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 253:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 254:
{ yyval = make_list (yyvsp[0]); }
break;
case 255:
{ yyval = NULL; }
break;
case 257:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 258:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 261:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 262:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 264:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 267:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 273:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 277:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 278:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 279:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 280:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 281:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0]); }
break;
case 282:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 283:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 284:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 285:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 286:
{ yyval = make_list (yyvsp[0]); }
break;
case 287:
{ yyval = make_list (yyvsp[-1]); }
break;
case 288:
{ yyval = NULL; }
break;
case 289:
{ yyval = make_list (yyvsp[0]); }
break;
case 290:
{ yyval = make_list (yyvsp[-1]); }
break;
case 291:
{ yyval = NULL; }
break;
case 296:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 297:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 298:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 299:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 302:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 303:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 304:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 305:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 306:
{ yyval = NULL; }
break;
case 308:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 311:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 312:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 313:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 315:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 316:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 317:
{ yyval = make_list (yyvsp[0]); }
break;
case 318:
{ yyval = make_list (yyvsp[-1]); }
break;
case 319:
{ yyval = NULL; }
break;
case 323:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 324:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 325:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 326:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 328:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 332:
{ yyval = make_list (yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 337:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 338:
{ yyval = yyvsp[-1]; }
break;
case 339:
{ beginning = lex_position(); }
break;
case 340:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 341:
{ beginning = last_token; }
break;
case 342:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 343:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 344:
{ yyval = 0; }
break;
case 345:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 346:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 347:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 348:
{ yyval = NULL; }
break;
case 349:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 350:
{ yyval = MAKE_constant ((STR) 2, CONSTANT_SLONG); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 3, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 4, CONSTANT_SLONG); }
break;
case 353:
{ yyval = MAKE_constant ((STR) 5, CONSTANT_SLONG); }
break;
case 354:
{ yyval = MAKE_constant ((STR) 6, CONSTANT_SLONG); }
break;
case 355:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 356:
{ yyval = NULL; }
break;
case 357:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 358:
{ yyval = yyvsp[0]; }
break;
case 359:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 360:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 361:
{ yyval = yyvsp[0]; }
break;
case 362:
{ yyval = yyvsp[0]; }
break;
case 363:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 364:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 365:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 367:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 368:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 369:
{ yyval = yyvsp[0]; }
break;
case 370:
{ yyval = yyvsp[0]; }
break;
case 371:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 372:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 373:
{ yyval = yyvsp[0]; }
break;
case 374:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 376:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 377:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 378:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = yyvsp[0]; }
break;
case 381:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 382:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 383:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 384:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 402:
{ yyval = NULL; }
break;
case 403:
{ yyval = NULL; }
break;
case 404:
{ yyval = NULL; }
break;
case 405:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 406:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 407:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 408:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 409:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 410:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 411:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 412:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 414:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 415:
{ yyval = yyvsp[0]; }
break;
case 416:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 417:
{ yyval = yyvsp[0]; }
break;
case 418:
{ yyval = yyvsp[0]; }
break;
case 420:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 421:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 423:
{ yyval = NULL; }
break;
case 425:
{ yyval = NULL; }
break;
case 426:
{ yyval = yyvsp[0]; }
break;
case 427:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 428:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 429:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 430:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 431:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 432:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 433:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 434:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 435:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 436:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 437:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 442:
{ field->fld_ranges = make_list (yyvsp[-1]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 443:
{ field->fld_ranges = make_list (yyvsp[-2]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 445:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 446:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 447:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 453:
{ 
			field->fld_dtype = dtype_long; 
			field->fld_length = sizeof (SLONG); 
			}
break;
case 454:
{ 
			field->fld_dtype = dtype_short; 
			field->fld_length = sizeof (SSHORT); 
			}
break;
case 455:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    field->fld_dtype = dtype_timestamp; 
			    field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    field->fld_dtype = dtype_sql_date; 
			    field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 456:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			field->fld_dtype = dtype_sql_time; 
			field->fld_length = sizeof (SLONG);
			}
break;
case 457:
{ 
			field->fld_dtype = dtype_timestamp; 
			field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 460:
{ 
			field->fld_dtype = dtype_blob; 
			}
break;
case 461:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-1];
			field->fld_sub_type = 0;
			}
break;
case 462:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-3];
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 463:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = 80;
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 464:
{
			field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 465:
{
			field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 466:
{
			field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 467:
{
			field->fld_sub_type_name = yyvsp[0];
			}
break;
case 468:
{
			field->fld_sub_type = (USHORT) 0;
			}
break;
case 469:
{
			field->fld_character_set = yyvsp[0];
			}
break;
case 471:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 472:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			field->fld_flags |= FLD_national;
			}
break;
case 473:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 474:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 475:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			}
break;
case 476:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 485:
{ 
			  field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 486:
{  
			   field->fld_sub_type = dsc_num_type_decimal;
			   if (field->fld_dtype == dtype_short)
				{
				field->fld_dtype = dtype_long;
				field->fld_length = sizeof (SLONG);
				};
			}
break;
case 487:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 488:
{
			field->fld_dtype = dtype_long; 
		    	field->fld_length = sizeof (SLONG); 
			field->fld_precision = 9;
		    	}
break;
case 489:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 490:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			    }
			field->fld_precision = (USHORT) yyvsp[-3];
			field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 493:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    field->fld_dtype = dtype_double;
			    field->fld_length = sizeof (double); 
			    }
			else
			    {
			    field->fld_dtype = dtype_real; 
			    field->fld_length = sizeof (float);
			    }
			}
break;
case 494:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 495:
{ 
			field->fld_dtype = dtype_real; 
			field->fld_length = sizeof (float); 
			}
break;
case 496:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 497:
{ yyval = yyvsp[-1]; }
break;
case 498:
{ yyval = 0; }
break;
case 502:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 503:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 504:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 505:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 506:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 509:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 510:
{ yyval = (NOD) NULL; }
break;
case 512:
{ yyval = (NOD) NULL; }
break;
case 513:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 515:
{ yyval = (NOD) NULL; }
break;
case 517:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 522:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 523:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 524:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 525:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 526:
{ yyval = yyvsp[0];}
break;
case 528:
{ yyval = yyvsp[0];}
break;
case 529:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 530:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 531:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 532:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 533:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 534:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 535:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 536:
{ yyval = 0; }
break;
case 537:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 538:
{ yyval = (NOD) NOD_SHARED; }
break;
case 539:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 540:
{ yyval = (NOD) 0; }
break;
case 541:
{ yyval = (NOD) NOD_READ; }
break;
case 542:
{ yyval = (NOD) NOD_WRITE; }
break;
case 544:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 545:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 546:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 547:
{ yyval = 0; }
break;
case 549:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 550:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 551:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 552:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 553:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 554:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 555:
{ yyval = make_list (yyvsp[0]); }
break;
case 556:
{ yyval = 0; }
break;
case 558:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 559:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 560:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 561:
{ yyval = 0; }
break;
case 562:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 563:
{ yyval = 0; }
break;
case 564:
{ yyval = yyvsp[0]; }
break;
case 565:
{ yyval = 0; }
break;
case 566:
{ yyval = yyvsp[0]; }
break;
case 567:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 568:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 569:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 570:
{ yyval = 0; }
break;
case 571:
{ yyval = make_list (yyvsp[0]); }
break;
case 572:
{ yyval = 0; }
break;
case 574:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 576:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 577:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 578:
{ yyval = make_list (yyvsp[0]); }
break;
case 580:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 583:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 584:
{ yyval = yyvsp[-1]; }
break;
case 585:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 586:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 587:
{ yyval = make_list (yyvsp[-1]); }
break;
case 588:
{ yyval = NULL; }
break;
case 590:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 594:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 595:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 596:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 597:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 598:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 599:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 600:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 601:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 602:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 603:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 604:
{ yyval = make_list (yyvsp[0]); }
break;
case 605:
{ yyval = 0; }
break;
case 607:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 611:
{ yyval = yyvsp[0]; }
break;
case 612:
{ yyval = 0; }
break;
case 613:
{ yyval = yyvsp[0]; }
break;
case 614:
{ yyval = 0; }
break;
case 615:
{ yyval = yyvsp[0]; }
break;
case 616:
{ yyval = 0;}
break;
case 617:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 618:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 619:
{ yyval = 0;}
break;
case 620:
{ yyval = yyvsp[0]; }
break;
case 621:
{ yyval = 0; }
break;
case 622:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 623:
{ yyval = 0; }
break;
case 624:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 625:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 626:
{ yyval = 0; }
break;
case 627:
{ yyval = 0; }
break;
case 629:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 630:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 633:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 634:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 635:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 636:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 638:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 639:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 640:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 642:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 645:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 646:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 647:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 650:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 651:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 653:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 654:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 657:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 658:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 659:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 660:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 664:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 665:
{ yyval = yyvsp[0]; }
break;
case 667:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 670:
{ yyval = NULL; }
break;
case 671:
{ yyval = make_list (yyvsp[-1]); }
break;
case 673:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 675:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 677:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 679:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 680:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 681:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 692:
{ yyval = yyvsp[-1]; }
break;
case 693:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 695:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 699:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 702:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 703:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 704:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 705:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 706:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 707:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 708:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 709:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 710:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 711:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 712:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 713:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 714:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 715:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 716:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 719:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 720:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 721:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 722:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 723:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 724:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 725:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 726:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 727:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 728:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 729:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 730:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 731:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 732:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 733:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 734:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 735:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 736:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 737:
{ yyval = make_list (yyvsp[-1]); }
break;
case 738:
{ yyval = yyvsp[-1]; }
break;
case 739:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 740:
{ yyval = make_node (nod_select_expr, e_sel_count, 
		 		yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 748:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 749:
{ yyval = yyvsp[0]; }
break;
case 750:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 751:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 752:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 753:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 754:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 755:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 756:
{ yyval = yyvsp[-1]; }
break;
case 757:
{ yyval = yyvsp[-1]; }
break;
case 758:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 759:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 760:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 761:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 762:
{ yyval = yyvsp[0]; }
break;
case 763:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 764:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 765:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 766:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 768:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 771:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 772:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 773:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 774:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 775:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 777:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 778:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 779:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 780:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 784:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 785:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 787:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 788:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 789:
{ yyval = yyvsp[0]; }
break;
case 790:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 792:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 793:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 794:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 795:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 796:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 798:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 799:
{ yyval = yyvsp[0];}
break;
case 800:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 801:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 802:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 803:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 804:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 805:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 806:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 807:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 808:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 809:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 810:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 811:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 812:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 813:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 814:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 815:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 816:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 817:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 818:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 819:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 820:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 821:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 822:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 823:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 824:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 827:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
