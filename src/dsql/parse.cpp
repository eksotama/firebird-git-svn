#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   76,   13,
   80,   80,   80,   63,   63,   66,   66,   66,   74,   90,
   90,   90,   91,   91,   92,   92,   93,   93,   97,   97,
   73,  100,  100,  102,  102,  103,  103,  106,  106,  107,
  108,  108,  109,  110,   71,   75,   72,   94,   94,  113,
  114,  114,  116,  116,  117,  117,  117,  117,  117,  115,
  115,  118,  118,  119,  119,  119,  119,  121,  121,  121,
  121,  120,  120,  125,  125,  124,   98,  126,  126,  127,
  130,  131,  131,  132,  128,  129,  129,  133,  133,  134,
  134,  135,  135,  135,   96,   96,   96,   68,   78,  136,
  136,  136,  137,  137,  138,  138,  139,  139,  139,  145,
   86,   86,  141,  141,  104,  104,   99,  149,  150,   57,
  142,  142,  105,  105,  105,  105,  105,  105,  143,  143,
  157,  157,  158,  160,  160,  160,  160,  160,  140,  159,
  159,  164,  164,  164,  164,  166,  167,  168,  162,  162,
  163,  161,  161,  161,  161,  161,  169,  170,  171,  171,
  171,  171,   67,   77,   81,  176,  172,  172,  173,  173,
  177,  177,  178,  174,  174,  179,  179,  180,  181,  181,
  182,  182,  183,  183,  175,  175,  175,  185,  185,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  188,  189,  190,  191,  191,  192,
  198,  194,  194,  194,  195,  195,  195,  196,  196,  196,
  196,  193,  197,  197,  186,  186,  203,  204,  204,  205,
  205,  205,  205,   11,  207,  207,  207,  208,  208,  208,
  208,  208,  208,   70,   79,   83,  213,  210,  214,  214,
  214,  215,  219,  224,  224,  225,  225,  226,  226,  147,
  212,   87,   89,  211,  211,   69,   82,  229,  229,  229,
  230,  233,  233,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  231,  231,
  232,    2,  236,  236,  236,  236,  236,  236,  236,  236,
  244,  245,  242,  242,  246,  246,  246,  246,  246,  246,
  246,  237,  237,  247,  247,  247,  247,  247,  247,  247,
  241,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  249,  249,  251,  251,  250,
  248,  248,  248,  243,  243,  239,  240,  240,  253,  253,
  253,  253,  254,  254,  238,  255,  255,  256,  256,    8,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  101,  101,  144,  144,  260,  260,  263,  263,
  265,  265,   52,   52,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  270,  270,  261,  261,  261,  261,  271,
  271,   60,   60,   60,   54,   54,  267,  267,  267,  264,
  264,  264,  275,  275,  275,  274,  274,  273,  273,  273,
  268,  268,  278,  276,  276,  276,  277,  277,  269,  269,
  269,  269,  279,  279,   17,   17,   17,  281,  281,  281,
    4,   15,  283,  283,  284,  284,  285,  285,  280,  286,
  286,  287,  287,  288,  288,  288,  288,  289,  289,  290,
  290,  291,  291,  293,  293,  293,  294,  294,  294,  295,
  295,  295,  292,  297,  297,  297,  298,  298,  296,  296,
  299,  301,  301,  300,  300,  282,   16,  302,  302,  302,
  303,  303,  306,  306,  307,  307,   64,   64,   64,  304,
  304,  308,  308,  305,  217,  217,  218,  218,  311,  311,
  312,  312,  312,  309,  315,  315,  316,  316,  317,  317,
  318,  318,  319,  319,  200,  200,  321,  321,  227,  227,
   30,  228,  228,  228,  228,  228,  228,  228,  228,  322,
  322,  322,  323,  323,  323,  216,  216,  216,  216,  221,
  221,  324,  324,  325,  325,  325,  325,  325,  327,  327,
  327,  222,  222,  220,  220,  331,  331,  331,  223,  223,
  332,  333,  333,  333,  333,  333,  334,  334,  335,  335,
  336,  336,  337,  337,  337,  338,  338,   10,   10,  340,
  340,    7,    7,  341,  342,  343,   18,   18,  344,  345,
  346,  346,  187,  313,  313,    3,    3,  348,  348,  348,
  350,  350,   60,  349,  349,  351,  351,   33,   33,   85,
   84,   84,  339,  339,  352,  353,  353,  201,  201,  201,
  146,  347,  347,  111,  111,  111,  111,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
  356,  356,  356,  356,  356,  356,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  367,  367,  357,  357,  358,  358,  358,  358,
  359,  359,  363,  363,  364,  364,  364,  364,  362,  365,
  360,  360,  368,  368,  369,  366,  371,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,  156,  156,  156,  372,  370,  370,  151,
  151,  376,  376,  376,  376,  376,  374,  374,  374,  374,
  374,  377,  377,  377,  377,  377,  377,  377,  377,  377,
  377,  209,  152,  152,  153,  154,  154,   50,   50,   19,
   19,  235,  378,   53,  123,  266,  266,   95,  373,  373,
  373,  373,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,  380,  328,  329,  329,  329,  326,  326,
  375,  330,  330,  382,  382,  383,  383,  384,  384,  387,
  387,  385,  385,  390,  390,  389,  386,  388,  381,  381,
  381,  381,  381,  381,  381,  381,  310,  310,  155,   47,
  272,  122,  148,  354,  165,  202,  259,   62,   59,  206,
  112,   65,  314,   34,   40,  320,  258,   38,   41,  199,
   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    2,    2,    2,    1,    0,    1,    1,    6,    6,    1,
    1,    0,    0,    1,    0,    4,    0,    1,    1,    2,
    8,    1,    0,    3,    0,    0,    1,    1,    2,    1,
    1,    1,    2,    6,    1,    1,    3,    0,    1,    1,
    0,    1,    1,    2,    3,    4,    2,    2,    3,    0,
    1,    1,    2,    1,    1,    1,    4,    3,    3,    3,
    3,    1,    1,    6,    3,    1,    3,    1,    3,    2,
    1,    0,    2,    3,    1,    0,    1,    1,    2,    3,
    4,    0,    1,    2,    0,    1,    1,    5,    5,    3,
    2,    0,    1,    3,    1,    1,    6,    3,    2,    6,
    2,    1,    2,    2,    2,    0,    1,    1,    2,    0,
    2,    0,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    2,    2,    5,    1,    2,    3,    2,    2,
    0,    1,    1,    1,    1,    3,    4,    8,    4,    0,
    6,    1,    1,    2,    2,    0,    3,    3,    1,    2,
    2,    2,    8,    8,    8,    8,    3,    0,    2,    0,
    1,    3,    2,    1,    0,    1,    2,    6,    1,    0,
    2,    1,    1,    1,    2,    3,    4,    1,    2,    2,
    2,    3,    1,    1,    1,    1,    2,    3,    1,    2,
    1,    2,    2,    2,    6,    4,    7,    8,    6,    4,
    2,    1,    3,    0,    2,    4,    0,    1,    1,    3,
    3,    6,    3,    0,    1,    2,    4,    1,    3,    2,
    2,    2,    1,    4,    1,    3,    0,    1,    1,    1,
    3,    3,    3,    7,    7,    7,    7,    1,    1,    3,
    4,    9,    2,    1,    3,    1,    1,    6,    3,    0,
    0,    0,    0,    3,    0,    9,    9,    1,    1,    0,
    2,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    5,    5,    5,    5,    5,    5,    2,    0,
    4,    2,    3,    3,    2,    2,    2,    3,    3,    2,
    3,    6,    1,    2,    4,    3,    2,    2,    2,    2,
    3,    1,    3,    3,    3,    2,    2,    4,    4,    5,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    1,    0,    2,    2,    0,    1,    2,    2,    2,
    2,    2,    1,    3,    7,    1,    0,    1,    0,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
    2,    2,    1,    1,    1,    1,    4,    5,    1,    3,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    4,    4,    6,    5,    3,
    0,    2,    2,    0,    3,    0,    4,    1,    5,    4,
    1,    4,    1,    2,    2,    1,    1,    1,    2,    2,
    2,    2,    1,    0,    3,    5,    1,    1,    2,    3,
    1,    2,    3,    0,    1,    1,    1,    5,    5,    6,
    3,    2,    1,    0,    2,    0,    1,    0,    3,    1,
    0,    1,    2,    1,    1,    1,    1,    2,    2,    1,
    2,    3,    1,    1,    3,    3,    1,    2,    3,    1,
    2,    0,    2,    1,    1,    0,    1,    1,    1,    3,
    2,    3,    0,    1,    3,    4,    3,    1,    3,    4,
    3,    0,    1,    3,    3,    3,    1,    1,    0,    3,
    0,    2,    0,    9,    1,    1,    1,    1,    1,    3,
    1,    2,    3,    2,    1,    3,    1,    1,    6,    3,
    3,    2,    3,    0,    1,    3,    1,    1,    1,    2,
    1,    1,    1,    2,    1,    2,    1,    2,    0,    2,
    4,    2,    2,    4,    2,    2,    1,    1,    0,    3,
    0,    1,    3,    1,    1,    1,    1,    3,    1,    1,
    1,    2,    0,    2,    0,    3,    5,    0,    2,    0,
    4,    1,    2,    1,    1,    0,    1,    3,    2,    1,
    1,    2,    1,    4,    2,    1,    3,    8,    5,    1,
    3,    1,    1,    4,    4,    4,    1,    1,    5,    5,
    1,    3,    3,    1,    1,    7,    7,    5,    3,    0,
    1,    1,    1,    2,    0,    1,    1,    1,    0,    3,
    1,    3,    1,    0,    3,    1,    3,    1,    3,    3,
    1,    1,    3,    1,    3,    3,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    1,    1,    5,    6,    3,    4,    5,    6,
    3,    4,    3,    4,    3,    4,    4,    5,    4,    4,
    3,    4,    1,    3,    3,    9,    9,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
    3,    1,    1,    1,    1,    1,    4,    1,    3,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    4,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    6,    6,    6,    8,    4,    4,    3,
    6,    1,    1,    6,    6,    1,    1,    4,    6,    4,
    5,    3,    5,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  545,  546,  547,    0,
  598,  702,  703,  707,  708,  456,    0,    0,    0,    0,
    0,    0,    0,  392,  553,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,    0,   94,    0,
  872,    0,   20,  870,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  470,    0,    0,   36,   33,   35,    0,   34,    0,  945,
    0,    0,    0,    0,   31,   67,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,
  658,    0,    0,    0,  947,  639,    0,    0,    0,    0,
    0,  106,    2,    0,    0,    0,    0,  440,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  441,  442,  443,  444,
  445,    0,  421,  938,    0,  942,    0,  400,  944,    0,
  397,    0,  641,  948,    0,  396,  951,    0,  395,    0,
  551,  868,    0,  150,  102,    0,  934,  103,    0,  217,
  741,    0,  941,  101,  145,    0,    0,   97,    0,  104,
  874,    0,   98,    0,   99,    0,  100,  146,  105,  607,
  608,    0,  873,  871,    0,  939,   73,    0,    0,  937,
  478,  471,    0,  477,  482,  472,  473,  480,  474,  475,
  476,  481,    0,   29,    0,   38,  728,   37,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  878,    0,  862,  650,  652,    0,  653,  655,
  927,  615,    0,  616,  656,    0,    0,    0,    0,    0,
    0,    0,  570,  559,    0,  562,  564,  565,  566,  567,
  573,  574,    0,  946,  640,    0,  107,    0,  108,    0,
  109,    0,    0,  599,    0,  597,    0,    0,    0,    0,
  457,    0,    0,  362,    0,  220,    0,  403,  393,  454,
  455,    0,    0,    0,    0,    0,    0,  412,    0,  368,
  369,    0,    0,  557,  555,  869,    0,    0,    0,    0,
    0,    0,    0,  153,  132,    0,   95,    0,    0,    0,
  110,    0,  121,  120,    0,    0,    0,    0,    0,    0,
  930,   74,    0,    0,    0,  704,  705,  479,    0,  929,
  844,  843,  842,    0,    0,  845,  846,    0,    0,  848,
  339,  340,  334,    0,  338,  840,  847,    0,  731,    0,
    0,   26,    0,    0,  949,    0,   70,   68,   66,   32,
    0,    0,    0,  733,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,  830,    0,    0,  832,    0,    0,
    0,  863,    0,    0,  834,  835,  836,  864,  865,    0,
  866,  867,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  738,  827,  828,  829,  833,  813,    0,  812,    0,
  816,  881,  882,  815,  809,  810,  811,  814,  879,  880,
  902,  903,  906,  907,    0,  618,    0,  715,    0,    0,
  619,    0,    0,  596,    0,  571,    0,  568,    0,  569,
  594,    0,  589,    0,    0,  563,    0,  742,  711,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,  603,
    0,  600,    0,  185,    0,    0,  129,  462,  172,  173,
    0,  460,    0,    0,    0,    0,  463,    0,  458,    0,
    0,  407,  409,  408,    0,  410,    0,  404,  218,    0,
    0,  271,    0,    0,    0,    0,  416,  417,    0,  447,
    0,    0,    0,    0,    0,    0,    0,  373,  372,  466,
    0,    0,  360,  149,    0,    0,  158,    0,  157,    0,
  164,  147,    0,  162,  165,  166,  154,    0,    0,  501,
  537,  504,    0,  538,    0,    0,  505,    0,    0,    0,
  528,  541,  500,  523,  502,  503,  498,  485,  362,  483,
  484,  486,    0,    0,  495,  496,  497,  499,    0,    0,
    0,    0,    0,  111,    0,  112,    0,  113,    0,  124,
    0,    0,  201,    0,    0,  360,    0,  220,    0,    0,
   82,    0,    0,  723,    0,    0,    0,    0,    0,    0,
    0,    0,  744,  748,  749,  750,  751,  752,  753,  754,
  755,  756,  757,  849,  850,  851,  841,    0,    0,    0,
  730,   27,    0,    0,   43,   71,    0,    0,   25,    0,
  736,    0,    0,  699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  950,  311,    0,    0,    0,    0,    0,    0,    0,  651,
    0,    0,  654,    0,    0,    0,    0,  943,  622,  549,
    0,  876,  548,    0,  572,    0,  580,  576,  575,    0,
    0,    0,  591,  579,    0,    0,  709,  710,    0,    0,
    0,  360,    0,    0,    0,    0,    0,    0,  610,    0,
    0,  130,    0,    0,    0,    0,    0,    0,  362,  406,
    0,  362,  363,  411,  493,    0,  273,    0,  267,  269,
  360,  935,  240,    0,    0,  362,    0,    0,  209,  360,
    0,    0,    0,    0,  245,  239,  242,  243,  244,  415,
  452,  451,  414,  413,    0,    0,    0,    0,    0,    0,
  371,    0,  362,    0,    0,  155,  159,    0,  163,    0,
    0,  524,  525,  542,    0,  539,    0,    0,  531,  529,
  530,    0,    0,    0,    0,  494,    0,    0,    0,    0,
  532,    0,    0,    0,  360,    0,  200,    0,  203,  205,
  206,    0,    0,    0,    0,    0,  220,   77,    0,    0,
   76,  931,  512,  513,    0,    0,    0,  747,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  336,  342,
  343,  341,  732,    0,    0,    0,    0,    0,    0,    0,
    0,   52,   60,   62,    0,    0,   69,    0,    0,    0,
  735,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  919,  920,  921,  922,  923,  924,  925,  926,
    0,    0,    0,    0,    0,    0,  912,    0,    0,    0,
  637,    0,    0,  825,  826,  900,    0,    0,  933,  821,
    0,    0,    0,    0,    0,    0,  831,  740,  739,    0,
    0,    0,    0,  627,  628,    0,    0,  620,  623,  550,
  877,  581,  590,  585,  584,    0,  595,  743,  712,  713,
  360,    0,    0,  215,  605,  606,  604,    0,  181,  175,
  182,    0,  178,    0,    0,  177,    0,  188,  169,  168,
  875,  171,  170,  464,    0,    0,    0,  405,  272,    0,
  211,  362,  213,    0,  363,  208,  214,    0,    0,    0,
    0,  418,  419,  362,  360,  363,    0,    0,    0,  389,
    0,    0,    0,    0,  349,  196,  197,  156,    0,    0,
    0,    0,    0,    0,  540,    0,    0,  362,  363,    0,
  489,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,    0,    0,    0,  198,    0,    0,    0,   81,
    0,    0,    0,    0,   86,   83,    0,    0,    0,  936,
  706,    0,    0,  758,    0,    0,    0,  784,  783,    0,
    0,    0,  791,  803,  801,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  746,    0,   64,   56,   57,
   63,   58,   59,    0,    0,   21,    0,    0,    0,   41,
    0,    0,    0,  717,  737,  700,    0,  716,    0,    0,
    0,    0,    0,    0,  220,    0,  883,    0,    0,  898,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  908,    0,  918,    0,    0,    0,    0,    0,
    0,  899,  837,    0,    0,    0,    0,    0,    0,  642,
    0,    0,    0,    0,    0,  587,  588,  592,    0,  199,
    0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
  401,  223,  224,  225,  226,  227,  228,    0,    0,    0,
  276,    0,  221,    0,    0,    0,    0,  246,    0,  448,
  449,  420,    0,    0,    0,    0,    0,    0,  362,  468,
  363,    0,    0,  361,    0,  932,  167,    0,    0,  507,
    0,  506,  543,    0,  535,    0,    0,    0,  487,    0,
  515,    0,    0,  517,  520,  522,  360,    0,    0,    0,
    0,  119,    0,  204,  362,  361,   96,    0,  117,    0,
   92,    0,    0,    0,    0,   85,    0,  799,  800,    0,
    0,    0,    0,    0,    0,  802,    0,    0,    0,    0,
    0,    0,    0,  792,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
   61,   53,   54,   22,  721,  722,    0,  719,  726,  727,
  724,    0,  698,    0,    0,  889,  888,    0,    0,  885,
  884,    0,  893,  892,  891,  890,  887,  886,    0,    0,
  914,    0,    0,    0,  913,    0,    0,    0,  635,    0,
    0,  630,    0,  631,    0,  648,  644,  646,    0,    0,
    0,    0,    0,  361,    0,  183,  179,    0,    0,  194,
  190,    0,  363,  279,    0,    0,  363,  277,    0,    0,
    0,  231,    0,    0,  247,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  465,    0,    0,  347,    0,  350,
  509,    0,  510,    0,  134,    0,    0,    0,  138,  140,
  141,  142,  490,  492,  488,  519,    0,    0,    0,  363,
    0,    0,  344,  362,   87,    0,    0,   89,    0,    0,
    0,    0,    0,    0,  805,  804,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   39,    0,  701,  219,  901,  894,
  895,    0,  896,  910,  909,    0,  915,  904,    0,  905,
    0,  633,    0,    0,  665,    0,  662,  666,  667,  669,
  670,  671,    0,    0,  614,  363,  345,    0,  174,  191,
  363,  144,    0,  285,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  284,  288,
  283,    0,    0,  293,  294,  295,  296,  299,  301,  266,
    0,  207,  232,    0,    0,    0,    0,  233,  236,    0,
    0,  363,  387,  388,  384,  383,  386,  385,    0,    0,
  364,  351,  508,  536,  143,  131,  139,    0,  362,  361,
  263,  126,  363,    0,    0,   90,   91,   78,    0,  770,
  778,    0,  771,  779,  774,  782,    0,    0,  772,  780,
  773,  781,  767,  775,  768,  776,  769,  777,  718,    0,
  911,  636,    0,    0,    0,    0,  682,  684,    0,  679,
    0,  264,  184,  402,    0,    0,    0,    0,  303,    0,
    0,    0,  302,    0,  304,  291,  297,    0,  300,  286,
    0,  289,    0,  325,  290,  210,  234,    0,    0,  237,
    0,  249,  251,  391,    0,    0,  363,    0,  346,  366,
    0,   75,   93,    0,  897,    0,    0,  668,  663,  683,
    0,    0,  282,    0,  292,    0,    0,    0,    0,  298,
    0,    0,  318,  319,  333,    0,    0,    0,    0,  328,
  287,  326,  238,    0,    0,    0,    0,    0,    0,    0,
    0,  356,  357,    0,  265,  363,    0,    0,    0,    0,
  690,    0,    0,    0,  281,  278,    0,    0,    0,  306,
    0,    0,    0,  310,    0,  332,  940,  331,  330,    0,
    0,    0,    0,    0,  248,    0,  255,    0,  254,    0,
    0,    0,    0,    0,  367,  118,    0,  807,  692,  681,
    0,    0,  693,    0,  689,    0,    0,    0,    0,    0,
    0,    0,    0,  321,  320,  327,  329,  235,    0,    0,
  259,  258,  257,  359,    0,    0,    0,    0,  688,    0,
  695,  313,    0,    0,  305,    0,    0,    0,  322,  262,
  260,  261,    0,  352,    0,    0,    0,    0,  323,  307,
    0,    0,  806,    0,  694,  316,  308,    0,  697,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1495,   26,   27, 1496,
   29,   30,   31,   32,   33, 1497,   35, 1498,  614,  101,
  381,  870, 1116,  102,  644,  871,  103,  386,  649,  126,
  104,  105,  236,  941,  115,  872,  873,  175,  178,  106,
  874,  107,  388,   77,  217,  352,  430,  609, 1053,  370,
  830,  578,  486,  806,  610,  611,  612, 1055,  218, 1305,
   69,  165,   70,  212, 1756, 1257,  198,  203,  205,  207,
  194,  185,  188,  200,  209,  132,  287,  289,  291,  341,
  594,  596,  598,  378,  237,  755,  511,  621,  988,  345,
  601, 1044, 1252,  545,  702, 1018,  496,  497,  526,  336,
  579, 1029, 1397,  724, 1191, 1398, 1399, 1400, 1401, 1402,
  622,  195,  186,  332,  552,  333,  334,  553,  554,  555,
  556, 1227,  982,  499,  500,  972,  970,  501,  976,  971,
 1182, 1356,  977,  978, 1187,  347,  818,  819,  820,  821,
  757,  995, 1370,  580,  759,  432,  784,  930,  520, 1319,
 1192,  433,  434,  435,  921,  436, 1371, 1372,  529, 1518,
 1656, 1208,  765,  766,  753,  767,  768,  769, 1657, 1658,
 1732,  313,  524, 1199, 1499,  171,  521,  522, 1200, 1201,
 1365, 1634, 1500, 1501, 1502, 1603, 1503, 1504, 1505, 1506,
 1507, 1508, 1509, 1678, 1719, 1642, 1721,  437,  682, 1338,
  438, 1061, 1604, 1649, 1650, 1688,  373,  374,  439, 1013,
 1224, 1388,  179, 1014, 1015,  119,  263,  459, 1616,  356,
 1175, 1352, 1475, 1660, 1661, 1662, 1663, 1173,  322,  540,
  783, 1220,  541,  781,  201,   54,  317,  176,  137,  300,
  162,  307,  168,  743,  740,  308,  318,  773,  319,  537,
 1006,  163,  301,  508,  542, 1221,   91,  173,  221,  581,
  582,  745, 1030,  746, 1031, 1032,  585,  586,  587,  588,
 1023,  834,  589,  590,  591,  799,  592,  488,  796,   37,
   38,   39,   56,  181,  325,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  708,  472,  956, 1178,  473,  474,
  713,   40,  136,  296,   41,  489,  490,  729,  695,  264,
  460,  461,  462,  699,  942,  943,  944,  945, 1167,  440,
 1155,  120,  121, 1466, 1467,  441, 1469,  442,  443,  444,
    0, 1671, 1581, 1672, 1673, 1674, 1715, 1757,  393, 1127,
   42,   43,  357,   44,   45,  481,  482,  879, 1124, 1307,
 1311,  394,  652,  191,  623,  624,  625,  626,  627,  628,
  629,  630,  631,  632,  633, 1274, 1071, 1073, 1074,  928,
  680,  445,  446,  447,  448,  377,    0,  214,  449,  450,
  911,  451,  452,  453,  454,  672,  915, 1156, 1151,  673,
};
static short yysindex[] = {                                   3780,
 1768, -210, 3109,  102, 1104,  -14, 3690, -137, 2679,  -20,
   73, 2643, -210, 1156,  516,   23, 1339,    0,  611,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  589,
    0,    0,    0,    0,    0,    0, 8028,  242,  263,  302,
   23,  346,  479,    0,    0,  238, 1259,  573,  242,  629,
  418,  302,  638,   23,  346,    0,  479,  699,    0,  784,
    0,  735,    0,    0,  848,  742,    0,   23,  773,  242,
  957,  742,  629,  263,  302,  638,   23,  346,  479,  699,
    0,  302,  886,    0,    0,    0, 1274,    0, 1274,    0,
  962, 1042,  193, 1413,    0,    0,    0,  573,   23,  573,
 1086, 1092, 1121,  133, 1926,    0,   58,  117,  601, 1038,
    0,  629, 1204, 1443,    0,    0, 1168, 1220,  302,   23,
  479,    0,    0, 1307,   20, 1309,  -15,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  965,    0,    0, 1259,    0,  530,    0,    0, 1651,
    0, 1012,    0,    0,  560,    0,    0, 1274,    0, 1278,
    0,    0, 1237,    0,    0, 1643,    0,    0, 1452,    0,
    0, 1259,    0,    0,    0, 1099, 1651,    0,   -5,    0,
    0, 1391,    0, 1407,    0, 1274,    0,    0,    0,    0,
    0, 1401,    0,    0, 1268,    0,    0, 1420, 1322,    0,
    0,    0, 1268,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  803,    0,  573,    0,    0,    0,  508, 1359,
  597,  699,  995, 1442, 1752, 1488, 1514,  508, 1436,  597,
 1489, 1507,    0, 6847,    0,    0,    0, 6847,    0,    0,
    0,    0, 5168,    0,    0, 1459,  263, 1543, 1462,  -89,
   23, 1468,    0,    0, 1443,    0,    0,    0,    0,    0,
    0,    0, 1453,    0,    0, 1651,    0, 1391,    0, 1274,
    0, 1200, 1497,    0, 1473,    0,  -58, 1562,  918,  -15,
    0, 1633, 1368,    0,  573,    0,  965,    0,    0,    0,
    0,  573, 1522,  -65, 1461,  -60, 1891,    0, 8059,    0,
    0,  706, 1672,    0,    0,    0, 1877, 1877, 1259, 1579,
 1259, 2668, 1643,    0,    0, 6126,    0,  302,  346,  479,
    0, 1522,    0,    0, 1662,  498, 1899,   23, 1686,  263,
    0,    0, 1918,  185, 3325,    0,    0,    0, 1500,    0,
    0,    0,    0, 1501, 1502,    0,    0, 1345, 1026,    0,
    0,    0,    0, 1922,    0,    0,    0,  839,    0,   23,
 1530,    0,  302, 1509,    0,   50,    0,    0,    0,    0,
   23, 1453,  504,    0,   23,    0, 1661,  302, 1929,  508,
 1580, 1946, 1950, 1951,    0, 1952, 1959,    0, 1971, 1972,
 1975,    0,    0, 1977,    0,    0,    0,    0,    0, 1984,
    0,    0, 5759, 1985, 1986, 6847, 6847, 5805, 1555, 1987,
 1882,    0,    0,    0,    0,    0,    0, 1937,    0, 1983,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1901,    0, 2445,    0, 1714, 1996,
    0,  -24,  118,    0,  756,    0,  -90,    0,  -90,    0,
    0, 1998,    0,  110, 1614,    0,    0,    0,    0, 1999,
   48, 1988, 1522, 2006, 1786,    0, 1771, 1771, 2020,    0,
 2021,    0, 1687,    0,  130, 1724,    0,    0,    0,    0,
 1259,    0, 1877, 1877, 1877, 1877,    0, 2031,    0, 1800,
 1804,    0,    0,    0, 1783,    0, 6126,    0,    0, 6126,
 1350,    0, 1651, 1821, 1625, 5160,    0,    0,  704,    0,
 1625, 1414, 1012,    0, 1692, 1655, 1622,    0,    0,    0,
  553, 1703,    0,    0, 1638,  638,    0, 1259,    0, 1826,
    0,    0, 2668,    0,    0,    0,    0,  147, 1657,    0,
    0,    0, 1660,    0, 1709, 2075,    0, 1761, 2079,  -17,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2030,  105,    0,    0,    0,    0,  136, 2082,
 2089, 2079, 1651,    0, 1806,    0, 1274,    0, 1872,    0,
 1259, 1259,    0,  -65,  560,    0, 1754,    0, 1735, 2093,
    0, 4790,  149,    0, 1758, 1766, 2112, 3870, 2113, 3401,
 4172,  412,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1545, 1026,  573,
    0,    0,  928, 1718,    0,    0, 1691,  597,    0, 1845,
    0, 1568, 2124,    0, 1845,  928, 1846, 1849,  302, 1060,
 6031,  612,  629, 6847, 1127, 1167, 1244, 2334, 6847, 3870,
 2445, 1720,  493, 6847, 6031,  155,  155, 1156, 1991, 2125,
    0,    0, 6077, 1717, 6847, 6847, 6847, 6847, 6847,    0,
 6847,  119,    0,   65, 1722, 6031, 1721,    0,    0,    0,
  702,    0,    0,  -49,    0, 1727,    0,    0,    0,   23,
 1090,   23,    0,    0,  573, 1453,    0,    0, 6031, 1915,
  -65,    0, 1717,  784,  784, 1200,   69,  573,    0, 1259,
 1259,    0,  -93, 1638, 1638, 1731,  638,  918,    0,    0,
 2144,    0,    0,    0,    0, 1916,    0,  573,    0,    0,
    0,    0,    0, 1920, 2152,    0, 1894, 1911,    0,    0,
 1852, 1854, 1274, 1923,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  638,  573, 5420, 1817, 1818, 1819,
    0,  638,    0, 1790, 1406,    0,    0, 1792,    0,   99,
 1796,    0,    0,    0,  638,    0, 2075,  108,    0,    0,
    0, 1908,  108, 1795,  108,    0, 2180,  638,  638,  638,
    0, 1522,   23, 1960,    0, 1870,    0, 1674,    0,    0,
    0,  706, 1790,   23, 1699,   82,    0,    0, 2190, 1957,
    0,    0,    0,    0,  185, 1773, 1497,    0, 1497, 4948,
  364, 6847, 6847, 3946, 2192,  687, 4205, 6847, 4281,  778,
 4357, 4615, 6303, 4687, 4922, 4990, 3870, 3870,    0,    0,
    0,    0,    0, 1509,  302,  346, 1509,  479,  699,  142,
 2193,    0,    0,    0,  928, 1850,    0,  -67, 1871, 1453,
    0, 6031, 1871, 2194, 2193,  928, -108, 1921, 6847, 6847,
 1979, 6847, 2204, 6847, 2202, 2071, 6847, 6847, 6847, 6847,
 6847, 6847,    0,    0,    0,    0,    0,    0,    0,    0,
 1927, 1193,  492, 6847,  526, 6031,    0, 3870, 1708, 2445,
    0, 2205,  601,    0,    0,    0, 2445, 1715,    0,    0,
 1981,  155,  155, 1162, 1162,  623,    0,    0,    0,   65,
 2217, 2207, 1005,    0,    0, 3870, 1930,    0,    0,    0,
    0,    0,    0,    0,    0, -127,    0,    0,    0,    0,
    0, 1725, 1790,    0,    0,    0,    0, 2218,    0,    0,
    0, 1741,    0, 1877, 2001,    0,  -93,    0,    0,    0,
    0,    0,    0,    0, 2224, 3870, 2392,    0,    0, 1974,
    0,    0,    0, 2392,    0,    0,    0, 1274, 1274, 1770,
 2235,    0,    0,    0,    0,    0,  -71,  409,  947,    0,
 2015, 1156, 1823, 1843,    0,    0,    0,    0, 1824,  102,
 1753, 1864, 1916, 2247,    0, 1638, 1769,    0,    0,  697,
    0, 2231, 1824, 1132,  638, 2250, 2251, 2257, 2040,  560,
    0, 1974, 1877, 1724,  -65,    0, 1703, 1823,   38,    0,
  638, 1912, 2007, 4790,    0,    0,  638, 1813, 2008,    0,
    0, 2267, 2279,    0, 2014, 2445, 2283,    0,    0, 2445,
 2285, 6349,    0,    0,    0, 1973, 2291, 2445, 2292, 1599,
 2293, 2445, 2295, 6847, 6847, 2192, 6847, 6575, 2296, 2445,
 2299, 2306, 2445, 2307, 6847, 2445, 2310, 2445, 2312, 2313,
 2445, 2314, 2315, 2445, 2316,    0, 2097,    0,    0,    0,
    0,    0,    0, 2035,  928,    0,  928,  142, 2193,    0,
  187,  187,  162,    0,    0,    0, 1776,    0, 2194, 2193,
 2320, -108, 2085, 2174,    0, 2211,    0, 2501, 6847,    0,
 2520, 2642, 2654, 2779, 2961, 3092, 6847,  638, 6031, 2445,
 1931, 6031,    0, 6847,    0, 2059,  503, 6847, 6031, 6847,
 6847,    0,    0, 1005, 2325, 6031, 1220,   65, 1990,    0,
 1992, 1993, 2029, 2100, 2044,    0,    0,    0, 1974,    0,
 1823, 1954, 1259, 1989, 1638, 1994, 1638,    0, 3870,  371,
    0,    0,    0,    0,    0,    0,    0, 1936, 2114, 1974,
    0, 6847,    0, 2101, 1995, 1770,  784,    0, 3870,    0,
    0,    0, 2005, 2009, 2012, 2013, 2017, 2022,    0,    0,
    0,  601, 2115,    0,   46,    0,    0, 2353,  102,    0,
 1731,    0,    0,  108,    0, 2392, 2033,  108,    0,  108,
    0, 1916, 2360,    0,    0,    0,    0,  706, 1790, 2114,
 1638,    0, 1724,    0,    0,    0,    0, 2218,    0, 2368,
    0, 2374, 1259,  -92, 2377,    0, 1259,    0,    0, 6847,
 2003, 2003, 1156, 2383, 1784,    0, 2003, 2003, 6847, 2003,
 2003, 2057, 2445,    0, 1685, 6847, 2445, 2003, 2003, 2003,
 2003, 2445, 2003, 2003, 2003, 2003, 2003, 2003, 2039,    0,
    0,    0,    0,    0,    0,    0, 2004,    0,    0,    0,
    0, 6031,    0, -108, 2320,    0,    0, 6126, 2385,    0,
    0, 3115,    0,    0,    0,    0,    0,    0, 3133,   95,
    0, 6031, 2126, 2000,    0, 6031, 3256, 1799,    0, 1308,
 2445,    0, 1803,    0, 1005,    0,    0,    0,   65, 1272,
 3870, 2041, 2114,    0, 1877,    0,    0, 1259, 1406,    0,
    0,  691,    0,    0,  573, 7981,    0,    0, 2445, 1771,
 2101,    0, 1027,   23,    0, 2105,  701, 2010, 2116, 2019,
 2142, 2117, 2149, 1974,    0, 5168, 2077,    0, 1790,    0,
    0, 2416,    0, 2427,    0, 2118, 1771, 2033,    0,    0,
    0,    0,    0,    0,    0,    0, 1974, 1703, 1823,    0,
 1406, 2015,    0,    0,    0, 2102, -141,    0, 1916, 2104,
 2445, 2428, 2429,  601,    0,    0, 2431, 2432, 2445, 2439,
 2440, 6847, 6847, 2445, 2442, 2443, 2452, 2453, 2455, 2458,
 2460, 2462, 2464, 2465,    0,  187,    0,    0,    0,    0,
    0,  638,    0,    0,    0, 6031,    0,    0, 6031,    0,
 1722,    0, 1248, 2228,    0, 2469,    0,    0,    0,    0,
    0,    0,  412,  750,    0,    0,    0, 1638,    0,    0,
    0,    0, 6126,    0,  242,  500, 2456, 1497, 2476, 2181,
 6847, 2466, 2484, 2468, 2472, 2474, 2195, 2478,    0,    0,
    0, 4618, 2479,    0,    0,    0,    0,    0,    0,    0,
 2500,    0,    0, 2196, 2210,   23, 1770,    0,    0, 1274,
  263,    0,    0,    0,    0,    0,    0,    0, 2114, 2226,
    0,    0,    0,    0,    0,    0,    0, 2114,    0,    0,
    0,    0,    0, 6847, 1259,    0,    0,    0, 1259,    0,
    0, 6847,    0,    0,    0,    0, 2445, 2445,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2515,
    0,    0, 1930, 3870, 1717, 1272,    0,    0, 2197,    0,
 2524,    0,    0,    0,   80, 2509,  302, 6847,    0, 2229,
 3870, 2386,    0, 3870,    0,    0,    0,  140,    0,    0,
  755,    0,  -39,    0,    0,    0,    0, 1770, 1274,    0,
 2187,    0,    0,    0,   88, 1722,    0, 2015,    0,    0,
 2445,    0,    0, 1308,    0, 2044,  412,    0,    0,    0,
  794, 2392,    0, 2519,    0, 6621, 2615,  140,  752,    0,
  764,  257,    0,    0,    0,  242, 2120,  102,  145,    0,
    0,    0,    0, 2187,  421, 1770, 2199, 2200,   88, 2535,
 1005,    0,    0, 1930,    0,    0, 2544, 1722, 2041,   23,
    0, 2545, 2547, 1337,    0,    0, 5252, 2177, 2548,    0,
  159, 2158, 2290,    0,  140,    0,    0,    0,    0, 4925,
  755, 1770, -134, -134,    0, 2301,    0, 2155,    0, 1005,
 2564,   88, 2262, 2044,    0,    0, 1930,    0,    0,    0,
  794, 2567,    0,  263,    0, 1991, 1856,   66, 2549, 2317,
 2308, 4925, 4925,    0,    0,    0,    0,    0, 2150,  743,
    0,    0,    0,    0, 1005,   88, 2041, 2044,    0,  263,
    0,    0,  140, 2571,    0, 1773, 4925, 2319,    0,    0,
    0,    0, 1573,    0, 2041, 2580, 2584, 1860,    0,    0,
 4925, 3870,    0,  263,    0,    0,    0,  412,    0,
};
static short yyrindex[] = {                                      0,
    0,  218, 1022,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  907, 3477,    0,    0,    0,    0, 2632,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  854,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  973,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2303,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2249,    0,    0,    0,  258,    0,  258,    0,
    0,    0,    0, 2258,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5487, 3794,
    0,    0,    0, 1055,    0,    0,    0,  771,    0,    0,
    0,    0,    0,    0,    0,  314,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -25,
    0,    0,    0,    0,  772,    0,    0, 2375,    0, 1120,
    0,    0,    0,    0,    0, 1466,    0,    0, 6398,    0,
    0,    0,    0,    0,    0,    0,  -25,    0,  -86,    0,
    0, 2603,    0,    0,    0, 2375,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1271,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  926,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  256,    0,    0, 1277,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -25,    0, 2603,    0, 2375,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1281,
    0, 2366,    0,    0,    0,    0, 1315,    0,    0,    0,
    0,    0, 2382,  -59, 8090,    0, 1321,    0,    0,    0,
    0,  358,    0,    0,    0,    0, 2191, 2191,    0,    0,
    0, 1348, 1544,    0,    0,    0,    0,    0,    0,    0,
    0, 2382,    0,    0, 1444,    0,    0,    0,    0,    0,
    0,    0, 4216, 2261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1361,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1392,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1408,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1961,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2098,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  125,    0,    0, 2332,
    0,  135,    0,    0,    0,    0,  388,    0,  388,    0,
    0,  344,    0,  566,  898,    0, 2255,    0,    0,    0,
 1267,    0, 2382,    0,    0,    0, 1519, 1519,  997,    0,
    0,    0,  327,    0, 3009,  333,    0,    0,    0,    0,
    0,    0, 2191, 2191, 2191, 2191,    0,  362,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2390,    0,    0,    0,    0,    0, 2366,    0,
    0, 1210,    0,  738, 2188,    0,    0,    0,    0,    0,
    0,  168,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1416,    0,    0,    0,    0,  785, 1252,    0,
    0,    0, 1399,    0,    0, 1400,    0,    0, 1480,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2110, 2951,    0,    0,    0,    0, 1577, 1108,
    0, 1480,  -25,    0,    0,    0, 2375,    0,    0,    0,
    0,    0,    0,  -59,  805,    0,    0,    0,    0, 2259,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  570,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  289,
    0,    0,    0,    0,  289,    0,    0,    0,    0, 6893,
    0, 6893,    0,    0, 6893, 6893, 6893,    0,    0,    0,
 2209,    0,    0,    0,    0, 2712, 2882, 5533,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  792,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  513,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -59,    0,    0,  825,  825,    0,    0,    0,    0,    0,
    0,    0, 3198,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  827,    0,    0,    0,    0,
    0,    0,    0, 2623,    0,    0, 2719, 2222,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  402,  420,  653,
    0,    0,    0,    0, 1816,    0,    0,    0,    0,    0,
 1576,    0,    0,    0,    0,    0, 1400,    0,    0,    0,
    0,  980,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2382,    0,    0,    0,  146,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5854,    0,    0,    0,  297,
    0,    0,    0,    0, 2363,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1424,
 1433,    0,    0,    0,    0,    0,    0,    0, 1456,    0,
    0,    0, 1456, 1463, 1493,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1054,
    0,    0, 6893,    0,    0,    0,  765,    0,    0,    0,
 2268, 3019, 3189, 2405, 2575,    0,    0,    0,    0,    0,
  541, 1557, 1373,    0,    0,    0, 1531,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,    0,    0,
    0,    0,    0, 2191, 2216,    0, 3274,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2399,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1495, 3477, 1496,   81,    0,    0,    0,    0,    0,    0,
    0,    0, 1652,    0,    0,    0,    0,    0,    0,    0,
    0, 1332,    0,    0,    0,    0,    0,    0,    0,  805,
    0, 2399, 2191, 1499,  -59,    0, 2412, 1496,    0,    0,
    0, 5854,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1747,    0,    0,    0, 3661,
    0,    0,    0,    0,    0,    0,    0, 7087,    0, 7098,
    0, 7175,    0,    0,    0,    0,    0,    0,    0, 7181,
    0,    0, 7258,    0,    0, 7342,    0, 7405,    0,    0,
 7455,    0,    0, 7488,    0,    0, 2185,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1424, 1534,    0,
 2241,  290,    0,    0,    0,    0,    0,    0, 1536, 1546,
 1560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2244,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2337,  716,    0, 1736,    0, 2342,    0,
 2346, 2347,    0,    0, 1159,    0,    0,    0, 2399,    0,
 1496, 3305,    0,    0,    0, 2233,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2232,    0, 2434,
    0,    0,    0,  927,    0, 1566, 2303,    0,    0,    0,
    0,    0,  816,  819,  845,  876,  893,  920,    0,    0,
    0, 5487,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  849,    0,    0,    0,
    0, 2905,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1565,    0,    0,    0,    0, 1596,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,    0,
    0,    0, 5533,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7582,    0, 7603,    0, 7632,    0,    0,    0,
    0, 7666,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1613,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1541,    0,    0,    0, 1405,    0,    0,    0,    0,    0,
    0,  114,    0,    0, 2191,    0,    0,    0, 1611,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2659, 1604,
 1172,    0, 2366,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2399,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1623,  867,    0,    0,
    0,    0,    0,    0,    0,    0, 2399, 2412, 1496,    0,
  369,    0,    0,    0,    0,    0,    0,    0,  386,    0,
 7762,    0,    0, 6893,    0,    0,    0,    0, 7812,    0,
    0,    0,    0, 7889,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  290,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0, 2337, 1013,    0, 1242,    0,    0,    0,    0,
    0,    0,  367, 2662,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2735,    0,    0,   79,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8031, 8042,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,    0,    0,    0,    0,    0, 2663,    0,
    0,    0,    0,    0, 2647,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2735,   86,    0,
   91,    0,    0,    0,    0,  320,    0,    0,    0,    0,
 2659,    0,    0,    0,    0,  210, 3695,    0,    0,    0,
 2662,    0,    0,    0,    0,   67,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  208,    0, 1566,  284,  449,    0,  509,
  459,    0,    0,  116,    0,    0,    0,   61, 2666, 1360,
    0,    0, 2667,    0,    0,    0,    0, 2651,   70,    0,
 2406,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2735,    0,    0,    0,    0,    0,    0,    0, 2337,
  782,    0,    0,  172,    0,    0,   92,    0,    0,    0,
 2662,    0,    0,    0,    0, 2671,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  592,    0,   97,  210,    0,    0,
    0,    0,    0, 2657,    0,    0,    0, 5473,    0,    0,
    0,    0, 2337,    0, 2666, 2677,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  915,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2722,    0,    0, 2728,
    0,    0,    0,    0,    0,   10,    0, 2732,   -1,  319,
   74, -576, 1615,  875, -207, -491, 2724, 2488,    0,  -35,
    0, 2497,  -91,  -44,    0,  712, -957,  -34,  -28,  -32,
 -191, 2502, 2094,    0,    0,    0,  424,    0,    0,  -48,
 1689, -530,    2, -817, 2140, 1924, -276, 1698, 2670, -261,
    0,  -55,    0, -661,  -47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -577, -589, 1705, -271, -154, -887,    0,
    0,    0,    0, -294, -103, -161, 1723, -311,  -41,    0,
 -494,    0,    0, -460, -954,    0, 1363,    0,    0, 2457,
 -571,  -26,    0,    0,    0,    0, 2425,    0, 2227, 2467,
 -198, 1729, -680,    0,    0,    0, -686,    0,    0,    0,
    0,    0,    0, 1793,    0, 2481, 2054, 1732, 2477, 2482,
    0, 1198,    0, -482, 2032,  -57, -522, -701,    0,    0,
  -43, -927, -919, -918, -221, -917,    0, 1417,-1021,    0,
 1141,-1117, 1425,    0, 2266,    0,    0,    0, 1143, 1142,
 1109,  -79, -269, -397, -318,    0,    0, 2056,    0, 1617,
    0,    0, -155,    0,    0,    0, -200,    0,    0,    0,
    0,    0,    0,    0,    0, -385,    0, -215,    0,-1114,
 -281, 1069, 1215,    0, 1138,    0,    0, 2471,  -94, -659,
 -936,-1089,    0,    0, -978, -632, -851, 1447,    0, -462,
 -590, -842, -563,    0, -549, 1175,  262, -358, -515, -688,
 -916,-1224,    0,    0,    1,    0,    0,    0,    0,    0,
 2523,    0,    0,    0,    0, 2531, 2311,    0,    0,    0,
    0,    0, 2543,    0,    0,    0,    0,  -16,    0,    0,
    0, -310, 2043, -309, 1607, -420,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2264,    0,-1191, 2052,    0,
    0,    0, 2840,    0,    0,    0,    0, 2586,    0,    0,
    0,    0, 2394,    0, 2393,    0,    0,    0, 2153,    0,
    0,    0,    0,    0,  -69,    0, 2139,    0,-1188, 1314,
    0, 2171, -606, 2172,    0, -706, 1928,    0,    0, -121,
 -655,    0, 2750,    0, 1295,-1169,    0,-1109, -953, -952,
    0, 1398,    0, 1174,    0, 1216,    0, 1126,    0,    0,
    0,    0, 2410,    0,    0,    0, -336, 2237, 2016,-1015,
    0,    0,    0, 1049,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3316, 1976, 1807,    0, -469,
    0,    0,    0, -220,    0, 2530,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -255, 1748,    0,
};
#define YYTABLESIZE 8587
static short yytable[] = {                                     128,
  190,  167,   73,  192,   74,  170,  285,  238,  184,   34,
  487,  372,  376,  256,  259,  172,  189,  197,  717,  922,
  551,  964,  257,  260,  222,  583,  584,  725,  202,  517,
  204,  756,  515,  546,  744,  208,  226,  747,  206, 1203,
  227,  458,  703,  758,  973,  923,  838,  233,  841,  387,
  244, 1343,  246,  230,  891,  651,  225,  232,  387, 1193,
  231,  128,  965,  966,  199,  294, 1193, 1194, 1195, 1197,
  229, 1160,  599,  245, 1194, 1195, 1197,  235,  729,  884,
  348,  831,  479,  823,  286,  729,  323,  228, 1375,  822,
  256,  716,  615,  648,  288,  266,  680,  254,  913,  431,
  507,  675,  290,  455,  940, 1743, 1308, 1204,  457, 1021,
  938, 1256,  960,  680,  349,  661,  309,  342, 1212,  729,
  255, 1052,  729,  429,  714,  314,  729, 1659,  312,  729,
 1255,  256,  661, 1047,  256, 1453,   88,  729,  375,  348,
 1632, 1237, 1020,  337,  729,  125,   72,  372,  376,  256,
  968, 1461, 1026,  712,  680,  680,  258, 1301, 1465, 1303,
  938,  480,  701, 1048,  885,  714, 1413,  390,  714,  731,
  491,  673,  680, 1000,  661,  808,  242,  379,  621,  255,
 1468, 1417, 1373,  714,  732, 1115,  790, 1543, 1691,  371,
  657,   72,  646,   72,  467,  805,  688,  429,  485,  963,
  122,  689, 1685,  382,  125, 1232,  483,  256,  734,  735,
  736,  737,  382,  720, 1546,  583,  584,  554,  241,  464,
  864,  936,  525,  492,  255,  478,  390,  531,  990,   72,
  673,   72,  947, 1164,  467,  471,  242,  997,  268,  697,
 1470,  551,  297, 1729, 1354,   55, 1390,  516,  256,  255,
  673,  256,  108, 1121,  519,  577,  190,  764,  532,  800,
  241,  535,  343,  974, 1477,   92,  256, 1213,  671, 1651,
  480,  676,  677,  679,  375, 1126,  554,  127, 1176,  293,
  547, 1395,  549,  252, 1730, 1106, 1107,  706,  720,  514,
  494,  298, 1042,  593, 1004,  468,  791,  603, 1118,  495,
 1685,  729,  607, 1181,  595, 1389,   78,  802, 1193, 1129,
 1131,  597,  605,  611,  577, 1684, 1194, 1195, 1197,  675,
  109,  397,  754,  654,  252,  371,  613,  252,  801, 1177,
  112, 1731,  459, 1385,  478,  867,  975,   84,  645,  219,
   84,  241,  252,  583,  642,  110, 1157,  720,  514, 1373,
  469, 1547,  385,  645,   74,  650, 1301,  467,  707,  655,
  344,  461,  612,  729,  382,  729,  672,  470,  195, 1122,
 1386, 1214,  611,  729, 1418,  122,  122, 1027,  675, 1222,
  994,  804,  241, 1119, 1465,  613,  268,  582,  714,  675,
  469,  459,  675, 1666, 1130,  187, 1471, 1472,  730, 1610,
  187,  376,  583,  299, 1064,   88, 1468,  672, 1205, 1206,
 1532, 1363, 1601, 1452, 1190,  937,  467,  861,  376,  374,
  461,  612, 1720,  661, 1405,  672,  516,  195,  711,  516,
 1569,  390,  680,  251,  684, 1668,  698,   14, 1179,  458,
  685,  785, 1309,  750,  487,  714,  582,  661,  253, 1690,
 1619,  888,  733,  250,  680,  621,  387,  675,  354, 1259,
  376, 1345,  729, 1012,  729,  840, 1470,  985,  760,  729,
  987, 1258, 1540,  658,  458, 1482, 1051,  314,  374, 1510,
  312, 1511, 1211,  125,  993,  256,  729,  256,  661,  253,
 1653, 1539,  253,  729,  125,  256, 1357,  458,  187,  787,
  355,  680,  354, 1339,  647,  814,  457,  253,  353,  896,
 1339, 1011,  661,  812,  912,  959,  253,  354, 1249,  919,
  920, 1679, 1541,  831, 1248,  169,  477,  729,  927,  187,
  931,  932,  933,  934,  935,  348,  927,  680, 1695,  984,
  634,  457, 1039, 1125,  862, 1376,  190,  786,  125, 1054,
 1393,  680,  816,  817,  680, 1315,  661,  981,   74, 1408,
   71,  252, 1717,  252,  457,  593,  253,  353,  673,  674,
  661,  252, 1552, 1059, 1728,  253,  253,  714,  613,  187,
  729,  634,  863,  807,  634,  714,  256,  729, 1582, 1409,
  459,  355,  256, 1584,  480,  860, 1114,  951,  577,  634,
  477, 1548, 1275,  700,  491,   71,  673,   71,  256,  832,
  674,  833,  673,   74,  645,  256,  613, 1362,  613,  461,
  981,  467, 1471, 1472,  593,  857,  673,  554,  674,  241,
  979,  980,  857,  577, 1613,  355,  895, 1377,  353,  459,
 1424,  729, 1463,   71, 1250,   71,  358,  180,  675,  256,
  355,  675,  375,  893,  611, 1620,  720,  514,  478,  516,
  458,  577,  252,  190,  577,  376, 1161,  613,  461,  133,
  379, 1479, 1108,  857,  471, 1111,  957, 1675,  196, 1185,
  577,  969,  969,  374,  252,  672,  583, 1065, 1066, 1070,
  519,  252, 1078, 1080, 1082,  516, 1090, 1093, 1096, 1098,
 1101, 1104,  164,  612, 1193, 1447,  577,  672,   84,  256,
 1215,  375, 1194, 1195, 1197, 1163,  675,  195, 1003, 1005,
 1202,  583, 1693,  166, 1407,  252,  253,  457,  253, 1665,
  582, 1481, 1210, 1667, 1133, 1134,  253, 1136,  983, 1138,
 1238, 1522, 1141, 1142, 1143, 1144, 1145, 1146, 1251,  583,
  858,  459,  583,  857,  672,  467, 1236,  858,  480, 1150,
  675,  920,  169,  672,  857, 1196,  376, 1062,  583, 1063,
  641,  370, 1196,  376,  675, 1054, 1002, 1040, 1705, 1473,
  461, 1353, 1010, 1669,  514,  252,  310,  354, 1049, 1239,
  354,  675, 1682,  582,  583, 1024,  582,  516,  858,  376,
  916,  917,  649, 1572, 1683,  838,  174,  672,  838, 1036,
 1037, 1038,  582, 1394,  641,  381,  320,  374,  382, 1404,
 1109,  672,  478, 1448,  609,  514,  516,  253,  514,  641,
  370, 1110,  675, 1152, 1153,   74, 1113,  353,  582, 1112,
  353,  122,  369,  514,  378,  514,  602,  368,  136,  253,
  675, 1216,  516,  602,  778,  354,  253,  838, 1318,  634,
  261, 1737,  634, 1694,  311,  255,  137,  516,  609,  634,
  516,  261,  634, 1628,  381,  377,  634,  382,  858,  641,
 1367,  634,  640,  609,  634,  516,  113,  516,  674,  858,
  253,  779,  380, 1331,  321, 1755, 1333,  578,  674,  354,
  634,  674, 1587,  378,  262,  353,  554,  136,  593, 1512,
  674,  354,  602,  354,  358,  892,  375,  927,  586,  379,
  355,   14,  951,  355,  634,  137,  229, 1149,  634, 1282,
 1283, 1410, 1285, 1287,  377,  649, 1536,  634, 1336,  177,
 1292,  732,  380,  593,  918, 1588,  123, 1384,  653,  353,
  253,  380,  857,  124,  634,  358,  578,  674,  358,  182,
  183,  353,  857,  353,  538,  554,  674,  229,  125,  586,
  229,  593,  556,  358,  593,  539,  134, 1154,  379,  135,
 1339,  634, 1626, 1412, 1322,  229, 1529,  190,  355,  252,
  593,  379, 1329,  634,  920,  780,  601,  920, 1573, 1150,
 1585,  634, 1627, 1337,  920, 1340, 1341,  583,  584, 1538,
  674,  920,  664,  857, 1196,  376,  593, 1645, 1228, 1639,
   74, 1339, 1641,  761,  674,  857, 1306, 1306, 1310,  135,
  370,  556,  355,  187, 1476,  370, 1243,  627,  135, 1075,
  384,  370,  514, 1751,  355, 1344,  355, 1369,  210, 1084,
  375,  627, 1261,  664,  561,  601,  664,  385, 1265,  627,
 1478,  514,  514,  370,  514, 1076, 1085, 1646, 1464,  514,
  368,  664,  514, 1704,  370,  627, 1454,  858, 1647,  381,
 1457, 1359,  382, 1361,  516,  514,  211,  858,  255,  193,
  458,  514,  641, 1577,  638, 1752,   71,  638,  359,  641,
  516,  764,  641,  356,  762, 1708,  641,  521,  378, 1700,
  675, 1086,  638,  561,  641, 1421, 1738,  356, 1578,  558,
  675,   74,   74,  675, 1429,  356,  362,  516,  136,  627,
  641, 1434,  675,  516,  969,  934,  516, 1577,  858,  377,
 1087,  356, 1544,  609,  362,  763,  137, 1411,  521, 1330,
  858,  521, 1735, 1664,  641,  360,  380,  457,  673,  100,
  253,  704, 1578,  514,  458,  609,  521,  641,  521,  370,
  215,  230,  602, 1754,  440, 1238, 1579,  920,  558,  675,
  272,  920, 1648,  379,  641,  514, 1753,  950,  675,  641,
 1768, 1763,  514,  213,  602,  356,  503, 1480,  521,  673,
 1571,  514,  216,  514,  241, 1707,  229, 1088,  934,  453,
 1614,  641,  230,  381, 1416,  230,  382,  673, 1420, 1617,
 1579,  514,  302,  641, 1242,  641,  514, 1392,  491,   74,
  230,  457,  675,  220,  688,  686,  358,  687,  516,  689,
  578,  660,  378,  358,  480,  516,  358,  504, 1217, 1542,
  358,  526, 1681,  453,  125,  514,  864,  135,  358,  135,
  361,  362,  363,  516,  182,  183,  675, 1618,  453,  314,
  337,  303,  315,  377,  358,  578,  560, 1557, 1558,  223,
  398,  505,  660,  364,  365, 1218,  115,  234,  366,  367,
  380,  526,  526,  516, 1464,  526,   94,  516,  358,  506,
  660,  920, 1703,  578,  920,  241,  578,  190,  478,  969,
  526,  358,  526,  235,  399,  601, 1644,  379,  316,  261,
  394,  359,  578, 1483,  115,  675, 1169,  241,  358,  337,
  865,  664, 1744,   96,  241,  560, 1592,  601, 1520,  398,
 1170, 1703,  526,  734,  664,  239, 1602,  160,  578,  688,
  686, 1306,  687,  664,  689,  358, 1644, 1758,  135,  115,
  335,  638,  638,  889, 1171,  521,  866,  358,  241,  358,
  734,  867,  625,  399, 1583,  491, 1703,  868,  360,  394,
  480,  521, 1643,  304,  521,  521,  261,  521,  385, 1621,
  749,   42,  521,  748, 1703,  521,  869, 1624,  527,  544,
  664,  305,   97, 1725,  626, 1514,  160,   50,  521,  664,
 1196,  376,   98,  625,  521,  161,  625,  521, 1172,  335,
   75,   76, 1643,   40,  491,  240,  261, 1515, 1611, 1586,
  897,  625,   23, 1637, 1516,  306, 1644,   99,  527,  527,
  544,  684,  527,  544,  478,  626,   74,  685,  626,  241,
   42,  230, 1570,  664,  491,  725,  243,  527,  544,  527,
  544, 1644,   46,  626,  638,  151,   50,  664, 1517, 1724,
  899,  247,  684, 1612,  161,  248,  491,  673,  685,  534,
 1609,  920,   40,  361,  362,  363,  521,  182,  183,  527,
  544,   23,   48,  954,  469,  365, 1622, 1590,  127,  673,
 1623,  338, 1643,  261,  249,  638,  364,  365,  521,  526,
  955,  366,  367, 1148,  725,  521,  491, 1654,  216,  521,
  534,   46, 1716,  534,  151,  526,  521, 1643,  526,  526,
  661,  526,  118,   24, 1726,   47,  526,  339,  534,  526,
  534,  267, 1636,  152,  521,   49,  673,  901,  340,  521,
  241,   48,  526,  469,  365,  673,  624,  127,  526,   44,
  660,  526,  216,  491,  128,  250, 1748, 1749,  480, 1169,
  534,  661,  241,  660,  521,  511,  518,  216,  521,  241,
  292,  839,  660, 1170,  839,  859,  283,  684,  639,  661,
 1686, 1760,   24,  685,   47,  116,  491,  624,  128,  673,
  480,  480,  152,  216,   49, 1767,  250, 1171,  881,  250,
  195,  880,   45,  241, 1670,  624,  511,  518,   44,  511,
  518,  491,  216,  128,  250,  480,  407,  295,  694,  660,
  526, 1574,  478,  839,  511,  518,  511,  518,  660,  480,
  688,  686,  128,  687,  216,  689, 1689,  216,   74,  117,
  118,  516,  526, 1670,  116,  513,  527,  544,   71,  526,
  477, 1172,  216,  526,  478,  478, 1741,  518,  514,  195,
  526,   45,  527,  544, 1712,  527,  527,  544,  527,  544,
  284,  216,  660,  527,  544,  128,  527,  544,  526,  478,
  312,  625,  516,  526, 1670,  516,  660,  691,  326,  527,
  544,  625,  324,  478,  625,  527,  544,  346,  527,  544,
  516, 1713,  516,  625, 1046,  335,  649, 1045,  526,  128,
  182,  183,  526,  626, 1714,  348,  688,  686,  351,  687,
   71,  689,  413,  626,  691,  632,  626,  534,  350, 1050,
  939,  129,  827,  414,  151,  626,  793,  691,  649,  688,
  686, 1158,  687,  534,  689, 1162,  354,  534, 1161,  534,
  625,  383,  420,  958,  534, 1180,  151,  534, 1045,  625,
  423,  424,  425,  130,  355,  939,  632,  527,  544,  632,
  534, 1184,  391,  216, 1183,  268,  534,  793,  131,  534,
  793,  392,  626, 1230,  632,  151, 1229, 1016, 1017,  527,
  544,  626,  361,  362,  363,  793,  527,  544,  395, 1235,
  527,  544, 1234,  625,  151,  195, 1313,  527,  544, 1312,
  269,  216,  152,  151, 1426,  625, 1300, 1161, 1302,  151,
  366,  367,  396,  511,  518,  527,  544,  216,  398, 1460,
  527,  544, 1459, 1462,  152,  626, 1459,  151,  270,  661,
  518,  271,  511,  511,  518,  511,  518,  626,  534,  216,
  511,  518,  661,  511,  518,  527,  544,  272,  195,  527,
  544,  661,  400,  152,  195,  624,  511,  518,  684,  771,
  534,  772,  511,  518,  685,  624,  518,  534,  624,  195,
  401,  534,  152,  273, 1169,  463, 1742,  624,  534, 1459,
 1766,  152,  475, 1685,  465,  123,  123,  152, 1170,  516,
 1279,  195,  466,  477,   14,  493,  534,  195,  661,  502,
  510,  534,  690,  688,  686,  152,  687,  661,  689,  516,
  530,  516, 1171,  523,  533,  543,  516,  544,  604,  516,
  195,  693,  688,  686,  624,  687,  534,  689,  600,  606,
  534,  548,  516,  624,  511,  518, 1762,  608,  516,  195,
  934,  634,  635,  636,  684,  639,  643,  195,  195,  385,
  685,  661,  648,  890,  195,  894,  511,  518,  898,  900,
  902,  656,  659,  511,  518,  660, 1172,  684,  518,  661,
  662,  663,  195,  685,  511,  518, 1433,  624,  664,  327,
  930,  934,  934,  934,  934,  934,  946,  934,  793,  624,
  665,  666,  511,  518,  667,  681,  668,  511,  518,  934,
  934,  934,  934,  669,  674,  675,  683,  691,  692,  195,
  516,  924,  688,  686,  694,  687,  328,  689,  329,  696,
  195,  710,  714,  518,  715,  721,  511,  518,  719,  722,
  723,  934,  516,  934,  632,  688,  686,  632,  687,  516,
  689,  330,   46,  726,  632,  793,  727,  632,  793,  728,
  516,  632,  494,   47,  738,  793,  632,  739,  793,  632,
   48,  741,  793,  742,  751,  752,  331,  793,  516,  775,
  793,  776,  777,  516,  195,  632,  253,  808,  688,  686,
  782,  687,  788,  689,  792,   49,  793,  793,  794,  493,
  797, 1140,  688,  686,  795,  687,  195,  689,  798,  632,
  803,  809,  516,  632,  813, 1316,  688,  686,  810,  687,
  793,  689,  632,  793,  793,  815,  827,  824,  808,  808,
  808,  808,  808,  793,  808,  195,  826,  835,  836,  632,
  493,  837,  839,  493,  875,  876,  808,  808,  808,  808,
  793,  684,  878,  882,  195,  925,  886,  685,  493,  887,
   50,  914,  195,  195,  946,  952,  632,  929,  961,  195,
  684,  698,  793,  986,  745,   93,  685,  793,  632,  981,
  808,  992,  804,  991,  994,  754,  998,  195,  999,  793,
 1001,  793,   51, 1007, 1008, 1009,   52, 1012, 1028,  195,
 1019,  195, 1022, 1033, 1317,  688,  686,   53,  687, 1035,
  689,  483,  934, 1041,  934,  745, 1043,   94,  745, 1057,
 1058, 1072,  934, 1060,  195, 1120, 1117, 1115, 1123,   95,
  934, 1132, 1135,  745, 1137, 1139,  934, 1147, 1159,  934,
 1168, 1320,  688,  686,  934,  687, 1166,  689, 1174,  195,
  684,  640,  483, 1189,   96,  483, 1186,  820,  934,  934,
  684, 1207,  934, 1198, 1209, 1270,  685, 1223, 1219,  934,
  483,  934,  934, 1225, 1226,  934, 1231, 1233, 1240,  934,
 1244, 1245,  934,  684,  934,  934,  934, 1246,  934,  685,
  946,  934,  934, 1247,  934, 1266, 1051, 1268,  820,  820,
  820,  820,  820,  934,  820,  934, 1263, 1267, 1432, 1269,
  934,  934, 1271,  934, 1272, 1276,  820,  820,  820,  820,
 1277, 1278, 1280,   97, 1281, 1288,  684,  934, 1289,  934,
  934,  934,  685,   98,  934, 1290, 1291,  934,  934, 1293,
  684, 1294, 1295, 1296, 1297, 1298,  685,  934,  857,  808,
  820,  808, 1299, 1314,  684, 1342, 1332, 1335,   99,  808,
  685,  934, 1349, 1350,  934, 1351, 1355,  808, 1346, 1358,
 1347, 1348, 1364,  808, 1366, 1360,  808,  493,  525,  493,
  934, 1378, 1387, 1391,  493, 1379,  934,  493, 1380, 1381,
 1406,  934, 1374, 1382,  823,  808,  808, 1414, 1383,  808,
  493, 1396,  934,  934, 1415,  934,  808, 1419,  808,  808,
 1273,  934,  808, 1425, 1445, 1449,  808,  688,  686,  808,
  687,  808,  689,  808, 1455, 1456,  368, 1474,  808,  808,
 1446,  808, 1521, 1526, 1640,  823,  823,  823,  823,  823,
 1528,  823, 1523,  684, 1524, 1527, 1533,  808,  808,  685,
  808, 1525, 1531,  823,  823,  823,  823, 1534, 1550, 1551,
 1535, 1553, 1554, 1545,  808, 1549,  808,  808,  808, 1555,
 1556,  808, 1559, 1560,  808,  808,  688,  686,  493,  687,
  684,  689, 1561, 1562,  808, 1563,  685,  823, 1564,  483,
 1565,  483, 1566,  745, 1567, 1568,  745, 1575,  808,  483,
  493,  808, 1576,  745, 1589, 1591,  745,  493,  934,  934,
  745,  109,  483, 1594, 1593,  745, 1595,  808,  745,  820,
 1596,  820, 1597,  808,  934, 1598, 1599, 1605,  808,  820,
 1606, 1321,  688,  686,  745,  687, 1615,  689, 1607,  808,
  808,  493,  808,  820, 1608, 1625,  820,  934,  808,  934,
 1323,  688,  686, 1631,  687, 1630,  689, 1635,  745, 1638,
 1655,  745,  745,  934,  824,  820,  820, 1676, 1702,  820,
 1687,  745, 1696, 1698, 1706, 1710,  820, 1718,  820,  820,
 1711, 1459,  820, 1722, 1723,  934,  820, 1694,  745,  820,
  483,  820, 1693,  820, 1734, 1736, 1740, 1745,  820,  820,
 1746,  820, 1747, 1750, 1685,  824,  824,  824,  824,  824,
  745,  824,  483, 1764, 1765,  745, 1761,  820,  820,  483,
  820,    1,   28,  824,  824,  824,  824,  745,  729,  745,
  609,   30,  202,  362,  820,  270,  820,  820,  820,  148,
  514,  820,  617,  268,  820,  820,  688,  686,  450,  687,
  917,  689,  212,  483,  820,  684,  823,  824,  823,  275,
   80,  685,  514, 1680,  192,  390,  823,  514,  820,  916,
  649,  820, 1324,  688,  686,  647,  687,  359,  689,  643,
  645,  193,  280,  823, 1325,  688,  686,  820,  687,  363,
  689,  686,  685,  820,  274,  222,  680,  687,  820,  317,
  324,  818,  823,  823,  638,  315,  823,  696,  222,  820,
  820,   25,  820,  823,  684,  823,  823,   28,  820,  823,
  685,   36, 1304,  823,  250,  114,  823,  399,  823,  390,
  823,  877, 1264,  389,  360,  823,  823,  825,  823, 1262,
 1056,  224,  818, 1260,  818,  818,  818,  557,  512,  222,
 1537, 1241,  222,  498,  823,  823, 1253,  823,  484, 1188,
  818,  818,  818,  818,  962,  250, 1254,  222,  250,  789,
  684,  823, 1633,  823,  823,  823,  685, 1513,  823,  996,
  527,  823,  823,  250, 1692,  528,  770, 1519, 1697,  684,
 1699,  823, 1733,  989,  818,  685,  903,  904,  905,  906,
  907,  908,  909,  910, 1759,  823, 1368, 1652,  823, 1326,
  688,  686, 1079,  687, 1083,  689, 1091, 1094, 1727, 1099,
 1102, 1105, 1530, 1701,  823,  412,  824,  518,  824,  638,
  823,  536,  509,  774, 1403,  823,  824, 1034, 1025,  361,
  362,  363,  116,  182,  183,  811,  823,  823,  705,  823,
  476,  709,  953,  824,  967,  823,  948, 1165,  949,  265,
 1629, 1580,  364,  365,  415,  416,  417,  366,  367,  418,
  419,  817,  824,  824, 1739, 1709,  824,  421,  422, 1769,
  718,  883, 1284,  824,  684,  824,  824,  637, 1128,  824,
  685, 1334,   93,  824,  516,    0,  824,    0,  824,    0,
  824,    0,    0,    0,    0,  824,  824,    0,  824,    0,
    0,  684,  817,    0,  817,  817,  817,  685,    0,    0,
    0,    0,    0,  684,  824,  824,    0,  824,   93,  685,
  817,  817,  817,  817,   94,  516,  503,    0,  516,    0,
  516,  824,    0,  824,  824,  824,   95,    0,  824,    0,
    0,  824,  824,  516,    0,    0,    0,    0,  550,    0,
  111,  824,    0,  818,  817,  818,    0,    0,    0,    0,
   94,   96,    0,  818,    0,  824,    0,    0,  824,    0,
    0,  516,   95,    0,  516,    0,  222,  504,  222,    0,
  818, 1327,  688,  686,  824,  687,  222,  689,  176,  516,
  824,    0,  250,    0,  250,  824,  494,   96,  819,  818,
  818,    0,  250,  818,    0,  495,  824,  824,    0,  824,
  818,  505,  818,  818,    0,  824,  818,    0,    0,    0,
  818,    0,    0,  818,    0,  818,    0,  818,    0,  506,
   97,    0,  818,  818,    0,  818,    0,    0,  684,  819,
   98,  819,  819,  819,  685,    0,    0,  176,    0,    0,
    0,  818,  818,    0,  818,    0,    0,  819,  819,  819,
  819,    0,    0,    0,    0,   99,   97,    0,  818,    0,
  818,  818,  818,    0,    0,  818,   98,  222,  818,  818,
    0,    0,    0,  100,    0,    0,    0,    0,  818,    0,
    0,  819,    0,  250,    0,    0,    0,    0,    0,  222,
    0,   99,  818,    0,    0,  818,  222,    0,    0,    0,
    0,    0, 1328,  688,  686,  250,  687,    0,  689,  100,
    0,  818,  250,  817,    0,  817,    0,  818,    0,    0,
    0,    0,  818,  817,    0, 1450,  688,  686,    0,  687,
  222,  689,    0,  818,  818,    0,  818,    0,    0,    0,
  817,    0,  818, 1451,  688,  686,  250,  687,    0,  689,
    0,    0,  516,    0,  516,    0,    0,    0,  822,  817,
  817,    0,  516,  817,    0,    0,    0,  186,    0,    0,
  817,    0,  817,  817,    0,  516,  817,    0,    0,    0,
  817,    0,    0,  817,    0,  817,    0,  817,    0,    0,
    0,    0,  817,  817,    0,  817,    0,    0,  516,  822,
  516,  822,  822,  822,    0,  516,    0,    0,  516,    0,
  684,  817,  817,    0,  817,    0,  685,  822,  822,  822,
  822,  516,    0,    0,    0,    0,  186,    0,  817,    0,
  817,  817,  817,    0,    0,  817,  176,    0,  817,  817,
    0,    0,    0,  187,    0,    0,    0,    0,  817,    0,
  819,  822,  819,  516,    0,    0,    0,  176,    0,    0,
  819,    0,  817,    0,    0,  817, 1458,  688,  686,    0,
  687,    0,  689,    0,  180,  516,    0,  819,    0,  176,
    0,  817,  516,    0,    0,  176,    0,  817,    0,    0,
    0,    0,  817,    0,    0,    0,  819,  819,    0,  516,
  819,    0,  187,  817,  817,    0,  817,  819,  176,  819,
  819,    0,  817,  819,    0,  180,  516,  819,  180,    0,
  819,  516,  819,    0,  819,    0,    0,  176,  516,  819,
  819,    0,  819,  180,  620,    0,  176,  426,    0,  427,
    0,  684,  176,    0,    0,    0,    0,  685,  819,  819,
    0,  819,  429,    0,    0,    0,    0,  255,    0,    0,
  176,    0,  516,    0,  684,  819,    0,  819,  819,  819,
  685,    0,  819,   57,    0,  819,  819,    0,    0,    0,
    0,    0,  684,    0,   58,  819,    0,    0,  685,    0,
    0,   59,    0,    0,    0,    0,    0,  176,    0,  819,
    0,    0,  819,    0,   60,    0,    0,    0,    0,    0,
  620,    0,    0,  426,    0,  427,    0,    0,  819,    0,
  822,    0,  822,    0,  819,  186,    0,    0,  429,  819,
  822,    0,    0,  255,    0,    0,    0,    0,    0,    0,
  819,  819,    0,  819,    0,    0,  186,  822,    0,  819,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   61,  822,  822,  186,    0,
  822,    0,    0,    0,  186,    0,    0,  822,    0,  822,
  822,   62,    0,  822,    0,    0,  659,  822,  659,  659,
  822,  659,  822,    0,  822,    0,    0,  186,   63,  822,
  822,  187,  822,    0,  659,  684,    0,    0,    0,  659,
    0,  685,    0,   64,    0,    0,  186,   65,  822,  822,
   66,  822,  187,    0,    0,  186,    0,    0,   67,    0,
    0,  186,  180,    0,    0,  822,    0,  822,  822,  822,
    0,    0,  822,    0,  187,  822,  822,   68,    0,  186,
  187,    0,    0,  180,    0,  822,    0,    0,    0,    0,
    0,  402,    0,    0,    0,    0,    0,    0,    0,  822,
  403,    0,  822,  187,    0,  180,    0,    0,    0,    0,
    0,  180,    0,    0,  404,    0,  186,  616,  822,    0,
  359,  405,  187,    0,  822,    0,    0,    0,    0,  822,
    0,  187,    0,    0,  180,    0,    0,  187,    0,  617,
  822,  822,    0,  822,    0,    0,    0,    0,    0,  822,
    0,  406,    0,  180,    0,  187,    0,    0,    0,    0,
  762,    0,  180,    0,    0,    0,    0,  402,  180,    0,
    0,    0,    0,    0,    0,    0,  403,    0,    0,  407,
  408,    0,    0,    0,    0,    0,  180,    0,    0,    0,
  404,  409,  187,    0,  629,  410,  359,  405,    0,    0,
    0,  762,    0,  618,  762,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  617,    0,    0,    0,  762,
    0,    0,    0,  180,    0,    0,    0,  406,    0,    0,
    0,    0,    0,    0,    0,  629,  659,    0,  629,    0,
    0,    0,    0,  659,    0,    0,  619,    0,    0,    0,
    0,    0,  659,  629,    0,  407,  408,    0,  411,    0,
    0,    0,    0,    0,    0,    0,  659,  409,  412,    0,
    0,  410,  659,  659,    0,    0,    0,    0,    0,  618,
  659,    0,  361,  362,  363,  413,  182,  183,    0,    0,
    0,    0,    0,    0,    0,    0,  414,    0,    0,    0,
    0,    0,    0,  659,    0,  364,  365,  415,  416,  417,
  366,  367,  418,  419,    0,  420,    0,    0,  678,    0,
  421,  422,  619,  423,  424,  425,    0,    0,    0,  659,
    0,  659,  659,  657,  411,  657,  657,    0,  657,    0,
    0,    0,    0,  659,  412,    0,    0,  659,    0,    0,
    0,  657,    0,    0,    0,    0,  657,    0,  361,  362,
  363,  413,  182,  183,    0,    0,    0,    0,    0,    0,
    0,    0,  414,    0,    0,    0,    0,    0,    0,    0,
    0,  364,  365,  415,  416,  417,  366,  367,  418,  419,
    0,  420,    0,    0,    0,    0,  421,  422,    0,  423,
  424,  425,    0,    0,    0,    0,    0,    0,    0,  620,
  659,    0,  426,    0,  427,    0,    0,    0,    0,    0,
  659,    0,  762,    0,    0,    0,    0,  429,    0,    0,
    0,    0,  255,    0,  659,  659,  659,  659,  659,  659,
    0,    0,    0,    0,    0,    0,    0,    0,  659,    0,
    0,    0,    0,    0,    0,    0,    0,  659,  659,  659,
  659,  659,  659,  659,  659,  659,    0,  659,    0,    0,
    0,    0,  659,  659,    0,  659,  659,  659,    0,  762,
    0,    0,  762,    0,    0,  428,    0,    0,  426,  762,
  427,    0,  762,    0,    0,   79,  762,    0,    0,    0,
    0,  762,   80,  429,  762,    0,   81,   82,  255,    0,
    0,    0,    0,  629,    0,   83,  629,    0,    0,    0,
  762,    0,    0,  629,    0,    0,  629,   84,    0,    0,
  629,    0,    0,    0,    0,  629,    0,    0,  629,    0,
    1,    0,    0,    0,  762,    0,    0,  762,  762,    0,
    0,    0,    0,  657,  629,    0,    0,  762,    0,    0,
  657,    0,    2,    0,    0,    0,    0,    0,    0,  657,
    3,    0,    0,    0,  762,    0,    0,    4,  629,    5,
    0,    6,  629,  657,    0,    0,    7,    0,    0,  657,
  657,  629,   85,    8,    0,    0,  762,  657,    0,    0,
    0,  762,    0,    0,    0,    0,    0,    9,  629,   86,
    0,    0,    0,  762,    0,  762,    0,    0,   10,    0,
  657,    0,    0,    0,   87,    0,    0,    0,   88,    0,
    0,    0,    0,    0,    0,  629,  402,    0,    0,   89,
    0,    0,    0,    0,    0,  403,  657,  629,  657,  657,
    0,    0,    0,    0,    0,    0,    0,    0,   90,  404,
  657,    0,    0,    0,  657,  359,  405,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  617,   11,    0,    0,    0,    0,
    0,    0,   12,    0,    0,   13,  406,   14,   15,    0,
    0,    0,    0,    0,    0, 1067,    0,    0, 1068,    0,
    0,    0,  402,  688,  686,    0,  687,    0,  689,    0,
    0,  403,   16,    0,  407,  408,    0,  657,    0,    0,
    0,  855,  854,  856,    0,  404,  409,  657,    0,    0,
  410,  359,  405,    0,  428,    0,    0,  426,  618,  427,
    0,  657,  657,  657,  657,  657,  657,    0,    0,    0,
    0,    0,  429,    0,    0,  657,    0,  255,    0,    0,
    0,   17,  406,    0,  657,  657,  657,  657,  657,  657,
  657,  657,  657,    0,  657,    0,    0,    0,    0,  657,
  657,  619,  657,  657,  657,    0,    0,    0,    0,    0,
  407,  408,    0,  411,    0,    0,    0,    0,    0,    0,
    0,    0,  409,  412,    0,    0,  410,    0,    0,    0,
  428,    0,    0,  426,    0,  427,    0,  361,  362,  363,
  413,  182,  183,    0,    0,    0,    0,    0,  429,    0,
    0,  414,    0,  255,    0,    0,    0,    0,    0,    0,
  364,  365,  415,  416,  417,  366,  367,  418,  419,    0,
  420,    0,    0,    0,    0,  421,  422,    0,  423,  424,
  425, 1069,    0,    0,    0,    0,    0,    0,    0,  411,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  412,
    0,    0,    0,    0,    0,    0,  428,    0,    0,  426,
    0,  427,    0,  361,  362,  363,  413,  182,  183,    0,
    0,    0,    0,    0,  429,    0,    0,  414,    0,  255,
    0,    0,    0,    0,    0,    0,  364,  365,  415,  416,
  417,  366,  367,  418,  419,    0,  420,    0,    0,    0,
    0,  421,  422,  842,  423,  424,  425,    0,    0,    0,
    0,  684,    0,    0,    0,    0,    0,  685,    0,    0,
  843,    0,    0,    0, 1077,    0,    0, 1068,    0,    0,
    0,  402,    0,    0,    0,    0,    0,    0,    0,    0,
  403,    0,    0,    0,    0,    0,    0,    0,  220,    0,
    0,    0,  220,    0,  404,    0,  844,    0,    0,    0,
  359,  405,    0,    0,    0,  845,    0,  220,    0,    0,
    0,  220,    0,  846,  220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  406,  847,    0,  848,    0,    0,    0,    0,    0,
 1081,    0,    0, 1068,    0,    0,    0,  402,  849,    0,
  850,  851,  852,    0,    0,  220,  403,    0,    0,  407,
  408,  220,  220,  220,    0,  220,  220,  220,    0,  220,
  404,  409,    0,    0,    0,  410,  359,  405,    0,    0,
    0,    0,    0,    0,    0,    0, 1422, 1423,    0,  220,
    0,  220, 1427, 1428,    0, 1430, 1431,    0,    0,    0,
    0,  853,    0, 1435, 1436, 1437, 1438,  406, 1439, 1440,
 1441, 1442, 1443, 1444,    0,    0, 1089,    0,    0, 1068,
    0,    0,  220,  402,    0,    0,    0,   79,    0,    0,
 1069,    0,  403,    0,    0,  407,  408,    0,  411,  220,
    0,    0,    0,    0,    0,    0,  404,  409,  412,    0,
    0,  410,  359,  405,  428,    0,    0,  426,    0,  427,
    0,  220,  361,  362,  363,  413,  182,  183,    0,    0,
    0,    0,  429,    0,    0,    0,  414,  255,    0,    0,
    0,    0,    0,  406,    0,  364,  365,  415,  416,  417,
  366,  367,  418,  419,    0,  420,  220,  220,    0,    0,
  421,  422,    0,  423,  424,  425, 1069,    0,    0,    0,
    0,  407,  408,  220,  411,    0,    0,    0,    0,    0,
    0,    0,    0,  409,  412,    0,  428,  410,    0,  426,
    0,  427,    0,    0,    0,    0,    0,    0,  361,  362,
  363,  413,  182,  183,  429,    0,    0,    0,    0,  255,
    0,    0,  414,    0,    0,    0,    0,    0,    0,    0,
    0,  364,  365,  415,  416,  417,  366,  367,  418,  419,
    0,  420,    0,    0,    0,    0,  421,  422,    0,  423,
  424,  425, 1069,    0,    0,    0,    0,    0,    0,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  412,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,    0,    0,    0,  414,    0,
    0,    0,    0,    0,    0,    0,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,    0,
    0,    0,  421,  422,    0,  423,  424,  425,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1092,    0,    0, 1068,    0,    0,
    0,  402,    0,    0,    0,    0,    0,    0, 1366,    0,
  403,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  404,    0,    0,    0,    0,    0,
  359,  405,    0,    0,    0,    0,    0,    0,    0,    6,
    0,    0,    0,    0,    0,    0, 1600,    0,    0,    0,
 1485, 1486,    0, 1487,    0,    0, 1488,    0,    0,    0,
    0,  406,    0,    0,    0,    0, 1097,    0,    0, 1068,
 1489,    0,    0,  402,    0,    0, 1490,    0,    0,    0,
    0,  428,  403,    0,  426,    0,  427,    0,    0,  407,
  408,    0,    0,    0,    0,    0,  404,    0,    0,  429,
    0,  409,  359,  405,  255,  410,    0,    0,  924,  688,
  686,    0,  687,    0,  689,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  855,  854,  856,
    0,    0,    0,  406,    0,    0, 1491,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  428,
    0,    0,  426,    0,  427,   14,    0,    0,    0,    0,
 1069,  407,  408,    0,    0,    0,    0,  429,  411,    0,
 1492,    0,  255,  409,    0,    0,    0,  410,  412,    0,
   16,    0,  828,    0,    0,    0,  559,    0,    0, 1601,
    0, 1493,  361,  362,  363,  413,  182,  183,  477,    0,
    0,  829,    0,    0,    0,  560,  414,    0,  561,    0,
    0,    0,    0,    0,    0,  364,  365,  415,  416,  417,
  366,  367,  418,  419,    0,  420,    0, 1494,    0,    0,
  421,  422, 1069,  423,  424,  425,    0,    0,    0,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,  562,
  412,    0,    0,    0,    0,  563,  564,  565,    0,  566,
  567,  568,    0,  569,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,    0,    0,    0,  414,    0,
    0,    0,    0,  570,    0,  571,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,    0,
    0, 1100,  421,  422, 1068,  423,  424,  425,  402,    0,
    0,    0,    0,    0,    0, 1366,  572,  403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  428,    0,  456,
  426,  404,  427,  573,    0,    0,    0,  359,  405,  842,
    0,    0,    0,    0,    0,  429,    6,  684,    0,    0,
  255,    0,    0,  685,    0,  574,  843, 1485, 1486,    0,
 1487,    0,    0, 1488,    0,    0,    0,    0,  406, 1103,
    0,    0, 1068,    0,    0,    0,  402, 1489,    0,    0,
    0,    0,    0, 1490,    0,  403,    0,    0,    0,    0,
  575,  576,  844,    0,    0,    0,  407,  408,    0,  404,
    0,  845,    0,    0,    0,  359,  405,  577,  409,  846,
    0,  428,  410,    0,  426,    0,  427,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  847,  429,
  848,    0,    0,    0,  255,    0,  406,    0,    0,    0,
    0,    0,    0, 1491,  849,    0,  850,  851,  852,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   14,    0,  407,  408,    0, 1069,    0,    0,
    0,    0,    0,    0,    0,  411,  409, 1492,    0,    0,
  410,    0,    0,    0,    0,  412,    0,   16,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  853, 1493,  361,
  362,  363,  413,  182,  183,  477,    0,    0,    0,    0,
    0,    0,    0,  414,    0,    0,    0,    0,    0,    0,
    0,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0, 1494, 1069,    0,  421,  422,    0,
  423,  424,  425,  411,    0,    0,    0,    0,    0,    0,
    0,    0,  558,  412,  402,    0,  559,    0,    0,    0,
    0,    0,    0,  403,  754,    0,    0,  361,  362,  363,
  413,  182,  183,    0,    0,  560,    0,  404,  561,    0,
    0,  414,    0,  359,  405,    0,    0,    0,    0,    0,
  364,  365,  415,  416,  417,  366,  367,  418,  419,    0,
  420,    0,    0,    0,    0,  421,  422,    0,  423,  424,
  425,    0,    0,    0,  406,    0,    0,    0,    0,  562,
    0,    0,    0,    0,    0,  563,  564,  565,    0,  566,
  567,  568,    0,  569,    0,    0,    0,    0,  402,    0,
  360,    0,  407,  408,    0,    0,  928,  403,  928,  928,
    0,  928,    0,  570,  409,  571,    0,    0,  410,    0,
    0,  404,    0,    0,  928,    0,    0,  359,  405,  928,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  572,    0,    0,    0,
    0,    0,  659,    0,    0,  659,    0,  659,  406,    0,
    0,    0,    0,  573,    0,    0,    0,    0,    0,    0,
  659,    0,    0,    0,    0,  659,    0,    0,    0,    0,
    0,  411,    0,    0,  360,  574,  407,  408,    0,    0,
    0,  412,    0,    0,    0,    0,    0,    0,  409,    0,
  187,    0,  410,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,    0,    0,    0,  414,
  575,  576,    0,    0,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,  577,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425,  678,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,  558,    0,    0,  412,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
  362,  363,  413,  182,  183,  560,    0,    0,  561,    0,
    0,    0,    0,  414,    0,    0,    0,    0,    0,    0,
    0,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,  309,    0,    0,    0,  421,  422,    0,
  423,  424,  425,  928,    0,    0,    0,    0,    0,  562,
    0,    0,  928,    0,    0,  563,  564,  565,    0,  566,
  567,  568,    0,  569,  309,    0,  928,    0,    0,    0,
    0,  309,  928,  928,    0,  309,  309,    0,  309,    0,
    0,  309,  659,  570,    0,  571,    0,    0,  428,  659,
    0,  426,    0,  427,    0,  309,    0,    0,  659,    0,
    0,  309,    0,  928,    0,    0,  429,    0,    0,    0,
    0,  255,  659,    0,    0,    0,  572,    0,  659,  659,
    0,    0,    0,    0,    0,    0,  659,    0,    0,  928,
    0,  928,  928,  573,  428,    0,    0,  426,    0,  427,
    0,    0,    0,  928,    0,    0,    0,  928,    0,  659,
    0,    0,  429,    0,    0,  574,    0,  255,    0,    0,
    0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
  187,    0,    0,    0,    0,    0,    0,  659,  659,    0,
  309,    0,    0,    0,    0,    0,    0,    0,    0,  659,
  575,  576,    0,  659,    0,  309,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  309,    0,  577,    0,    0,
  928,    0,    0,    0,  309,    0,  309,    0,    0,    0,
  928,    0,    0,  309,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  928,  928,  928,  928,  928,  928,
    0,    0,    0,    0,    0,    0,    0,    0,  928,    0,
    0,    0,  309,    0,    0,    0,  659,  928,  928,  928,
  928,  928,  928,  928,  928,  928,  659,  928,    0,    0,
    0,    0,  928,  928,    0,  928,  928,  928,    0,    0,
  659,  659,  659,  659,  659,  659,    0,    0,    0,    0,
    0,    0,    0,    0,  659,    0,    0,    0,    0,    0,
    0,    0,    0,  659,  659,  659,  659,  659,  659,  659,
  659,  659,    0,  659,    0,  402,    0,    0,  659,  659,
    0,  659,  659,  659,  403,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  404,    0,
    0,    0,    0,    0,  359,  405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  428,  402,    0,  426,    0,  427,    0,    0,    0,    0,
  403,    0,    0,    0,    0,  406,    0,    0,  429,    0,
    0,    0,    0,  255,  404,    0,    0,    0,    0,    0,
  359,  405,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  407,  408,    0,  428,  926,    0,  426,
    0,  427,    0,    0,    0,  409,  220,    0,    0,  410,
  220,  406,    0,    0,  429,    0,    0,    0,    0,  255,
    0,    0,    0,    0,    0,  220,    0,    0,    0,  220,
    0,    0,  220,    0,    0,    0,    0,    0,    0,  407,
  408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  409,    0,    0,    0,  410,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  411,  220,    0,    0,    0,    0,    0,  220,
  220,  220,  412,  220,  220,  220,    0,  220,    0,    0,
  670,    0,    0,    0,    0,    0,  361,  362,  363,  413,
  182,  183,  678,    0,    0,    0,    0,  220,    0,  220,
  414,    0,    0,    0,    0,    0,    0,    0,  411,  364,
  365,  415,  416,  417,  366,  367,  418,  419,  412,  420,
    0,    0,    0,    0,  421,  422,    0,  423,  424,  425,
  220,    0,  361,  362,  363,  413,  182,  183,    0,    0,
    0,    0,    0,    0,    0,    0,  414,  220,    0,    0,
    0,    0,    0,    0,    0,  364,  365,  415,  416,  417,
  366,  367,  418,  419,    0,  420,    0,  402,    0,  220,
  421,  422,    0,  423,  424,  425,  403,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  404,    0,    0,    0,    0,    0,  359,  405,    0,    0,
    0,    0,    0,    0,  220,  220,    0,    0,    0,    0,
    0,    0,  428,  402,    0,  426,    0,  427,    0,    0,
    0,  220,  403,    0,    0,    0,    0,  406,    0,    0,
  429,    0,    0,    0,    0,  255,  404,    0,    0,    0,
    0,    0,  359,  405,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  360,    0,  407,  408,    0,  428,    0,
    0,  426,    0,  427,    0,    0,    0,  409,  558,    0,
    0,  410,  559,  406,    0,    0,  429,    0,    0,    0,
    0,  255,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  560,    0,    0,  561,    0,    0,    0,    0,    0,
    0,  407,  408,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  409,    0,    0,    0,  410,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  411,  562,    0,    0,    0,    0,
    0,  563,  564,  565,  412,  566,  567,  568,    0,  569,
    0,    0,    0,    0,    0,    0,    0,    0,  361,  362,
  363,  413,  182,  183,    0,    0,    0,    0,    0,  570,
    0,  571,  414,    0,    0,    0,    0,    0,    0,    0,
  411,  364,  365,  415,  416,  417,  366,  367,  418,  419,
  412,  420,    0,    0,    0,    0,  421,  422,    0,  423,
  424,  425,  572,    0,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,    0,    0,    0,  414,  573,
    0,    0,    0,    0,    0,    0,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,  402,
    0,  574,  421,  422,    0,  423,  424,  425,  403,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  404,    0,    0,    0,    0,    0,  359,  405,
    0,    0,    0,    0,    0,    0,  575,  576,    0,    0,
    0,    0,    0,    0,  428,  402,    0,  426,    0,  427,
    0,    0,    0,  577,  403,    0,    0,    0,    0,  406,
    0,    0,  429,    0,    0,    0,    0,  255,  404,    0,
    0,    0,    0,    0,  359,  405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  407,  408,    0,
 1677,    0,    0,  426,    0,  427,    0,    0,    0,  409,
  133,    0,    0,  410,  133,  406,    0,    0,  429,    0,
    0,    0,    0,  255,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  133,    0,    0,  133,    0,    0,    0,
    0,    0,    0,  407,  408,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  409,    0,    0,    0,  410,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  411,  133,    0,    0,
    0,    0,    0,  133,  133,  133,  412,  133,  133,  133,
    0,  133,    0,    0,    0,    0,    0, 1095,    0,    0,
  361,  362,  363,  413,  182,  183, 1273,    0,    0,    0,
    0,  133,    0,  133,  414,    0,    0,    0,    0,    0,
    0,    0,  411,  364,  365,  415,  416,  417,  366,  367,
  418,  419,  412,  420,    0,    0,    0,    0,  421,  422,
    0,  423,  424,  425,  133,    0,  361,  362,  363,  413,
  182,  183,    0,    0,    0,    0,    0,    0,    0,    0,
  414,  133,    0,    0,    0,    0,    0,    0,    0,  364,
  365,  415,  416,  417,  366,  367,  418,  419,    0,  420,
    0,  402,    0,  133,  421,  422,    0,  423,  424,  425,
  403,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  404,    0,    0,    0,    0,    0,
  359,  405,    0,    0,    0,    0,    0,    0,  133,  133,
    0,    0,    0,    0,    0,    0,  428,  402,    0,  426,
    0,  427,    0,    0,    0,  133,  403,    0,    0,    0,
    0,  406,    0,    0,  429,    0,    0,    0,    0,  255,
  404,    0,    0,    0,    0,    0,  359,  405,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  407,
  408,    0,  928,    0,    0,  928,    0,  928,    0,    0,
    0,  409,    0,    0,    0,  410,    0,  406,    0,    0,
  928,    0,    0,    0,    0,  928,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  360,    0,  407,  408,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  409,    0,    0,
    0,  410,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  411,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  412,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1286,
    0,    0,  361,  362,  363,  413,  182,  183,    0,    0,
    0,    0,    0,    0,    0,    0,  414,    0,    0,    0,
    0,    0,    0,    0,  411,  364,  365,  415,  416,  417,
  366,  367,  418,  419,  412,  420,    0,    0,    0,    0,
  421,  422,    0,  423,  424,  425,    0,    0,  361,  362,
  363,  413,  182,  183,    0,    0,  763,    0,    0,    0,
    0,    0,  414,    0,    0,    0,    0,  787,    0,    0,
    0,  364,  365,  415,  416,  417,  366,  367,  418,  419,
    0,  420,    0,  402,    0,    0,  421,  422,    0,  423,
  424,  425,  403,    0,    0,    0,    0,  763,    0,    0,
  763,    0,    0,    0,    0,    0,  404,    0,  787,    0,
    0,  787,  359,  405,    0,  763,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  787,    0,    0,  928,
    0,    0,    0,    0,    0,    0,    0,    0,  928,    0,
    0,    0,    0,  406,  766,    0,    0,    0,    0,    0,
  764,    0,  928,    0,    0,    0,    0,    0,  928,  928,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  407,  408,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  409,    0,  766,    0,  410,  766,  928,
    0,  764,    0,    0,  764,    0,    0,    0,    0,    0,
    0,    0,    0,  766,    0,    0,    0,    0,    0,  764,
    0,    0,    0,    0,    0,    0,    0,  928,  928,    0,
    0,    0,    0,    0,    0,    0,    0,  765,    0,  928,
    0,    0,    0,  928,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  412,    0,    0,    0,    0,    0,    0,    0,  765,    0,
    0,  765,    0,    0,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,    0,  765,    0,  414,    0,
    0,    0,    0,    0,    0,    0,  928,  364,  365,  415,
  416,  417,  366,  367,  418,  419,  928,  420,    0,    0,
    0,  795,  421,  422,    0,  423,  424,  425,  763,    0,
  928,  928,  928,  928,  928,  928,    0,    0,    0,  787,
    0,    0,    0,    0,  928,    0,    0,    0,    0,    0,
    0,    0,    0,  928,  928,  928,  928,  928,  928,  928,
  928,  928,  795,  928,    0,  795,    0,    0,  928,  928,
    0,  928,  928,  928,    0,    0,    0,    0,    0,    0,
  795,    0,    0,    0,  759,  763,    0,    0,  763,    0,
    0,    0,    0,    0,    0,  763,  787,    0,  763,  787,
    0,    0,  763,    0,    0,    0,  787,  763,    0,  787,
  763,    0,    0,  787,    0,    0,  766,    0,  787,    0,
    0,  787,  764,    0,    0,  759,  763,    0,  759,    0,
    0,    0,    0,    0,  760,    0,    0,  787,    0,    0,
    0,    0,    0,  759,    0,    0,    0,    0,    0,    0,
  763,    0,    0,  763,  763,    0,    0,    0,    0,    0,
    0,  787,    0,  763,  787,  787,    0,  761,    0,    0,
    0,    0,    0,  766,  787,  760,  766,    0,  760,  764,
  763,    0,  764,  766,    0,    0,  766,    0,    0,  764,
  766,  787,  764,  760,    0,  766,  764,    0,  766,  765,
    0,  764,  763,    0,  764,    0,    0,  763,  761,    0,
    0,  761,    0,  787,  766,    0,    0,    0,  787,  763,
  764,  763,    0,    0,    0,    0,  761,    0,    0,    0,
  787,    0,  787,    0,    0,    0,    0,    0,  766,    0,
    0,  766,  766,    0,  764,    0,    0,  764,  764,    0,
    0,  766,    0,    0,    0,    0,  765,  764,    0,  765,
    0,  794,    0,    0,    0,    0,  765,    0,  766,  765,
    0,    0,    0,  765,  764,    0,    0,    0,  765,    0,
    0,  765,  788,  795,    0,    0,    0,    0,    0,    0,
  766,    0,    0,    0,    0,  766,  764,  765,    0,    0,
    0,  764,  794,    0,    0,  794,    0,  766,    0,  766,
    0,  796,    0,  764,    0,  764,    0,    0,    0,    0,
  794,  765,    0,  788,  765,  765,  788,    0,    0,    0,
    0,    0,    0,    0,  765,    0,    0,    0,    0,    0,
  795,  788,    0,  795,    0,  797,  759,    0,    0,    0,
  795,  765,  796,  795,    0,  796,    0,  795,    0,    0,
    0,    0,  795,    0,    0,  795,    0,    0,    0,    0,
  796,    0,    0,  765,    0,    0,    0,    0,  765,    0,
    0,  795,    0,    0,    0,    0,  797,    0,    0,  797,
  765,    0,  765,    0,    0,    0,  760,    0,    0,    0,
    0,    0,    0,  759,  797,  795,  759,    0,  795,  795,
    0,    0,    0,  759,    0,    0,  759,    0,  795,    0,
  759,    0,    0,    0,    0,  759,    0,    0,  759,  761,
    0,    0,    0,    0,    0,  795,    0,    0,    0,    0,
    0,  785,    0,    0,  759,    0,    0,    0,    0,    0,
    0,    0,    0,  760,    0,    0,  760,  795,    0,    0,
    0,    0,  795,  760,    0,    0,  760,    0,  759,    0,
  760,  759,  759,    0,  795,  760,  795,    0,  760,    0,
    0,  759,  785,    0,    0,  785,  761,    0,    0,  761,
    0,  789,    0,    0,  760,    0,  761,    0,  759,  761,
  785,    0,    0,  761,    0,    0,    0,    0,  761,    0,
    0,  761,    0,    0,    0,    0,    0,    0,  760,    0,
  759,  760,  760,  794,    0,  759,    0,  761,    0,    0,
    0,  760,  789,    0,    0,  789,    0,  759,    0,  759,
    0,    0,    0,    0,  788,    0,    0,    0,  760,    0,
  789,  761,    0,    0,  761,  761,    0,    0,    0,    0,
    0,    0,    0,    0,  761,    0,    0,    0,  798,    0,
  760,    0,    0,  796,    0,  760,    0,    0,    0,    0,
  794,  761,    0,  794,    0,    0,    0,  760,    0,  760,
  794,    0,    0,  794,    0,    0,    0,  794,    0,    0,
    0,  788,  794,  761,  788,  794,    0,  797,  761,  798,
    0,  788,  798,    0,  788,    0,    0,    0,  788,    0,
  761,  794,  761,  788,    0,    0,  788,  798,    0,    0,
  796,    0,    0,  796,    0,    0,    0,    0,    0,    0,
  796,    0,  788,  796,    0,  794,    0,  796,  794,  794,
    0,    0,  796,    0,    0,  796,    0,    0,  794,    0,
    0,    0,    0,    0,  797,    0,  788,  797,    0,  788,
  788,  796,    0,    0,  797,  794,    0,  797,    0,  788,
    0,  797,    0,    0,    0,    0,  797,    0,    0,  797,
    0,    0,    0,    0,    0,  796,  788,  794,  796,  796,
    0,    0,  794,  785,    0,  797,    0,    0,  796,    0,
  786,    0,    0,    0,  794,    0,  794,    0,  788,    0,
    0,  790,    0,  788,    0,  796,    0,    0,    0,  797,
    0,    0,  797,  797,    0,  788,    0,  788,    0,    0,
    0,    0,  797,    0,    0,    0,    0,  796,    0,    0,
    0,  786,  796,  789,  786,    0,    0,    0,    0,  797,
  785,    0,  790,  785,  796,  790,  796,    0,    0,  786,
  785,    0,    0,  785,    0,    0,    0,  785,    0,    0,
  790,  797,  785,    0,    0,  785,  797,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  797,    0,
  797,  785,    0,    0,    0,    0,    0,    0,    0,    0,
  789,    0,    0,  789,    0,    0,    0,    0,    0,    0,
  789,    0,    0,  789,    0,  785,    0,  789,  785,  785,
  798,    0,  789,    0,    0,  789,    0,    0,  785,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  789,    0,    0,    0,  785,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  789,    0,  785,  789,  789,
    0,    0,  785,    0,    0,    0,    0,  798,  789,    0,
  798,    0,    0,    0,  785,    0,  785,  798,    0,    0,
  798,    0,    0,    0,  798,  789,    0,    0,    0,  798,
    0,    0,  798,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  789,  798,    0,
    0, 1366,  789,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  789,    0,  789,    0,    0,    0,
    0,    0,  798,    0,    0,  798,  798,    0,    0,    0,
    0,    0,    6,    0,    0,  798,    0,    0,    0, 1484,
    0,    0,  786, 1485, 1486,    0, 1487,    0,    0, 1488,
    0,    0,  798,  790,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1489,    0,    0,    0,    0,    0, 1490,
    0,    0,    0,    0,  798,    0,    0,    0,    0,  798,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  798,    0,  798,    0,    0,    0,    0,    0,  786,
    0,    0,  786,    0,    0,    0,    0,    0,    0,  786,
  790,    0,  786,  790,    0,    0,  786,    0,    0,    0,
  790,  786,    0,  790,  786,    0,    0,  790,    0, 1491,
    0,    0,  790,    0,    0,  790,    0,    0,    0,    0,
  786,    0,    0,    0,    0,    0,    0,    0,   14,    0,
    0,  790,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1492,  786,    0,    0,  786,  786,    0,
    0,    0,    0,   16,    0,  790,    0,  786,  790,  790,
    0,    0,    0,    0, 1493,    0,    0,    0,  790,    0,
    0,  477,    0,    0,  786,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  790,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  786,    0,    0,    0,
 1494,  786,    0,    0,    0,    0,    0,  790,    0,    0,
    0,    0,  790,  786,    0,  786,    0,    0,  138,    0,
    0,    0,    0,    0,  790,    0,  790,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,    0,    0,  155,  156,  157,  158,  534,
  159,    0,    0,  160,  161,    0,    0,    0,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,    0,    0,  155,  156,  157,  158,
  446,  159,    0,    0,  160,  161,    0,    0,    0,    0,
  446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
  446,  446,  446,  446,  446,    0,    0,  446,  446,  446,
  446,    0,  446,    0,    0,  446,  446,
};
static short yycheck[] = {                                      16,
   58,   49,    4,   59,    4,   50,  128,   99,   57,    0,
  292,  233,  233,  117,  118,   51,   58,   62,  481,  675,
  332,  723,  117,  118,   80,  336,  336,  488,   64,  306,
   65,  526,  304,  328,  517,   68,   84,  520,   67,  994,
   85,  263,  463,  526,  731,  678,  618,   92,  620,  241,
  108, 1166,  110,   88,  661,  392,   83,   90,  250,  987,
   89,   78,  724,  725,   63,  135,  994,  987,  987,  987,
   87,  923,  342,  109,  994,  994,  994,   40,    0,  656,
    0,  612,  283,  606,  129,    0,  178,   86, 1206,  605,
    0,   44,  354,   44,  130,  122,    0,   40,  670,  254,
  299,   41,  131,  258,   40,   40, 1122,  995,  263,  790,
   42, 1048,  719,    0,  206,    0,  165,  197, 1006,   41,
   63,   40,   44,   58,    0,   59,   41,   40,   59,   44,
 1047,   41,   41,  822,   44,   41,   41,   59,  233,   59,
   61, 1029,   44,  192,   59,    0,   45,  369,  369,   59,
  728, 1340,   45,   44,   41,   59,   40, 1115, 1350, 1117,
   42,  283,   45,  823,  656,   41, 1256,    0,   44,   40,
  292,    0,   59,  763,   59,   40,   44,  235,   44,   63,
 1350,  274, 1204,   59,  496,   44,   40, 1412,   44,  233,
  398,   45,  384,   45,  284,   91,   42,   58,  290,  722,
  287,   47,   44,  239,   59, 1023,  286,    0,  503,  504,
  505,  506,  248,  483,  356,  526,  526,    0,  278,  267,
  329,  691,  288,  293,   63,  283,   59,  288,  751,   45,
   59,   45,  695,  940,  284,  271,   44,  760,  264,  264,
 1350,  553,  258,  378, 1181,  456, 1225,  305,   41,   63,
   41,   44,  273,  321,  312,    0,  314,  529,  316,  277,
  320,  319,  268,  357, 1354,  403,   59,  339,  423,  309,
  392,  426,  427,  428,  369,  882,   59,   16,  406,  260,
  329, 1236,  331,    0,  419,  857,  858,  378,    0,    0,
  349,  307,  815,  338,  777,  385,  558,  346,  875,  358,
   44,   44,  350,  963,  339,  260,  321,  579, 1236,  886,
  887,  340,  348,    0,   59,   59, 1236, 1236, 1236,    0,
  341,  248,  285,  393,   41,  369,    0,   44,  346,  457,
   12,  466,    0, 1221,  392,  444,  430,   41,  383,   78,
   44,  401,   59,    0,  380,  273,  918,   59,   59, 1371,
  440,  493,  461,  398,  354,  391, 1314,    0,  449,  395,
  366,    0,    0,  278,  400,  280,    0,  457,    0,  437,
 1222,  443,   59,  288,  467,  462,  463,  798,   59, 1012,
  301,  277,  442,  875, 1576,   59,  412,    0,  264,  329,
  440,   59,  332, 1618,  886,  461, 1350, 1350,  269, 1517,
  461,    0,   59,  419,   41,  310, 1576,   41,  998,  999,
 1389,   41,  452,  319,  986,  297,   59,  639,  639,    0,
   59,   59,  264,  332, 1242,   59,   41,   59,  319,   44,
 1446,  264,  319,  115,  280, 1624,  461,  418,  961,  661,
  286,  545, 1123,  523,  726,  321,   59,  332,    0,  305,
 1540,  659,  501,  321,  341,  321,  648,  397,    0, 1049,
   59, 1168,  384,  418,  379,  620, 1576,  739,  526,  384,
  742, 1049, 1409,  400,  696, 1363,  395,  411,   59, 1367,
  411, 1369, 1005,  461,  756,  278,  401,  280,  397,   41,
 1608, 1408,   44,  408,  349,  288, 1183,  719,  461,  548,
  453,  388,   44, 1159,  455,  597,  661,   59,    0,  664,
 1166,  783,  397,  593,  669,  716,  459,   59, 1041,  674,
  675, 1636, 1410, 1054, 1040,  461,  461,  442,  683,  461,
  685,  686,  687,  688,  689,  455,  691,  441, 1656,  738,
    0,  696,  812,  880,  639, 1207,  604,  546,  461,  826,
 1231,  455,  601,  602,  441, 1132,  441,  459,  558, 1248,
  459,  278, 1677,  280,  719,    0,  459,   59,  397,    0,
  455,  288, 1424,  835, 1692,  459,  459,  453,  432,  461,
  502,   41,  640,  448,   44,  461,  379,  502, 1476, 1249,
  258,    0,  502, 1481,  716,  639,  455,  701,  343,   59,
  461, 1419, 1072,  486,  726,  459,  397,  459,  401,  461,
   41,  613,  441,  613,  659,  408,  432, 1189,  432,  258,
  459,  264, 1576, 1576,   59,  262,  455,  410,   59,  437,
  734,  735,  262,  378, 1522,   44,  663, 1209,  215,  307,
 1273,  384, 1349,  459, 1042,  459,  223,  410,  329,  442,
   59,  332,    0,   42,  341, 1543,  368,  368,  716,  274,
  882,  406,  379,  721,  409,  264,   44,  341,  307,   59,
  728, 1358,  864,  262,  710,  867,  712, 1632,  261,  974,
  425,  730,  731,  264,  401,  319,  343,  842,  843,  844,
  748,  408,  847,  848,  849,  310,  851,  852,  853,  854,
  855,  856,  461,  341, 1632, 1312,  451,  341,  412,  502,
  302,   59, 1632, 1632, 1632,   93,  397,  349,  776,  777,
  992,  378,  302,  461, 1247,  442,  278,  882,  280, 1617,
  343,   41, 1004, 1621,  889,  890,  288,  892,  737,  894,
   44,   41,  897,  898,  899,  900,  901,  902, 1043,  406,
  387,  419,  409,  262,  388,  398, 1028,  387,  880,  914,
  441,  916,  461,  397,  262,  987,  987,  837,  425,  839,
    0,    0,  994,  994,  455, 1052,  775,  813, 1666, 1351,
  419, 1179,  782, 1626,    0,  502,  257,  329,  824,   93,
  332,    0,   41,  406,  451,  795,  409,  412,  387,  398,
  308,  309,  344, 1459,   41,   41,  461,  441,   44,  808,
  809,  810,  425, 1234,   44,    0,  257,  398,    0, 1240,
  865,  455,  880, 1318,    0,   41,    0,  379,   44,   59,
   59,  866,   41,  308,  309,  835,  869,  329,  451,  868,
  332,  326,   40,   59,    0,   61,  349,   45,    0,  401,
   59,  443,  467,    0,  302,  397,  408,   93, 1135,  319,
  260, 1704,  322,  443,  335,   63,    0,   41,   44,  329,
   44,  260,  332, 1575,   59,    0,  336,   59,  387,   41,
 1199,  341,   44,   59,  344,   59,   12,   61,  319,  387,
  442,  339,    0, 1149,  335, 1738, 1152,    0,  329,  441,
  360,  332,  403,   59,  304,  397,    0,   59,  343, 1370,
  341,  453,   59,  455,    0,  304,  264, 1072,  406,    0,
  329,  418, 1026,  332,  384,   59,    0,  436,  388, 1084,
 1085, 1250, 1087, 1088,   59,  344, 1397,  397,  436,  461,
 1095, 1253,  435,  378,  452,  446,  431, 1219,  445,  441,
  502,   59,  262,  438,  414,   41,   59,  388,   44,  462,
  463,  453,  262,  455,  259,   59,  397,   41,  461,  457,
   44,  406,    0,   59,  409,  270,  388,  452,   59,    0,
 1636,  441, 1573, 1255, 1139,   59, 1384, 1045,  397,  115,
  425, 1049, 1147,  453, 1149,  443,    0, 1152, 1461, 1154,
 1483,  461, 1574, 1158, 1159, 1160, 1161, 1318, 1318, 1407,
  441, 1166,    0,  262, 1236, 1236,  451,  263, 1020, 1591,
 1020, 1677, 1594,  320,  455,  262, 1121, 1122, 1123,  441,
  259,   59,  441,  461, 1353,  264, 1035,  322,   59,  353,
  444,  270,  258,  301,  453, 1167,  455, 1202,  265,  272,
  398,  336, 1051,   41,    0,   59,   44,  461, 1057,  344,
 1355,  277,  278,  259,  280,  379,  289,  313, 1350,  285,
   45,   59,  288, 1664,  270,  360, 1332,  387,  324,  264,
 1336, 1185,  264, 1187,  258,  301,  303,  387,   63,  461,
 1312,  307,  322,  344,   41,  353,  459,   44,  296,  329,
  274, 1373,  332,  322,  401, 1669,  336,    0,  264, 1659,
  319,  334,   59,   59,  344, 1270, 1707,  336,  369,    0,
  329, 1121, 1122,  332, 1279,  344,  278,  301,  280,  414,
  360, 1286,  341,  307, 1183,  398,  310,  344,  387,  264,
  363,  360, 1414,  319,  278,  442,  280, 1251,   41, 1148,
  387,   44, 1702, 1616,  384,  353,  264, 1312,    0,  461,
  459,  406,  369,  379, 1386,  341,   59,  397,   61,  398,
  323,    0,  319, 1737,  437,   44,  427, 1332,   59,  388,
  425, 1336,  428,  264,  414,  401, 1736,  486,  397,  419,
 1762, 1755,  408,  459,  341,  414,  279, 1359,   91,   41,
 1456,  417,  461,  419,  278, 1668,  280,  430,  471,    0,
 1529,  441,   41,  398, 1263,   44,  398,   59, 1267, 1538,
  427,  437,  258,  453,   93,  455,  442, 1229, 1350, 1229,
   59, 1386,  441,  461,   42,   43,  322,   45,  412,   47,
  343,    0,  398,  329, 1366,  419,  332,  330,  302, 1411,
  336,    0, 1638,   44,  461,  471,  329,  278,  344,  280,
  458,  459,  460,  437,  462,  463,    0, 1539,   59,  258,
    0,  307,  261,  398,  360,  378,    0, 1432, 1433,  323,
    0,  364,   41,  481,  482,  339,  265,  402,  486,  487,
  398,   40,   41,  467, 1576,   44,  302,  471,  384,  382,
   59, 1456, 1661,  406, 1459,  379,  409, 1365, 1366, 1358,
   59,  397,   61,   40,    0,  319, 1598,  398,  307,  260,
    0,  296,  425, 1365,  303,   59,  322,  401,  414,   59,
  403,  319, 1718,  339,  408,   59, 1491,  341, 1374,   59,
  336, 1700,   91,  418,  332,  384, 1502,    0,  451,   42,
   43, 1446,   45,  341,   47,  441, 1638, 1743,  379,  338,
    0,  308,  309,  304,  360,  258,  439,  453,  442,  455,
  445,  444,    0,   59, 1478,   44, 1735,  450,  353,   59,
 1502,  274, 1598,  419,  277,  278,  260,  280,  461, 1544,
   41,    0,  285,   44, 1753,  288,  469, 1552,    0,    0,
  388,  437,  408, 1685,    0,  379,   59,    0,  301,  397,
 1632, 1632,  418,   41,  307,    0,   44,  310,  414,   59,
  317,  318, 1638,    0,   93,  384,  260,  401, 1520, 1485,
  304,   59,    0, 1588,  408,  471, 1718,  443,   40,   41,
   41,  280,   44,   44, 1502,   41, 1446,  286,   44,  278,
   59,  280, 1452,  441, 1576,    0,   44,   59,   59,   61,
   61, 1743,    0,   59,  411,    0,   59,  455,  442, 1685,
  304,  386,  280, 1521,   59,  384, 1598,  319,  286,    0,
 1516, 1636,   59,  458,  459,  460,  379,  462,  463,   91,
   91,   59,    0,  404,    0,    0, 1545, 1488,    0,  341,
 1549,  403, 1718,  260,  384,  452,  481,  482,  401,  258,
  421,  486,  487,  321,   59,  408, 1638, 1609,    0,  412,
   41,   59, 1677,   44,   59,  274,  419, 1743,  277,  278,
    0,  280,  495,    0, 1690,    0,  285,  439,   59,  288,
   61,  338, 1587,    0,  437,    0,  388,  304,  450,  442,
  379,   59,  301,   59,   59,  397,    0,   59,  307,    0,
  319,  310,   44, 1685,    0,    0, 1722, 1723, 1690,  322,
   91,   41,  401,  332,  467,    0,    0,   59,  471,  408,
  274,   41,  341,  336,   44,   41,  419,  280,   44,   59,
 1646, 1747,   59,  286,   59,    0, 1718,   41, 1615,  441,
 1722, 1723,   59,    0,   59, 1761,   41,  360,   41,   44,
    0,   44,    0,  442, 1631,   59,   41,   41,   59,   44,
   44, 1743,    0,   59,   59, 1747,  355,  319,  321,  388,
  379,  384, 1690,   93,   59,   59,   61,   61,  397, 1761,
   42,   43, 1659,   45,   41,   47, 1648,   44, 1648,  494,
  495,    0,  401, 1670,   59,  288,  258,  258,  459,  408,
  461,  414,   59,  412, 1722, 1723, 1714,   91,  301,   59,
  419,   59,  274,  274,  338,  277,  278,  278,  280,  280,
  461,   59,  441,  285,  285, 1702,  288,  288,  437, 1747,
   40,  319,   41,  442, 1711,   44,  455,  338,  462,  301,
  301,  329,  425, 1761,  332,  307,  307,  317,  310,  310,
   59,  375,   61,  341,   41,  264,  344,   44,  467, 1736,
  462,  463,  471,  319,  388,  319,   42,   43,  461,   45,
  459,   47,  461,  329,  375,    0,  332,  258,  338,   41,
  692,  403,   44,  472,  279,  341,    0,  388,  344,   42,
   43,   44,   45,  274,   47,   41,  337,  278,   44,  280,
  388,  403,  491,  715,  285,   41,  301,  288,   44,  397,
  499,  500,  501,  435,  453,  727,   41,  379,  379,   44,
  301,   41,  341,  265,   44,  343,  307,   41,  450,  310,
   44,   40,  388,   41,   59,  330,   44,  392,  393,  401,
  401,  397,  458,  459,  460,   59,  408,  408,  321,   41,
  412,  412,   44,  441,  349,    0,   41,  419,  419,   44,
  378,  303,  279,  358,   41,  453, 1115,   44, 1117,  364,
  486,  487,  319,  258,  258,  437,  437,  319,  403,   41,
  442,  442,   44,   41,  301,  441,   44,  382,  406,  319,
  274,  409,  277,  278,  278,  280,  280,  453,  379,  341,
  285,  285,  332,  288,  288,  467,  467,  425,  258,  471,
  471,  341,  384,  330,   59,  319,  301,  301,  280,  466,
  401,  468,  307,  307,  286,  329,  310,  408,  332,  279,
  384,  412,  349,  451,  322,  437,   41,  341,  419,   44,
   41,  358,  435,   44,  362,  462,  463,  364,  336,  258,
  312,  301,  451,  461,  418,  443,  437,  307,  388,  358,
  288,  442,   41,   42,   43,  382,   45,  397,   47,  278,
  470,  280,  360,  412,   44,  264,  285,   61,   40,  288,
  330,   41,   42,   43,  388,   45,  467,   47,  287,  264,
  471,  373,  301,  397,  379,  379,  384,   40,  307,  349,
    0,  462,  462,  462,  280,   44,  437,  357,  358,  461,
  286,  441,   44,  660,  364,  662,  401,  401,  665,  666,
  667,  321,  403,  408,  408,   40,  414,  280,  412,   40,
   40,   40,  382,  286,  419,  419,  312,  441,   40,  357,
   40,   41,   42,   43,   44,   45,   46,   47,  262,  453,
   40,   40,  437,  437,   40,  461,   40,  442,  442,   59,
   60,   61,   62,   40,   40,   40,   40,   91,   46,  419,
  379,   41,   42,   43,  321,   45,  394,   47,  396,   44,
  430,   44,  429,  467,   46,   40,  471,  471,   61,  264,
  280,   91,  401,   93,  319,   42,   43,  322,   45,  408,
   47,  419,  295,   44,  329,  319,   46,  332,  322,  383,
  419,  336,  349,  306,   44,  329,  341,  278,  332,  344,
  313,  278,  336,  301,  264,  461,  444,  341,  437,  398,
  344,  437,  471,  442,  279,  360,  459,    0,   42,   43,
  398,   45,  277,   47,  448,  338,  360,  448,  400,    0,
  350,   41,   42,   43,   40,   45,  301,   47,   40,  384,
   91,   40,  471,  388,  319,   41,   42,   43,   40,   45,
  384,   47,  397,  387,  388,  264,   44,  384,   41,   42,
   43,   44,   45,  397,   47,  330,  412,  390,  383,  414,
   41,   40,   40,   44,  437,  465,   59,   60,   61,   62,
  414,  280,  318,   40,  349,   41,  321,  286,   59,  321,
  403,  452,  357,  358,  453,  449,  441,  461,  264,  364,
  280,  461,  436,   40,    0,  260,  286,  441,  453,  459,
   93,   40,  277,  274,  301,  285,  345,  382,  345,  453,
  278,  455,  435,  387,  387,  387,  439,  418,  301,  394,
  419,  396,  417,  419,   41,   42,   43,  450,   45,   40,
   47,    0,  262,  264,  264,   41,  357,  302,   44,   40,
  274,   40,  272,  461,  419,  386,   44,   44,  368,  314,
  280,  321,  264,   59,   41,   44,  286,  321,   44,  289,
   44,   41,   42,   43,    0,   45,   40,   47,  329,  444,
  280,   44,   41,   40,  339,   44,  266,    0,  308,  309,
  280,  502,  312,  300,   40,  262,  286,  455,  264,  319,
   59,  321,  322,  441,  461,  325,  423,   41,   58,  329,
   41,   41,  332,  280,  334,   41,  336,   41,   44,  286,
   46,  341,  342,  264,  344,  493,  395,   41,   41,   42,
   43,   44,   45,   59,   47,   61,  310,  310,  262,   41,
  360,  361,   40,  363,   40,  353,   59,   60,   61,   62,
   40,   40,   40,  408,   40,   40,  280,  377,   40,  379,
  380,  381,  286,  418,  384,   40,   40,  387,  388,   40,
  280,   40,   40,   40,   40,   40,  286,  397,  262,  262,
   93,  264,  328,   44,  280,   41,  436,  309,  443,  272,
  286,  411,  344,  274,  414,  332,  423,  280,  389,  391,
  389,  389,  447,  286,  271,  392,  289,  278,  288,  280,
  430,  387,  278,   41,  285,  387,  436,  288,  387,  387,
   41,  441,  408,  387,    0,  308,  309,   40,  387,  312,
  301,  379,  452,  453,   41,  455,  319,   41,  321,  322,
  418,  461,  325,   41,  386,   41,  329,   42,   43,  332,
   45,  334,   47,  336,  309,  436,   45,  397,  341,  342,
  437,  344,  338,  302,   59,   41,   42,   43,   44,   45,
  302,   47,  443,  280,  339,  339,   41,  360,  361,  286,
  363,  443,  386,   59,   60,   61,   62,   41,   41,   41,
  353,   41,   41,  372,  377,  372,  379,  380,  381,   41,
   41,  384,   41,   41,  387,  388,   42,   43,  379,   45,
  280,   47,   41,   41,  397,   41,  286,   93,   41,  278,
   41,  280,   41,  319,   41,   41,  322,  280,  411,  288,
  401,  414,   44,  329,   59,   40,  332,  408,  264,  265,
  336,  341,  301,   40,   59,  341,   59,  430,  344,  262,
   59,  264,   59,  436,  280,  341,   59,   59,  441,  272,
   41,   41,   42,   43,  360,   45,  321,   47,  353,  452,
  453,  442,  455,  286,  345,   41,  289,  303,  461,  305,
   41,   42,   43,   40,   45,  369,   47,   59,  384,  341,
  384,  387,  388,  319,    0,  308,  309,   59,   44,  312,
  461,  397,  384,  384,   41,   41,  319,  411,  321,  322,
   44,   44,  325,  436,  305,  341,  329,  443,  414,  332,
  379,  334,  302,  336,   41,  344,   40,   59,  341,  342,
  294,  344,  305,  464,   44,   41,   42,   43,   44,   45,
  436,   47,  401,   44,   41,  441,  308,  360,  361,  408,
  363,    0,  384,   59,   60,   61,   62,  453,  264,  455,
  338,  384,   40,  278,  377,  264,  379,  380,  381,  459,
  390,  384,  321,  264,  387,  388,   42,   43,  471,   45,
  452,   47,   40,  442,  397,  280,  262,   93,  264,  271,
  412,  286,  310,   59,  459,  264,  272,  437,  411,  436,
  344,  414,   41,   42,   43,  344,   45,  296,   47,  344,
  344,  459,  461,  289,   41,   42,   43,  430,   45,   41,
   47,   40,   40,  436,  271,   59,   41,   41,  441,   59,
  305,    0,  308,  309,   44,   59,  312,   41,    0,  452,
  453,    0,  455,  319,  280,  321,  322,    0,  461,  325,
  286,    0, 1118,  329,    0,   12,  332,  250,  334,  243,
  336,  648, 1054,  242,  353,  341,  342,  608,  344, 1052,
  827,   82,   41, 1049,   43,   44,   45,  333,  302,   41,
 1398, 1033,   44,  297,  360,  361, 1044,  363,  288,  977,
   59,   60,   61,   62,  721,   41, 1045,   59,   44,  553,
  280,  377, 1585,  379,  380,  381,  286, 1371,  384,  758,
  314,  387,  388,   59, 1654,  314,  531, 1373, 1657,  280,
 1658,  397, 1694,  748,   93,  286,  473,  474,  475,  476,
  477,  478,  479,  480, 1746,  411, 1200, 1603,  414,   41,
   42,   43,  847,   45,  849,   47,  851,  852, 1691,  854,
  855,  856, 1386, 1659,  430,  444,  262,  307,  264,  369,
  436,  319,  300,  533, 1238,  441,  272,  805,  797,  458,
  459,  460,   13,  462,  463,  592,  452,  453,  465,  455,
  275,  469,  710,  289,  726,  461,  696,  940,  697,  120,
 1576, 1474,  481,  482,  483,  484,  485,  486,  487,  488,
  489,    0,  308,  309, 1711, 1670,  312,  496,  497, 1764,
  481,  655, 1086,  319,  280,  321,  322,  368,  883,  325,
  286, 1154,  260,  329,    0,   -1,  332,   -1,  334,   -1,
  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,
   -1,  280,   41,   -1,   43,   44,   45,  286,   -1,   -1,
   -1,   -1,   -1,  280,  360,  361,   -1,  363,  260,  286,
   59,   60,   61,   62,  302,   41,  279,   -1,   44,   -1,
    0,  377,   -1,  379,  380,  381,  314,   -1,  384,   -1,
   -1,  387,  388,   59,   -1,   -1,   -1,   -1,  301,   -1,
  328,  397,   -1,  262,   93,  264,   -1,   -1,   -1,   -1,
  302,  339,   -1,  272,   -1,  411,   -1,   -1,  414,   -1,
   -1,   41,  314,   -1,   44,   -1,  278,  330,  280,   -1,
  289,   41,   42,   43,  430,   45,  288,   47,    0,   59,
  436,   -1,  278,   -1,  280,  441,  349,  339,    0,  308,
  309,   -1,  288,  312,   -1,  358,  452,  453,   -1,  455,
  319,  364,  321,  322,   -1,  461,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,  382,
  408,   -1,  341,  342,   -1,  344,   -1,   -1,  280,   41,
  418,   43,   44,   45,  286,   -1,   -1,   59,   -1,   -1,
   -1,  360,  361,   -1,  363,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,  443,  408,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,  418,  379,  387,  388,
   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,  397,   -1,
   -1,   93,   -1,  379,   -1,   -1,   -1,   -1,   -1,  401,
   -1,  443,  411,   -1,   -1,  414,  408,   -1,   -1,   -1,
   -1,   -1,   41,   42,   43,  401,   45,   -1,   47,  461,
   -1,  430,  408,  262,   -1,  264,   -1,  436,   -1,   -1,
   -1,   -1,  441,  272,   -1,   41,   42,   43,   -1,   45,
  442,   47,   -1,  452,  453,   -1,  455,   -1,   -1,   -1,
  289,   -1,  461,   41,   42,   43,  442,   45,   -1,   47,
   -1,   -1,  278,   -1,  280,   -1,   -1,   -1,    0,  308,
  309,   -1,  288,  312,   -1,   -1,   -1,    0,   -1,   -1,
  319,   -1,  321,  322,   -1,  301,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,  278,   41,
  280,   43,   44,   45,   -1,  285,   -1,   -1,  288,   -1,
  280,  360,  361,   -1,  363,   -1,  286,   59,   60,   61,
   62,  301,   -1,   -1,   -1,   -1,   59,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,  258,   -1,  387,  388,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,  397,   -1,
  262,   93,  264,  379,   -1,   -1,   -1,  279,   -1,   -1,
  272,   -1,  411,   -1,   -1,  414,   41,   42,   43,   -1,
   45,   -1,   47,   -1,    0,  401,   -1,  289,   -1,  301,
   -1,  430,  408,   -1,   -1,  307,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,   -1,   -1,  308,  309,   -1,  379,
  312,   -1,   59,  452,  453,   -1,  455,  319,  330,  321,
  322,   -1,  461,  325,   -1,   41,  442,  329,   44,   -1,
  332,  401,  334,   -1,  336,   -1,   -1,  349,  408,  341,
  342,   -1,  344,   59,   40,   -1,  358,   43,   -1,   45,
   -1,  280,  364,   -1,   -1,   -1,   -1,  286,  360,  361,
   -1,  363,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
  382,   -1,  442,   -1,  280,  377,   -1,  379,  380,  381,
  286,   -1,  384,  295,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  280,   -1,  306,  397,   -1,   -1,  286,   -1,
   -1,  313,   -1,   -1,   -1,   -1,   -1,  419,   -1,  411,
   -1,   -1,  414,   -1,  326,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  430,   -1,
  262,   -1,  264,   -1,  436,  258,   -1,   -1,   58,  441,
  272,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  452,  453,   -1,  455,   -1,   -1,  279,  289,   -1,  461,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  387,  308,  309,  301,   -1,
  312,   -1,   -1,   -1,  307,   -1,   -1,  319,   -1,  321,
  322,  403,   -1,  325,   -1,   -1,   40,  329,   42,   43,
  332,   45,  334,   -1,  336,   -1,   -1,  330,  420,  341,
  342,  258,  344,   -1,   58,  280,   -1,   -1,   -1,   63,
   -1,  286,   -1,  435,   -1,   -1,  349,  439,  360,  361,
  442,  363,  279,   -1,   -1,  358,   -1,   -1,  450,   -1,
   -1,  364,  258,   -1,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,  301,  387,  388,  469,   -1,  382,
  307,   -1,   -1,  279,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  276,   -1,  414,  330,   -1,  301,   -1,   -1,   -1,   -1,
   -1,  307,   -1,   -1,  290,   -1,  419,  293,  430,   -1,
  296,  297,  349,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,  358,   -1,   -1,  330,   -1,   -1,  364,   -1,  315,
  452,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,  461,
   -1,  327,   -1,  349,   -1,  382,   -1,   -1,   -1,   -1,
    0,   -1,  358,   -1,   -1,   -1,   -1,  267,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,
  290,  367,  419,   -1,    0,  371,  296,  297,   -1,   -1,
   -1,   41,   -1,  379,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,   -1,   59,
   -1,   -1,   -1,  419,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,  260,   -1,   44,   -1,
   -1,   -1,   -1,  267,   -1,   -1,  422,   -1,   -1,   -1,
   -1,   -1,  276,   59,   -1,  355,  356,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  367,  444,   -1,
   -1,  371,  296,  297,   -1,   -1,   -1,   -1,   -1,  379,
  304,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,  418,   -1,
  496,  497,  422,  499,  500,  501,   -1,   -1,   -1,  353,
   -1,  355,  356,   40,  434,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,  367,  444,   -1,   -1,  371,   -1,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  434,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  444,   -1,  262,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,  319,
   -1,   -1,  322,   -1,   -1,   40,   -1,   -1,   43,  329,
   45,   -1,  332,   -1,   -1,  306,  336,   -1,   -1,   -1,
   -1,  341,  313,   58,  344,   -1,  317,  318,   63,   -1,
   -1,   -1,   -1,  319,   -1,  326,  322,   -1,   -1,   -1,
  360,   -1,   -1,  329,   -1,   -1,  332,  338,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
  261,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,  260,  360,   -1,   -1,  397,   -1,   -1,
  267,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  291,   -1,   -1,   -1,  414,   -1,   -1,  298,  384,  300,
   -1,  302,  388,  290,   -1,   -1,  307,   -1,   -1,  296,
  297,  397,  403,  314,   -1,   -1,  436,  304,   -1,   -1,
   -1,  441,   -1,   -1,   -1,   -1,   -1,  328,  414,  420,
   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,  339,   -1,
  327,   -1,   -1,   -1,  435,   -1,   -1,   -1,  439,   -1,
   -1,   -1,   -1,   -1,   -1,  441,  267,   -1,   -1,  450,
   -1,   -1,   -1,   -1,   -1,  276,  353,  453,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  469,  290,
  367,   -1,   -1,   -1,  371,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,  406,   -1,   -1,   -1,   -1,
   -1,   -1,  413,   -1,   -1,  416,  327,  418,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,
   -1,   -1,  267,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,  276,  443,   -1,  355,  356,   -1,  434,   -1,   -1,
   -1,   60,   61,   62,   -1,  290,  367,  444,   -1,   -1,
  371,  296,  297,   -1,   40,   -1,   -1,   43,  379,   45,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,  472,   -1,   63,   -1,   -1,
   -1,  492,  327,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,  422,  499,  500,  501,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  444,   -1,   -1,  371,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,  472,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  426,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,
   -1,   45,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,  472,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
   -1,  496,  497,  272,  499,  500,  501,   -1,   -1,   -1,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,  277,   -1,  290,   -1,  325,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,  334,   -1,  292,   -1,   -1,
   -1,  296,   -1,  342,  299,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,  361,   -1,  363,   -1,   -1,   -1,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,  267,  377,   -1,
  379,  380,  381,   -1,   -1,  340,  276,   -1,   -1,  355,
  356,  346,  347,  348,   -1,  350,  351,  352,   -1,  354,
  290,  367,   -1,   -1,   -1,  371,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1271, 1272,   -1,  374,
   -1,  376, 1277, 1278,   -1, 1280, 1281,   -1,   -1,   -1,
   -1,  430,   -1, 1288, 1289, 1290, 1291,  327, 1293, 1294,
 1295, 1296, 1297, 1298,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,  407,  267,   -1,   -1,   -1,  412,   -1,   -1,
  426,   -1,  276,   -1,   -1,  355,  356,   -1,  434,  424,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  367,  444,   -1,
   -1,  371,  296,  297,   40,   -1,   -1,   43,   -1,   45,
   -1,  446,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,  472,   63,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,  481,  482,   -1,   -1,
  496,  497,   -1,  499,  500,  501,  426,   -1,   -1,   -1,
   -1,  355,  356,  498,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  444,   -1,   40,  371,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,  426,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,
  313,  314,   -1,  316,   -1,   -1,  319,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
  333,   -1,   -1,  267,   -1,   -1,  339,   -1,   -1,   -1,
   -1,   40,  276,   -1,   43,   -1,   45,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   58,
   -1,  367,  296,  297,   63,  371,   -1,   -1,   41,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,  327,   -1,   -1,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,  418,   -1,   -1,   -1,   -1,
  426,  355,  356,   -1,   -1,   -1,   -1,   58,  434,   -1,
  433,   -1,   63,  367,   -1,   -1,   -1,  371,  444,   -1,
  443,   -1,  273,   -1,   -1,   -1,  277,   -1,   -1,  452,
   -1,  454,  458,  459,  460,  461,  462,  463,  461,   -1,
   -1,  292,   -1,   -1,   -1,  296,  472,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,  490,   -1,   -1,
  496,  497,  426,  499,  500,  501,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
  444,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,  260,  496,  497,  263,  499,  500,  501,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  271,  407,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   42,
   43,  290,   45,  424,   -1,   -1,   -1,  296,  297,  272,
   -1,   -1,   -1,   -1,   -1,   58,  302,  280,   -1,   -1,
   63,   -1,   -1,  286,   -1,  446,  289,  313,  314,   -1,
  316,   -1,   -1,  319,   -1,   -1,   -1,   -1,  327,  260,
   -1,   -1,  263,   -1,   -1,   -1,  267,  333,   -1,   -1,
   -1,   -1,   -1,  339,   -1,  276,   -1,   -1,   -1,   -1,
  481,  482,  325,   -1,   -1,   -1,  355,  356,   -1,  290,
   -1,  334,   -1,   -1,   -1,  296,  297,  498,  367,  342,
   -1,   40,  371,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  361,   58,
  363,   -1,   -1,   -1,   63,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,  399,  377,   -1,  379,  380,  381,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  418,   -1,  355,  356,   -1,  426,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,  367,  433,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  444,   -1,  443,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,  454,  458,
  459,  460,  461,  462,  463,  461,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,  490,  426,   -1,  496,  497,   -1,
  499,  500,  501,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  444,  267,   -1,  277,   -1,   -1,   -1,
   -1,   -1,   -1,  276,  285,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,  296,   -1,  290,  299,   -1,
   -1,  472,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,   -1,   -1,   -1,   -1,  267,   -1,
  353,   -1,  355,  356,   -1,   -1,   40,  276,   42,   43,
   -1,   45,   -1,  374,  367,  376,   -1,   -1,  371,   -1,
   -1,  290,   -1,   -1,   58,   -1,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,  327,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,  353,  446,  355,  356,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
  461,   -1,  371,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  498,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  418,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  444,  277,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,  296,   -1,   -1,  299,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,  271,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  267,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,  276,   -1,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,  302,   -1,  290,   -1,   -1,   -1,
   -1,  309,  296,  297,   -1,  313,  314,   -1,  316,   -1,
   -1,  319,  260,  374,   -1,  376,   -1,   -1,   40,  267,
   -1,   43,   -1,   45,   -1,  333,   -1,   -1,  276,   -1,
   -1,  339,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,  290,   -1,   -1,   -1,  407,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,  353,
   -1,  355,  356,  424,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,  327,
   -1,   -1,   58,   -1,   -1,  446,   -1,   63,   -1,   -1,
   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  481,  482,   -1,  371,   -1,  433,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  443,   -1,  498,   -1,   -1,
  434,   -1,   -1,   -1,  452,   -1,  454,   -1,   -1,   -1,
  444,   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,  490,   -1,   -1,   -1,  434,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  444,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,  267,   -1,   -1,  496,  497,
   -1,  499,  500,  501,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,  267,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   40,   41,   -1,   43,
   -1,   45,   -1,   -1,   -1,  367,  273,   -1,   -1,  371,
  277,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,  346,
  347,  348,  444,  350,  351,  352,   -1,  354,   -1,   -1,
  452,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  418,   -1,   -1,   -1,   -1,  374,   -1,  376,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  444,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  407,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,  267,   -1,  446,
  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  267,   -1,   43,   -1,   45,   -1,   -1,
   -1,  498,  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  353,   -1,  355,  356,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,  367,  273,   -1,
   -1,  371,  277,  327,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,
   -1,  346,  347,  348,  444,  350,  351,  352,   -1,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,  407,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,  267,
   -1,  446,  496,  497,   -1,  499,  500,  501,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,
   -1,   -1,   -1,  498,  276,   -1,   -1,   -1,   -1,  327,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  367,
  273,   -1,   -1,  371,  277,  327,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,  444,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,
  458,  459,  460,  461,  462,  463,  418,   -1,   -1,   -1,
   -1,  374,   -1,  376,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,
   -1,  499,  500,  501,  407,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  267,   -1,  446,  496,  497,   -1,  499,  500,  501,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  267,   -1,   43,
   -1,   45,   -1,   -1,   -1,  498,  276,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,  327,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,  267,   -1,   -1,  496,  497,   -1,  499,
  500,  501,  276,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,  290,   -1,   41,   -1,
   -1,   44,  296,  297,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  327,    0,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   41,   -1,  371,   44,  327,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  444,  491,   -1,   -1,
   -1,    0,  496,  497,   -1,  499,  500,  501,  262,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   41,  491,   -1,   44,   -1,   -1,  496,  497,
   -1,  499,  500,  501,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,    0,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  329,  319,   -1,  332,  322,
   -1,   -1,  336,   -1,   -1,   -1,  329,  341,   -1,  332,
  344,   -1,   -1,  336,   -1,   -1,  262,   -1,  341,   -1,
   -1,  344,  262,   -1,   -1,   41,  360,   -1,   44,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  360,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,  397,  387,  388,   -1,    0,   -1,   -1,
   -1,   -1,   -1,  319,  397,   41,  322,   -1,   44,  319,
  414,   -1,  322,  329,   -1,   -1,  332,   -1,   -1,  329,
  336,  414,  332,   59,   -1,  341,  336,   -1,  344,  262,
   -1,  341,  436,   -1,  344,   -1,   -1,  441,   41,   -1,
   -1,   44,   -1,  436,  360,   -1,   -1,   -1,  441,  453,
  360,  455,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,  397,   -1,   -1,   -1,   -1,  319,  397,   -1,  322,
   -1,    0,   -1,   -1,   -1,   -1,  329,   -1,  414,  332,
   -1,   -1,   -1,  336,  414,   -1,   -1,   -1,  341,   -1,
   -1,  344,    0,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  436,   -1,   -1,   -1,   -1,  441,  436,  360,   -1,   -1,
   -1,  441,   41,   -1,   -1,   44,   -1,  453,   -1,  455,
   -1,    0,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,
   59,  384,   -1,   41,  387,  388,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,
  319,   59,   -1,  322,   -1,    0,  262,   -1,   -1,   -1,
  329,  414,   41,  332,   -1,   44,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,
   59,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,
   -1,  360,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  453,   -1,  455,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   59,  384,  322,   -1,  387,  388,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  397,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  262,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,  436,   -1,   -1,
   -1,   -1,  441,  329,   -1,   -1,  332,   -1,  384,   -1,
  336,  387,  388,   -1,  453,  341,  455,   -1,  344,   -1,
   -1,  397,   41,   -1,   -1,   44,  319,   -1,   -1,  322,
   -1,    0,   -1,   -1,  360,   -1,  329,   -1,  414,  332,
   59,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  436,  387,  388,  262,   -1,  441,   -1,  360,   -1,   -1,
   -1,  397,   41,   -1,   -1,   44,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  414,   -1,
   59,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,    0,   -1,
  436,   -1,   -1,  262,   -1,  441,   -1,   -1,   -1,   -1,
  319,  414,   -1,  322,   -1,   -1,   -1,  453,   -1,  455,
  329,   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,
   -1,  319,  341,  436,  322,  344,   -1,  262,  441,   41,
   -1,  329,   44,   -1,  332,   -1,   -1,   -1,  336,   -1,
  453,  360,  455,  341,   -1,   -1,  344,   59,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  360,  332,   -1,  384,   -1,  336,  387,  388,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  384,  322,   -1,  387,
  388,  360,   -1,   -1,  329,  414,   -1,  332,   -1,  397,
   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,  384,  414,  436,  387,  388,
   -1,   -1,  441,  262,   -1,  360,   -1,   -1,  397,   -1,
    0,   -1,   -1,   -1,  453,   -1,  455,   -1,  436,   -1,
   -1,    0,   -1,  441,   -1,  414,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,  453,   -1,  455,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   41,  441,  262,   44,   -1,   -1,   -1,   -1,  414,
  319,   -1,   41,  322,  453,   44,  455,   -1,   -1,   59,
  329,   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,
   59,  436,  341,   -1,   -1,  344,  441,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  453,   -1,
  455,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
  262,   -1,  341,   -1,   -1,  344,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  436,  387,  388,
   -1,   -1,  441,   -1,   -1,   -1,   -1,  319,  397,   -1,
  322,   -1,   -1,   -1,  453,   -1,  455,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,  414,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  436,  360,   -1,
   -1,  271,  441,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   -1,  397,   -1,   -1,   -1,  309,
   -1,   -1,  262,  313,  314,   -1,  316,   -1,   -1,  319,
   -1,   -1,  414,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,  319,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,
  319,   -1,  332,  322,   -1,   -1,  336,   -1,   -1,   -1,
  329,  341,   -1,  332,  344,   -1,   -1,  336,   -1,  399,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,   -1,
   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,  443,   -1,  384,   -1,  397,  387,  388,
   -1,   -1,   -1,   -1,  454,   -1,   -1,   -1,  397,   -1,
   -1,  461,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,
  490,  441,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,  453,   -1,  455,   -1,   -1,  461,   -1,
   -1,   -1,   -1,   -1,  453,   -1,  455,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
  483,  484,  485,   -1,   -1,  488,  489,  490,  491,  461,
  493,   -1,   -1,  496,  497,   -1,   -1,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,  488,  489,  490,  491,
  461,  493,   -1,   -1,  496,  497,   -1,   -1,   -1,   -1,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,  483,  484,  485,   -1,   -1,  488,  489,  490,
  491,   -1,  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 502
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : VIEW replace_view_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
{ yyval = yyvsp[0]; }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
{ yyval = yyvsp[0];}
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = yyvsp[0]; }
break;
case 75:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
{ yyval = (NOD) NULL; }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
{ yyval = yyvsp[-1]; }
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 115:
{ yyval = NULL; }
break;
case 116:
{ yyval = make_list (yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 119:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 120:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 125:
{ yyval = (NOD) 0;}
break;
case 126:
{ yyval = yyvsp[-1]; }
break;
case 127:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 131:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 132:
{ yyval = NULL; }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = yyvsp[0]; }
break;
case 135:
{ yyval = (NOD) NULL; }
break;
case 136:
{ yyval = (NOD) NULL; }
break;
case 139:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 144:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 146:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 150:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 151:
{yyval = (NOD) NULL;}
break;
case 154:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 155:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 157:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 160:
{yyval = (NOD) NULL;}
break;
case 163:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 167:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 168:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 172:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 175:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 176:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 177:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 179:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 180:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 181:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 184:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 185:
{ g_file  = make_file ();}
break;
case 190:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 191:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 198:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = yyvsp[0]; }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 204:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 207:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 213:
{ yyval = NULL; }
break;
case 214:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 217:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 218:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 219:
{ yyval = yyvsp[-1]; }
break;
case 220:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = yyvsp[0]; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = (NOD) NULL; }
break;
case 232:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 235:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 237:
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 238:
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 239:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 240:
{ yyval = yyvsp[0]; }
break;
case 241:
{ yyval = NULL ;}
break;
case 246:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 247:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 250:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 251:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 256:
{ yyval = NULL;}
break;
case 257:
{ yyval = yyvsp[0];}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_list (yyvsp[-1]); }
break;
case 268:
{ yyval = NULL; }
break;
case 269:
{ yyval = yyvsp[0]; }
break;
case 270:
{ yyval = NULL; }
break;
case 272:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 273:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 274:
{ yyval = make_list (yyvsp[0]); }
break;
case 275:
{ yyval = NULL; }
break;
case 277:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 278:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 279:
{ yyval = NULL; }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = yyvsp[0]; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 285:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 286:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 289:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 292:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 298:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 302:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 303:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 304:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 305:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 306:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 307:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 308:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 311:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 312:
{ yyval = make_list (yyvsp[0]); }
break;
case 313:
{ yyval = make_list (yyvsp[-1]); }
break;
case 314:
{ yyval = NULL; }
break;
case 315:
{ yyval = make_list (yyvsp[0]); }
break;
case 316:
{ yyval = make_list (yyvsp[-1]); }
break;
case 317:
{ yyval = NULL; }
break;
case 320:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 321:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 322:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 323:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 324:
{ yyval = NULL; }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 334:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 335:
{ yyval = make_list (yyvsp[0]); }
break;
case 336:
{ yyval = make_list (yyvsp[-1]); }
break;
case 337:
{ yyval = NULL; }
break;
case 341:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 344:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 345:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 346:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 347:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 349:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 351:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 353:
{ yyval = make_list (yyvsp[0]); }
break;
case 355:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 358:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 359:
{ yyval = yyvsp[-1]; }
break;
case 360:
{ beginning = lex_position(); }
break;
case 361:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 362:
{ beginning = last_token; }
break;
case 363:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 364:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 365:
{ yyval = 0; }
break;
case 366:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 367:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 368:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 370:
{ yyval = NULL; }
break;
case 371:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 372:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 373:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 376:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 377:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 378:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 390:
{ yyval = NULL; }
break;
case 391:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 394:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 395:
{ yyval = yyvsp[0]; }
break;
case 396:
{ yyval = yyvsp[0]; }
break;
case 397:
{ yyval = yyvsp[0]; }
break;
case 398:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 399:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 400:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 404:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 405:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = yyvsp[0]; }
break;
case 408:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 409:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 410:
{ yyval = yyvsp[0]; }
break;
case 411:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 413:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 414:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 415:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 416:
{ yyval = yyvsp[0]; }
break;
case 417:
{ yyval = yyvsp[0]; }
break;
case 418:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 419:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 421:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 446:
{ yyval = NULL; }
break;
case 447:
{ yyval = NULL; }
break;
case 448:
{ yyval = NULL; }
break;
case 449:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 450:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 451:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 452:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 453:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 454:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 455:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 456:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 458:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 459:
{ yyval = yyvsp[0]; }
break;
case 460:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 461:
{ yyval = yyvsp[0]; }
break;
case 462:
{ yyval = yyvsp[0]; }
break;
case 464:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 465:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 467:
{ yyval = NULL; }
break;
case 469:
{ yyval = NULL; }
break;
case 470:
{ yyval = yyvsp[0]; }
break;
case 471:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 472:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 473:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 474:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 475:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 476:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 487:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 488:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 490:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 491:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 492:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 498:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 499:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 500:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 501:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 502:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 507:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 509:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 510:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 511:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 512:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 513:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 514:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 515:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 517:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 518:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 519:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 520:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 521:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 531:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 532:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 533:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 534:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 535:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 536:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 539:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 540:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 541:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 542:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 543:
{ yyval = yyvsp[-1]; }
break;
case 544:
{ yyval = 0; }
break;
case 548:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 549:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 550:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 551:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 552:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 555:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 556:
{ yyval = (NOD) NULL; }
break;
case 558:
{ yyval = (NOD) NULL; }
break;
case 559:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 561:
{ yyval = (NOD) NULL; }
break;
case 563:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 568:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 569:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 570:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 571:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 572:
{ yyval = yyvsp[0];}
break;
case 574:
{ yyval = yyvsp[0];}
break;
case 575:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 577:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 578:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 579:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 580:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 581:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 582:
{ yyval = 0; }
break;
case 583:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 584:
{ yyval = (NOD) NOD_SHARED; }
break;
case 585:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 586:
{ yyval = (NOD) 0; }
break;
case 587:
{ yyval = (NOD) NOD_READ; }
break;
case 588:
{ yyval = (NOD) NOD_WRITE; }
break;
case 590:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 591:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 592:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 595:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 597:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 598:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 599:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 600:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 606:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 607:
{ yyval = 0; }
break;
case 608:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 609:
{ yyval = 0; }
break;
case 610:
{ yyval = yyvsp[0]; }
break;
case 611:
{ yyval = 0; }
break;
case 612:
{ yyval = yyvsp[0]; }
break;
case 613:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 614:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 615:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 616:
{ yyval = 0; }
break;
case 617:
{ yyval = make_list (yyvsp[0]); }
break;
case 618:
{ yyval = 0; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 622:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 623:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_list (yyvsp[0]); }
break;
case 626:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 629:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 630:
{ yyval = yyvsp[-1]; }
break;
case 631:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 632:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 633:
{ yyval = make_list (yyvsp[-1]); }
break;
case 634:
{ yyval = NULL; }
break;
case 636:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 640:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 641:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 642:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 643:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 644:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 645:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 646:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 647:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 648:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 649:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 650:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 651:
{ yyval = yyvsp[-1]; }
break;
case 652:
{ yyval = yyvsp[0]; }
break;
case 653:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 654:
{ yyval = yyvsp[-1]; }
break;
case 655:
{ yyval = yyvsp[0]; }
break;
case 656:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 657:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 658:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 659:
{ yyval = 0; }
break;
case 660:
{ yyval = make_list (yyvsp[0]); }
break;
case 661:
{ yyval = 0; }
break;
case 663:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 672:
{ yyval = yyvsp[0]; }
break;
case 673:
{ yyval = 0; }
break;
case 674:
{ yyval = yyvsp[0]; }
break;
case 675:
{ yyval = 0; }
break;
case 676:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 677:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 678:
{ yyval = 0;}
break;
case 679:
{ yyval = yyvsp[0]; }
break;
case 680:
{ yyval = 0; }
break;
case 681:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 682:
{ yyval = 0; }
break;
case 683:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 684:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 685:
{ yyval = 0; }
break;
case 686:
{ yyval = 0; }
break;
case 688:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 693:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 694:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 695:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 699:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 704:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 705:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 709:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 710:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 716:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 717:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 718:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 723:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 724:
{ yyval = yyvsp[0]; }
break;
case 726:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 729:
{ yyval = NULL; }
break;
case 730:
{ yyval = make_list (yyvsp[-1]); }
break;
case 732:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = NULL; }
break;
case 735:
{ yyval = make_list (yyvsp[-1]); }
break;
case 737:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 741:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 745:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 747:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 758:
{ yyval = yyvsp[-1]; }
break;
case 759:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 761:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 763:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 764:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 765:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 766:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 768:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 769:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 770:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 771:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 772:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 773:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 774:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 775:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 779:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 780:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 787:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 788:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 789:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 790:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 791:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 792:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 793:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 794:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 795:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 796:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 797:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 798:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 799:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 800:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 801:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 802:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 804:
{ yyval = make_list (yyvsp[-1]); }
break;
case 805:
{ yyval = yyvsp[-1]; }
break;
case 806:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 807:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 817:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 818:
{ yyval = yyvsp[0]; }
break;
case 819:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 820:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 821:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 822:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 823:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 824:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 825:
{ yyval = yyvsp[-1]; }
break;
case 826:
{ yyval = yyvsp[-1]; }
break;
case 829:
{ yyval = yyvsp[0]; }
break;
case 830:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 831:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 832:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 833:
{ yyval = yyvsp[0]; }
break;
case 834:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 835:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 836:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 837:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 839:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 841:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 842:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 843:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 844:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 845:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 846:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 848:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 849:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 850:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 851:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 857:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 858:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 859:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 860:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 861:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 862:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 863:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 864:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 865:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 866:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 867:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 868:
{ yyval = yyvsp[0]; }
break;
case 869:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 871:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 872:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 873:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 874:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 875:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 877:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 878:
{ yyval = yyvsp[0];}
break;
case 883:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 884:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 885:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 886:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 887:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 888:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 889:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 890:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 891:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 892:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 893:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 894:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 895:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 896:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 897:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 898:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 899:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 900:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 901:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 904:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 905:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 908:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 909:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 910:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 911:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 912:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 913:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 914:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 915:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 919:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 920:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 921:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 922:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 923:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 924:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 925:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 926:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 929:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
