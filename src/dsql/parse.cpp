#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 *
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern TEXT * DLL_EXPORT ERR_string (TEXT *, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define RECREATE 408
#define REFERENCES 409
#define RESERVING 410
#define RETAIN 411
#define RETURNING_VALUES 412
#define RETURNS 413
#define REVOKE 414
#define RIGHT 415
#define RPAREN 416
#define ROLLBACK 417
#define SEGMENT 418
#define SELECT 419
#define SET 420
#define SHADOW 421
#define SHARED 422
#define SINGULAR 423
#define SIZE 424
#define SMALLINT 425
#define SNAPSHOT 426
#define SOME 427
#define SORT 428
#define SQLCODE 429
#define STABILITY 430
#define STARTING 431
#define STATISTICS 432
#define SUB_TYPE 433
#define SUSPEND 434
#define SUM 435
#define TABLE 436
#define THEN 437
#define TO 438
#define TRANSACTION 439
#define TRIGGER 440
#define UNCOMMITTED 441
#define UNION 442
#define UNIQUE 443
#define UPDATE 444
#define USER 445
#define VALUES 446
#define VARCHAR 447
#define VARIABLE 448
#define VARYING 449
#define VERSION 450
#define VIEW 451
#define WAIT 452
#define WHEN 453
#define WHERE 454
#define WHILE 455
#define WITH 456
#define WORK 457
#define WRITE 458
#define FLOAT 459
#define NUMBER 460
#define NUMERIC 461
#define SYMBOL 462
#define STRING 463
#define INTRODUCER 464
#define ACTION 465
#define ADMIN 466
#define CASCADE 467
#define FREE_IT 468
#define RESTRICT 469
#define ROLE 470
#define COLUMN 471
#define TYPE 472
#define EXTRACT 473
#define YEAR 474
#define MONTH 475
#define DAY 476
#define HOUR 477
#define MINUTE 478
#define SECOND 479
#define WEEKDAY 480
#define YEARDAY 481
#define TIME 482
#define TIMESTAMP 483
#define CURRENT_DATE 484
#define CURRENT_TIME 485
#define CURRENT_TIMESTAMP 486
#define CURRENT_USER 487
#define CURRENT_ROLE 488
#define KW_BREAK 489
#define SUBSTRING 490
#define KW_DESCRIPTOR 491
#define FIRST 492
#define SKIP 493
#define NUMBER64BIT 494
#define SCALEDINT 495
#define LIMIT 496
#define CONNECTION_ID 497
#define TRANSACTION_ID 498
#define LARGEINT 499
#define KW_INT64 500
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
    9,    9,    9,    9,   20,   20,   19,   19,   19,   30,
   30,   23,   31,   31,   31,   31,   31,   22,   22,   28,
   28,   24,   13,   13,   13,   13,   13,   13,   13,   34,
   25,   25,   25,   25,   35,   35,   35,   35,   21,   21,
   36,   36,   36,   26,   26,   41,   27,   27,   42,   42,
    6,   43,   43,   45,   50,   50,   50,   47,   47,   47,
   54,   54,   55,   55,   48,   48,   57,   57,   57,   57,
   57,   44,    5,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   12,   75,   75,   62,   62,   65,
   65,   65,   73,   84,   84,   84,   85,   85,   86,   86,
   87,   87,   91,   91,   72,   94,   94,   96,   96,   97,
   97,  100,  100,  101,  102,  102,  103,  104,   70,   74,
   71,   88,   88,  107,  108,  108,  110,  110,  111,  111,
  111,  111,  111,  109,  109,  112,  112,  113,  113,  113,
  113,  115,  115,  115,  115,  114,  114,  119,  119,  118,
   92,  120,  120,  121,  124,  125,  125,  126,  122,  123,
  123,  127,  127,  128,  128,  129,  129,  129,   90,   90,
   90,   67,   77,  130,  130,  130,  131,  131,  132,  132,
  133,  133,  133,  139,   80,   80,  135,  135,   98,   98,
   93,  143,  144,   56,  136,  136,   99,   99,   99,   99,
   99,   99,  137,  137,  151,  151,  152,  154,  154,  154,
  154,  154,  134,  153,  153,  157,  157,  157,  157,  159,
  160,  161,  156,  155,  155,  155,  155,  155,  162,  163,
  164,  164,  164,  164,   66,   76,  169,  165,  165,  166,
  166,  170,  170,  171,  167,  167,  172,  172,  173,  174,
  174,  168,  168,  168,  176,  176,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  179,  180,  181,  182,  182,  183,  189,  185,  185,
  185,  186,  186,  186,  187,  187,  187,  187,  184,  188,
  188,  177,  177,  194,  195,  195,  196,  196,  196,  196,
   11,  198,  198,  198,  199,  199,  199,  199,  199,  199,
   69,  201,  204,  204,  204,  205,  209,  214,  214,  215,
  215,  216,  216,  141,  203,   81,   83,  202,  202,   68,
  219,  219,  219,  220,  223,  223,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  221,  221,  222,    2,  226,  226,  226,  226,  226,
  226,  226,  234,  235,  232,  232,  236,  236,  236,  236,
  236,  236,  236,  227,  227,  237,  237,  237,  237,  237,
  237,  237,  231,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  239,  239,  241,
  241,  240,  238,  238,  238,  233,  233,  229,  230,  230,
  243,  243,  243,  243,  244,  244,  228,  245,  245,  246,
  246,    8,  247,  247,  247,  247,  247,  247,  247,  247,
  247,  247,  247,  247,   95,   95,  138,  138,  250,  250,
  253,  253,  255,  255,   51,   51,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  260,  260,  261,  261,  251,
  251,  251,  251,  262,  262,   59,   59,   59,   53,   53,
  257,  257,  257,  254,  254,  254,  266,  266,  266,  265,
  265,  264,  264,  264,  258,  258,  269,  267,  267,  267,
  268,  268,  259,  259,  259,  259,  270,  270,   16,   16,
   16,  272,  272,  272,    4,   14,  274,  274,  275,  275,
  276,  276,  271,  277,  277,  278,  278,  279,  279,  279,
  279,  280,  280,  281,  281,  282,  282,  284,  284,  284,
  285,  285,  285,  286,  286,  286,  283,  288,  288,  288,
  289,  289,  287,  287,  290,  292,  292,  291,  291,  273,
   15,  293,  293,  293,  294,  294,  297,  297,  298,  298,
   63,   63,   63,  295,  295,  299,  299,  296,  207,  207,
  208,  208,  302,  302,  303,  303,  303,  300,  306,  306,
  307,  307,  308,  308,  309,  309,  310,  310,  191,  191,
  312,  312,  217,  217,   29,  218,  218,  218,  218,  218,
  218,  218,  218,  313,  313,  313,  314,  314,  314,  206,
  206,  206,  206,  211,  211,  315,  315,  316,  316,  316,
  212,  212,  210,  210,  206,  206,  318,  318,  318,  213,
  213,  319,  320,  320,  320,  320,  320,  321,  321,  322,
  322,  323,  323,  324,  324,  324,  325,  325,   10,   10,
  326,  326,    7,    7,  327,  328,  329,   17,   17,  330,
  331,  332,  332,  178,  304,  304,    3,    3,  334,  334,
  334,  336,  336,   59,  335,  335,  337,  337,   32,   32,
   79,   78,   78,  192,  192,  192,  140,  333,  333,  105,
  105,  105,  105,  339,  339,  339,  339,  339,  339,  339,
  339,  339,  339,  339,  340,  340,  340,  340,  340,  340,
  340,  340,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  351,  351,
  341,  341,  342,  342,  342,  342,  343,  343,  347,  347,
  348,  348,  348,  348,  346,  349,  344,  344,  352,  352,
  350,  354,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,  150,  150,  150,  355,
  358,  358,  145,  145,  359,  359,  359,  359,  359,  357,
  357,  357,  357,  357,  353,  353,  353,  353,  353,  353,
  353,  353,  353,  353,  200,  146,  146,  147,  148,  148,
   49,   49,   18,   18,  225,  360,   52,  117,  256,  256,
   89,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  317,  317,
  361,  361,  361,  361,  361,  361,  361,  361,  301,  301,
  149,   46,  263,  116,  142,  338,  158,  193,  249,   61,
   58,  197,  106,   64,  305,   33,   39,  311,  248,   37,
   40,  190,   38,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
    8,    6,    7,    5,    1,    2,    1,    2,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    3,
    0,    1,    7,    8,    6,    7,    6,    7,    4,    3,
    1,    3,    3,    3,    2,    2,    2,    2,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    3,    1,    2,
    2,    2,    3,    8,    1,    1,    5,    0,    1,    3,
    1,    3,    2,    4,    1,    3,    2,    3,    4,    4,
    2,    9,    2,    3,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    0,    1,
    1,    6,    6,    1,    1,    0,    0,    1,    0,    4,
    0,    1,    1,    2,    8,    1,    0,    3,    0,    0,
    1,    1,    2,    1,    1,    1,    2,    6,    1,    1,
    3,    0,    1,    1,    0,    1,    1,    2,    3,    4,
    2,    2,    3,    0,    1,    1,    2,    1,    1,    1,
    4,    3,    3,    3,    3,    1,    1,    6,    3,    1,
    3,    1,    3,    2,    1,    0,    2,    3,    1,    0,
    1,    1,    2,    3,    4,    0,    1,    2,    0,    1,
    1,    5,    5,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    2,    0,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    6,    4,    7,    8,    6,    4,    2,    1,    3,
    0,    2,    4,    0,    1,    1,    3,    3,    6,    3,
    0,    1,    2,    4,    1,    3,    2,    2,    2,    1,
    4,    1,    3,    0,    1,    1,    1,    3,    3,    3,
    7,    1,    1,    3,    4,    9,    2,    1,    3,    1,
    1,    6,    3,    0,    0,    0,    0,    3,    0,    9,
    1,    1,    0,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
    5,    2,    0,    4,    2,    3,    3,    2,    2,    3,
    3,    2,    3,    6,    1,    2,    4,    3,    2,    2,
    2,    2,    3,    1,    3,    3,    3,    2,    2,    4,
    4,    5,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    0,    2,    2,    0,    1,    2,
    2,    2,    2,    2,    1,    3,    7,    1,    0,    1,
    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    3,    2,    2,    2,    1,    1,    1,    1,    4,    5,
    1,    3,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    1,    0,    3,    5,
    1,    1,    2,    3,    1,    2,    3,    0,    1,    1,
    1,    5,    5,    6,    3,    2,    1,    0,    2,    0,
    1,    0,    3,    1,    0,    1,    2,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    3,    3,
    1,    2,    3,    1,    2,    0,    2,    1,    1,    0,
    1,    1,    1,    3,    2,    3,    0,    1,    3,    4,
    3,    1,    3,    4,    3,    0,    1,    3,    3,    3,
    1,    1,    0,    3,    0,    2,    0,    9,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    2,    4,    2,    2,    4,    2,    2,
    1,    1,    0,    3,    0,    1,    3,    1,    1,    3,
    2,    0,    2,    0,    2,    0,    3,    5,    0,    2,
    0,    4,    1,    2,    1,    1,    0,    1,    3,    2,
    1,    1,    2,    1,    4,    2,    1,    3,    8,    5,
    1,    3,    1,    1,    4,    4,    4,    1,    1,    5,
    5,    1,    3,    3,    1,    1,    7,    7,    5,    3,
    0,    1,    1,    1,    2,    0,    1,    1,    1,    0,
    3,    1,    3,    1,    3,    3,    1,    1,    3,    1,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
    5,    6,    3,    4,    5,    6,    3,    4,    3,    4,
    3,    4,    4,    5,    4,    4,    3,    4,    3,    3,
    9,    9,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    1,    1,    1,    3,    1,    1,    1,    1,    1,    4,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    1,    1,    1,    1,    2,
    1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    6,    4,    6,    6,    6,    8,    4,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,  529,  530,  531,    0,  582,
  683,  684,  688,  689,  438,    0,    0,    0,    0,    0,
    0,  375,  537,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,    0,   93,    0,  845,    0,   19,
  843,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  452,    0,    0,
   35,   32,   34,    0,   33,    0,  897,    0,    0,    0,
    0,   30,   66,   64,    0,    0,    0,    0,    0,  105,
    0,    0,    0,    0,    0,  536,    0,    0,    0,    0,
    0,  642,    0,    0,    0,  899,  623,    0,    0,    2,
    0,    0,    0,    0,  422,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  423,  424,  425,  426,  427,    0,  403,
  890,    0,  894,    0,  382,  896,    0,  379,    0,  625,
  900,    0,  378,    0,  535,  841,    0,  144,  101,    0,
  886,  102,    0,  211,  717,    0,  893,  100,  139,    0,
   96,    0,  103,  847,    0,   97,    0,   98,  903,    0,
   99,  140,  104,  591,  592,    0,  846,  844,    0,  891,
   72,    0,    0,  889,  460,  453,    0,  459,  464,  454,
  455,  462,  456,  457,  458,  463,    0,   28,    0,   37,
  709,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  106,    0,  107,    0,    0,    0,    0,    0,    0,
  851,    0,  835,  634,  636,    0,  637,  639,    0,  655,
  879,  599,    0,  600,  640,    0,    0,    0,    0,    0,
    0,    0,  554,  543,    0,  546,  548,  549,  550,  551,
  557,  558,    0,  898,  624,    0,    0,  583,    0,  581,
    0,    0,    0,    0,  439,    0,    0,  346,    0,  214,
    0,  385,  376,  436,  437,    0,    0,    0,    0,    0,
    0,  394,    0,  351,  352,    0,  541,  539,  842,    0,
    0,    0,    0,    0,    0,    0,  147,  126,    0,   94,
    0,  115,  114,    0,    0,    0,    0,    0,    0,  882,
   73,    0,    0,    0,  685,  686,  461,    0,  881,  817,
  816,  815,    0,    0,  818,  819,    0,    0,  821,  326,
  327,  321,    0,  325,  813,  820,    0,  712,    0,    0,
   25,    0,    0,  901,    0,   69,   67,   65,   31,    0,
    0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
    0,    0,    0,  803,    0,    0,  805,    0,    0,    0,
  836,    0,    0,  807,  808,  809,  837,  838,    0,  839,
  840,    0,    0,    0,    0,    0,    0,  714,  800,  801,
  802,  806,  788,    0,  787,    0,  789,  784,  785,  786,
    0,    0,  602,    0,  696,    0,    0,  603,    0,    0,
  580,    0,  555,    0,  552,    0,  553,  578,    0,  573,
    0,    0,  547,    0,  718,  692,    0,    0,    0,  517,
    0,    0,    0,  587,    0,  584,    0,  179,    0,    0,
  123,  444,  166,  167,    0,  442,    0,    0,    0,    0,
  445,    0,  440,    0,    0,  389,  391,  390,    0,  392,
    0,  386,  212,    0,    0,  262,    0,    0,    0,    0,
  398,  399,    0,  429,    0,    0,    0,    0,    0,    0,
    0,  356,  355,  448,    0,    0,  143,    0,    0,  152,
    0,  151,    0,  158,  141,    0,  156,  159,  160,  148,
    0,    0,  483,  521,  488,    0,  522,    0,    0,  489,
    0,    0,    0,  512,  525,  482,  507,  484,  485,  486,
  487,  467,  346,  465,  466,  468,    0,    0,  477,  478,
  479,  480,  481,    0,    0,    0,    0,    0,  118,    0,
    0,  195,    0,    0,  344,    0,  214,    0,    0,   81,
    0,    0,  704,    0,    0,    0,    0,    0,    0,    0,
    0,  720,  724,  725,  726,  727,  728,  729,  730,  731,
  732,  733,  822,  823,  824,  814,    0,    0,    0,  711,
   26,    0,    0,   42,   70,    0,    0,   24,    0,    0,
  680,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  902,  298,    0,    0,    0,    0,    0,
    0,    0,  635,    0,    0,  638,  657,    0,    0,    0,
    0,    0,  895,  606,  533,    0,  849,  532,    0,  556,
    0,  564,  560,  559,    0,    0,    0,  575,  563,    0,
    0,  690,  691,    0,    0,    0,    0,    0,    0,    0,
  594,    0,    0,  124,    0,    0,    0,    0,    0,    0,
  346,  388,    0,  346,  347,  393,  475,    0,  264,    0,
  258,  260,  344,  887,  234,    0,    0,  346,    0,    0,
  203,  344,    0,    0,    0,    0,  239,  233,  236,  237,
  238,  397,  434,  433,  396,  395,    0,    0,    0,    0,
    0,    0,  354,    0,  346,    0,  149,  153,    0,  157,
    0,    0,  508,  509,  526,    0,  523,    0,    0,  515,
  513,  514,    0,    0,    0,    0,  476,    0,    0,    0,
    0,  516,  344,    0,  194,    0,  197,  199,  200,    0,
    0,    0,    0,    0,  214,   76,    0,    0,   75,  883,
  496,  497,    0,    0,    0,  723,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  323,  329,  330,  328,
  713,    0,    0,    0,    0,    0,    0,    0,    0,   51,
   59,   61,    0,    0,   68,    0,    0,    0,    0,  344,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  871,  872,  873,  874,  875,  876,  877,  878,    0,    0,
    0,  798,  799,  870,    0,    0,  885,  794,    0,    0,
    0,    0,    0,    0,  804,  716,  715,    0,    0,    0,
    0,    0,  611,  612,    0,    0,  604,  607,  534,  850,
  565,  574,  569,  568,    0,  579,  719,  693,  694,  209,
  589,  590,  588,    0,  175,  169,  176,    0,  172,    0,
    0,  171,    0,  182,  163,  162,  848,  165,  164,  446,
    0,    0,    0,  387,  263,    0,  205,  346,  207,    0,
  347,  202,  208,    0,    0,  240,    0,  400,  401,  346,
  344,  347,    0,    0,    0,  372,    0,  190,  191,  150,
    0,    0,    0,    0,    0,    0,  524,    0,    0,  346,
  347,    0,  471,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  192,    0,    0,    0,    0,  333,
    0,   80,    0,    0,    0,    0,   85,   82,    0,    0,
    0,  888,  687,    0,    0,  734,    0,    0,    0,  760,
  759,    0,    0,    0,  767,  777,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  722,    0,   63,   55,
   56,   62,   57,   58,    0,    0,   20,    0,    0,    0,
   40,    0,    0,    0,  698,  681,    0,  697,    0,  193,
    0,    0,    0,    0,    0,    0,  214,    0,  852,    0,
    0,  864,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  869,  810,  658,    0,    0,    0,    0,    0,
    0,  626,    0,    0,    0,    0,    0,  571,  572,  576,
    0,    0,    0,    0,    0,    0,  183,    0,    0,  383,
  217,  218,  219,  220,  221,  222,    0,    0,    0,  267,
    0,  215,    0,    0,  241,    0,  430,  431,  402,    0,
    0,    0,    0,    0,    0,  346,  450,  347,  884,  161,
    0,    0,  491,    0,  490,  527,    0,  519,    0,    0,
    0,  469,    0,  499,    0,    0,  501,  504,  506,    0,
    0,  113,    0,  198,  346,    0,    0,  345,    0,   95,
    0,  111,    0,   91,    0,    0,    0,    0,   84,    0,
  775,  776,    0,    0,    0,    0,  825,  827,  828,  829,
  826,    0,    0,  778,    0,    0,    0,    0,    0,    0,
    0,  768,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   60,   52,
   53,   21,  702,  703,    0,  700,  707,  708,  705,    0,
  679,    0,    0,    0,  858,  857,    0,    0,  854,  853,
    0,  862,  861,  860,  859,  856,  855,    0,    0,    0,
    0,  614,    0,  621,    0,  619,  615,    0,  632,  628,
  630,    0,    0,    0,    0,    0,  177,  173,    0,    0,
  188,  184,    0,  347,    0,    0,  347,  268,    0,    0,
    0,  225,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  447,  493,    0,  494,    0,  128,    0,    0,
    0,  132,  134,  135,  136,  472,  474,  470,  503,  347,
    0,    0,    0,    0,  331,    0,  334,  346,   86,    0,
    0,   88,    0,    0,    0,    0,    0,    0,  780,    0,
  779,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,  682,  347,  213,  863,  865,  866,    0,  867,    0,
    0,  617,    0,    0,    0,  646,  649,    0,    0,  598,
    0,  168,  185,  347,  138,    0,  272,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,  275,  270,    0,    0,  280,  281,  282,  283,
  286,  288,  257,    0,  201,  226,    0,    0,    0,  231,
  227,  230,    0,  347,  370,  371,  367,  366,  369,  368,
    0,  492,  520,  137,  125,  133,  255,  120,  347,    0,
  348,  335,    0,    0,   89,   90,   77,    0,  746,  754,
    0,  830,  832,  833,  834,  831,  747,  755,  750,  758,
    0,    0,  748,  756,  749,  757,  743,  751,  744,  752,
  745,  753,  699,  256,    0,    0,  620,    0,    0,    0,
  663,  665,    0,  660,    0,  178,  384,    0,    0,    0,
    0,  290,    0,    0,    0,  289,    0,  291,  278,  284,
    0,  287,  273,    0,  276,    0,  312,  277,  204,  228,
  232,    0,    0,  243,  374,  350,    0,    0,    0,   74,
   92,    0,  868,    0,    0,  650,  647,  664,    0,  269,
  279,    0,    0,    0,    0,  285,    0,    0,  305,  306,
  320,    0,    0,    0,    0,  315,  274,  313,    0,    0,
  242,    0,    0,    0,    0,    0,  340,  341,    0,    0,
    0,    0,    0,  671,    0,    0,    0,    0,    0,    0,
  293,    0,    0,    0,  297,    0,  319,  892,  318,  317,
    0,    0,  229,    0,    0,    0,  247,    0,  246,    0,
    0,    0,    0,    0,  112,    0,  782,  673,  662,    0,
    0,  674,    0,  670,    0,    0,    0,    0,    0,    0,
    0,    0,  308,  307,  314,  316,    0,    0,  251,  250,
  249,  343,    0,    0,    0,    0,  669,    0,  676,  300,
    0,    0,  292,    0,    0,    0,  309,  254,  252,  253,
    0,  336,    0,    0,    0,    0,  310,  294,    0,    0,
  781,    0,  675,  303,  295,    0,  678,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1398,   26,   27, 1399,
   29,   30,   31,   32, 1400,   34, 1401,  583,   98,  370,
  828, 1057,   99,  613,  829,  100,  375,  618,  127,  101,
  102,  230,  890,  115,  830,  831,  172,  200,  103,  832,
  104,  377,   74,  211,  341,  416,  578,  995,  359,  788,
  552,  460,  767,  579,  580,  581,  997,  212, 1233,   66,
  162,   67,  206, 1644, 1180,  191,  196,  198,  201,  188,
  179,  182,  193,  203,  110,  242,  244,  367,  231,  717,
  485,  590,  934,  334,  570,  983, 1172,  518,  667,  960,
  470,  471,  500,  329,  553,  971, 1310,  686, 1120, 1311,
 1312, 1313, 1314, 1315,  591,  189,  180,  325,  525,  326,
  327,  526,  527,  528,  529, 1150,  928,  473,  474,  918,
  916,  475,  922,  917, 1111, 1277,  923,  924, 1116,  336,
  776,  777,  778,  779,  719,  941, 1290,  554,  721,  418,
  781,  878,  494, 1248, 1121,  419,  420,  421,  435,  422,
 1291, 1292,  503, 1421, 1551,  727,  728,  715,  729,  730,
  731, 1552, 1553, 1620,  307,  498, 1128, 1402,  168,  495,
  496, 1129, 1130, 1403, 1404, 1405, 1506, 1406, 1407, 1408,
 1409, 1410, 1411, 1412, 1569, 1608, 1538, 1610,  423,  645,
 1265,  424, 1003, 1507, 1545, 1546, 1579,  362,  363,  425,
  988, 1178, 1325,  989,  990,  120,  263,  436, 1518,  345,
 1107, 1275, 1380, 1555, 1556, 1557, 1558, 1105,  316,  514,
  745, 1147,  515,  743,  194,   52,  311,  173,  134,  294,
  159,  301,  165,  705,  702,  302,  312,  735,  313,  511,
  952,  160,  295,  482,  516, 1148,   88,  170,  215,  555,
  556,  707,  972,  708,  973,  974,  559,  560,  561,  562,
  563,  965,  792,  564,  565,  566,  760,  567,  462,  757,
   36,   37,   38,   54,  175,  318,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  673,  449,  905, 1110,  450,
  451,  678,   39,  133,  290,   40,  463,  464,  691,  660,
  264,  437,  438,  439,  664,  891,  892,  893,  894, 1099,
  426, 1266,  121,  122, 1375, 1376,  427,  260, 1564, 1485,
 1565, 1566, 1567, 1604, 1645, 1067,   41,   42,  346,   43,
   44,  458,  459,  837, 1065, 1235, 1239,  185,  592,  593,
  594,  595,  596,  597,  598,  599,  600,  601,  602, 1202,
 1013, 1015, 1203,  643,  428,  429,  430,  876,  366,  208,
  869,
};
static short yysindex[] = {                                   4246,
  960, -210, 2748,   98,  357,  106, 1551, -107, 3377,  393,
  -19,  613, 3048, -210, 1080,  406, -162,    0,  638,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -68,    0,
    0,    0,    0,    0,    0, 4951,  289,  385,  392, -162,
  525,    0,    0,  412,  926,  556,  289,  585,  392,  628,
 -162,  525,    0,  661,  715,    0,  567,    0,  880,    0,
    0,  906,  891,    0, -162,  902,  289, 1099,  891,  585,
  385,  392,  628, -162,  525,  661,  715,    0,  392,  972,
    0,    0,    0, 1389,    0, 1389,    0, 1047, 1058,  141,
 1403,    0,    0,    0,  556, -162,  556,  392, -162,    0,
 1072, 1093, 1115,   50, 2660,    0,   66,  102, 1443,  746,
  999,    0,  585, 1221, 1666,    0,    0, 1119, 1103,    0,
 1304, -124, 1265,  -37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  387,    0,
    0,  926,    0,  -31,    0,    0, 1545,    0, 1337,    0,
    0,  -23,    0, 1166,    0,    0, 1141,    0,    0,  739,
    0,    0, 1346,    0,    0,  926,    0,    0,    0, 1545,
    0,  409,    0,    0, 1303,    0, 1335,    0,    0, 1389,
    0,    0,    0,    0,    0, 1295,    0,    0, 1177,    0,
    0, 1324, 1205,    0,    0,    0, 1177,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  951,    0,  556,    0,
    0,    0,  300, 1262,  773,  715,  671, 1330, 1389, 1363,
 1545,    0, 1303,    0, 1348,  300, 1283,  773, 1308, 1315,
    0, 5666,    0,    0,    0, 5666,    0,    0, 1260,    0,
    0,    0, 4500,    0,    0, 1266,  385, 1362, 1273,  930,
 -162, 1292,    0,    0, 1666,    0,    0,    0,    0,    0,
    0,    0, 1272,    0,    0,  442, 1317,    0, 1291,    0,
  857, 1380, 1149,  -37,    0, 1451,  339,    0,  556,    0,
  387,    0,    0,    0,    0,  556, 1329, -122, 1276, -115,
 1699,    0, 5263,    0,    0,  750,    0,    0,    0, 1689,
 1689,  926, 1386,  926, 1827,  739,    0,    0, 7458,    0,
 1329,    0,    0, 1475, -136, 1728, -162, 1508,  385,    0,
    0, 1747,  157, 2838,    0,    0,    0, 1310,    0,    0,
    0,    0, 1325, 1327,    0,    0, 1236, 1391,    0,    0,
    0,    0, 1745,    0,    0,    0,  712,    0, -162, 1353,
    0,  392, 1339,    0,   26,    0,    0,    0,    0, -162,
  575, -162, 1329, 1756,    0, 1478,  392, 1753,  300, 1399,
 1763, 1771, 1772,    0, 1773, 1774,    0, 1775, 1778, 1798,
    0,    0, 1807,    0,    0,    0,    0,    0, 1808,    0,
    0, 5666, 5666, 5045, 1377, 1809, 1420,    0,    0,    0,
    0,    0,    0, 1765,    0, 1812,    0,    0,    0,    0,
 1638, 1319,    0, 2141,    0, 1539, 1815,    0, -127,   48,
    0,  489,    0, -163,    0, -163,    0,    0, 1819,    0,
   67, 1435,    0,    0,    0,    0, 1820,   73, 1810,    0,
 1595, 1595, 1832,    0, 1842,    0, 1500,    0,   84, 1541,
    0,    0,    0,    0,  926,    0, 1689, 1689, 1689, 1689,
    0, 1847,    0, 1614, 1626,    0,    0,    0, 1604,    0,
 7458,    0,    0, 7458, 1394,    0, 1545, 1643, 1449, 7182,
    0,    0,  370,    0, 1449,  456, 1337,    0, 1514, 1481,
 1444,    0,    0,    0,   -1, 1531,    0, 1260,  628,    0,
  926,    0, 1657,    0,    0, 1827,    0,    0,    0,    0,
  117, 1487,    0,    0,    0, 1491,    0, 1537, 1903,    0,
 1600, 1905,  345,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1864,  107,    0,    0,
    0,    0,    0,   25, 1916, 1917, 1905, 1695,    0,  926,
  926,    0, -122,  -23,    0, 1579,    0, 1553, 1920,    0,
 7303,  143,    0, 1577, 1590, 1934, 3400, 1937, 2992, 7184,
   -6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1474, 1391,  556,    0,
    0, 1469, 1542,    0,    0, 1513,  773,    0, 1663, 1944,
    0, 1663, 1730, -122, 1469, 1679, 1693,  392,  837, 5091,
  592,  585, 5666,  942, 1074, 1244, 1354, 5666,  675,  675,
 1080, 1780, 1951,    0,    0, 5189, 1548, 5666, 5666, 5666,
 5666, 5666,    0, 5666,   93,    0,    0, 1260,   45, 1561,
 5091, 1554,    0,    0,    0, -183,    0,    0,   22,    0,
 1567,    0,    0,    0, -162,  919, -162,    0,    0,  556,
 1272,    0,    0, 5091, 1548,  567,  567,  442,  110,  556,
    0,  926,  926,    0, -128, 1260, 1260, 1558,  628, 1149,
    0,    0, 1980,    0,    0,    0,    0, 1748,    0,  556,
    0,    0,    0,    0,    0, 1750, 1986,    0, 1726, 1743,
    0,    0, 1684, 1697, 1389, 1760,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  628,  556, 7375, 1653,
 1659, 1660,    0,  628,    0, 1178,    0,    0, 1633,    0,
   12, 1639,    0,    0,    0,  628,    0, 1903,  108,    0,
    0,    0, 1758,  108, 1641,  108,    0, 2023,  628,  628,
  628,    0,    0, 1707,    0, 1497,    0,    0,    0,  750,
 1649, -162, 1556,   62,    0,    0, 2030, 1797,    0,    0,
    0,    0,  157, 1616, 1317,    0, 1317, 7124,   55, 5666,
 5666, 3498, 2033,  749, 3642, 5666, 3740,  650, 3884, 3982,
 5333, 4036, 4265, 4350, 3400, 3400,    0,    0,    0,    0,
    0, 1339,  392,  525, 1339,  661,  715,   32, 2040,    0,
    0,    0, 1469, 1700,    0, -109, 1719, 5091, 1719,    0,
 1568, 2044, 2040, 1469,  469, 1769, 5666, 5666, 1831, 5666,
 2050, 5666, 2059, 1799, 5666, 5666, 5666, 5666, 5666, 5666,
    0,    0,    0,    0,    0,    0,    0,    0, 1783, 1071,
  746,    0,    0,    0, 2141, 1593,    0,    0, 1825,  675,
  675, 1192, 1192,  216,    0,    0,    0, 2066,   45, 2068,
 2072,  912,    0,    0, 3400, 1795,    0,    0,    0,    0,
    0,    0,    0,    0,  281,    0,    0,    0,    0,    0,
    0,    0,    0, 2083,    0,    0,    0, 1605,    0, 1689,
 1863,    0, -128,    0,    0,    0,    0,    0,    0,    0,
 2091, 3400, 1322,    0,    0, 1836,    0,    0,    0, 1322,
    0,    0,    0, 1389, 1389,    0, 2098,    0,    0,    0,
    0,    0, -108,  -18,  428,    0, 1868,    0,    0,    0,
 1680,   98, 1606, 1720, 1748, 2106,    0, 1260, 1611,    0,
    0,  684,    0, 2093, 1680,  865,  628, 2109, 2111, 2113,
 1836, 1689, 1541, -122,    0, 1531, 1080, 1704, 1713,    0,
   52,    0,  628, 1770, 1857, 7303,    0,    0,  628, 1677,
 1860,    0,    0, 2136, 2139,    0, 1263, 2141, 2150,    0,
    0, 2141, 2153, 1258,    0,    0, 1841, 2159, 2141, 2161,
 1352, 2162, 2141, 2163, 5666, 5666, 2033, 5666, 5431, 2164,
 2141, 2165, 2167, 2141, 2168, 5666, 2141, 2170, 2141, 2172,
 2173, 2141, 2175, 2183, 2141, 2187,    0, 1967,    0,    0,
    0,    0,    0,    0, 1902, 1469,    0, 1469,   32, 2040,
    0,  154,  154,  144,    0,    0, 1622,    0, 1836,    0,
 2044, 2040, 2188,  469, 2092, 2545,    0, 2723,    0, 2734,
 5666,    0, 2816, 2846, 2934, 3140, 3211, 3229, 5666,  628,
 5666, 5666,    0,    0,    0,  912, 2190, 5091, 1103,   45,
 1844,    0, 1846, 1853, 1892, 1973, 1922,    0,    0,    0,
 1835,  926, 1869, 1260, 1872, 1260,    0, 3400,  359,    0,
    0,    0,    0,    0,    0,    0, 1817, 1996, 1836,    0,
 5666,    0, 1983, 1867,    0, 3400,    0,    0,    0, 1890,
 1893, 1895, 1896, 1898, 1900,    0,    0,    0,    0,    0,
 2247,   98,    0, 1558,    0,    0,  108,    0, 1322, 1911,
  108,    0,  108,    0, 1748, 2251,    0,    0,    0, 1996,
 1260,    0, 1541,    0,    0,  746, 2016,    0,  -67,    0,
 2083,    0, 2256,    0, 2257,  926,  -77, 2261,    0,  926,
    0,    0, 5666, 1878, 1878, 1080,    0,    0,    0,    0,
    0, 2263, 1632,    0, 1878, 1878, 5666, 1878, 1878, 1646,
 2141,    0, 1615, 5666, 2141, 1878, 1878, 1878, 1878, 2141,
 1878, 1878, 1878, 1878, 1878, 1878, 1919,    0,    0,    0,
    0,    0,    0,    0, 1871,    0,    0,    0,    0, 5091,
    0, 1996,  469, 2188,    0,    0, 7458, 2265,    0,    0,
 3338,    0,    0,    0,    0,    0,    0, 3355,   41, 1234,
 2141,    0, 2141,    0, 1664,    0,    0,  912,    0,    0,
    0,   45, 1845, 3400, 1915, 1689,    0,    0,  926, 1178,
    0,    0,  419,    0,  556, 3103,    0,    0, 2141, 1595,
 1983,    0, 1065, -162,  572, 1882, 1974, 1884, 2013, 1977,
 2020, 1836,    0,    0, 2291,    0, 2293,    0, 1982, 1595,
 1911,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1178, 1868, 4500, 1950,    0, 1649,    0,    0,    0, 1966,
 -116,    0, 1748, 1975, 2141, 2298, 2305,  746,    0, 1488,
    0, 2307, 2310, 2141, 2312, 2313, 5666, 5666, 2141, 2314,
 2315, 2316, 2317, 2322, 2323, 2324, 2326, 2333, 2338,    0,
  154,    0,    0,    0,    0,    0,    0,  628,    0, 1561,
 5091,    0, 1002, 2101, 2339,    0,    0,   -6,  -62,    0,
 1260,    0,    0,    0,    0, 7458,    0,  289, -168, 2325,
 1317, 2347, 2048, 5666, 2332, 2352, 2335, 2336, 2337, 2061,
 2348,    0,    0,    0, 4805, 2349,    0,    0,    0,    0,
    0,    0,    0, 2365,    0,    0, 2062, 2064, -162,    0,
    0,    0, 1389,    0,    0,    0,    0,    0,    0,    0,
 1996,    0,    0,    0,    0,    0,    0,    0,    0, 2095,
    0,    0, 5666,  926,    0,    0,    0,  926,    0,    0,
 5666,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2141, 2141,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2371, 1795,    0, 3400, 1548, 1845,
    0,    0, 2045,    0, 2379,    0,    0, 2367, 2369,  392,
 5666,    0, 2088, 3400, 2203,    0, 3400,    0,    0,    0,
  112,    0,    0,  -72,    0,  -89,    0,    0,    0,    0,
    0, 1389, 2046,    0,    0,    0,   86, 1561, 2141,    0,
    0, 1234,    0, 1922,   -6,    0,    0,    0,  812,    0,
    0, 5582, 2227,  112,  601,    0,  603, 1060,    0,    0,
    0,  289, 1962,   98,   88,    0,    0,    0, 2046,  334,
    0, 2049, 2054,   86, 2388,  912,    0,    0, 1795, 2393,
 1561, 1915, -162,    0, 2398, 2402, 1165, 4585, 2035, 2405,
    0,  150, 2005, 2145,    0,  112,    0,    0,    0,    0,
 4268,  -72,    0,  401,  401, 2155,    0, 2015,    0,  912,
 2421,   86, 2119, 1922,    0, 1795,    0,    0,    0,  812,
 2424,    0,  385,    0, 1780, 1671,   47, 2407, 2180, 2171,
 4268, 4268,    0,    0,    0,    0, 2002,  618,    0,    0,
    0,    0,  912,   86, 1915, 1922,    0,  385,    0,    0,
  112, 2431,    0, 1616, 4268, 2176,    0,    0,    0,    0,
 1137,    0, 1915, 2435, 2446, 1672,    0,    0, 4268, 3400,
    0,  385,    0,    0,    0,   -6,    0,
};
static short yyrindex[] = {                                      0,
    0,  155,  697,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  696, 3117,    0,    0,    0, 2488,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  361,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  844,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2107,
    0,    0,    0,   75,    0,   75,    0,    0,    0,    0,
 2108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5902, 4820,
 3346,    0,    0,    0,  924,    0,    0,    0,  451,    0,
    0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -25,    0,    0,    0,
    0,  738,    0,  995,    0,    0,    0,    0,    0, 1287,
    0,    0, 7479,    0,    0,    0,    0,    0,    0,  -25,
    0,  529,    0,    0, 2453,    0,    0,    0,    0, 2230,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1042,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1086,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  974,    0,
  -25,    0, 2453,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  633,    0,    0, 1164,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1168,    0, 2219,    0,    0,    0,    0,
 1180,    0,    0,    0,    0,    0, 2235,  536, 5499,    0,
 1201,    0,    0,    0,    0,  343,    0,    0,    0, 2052,
 2052,    0,    0,    0, 1209, 1862,    0,    0,    0,    0,
 2235,    0,    0, 1066,    0,    0,    0,    0,    0,    0,
    0, 7220, 2115,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1253,    0,    0,    0,    0,    0,
    0,    0, 2235,    0,    0,    0,    0, 1311,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1581,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1733,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,    0,    0, 2193,    0,   56,    0,
    0,    0,    0,  431,    0,  431,    0,    0,  769,    0,
  826, 1075,    0, 2645,    0,    0,    0, 1042,    0,    0,
  802,  802,  363,    0,    0,    0,  313,    0, 3290,   63,
    0,    0,    0,    0,    0,    0, 2052, 2052, 2052, 2052,
    0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2237,    0,    0,    0,
    0,    0, 2219,    0,    0, 1034,    0,  320, 2037,    0,
    0,    0,    0,    0,    0,  259,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1314,    0,    0,    0,    0,
  532,  127,    0,    0,    0,  745,    0,    0, 1012,    0,
    0, 1051,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2039, 2436,    0,    0,
    0,    0,    0, 1289,  799,    0, 1051,    0,    0,    0,
    0,    0,  536,  933,    0,    0,    0,    0, 2103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  589,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  203,    0,
    0,  203,    0,  536,    0,    0,    0,    0, 5817,    0,
 5817,    0,    0, 5817, 5817, 5817,    0,    0, 2300, 2411,
 4866,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2056,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  583,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1024, 1024,    0,    0,    0,
    0,    0,    0,    0, 3316,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0, 2479,    0,    0, 1894, 1710,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  609,  700,    0,    0,    0, 2041,    0,    0,    0,    0,
    0, 1328,    0,    0,    0,    0,    0, 1012,    0,    0,
    0,    0,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  266,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7413,    0,    0,    0,   37,    0,    0,
    0,    0, 2210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1316, 1320,    0,
    0,    0,    0,    0,    0,    0, 1326,    0, 1326,    0,
    0, 1344, 1345,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5817,    0,    0,    0, 1145,    0,    0,    0, 1837, 2610,
 2759, 1989, 2196,    0,    0,    0,    0,    0,    0, 2081,
 1108,  853,    0,    0,    0, 1887,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  612,    0,    0,    0,    0,    0, 2052,
 2067,    0, 3382,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2253,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1347,    0,    0,    0,
    0,    0,    0,    0, 1210,    0,    0,    0,    0,    0,
    0,    0,    0, 1018,    0,    0,    0,    0,    0,    0,
 2253, 2052, 1349,  536,    0, 2258, 3117, 1384,   61,    0,
    0,    0,    0, 7413,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2789,    0,    0,
    0, 5994,    0,    0,    0,    0,    0,    0, 6096,    0,
 6145,    0, 6177,    0,    0,    0,    0,    0,    0,    0,
 6226,    0,    0, 6367,    0,    0, 6401,    0, 6431,    0,
    0, 6451,    0,    0, 6531,    0,    0, 2897,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1316, 1416,
    0, 2096,  210,    0,    0,    0,    0,    0, 2253,    0,
 1457, 1476, 1502,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2182, 1200,    0, 3876,    0,
 2185,    0, 2189, 2192,    0,    0,  729,    0,    0,    0,
 3206,    0,    0,    0, 2071,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2268,    0,
    0,    0,  314,    0,    0,    0,    0,    0,    0,  765,
  768,  772,  830,  867,  898,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  842,
    0,    0,    0,    0, 2506,    0,    0,    0,    0,    0,
    0,    0, 1509,    0,    0, 4820,    0,    0,    0,    0,
 1528,    0,    0,    0,    0,    0,   82,    0,    0,    0,
    0,    0,    0,    0,    0, 4866,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6580,    0, 6612,    0, 6675,    0,    0,    0,    0, 6766,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1532,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1538,    0,   42,    0,    0,    0,    0, 1382,    0,    0,
    0,    0,    0,    0,  291, 2052,    0,    0,    0, 3008,
    0,    0,    0,    0,    0,    0,    0,    0, 2500, 1132,
 2102,    0, 2219,    0,    0,    0,    0,    0,    0,    0,
    0, 2253,    0,    0,    0,    0,    0,    0,    0, 1534,
 1005,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  274,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0, 6786,    0,    0, 5817,    0,    0,
    0,    0,    0, 6870,    0,    0,    0,    0, 6947,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  210,    0,    0,    0,    0,    0,    0,    0,    0,  338,
    0,    0, 2182,  146,  819,    0,    0,   97, 2502,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  227,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6979, 7042,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  327,    0,    0,    0,    0,
    0,    0, 2504,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2222, 1152,    0,    0,    0,    0,   74, 2500,    0,
    0,    0,    0,   58, 4254,    0,    0,    0, 2502,    0,
    0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2558,    0,
    0, 2667, 2769,    0,  164,  408,    0,    0,   89,    0,
  338, 2505, 1226,    0,    0, 2507,    0,    0, 2490,  189,
    0, 2246,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2182,
 1334,    0,    0,   95,    0,  327,    0,    0,    0, 2502,
    0,    0,    0,    0, 2508,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  432,    0,  104,   58,    0,    0,    0,    0,
    0, 2494,    0,    0,    0, 6961,    0,    0,    0,    0,
 2182,    0, 2505, 2513,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  584,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2555,    0,    0, 2560,
    0,    0,    0,    0,   10,    0, 2561,    1,  233,  -40,
 -552, 1504,  295, -272, -466, 2553, 2319,    0,  -38,    0,
 2331,  -88,  -42,    0,  349, -826,  -28,  -44,  -27, -184,
 2334, 1952,    0,    0,    0, 1082,    0,    0,  -46, 1575,
 -526,  -21, -769, 1997, 1793, -269, 1585, 2503, -274,    0,
  -51,    0,  916,  -45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -611,  -53, 1594,
 -265, -149, -843,    0,    0,    0,    0, -296,  -99, -995,
 1598, -301,  -41,    0, -463,    0,    0, -435, -790,    0,
 1280,    0,    0, 2299, -543,  -32,    0,    0,    0,    0,
 2270,    0, 2074, 2303, -221, 1623, -641,    0,    0,    0,
 -648,    0,    0,    0,    0,    0,    0, 1674,    0, 2360,
 1981, 1620, 2301, 2306,    0,    0,    0, -459, 1904,  -55,
  417, -657,    0,    0, -211, -724, -691, -690, -214, -761,
    0, 1342, -994,    0, 1064, 1323,    0, 2110,    0,    0,
    0, 1054, 1068, 1033,  -49,  706, -893, -143,    0,    0,
 1918,    0, 1501, -142,    0,    0,    0, -208,    0,    0,
    0,    0,    0,    0,    0,    0, -813,    0, -314,    0,
-1102, -275,  992, 1131,    0, 1053,    0,    0, 2281,  -97,
    0,    0,    0,    0,-1004, -588, -817, 1333,    0, -436,
-1257, -625, -488,    0,-1309, 1089,  776, -741, 2073, 1866,
 1654, 1340,    0,    0,   -2,    0,    0,    0,    0,    0,
 2344,    0,    0,    0,    0, 2358, 2142,    0,    0,    0,
    0,    0, 2354,    0,    0,    0,    0,  -17,    0,    0,
    0, -300, 1908, -299, 1503, -397,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2099,    0,    0, 1910,
    0,    0,    0, 2662,    0,    0,    0,    0, 2403,    0,
    0,    0,    0, 2240,    0, 2239,    0,    0,    0, 2017,
    0,    0,    0,    0,    0,  -83,    0, 2006,    0,-1135,
 1129,    0, 2029, -571, 2031,    0, -653, 1806,    0,    0,
 -125, 1331,    0, 2575,    0, 1218,-1062,    0, 1338,    0,
 1101,    0, 1136,    0, 1055,    0,    0,    0, 2252,    0,
    0,    0,    0, 2087, 1874, -979,    0,  569,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2940,
 1194, 1678,    0,    0,    0,    0, -213, 2065, 2361,    0,
    0,
};
#define YYTABLESIZE 7979
static short yytable[] = {                                     129,
  184,   71,  164,  285,   70,  186,  167,  232,  178,   33,
  461,  169,  361,  365,  183,  360,  190,  254,  257,  255,
  258,  682,  195,  524,  519,  216,  687,  910,  557,  558,
  491,  706,  489,  197,  709,  220,  718,  202,  192,  221,
  720,  225,  668,  796,  919,  799,  227,  219,  288,  238,
  376,  240,  871, 1091,  789,  962,  224,  129,  849,  226,
  332,  222,  441,  376,  769,  241,  223,  239,  584,  617,
  243,  481,  842,  654,  456, 1056,  500,   83,  914,  500,
   83, 1369,  622, 1236,  889,  622, 1631, 1170,  645,  695,
  266,  229,  666,  236,  652, 1006,  651, 1133,  652,  605,
  622,  994,  417,  661,  415,  252,  431,  301, 1139,  963,
  677,  338,  909,  434,  626,  303,  681,  443,  710,  332,
  595,  441,   87,  693, 1370, 1554,  510, 1160,  253,  364,
  695, 1582,  654,  695,  886,  287,  662,  651, 1293,  330,
  331,  256,   69,  361,  365,  648,  360,  645,  695, 1132,
  381,  886,  968,  652,  538,  651,  751,  457,  843,  432,
  465,   69,  661,  337,  253,  499,  510,  510,  694,  415,
  510, 1126,  505,  368, 1327, 1242,  443,  129, 1126,  595,
  696,  697,  698,  699,  236,  510,  648,   69,  615,  648,
 1541,  383, 1326, 1576,  371, 1155, 1331,  766,   69,  557,
  558,   69,  701,  466,  648,  386,  253,  371, 1122,  498,
 1377, 1062,  571,  538,  671, 1122,  253,  510, 1524, 1547,
  291,  441,  337,  896,  524,  304,  710,  455,  920, 1229,
 1140, 1231,  448,  314, 1490, 1096,  129,  726,  259, 1445,
 1542, 1123, 1124,  490, 1590,  112,   53,  299, 1123, 1124,
  493, 1543,  184,  107,  506,  815,  752,  509,  373, 1092,
  364,  701,  639,  640,  642,  119, 1066,  710,  498,  292,
  710, 1047, 1048,  189,  500,  520,  251,  522, 1491,  950,
 1059, 1481, 1623, 1142, 1383,  710,  672,  763,  572, 1198,
  661, 1071, 1073,  576,   15,   89, 1293,  621,  574,  126,
  740, 1594,  921,  305, 1303,  444, 1482,  113, 1094,  500,
  899,  315,  597,  223, 1641,  500,  815,  373,  500,  131,
  441, 1442, 1199, 1200,  119, 1438,  176,  177, 1063,  614,
  611,  661,  189,  500,  663, 1141,  716,  741, 1626,  181,
   71,  619,  449,  622,  614,  500,  181,  249,  627,  661,
  371,  987,  692,  695,  223,  846, 1544,  223, 1323, 1368,
  586,  969,  585, 1504,  359, 1483, 1060,  645, 1308,  441,
  248,  597,  223,  132, 1446,  443,  605, 1072,  654, 1181,
  816, 1473,  293,  765,  510,  676, 1561,  259, 1119,  885,
 1332,   87, 1581,  819,  365, 1318,  818, 1126, 1176, 1284,
  510,  449,  654,  510,  510,  654,  510,  338, 1431,  250,
  695,  510,  461, 1609,  510,  651, 1229, 1377,  746,  586,
  645,  585, 1237,  359,  443, 1143,   75,  510,  695, 1570,
  566,  339,  376,  510, 1122,  931,  510,  651,  933,  798,
 1385,  816,  742, 1413,  722, 1414, 1268,  712,  500,   83,
  625,  338,  939,  622,  652,  129,  993,  129,  710, 1384,
  301,  595,  446, 1278,  648, 1606,  338, 1123, 1124,  789,
  654,  927,  908,  768,  748,  339, 1437,  648,  930,  957,
  434,  616,  441,  854,  651,  645,  648, 1055,  870,  566,
  339,  652,  337,  651,  625,  337,  875,  747,  879,  880,
  881,  882,  883,  500,  875,  510,  166,  251,  454,  625,
  820,  434, 1306,  181,  996,  654,  332,  184, 1001, 1474,
 1451, 1244,  373,  774,  775,  251,  344,  510,   71,  654,
  645,  498,  500,  648,  434,  510,  652,  443,  651,  510,
 1487,  665,  648,  695,  645,  661,  510,  126,  500,  582,
  652,  695,  651,  821,  181,  457,  129,   68,  888,  661,
  337,  251,  465, 1447,  510,  538,  900,  251,  184,  510,
  701,  181,  498,  454, 1283,  498,   68,  498,  235,   71,
 1514,  500,  791,  342,  500,  614,  582,  648,  653,  582,
  498,  235, 1295,  223,  510, 1516,  925,  926,  510,  853,
  299,  648,   68,  927,  790,  337,  449, 1338,  357,  661,
  710,  596, 1424,   68,  119, 1453,   68,  337, 1373,  337,
  815,  761,  189, 1114,  342,  455,  487,  342,  359,  653,
 1382,  661,  561,  851,  368, 1584,  448, 1049,  906,  488,
 1052, 1573,  342, 1574,  296,  915,  915,  653, 1454, 1455,
 1007, 1008, 1012,  597,  493, 1019, 1021, 1023,  645, 1031,
 1034, 1037, 1039, 1042, 1045,  105,  654,  357, 1362,  654,
  596,  946, 1131,   72,   73, 1560,  332,  929,  661,  586,
  815,  585,  949,  951, 1137, 1171, 1108,  500,  434,  723,
  762,  561,  235,  297,  500,  538,  130, 1075, 1076,  358,
 1078,  586, 1080,  585, 1159, 1083, 1084, 1085, 1086, 1087,
 1088, 1004,  500, 1005,  235,  948,  651,  886, 1125,  365,
 1572,  652,  235,  645,  996, 1125,  365, 1161,  652, 1144,
 1378,  123,  661,  106,  654,  369,  338,  353, 1109,  338,
  449,  956,  500,  991,  511,  816,  500,  978,  979,  980,
  161,  633,  610,  966,  538,  609,  235,  422,  358, 1307,
  339,  126,  359,  339,  364, 1317, 1145,  365,  567,  652,
  724,  361,  625,  566,  333,  633, 1162, 1585, 1617,  625,
 1050, 1053,  625, 1364,  511,  511,  625,  652,  511,  498,
   71,  886,  128, 1632,  625, 1051,  353,  822,  505, 1054,
  365,  210, 1197,  511,  338,  816,  298, 1247,  498,  498,
  625,  498,  725,  235, 1593,  116,  498, 1646,  644,  498,
 1618, 1526,  174,  364,  299,  577,  365,  567,  339,  360,
  361,  204,  498,  815,  625,  511,  566,  124,  498,  505,
  566,  130,  505,  540,  125,  210,  163,  625, 1593,  338,
  213,  261,  609,  166, 1415,  235,  566,  505,  300,  644,
  210,  338,  815,  338,  815,  625,  363, 1619,  900,  205,
  625,  694,  357,  339, 1435, 1210, 1211,  644, 1213, 1215,
 1302, 1593,  566, 1264,  577,  339, 1220,  339,  360,  505,
 1134, 1135,  625,  609,  669,  850,  609,  362, 1562, 1593,
  130,   68,  540,  454,  625,  342,  625,  653, 1161, 1322,
  498,  609,  342,  825,  272,  342, 1201,  653, 1639,  342,
  653, 1025,  733,  545,  734,  363, 1488,  342,  184,  653,
  374, 1251,  498, 1476, 1525,  368,  235, 1182, 1026, 1258,
  498, 1260, 1261,  342, 1125,  365,  557,  558, 1263,  498,
 1535,  498,  596, 1537,  647, 1166,  362, 1165,  816,   71,
  648,  109, 1151,  358, 1234, 1234, 1238,  342, 1625,  498,
 1640, 1184,   91, 1267,  498,  561,  653, 1188,  235, 1381,
  342, 1289,  545, 1027, 1287,  653,  171,  816,  570,  816,
  358,  116,  116,   15,  542,  357,  353, 1374,  342,  109,
 1643,  353,  511,  498,  131,  261,  357,  353,  512,   93,
  561,  528, 1028,  253, 1280,  108, 1282,  181,  511,  513,
  620,  511,  511,  593,  511,  342, 1320,  726,  364,  511,
  653,  365,  511,  435,  109,  361,  568,  342,  561,  342,
  570,  654,  561, 1335,  653,  511,  187,  652,  109,  262,
  518,  511,  528,  542,  511,  528,  505, 1344,  561,   71,
   71,  473, 1443,  131, 1349,  915,  210,  593, 1259,  652,
  528, 1321,  505, 1597,  562,  505,  505,  435,  505,   94,
 1029, 1559,  593,  505,  561,  324,  505,   68,  623,   95,
  434,  518,  435,  360,  518,  320,  261,  358, 1363,  505,
  654, 1016,  528, 1576,  210,  505, 1656,  608,  505,  518,
  473,  567,  651,  649,   96,  650,  652,  652, 1575,  346,
  210,  130,  199,  511, 1596,  652,  365, 1017, 1452,  936,
  363,  210,  321,  562,  322,  353, 1642,  644,  943, 1330,
  847,  518,  210, 1334,  324,  511,  567,  465,  608,   71,
  644,  248, 1305,  511, 1651, 1481, 1264,  511,  323,  644,
  457,  362,  364,  544,  511,  365,  608,  380,  577,  361,
  652,  609,  210,  434,  567,  210,   97,  505,  567,  381,
 1482,  609,  511,  324,  609,  811, 1539,  511,  811,  981,
  210,  353,  248,  609,  567,  248,  633, 1461, 1462,  505,
  377,  261,  353,  577, 1374,  468,  644,  505,  154,  500,
  248,  505,  511,  444,  469,  644,  511,  373,  505, 1539,
  567, 1263,  544,  887,  322, 1540,  380,  360,  209,  184,
  455,  577,  915, 1101,  374,  577,  505,  811,  381, 1483,
  609,  505, 1456, 1386, 1495,  855,  348, 1102,  907,  609,
  500,  577,   41,  500,   45, 1423, 1069,  887, 1540,  377,
  644, 1613, 1505, 1234,  363,   46,  505,  154,  500,  528,
  505, 1103,   47,  126,  644,  651,  649,  577,  650,  457,
  652, 1486,  346,  322,  131,  528,  145, 1515,  502,  528,
  342,  528, 1539, 1519,  609,  362,  528,   48,  347,  528,
 1614, 1522,  357,  349,  651,  649,  609,  650,  518,  652,
   49,   41,  528,  155,  445,   39, 1539, 1264,  528,   22,
  253,  528,  903, 1101,  518,  706, 1104,  495,  518,  502,
  518, 1540,  502,  261, 1513,  518, 1489, 1102,  518,  207,
  904, 1533,  593,   45,   47,  145,  451,  502,  121,  455,
  647,  518,  210, 1264,  465, 1540,  648,  518,   71,  657,
  518, 1103,   49,  214,  593, 1475,  357, 1138,  495,   49,
  446,  495,  155,  228,   39,  465,  658,  857,   22,  502,
 1512,  610, 1263,  349,  706, 1478,  495,  447,  176,  177,
  528, 1090,  710,  651,  649,   50,  650, 1520,  652,   51,
 1493, 1521,   45,   47, 1228,  451, 1230,  121,  465,  350,
  351,  352,  528,  176,  177,   23, 1104,  562, 1605,  710,
  528,  217,  610, 1549,  528,  610,  608,  477,  229,  518,
  233,  528,  353,  354,  711,  357,  608,  710, 1615,  608,
  610,  234,  349, 1417,  355,  356,  237, 1532,  608,  528,
  465,  518,  562,  253,  528,  457,   46,  245, 1101,  518,
  653,  651,  649,  518,  650, 1418,  652,  500, 1636, 1637,
  518,  647, 1102, 1419,   23,   48,  246,  648,  478,  528,
  562,  465,  259,  528,  562,  457,  457,  500,  518,  500,
 1577,  118, 1648,  518,  500,  608, 1103,  500,  247,  129,
  562,   43, 1601,  261,  608,  465, 1655, 1420,  122,  457,
  500, 1563,  479,  647,  817,   46,  500,  608,  518,  648,
 1650,  611,  518,  457, 1193,  455,  562,  110,  117,  117,
  480,   44,  357,  210,   48,  611,  129,  985,  283, 1602,
  984,   71,  647,  611, 1580, 1563,  502,  859,  648,  608,
  253, 1104, 1603,  348,  659,  455,  455, 1629,  267,  611,
   43,  608,  502,  672,  284,  145,  502,  122,  502,  958,
  959,  117,  118,  502,  129,  119,  502,  286,  812,  455,
  886,  812, 1563,  289,  306,  495,  110,  145,  500,  502,
   44,  317,  210,  455,  308,  502,  992,  309,  502,  785,
  672,  911,  912,  319,  495,  495,  129,  495, 1070,  328,
  500,  984,  495,  672,  611,  495,  145,  348,  500,  335,
  882,  886,  886,  886,  886,  886,  898,  886,  495,  500,
  812,  647,  339, 1093,  495,  145, 1092,  648,  340,  886,
  886,  886,  886,  310,  145, 1113, 1153,  500, 1112, 1152,
  145, 1158,  500,  337, 1157,  340,  651,  649,  344,  650,
  343,  652, 1241, 1207,  372, 1240,  385,  502,  145,  340,
  380,  886, 1341,  886,  349, 1340, 1196,  340,  656,  651,
  649,  500,  650,  382,  652,  387,  348,  651,  649,  502,
  650,  389,  652,  340,  350,  351,  352,  502,  390,  647,
  610,  502,  401,  440, 1372,  648,  495, 1371,  502,  465,
  610, 1630, 1654,  610, 1371, 1576,  350,  351,  352,  251,
  176,  177,  610,  442,  443,  633,  502,  452,  495,  355,
  356,  502,  783,  454,  467,   15,  495,  476,  484,  353,
  354,  497,  507,  349,  407,  408,  504,  495,  340,  517,
  465,  355,  356,  465,  410,  411,  502,  848,  521,  852,
  502,  569,  856,  858,  860,  495,  401,  573,  465,  610,
  495,  575,  603,  783,  783,  783,  783,  783,  610,  783,
  350,  351,  352,  348,  176,  177,  577,  604,  608,  605,
  612,  783,  783,  783,  783,  624,  617,  822,  625,  495,
  374,  628,  629,  353,  354,  404,  405,  406,  407,  408,
  630,  631,  632,  633,  634,  355,  356,  635,  410,  411,
  872,  651,  649,  610,  650,  783,  652,  861,  862,  863,
  864,  865,  866,  867,  868,  610,  793,  636,  644, 1082,
  651,  649,  886,  650,  886,  652,  637,  638,  646,  350,
  351,  352,  886,  176,  177,  654,   76,  655,  661,  659,
  886,  146,  675,   77,  679,  680,  886,   78,   79,  886,
  684,  823,  353,  354,  685,  688,   80,  793,  793,  793,
  793,  793,  690,  793,  355,  356,  645,  689,   81,  468,
  700,  701,  886,  216,  647,  793,  793,  793,  793,  886,
  648,  886,  886,  703,  704,  886,  713, 1347,  824,  886,
  714,  737,  886,  825,  886,  739,  886,  647,  738,  826,
  146,  886,  886,  648,  886,  647, 1348,  645,  744,  793,
  374,  648,  401,  749,  216,  753,  755,  216,  827,  754,
  886,  886,  756,  886,  759,  645,  350,  351,  352,  758,
  176,  177,  216,   82,  764,  770,  771,  886,  773,  886,
  886,  886,  782,  785,  886,  784,  793,  886,  886,  353,
  354,   83,  794,  795,  407,  408,  797,  886,  834,  833,
  836,  355,  356,  838,  410,  411,   84,  465,  796,  465,
   85,  873,  886,  840,  783,  886,  783,  465, 1020,  844,
 1024,   86, 1032, 1035,  783, 1040, 1043, 1046,  268,  877,
  465,  886,  783,  845,  895,  663,  901,  927,  783,  932,
   87,  783,  886,  937,  765,  938,  940,  716,  944,  796,
  796,  796,  796,  796,  886,  796,  886,  947,  475,  953,
  189,  945,  886,  269,  783,  954,  955,  796,  796,  796,
  796,  783,  961,  783,  783,  654,  964,  783,  970,  647,
  975,  783,  977,  982,  783,  648,  783,  987,  783,  999,
 1000,  270, 1014,  783,  783,  271,  783, 1002,  647,  475,
  618,  796,  475, 1058,  648, 1061, 1064, 1056,  465, 1074,
 1079,  272,  783,  783, 1077,  783,  654,  475,  793,  189,
  793,  224, 1081, 1089,  647,  477, 1095, 1098,  793,  783,
  465,  783,  783,  783,  654, 1100,  783,  273,  465,  783,
  783,  618,  793, 1106,  618,  793,  609,  523, 1115,  783,
 1118, 1146, 1245,  651,  649, 1127,  650, 1136,  652,  618,
  146, 1149,  224, 1154,  783,  224, 1156,  783,  793, 1167,
 1163, 1168,  465, 1169, 1179,  793,  478,  793,  793, 1177,
  224,  793,  146,  783,  993,  793, 1186, 1189,  793, 1190,
  793,  216,  793,  216,  783,  468, 1191,  793,  793, 1192,
  793,  216,  651,  649,  469,  650,  783,  652,  783, 1194,
  479,  146, 1195, 1204,  783,  797,  793,  793, 1205,  793,
 1206, 1208, 1209, 1216, 1217,  645, 1218, 1219,  480, 1221,
  146, 1222, 1223,  793, 1224,  793,  793,  793,  645,  146,
  793,  710, 1225,  793,  793,  146, 1226,  645,  815, 1227,
 1262, 1243, 1269,  793, 1270, 1272,  797,  797,  797,  797,
  797, 1271,  797,  146,  651,  649, 1273,  650,  793,  652,
  796,  793,  796, 1274,  797,  797,  797,  797, 1276, 1279,
  796, 1536,  710, 1281, 1285,  710, 1286,  793,  651,  649,
  499,  650,  216,  652,  645, 1294, 1296,  796,  793, 1297,
  710, 1298, 1299,  645, 1300, 1571, 1301, 1304,  797, 1309,
  793, 1319,  793, 1324,  216, 1328, 1196, 1329,  793,  791,
  796, 1333,  216, 1339, 1360, 1365,  402,  796, 1361,  796,
  796, 1379, 1426,  796, 1428, 1429,  475,  796,  475,  189,
  796, 1430,  796,  475,  796, 1425,  475, 1427,  645,  796,
  796, 1432,  796, 1433, 1434, 1441,  216, 1444, 1449,  475,
  791,  189,  791,  791,  791, 1450, 1448, 1457,  796,  796,
 1458,  796, 1459, 1460, 1463, 1464, 1465, 1466,  791,  791,
  791,  791, 1467, 1468, 1469,  796, 1470,  796,  796,  796,
  189,  647,  796, 1471,  654,  796,  796,  648, 1472,  235,
 1479,  224, 1480, 1492,  654,  796, 1494,  654,  106,  189,
 1496, 1497,  791, 1498, 1499, 1500,  654,  189,  189,  618,
  796, 1501,  618,  796,  189, 1509, 1502, 1508, 1511,  618,
  790, 1523,  618, 1528, 1510, 1517,  618,  475, 1529,  796,
  647,  618,  189, 1578,  618, 1530,  648, 1531, 1534, 1550,
  796, 1592, 1586, 1595,  189,  500,  189, 1588, 1599,  475,
  618, 1611,  796,  654,  796, 1600, 1607,  475, 1371, 1612,
  796,  790,  654,  790,  790,  790, 1584,  797, 1585,  797,
  189, 1622, 1624, 1628,  618, 1633, 1638,  797,  618,  790,
  790,  790,  790, 1634, 1576, 1635,  500,  618, 1652,  500,
  235,  475,  647, 1649,  797,  189, 1653,    1,  648,  593,
   27,   29,  196,  710,  500,  618,  346,  654,  261,  710,
  259,  710,  235,  790,  498,  500,  647,  797,  432,  710,
  235,  142,  648,  601,  797,   79,  797,  797,  206,  498,
  797,  373,  618,  266,  797,  633,  186,  797,  631,  797,
  187,  797,  627,  498,  618,  629,  797,  797,  265,  797,
  347,  667,  618,  666,  235,  661,  500,  668,  304,  500,
  311,  622,  302,  677,   25,  797,  797,  248,  797,   28,
   35,  791, 1232,  791,  500,  114,  388,  379,  835,  378,
 1187,  791,  797,  783,  797,  797,  797,  998, 1185,  797,
 1173,  218,  797,  797, 1183, 1246,  651,  649,  791,  650,
 1436,  652,  797,  472,  486,  530, 1117, 1164,  248,  750,
  710,  248,  384, 1174,  841,  710, 1589,  797,  501,  792,
  797,  791, 1583,  502,  732, 1422,  248, 1621,  791, 1587,
  791,  791,  710,  942,  791, 1647,  797,  935,  791, 1288,
  710,  791, 1416,  791, 1616,  791, 1548,  797,  607, 1175,
  791,  791, 1591,  791,  886,  986,  780,  483,  736,  797,
  792,  797,  792,  792,  792, 1440,  510,  797,  492,  791,
  791, 1439,  791, 1316,  710,  772,  244,  967,  792,  792,
  792,  792,  790,  976,  790,  116,  791,  453,  791,  791,
  791,  670,  790,  791,  674,  886,  791,  791,  886,  897,
  898,  902,  898,  913, 1097,  265,  791, 1527, 1598,  790,
 1627, 1477,  792,  886, 1212,  886, 1657,  244,  839,  683,
  244,  791, 1068,  500,  791,  500, 1484,  606,  884,    0,
  500,    0,  790,  500,    0,  244,    0,    0,    0,  790,
  791,  790,  790,    0,    0,  790,  500,    0,    0,  790,
    0,  791,  790,    0,  790,    0,  790,    0,    0,    0,
    0,  790,  790,  791,  790,  791,    0,    0,  795,    0,
    0,  791,    0, 1249,  651,  649,    0,  650,  245,  652,
  790,  790,    0,  790, 1250,  651,  649,    0,  650,    0,
  652,    0,    0,  500,    0,  500,    0,  790,  769,  790,
  790,  790,    0,  500,  790,    0,    0,  790,  790,  795,
    0,  795,  795,  795,    0,    0,  500,  790,    0,  245,
    0,    0,  245,    0,  500,    0,    0,  795,  795,  795,
  795,    0,  790,    0,  647,  790,    0,  245,    0,  769,
  648,    0,  769,    0,    0,  248,  500,  248,    0,    0,
    0,  790,    0,    0,  500,  248,    0,  769,    0,    0,
    0,  795,  790,    0,    0,    0, 1252,  651,  649,    0,
  650,    0,  652,    0,  790,    0,  790,    0,    0,    0,
    0,  792,  790,  792,    0,    0,    0,  589,  500,    0,
  412,  792,  413,    0,  500,    0, 1253,  651,  649,    0,
  650,    0,  652,    0,    0,  415,  721,    0,  792,    0,
  253,    0,    0,    0,    0,    0,  500,    0,  886,  886,
    0,    0,    0,    0,  500,    0,    0,    0,    0,   90,
    0,  792,    0,    0,  886,    0,    0,    0,  792,    0,
  792,  792,    0,    0,  792,    0,  248,  721,  792,    0,
  721,  792,    0,  792,  244,  792,  244,  886,  500,  886,
  792,  792,    0,  792,  244,  721,    0,    0,  248,    0,
    0,   91,    0,  886,    0,    0,  248,    0,    0,  792,
  792,    0,  792,   92, 1254,  651,  649,    0,  650,    0,
  652,    0,    0,    0,    0,  886,  792,    0,  792,  792,
  792,    0,    0,  792,    0,    0,  792,  792,   93,    0,
  248,    0,  647,    0,    0,    0,  792,  189,  648,    0,
    0,    0,    0,  647,    0,    0,    0,    0,    0,  648,
  795,  792,  795,    0,  792,    0,    0,    0,    0,    0,
  795,  589,    0,    0,  412,    0,  413,    0,    0,    0,
  792,    0,   55,    0,    0,  244,  245,  795,  245,  415,
  769,  792,    0,   56,  253,    0,  245,    0,    0,    0,
   57,    0,    0,  792,    0,  792,  189,  244,   94,    0,
  795,  792,    0,   58,    0,  244,    0,  795,   95,  795,
  795,    0,    0,  795,    0,    0,    0,  795,    0,    0,
  795,    0,  795,    0,  795,  647,    0,    0,    0,  795,
  795,  648,  795,   96,  391,    0,    0,  769,    0,  244,
  769,    0,    0,  392,    0,    0,    0,  769,  795,  795,
  769,  795,    0,    0,  769,  647,    0,  393,    0,  769,
  585,  648,  769,  348,  394,  795,    0,  795,  795,  795,
    0,    0,  795,    0,    0,  795,  795,  245,  769,    0,
   59,    0,  586,    0,    0,  795,  643,    0,  643,  643,
    0,  643,    0,    0,  395,    0,    0,    0,   60,  245,
  795,    0,  769,  795,  643,  769,  769,  245,    0,  643,
 1255,  651,  649,   61,  650,  769,  652,   62,    0,  795,
   63,    0,  396,  397,    0,    0,    0,    0,   64,    0,
  795,    0,    0,  769,  398,  174,    0,    0,  399,    0,
    0,  245,  795,  647,  795,  721,  587,   65,  721,  648,
  795,    0,    0,    0,    0,  721,    0,    0,  721,    0,
  769,    0,  721,    0,    0,    0,    0,  721,    0,    0,
  721,    0,  769,    0,  769,    0,  174,    0,    0,  174,
    0, 1256,  651,  649,    0,  650,  721,  652,  391,    0,
  588,    0,    0,    0,  174,  189,    0,  392,    0, 1257,
  651,  649,  400,  650,    0,  652,    0,    0,    0,    0,
  721,  393,  401,  721,  721,    0,  189,  348,  394,  170,
    0,    0,    0,  721,    0,    0,  350,  351,  352,  402,
  176,  177,    0,    0,    0,    0,  586,   90,  189,    0,
  403,  721,    0,    0,  189,  180,    0,    0,  395,  353,
  354,  404,  405,  406,  407,  408,    0,  409,    0,    0,
    0,  355,  356,    0,  410,  411,    0,  189,  721,    0,
    0,    0,    0,    0,    0,    0,  396,  397,  170,   91,
  721,    0,  721,    0,    0,    0,  189,    0,  398,    0,
    0,   92,  399,    0,  189,  189,    0,    0,    0,    0,
  587,  189,    0, 1286,  180,  111,  643,    0, 1366,  651,
  649,  181,  650,  643,  652,  641,   93,  641,  641,  189,
  641,    0,  643,    0,    0, 1367,  651,  649,    0,  650,
    0,  652,    0,  641,    6,    0,  643,    0,  641,    0,
  641, 1387,  643,  643,  588, 1388, 1389,    0, 1390,  647,
  643, 1391,    0,    0,    0,  648,  400,  189,    0,    0,
    0,    0,    0,    0,    0, 1392,  401,    0,  189,  589,
  181, 1393,  412,  643,  413,    0,    0,    0,    0,    0,
  350,  351,  352,  402,  176,  177,   94,  415,    0,    0,
    0,    0,  253,  174,  403,    0,   95,    0,    0,  643,
    0,  643,  643,  353,  354,  404,  405,  406,  407,  408,
    0,  409,    0,  643,  174,  355,  356,  643,  410,  411,
  647,   96,    0,    0,    0,    0,  648,    0,    0,    0,
    0, 1394,    0,    0,    0,    0,  174,    0,  647,   97,
    0,    0,  174,    0,  648,    0,    0,    0,    0,    0,
    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  174, 1395,  414,    0,    0,
  412,    0,  413,    0,    0,    0,   17,  170,    0,    0,
    0,  643,    0,    0,  174,  415,    0, 1396,    0,    0,
  253,  643,    0,  174,  454,    0,    0,    0,  170,  174,
    0,    0,    0,  180,    0,  643,  643,  643,  643,  643,
  643,    0,    0,    0,    0,    0,    0,  174,    0,  643,
  170, 1397,    0,    0,  180,    0,  170,    0,  643,  643,
  643,  643,  643,  643,  643,  641,  643,    0,    0,    0,
  643,  643,  641,  643,  643,    0,  180,  647,    0,  170,
    0,  641,  180,  648,    0,  174,    0,    0,    0,    0,
    0,    0,    0,    0,  647,  641,   90,    0,  170,  181,
  648,  641,  641,    0,    0,  180,    0,  170,    0,  641,
    0,    0,    0,  170,    0,    0,    0,    0,    0,    0,
  181,    0,    0,    0,  180,    0,  391,    0,    0,    0,
    0,  170,  641,  180,    0,  392,    0,    0,   91,  180,
    0,  414,  181,    0,  412,    0,  413,    0,  181,  393,
   92,    0,    0,    0,    0,  348,  394,  180,  641,  415,
  641,  641,    0,    0,  253,    0,    0,    0,    0,  170,
    0,  181,  641,    0,  586,   93,  641,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  395,    0,    0,    0,
  181,    0,    0,    0,    0,  180,    0,    0,    0,  181,
    0,    0,    0,    0,    0,  181,    0,    0,    0,    0,
    0,    0,    0,    0,  396,  397,    0, 1009,    0,    0,
 1010,    0,    0,  181,  391,    0,  398,    0,    0,    0,
  399,    0,    0,  392,    0,    0,    0,    0,  587,  414,
  641,    0,  412,    0,  413,   94,    0,  393,    0,    0,
  641,    0,    0,  348,  394,   95,    0,  415,    0,    0,
    0,  181,  253,    0,  641,  641,  641,  641,  641,  641,
    0,    0,    0,    0,    0,    0,    0,    0,  641,    0,
   96,    0,  588,    0,  395,    0,    0,  641,  641,  641,
  641,  641,  641,  641,  400,  641,    0,    0,   97,  641,
  641,    0,  641,  641,  401,    0,    0,    0,    0,    0,
    0,    0,  396,  397,    0,    0,    0,    0,  350,  351,
  352,  402,  176,  177,  398,    0,    0,    0,  399,    0,
    0,    0,  403,    0,    0,  616,    0,    0,    0,    0,
    0,  353,  354,  404,  405,  406,  407,  408,    0,  409,
    0,    0,    0,  355,  356,    0,  410,  411,    0,    0,
    0, 1018,    0,    0, 1010,    0,    0,    0,  391,    0,
    0,    0,    0,    0,    0,    0,  616,  392,    0,  616,
    0,    0,    0,  414, 1011,    0,  412,    0,  413,    0,
    0,  393,  400,    0,  616,    0,    0,  348,  394,    0,
    0,  415,  401,    0,    0,    0,  253,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  350,  351,  352,  402,
  176,  177,    0,    0,    0,    0,    0,    0,  395,    0,
  403,    0,    0,    0,    0,    0,    0,    0,    0,  353,
  354,  404,  405,  406,  407,  408,    0,  409,    0,    0,
    0,  355,  356,    0,  410,  411,  396,  397,    0, 1022,
    0,    0, 1010,    0,    0,    0,  391,    0,  398,    0,
    0,    0,  399,    0,    0,  392,    0,    0,    0,    0,
    0,  414,    0,    0,  412,    0,  413,    0,    0,  393,
    0,    0,    0,    0,    0,  348,  394,    0,    0,  415,
    0,    0,    0,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  395,    0, 1011,    0,
    0,    0,    0,    0,    0,  414,  400,    0,  412,    0,
  413,    0,    0,    0,    0,    0,  401,    0,    0,    0,
    0,    0,    0,  415,  396,  397,    0,    0,  253,    0,
  350,  351,  352,  402,  176,  177,  398,    0,    0,    0,
  399,    0,    0,    0,  403,    0,    0,    0,    0,    0,
    0,    0,    0,  353,  354,  404,  405,  406,  407,  408,
    0,  409,    0, 1336, 1337,  355,  356,    0,  410,  411,
    0,    0,    0, 1030, 1342, 1343, 1010, 1345, 1346,    0,
  391,    0,    0,    0,    0, 1350, 1351, 1352, 1353,  392,
 1354, 1355, 1356, 1357, 1358, 1359, 1011,    0,    0,    0,
    0,    0,    0,  393,  400,    0,    0,    0,    0,  348,
  394,    0,    0,    0,  401,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  616,    0,    0,  616,  350,  351,
  352,  402,  176,  177,  616,    0,    0,  616,    0,    0,
  395,  616,  403,    0,    0,    0,  616,    0,    0,  616,
    0,  353,  354,  404,  405,  406,  407,  408,    0,  409,
    0,    0,    0,  355,  356,  616,  410,  411,  396,  397,
    0, 1033,    0,    0, 1010,    0,    0,    0,  391,    0,
  398,    0,    0,  613,  399,    0,    0,  392,    0,  616,
    0,    0,    0,  616,    0,    0,    0,    0,    0,    0,
    0,  393,  616,    0,    0,    0,    0,  348,  394,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  616,    0,    0,    0,  613, 1038,    0,  613, 1010,    0,
    0,    0,  391,    0,  414,    0,    0,  412,  395,  413,
 1011,  392,  613,    0,    0,    0,    0,  616,  400,    0,
    0,    0,  415,    0,    0,  393,    0,  253,  401,  616,
    0,  348,  394,    0,    0,    0,  396,  397,    0,    0,
    0,    0,  350,  351,  352,  402,  176,  177,  398,    0,
    0,    0,  399,    0,    0,    0,  403,    0,    0,    0,
    0,    0,  395,    0,    0,  353,  354,  404,  405,  406,
  407,  408,    0,  409,    0,    0,    0,  355,  356,    0,
  410,  411,    0,    0,    0,    0,    0,    0,    0,  414,
  396,  397,  412,    0,  413,    0,    0,    0,    0,    0,
    0,    0,  398,    0,    0,    0,  399,  415, 1011,    0,
    0,    0,  253,    0,    0,    0,  400,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  401,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  350,  351,  352,  402,  176,  177,    0,    0,    0,    0,
    0,    0,    0,    0,  403,    0,    0,    0,    0,    0,
    0,    0, 1011,  353,  354,  404,  405,  406,  407,  408,
  400,  409,    0,    0,    0,  355,  356,    0,  410,  411,
  401,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  350,  351,  352,  402,  176,  177,
    0,    0,    0,    0,    0,    0,    1,    0,  403,    0,
    0,    0,    0,    0,    0,    0,    0,  353,  354,  404,
  405,  406,  407,  408, 1041,  409,    0, 1010,    2,  355,
  356,  391,  410,  411,    0,    0,    3,    0, 1286,  414,
  392,  433,  412,    4,  413,    5,    0,    6,    0,    0,
    0,    0,    7,    0,  393,    0,    0,  415,    0,    8,
  348,  394,  253,    0,    0,    0,    0,    0,    0,    6,
    0,    0,  613,    9,    0,  613,    0,    0,    0,    0,
 1388, 1389,  613, 1390,   10,  613, 1391,    0,    0,  613,
    0,  395,    0,    0,  613,    0,    0,  613,    0,    0,
 1392,    0,    0,    0,    0,    0, 1393,    0,    0, 1044,
    0,    0, 1010,  613,    0,    0,  391,    0,    0,  396,
  397,    0,    0,    0,  414,  392,    0,  412,    0,  413,
    0,  398,    0,    0,    0,  399,    0,  613,    0,  393,
    0,  613,  415,    0,    0,  348,  394,  253,    0,    0,
  613,   11,    0,   12,    0,    0,    0,    0,    0,   13,
    0,    0,   14,    0,   15,   16, 1394,    0,  613,    0,
    0,    0,    0,    0,    0,    0,  395,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,    0,    0,   17,
    0, 1011,    0,    0,    0,  613,    0,    0,    0,  400,
    0, 1395,    0,    0,  396,  397,    0,  613,    0,  401,
    0,   17,    0,    0,    0,    0,  398,    0,    0,    0,
  399,    0, 1396,  350,  351,  352,  402,  176,  177,  454,
    0,    0,    0,    0,    0,    0,    0,  403,    0,    0,
    0,    0,    0,    0,    0,    0,  353,  354,  404,  405,
  406,  407,  408,    0,  409,    0, 1397,    0,  355,  356,
    0,  410,  411,    0,    0,    0,  391,    0,    0,    0,
    0,    0,    0,    0,    0,  392, 1011,    0,    0,    0,
    0,    0,    0,    0,  400,    0,    0,    0,    0,  393,
    0,    0,    0,    0,  401,  348,  394,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  350,  351,
  352,  402,  176,  177,    0,    0,    0,    0,    0,    0,
    0,    0,  403,    0,    0,    0,  395,    0,    0,    0,
    0,  353,  354,  404,  405,  406,  407,  408,    0,  409,
    0,    0,    0,  355,  356,    0,  410,  411,    0,    0,
    0,  391,  349,    0,  396,  397,    0,    0,    0,  880,
  392,  880,  880,    0,  880,    0,  398,    0,    0,    0,
  399,    0,    0,    0,  393,    0,    0,  880,    0,    0,
  348,  394,  880,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  643,    0,    0,  643,    0,
  643,  395,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  643,    0,    0,    0,    0,  643,    0,
    0,    0,    0,    0,  400,    0,    0,  349,    0,  396,
  397,    0,    0,    0,  401,    0,    0,    0,    0,    0,
    0,  398,    0,    0,    0,  399,    0,    0,  350,  351,
  352,  402,  176,  177,    0,    0,    0,    0,    0,    0,
    0,    0,  403,    0,    0,    0,    0,    0,    0,    0,
    0,  353,  354,  404,  405,  406,  407,  408,    0,  409,
    0,    0,    0,  355,  356,    0,  410,  411,    0,    0,
    0,    0,    0,  641,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  401,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  350,  351,  352,  402,  176,  177,    0,
    0,    0,    0,    0,    0,    0,    0,  403,    0,    0,
    0,    0,    0,    0,    0,    0,  353,  354,  404,  405,
  406,  407,  408,    0,  409, 1286,    0,    0,  355,  356,
    0,  410,  411,    0,  414,    0,  880,  412,    0,  413,
    0,    0,    0,    0,    0,  880,    0,    0,    0,    0,
    0,    0,  415,    0,    0,    0,    6,  253,    0,  880,
    0,    0,    0, 1503,    0,  880,  880, 1388, 1389,    0,
 1390,    0,    0, 1391,    0,  643,    0,    0,    0,    0,
  414,    0,  643,  412,    0,  413,    0, 1392,    0,    0,
    0,  643,    0, 1393,    0,    0,  880,    0,  415,    0,
    0,    0,    0,  253,    0,  643,    0,    0,    0,    0,
    0,  643,  643,    0,    0,    0,    0,    0,    0,  643,
    0,    0,  880,    0,  880,  880,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  880,    0,    0,    0,
  880,    0,  643,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1394,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  643,  643,    0,   15,    0,    0,    0,    0,  414,  874,
    0,  412,  643,  413,    0,    0,  643,    0, 1395,    0,
    0,    0,    0,    0,    0,    0,  415,    0,   17,    0,
    0,  253,    0,    0,  880,    0,    0, 1504,    0, 1396,
    0,    0,    0,    0,  880,    0,  454,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  880,  880,
  880,  880,  880,  880,    0,    0,    0,    0,    0,    0,
    0,    0,  880, 1397,    0,    0,    0,    0,    0,    0,
  643,  880,  880,  880,  880,  880,  880,  880,    0,  880,
  643,  391,    0,  880,  880,    0,  880,  880,    0,    0,
  392,    0,    0,    0,  643,  643,  643,  643,  643,  643,
    0,    0,    0,    0,  393,    0,    0,    0,  643,    0,
  348,  394,    0,    0,    0,    0,    0,  643,  643,  643,
  643,  643,  643,  643,    0,  643,    0,  391,    0,  643,
  643,    0,  643,  643,    0,    0,  392,    0,    0,    0,
    0,  395,  414,    0,    0,  412,    0,  413,    0,    0,
  393,    0,    0,    0,    0,    0,  348,  394,    0,    0,
  415,    0,    0,    0,    0,  253,    0,    0,    0,  396,
  397,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  398,  135,    0,    0,  399,    0,  395,    0,    0,
    0,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
  155,  156,    0,  349,    0,  396,  397,  157,  158,    0,
    0,    0,    0,    0,    0,  391,    0,  398,    0,    0,
    0,  399,    0,  641,  392,    0,    0,    0,    0,    0,
  414,    0,    0,  412,    0,  413,    0,    0,  393,  400,
    0,    0,    0,    0,  348,  394,    0,    0,  415,  401,
    0,    0,    0,  253,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  350,  351,  352,  402,  176,  177,    0,
    0,    0,    0,    0,    0,  395,    0,  403,    0,    0,
    0,    0,    0,    0,    0,  400,  353,  354,  404,  405,
  406,  407,  408,    0,  409,  401,    0,    0,  355,  356,
    0,  410,  411,  396,  397,    0,    0,    0,    0,  350,
  351,  352,  402,  176,  177,  398,    0,    0,    0,  399,
    0,    0,    0,  403,    0,    0,    0,    0,    0,    0,
    0,    0,  353,  354,  404,  405,  406,  407,  408,    0,
  409,    0,    0,    0,  355,  356,    0,  410,  411,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
    0,    0,    0,    0,    0,    0,    0,    0,  392,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1568,  393,  400,  412,    0,  413,    0,  348,  394,
    0,    0,    0,  401,    0,    0,    0,    0,    0,  415,
    0,    0,    0,    0,  253,    0,    0,  350,  351,  352,
  402,  176,  177,    0,    0,    0,    0,    0,    0,  395,
    0,  403,    0,    0,    0,    0,    0,    0,    0,    0,
  353,  354,  404,  405,  406,  407,  408,    0,  409,    0,
    0,    0,  355,  356,    0,  410,  411,  396,  397,    0,
    0,    0,    0,    0,    0,    0,    0,  391,    0,  398,
    0,    0,    0,  399,    0,  414,  392,    0,  412,    0,
  413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  393,    0,    0,  415,  508,    0,  348,  394,  253,    0,
    0,    0,    0,  136,  137,  138,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  155,  156,    0,    0,    0,  395,    0,  157,
  158,    0,    0,    0,    0,    0,    0,  400,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,  396,  397,    0, 1036,    0,
    0,  350,  351,  352,  402,  176,  177,  398,    0,    0,
    0,  399,    0,    0,    0,  403,    0,    0,    0,    0,
    0,    0,    0,    0,  353,  354,  404,  405,  406,  407,
  408,    0,  409,    0,    0,    0,  355,  356,    0,  410,
  411,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  391,    0,
    0,    0,    0,    0,    0,    0,  880,  392,    0,  880,
    0,  880,    0,    0,    0,  400,    0,    0,    0,    0,
    0,  393,    0,    0,  880,  401,    0,  348,  394,  880,
    0,    0,    0,    0,    0,    0, 1214,    0,    0,  350,
  351,  352,  402,  176,  177,    0,    0,    0,    0,    0,
    0,    0,    0,  403,    0,    0,    0,    0,  395,    0,
    0,    0,  353,  354,  404,  405,  406,  407,  408,    0,
  409,    0,    0,    0,  355,  356,    0,  410,  411,    0,
    0,    0,  391,    0,  349,    0,  396,  397,    0,    0,
    0,  392,    0,  659,  659,    0,  659,    0,  398,    0,
    0,    0,  399,    0,    0,  393,    0,    0,    0,  659,
  428,  348,  394,    0,  659,    0,    0,    0,    0,    0,
  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
    0,    0,  395,  738,    0,  428,  428,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,    0,    0,    0,
  396,  397,    0,    0,    0,    0,  401,    0,    0,    0,
    0,    0,  398,    0,  738,    0,  399,  738,    0,    0,
  350,  351,  352,  402,  176,  177,    0,    0,    0,    0,
    0,    0,  738,    0,  403,    0,    0,    0,    0,    0,
    0,    0,    0,  353,  354,  404,  405,  406,  407,  408,
    0,  409,    0,    0,    0,  355,  356,    0,  410,  411,
    0,    0,    0,  880,    0,    0,    0,    0,    0,    0,
    0,    0,  880,    0,    0,  739,    0,    0,    0,    0,
  400,    0,    0,    0,    0,    0,  880,    0,    0,    0,
  401,    0,  880,  880,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  350,  351,  352,  402,  176,  177,
    0,    0,    0,    0,    0,    0,  739,    0,  403,  739,
    0,    0,    0,  880,  763,    0,    0,  353,  354,  404,
  405,  406,  407,  408,  739,  409,    0,    0,    0,  355,
  356,  659,  410,  411,    0,    0,    0,    0,  659,    0,
    0,  880,  880,    0,    0,    0,  742,  659,    0,    0,
    0,    0,    0,  880,    0,  763,    0,  880,  763,    0,
    0,  659,    0,    0,    0,    0,    0,  659,  659,    0,
    0,    0,    0,  763,    0,  659,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  742,    0,    0,
  742,    0,    0,    0,    0,  740,    0,    0,  659,    0,
    0,    0,    0,    0,    0,  742,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  880,    0,    0,  659,  738,  659,  659,    0,    0,
    0,  880,    0,    0,    0,    0,  740,    0,  659,  740,
    0,    0,  659,    0,    0,  880,  880,  880,  880,  880,
  880,    0,    0,    0,  740,    0,    0,    0,    0,  880,
    0,    0,    0,    0,    0,    0,    0,    0,  880,  880,
  880,  880,  880,  880,  880,    0,  880,    0,    0,    0,
  880,  880,  738,  880,  880,  738,    0,    0,    0,    0,
    0,    0,  738,    0,    0,  738,    0,    0,    0,  738,
    0,    0,    0,    0,  738,    0,  659,  738,    0,    0,
    0,    0,    0,    0,    0,    0,  659,    0,    0,    0,
    0,    0,    0,  738,    0,    0,    0,  739,    0,    0,
  659,  659,  659,  659,  659,  659,  741,    0,    0,    0,
    0,    0,    0,    0,  659,    0,    0,  738,    0,    0,
  738,  738,    0,  659,  659,  659,  659,  659,  659,  659,
  738,  659,    0,    0,    0,  659,  659,    0,  659,  659,
  771,    0,    0,    0,    0,    0,  763,  741,  738,    0,
  741,    0,    0,    0,  739,    0,    0,  739,    0,    0,
    0,    0,    0,    0,  739,  741,    0,  739,    0,    0,
  735,  739,    0,    0,    0,  738,  739,    0,  742,  739,
    0,  771,    0,    0,  771,    0,    0,  738,    0,  738,
  736,    0,    0,    0,    0,  739,    0,    0,    0,  771,
    0,    0,    0,  763,    0,    0,  763,    0,    0,    0,
    0,  735,    0,  763,  735,    0,  763,    0,    0,  739,
  763,    0,  739,  739,    0,  763,    0,  740,  763,  735,
    0,  736,  739,    0,  736,  742,    0,    0,  742,    0,
    0,    0,    0,    0,  763,  742,    0,    0,  742,  736,
  739,    0,  742,    0,    0,    0,    0,  742,    0,    0,
  742,    0,    0,    0,    0,    0,    0,    0,  763,    0,
  737,  763,  763,    0,    0,    0,  742,  739,    0,    0,
    0,  763,    0,    0,  740,    0,    0,  740,    0,  739,
    0,  739,    0,    0,  740,    0,    0,  740,    0,  763,
  742,  740,    0,  742,  742,    0,  740,    0,    0,  740,
    0,  737,    0,  742,  737,    0,    0,    0,    0,  770,
    0,    0,    0,    0,    0,  740,  763,    0,    0,  737,
    0,  742,    0,    0,    0,    0,    0,    0,  763,    0,
  763,    0,    0,    0,    0,    0,    0,    0,    0,  740,
    0,  764,  740,  740,    0,    0,    0,    0,  742,    0,
  770,    0,  740,  770,    0,    0,    0,    0,  741,    0,
  742,    0,  742,    0,    0,    0,    0,    0,  770,    0,
  740,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  764,    0,    0,  764,    0,    0,    0,    0,
    0,    0,  771,    0,    0,    0,    0,  740,    0,    0,
  764,    0,    0,    0,  772,    0,    0,    0,    0,  740,
    0,  740,    0,    0,    0,  741,    0,    0,  741,    0,
    0,    0,  735,    0,    0,  741,    0,    0,  741,    0,
    0,    0,  741,    0,    0,    0,    0,  741,    0,    0,
  741,    0,  736,    0,    0,  772,    0,    0,  772,  771,
    0,    0,  771,    0,    0,    0,  741,    0,    0,  771,
    0,    0,  771,  772,    0,    0,  771,    0,    0,    0,
    0,  771,    0,    0,  771,    0,    0,    0,    0,  735,
  741,    0,  735,  741,  741,    0,    0,    0,    0,  735,
  771,    0,  735,  741,    0,  773,  735,    0,    0,  736,
    0,  735,  736,    0,  735,    0,    0,    0,    0,  736,
    0,  741,  736,    0,  771,  761,  736,  771,  771,    0,
  735,  736,  737,    0,  736,    0,    0,  771,    0,    0,
    0,    0,    0,    0,    0,    0,  773,    0,  741,  773,
  736,    0,    0,    0,  735,  771,    0,  735,  735,    0,
  741,    0,  741,    0,  773,    0,  761,  735,    0,  761,
    0,    0,    0,    0,  736,    0,    0,  736,  736,    0,
    0,  770,  771,    0,  761,  735,    0,  736,    0,  737,
    0,    0,  737,    0,  771,    0,  771,    0,    0,  737,
    0,    0,  737,    0,    0,  736,  737,    0,    0,  765,
    0,  737,  735,  764,  737,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  735,    0,  735,    0,    0,    0,
  737,    0,  736,    0,    0,    0,    0,    0,  770,    0,
    0,  770,    0,    0,  736,    0,  736,    0,  770,    0,
  765,  770,    0,  765,  737,  770,    0,  737,  737,    0,
  770,    0,    0,  770,    0,    0,    0,  737,  765,    0,
  764,    0,    0,  764,    0,    0,  772,    0,    0,  770,
  764,    0,    0,  764,    0,  737,  774,  764,    0,    0,
    0,    0,  764,    0,    0,  764,    0,    0,    0,    0,
    0,    0,    0,  770,    0,    0,  770,  770,    0,    0,
    0,  764,  737,    0,    0,    0,  770,    0,  762,    0,
    0,    0,    0,    0,  737,    0,  737,  774,    0,    0,
  774,    0,    0,  772,  770,  764,  772,    0,  764,  764,
    0,    0,    0,  772,    0,  774,  772,    0,  764,    0,
  772,    0,    0,    0,    0,  772,    0,    0,  772,  762,
    0,  770,  762,    0,    0,    0,  764,  773,    0,    0,
    0,    0,    0,  770,  772,  770,    0,  762,    0,    0,
    0,  766,    0,    0,    0,    0,    0,  761,    0,    0,
    0,    0,    0,  764,    0,    0,    0,    0,  772,    0,
    0,  772,  772,    0,    0,  764,    0,  764,    0,    0,
    0,  772,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  766,    0,  773,  766,    0,  773,    0,  772,
    0,    0,    0,    0,  773,    0,    0,  773,    0,    0,
  766,  773,    0,    0,  761,    0,  773,  761,    0,  773,
    0,    0,    0,    0,  761,    0,  772,  761,    0,    0,
    0,  761,    0,    0,    0,  773,  761,    0,  772,  761,
  772,  765,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  761,    0,    0,    0,  773,
    0,    0,  773,  773,    0,    0,    0,    0,    0,    0,
    0,    0,  773,    0,  872,  651,  649,    0,  650,  761,
  652,    0,  761,  761,    0,    0,    0,    0,    0,    0,
  773,    0,  761,  813,  812,  814,    0,    0,  765,    0,
    0,  765,    0,    0,    0,    0,    0,    0,  765,    0,
  761,  765,    0,    0,    0,  765,    0,  773,  774,    0,
  765,    0,    0,  765,    0,    0,    0,    0,    0,  773,
    0,  773,    0,    0,    0,  651,  649,  761,  650,  765,
  652,  296,    0,    0,    0,    0,    0,    0,    0,  761,
  762,  761,    0,  813,  812,  814,    0,    0,    0,    0,
    0,    0,    0,  765,    0,    0,  765,  765,    0,    0,
    0,    0,  296,    0,    0,  774,  765,    0,  774,  296,
    0,    0,    0,  296,  296,  774,  296,    0,  774,  296,
    0,    0,  774,    0,  765,    0,    0,  774,    0,    0,
  774,    0,    0,  296,    0,    0,    0,  762,    0,  296,
  762,    0,    0,  766,    0,    0,  774,  762,    0,    0,
  762,  765,    0,    0,  762,    0,    0,    0,    0,  762,
    0,    0,  762,  765,    0,  765,    0,    0,    0,    0,
  774,    0,    0,  774,  774,    0,    0,    0,  762,    0,
    0,    0,    0,  774,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  296,
  766,  774,  762,  766,    0,  762,  762,    0,    0,    0,
  766,    0,    0,  766,    0,  762,    0,  766,    0,  296,
    0,    0,  766,    0,    0,  766,    0,    0,  774,    0,
    0,    0,    0,  762,  296,  800,    0,    0,    0,    0,
  774,  766,  774,  647,  296,    0,    0,    0,    0,  648,
    0,    0,  801,  296,    0,  296,    0,    0,    0,    0,
  762,    0,  296,    0,    0,  766,    0,    0,  766,  766,
    0,    0,  762,    0,  762,    0,    0,    0,  766,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  802,  296,
    0,    0,    0,    0,  531,  800,  766,  803,  532,    0,
    0,    0,    0,  647,    0,  804,  716,    0,    0,  648,
    0,    0,  801,    0,    0,    0,    0,  533,    0,    0,
  534,    0,    0,  766,  805,    0,  806,    0,    0,    0,
    0,    0,  214,    0,    0,  766,  214,  766,    0,    0,
  807,    0,  808,  809,  810,    0,    0,    0,  802,    0,
    0,  214,    0,    0,    0,  214,    0,  803,  214,    0,
    0,  535,    0,    0,    0,  804,    0,  536,  537,  538,
    0,  539,  540,  541,    0,  542,    0,    0,    0,    0,
    0,    0,    0,    0,  805,    0,  806,    0,    0,    0,
    0,    0,    0,    0,  811,  543,    0,  544,    0,  214,
  807,    0,  808,  809,  810,  214,  214,  214,    0,  214,
  214,  214,    0,  214,    0,  786,    0,    0,    0,  532,
    0,    0,    0,    0,    0,    0,    0,    0,  545,    0,
    0,    0,    0,  214,  787,  214,    0,    0,  533,    0,
    0,  534,    0,    0,    0,    0,  546,    0,    0,    0,
    0,    0,    0,    0,  811,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  214,    0,  547,    0,
    0,    0,   78,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  535,  181,  214,    0,    0,  531,  536,  537,
  538,  532,  539,  540,  541,    0,  542,    0,    0,    0,
    0,    0,    0,  548,  549,    0,  214,    0,    0,    0,
  533,    0,    0,  534,    0,    0,  543,    0,  544,    0,
  550,  551,    0,    0,    0,  214,    0,    0,    0,  214,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  214,  214,    0,  214,    0,    0,    0,  214,  545,
    0,  214,    0,    0,  535,    0,    0,    0,  214,  214,
  536,  537,  538,    0,  539,  540,  541,  546,  542,    0,
  531,    0,    0,    0,  532,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  543,  547,
  544,  127,  214,  533,    0,  127,  534,    0,  214,  214,
  214,    0,  214,  214,  214,    0,  214,    0,    0,    0,
    0,    0,    0,    0,  127,    0,    0,  127,    0,    0,
    0,  545,    0,    0,  548,  549,  214,    0,  214,    0,
    0,    0,    0,    0,    0,    0,    0,  535,    0,  546,
    0,  550,  551,  536,  537,  538,    0,  539,  540,  541,
    0,  542,    0,    0,    0,    0,    0,    0,  127,  214,
    0,  547,    0,    0,  127,  127,  127,    0,  127,  127,
  127,  543,  127,  544,    0,    0,  181,  214,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    0,  127,    0,  548,  549,    0,  214,
    0,    0,    0,    0,  545,    0,    0,    0,    0,    0,
    0,    0,    0,  550,  551,    0,    0,    0,    0,    0,
    0,    0,  546,    0,    0,  127,    0,    0,    0,    0,
    0,    0,    0,    0,  214,  214,    0,    0,    0,    0,
    0,    0,    0,  127,  547,    0,    0,    0,    0,    0,
    0,  214,  214,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  127,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  548,
  549,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  550,  551,    0,    0,
  127,  127,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,  127,
};
static short yycheck[] = {                                      17,
   56,    4,   48,  129,    4,   57,   49,   96,   55,    0,
  286,   50,  227,  227,   56,  227,   59,  117,  118,  117,
  118,  458,   61,  325,  321,   77,  462,  685,  329,  329,
  300,  491,  298,   62,  494,   81,  500,   65,   60,   82,
  500,   86,  440,  587,  693,  589,   89,   80,  132,  105,
  235,  107,  641,  871,  581,   44,   85,   75,  630,   87,
    0,   83,    0,  248,   40,  108,   84,  106,  343,   44,
  109,  293,  625,    0,  283,   44,   41,   41,  690,   44,
   44,   41,   41, 1063,   40,   44,   40,  981,    0,    0,
  123,   40,   45,   44,    0,   41,    0,  941,   41,   44,
   59,   40,  252,    0,   58,   40,  256,   59,  952,  751,
   44,  200,  684,  263,  387,  162,   44,    0,   44,   59,
    0,   59,   41,   40, 1260,   40,    0,  971,   63,  227,
   41,   44,   59,   44,   42,  260,  264,   41, 1133,  186,
  190,   40,   45,  358,  358,    0,  358,   59,   59,  940,
  239,   42,   45,   59,    0,   59,   40,  283,  625,  259,
  286,   45,   59,    0,   63,  288,   40,   41,  470,   58,
   44,  933,  288,  229, 1179, 1069,   59,    0,  940,   59,
  477,  478,  479,  480,   44,   59,   41,   45,  373,   44,
  263,  241,  260,   44,  233,  965,  274,   91,   45,  500,
  500,   45,    0,  287,   59,  246,   63,  246,  933,    0,
 1273,  321,  349,   59,  378,  940,   63,   91, 1476,  309,
  258,  267,   59,  660,  526,  257,    0,  283,  357, 1056,
  339, 1058,  271,  257,  403,  889,   59,  503,  264,  356,
  313,  933,  933,  299, 1554,   13,  457,   59,  940,  940,
  306,  324,  308,  273,  310,  262,  531,  313,    0,   44,
  358,   59,  412,  413,  414,    0,  838,   41,   59,  307,
   44,  815,  816,    0,    0,  322,  460,  324,  447,  739,
  833,  344, 1592,  302, 1280,   59,  450,  553,  335, 1014,
    0,  844,  845,  339,  419,  403, 1291,  381,  337,  462,
  302, 1559,  431,  335, 1148,  284,  369,   13,   93,  274,
  494,  335,    0,    0, 1624,   41,  262,   59,   44,  388,
  258, 1326, 1014, 1014,   59, 1321,  463,  464,  438,  372,
  369,   41,   59,   59,  462,  444,  285,  339, 1596,  462,
  343,  380,    0,  382,  387,  310,  462,  115,  389,   59,
  389,  419,  269,  264,   41,  628,  429,   44, 1176,  319,
    0,  759,    0,  453,    0,  428,  833,   41, 1159,  307,
  321,   59,   59,  442,  491,  258,  321,  844,   41,  991,
  387, 1361,  420,  277,  258,  319, 1522,  413,  932,  297,
  468,  310,  305,  608,  608, 1165,  608, 1159,  987,   41,
  274,   59,  329,  277,  278,  332,  280,    0, 1302,  115,
  321,  285,  688,  264,  288,  319, 1243, 1480,  518,   59,
  332,   59, 1064,   59,  307,  444,  321,  301,  475, 1532,
    0,    0,  617,  307, 1159,  701,  310,  341,  704,  589,
 1284,  387,  444, 1287,  500, 1289, 1100,  497,  413,  413,
    0,   44,  718,  412,  397,  278,  395,  280,  384,   41,
  412,  341,  441, 1112,  319, 1568,   59, 1159, 1159,  996,
  397,  460,  681,  449,  521,   44, 1320,  332,  700,  745,
  630,  456,  420,  633,  388,  397,  341,  456,  638,   59,
   59,  397,  329,  397,   44,  332,  646,  519,  648,  649,
  650,  651,  652,  468,  654,  379,  462,  460,  462,   59,
  608,  661, 1154,  462,  784,  442,  456,  573,  793, 1363,
 1338, 1074,  264,  570,  571,  460,  454,  401,  531,  456,
  442,    0,  258,  388,  684,  409,  442,  420,  442,  413,
 1384,  494,  397,  454,  456,  442,  420,  462,  274,  433,
  456,  462,  456,  609,  462,  681,  379,  460,  658,  456,
  397,  460,  688, 1333,  438,  411,  666,  460,  624,  443,
  368,  462,   41,  462, 1118,   44,  460,  368,  438,  582,
 1424,  307,  582,    0,  310,  628,  433,  442,    0,  433,
   59,  278, 1136,  280,  468, 1439,  696,  697,  472,  632,
  412,  456,  460,  460,  462,  442,  264, 1196,    0,  319,
  384,    0,   41,  460,  349, 1340,  460,  454, 1272,  456,
  262,  277,  349,  920,   41,  681,  288,   44,  264,   41,
 1279,  341,    0,   42,  690,  302,  675,  822,  677,  301,
  825,   41,   59,   41,  258,  692,  693,   59, 1340, 1340,
  800,  801,  802,  341,  710,  805,  806,  807,  332,  809,
  810,  811,  812,  813,  814,  273,  329,   59, 1240,  332,
   59,  725,  938,  317,  318, 1519,  268,  699,  388,  319,
  262,  319,  738,  739,  950,  982,  406,  413,  838,  320,
  346,   59,  379,  307,  420,    0,   59,  847,  848,    0,
  850,  341,  852,  341,  970,  855,  856,  857,  858,  859,
  860,  795,  438,  797,  401,  737,   42,  398,  933,  933,
 1534,   47,  409,  397,  994,  940,  940,   44,    0,  302,
 1274,  326,  442,  341,  397,  436,  329,    0,  458,  332,
  398,  744,  468,  782,    0,  387,  472,  769,  770,  771,
  462,  344,   41,  756,   59,   44,  443,  438,   59, 1157,
  329,  462,  398,  332,    0, 1163,  339,    0,    0,   41,
  401,    0,  322,  343,  366,  344,   93,  444,  378,  329,
  823,  826,  332, 1247,   40,   41,  336,   59,   44,  258,
  793,  472,   17, 1607,  344,  824,   59,  329,    0,  827,
 1014,    0, 1014,   59,  397,  387,  420, 1077,  277,  278,
  360,  280,  443,  278, 1556,  287,  285, 1631,    0,  288,
  420, 1479,  411,   59,  438,    0,   59,   59,  397,    0,
   59,  265,  301,  262,  384,   91,  406,  432,  307,   41,
  410,    0,   44,    0,  439,   44,  462,  397, 1590,  442,
   75,  260,    0,  462, 1290,  320,  426,   59,  472,   41,
   59,  454,  262,  456,  262,  415,    0,  467,  968,  303,
  420, 1173,  264,  442, 1310, 1025, 1026,   59, 1028, 1029,
 1146, 1623,  452, 1098,   59,  454, 1036,  456,   59,   91,
  944,  945,  442,   41,  406,  304,   44,    0, 1524, 1641,
   59,  460,   59,  462,  454,  322,  456,  319,   44, 1175,
  379,   59,  329,  445,  426,  332, 1014,  329,  301,  336,
  332,  272,  467,    0,  469,   59, 1386,  344,  984,  341,
  462, 1081,  401, 1370, 1478,  991,  401,  991,  289, 1089,
  409, 1091, 1092,  360, 1159, 1159, 1247, 1247, 1098,  418,
 1494,  420,  341, 1497,  280,  977,   59,   93,  387,  962,
  286,  265,  962,  264, 1062, 1063, 1064,  384, 1594,  438,
  353,  993,  302, 1099,  443,  343,  388,  999,  443, 1276,
  397, 1131,   59,  334, 1128,  397,  462,  387,  406,  387,
   40,  463,  464,  419,    0,   45,  259, 1273,  415,  303,
 1626,  264,  258,  472,    0,  260,  398,  270,  259,  339,
  378,    0,  363,   63, 1114,  403, 1116,  462,  274,  270,
  446,  277,  278,    0,  280,  442, 1170, 1293,  264,  285,
  442,  264,  288,    0,  338,  264,  331,  454,  406,  456,
  458,    0,  410, 1193,  456,  301,  462,  319,  436,  304,
    0,  307,   41,   59,  310,   44,  258, 1207,  426, 1062,
 1063,   44, 1328,   59, 1214, 1112,  265,   44, 1090,  341,
   59, 1171,  274, 1562,    0,  277,  278,   44,  280,  409,
  431, 1518,   59,  285,  452,    0,  288,  460,  383,  419,
 1240,   41,   59,  264,   44,  357,  260,  398, 1242,  301,
   59,  353,   91,   44,  303,  307, 1650,    0,  310,   59,
   93,  343,   42,   43,  444,   45,  388,   47,   59,  278,
  319,  280,  462,  379, 1561,  397, 1340,  379, 1340,  713,
  264,    0,  394,   59,  396,  398, 1625,  319,  722, 1186,
  304,   91,  341, 1190,   59,  401,  378, 1273,   41, 1152,
  332,    0, 1152,  409, 1643,  344, 1371,  413,  420,  341,
 1286,  264,  398,    0,  420,  398,   59,    0,  343,  398,
  442,  319,   41, 1323,  406,   44,  462,  379,  410,    0,
  369,  329,  438,  445,  332,   41, 1501,  443,   44,  773,
   59,  259,   41,  341,  426,   44,  344, 1347, 1348,  401,
    0,  260,  270,  378, 1480,  349,  388,  409,    0,    0,
   59,  413,  468,  284,  358,  397,  472,  445,  420, 1534,
  452, 1371,   59,  655,    0, 1501,   59,  398,  323, 1285,
 1286,  406, 1279,  322,  462,  410,  438,   93,   59,  428,
  388,  443, 1340, 1285, 1394,  304,  296,  336,  680,  397,
   41,  426,    0,   44,  295, 1294,  840,  689, 1534,   59,
  442, 1576, 1405, 1361,  398,  306,  468,   59,   59,  258,
  472,  360,  313,  462,  456,   42,   43,  452,   45, 1405,
   47, 1381,  278,   59,  280,  274,    0, 1431,    0,  278,
  209,  280, 1607, 1443,  442,  398,  285,  338,  217,  288,
 1576, 1451,   45,  353,   42,   43,  454,   45,  258,   47,
    0,   59,  301,    0,  385,    0, 1631, 1532,  307,    0,
   63,  310,  404,  322,  274,    0,  415,    0,  278,   41,
  280, 1607,   44,  260, 1423,  285, 1388,  336,  288,  460,
  422, 1491,  319,    0,    0,   59,    0,   59,    0, 1405,
  280,  301,  462, 1568, 1480, 1631,  286,  307, 1361,   41,
  310,  360,  403,  462,  341, 1368,   45,  951,   41,   59,
  441,   44,   59,  402,   59, 1501,   58,  304,   59,   91,
 1419,    0, 1532,    0,   59,  384,   59,  458,  463,  464,
  379,  321,  419,   42,   43,  436,   45, 1444,   47,  440,
 1391, 1448,   59,   59, 1056,   59, 1058,   59, 1534,  459,
  460,  461,  401,  463,  464,    0,  415,  343, 1568,  446,
  409,  323,   41, 1512,  413,   44,  319,  279,   40,  379,
  384,  420,  482,  483,   41,   45,  329,   44, 1581,  332,
   59,  384,   59,  379,  494,  495,   44, 1490,  341,  438,
 1576,  401,  378,   63,  443, 1581,    0,  386,  322,  409,
   41,   42,   43,  413,   45,  401,   47,  258, 1611, 1612,
  420,  280,  336,  409,   59,    0,  384,  286,  330,  468,
  406, 1607,   40,  472,  410, 1611, 1612,  278,  438,  280,
 1542,  493, 1635,  443,  285,  388,  360,  288,  384, 1517,
  426,    0,  338,  260,  397, 1631, 1649,  443,    0, 1635,
  301, 1529,  364,  280,   41,   59,  307,   44,  468,  286,
  384,  322,  472, 1649,  262, 1581,  452,    0,  463,  464,
  382,    0,   45,    0,   59,  336, 1554,   41,  420,  375,
   44, 1544,  280,  344, 1544, 1563,  258,  304,  286,  442,
   63,  415,  388,  296,  321, 1611, 1612, 1603,  338,  360,
   59,  454,  274,  338,  462,  279,  278,   59,  280,  392,
  393,  492,  493,  285, 1592,  496,  288,  274,   41, 1635,
    0,   44, 1600,  319,   40,  258,   59,  301,  379,  301,
   59,  426,   59, 1649,  258,  307,   41,  261,  310,   44,
  375,  686,  687,  463,  277,  278, 1624,  280,   41,  264,
  401,   44,  285,  388,  415,  288,  330,  296,  409,  317,
   40,   41,   42,   43,   44,   45,   46,   47,  301,  420,
   93,  280,  338,   41,  307,  349,   44,  286,  462,   59,
   60,   61,   62,  307,  358,   41,   41,  438,   44,   44,
  364,   41,  443,  319,   44,  322,   42,   43,  454,   45,
  337,   47,   41,  312,  403,   44,  319,  379,  382,  336,
  341,   91,   41,   93,  353,   44,  419,  344,   41,   42,
   43,  472,   45,  321,   47,  403,  296,   42,   43,  401,
   45,  384,   47,  360,  459,  460,  461,  409,  384,  280,
  319,  413,  445,  438,   41,  286,  379,   44,  420,    0,
  329,   41,   41,  332,   44,   44,  459,  460,  461,  460,
  463,  464,  341,  362,  452,  344,  438,  436,  401,  494,
  495,  443,    0,  462,  444,  419,  409,  358,  288,  482,
  483,  413,   44,  353,  487,  488,  471,  420,  415,   61,
   41,  494,  495,   44,  497,  498,  468,  629,  373,  631,
  472,  287,  634,  635,  636,  438,  445,   40,   59,  388,
  443,  264,  463,   41,   42,   43,   44,   45,  397,   47,
  459,  460,  461,  296,  463,  464,   40,  463,   44,  463,
  438,   59,   60,   61,   62,   40,   44,  329,  321,  472,
  462,  403,   40,  482,  483,  484,  485,  486,  487,  488,
   40,   40,   40,   40,   40,  494,  495,   40,  497,  498,
   41,   42,   43,  442,   45,   93,   47,  474,  475,  476,
  477,  478,  479,  480,  481,  454,    0,   40,  462,   41,
   42,   43,  262,   45,  264,   47,   40,   40,   40,  459,
  460,  461,  272,  463,  464,   91,  306,   46,   44,  321,
  280,    0,   44,  313,  430,   46,  286,  317,  318,  289,
   61,  403,  482,  483,  280,   44,  326,   41,   42,   43,
   44,   45,  383,   47,  494,  495,    0,   46,  338,  349,
   44,  278,  312,    0,  280,   59,   60,   61,   62,  319,
  286,  321,  322,  278,  301,  325,  264,  262,  440,  329,
  462,  398,  332,  445,  334,  472,  336,  280,  438,  451,
   59,  341,  342,  286,  344,  280,  312,   41,  398,   93,
  462,  286,  445,  277,   41,  449,  400,   44,  470,  449,
  360,  361,   40,  363,   40,   59,  459,  460,  461,  350,
  463,  464,   59,  403,   91,   40,   40,  377,  264,  379,
  380,  381,  384,   44,  384,  413,  390,  387,  388,  482,
  483,  421,  383,   40,  487,  488,   40,  397,  466,  438,
  318,  494,  495,   40,  497,  498,  436,  278,    0,  280,
  440,   41,  412,  264,  262,  415,  264,  288,  805,  321,
  807,  451,  809,  810,  272,  812,  813,  814,  343,  462,
  301,  431,  280,  321,  454,  462,  450,  460,  286,   40,
  470,  289,  442,  274,  277,   40,  301,  285,  345,   41,
   42,   43,   44,   45,  454,   47,  456,  278,    0,  387,
    0,  345,  462,  378,  312,  387,  387,   59,   60,   61,
   62,  319,  420,  321,  322,    0,  418,  325,  301,  280,
  420,  329,   40,  357,  332,  286,  334,  419,  336,   40,
  274,  406,   40,  341,  342,  410,  344,  462,  280,   41,
    0,   93,   44,   44,  286,  386,  368,   44,  379,  321,
   41,  426,  360,  361,  264,  363,   41,   59,  262,   59,
  264,    0,   44,  321,  280,  279,   41,   40,  272,  377,
  401,  379,  380,  381,   59,   44,  384,  452,  409,  387,
  388,   41,  286,  329,   44,  289,   44,  301,  266,  397,
   40,  264,   41,   42,   43,  300,   45,   40,   47,   59,
  279,  462,   41,  424,  412,   44,   41,  415,  312,   41,
   58,   41,  443,   41,  442,  319,  330,  321,  322,  456,
   59,  325,  301,  431,  395,  329,  310,  491,  332,  310,
  334,  278,  336,  280,  442,  349,   41,  341,  342,   41,
  344,  288,   42,   43,  358,   45,  454,   47,  456,   40,
  364,  330,   40,  353,  462,    0,  360,  361,   40,  363,
   40,   40,   40,   40,   40,  319,   40,   40,  382,   40,
  349,   40,   40,  377,   40,  379,  380,  381,  332,  358,
  384,    0,   40,  387,  388,  364,   40,  341,  262,  328,
   41,   44,  389,  397,  389,  344,   41,   42,   43,   44,
   45,  389,   47,  382,   42,   43,  274,   45,  412,   47,
  262,  415,  264,  332,   59,   60,   61,   62,  424,  391,
  272,   59,   41,  392,  448,   44,  271,  431,   42,   43,
  288,   45,  379,   47,  388,  409,  387,  289,  442,  387,
   59,  387,  387,  397,  387,   59,  387,   41,   93,  379,
  454,   41,  456,  278,  401,   40,  419,   41,  462,    0,
  312,   41,  409,   41,  386,   41,  462,  319,  438,  321,
  322,  397,  339,  325,  302,  339,  278,  329,  280,  279,
  332,  302,  334,  285,  336,  444,  288,  444,  442,  341,
  342,   41,  344,   41,  353,  386,  443,  372,   41,  301,
   41,  301,   43,   44,   45,   41,  372,   41,  360,  361,
   41,  363,   41,   41,   41,   41,   41,   41,   59,   60,
   61,   62,   41,   41,   41,  377,   41,  379,  380,  381,
  330,  280,  384,   41,  319,  387,  388,  286,   41,  278,
  280,  280,   44,   59,  329,  397,   40,  332,  341,  349,
   59,   40,   93,   59,   59,   59,  341,  357,  358,  319,
  412,  341,  322,  415,  364,   41,   59,   59,  345,  329,
    0,   41,  332,  369,  353,  321,  336,  379,   40,  431,
  280,  341,  382,  462,  344,   59,  286,   59,  341,  384,
  442,   44,  384,   41,  394,    0,  396,  384,   41,  401,
  360,  437,  454,  388,  456,   44,  412,  409,   44,  305,
  462,   41,  397,   43,   44,   45,  302,  262,  444,  264,
  420,   41,  344,   40,  384,   59,  465,  272,  388,   59,
   60,   61,   62,  294,   44,  305,   41,  397,   44,   44,
  379,  443,  280,  308,  289,  445,   41,    0,  286,  338,
  384,  384,   40,  264,   59,  415,  278,  442,  264,  278,
  264,  280,  401,   93,  390,    0,  280,  312,  472,  288,
  409,  460,  286,  321,  319,  413,  321,  322,   40,  310,
  325,  264,  442,  271,  329,  344,  460,  332,  344,  334,
  460,  336,  344,  438,  454,  344,  341,  342,  271,  344,
   41,   40,  462,   40,  443,   41,   41,   41,   59,   44,
  305,   44,   59,   41,    0,  360,  361,    0,  363,    0,
    0,  262, 1059,  264,   59,   13,  248,  237,  617,  236,
  996,  272,  377,  577,  379,  380,  381,  785,  994,  384,
  983,   79,  387,  388,  991,   41,   42,   43,  289,   45,
 1311,   47,  397,  291,  296,  326,  923,  975,   41,  526,
  379,   44,  243,  984,  624,  384, 1553,  412,  308,    0,
  415,  312, 1549,  308,  505, 1293,   59, 1585,  319, 1552,
  321,  322,  401,  720,  325, 1634,  431,  710,  329, 1129,
  409,  332, 1291,  334, 1582,  336, 1506,  442,  358,  986,
  341,  342, 1554,  344,    0,  780,  574,  294,  507,  454,
   41,  456,   43,   44,   45, 1323,  313,  462,  301,  360,
  361, 1322,  363, 1161,  443,  567,    0,  758,   59,   60,
   61,   62,  262,  766,  264,   14,  377,  275,  379,  380,
  381,  442,  272,  384,  446,   41,  387,  388,   44,  661,
   46,  675,  662,  688,  889,  121,  397, 1480, 1563,  289,
 1600, 1371,   93,   59, 1027,   61, 1652,   41,  622,  458,
   44,  412,  839,  278,  415,  280, 1379,  357,  654,   -1,
  285,   -1,  312,  288,   -1,   59,   -1,   -1,   -1,  319,
  431,  321,  322,   -1,   -1,  325,  301,   -1,   -1,  329,
   -1,  442,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,
   -1,  341,  342,  454,  344,  456,   -1,   -1,    0,   -1,
   -1,  462,   -1,   41,   42,   43,   -1,   45,    0,   47,
  360,  361,   -1,  363,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,  278,   -1,  280,   -1,  377,    0,  379,
  380,  381,   -1,  288,  384,   -1,   -1,  387,  388,   41,
   -1,   43,   44,   45,   -1,   -1,  301,  397,   -1,   41,
   -1,   -1,   44,   -1,  379,   -1,   -1,   59,   60,   61,
   62,   -1,  412,   -1,  280,  415,   -1,   59,   -1,   41,
  286,   -1,   44,   -1,   -1,  278,  401,  280,   -1,   -1,
   -1,  431,   -1,   -1,  409,  288,   -1,   59,   -1,   -1,
   -1,   93,  442,   -1,   -1,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   -1,  454,   -1,  456,   -1,   -1,   -1,
   -1,  262,  462,  264,   -1,   -1,   -1,   40,  443,   -1,
   43,  272,   45,   -1,  379,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   58,    0,   -1,  289,   -1,
   63,   -1,   -1,   -1,   -1,   -1,  401,   -1,  264,  265,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,  260,
   -1,  312,   -1,   -1,  280,   -1,   -1,   -1,  319,   -1,
  321,  322,   -1,   -1,  325,   -1,  379,   41,  329,   -1,
   44,  332,   -1,  334,  278,  336,  280,  303,  443,  305,
  341,  342,   -1,  344,  288,   59,   -1,   -1,  401,   -1,
   -1,  302,   -1,  319,   -1,   -1,  409,   -1,   -1,  360,
  361,   -1,  363,  314,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,  341,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,  339,   -1,
  443,   -1,  280,   -1,   -1,   -1,  397,    0,  286,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
  262,  412,  264,   -1,  415,   -1,   -1,   -1,   -1,   -1,
  272,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  431,   -1,  295,   -1,   -1,  379,  278,  289,  280,   58,
  262,  442,   -1,  306,   63,   -1,  288,   -1,   -1,   -1,
  313,   -1,   -1,  454,   -1,  456,   59,  401,  409,   -1,
  312,  462,   -1,  326,   -1,  409,   -1,  319,  419,  321,
  322,   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,  280,   -1,   -1,   -1,  341,
  342,  286,  344,  444,  267,   -1,   -1,  319,   -1,  443,
  322,   -1,   -1,  276,   -1,   -1,   -1,  329,  360,  361,
  332,  363,   -1,   -1,  336,  280,   -1,  290,   -1,  341,
  293,  286,  344,  296,  297,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,  379,  360,   -1,
  403,   -1,  315,   -1,   -1,  397,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,  327,   -1,   -1,   -1,  421,  401,
  412,   -1,  384,  415,   58,  387,  388,  409,   -1,   63,
   41,   42,   43,  436,   45,  397,   47,  440,   -1,  431,
  443,   -1,  355,  356,   -1,   -1,   -1,   -1,  451,   -1,
  442,   -1,   -1,  415,  367,    0,   -1,   -1,  371,   -1,
   -1,  443,  454,  280,  456,  319,  379,  470,  322,  286,
  462,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  442,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,  454,   -1,  456,   -1,   41,   -1,   -1,   44,
   -1,   41,   42,   43,   -1,   45,  360,   47,  267,   -1,
  423,   -1,   -1,   -1,   59,  258,   -1,  276,   -1,   41,
   42,   43,  435,   45,   -1,   47,   -1,   -1,   -1,   -1,
  384,  290,  445,  387,  388,   -1,  279,  296,  297,    0,
   -1,   -1,   -1,  397,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,  315,  260,  301,   -1,
  473,  415,   -1,   -1,  307,    0,   -1,   -1,  327,  482,
  483,  484,  485,  486,  487,  488,   -1,  490,   -1,   -1,
   -1,  494,  495,   -1,  497,  498,   -1,  330,  442,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   59,  302,
  454,   -1,  456,   -1,   -1,   -1,  349,   -1,  367,   -1,
   -1,  314,  371,   -1,  357,  358,   -1,   -1,   -1,   -1,
  379,  364,   -1,  271,   59,  328,  260,   -1,   41,   42,
   43,    0,   45,  267,   47,   40,  339,   42,   43,  382,
   45,   -1,  276,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   58,  302,   -1,  290,   -1,   63,   -1,
  419,  309,  296,  297,  423,  313,  314,   -1,  316,  280,
  304,  319,   -1,   -1,   -1,  286,  435,  420,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,  445,   -1,  431,   40,
   59,  339,   43,  327,   45,   -1,   -1,   -1,   -1,   -1,
  459,  460,  461,  462,  463,  464,  409,   58,   -1,   -1,
   -1,   -1,   63,  258,  473,   -1,  419,   -1,   -1,  353,
   -1,  355,  356,  482,  483,  484,  485,  486,  487,  488,
   -1,  490,   -1,  367,  279,  494,  495,  371,  497,  498,
  280,  444,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,  399,   -1,   -1,   -1,   -1,  301,   -1,  280,  462,
   -1,   -1,  307,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  434,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,  444,  258,   -1,   -1,
   -1,  435,   -1,   -1,  349,   58,   -1,  455,   -1,   -1,
   63,  445,   -1,  358,  462,   -1,   -1,   -1,  279,  364,
   -1,   -1,   -1,  258,   -1,  459,  460,  461,  462,  463,
  464,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,  473,
  301,  489,   -1,   -1,  279,   -1,  307,   -1,  482,  483,
  484,  485,  486,  487,  488,  260,  490,   -1,   -1,   -1,
  494,  495,  267,  497,  498,   -1,  301,  280,   -1,  330,
   -1,  276,  307,  286,   -1,  420,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  280,  290,  260,   -1,  349,  258,
  286,  296,  297,   -1,   -1,  330,   -1,  358,   -1,  304,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  349,   -1,  267,   -1,   -1,   -1,
   -1,  382,  327,  358,   -1,  276,   -1,   -1,  302,  364,
   -1,   40,  301,   -1,   43,   -1,   45,   -1,  307,  290,
  314,   -1,   -1,   -1,   -1,  296,  297,  382,  353,   58,
  355,  356,   -1,   -1,   63,   -1,   -1,   -1,   -1,  420,
   -1,  330,  367,   -1,  315,  339,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
  349,   -1,   -1,   -1,   -1,  420,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,  260,   -1,   -1,
  263,   -1,   -1,  382,  267,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  276,   -1,   -1,   -1,   -1,  379,   40,
  435,   -1,   43,   -1,   45,  409,   -1,  290,   -1,   -1,
  445,   -1,   -1,  296,  297,  419,   -1,   58,   -1,   -1,
   -1,  420,   63,   -1,  459,  460,  461,  462,  463,  464,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
  444,   -1,  423,   -1,  327,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,  435,  490,   -1,   -1,  462,  494,
  495,   -1,  497,  498,  445,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  473,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,   -1,  490,
   -1,   -1,   -1,  494,  495,   -1,  497,  498,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,  276,   -1,   44,
   -1,   -1,   -1,   40,  427,   -1,   43,   -1,   45,   -1,
   -1,  290,  435,   -1,   59,   -1,   -1,  296,  297,   -1,
   -1,   58,  445,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,  461,  462,
  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,
  483,  484,  485,  486,  487,  488,   -1,  490,   -1,   -1,
   -1,  494,  495,   -1,  497,  498,  355,  356,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,  427,   -1,
   -1,   -1,   -1,   -1,   -1,   40,  435,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,   -1,
   -1,   -1,   -1,   58,  355,  356,   -1,   -1,   63,   -1,
  459,  460,  461,  462,  463,  464,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,  488,
   -1,  490,   -1, 1194, 1195,  494,  495,   -1,  497,  498,
   -1,   -1,   -1,  260, 1205, 1206,  263, 1208, 1209,   -1,
  267,   -1,   -1,   -1,   -1, 1216, 1217, 1218, 1219,  276,
 1221, 1222, 1223, 1224, 1225, 1226,  427,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  435,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,  459,  460,
  461,  462,  463,  464,  329,   -1,   -1,  332,   -1,   -1,
  327,  336,  473,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,  482,  483,  484,  485,  486,  487,  488,   -1,  490,
   -1,   -1,   -1,  494,  495,  360,  497,  498,  355,  356,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,
  367,   -1,   -1,    0,  371,   -1,   -1,  276,   -1,  384,
   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  397,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  415,   -1,   -1,   -1,   41,  260,   -1,   44,  263,   -1,
   -1,   -1,  267,   -1,   40,   -1,   -1,   43,  327,   45,
  427,  276,   59,   -1,   -1,   -1,   -1,  442,  435,   -1,
   -1,   -1,   58,   -1,   -1,  290,   -1,   63,  445,  454,
   -1,  296,  297,   -1,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,  459,  460,  461,  462,  463,  464,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,  473,   -1,   -1,   -1,
   -1,   -1,  327,   -1,   -1,  482,  483,  484,  485,  486,
  487,  488,   -1,  490,   -1,   -1,   -1,  494,  495,   -1,
  497,  498,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  355,  356,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   58,  427,   -1,
   -1,   -1,   63,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  427,  482,  483,  484,  485,  486,  487,  488,
  435,  490,   -1,   -1,   -1,  494,  495,   -1,  497,  498,
  445,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,  260,  490,   -1,  263,  283,  494,
  495,  267,  497,  498,   -1,   -1,  291,   -1,  271,   40,
  276,   42,   43,  298,   45,  300,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  290,   -1,   -1,   58,   -1,  314,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,  319,  328,   -1,  322,   -1,   -1,   -1,   -1,
  313,  314,  329,  316,  339,  332,  319,   -1,   -1,  336,
   -1,  327,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,
  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  260,
   -1,   -1,  263,  360,   -1,   -1,  267,   -1,   -1,  355,
  356,   -1,   -1,   -1,   40,  276,   -1,   43,   -1,   45,
   -1,  367,   -1,   -1,   -1,  371,   -1,  384,   -1,  290,
   -1,  388,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
  397,  406,   -1,  408,   -1,   -1,   -1,   -1,   -1,  414,
   -1,   -1,  417,   -1,  419,  420,  399,   -1,  415,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,  444,
   -1,  427,   -1,   -1,   -1,  442,   -1,   -1,   -1,  435,
   -1,  434,   -1,   -1,  355,  356,   -1,  454,   -1,  445,
   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,  455,  459,  460,  461,  462,  463,  464,  462,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,   -1,  490,   -1,  489,   -1,  494,  495,
   -1,  497,  498,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,  427,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,  445,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,   -1,  490,
   -1,   -1,   -1,  494,  495,   -1,  497,  498,   -1,   -1,
   -1,  267,  353,   -1,  355,  356,   -1,   -1,   -1,   40,
  276,   42,   43,   -1,   45,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  290,   -1,   -1,   58,   -1,   -1,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,  484,  485,  486,  487,  488,   -1,  490,
   -1,   -1,   -1,  494,  495,   -1,  497,  498,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,  485,
  486,  487,  488,   -1,  490,  271,   -1,   -1,  494,  495,
   -1,  497,  498,   -1,   40,   -1,  267,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,  302,   63,   -1,  290,
   -1,   -1,   -1,  309,   -1,  296,  297,  313,  314,   -1,
  316,   -1,   -1,  319,   -1,  260,   -1,   -1,   -1,   -1,
   40,   -1,  267,   43,   -1,   45,   -1,  333,   -1,   -1,
   -1,  276,   -1,  339,   -1,   -1,  327,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,  353,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,  419,   -1,   -1,   -1,   -1,   40,   41,
   -1,   43,  367,   45,   -1,   -1,  371,   -1,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,  444,   -1,
   -1,   63,   -1,   -1,  435,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,  445,   -1,  462,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,  460,
  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,  489,   -1,   -1,   -1,   -1,   -1,   -1,
  435,  482,  483,  484,  485,  486,  487,  488,   -1,  490,
  445,  267,   -1,  494,  495,   -1,  497,  498,   -1,   -1,
  276,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,  473,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,   -1,  490,   -1,  267,   -1,  494,
  495,   -1,  497,  498,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  327,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  462,   -1,   -1,  371,   -1,  327,   -1,   -1,
   -1,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  490,  491,   -1,  353,   -1,  355,  356,  497,  498,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  367,   -1,   -1,
   -1,  371,   -1,  419,  276,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  290,  435,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   58,  445,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  435,  482,  483,  484,  485,
  486,  487,  488,   -1,  490,  445,   -1,   -1,  494,  495,
   -1,  497,  498,  355,  356,   -1,   -1,   -1,   -1,  459,
  460,  461,  462,  463,  464,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  482,  483,  484,  485,  486,  487,  488,   -1,
  490,   -1,   -1,   -1,  494,  495,   -1,  497,  498,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  290,  435,   43,   -1,   45,   -1,  296,  297,
   -1,   -1,   -1,  445,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,  459,  460,  461,
  462,  463,  464,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  482,  483,  484,  485,  486,  487,  488,   -1,  490,   -1,
   -1,   -1,  494,  495,   -1,  497,  498,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  367,
   -1,   -1,   -1,  371,   -1,   40,  276,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   58,  462,   -1,  296,  297,   63,   -1,
   -1,   -1,   -1,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  490,  491,   -1,   -1,   -1,  327,   -1,  497,
  498,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,  456,   -1,
   -1,  459,  460,  461,  462,  463,  464,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,
  488,   -1,  490,   -1,   -1,   -1,  494,  495,   -1,  497,
  498,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  276,   -1,   43,
   -1,   45,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,  290,   -1,   -1,   58,  445,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  456,   -1,   -1,  459,
  460,  461,  462,  463,  464,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   -1,  482,  483,  484,  485,  486,  487,  488,   -1,
  490,   -1,   -1,   -1,  494,  495,   -1,  497,  498,   -1,
   -1,   -1,  267,   -1,  353,   -1,  355,  356,   -1,   -1,
   -1,  276,   -1,   42,   43,   -1,   45,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,  290,   -1,   -1,   -1,   58,
  462,  296,  297,   -1,   63,   -1,   -1,   -1,   -1,   -1,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,
   -1,   -1,  327,    0,   -1,  497,  498,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,  445,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   41,   -1,  371,   44,   -1,   -1,
  459,  460,  461,  462,  463,  464,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  482,  483,  484,  485,  486,  487,  488,
   -1,  490,   -1,   -1,   -1,  494,  495,   -1,  497,  498,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,    0,   -1,   -1,   -1,   -1,
  435,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,
  445,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  459,  460,  461,  462,  463,  464,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,  473,   44,
   -1,   -1,   -1,  327,    0,   -1,   -1,  482,  483,  484,
  485,  486,  487,  488,   59,  490,   -1,   -1,   -1,  494,
  495,  260,  497,  498,   -1,   -1,   -1,   -1,  267,   -1,
   -1,  355,  356,   -1,   -1,   -1,    0,  276,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   41,   -1,  371,   44,   -1,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   59,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,    0,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  435,   -1,   -1,  353,  262,  355,  356,   -1,   -1,
   -1,  445,   -1,   -1,   -1,   -1,   41,   -1,  367,   44,
   -1,   -1,  371,   -1,   -1,  459,  460,  461,  462,  463,
  464,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,  483,
  484,  485,  486,  487,  488,   -1,  490,   -1,   -1,   -1,
  494,  495,  319,  497,  498,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,
   -1,   -1,   -1,   -1,  341,   -1,  435,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  445,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,  262,   -1,   -1,
  459,  460,  461,  462,  463,  464,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,  482,  483,  484,  485,  486,  487,  488,
  397,  490,   -1,   -1,   -1,  494,  495,   -1,  497,  498,
    0,   -1,   -1,   -1,   -1,   -1,  262,   41,  415,   -1,
   44,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   59,   -1,  332,   -1,   -1,
    0,  336,   -1,   -1,   -1,  442,  341,   -1,  262,  344,
   -1,   41,   -1,   -1,   44,   -1,   -1,  454,   -1,  456,
    0,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   59,
   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   41,   -1,  329,   44,   -1,  332,   -1,   -1,  384,
  336,   -1,  387,  388,   -1,  341,   -1,  262,  344,   59,
   -1,   41,  397,   -1,   44,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  360,  329,   -1,   -1,  332,   59,
  415,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
    0,  387,  388,   -1,   -1,   -1,  360,  442,   -1,   -1,
   -1,  397,   -1,   -1,  319,   -1,   -1,  322,   -1,  454,
   -1,  456,   -1,   -1,  329,   -1,   -1,  332,   -1,  415,
  384,  336,   -1,  387,  388,   -1,  341,   -1,   -1,  344,
   -1,   41,   -1,  397,   44,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,  360,  442,   -1,   -1,   59,
   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,  454,   -1,
  456,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,    0,  387,  388,   -1,   -1,   -1,   -1,  442,   -1,
   41,   -1,  397,   44,   -1,   -1,   -1,   -1,  262,   -1,
  454,   -1,  456,   -1,   -1,   -1,   -1,   -1,   59,   -1,
  415,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   59,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,  454,
   -1,  456,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,
   -1,   -1,  262,   -1,   -1,  329,   -1,   -1,  332,   -1,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,  262,   -1,   -1,   41,   -1,   -1,   44,  319,
   -1,   -1,  322,   -1,   -1,   -1,  360,   -1,   -1,  329,
   -1,   -1,  332,   59,   -1,   -1,  336,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,  319,
  384,   -1,  322,  387,  388,   -1,   -1,   -1,   -1,  329,
  360,   -1,  332,  397,   -1,    0,  336,   -1,   -1,  319,
   -1,  341,  322,   -1,  344,   -1,   -1,   -1,   -1,  329,
   -1,  415,  332,   -1,  384,    0,  336,  387,  388,   -1,
  360,  341,  262,   -1,  344,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,  442,   44,
  360,   -1,   -1,   -1,  384,  415,   -1,  387,  388,   -1,
  454,   -1,  456,   -1,   59,   -1,   41,  397,   -1,   44,
   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,  262,  442,   -1,   59,  415,   -1,  397,   -1,  319,
   -1,   -1,  322,   -1,  454,   -1,  456,   -1,   -1,  329,
   -1,   -1,  332,   -1,   -1,  415,  336,   -1,   -1,    0,
   -1,  341,  442,  262,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  454,   -1,  456,   -1,   -1,   -1,
  360,   -1,  442,   -1,   -1,   -1,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,  454,   -1,  456,   -1,  329,   -1,
   41,  332,   -1,   44,  384,  336,   -1,  387,  388,   -1,
  341,   -1,   -1,  344,   -1,   -1,   -1,  397,   59,   -1,
  319,   -1,   -1,  322,   -1,   -1,  262,   -1,   -1,  360,
  329,   -1,   -1,  332,   -1,  415,    0,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,  360,  442,   -1,   -1,   -1,  397,   -1,    0,   -1,
   -1,   -1,   -1,   -1,  454,   -1,  456,   41,   -1,   -1,
   44,   -1,   -1,  319,  415,  384,  322,   -1,  387,  388,
   -1,   -1,   -1,  329,   -1,   59,  332,   -1,  397,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   41,
   -1,  442,   44,   -1,   -1,   -1,  415,  262,   -1,   -1,
   -1,   -1,   -1,  454,  360,  456,   -1,   59,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,   -1,  454,   -1,  456,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,  319,   44,   -1,  322,   -1,  415,
   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,
   59,  336,   -1,   -1,  319,   -1,  341,  322,   -1,  344,
   -1,   -1,   -1,   -1,  329,   -1,  442,  332,   -1,   -1,
   -1,  336,   -1,   -1,   -1,  360,  341,   -1,  454,  344,
  456,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   41,   42,   43,   -1,   45,  384,
   47,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  415,   -1,  397,   60,   61,   62,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  415,  332,   -1,   -1,   -1,  336,   -1,  442,  262,   -1,
  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  454,
   -1,  456,   -1,   -1,   -1,   42,   43,  442,   45,  360,
   47,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  454,
  262,  456,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,  302,   -1,   -1,  319,  397,   -1,  322,  309,
   -1,   -1,   -1,  313,  314,  329,  316,   -1,  332,  319,
   -1,   -1,  336,   -1,  415,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,  333,   -1,   -1,   -1,  319,   -1,  339,
  322,   -1,   -1,  262,   -1,   -1,  360,  329,   -1,   -1,
  332,  442,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  454,   -1,  456,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,  360,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,
  319,  415,  384,  322,   -1,  387,  388,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,  419,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,  442,   -1,
   -1,   -1,   -1,  415,  434,  272,   -1,   -1,   -1,   -1,
  454,  360,  456,  280,  444,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,  453,   -1,  455,   -1,   -1,   -1,   -1,
  442,   -1,  462,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,  454,   -1,  456,   -1,   -1,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,  489,
   -1,   -1,   -1,   -1,  273,  272,  415,  334,  277,   -1,
   -1,   -1,   -1,  280,   -1,  342,  285,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  296,   -1,   -1,
  299,   -1,   -1,  442,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  454,  277,  456,   -1,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,   -1,  325,   -1,
   -1,  292,   -1,   -1,   -1,  296,   -1,  334,  299,   -1,
   -1,  340,   -1,   -1,   -1,  342,   -1,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  431,  374,   -1,  376,   -1,  340,
  377,   -1,  379,  380,  381,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,   -1,  273,   -1,   -1,   -1,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,
   -1,   -1,   -1,  374,  292,  376,   -1,   -1,  296,   -1,
   -1,  299,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,  447,   -1,
   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  340,  462,  425,   -1,   -1,  273,  346,  347,
  348,  277,  350,  351,  352,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,  482,  483,   -1,  447,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,  374,   -1,  376,   -1,
  499,  500,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  482,  483,   -1,  292,   -1,   -1,   -1,  296,  407,
   -1,  299,   -1,   -1,  340,   -1,   -1,   -1,  499,  500,
  346,  347,  348,   -1,  350,  351,  352,  425,  354,   -1,
  273,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  447,
  376,  273,  340,  296,   -1,  277,  299,   -1,  346,  347,
  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,
   -1,  407,   -1,   -1,  482,  483,  374,   -1,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,  425,
   -1,  499,  500,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,  340,  407,
   -1,  447,   -1,   -1,  346,  347,  348,   -1,  350,  351,
  352,  374,  354,  376,   -1,   -1,  462,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  482,  483,   -1,  447,
   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  499,  500,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  425,   -1,   -1,  407,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  482,  483,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  425,  447,   -1,   -1,   -1,   -1,   -1,
   -1,  499,  500,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  447,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  482,
  483,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  499,  500,   -1,   -1,
  482,  483,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  499,  500,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 500
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL","RECREATE",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING","KW_DESCRIPTOR","FIRST",
"SKIP","NUMBER64BIT","SCALEDINT","LIMIT","CONNECTION_ID","TRANSACTION_ID",
"LARGEINT","KW_INT64",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"function : SUBSTRING '(' value FROM pos_short_integer ')'",
"function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
line_start_bk = line_start;
lines_bk = lines;
first_time = TRUE;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (g_file->fil_partitions)
    {
    if (!g_file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*g_file->fil_length,g_file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv(const char*);

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 19:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 26:
{ yyval = yyvsp[0]; }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_list (yyvsp[0]); }
break;
case 31:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 32:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 33:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 39:
{ yyval = 0; }
break;
case 40:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 41:
{ yyval = 0; }
break;
case 42:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 50:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 63:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = yyvsp[0];}
break;
case 72:
{ yyval = yyvsp[0]; }
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 76:
{ g_field->fld_dtype = dtype_blob; }
break;
case 77:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 78:
{ yyval = (NOD) NULL; }
break;
case 80:
{ yyval = yyvsp[-1]; }
break;
case 82:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 83:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 86:
{ yyval = yyvsp[-1]; }
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 95:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 109:
{ yyval = NULL; }
break;
case 110:
{ yyval = make_list (yyvsp[0]); }
break;
case 112:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 113:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 114:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 115:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 116:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 117:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 118:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 119:
{ yyval = (NOD) 0;}
break;
case 120:
{ yyval = yyvsp[-1]; }
break;
case 121:
{ yyval = (NOD) NULL; }
break;
case 124:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 125:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 126:
{ yyval = NULL; }
break;
case 127:
{ yyval = NULL; }
break;
case 128:
{ yyval = yyvsp[0]; }
break;
case 129:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = (NOD) NULL; }
break;
case 133:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 137:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 138:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 139:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 144:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 145:
{yyval = (NOD) NULL;}
break;
case 148:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 149:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 150:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 151:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 152:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 153:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 154:
{yyval = (NOD) NULL;}
break;
case 157:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 161:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 162:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 163:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 164:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 165:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 166:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 167:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 168:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 169:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 170:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 171:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 173:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 174:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 175:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 178:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 179:
{ g_file  = make_file ();}
break;
case 184:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 192:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 193:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 194:
{ yyval = yyvsp[0]; }
break;
case 195:
{ yyval = yyvsp[0]; }
break;
case 196:
{ yyval = (NOD) NULL; }
break;
case 198:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 201:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 202:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 203:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 204:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 207:
{ yyval = NULL; }
break;
case 208:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = (NOD) NULL; }
break;
case 211:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 212:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 213:
{ yyval = yyvsp[-1]; }
break;
case 214:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 227:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 228:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 229:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 232:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = yyvsp[0]; }
break;
case 235:
{ yyval = NULL ;}
break;
case 240:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 241:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 242:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 243:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 244:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 245:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 246:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 247:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 248:
{ yyval = NULL;}
break;
case 249:
{ yyval = yyvsp[0];}
break;
case 250:
{ yyval = yyvsp[0];}
break;
case 251:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 252:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 253:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 254:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 255:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 256:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 257:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 258:
{ yyval = make_list (yyvsp[-1]); }
break;
case 259:
{ yyval = NULL; }
break;
case 260:
{ yyval = yyvsp[0]; }
break;
case 261:
{ yyval = NULL; }
break;
case 263:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 264:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 265:
{ yyval = make_list (yyvsp[0]); }
break;
case 266:
{ yyval = NULL; }
break;
case 268:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 272:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 273:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 274:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 276:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 285:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 289:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 290:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 291:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 292:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 293:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 294:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 295:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 296:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 297:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 298:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 299:
{ yyval = make_list (yyvsp[0]); }
break;
case 300:
{ yyval = make_list (yyvsp[-1]); }
break;
case 301:
{ yyval = NULL; }
break;
case 302:
{ yyval = make_list (yyvsp[0]); }
break;
case 303:
{ yyval = make_list (yyvsp[-1]); }
break;
case 304:
{ yyval = NULL; }
break;
case 307:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 311:
{ yyval = NULL; }
break;
case 313:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 316:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 317:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 321:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 322:
{ yyval = make_list (yyvsp[0]); }
break;
case 323:
{ yyval = make_list (yyvsp[-1]); }
break;
case 324:
{ yyval = NULL; }
break;
case 328:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 333:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 337:
{ yyval = make_list (yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = yyvsp[-1]; }
break;
case 344:
{ beginning = lex_position(); }
break;
case 345:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 346:
{ beginning = last_token; }
break;
case 347:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 348:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 349:
{ yyval = 0; }
break;
case 350:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 351:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 353:
{ yyval = NULL; }
break;
case 354:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 355:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 373:
{ yyval = NULL; }
break;
case 374:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 377:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 378:
{ yyval = yyvsp[0]; }
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 381:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 382:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 386:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 387:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 388:
{ yyval = yyvsp[0]; }
break;
case 389:
{ yyval = yyvsp[0]; }
break;
case 390:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 391:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 395:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 396:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 397:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = yyvsp[0]; }
break;
case 400:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 401:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 402:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 403:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 428:
{ yyval = NULL; }
break;
case 429:
{ yyval = NULL; }
break;
case 430:
{ yyval = NULL; }
break;
case 431:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 432:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 433:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 434:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 435:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 436:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 437:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 438:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 440:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 441:
{ yyval = yyvsp[0]; }
break;
case 442:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 443:
{ yyval = yyvsp[0]; }
break;
case 444:
{ yyval = yyvsp[0]; }
break;
case 446:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 447:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 449:
{ yyval = NULL; }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = yyvsp[0]; }
break;
case 453:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 454:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 455:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 456:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 457:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 458:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 459:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 460:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 462:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 463:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 464:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 469:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 470:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 472:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 473:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 474:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 480:
{ 
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 481:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 482:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 483:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 484:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 485:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 490:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 491:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 492:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 493:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 494:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 495:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 496:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 497:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 498:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 499:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 501:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 502:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 515:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 516:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 517:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 518:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 519:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 520:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 523:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 527:
{ yyval = yyvsp[-1]; }
break;
case 528:
{ yyval = 0; }
break;
case 532:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 533:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 534:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 535:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 536:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 539:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 540:
{ yyval = (NOD) NULL; }
break;
case 542:
{ yyval = (NOD) NULL; }
break;
case 543:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 545:
{ yyval = (NOD) NULL; }
break;
case 547:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 552:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 553:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 554:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 555:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 556:
{ yyval = yyvsp[0];}
break;
case 558:
{ yyval = yyvsp[0];}
break;
case 559:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 562:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 563:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 564:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 565:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 566:
{ yyval = 0; }
break;
case 567:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 568:
{ yyval = (NOD) NOD_SHARED; }
break;
case 569:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 570:
{ yyval = (NOD) 0; }
break;
case 571:
{ yyval = (NOD) NOD_READ; }
break;
case 572:
{ yyval = (NOD) NOD_WRITE; }
break;
case 574:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 575:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 577:
{ yyval = 0; }
break;
case 579:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 580:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 581:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 582:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 583:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 584:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 585:
{ yyval = make_list (yyvsp[0]); }
break;
case 586:
{ yyval = 0; }
break;
case 588:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 589:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 590:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 594:
{ yyval = yyvsp[0]; }
break;
case 595:
{ yyval = 0; }
break;
case 596:
{ yyval = yyvsp[0]; }
break;
case 597:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 598:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 599:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 600:
{ yyval = 0; }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 608:
{ yyval = make_list (yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 613:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = yyvsp[-1]; }
break;
case 615:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 616:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 617:
{ yyval = make_list (yyvsp[-1]); }
break;
case 618:
{ yyval = NULL; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 626:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 627:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 628:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 629:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 630:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 631:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 632:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 633:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 634:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 635:
{ yyval = yyvsp[-1]; }
break;
case 636:
{ yyval = yyvsp[0]; }
break;
case 637:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = yyvsp[0]; }
break;
case 640:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 641:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 642:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 643:
{ yyval = 0; }
break;
case 644:
{ yyval = make_list (yyvsp[0]); }
break;
case 645:
{ yyval = 0; }
break;
case 647:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 650:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 651:
{ yyval = yyvsp[0]; }
break;
case 652:
{ yyval = 0; }
break;
case 653:
{ yyval = yyvsp[0]; }
break;
case 654:
{ yyval = 0; }
break;
case 655:
{ yyval = yyvsp[0]; }
break;
case 656:
{ yyval = 0;}
break;
case 657:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 658:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 659:
{ yyval = 0;}
break;
case 660:
{ yyval = yyvsp[0]; }
break;
case 661:
{ yyval = 0; }
break;
case 662:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 663:
{ yyval = 0; }
break;
case 664:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 665:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 666:
{ yyval = 0; }
break;
case 667:
{ yyval = 0; }
break;
case 669:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 670:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 673:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 674:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 675:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 676:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 678:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 679:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 680:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 682:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 686:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 687:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 690:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 691:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 693:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 697:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 699:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 704:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 705:
{ yyval = yyvsp[0]; }
break;
case 707:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 710:
{ yyval = NULL; }
break;
case 711:
{ yyval = make_list (yyvsp[-1]); }
break;
case 713:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 716:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 717:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 721:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 722:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 723:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 734:
{ yyval = yyvsp[-1]; }
break;
case 735:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 736:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 737:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 738:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 744:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 745:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 746:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 747:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 748:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 749:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 750:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 751:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 753:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 754:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 755:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 756:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 757:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 758:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 761:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 763:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 764:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 765:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 766:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 767:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 768:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 769:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 771:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 772:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 773:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 774:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 775:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 778:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 779:
{ yyval = make_list (yyvsp[-1]); }
break;
case 780:
{ yyval = yyvsp[-1]; }
break;
case 781:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 782:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 790:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 791:
{ yyval = yyvsp[0]; }
break;
case 792:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 793:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 794:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 795:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 796:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 797:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 798:
{ yyval = yyvsp[-1]; }
break;
case 799:
{ yyval = yyvsp[-1]; }
break;
case 802:
{ yyval = yyvsp[0]; }
break;
case 803:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 804:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 805:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 806:
{ yyval = yyvsp[0]; }
break;
case 807:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 808:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 809:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 810:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 812:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 814:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 815:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 816:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 817:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 818:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 819:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 821:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 822:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 823:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 824:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 830:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 831:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 832:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 833:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 834:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 835:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 836:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 837:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 838:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 839:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 840:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 841:
{ yyval = yyvsp[0]; }
break;
case 842:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 844:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 845:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 846:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 847:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 848:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 850:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 851:
{ yyval = yyvsp[0];}
break;
case 852:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 853:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 854:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 855:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 856:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 857:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 858:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 859:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 860:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 861:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 862:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 863:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 864:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 865:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 866:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 867:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 868:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
				MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
				MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 869:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 870:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 871:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 872:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 873:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 874:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 875:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 876:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 877:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 878:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 881:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
