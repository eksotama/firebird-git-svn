
//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
// Parser skeleton modified for use in the Firebird project by Nickolay Samofatov
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dsql.tab.h"

#define YYERROR_DETAILED

typedef int Yshort;

/* 
*	PROGRAM:	Dynamic SQL runtime support
*	MODULE:		parse.y
*	DESCRIPTION:	Dynamic SQL parser
*
* The contents of this file are subject to the Interbase Public
* License Version 1.0 (the "License"); you may not use this file
* except in compliance with the License. You may obtain a copy
* of the License at http://www.Inprise.com/IPL.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
* or implied. See the License for the specific language governing
* rights and limitations under the License.
*
* The Original Code was created by Inprise Corporation
* and its predecessors. Portions created by Inprise Corporation are
* Copyright (C) Inprise Corporation.
*
* All Rights Reserved.
* Contributor(s): ______________________________________.
*
* 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
* 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
* 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
*   different node types so DDL can tell which is which.
* 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
* 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
* 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
* 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
* 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
* 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
*   in rdb$*_source fields when altering domains plus one unexpected null pointer.
* 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
*   and not in gen.c; this closes Bug #450301.
* 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
* 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
* 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
*			clashes with normal DEBUG macro.
* 2002.07.30 Arno Brinkman:  
* 2002.07.30 	Let IN predicate handle value_expressions
* 2002.07.30 	tokens CASE, NULLIF, COALESCE added
* 2002.07.30 	See block < CASE expression > what is added to value as case_expression
* 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
* 2002.07.30 	new group_by_function and added to grp_column_elem
* 2002.07.30 	cast removed from function and added as cast_specification to value
* 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
* 2002.08.04 Dmitry Yemanov: ALTER VIEW
* 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
* 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
* 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
* 2002.09.01 Dmitry Yemanov: RECREATE VIEW
* 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
*							exception handling in SPs/triggers,
*							implemented ROWS_AFFECTED system variable
* 2002.10.21 Nickolay Samofatov: Added support for explicit pessimistic locks
* 2002.10.29 Nickolay Samofatov: Added support for savepoints
* 2002.12.03 Dmitry Yemanov: Implemented ORDER BY clause in subqueries.
* 2002.12.18 Dmitry Yemanov: Added support for SQL-compliant labels and LEAVE statement
* 2002.12.28 Dmitry Yemanov: Added support for parametrized events.
* 2003.01.14 Dmitry Yemanov: Fixed bug with cursors in triggers.
* 2003.01.15 Dmitry Yemanov: Added support for runtime trigger action checks.
* 2003.02.10 Mike Nordell  : Undefined Microsoft introduced macros to get a clean compile.
* 2003.05.24 Nickolay Samofatov: Make SKIP and FIRST non-reserved keywords
* 2003.06.13 Nickolay Samofatov: Make INSERTING/UPDATING/DELETING non-reserved keywords
* 2003.07.01 Blas Rodriguez Somoza: Change DEBUG and IN to avoid conflicts in win32 build/bison
* 2003.08.11 Arno Brinkman: Changed GROUP BY to support all expressions and added "AS" support
*						   with table alias. Also removed group_by_function and ordinal.
* 2003.08.14 Arno Brinkman: Added support for derived tables.
* 2003.10.05 Dmitry Yemanov: Added support for explicit cursors in PSQL.
* 2004.01.16 Vlad Horsun: added support for default parameters and 
*   EXECUTE BLOCK statement
*/

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../jrd/ibase.h"
#include "../jrd/flags.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd.h"
#include "../jrd/err_proto.h"
#include "../jrd/intlobj_new.h"

/* since UNIX isn't standard, we have to define
  stuff which is in <limits.h> (which isn't available
  on all UNIXes... */

const long SHRT_POS_MAX			= 32767;
const long SHRT_UNSIGNED_MAX	= 65535;
const long SHRT_NEG_MAX			= 32768;
const long LONG_POS_MAX			= 2147483647;
const int POSITIVE	= 0;
const int NEGATIVE	= 1;
const int UNSIGNED	= 2;

/*const int MIN_CACHE_BUFFERS	= 250;*/
/*const int DEF_CACHE_BUFFERS	= 1000;*/

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE	2048
#define YYMAXDEPTH	2048

/* Make bison allocate static stack */
#define YYINITDEPTH 2048

/* Using this option causes build problems on Win32 with bison 1.28*/
/*#define YYSTACK_USE_ALLOCA 1*/

typedef dsql_nod* YYSTYPE;
#define YYSTYPE YYSTYPE
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

#define YYMALLOC gds__alloc
#define YYFREE gds__free

static const char INTERNAL_FIELD_NAME[] = "DSQL internal"; /* NTX: placeholder */
static const char NULL_STRING[] = "";

inline SLONG trigger_type_suffix(const int slot1, const int slot2, const int slot3)
{
	return ((slot1 << 1) | (slot2 << 3) | (slot3 << 5));
}


dsql_nod* DSQL_parse;


#define YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous

#include "../dsql/chars.h"

const int MAX_TOKEN_LEN = 256;

static const TEXT* lex_position();
#ifdef NOT_USED_OR_REPLACED
static bool		long_int(dsql_nod*, SLONG*);
#endif
static dsql_fld*	make_field (dsql_nod*);
static dsql_fil*	make_file();
static dsql_nod*	make_list (dsql_nod*);
static dsql_nod*	make_node (NOD_TYPE, int, ...);
static dsql_nod*	make_parameter (void);
static dsql_nod*	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
#ifdef NOT_USED_OR_REPLACED
static bool	short_int(dsql_nod*, SLONG*, SSHORT);
#endif
static void	stack_nodes (dsql_nod*, DsqlNodStack&);
inline static int	yylex (USHORT, USHORT, USHORT, bool*);

static void	yyerror(const TEXT*);
static void	yyabandon (SLONG, ISC_STATUS);

inline void check_bound(const char* const to, const char* const string)
{
	if ((to - string) >= MAX_TOKEN_LEN)
		yyabandon (-104, isc_token_too_long);
}

inline void check_copy_incr(char*& to, const char ch, const char* const string)
{
	check_bound(to, string); 
	*to++ = ch;
}

struct LexerState {
	/* This is, in fact, parser state. Not used in lexer itself */
	dsql_fld* g_field;
	dsql_fil* g_file;
	dsql_nod* g_field_name;
	int dsql_debug;
	
	/* Actual lexer state begins from here */
	const TEXT* beginning;
	const TEXT* ptr;
	const TEXT* end;
	const TEXT* last_token;
	const TEXT* line_start;
	const TEXT* last_token_bk;
	const TEXT* line_start_bk;
	SSHORT	lines, att_charset;
	SSHORT	lines_bk;
	int  prev_keyword;
	USHORT	param_number;
	
	int yylex (
		USHORT	client_dialect,
		USHORT	db_dialect,
		USHORT	parser_version,
		bool* stmt_ambiguous);
};

/* Get ready for thread-safety. Move this to BISON object pointer when we 
  switch to generating "pure" reenterant parser. */
static LexerState lex;

static int yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   10,   10,   10,   24,   24,   23,   23,
   23,   33,   33,   28,   34,   34,   34,   34,   34,   27,
   27,   32,   32,   29,   16,   16,   16,   37,   37,   38,
   38,   26,   26,   39,   39,   39,   39,   41,   41,   41,
   41,   40,   40,   42,   42,   42,   30,   30,   47,   31,
   31,   48,   48,    7,   49,   49,   51,   56,   56,   56,
   53,   53,   53,   60,   60,   61,   63,   63,   63,   63,
   54,   54,   64,   64,   65,   65,   65,   65,   65,   50,
   67,   67,    6,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   14,   84,   84,   84,   84,
   84,   15,   90,   90,   90,   70,   89,   93,   95,   71,
   71,   74,   74,   74,   82,  102,  102,  102,  103,  103,
  104,  104,  105,  105,  109,  109,   81,  112,  112,  118,
  114,  114,  116,  116,  120,  120,  121,  122,  122,  123,
  124,   79,   83,   80,  106,  106,  127,  128,  128,  130,
  130,  131,  131,  131,  131,  131,  129,  129,  132,  132,
  133,  133,  133,  110,  135,  136,  136,  137,  137,  138,
  138,  139,  139,  139,  108,  108,  108,   76,   86,  140,
  140,  140,  141,  141,  142,  142,  143,  143,  143,  148,
   98,   98,  145,  145,  117,  117,  111,  152,  153,   62,
  119,  119,  119,  119,  119,  119,  146,  146,  160,  160,
  161,  163,  163,  163,  163,  163,  144,  162,  162,  166,
  166,  166,  166,  168,  169,  170,  165,  165,  164,  164,
  164,  164,  164,  171,  172,  173,  173,  173,  173,   75,
   85,   91,  178,  174,  174,  175,  175,  179,  179,  181,
  180,  180,  183,  182,  182,  182,  176,  176,  184,  184,
  185,  187,  187,  188,  186,  186,  190,  190,  190,  189,
  192,  192,  177,  194,  194,  194,  195,  195,  193,  193,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  198,  198,  198,  198,
  204,  204,  205,  201,  211,  212,  202,  209,  209,  206,
  216,  200,  217,  214,  214,  214,  214,  210,  213,  213,
  208,  208,  208,  215,  215,  196,  196,  221,  222,  222,
  223,  223,  223,  223,  207,  207,  207,  225,  227,  226,
  228,   12,  229,  229,  229,  230,  230,  230,   13,  232,
  232,  233,  233,  234,   78,   87,  150,   99,  101,  115,
  237,  237,   77,   88,   92,  238,  238,  238,  239,  242,
  242,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  240,  240,  241,    2,
  245,  245,  245,  245,  245,  245,  245,  245,  245,  251,
  251,  255,  255,  255,  255,  255,  255,  255,  246,  246,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  250,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  258,  258,  260,  260,  259,  257,  257,  257,  252,
  252,  253,  253,  253,  254,  264,  264,  265,  265,  248,
  249,  249,  266,  266,  266,  266,  266,  247,  267,  267,
  268,  268,    9,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  113,  113,  147,  147,
  272,  272,  275,  275,  277,  277,   57,   57,  274,  274,
  274,  274,  274,  274,  274,  274,  274,  281,  281,  273,
  273,  273,  273,  283,  283,  282,  282,  282,   59,   59,
  278,  278,  278,  276,  276,  276,  287,  287,  287,  286,
  286,  285,  285,  285,  279,  279,  288,  288,  288,  289,
  289,  280,  280,  280,  280,  290,  290,   20,   20,   20,
  292,  292,  292,   18,   18,   18,  294,  295,  298,  298,
  296,  300,  300,    5,   17,  299,  299,  301,  301,  302,
  302,  291,  303,  303,  304,  304,  305,  305,  305,  305,
  305,  305,  306,  306,  307,  307,  308,  308,  312,  312,
  312,  313,  313,  313,  314,  314,  314,  309,  309,  309,
  310,  311,  316,  316,  316,  317,  317,  315,  315,  318,
  320,  320,  319,  319,  293,    4,    4,    4,  321,  323,
  323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
  323,  323,  323,  325,  325,  326,  322,  322,   19,  327,
  327,  329,  329,  328,  328,  236,  333,  334,  330,  330,
  330,  335,  337,  338,  338,  338,  338,  346,  346,  346,
  347,  347,  347,  339,  339,  340,  340,  349,  349,  350,
  350,  351,  351,  341,  353,  353,  354,  354,  356,  356,
  356,  358,  359,  359,  360,  360,  362,  362,  355,  355,
  355,  363,  364,  365,  367,  367,  368,  369,  357,  357,
  370,  370,  371,  371,   25,  366,  366,  366,  366,  366,
  372,  372,  343,  343,  373,  373,  374,  344,  344,  342,
  342,  345,  345,  375,  376,  376,  376,  376,  376,  377,
  377,  378,  378,  379,  379,  380,  380,  380,  381,  381,
  382,  382,  331,  331,  383,  383,  384,   72,   72,   72,
  386,  386,  385,  385,  332,  332,  332,   11,   11,    8,
    8,  389,  390,   21,   21,  392,  393,  388,  388,  388,
  391,  394,  394,  199,  203,    3,    3,  397,  397,  397,
  399,  399,  400,  398,  398,  401,  401,   35,   35,   97,
   96,   96,  387,  387,  402,  403,  403,  219,  219,  219,
  149,  395,  395,  125,  125,  125,  125,  405,  405,  405,
  405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
  406,  406,  406,  406,  406,  406,  406,  406,  412,  412,
  412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
  412,  412,  412,  412,  418,  418,  407,  407,  408,  408,
  409,  409,  409,  409,  410,  410,  414,  414,  415,  415,
  415,  415,  413,  416,  411,  411,  417,  417,  417,  419,
  419,  420,  100,  100,  100,  100,  100,  100,  100,  100,
  100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
  100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
  159,  159,  159,  427,  427,  421,  231,  231,  154,  154,
  428,  428,  428,  428,  428,  423,  423,  423,  423,  423,
  235,  155,  155,  156,  157,  157,  157,  157,  157,   55,
   55,   22,   22,  244,  429,   58,  284,  263,  263,  107,
  422,  422,  422,  430,  430,  430,  430,  430,  430,  430,
  430,  430,  430,  430,  431,  431,  433,  434,  434,  434,
  436,  437,  437,  438,  432,  432,  432,  432,  439,  441,
  441,  440,  440,  440,  440,  442,  442,  442,  396,  396,
  424,  425,  425,  443,  443,  443,  444,  444,  445,  445,
  448,  448,  446,  446,  451,  451,  450,  447,  449,  426,
  426,  435,  435,  435,  435,  435,  435,  435,  435,  348,
  348,  336,  336,  158,   52,   68,  134,  151,  404,  167,
  191,  271,   94,   66,  224,  126,   73,  352,  220,  324,
   36,   45,  361,  270,   43,   46,  218,   44,  297,  262,
  262,  452,  452,  452,  452,  452,  452,  452,  452,  452,
  452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
  452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
  452,  452,  452,  452,  452,  452,  452,  452,  452,
};
static int yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    8,    8,    5,    1,    0,    1,    2,
    1,    1,    3,    1,    1,    1,    1,    2,    2,    3,
    0,    3,    0,    1,    8,    8,    5,    3,    0,    3,
    0,    1,    1,    1,    3,    3,    3,    2,    2,    2,
    2,    1,    3,    1,    2,    2,    1,    3,    1,    1,
    3,    1,    2,    2,    2,    3,    8,    1,    1,    5,
    0,    1,    3,    1,    3,    3,    0,    2,    2,    1,
    1,    3,    3,    2,    0,    2,    2,    1,    3,    9,
    1,    1,    2,    2,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    4,    2,    2,    2,    2,    2,    2,    2,    1,
    0,    1,    1,    6,    6,    1,    1,    0,    0,    1,
    0,    4,    0,    1,    1,    2,    8,    1,    0,    3,
    1,    0,    1,    0,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    4,    3,    3,    1,    0,    1,    1,    2,    3,
    4,    0,    1,    2,    0,    1,    1,    5,    5,    3,
    2,    0,    1,    3,    1,    1,    6,    3,    2,    6,
    2,    1,    2,    2,    2,    0,    1,    1,    2,    0,
    1,    1,    1,    1,    1,    1,    0,    1,    1,    2,
    2,    1,    1,    5,    2,    3,    2,    2,    0,    1,
    1,    1,    1,    3,    4,    8,    4,    0,    1,    1,
    2,    2,    0,    3,    3,    1,    2,    2,    2,    8,
    8,    8,    8,    3,    0,    4,    0,    1,    3,    5,
    1,    3,    2,    3,    3,    0,    1,    0,    1,    2,
    4,    1,    1,    3,    1,    0,    2,    2,    0,    6,
    1,    1,    3,    1,    2,    0,    1,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    3,    1,    3,    8,    9,    5,    8,    6,    3,
    0,    3,    2,    1,    1,    3,    3,    7,    2,    0,
    1,    1,    2,    3,    0,    1,    2,    4,    1,    3,
    2,    2,    2,    1,    1,    1,    1,    2,    2,    5,
    0,    5,    1,    3,    0,    2,    4,    0,    7,    3,
    0,    1,    3,    3,    7,    7,    0,    0,    0,    0,
    3,    0,    8,    8,    8,    1,    1,    0,    2,    1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    5,    5,    5,    5,    5,    5,    2,    0,    4,    2,
    2,    3,    2,    2,    3,    3,    2,    2,    3,    1,
    2,    3,    3,    2,    2,    2,    2,    3,    1,    3,
    3,    3,    2,    2,    4,    4,    4,    5,    4,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    0,    2,
    2,    4,    4,    5,    3,    2,    0,    2,    0,    0,
    1,    2,    2,    4,    3,    2,    2,    7,    1,    0,
    1,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    2,    2,    2,    2,    1,    1,    1,    1,
    4,    5,    1,    3,    1,    3,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,
    4,    6,    5,    3,    0,    2,    2,    0,    3,    0,
    4,    1,    5,    4,    1,    4,    1,    2,    2,    1,
    1,    1,    2,    2,    2,    2,    0,    3,    5,    1,
    1,    2,    3,    1,    2,    3,    0,    1,    1,    1,
    5,    5,    6,    1,    1,    1,    2,    4,    1,    0,
    5,    1,    0,    3,    3,    1,    0,    2,    0,    1,
    0,    3,    1,    0,    1,    2,    1,    1,    1,    1,
    1,    1,    2,    2,    1,    2,    3,    1,    1,    3,
    3,    1,    2,    3,    1,    2,    0,    3,    2,    2,
    3,    2,    1,    1,    0,    1,    1,    1,    3,    2,
    3,    0,    1,    3,    4,    5,    6,    7,    1,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    2,    1,    1,    3,    3,
    0,    2,    0,    2,    0,    3,    3,    3,    1,    4,
    4,    1,    9,    2,    1,    1,    0,    2,    4,    2,
    2,    4,    2,    1,    1,    1,    1,    1,    3,    1,
    3,    1,    0,    2,    1,    3,    1,    1,    1,    1,
    3,    6,    1,    0,    3,    0,    1,    3,    1,    1,
    1,    4,    5,    5,    1,    1,    2,    4,    4,    2,
    3,    0,    1,    2,    1,    1,    2,    2,    2,    0,
    1,    0,    3,    0,    1,    3,    1,    2,    0,    2,
    0,    2,    0,    4,    1,    2,    1,    1,    0,    1,
    3,    2,    1,    1,    2,    1,    4,    3,    1,    3,
    4,    0,    3,    0,    1,    3,    3,    1,    1,    0,
    1,    1,    2,    0,    2,    4,    0,    9,    5,    1,
    1,    7,    4,    1,    1,    8,    5,    2,    4,    0,
    4,    1,    3,    3,    1,    7,    7,    5,    3,    0,
    1,    1,    1,    2,    0,    1,    1,    1,    0,    3,
    1,    3,    1,    0,    3,    1,    3,    1,    3,    3,
    1,    1,    3,    1,    3,    3,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    1,    1,    5,    6,    5,    6,
    3,    4,    5,    6,    3,    4,    3,    4,    3,    4,
    4,    5,    4,    4,    3,    4,    1,    1,    1,    1,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    1,    1,    3,    1,    1,    1,
    1,    2,    2,    3,    0,    4,    1,    3,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    4,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    1,    1,    6,    1,    1,    1,
    4,    4,    4,    4,    1,    1,    4,    4,    7,    2,
    0,    7,    6,    6,    4,    1,    1,    1,    4,    3,
    6,    1,    1,    6,    8,    6,    1,    1,    4,    6,
    4,    5,    3,    5,    4,    5,    1,    1,    1,    4,
    6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,
};
static int yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,   22,    0,  588,  589,  590,  594,  595,  596,    0,
  689,  692,  800,  801,  804,  805,  500,    0,    0,    0,
    0,    0,    0,    0,    0,  410,  606,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  130,    0,    0,
    0,  103,    0,  974,    0,   23,  972,    0,    0,   74,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  513,    0,    0,    0,   37,   34,
   36,    0,   35,    0, 1080, 1082, 1083, 1084, 1085, 1086,
 1087, 1108, 1109, 1088, 1090, 1089, 1101, 1102, 1095, 1091,
 1096, 1092, 1094, 1097, 1093, 1098, 1099, 1100, 1104, 1105,
 1103, 1106, 1107, 1111, 1110, 1112, 1113, 1114, 1115, 1116,
 1117, 1118, 1119,    0,    0,    0,    0,   32,   69,   67,
 1072, 1081,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  696,    0,    0,    0,  743, 1074,
    0,    0,    0,    0,    0,    0,    0,  116, 1079,  597,
    0,    0,    2,    0,    0,    0,    0,    0,    0,  442,
  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
  470,  464,  465,  463,  466,  467,  468,  469,  471,  473,
  476,  472,  474,  475,  477,  478,  479,  480,  481,    0,
  440,  441,    0,  411, 1063,    0,    0,  417, 1067,    0,
  414, 1071,    0,  745,    0,  413, 1075,    0,  418, 1066,
    0,  604,  970,    0,  167,  112,    0,  113,    0,  217,
 1059,  841,  104,    0,  110,  162,    0,    0,  106,    0,
  114,  976,    0,  107,    0,  108,    0,  109, 1078,  163,
  115,  111,  788,  789,    0,  975,  973,    0,   75,    0,
 1064,    0, 1062,  521,  514,    0,  520,  525,  515,  516,
  523,  517,  518,  519,  524,  526,    0,    0,    0,   30,
    0,   39,  828,   38,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  605,  980,
    0,  961,  698,  700,    0,  701,  703, 1050,  704,    0,
  705,  694,    0,    0,    0,    0,    0,    0,    0,  625,
    0,    0,    0,  612,    0,  615,  617,  618,  619,  620,
  621,  622,  628,  629, 1073,  744,    0,  121,    0,    0,
  117,    0,  118,    0,  120,    0,  119,    0,    0,  659,
  660,  667,    0,  666,  668,  670,  675,  663,  661,  664,
  662,  671,  674,  669,  673,    0,    0,    0,    0,    0,
  679,    0,    0, 1052,    0,    0,  686,    0,    0,    0,
    0,    0,  501,    0,    0,    0,    0,  220,    0,  420,
  129, 1055,    0,  419,  490,  491,    0,    0,    0,    0,
    0,    0,  429,    0,  386,  387,    0,    0,  610,  608,
  971,    0,    0,    0,    0,    0,    0,    0,  170,  148,
    0,  126,    0,    0,    0,  122,    0,  137,  136,    0,
    0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
  803,  522,    0,    0,    0,    0,  936,  967,    0, 1054,
    0,  938,    0,    0,  968,    0,  962,  953,  952,  951,
    0,    0,    0,    0,  941,    0,    0,  954,  955,  963,
  964,    0,  965,  966,    0,    0,    0,  969,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  957,    0,  838,  933,  934,  935,  940,  939,  918,
    0,    0,    0,  917,    0,    0,  922,  914,  915,  916,
  919,  920,  921,  956,  981,  982,  983,  995,  996,  998,
  999, 1000, 1005, 1006, 1022, 1023, 1027, 1028,  218,    0,
    0,    0,  372,    0,    0,    0,  831,   27,    0,    0,
    0,    0,   72,   70, 1076,   68,   33,    0,    0,    0,
  833,    0,   48,   50,    0,    0,    0,  602,    0,    0,
    0,    0,  707,    0,    0,    0,  708,    0,  655,    0,
    0,  626,    0,  623,    0,  624,  653,    0,  648,    0,
    0,    0,  640,  639,  616,  842,  812,    0,    0,    0,
  127,    0,    0,    0,    0,  599,  598,  672,  665,    0,
 1070,    0,    0,    0,  680,  684,    0,    0,  785,  691,
  690,    0,  185,    0,    0,  145,    0,  506,    0,  507,
  502,  378,    0,  424,  426,  425,  378,  379,  427,    0,
  421,    0,    0,    0,    0,  268,    0,    0,    0,  433,
  434,    0,  483,    0,    0,    0,    0,    0,    0,    0,
  391,  390,  509,    0,    0,    0,  166,    0,    0,  175,
    0,  174,    0,    0,  181,  164,    0,  179,  171,    0,
    0,  545,  580,  548,    0,  581,    0,    0,  549,    0,
    0,    0,  572,  584,  544,  567,  546,  547,  542,  529,
  378,  527,  528,  530,    0,    0,  539,  540,  541,  543,
    0,    0,    0,    0,  125,    0,    0,  123,    0,  124,
    0,  140,    0,    0,  201,    0,    0,  377,    0,  220,
    0,    0,   84,    0,  102,    0,  101, 1056,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  844,  848,
  849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
  859,    0,    0,    0,    0,    0,  958,    0,    0,    0,
    0,    0,    0,  959,  960,    0,  942,  943,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  333,
 1077,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  362,    0,    0,  273,  537,    0,    0,    0,  370,    0,
    0,    0,  830,    0,    0,   44,   73,    0,    0,   26,
    0,  836,    0,    0,  799,    0,    0,    0,    0,  601,
    0,  699,  702,  712,    0,    0,    0,    0,  592,    0,
  978,  591,    0,  627,  638,    0,  635,  631,  630,    0,
    0,    0,  650,  634,  641,    0,    0,    0,  807,    0,
    0,    0,    0,  377,  678,  677,  656,    0,    0,    0,
    0,    0,    0,    0,    0,  146,    0,  505,    0,  423,
    0,  422,  428,  496,    0,  495,  378,    0,  264,  377,
  238, 1060,    0,    0,  378,    0,    0,  209,  377,    0,
    0,    0,  243,  237,  240,  241,  242,  432,  488,  487,
  431,  430,    0,    0,    0,    0,    0,    0,    0,    0,
  389,    0,  378,  493,    0,  492,    0,  172,  176,    0,
    0,  180,    0,    0,    0,  568,  569,  585,    0,  582,
    0,    0,  575,  573,  574,    0,    0,    0,    0,  538,
    0,    0,    0,    0,  576,  128,    0,    0,  377,    0,
  200,    0,  203,  205,  206,    0,    0,    0,    0,    0,
  220,   79,    0,    0,   78,    0,    0,    0,  847,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  765,
  767,    0,  762,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1042,
 1043, 1044, 1045, 1046, 1047, 1048, 1049,    0,    0,    0,
    0,    0,    0,    0, 1033,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1016, 1018, 1017,    0,    0,
  931,  364,    0,  932, 1020,    0,  927, 1058,    0,    0,
    0,    0,    0,    0,    0,    0,  334,  335,    0,    0,
  937,  840,  839,  374,  373,    0,  271,    0,    0,    0,
  279,  832,    0,    0,    0,   71,    0,    0,    0,  835,
    0,    0,    0,    0, 1068,  711,    0,    0,    0,    0,
  717,  718,  719,  720,  729,  730,  731,    0,    0,  709,
  593,  979,  636,  649,  644,  643,    0,  654,  843,  813,
    0,    0,  377,    0,    0,    0,  657,  676,    0,    0,
  787,  786,    0,  504,    0,    0,  184,    0,  188,    0,
    0,  150,  221,  222,  223,  224,  225,  226,  949,  498,
    0,  269,    0,  211,  378,  213,  380,  151,  208,  214,
    0,    0,    0,  435,  436,  439,  379,  484,  485,  437,
    0,    0,    0,  407,    0,  494,  196,  197,  173,    0,
  183,  556,  557,  977,    0,    0,    0,    0,    0,  583,
    0,    0,  380,    0,    0,  533,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  198,    0,
    0,    0,   83,    0,    0,    0,    0,   91,   85,    0,
    0,   90,   86,    0,  811, 1061,    0,    0,  860,    0,
    0,    0,  886,  885,    0,    0,    0,  895,  910,    0,
  905,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  846,    0,  766,    0,  802,    0,    0,  220,    0,
  984,    0,    0, 1007,    0,    0,    0,    0,    0,    0,
    0,  944,    0,    0,    0,    0,    0, 1029,    0,    0,
    0,    0,    0,    0,    0, 1040, 1001, 1002, 1003, 1008,
 1004,    0, 1015,    0,    0,  688, 1019,  946,    0,    0,
    0,    0,  266,  285,    0,    0,  369,  280,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   62,   64,
    0,   42,    0,    0,    0,  817,  837,    0,  816,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  746,    0,
    0,    0,    0,    0,    0,    0,  646,  647,  651,    0,
    0,  199,    0,    0,  658,  791,  792,  793,    0,    0,
    0,  189,    0,  950,  378,  378,  380,    0,    0,    0,
    0,    0,    0,  244,  438,    0,    0,    0,    0,    0,
    0,  378,  511,  379,  182, 1057,    0,    0,  551,    0,
  550,  586,    0,  578,    0,    0,    0,  531,  559,    0,
    0,  561,  564,  566,  377,    0,    0,    0,  135,    0,
  204,    0,    0,  379,  105,    0,  133,    0,   94,    0,
    0,    0,    0,   88,   89,    0,  903,  904,    0,    0,
    0,    0,    0,    0,    0,    0,  906,    0,    0,    0,
    0,    0,    0,    0,  896,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  773,    0,    0,    0,  990,  989,    0,    0,  986,  985,
    0,  994,  993,  992,  991,  988,  987,    0,    0, 1035,
    0,    0,    0, 1034,    0,    0,    0,    0,    0,    0,
    0,  367,  337,  336,  272,    0,    0,  282,  283,    0,
    0,    0,    0,  316,    0,    0,    0,  315,    0,    0,
    0,    0,  361,  304,  302,  306,    0,  303,  292,  297,
  291,    0,    0,    0,  300,  301,  305,  307,  308,  309,
  310,  311,  312,  313,  314,  317,  318,  319,  320,    0,
    0,  355,  356,  357,    0,  815,   66,   58,   59,   65,
   60,   61,    0,   24,    0,    0,   25,  823,  822,    0,
  821,  819,  827,  826,  824,    0,   45,   46,    0,  721,
    0,    0,    0,  751,  749,  747,    0,  748,    0,    0,
    0,    0,    0,  806,    0,    0,  379,    0,  194,  190,
  379,    0,    0,  270,  379,    0,    0,    0,  229,    0,
    0,  245,    0,    0,    0,    0,    0,    0,    0,    0,
  508,  553,    0,  554,    0,    0,    0,    0,  155,  157,
  158,  159,  536,  534,  532,  563,    0,    0,  379,    0,
  379,    0,  375,  378,   92,    0,    0,   98,   93,    0,
    0,    0,    0,    0,  911,    0,  912,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  775,  764,    0,
    0,  776,    0,  772,  219, 1021, 1041,  997,    0,    0,
 1031, 1030,    0, 1036, 1024, 1026,    0, 1013, 1014,    0,
    0,  281,    0,    0,    0,    0,    0,  343, 1069,  358,
  359,    0,    0,  293,    0,  298,    0,  346,  299,    0,
    0,  339,    0,   55,   56,   57,   63,    0,    0,  798,
    0,  741,  739,    0,  732,    0,    0,    0,  755,    0,
  693,  379,  379,  376,  191,  161,  274,  275,  263,    0,
    0,  207,  230,    0,    0,    0,  232,  233,  231,    0,
    0,  405,  406,  402,  401,  404,  403,    0,  552,  579,
  160,  147,  156,    0,    0,  260,  142,  383,  381,    0,
    0,   96,    0,   80,    0,  872,  880,  687,    0,  873,
  881,  876,  884,    0,    0,  874,  882,  875,  883,  869,
  877,  870,  878,  871,  879,  771,    0,    0,    0, 1009,
 1032,    0, 1012,    0,    0,  284,    0,    0,    0,    0,
  330,    0,    0,  354,    0,    0,    0,    0,  349,  347,
    0,    0,    0,   40,  818,    0,    0,  723,  733,    0,
    0,  734,  735,  736,    0,  261,  384,  210,  215,    0,
    0,  235,    0,  247,  409,  379,  379,    0,   77,   99,
  100,    0,    0,    0,  778, 1025,  287,  288,    0,    0,
    0,    0,  353,  352, 1065,  351,    0,    0,    0,    0,
    0,    0,    0,  722,    0,    0,  756,  236,    0,    0,
    0,    0,    0,  262,  385,    0,    0,  777,    0,    0,
    0,    0,    0,  348,  350,    0,    0,    0,    0,  727,
    0,    0,    0,    0,    0,  246,    0,  252,    0,  251,
  134,  780,    0,  290,    0,    0,    0,    0,    0,    0,
  725,  738,  234,    0,    0,  256,  255,  254,  781,    0,
    0,    0,    0,  338,  728,  259,  257,  258,  328,    0,
  344,  325,  326,
};
static int yydgoto[] = {                                      21,
   22,   23,   24,   25,   26,   27,   28, 1574,   30,   31,
 1575, 1576,   34,   35,   36,   37,   38,   39, 1577,   41,
 1578, 1618,  154,  579,  179, 1375, 1614,  155,  855,  156,
  582,  860,  157,  158,  322, 1138,  168,  169, 1376, 1377,
 1378, 1379,  255,  287,  159, 1380,  160,  584,   90,  299,
  476,  531,  761, 1256,  532, 1014,  730,  280,  990,  762,
  763,  764, 1263, 1258, 1699,  300,  766,  767,   82,  273,
   83,  295, 1912, 1475,  279,  284,  286,  288,  275,  266,
  268,  281,  291,  188,  381,  383,  387,  385,  378,  466,
  748,  750,  745,  243,  244,  576,  323,  934,  919,  777,
  922,  470,  753, 1247, 1469,  698,  881, 1219,  655,  656,
  679,  461,  731, 1197, 1430, 1677, 1802, 1198, 1182, 1678,
 1679, 1680, 1681, 1682,  778,  276,  267,  457,  706,  458,
  459,  707,  708, 1445,  657, 1177, 1178, 1179, 1421,  472,
 1002, 1003, 1004, 1005,  936, 1657,  732,  938,  534, 1007,
 1097,  570, 1528, 1183,  535,  536,  537,  538,  539, 1658,
 1659,  682, 1809, 1941, 1434,  944,  931,  945,  946,  947,
 1942, 1943, 1987,  438,  575, 1119, 1579,  251,  675, 1116,
  676, 1427,  571, 1120, 1121, 1365, 1557, 1558, 1559, 1866,
 1265, 1580, 1581, 1582, 1583, 1767, 1584, 1585, 1586, 1587,
 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
 1598, 1599, 1600, 1106, 1978, 1871,  540,  830,  541, 1601,
 1768, 1878, 1879, 1924, 1602, 1603, 1604, 1762,  542,  841,
  543,  319,  572,  573,  544,   43, 1474,  447,  693,  963,
 1443,  694,  961,   87,   66,  442,  256,  199,  422,  240,
  429,  248,  259,  434,  430,  443,  951,  444,  689, 1210,
  241,  545, 1234,  673,  926,  423,  695, 1444,  105,  254,
  304,  733,  734,  845, 1235,  846, 1236,  737,  738,  739,
  740,  975, 1228, 1226,  741,  742,  743,  983,  744,  980,
   44,   45,   46,   47,   48,   49,  190,  637,   68,  599,
  262,  450,  364,  365,  366,  367,  368,  369,  370,  371,
  372,  373,  374,  888,  618, 1157, 1409,  619,  620,  893,
  406,  907,  407,  642,  408,  910,  195,  411,  645,   50,
  198,  417, 1494,  829,   51,  415,   52,  173,  350,  605,
  877,  480, 1406, 1643,  793,  174,  175,  351,  606,  607,
  875, 1136, 1139, 1140, 1141, 1142, 1143, 1144, 1887, 1934,
  546, 1961, 1145, 1146, 1147, 1404, 1892, 1893, 1894, 1396,
  182, 1635, 1788, 1789, 1521, 1044, 1522, 1523, 1524, 1734,
 1913, 1915,  648,  649, 1171, 1418,  590, 1780,   53,   54,
  481,   55,   56,  629,  630,  547, 1128, 1386, 1620, 1621,
 1625,  591,  863,  272,  779,  780,  781,  782,  783,  784,
  785,  786,  787,  788,  789,  790,  791, 1276, 1278, 1279,
  548,  549,  550,  551,  552,  553,  807,  554,  297,  555,
  556,  557,  558,  559, 1068,  560,  561,  562,  563,  564,
 1740, 1090,  565,  566,  567,  568,  812, 1073, 1341, 1336,
  813,  162,
};
static int yysindex[] = {                                   7204,
 2044,  -87, 3603,   75,  773,  203, 4136,  342,16649,  506,
  345,  -49,  -87,    0,  -65,11628, 1141,11628,  304,  461,
    0,  809,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  605,    0,    0,    0,    0,    0,    0,  368,
    0,    0,    0,    0,    0,    0,    0,17972,11628,  649,
11628,11628,11628,11628,11628,    0,    0,  615,  679,11628,
11628,11628,  769,11628,  608,11628,11628,    0,11628,11628,
11628,    0,  905,    0,  654,    0,    0,  743,11628,    0,
11628,11628,11628,  789,11628,11628,11628,11628,  608,11628,
11628,11628,11628,11628,    0,11628, 1137,  843,    0,    0,
    0, 1239,    0, 1239,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  795,  914,  118, 1311,    0,    0,    0,
    0,    0,11628,11628,11628, 1022, 1043, 1436,11628,  778,
  110,  236,  856,    0,    0,11628, 1063, 2256,    0,    0,
11628, 1037,11628,11628,11628,11628,11628,    0,    0,    0,
11628,16434,    0, 1015, 1005, 1155, 1125,  950, 1172,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  495,
    0,    0,  679,    0,    0, 1010,  350,    0,    0, 1433,
    0,    0, 1262,    0,  457,    0,    0,  964,    0,    0,
 1070,    0,    0, 1041,    0,    0,  940,    0, 1235,    0,
    0,    0,    0,  679,    0,    0,  675, 1433,    0,   18,
    0,    0, 1194,    0, 1215,    0, 1239,    0,    0,    0,
    0,    0,    0,    0, 1183,    0,    0, 1010,    0, 1203,
    0, 1124,    0,    0,    0, 1010,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,15523,11628, 1177,    0,
11628,    0,    0,    0, 1166, 1233,10524,11628, 1075, 1275,
 1556, 1281, 1318, 1320, 1270, 1279,  167, 1159,    0,    0,
15791,    0,    0,    0,15791,    0,    0,    0,    0,13103,
    0,    0, 1240,11628, 1305,  -64,  670,11628, 1244,    0,
 1140, 1143, 1168,    0, 2256,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11628,    0,  679, 1433,
    0, 1194,    0, 1408,    0, 1239,    0, 1342, 1307,    0,
    0,    0, 1418,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1388,11628,11628, 1352, 1248,
    0,15791, 1323,    0, 1323,15791,    0,   11, 1234, 1256,
 1245, 1172,    0, 1092,   54, 1476,11628,    0,  495,    0,
    0,    0, 1475,    0,    0,    0,11628, 1177,13791, 1321,
14059, 1756,    0,17972,    0,    0,   77, 1360,    0,    0,
    0, 1749, 1749,  679, 1445,  679,   53,  940,    0,    0,
 6039,    0,11628,11628,11628,    0, 1177,    0,    0, 1533,
  411, 1785,11628, 1559,11628,    0, 1793,12746, 9543, 1440,
    0,    0, 1806, 1817, 1829, 1398,    0,    0, 1833,    0,
 1850,    0, 1864, 1866,    0, 1874,    0,    0,    0,    0,
    0, 1881, 1481, 1488,    0, 1896, 1896,    0,    0,    0,
    0, 1904,    0,    0,13371, 1905, 1906,    0, 1908, 1547,
 1913, 1914, 1918, 1919, 1924, 1926,15791,15791,13639,11628,
 1937,    0, 2229,    0,    0,    0,    0,    0,    0,    0,
 1887, 1577, 1936,    0,    0, 1942,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6039,
 1928,  298,    0, 1950, 1735, 1152,    0,    0,11628,11628,
11628,  115,    0,    0,    0,    0,    0,11628,11628, 1128,
    0,11628,    0,    0, 1166, 1606,10524,    0,11628,13639,
  932, 1673,    0, 1762, 1685, 1961,    0,   89,    0,  388,
 1477,    0, 1572,    0, 1572,    0,    0, 1970,    0, 1702,
 1605,  608,    0,    0,    0,    0,    0, 1981,  142, 1967,
    0, 1177, 1989,11628, 1766,    0,    0,    0,    0,  765,
    0, 1700, 1994,11628,    0,    0, 1648, 1997,    0,    0,
    0,  982,    0, 1698, 1706,    0,  679,    0, 1707,    0,
    0,    0, 1782,    0,    0,    0,    0,    0,    0, 6039,
    0,  679, 1687, 6039, 1609,    0, 1796,11628,17470,    0,
    0,  724,    0,11628, -116, 1262, 1671, 1639,  586,    0,
    0,    0,    0,  458, 1672,  107,    0, 1618,  608,    0,
  679,    0, 1794, 1726,    0,    0,   53,    0,    0,  225,
 1638,    0,    0,    0, 1643,    0, 1681, 2043,    0, 1739,
 2046,  447,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1996,  151,    0,    0,    0,    0,
  108, 2049, 2050, 2046,    0,  679, 1433,    0, 1780,    0,
 1828,    0,  679,  679,    0,13791,  457,    0, 1724,    0,
 1701, 2068,    0,17922,    0, 1732,    0,    0, 1740, 2076,
10082, 2077,    0,    0,    0, 9813, 7360,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  712, 1738, 1283,15791,  171,    0,11628,15791, 1289,
 1291, 1297, 2372,    0,    0,  608,    0,    0,15791,10082,
 2229, 1678,  837,15791,15791,10082, 1808,15791,15791,15791,
15791,15791,10351,  219,  219, 2229, 1615,  368, 2085,    0,
    0,13907,11628,15791,15791,15791,15791,15791,15791,10262,
    0,15791,14884,    0,    0, 1860, 2070,11628,    0,11628,
 1840,11628,    0, 1714, 1728,    0,    0, 1696,10524,    0,
 1843,    0, 1621, 2114,    0, 1843,11628,11628, 2117,    0,
 1789,    0,    0,    0,11628,11076, 1715,15791,    0, 1131,
    0,    0,  -22,    0,    0, 1725,    0,    0,    0,11628,
  624,11628,    0,    0,    0,11628,11628, 1440,    0,15791,
 1902,13791,  457,    0,    0,    0,    0,  765,11628, 1834,
 2130, 1686,15791,15791,  679,    0,  638,    0, 2135,    0,
 5201,    0,    0,    0,  679,    0,    0,11628,    0,    0,
    0,    0, 1909, 2139,    0, 1476, 1903,    0,    0, 1846,
 1851, 1239,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  608,11628, 1886, 1476,17674, 1814, 1821, 1822,
    0,  608,    0,    0, 1149,    0, 1175,    0,    0, 1786,
  679,    0,12746,   85, 1795,    0,    0,    0,  608,    0,
 2043,   94,    0,    0,    0, 1476,   94, 1802,   94,    0,
 2165,  608,  608,  608,    0,    0, 1177,11628,    0, 1854,
    0, 1634,    0,    0,    0,   77, 1323,11628, 1645,  123,
    0,    0, 2167,   14,    0,12746,11628, 1323,    0, 1323,
 8462,  129,15791,15791,10627, 2174,  945,10903,15791,11179,
  901,11455,11731,14175,12007,12283,12559,10082,10082,    0,
    0, 1863,    0, 2182,  950,15791,15791, 2033,15791, 2175,
15791, 2183, 1797,15791,15791,15791,15791,15791,15791,    0,
    0,    0,    0,    0,    0,    0,    0, 1925, 2185, 1224,
  -35,15791,  870,15791,    0,10082, 2096, 2348,  451,11628,
 1811, 1890, 1920, 1991, 2012,    0,    0,    0, 1296,14443,
    0,    0,  950,    0,    0, 1666,    0,    0, 1953,  219,
  219, 1176, 1176,  674,11352, 2200,    0,    0, 2199, 2229,
    0,    0,    0,    0,    0, 1746,    0, 1812, 1983, 1840,
    0,    0,17886,17886, 1879,    0,  -80, 1897,11628,    0,
15791, 1897, 1943, 1944,    0,    0,10800, 2224, 2222, 1460,
    0,    0,    0,    0,    0,    0,    0,10082, 1957,    0,
    0,    0,    0,    0,    0,    0,  -92,    0,    0,    0,
 1738, 2229,    0, 1776,   77, 1323,    0,    0,  765, 1119,
    0,    0, 2229,    0, 1749, 2001,    0,  638,    0,10082,
 1280,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  170,    0, 1840,    0,    0,    0,    0,    0,    0,    0,
 1239, 1239, 1784,    0,    0,    0,    0,    0,    0,    0,
   80,  -19,  864,    0, 2011,    0,    0,    0,    0,11628,
    0,    0,    0,    0,   75, 1777, 1869, 1860, 2237,    0,
 1618, 1783,    0, 2228, 1056,    0,11628, 1129,  608, 2246,
 2249, 2250, 2039,  457, 1840, 1749, 1706,13791,    0, 1672,
 1862,12987,    0,  608, 1922, 2000,17922,    0,    0,  608,
 -155,    0,    0, 2005,    0,    0, 2272, 2273,    0, 1977,
 2229, 2276,    0,    0, 2229, 2277,13639,    0,    0, 2002,
    0,   27, 2278, 2229, 2280, 1573, 2282, 2229, 2283,15791,
15791, 2174,15791,14711, 2285, 2229, 2286, 2287, 2229, 2290,
15791, 2229, 2291, 2229, 2292, 2296, 2229, 2298, 2299, 2229,
 2300,    0, 2079,    0,14354,    0, 2147, 2168,    0, 2257,
    0, 2339,15791,    0, 2529, 2723, 2788, 2871, 2895, 2968,
15791,    0,15791,15791, 2229, 1915,15791,    0,15791, 2229,
 2042,   26,15791,15791,15791,    0,    0,    0,    0,    0,
    0,15791,    0,15791, 1389,    0,    0,    0, 1818,11352,
13550,11628,    0,    0,11628,17224,    0,    0,11628,11628,
11628,11628,11628,11628, 1910, 2314, 2315,    0,    0,    0,
 1910,    0,  239,  239,  152,    0,    0, 1820,    0,17886,
17886, 2320, 1460, 2328,15791, 2108,11076, 1998,    0, 1998,
  526, 1998, 2031, 2036, 2121, 2060,    0,    0,    0,  950,
 1840,    0, 1672, 1862,    0,    0,    0,    0, 1618, 2014,
 1618,    0,  353,    0,    0,    0,    0, 1983,15791, 2116,
 2003, 1784,  905,    0,    0, 2020, 2022, 2029, 2032, 2034,
 2040,    0,    0,    0,    0,    0, 2374,   75,    0, 1971,
    0,    0,   94,    0,   34,   94,   94,    0,    0, 1860,
 2379,    0,    0,    0,    0,   77, 1983, 1618,    0, 1706,
    0, 2011, 2146,    0,    0, 2130,    0, 2383,    0, 2387,
  679,  -77, 2390,    0,    0,  679,    0,    0,15791, 1323,
 1323, 1830,  368, 2394,15791, 2119,    0, 1323, 1323,15791,
 1323, 1323, 2106, 2229,    0, 1741,15791, 2229, 1323, 1323,
 1323, 1323, 2229, 1323, 1323, 1323, 1323, 1323, 1323,11628,
    0, 2401, 2399, 1134,    0,    0, 6039, 2403,    0,    0,
 3055,    0,    0,    0,    0,    0,    0, 3070, 1602,    0,
15791, 2143, 2028,    0,15791, 3178, 1839, 2443, 3194, 3268,
15791,    0,    0,    0,    0, 6039, 2397,    0,    0, 2169,
    0,11628, -115,    0, 2417, 2126,15791,    0,    0,11628,
11628,11628,    0,    0,    0,    0, 2127,    0,    0,    0,
    0, 2159,17089, 2408,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -61,
 2413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2148,    0,17886,17886,    0,    0,    0, 2045,
    0,    0,    0,    0,    0, 1947,    0,    0, 2108,    0,
 1845,11628, 1460,    0,    0,    0, 2138,    0,11076,11076,
15791,10082, 1440,    0, 1983, 2011,    0, 1175,    0,    0,
    0, 5201, 5201,    0,    0, 2229, 2205, 2116,    0, 1071,
11628,    0, 2156, 2062, 2164, 2066, 2206, 2180, 2210, 1840,
    0,    0, 2468,    0, 2475, 2173, 2205,   34,    0,    0,
    0,    0,    0,    0,    0,    0, 1840, 1672,    0, 1175,
    0, 2145,    0,    0,    0, 2152,  -44,    0,    0, 1860,
 2160, 2229, 2483, 2485,    0,  950,    0, 2229,15791, 2486,
 2487, 2229, 2488, 2491,15791,15791, 2229, 2494, 2495, 2497,
 2501, 2504, 2506, 2512, 2513, 2516, 2518,    0,    0,14354,
 2521,    0,11628,    0,    0,    0,    0,    0,15791, 2522,
    0,    0,15791,    0,    0,    0,15791,    0,    0, 3323,
  302,    0, 2252,15791,15791,10082, 2229,    0,    0,    0,
    0,11628,11352,    0,  612,    0, 2134,    0,    0,  440,
 2524,    0, 2201,    0,    0,    0,    0,  239,15791,    0,
11628,    0,    0,11076,    0,  701, 2229, 2539,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2543,
11628,    0,    0, 2247,11628, 1784,    0,    0,    0, 1239,
11628,    0,    0,    0,    0,    0,    0, 1983,    0,    0,
    0,    0,    0, 1983, 2011,    0,    0,    0,    0,15791,
  679,    0, 2131,    0,  679,    0,    0,    0, 2229,    0,
    0,    0,    0, 2229, 2229,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11628, 2255, 2229,    0,
    0, 3355,    0, 5201, 5201,    0, 2551, 2229, 1018,  434,
    0, 2259, 2200,    0,11628,11628,   75,  159,    0,    0,
 2092, 2262,10082,    0,    0,  156, 2553,    0,    0,10082,
 2561,    0,    0,    0,15791,    0,    0,    0,    0, 1784,
 1239,    0, 2226,    0,    0,    0,    0, 2229,    0,    0,
    0, 2562, 2564, 2567,    0,    0,    0,    0, 1323,11352,
 2184,11352,    0,    0,    0,    0,17224,  612,15791,11352,
  444,11352,11628,    0,   73,11628,    0,    0, 2226,   63,
 1784, 2234, 2236,    0,    0, 2572,11628,    0,11628, 2574,
 2200,17224, 2200,    0,    0, 1210,  216, 2316, 2200,    0,
 1858, 1859, 1784,  633,  633,    0, 2325,    0, 2192,    0,
    0,    0, 2591,    0, 2333,11352, 2349, 2341,17224,11628,
    0,    0,    0, 2188,  704,    0,    0,    0,    0,17224,
  182,11628,17224,    0,    0,    0,    0,    0,    0,17224,
    0,    0,    0,
};
static int yyrindex[] = {                                      0,
    0,  255,  549,    0,    0,    0,    0,    0,    0,    0,
    0,16733,  308,14987,    0,    0,    0,    0,    0,    0,
    0, 2644,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  306,    0,    0,    0,    0,    0,    0,  166,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  781,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2312,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -16, 2274,    0,    0,
    0,  127,    0,  127,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  781,
    0,    0,15255,12835,    0,    0,    0,  811,    0,    0,
  124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  845,    0, 2239,  448,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,  899,    0,    0,    0,    0,    0,
  934,    0,    0,    0,    0,    0,  130,    0,17755,    0,
    0,    0,    0,    0,    0,    0,    0,  109,    0,  -20,
    0,    0, 2609,    0,    0,    0, 2388,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  193,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  190,    0, 2391,    0,
    0,    0,    0,    0,11904,    0,    0,    0,    0,    0,
 1201,    0,    0,    0,    0,    0,    0,12180,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  180,    0,
    0,    0,    0,    0, 1033,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0, 2609,    0,    0,    0, 2388,    0, 1038,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  313,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1189,    0,    0,    0,    0,    0,    0, 1216,    0,
    0,    0,  164,    0,    0,    0,    0, 2391,  853,18055,
    0, 1251,    0,    0,    0,    0,  429,    0,    0,    0,
    0, 2204, 2204,    0,    0,    0, 1260,  214,    0,    0,
    0,    0,    0,    0,    0,    0, 2391,    0,    0, 1231,
    0,    0,    0,    0,    0,    0,17425,    0,    0,  161,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2699,    0,    0,    0,    0, 2176, 2176,    0,    0,    0,
    0, 3299,    0,    0,    0, 3599, 3899,    0, 4199, 4499,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  874,    0,    0,    0,    0,    0,    0,    0,
 4799, 1273,  244,    0, 2999,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1325,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11904,    0,    0,    0,    0,    0,
    0,    0,    0,13255,    0, 2342,    0,    0,    0,    0,
    0,    0,  181,    0,  181,    0,    0,  224,    0,  330,
  683,    0,    0,    0,    0,    0,    0,    0,  193,    0,
    0, 2391,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  157,  380,    0,    0,
    0,  450,    0,    0, 1039,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1340,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  324,    0,  627,    0,    0,  750,
    0,    0,    0,    0,  241,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1397,    0,    0, 2675,
16336,    0,    0,    0,16372,    0,    0,16577,    0,    0,
16626,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2451, 2890,    0,    0,    0,    0,
16654,16415,    0,16626,    0,    0,  109,    0,    0,    0,
    0,    0,    0,    0,    0,  853, 1370,    0,    0,    0,
    0, 2260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7803, 7882, 8231,    0,    0,  969,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2624,  133,16059,    0,16059,    0,    0,    0,16059,
16059,16059,    0,    0,    0,    0,    0,    0,    0,    0,
 2223,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5988, 6277, 2621,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2293,    0,    0,    0,    0,
 2404,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  323,    0,    0,    0,    0,  323,    0,    0, 1402,    0,
    0,    0,    0,    0,    0,    0, 1102,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  618,    0,    0,    0,    0,    0,    0,  161,    0,    0,
    0,  853, 1370,    0,    0,    0,    0,    0,    0,    0,
  379,  218,    0,    0,    0,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2643,    0,    0, 2499, 3590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  465,  734,  777,
    0,    0,    0,    0,    0,    0, 1034,    0,    0,    0,
    0,    0,    0,    0, 2004,    0,    0,    0,    0,    0,
16577,    0,    0,    0,    0,  735,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2391,    0,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,17937,
    0,    0,    0,  296,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2645,    0,    0, 1406,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2653,    0,    0,    0,    0,    0, 5099, 6566,
 6855, 5399, 5699,    0,    0, 1407,    0,    0,    0,  885,
    0,    0,    0,    0,    0,    0,    0,12456,    0, 2414,
    0,    0,    0,    0,    0,    0,    0, 1413,    0,    0,
    0, 1413,    0,    0,    0,    0,    0, 7065,  947,  143,
    0,    0,    0,    0,    0,    0,    0,    0, 1144,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  133,  147,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  690,    0, 2204, 2251,    0, 1335,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1878,    0, 2404,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1023,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1419,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3290,    0,    0,
    0,    0,    0, 1258,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1370, 2404, 2204, 1439,  853,    0, 2433,
 1468,    0,    0,    0,17937,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  902,    0,    0,    0, 1190,    0,    0,    0,    0,    0,
    0,    0,    0, 1667,    0, 1819,    0, 1916,    0,    0,
    0,    0,    0,    0,    0, 6776,    0,    0, 8022,    0,
    0, 8068,    0, 8310,    0,    0, 8382,    0,    0, 8442,
    0,    0, 1333,    0, 2624,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2284,    0,    0,    0,    0,  994,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  650,    0,    0,    0,    0,
    0,    0,    0,  245, 1483,  158,  256,    0,    0,    0,
 1483,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2361, 2115,    0, 7504,    0, 2363,    0, 2363,
 2361, 2363,    0,    0,    0,  293,    0,    0,    0, 1406,
 2404,    0, 2433, 1468,    0,    0,    0,    0,    0, 2254,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1952,
    0, 1023, 2312,    0,    0,  817,  895,  928,  976,  997,
 1013,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  222,    0,    0,    0,    0, 3776,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1493,
    0,    0,    0,    0,    0, 1496,    0,    0,    0,    0,
    0,  210,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8575,    0, 8606,    0, 8738,    0,    0,
    0,    0, 8813,    0,    0,    0,    0,    0,    0, 1170,
    0,    0, 2671,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2672,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5750, 2656,    0,    0,    0,    0,    0,    0, 1682, 1949,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  651,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1563,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1497,    0,    0, 7294,    0,
    0,    0, 1044,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  233,    0,    0,    0,    0, 1242,    0,    0,
    0,    0,    0,    0,    0, 2676, 1191, 2756,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2404,
    0,    0,    0,    0,    0,    0, 1513,  463,    0,    0,
    0,    0,    0,    0,    0,    0, 2404, 2433,    0,  478,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
    0, 8946,    0,    0,    0, 2653,    0, 8976,    0,    0,
    0, 9098,    0,    0,    0,    0, 9173,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2624,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2659,    0,    0, 2663,    0,    0, 2664,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2419,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2478,    0,    0,    0,    0, 2361, 1367, 1195,    0, 1009,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2845,    0,    0,    0,  188,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  270,    0,    0,    0,    0,    0, 9295,    0,
    0,    0,    0, 9328, 9374,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1882, 2685,    0,
    0,    0,    0,    0,    0,    0,    0, 2670, 2674,    0,
    0,    0, 2678,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1518, 2541,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2845,
 1404,    0,  194,    0,    0,    0,    0, 2676,    0,    0,
    0, 2689,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
    0,    0,    0,    0, 9472,    0,    0,    0, 1692,    0,
 1023, 1956, 1972,    0,    0,    0,    0,    0,    0,    0,
 2679,   86, 2688,    0,    0,    0, 2430,    0, 1528,    0,
    0,    0, 2845,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,16970,    0,    0,    0,   86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   86,    0,    0,    0,    0,    0,    0,   86,
    0,    0,    0,
};
static int yycindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1157,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2263,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2381,    0, 2392,    0,    0,    0,    0, 2706,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2713, 2721, 2726,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2728,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
static int yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0, 2771,    0,    0,
 2772, 2774,    0,    0,    0,    0,    0,    0,    1,    0,
 2777,   -2, 2610, 2186,  -36, -630, 1399, 2611, 1917, 2615,
 2190,    0,    0, 2462, -108,  -40,    0,    0,    0,    0,
   82,  179,  -63,  -85,  -70, -296, 2466, 1939,    0,    0,
    0,  833,    0,    0,  -46, 1538, -656,  -52,-1086, 2041,
 1788, -383,    0, 1549,    0, 2707, 1791, 1835,    0,    0,
    0, -612,  -56,    0,    0,    0,    0,    0, 2729,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -67,    0, -620, -444, 1561, -610, 1073,
 -997,    0,    0,    0,    0, -368, -156, -838, 1571, -425,
  -62,    0, -619, 1836,-1014,    0, 1142, -325, -879,    0,
 1146,    0, 1161, -413, -707,  -23,    0,    0,    0,    0,
 2367,    0, 2140, 1589,    0,    0,    0, 1656,    0, 2467,
 1946, 1603, 2416, 2418,    0,    0, -534, 1923,  -51, -804,
 1052, -318,    0,    0, -884, -882, -873, -870, -862,    0,
 1204,-1196,    0,  922,-1300,    0, 2179,    0,    0,    0,
  921,  923,  904, -109, -360, -925,-1006,    0,    0,    0,
 1945,    0, -746,    0, 1750,    0,    0,    0,    0,    0,
-1275,-1030,    0,    0,    0,    0,    0,    0, -267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,-1059,    0,    0, -811,    0, -810, 1304,
 1108,    0,  948,    0,    0,    0,    0,    0,    0,    0,
 -511,    0,    0, 2030, -159, -492, 1465, -639, -794,-1123,
-1251,    0,    0,  -55,    0,    0,    0,    0,    0, 2437,
    0,    0,    0,    0, 2453, 2202,    0,    0,    0,    0,
    0,   -9, -565,    0,    0, 2463,    0,    0,    0,    5,
    0,    0,    0, -436, 1898, -433, 1434,    0,    0,    0,
    0,    0,    0, -621,    0,    0,    0, 2149,    0, 1921,
    0,    0,    0,    0,    0,    0,  -69,    0, 2881,    0,
 2727,    0,    0,    0, 2531,    0,    0,    0,    0,    0,
    0, 2289,    0, 2304,    0,    0,    0, 2010,    0,    0,
    0, -723,    0, -291,    0,    0,    0,    0,    0, -364,
 -717, -968, 2196,    0,  501,    0,    0,    0,    0,    0,
    0, -420,    0,    0, -823,    0, 2731, 1368,    0, 2023,
-1188,-1021,    0,-1031, 1769,-1348,    0,    0,    0,    0,
 -178,    0,    0,    0,    0, 1506,    0,    0,    0,    0,
 2817,  -79,    0, 1016, 2123,    0, 1193,    0, 1400,    0,
 -577,    0,    0, 2013,    0,    0,    0,    0,    0,    0,
 2306,    0,    0,    0, -510,-1267, 2059, 1807,-1233,    0,
    0,    0,    0, -728,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  731, 1635,    0,
    0,    0, -847,    0,    0,    0, 2421, 1748,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -499, 1604,
    0,    0,
};
#define YYTABLESIZE 18589
static int yytable[] = {                                     161,
   40,   86,  376,  274,  247,  324,  180,  269,  189,  290,
  664,  344,  347,  285,  343,  346,  314,  827,  270,  282,
  181,  250,  265,  911,  735,  305,  253,  736, 1107, 1108,
  583,  705,  315,  278,  912,  844, 1184,  313, 1185,  283,
  309,  258,  882,  282,  670, 1359,  311, 1186,  242,  245,
 1187,  249,  252,  180,  257,  260,  921,  310, 1188,  935,
  271,  245,  260, 1019,  252,  317,  180,  257, 1022,  289,
  161,  260,  308, 1189, 1161, 1045, 1316,  677,  862,  301,
  316,  180,  303,  245,  699,  301,  260,  249,  252, 1560,
  180,  257,  289,  161,  260,  181,  252,  865, 1606, 1166,
  668,  386, 1071, 1117,  312, 1393,  751, 1015, 1079,  627,
 1093,  330, 1367,  332, 1113,  379,  643, 1006,  674,   85,
  986,  388,  384,  745, 1356, 1193, 1472,  331, 1225,  168,
  966, 1662,  784,  880, 1200,  923,  784,  560, 1231,  927,
  560, 1451,  715,  380,  937,  186,  814,  992,  382,  341,
 1622,  965,  353,  271,  180,  271,  790,   52,  859,  161,
  763,  328, 1255,  497,  828,  784,  260, 1159,  467, 1269,
  829,  375,  342,  245,  252,  180,  257,  289,  474,  632,
  637,  189,  745,  715, 1167,  897,  715,  829,  168,  365,
  814,  784,  761,  253, 1245, 1697,  431,  790,  628,  842,
  790,  715, 1928,  611,  186,  814,  784, 1632,  898, 1435,
  328, 1250, 1050,  169,  342,  790,   52,  794, 1455,  763,
 1691,  154,  497,  642,  784, 1360, 1038,  462,  829,  916,
 1426,  829,  763, 1660,  253,  828, 1383,  253,  632,  637,
  408,  989,  735,  363, 1086,  736,  829,  371,  365,  920,
   95,  761,  253, 1770,  607,   53,  176,  613,  794, 1360,
  837,  794,  138, 1165,  974,  838,  569, 1428,  943,  577,
  632,  901,  169,  763,  166,  345,  794,  635, 1438,  106,
  154,  705,  642,   85,  857,  468, 1261, 1038, 1086, 1646,
 1785,  763,  759, 1107, 1108, 1760, 1761,  609,  342,  408,
  583,  342,  363, 1086, 1407,  681, 1832,  607,  271,  662,
   97,  271,  683,  607,   53, 1606, 1191,  585,  161, 1467,
 1096,  617,  820,  489, 1196,  626, 1496, 1104, 1484,  652,
 1312, 1313,  631,  759, 1038,  691,   87,  665,  849,   87,
  949,  848,  950, 1039,  249,  692,  681, 1384,  180,  703,
  666,  759, 1215,  683,  653, 1408,  177, 1485, 1411,   67,
 1964, 1262, 1865,  178,  681, 1633,  607,  489, 1342,  560,
 1413,  683,  265, 1685, 1497,  669,  469,  612,  682,  783,
 1698,  820,  489, 1771, 1755,  569,  371,  270,  652,  685,
 1038, 1334,  687, 1651, 1793,  746,  653,  641,  641,  141,
  340,  749,  560,  186, 1039, 1676,  167,  700,  615,  702,
  628,  828, 1654, 1436, 1439,  186, 1232,  271,  759,  682,
  783, 1655, 1208,  747,  755,  988,  168,  271,  510,  271,
  348,  271,  138,  138,  690, 1889,  757,  682,  783, 1833,
 1781, 1644,  186, 1410,  560, 1415, 1671,  797,  186,  795,
  186, 1039, 1545,  245,  252,  257, 1149,  715,  141, 1927,
 1689, 1660,  153,  180,  394,  249, 1425,  715,  768,  715,
 1049,  790, 1423,  168, 1921,  765, 1693,  195,  715, 1977,
  784,  750, 2000,  597, 1958, 1645, 1872,  510,  797,  186,
  795, 1932,  790, 1381, 1345,  833, 1965, 1203,  154,  560,
  834,  784,  829,  745,  408, 1902,  797, 1039,  795, 1254,
  169,  265,  745, 1437, 1251,   95,  654,  632,  637,   91,
  831,  153,  715,  394,   84, 1267,  814, 1268,  497,  870,
  340,  715,  794,  745, 1224,  814,  195,  626,  340,  856,
  763,  967,  854,  340, 1885,  327,  991,  763, 1553, 1554,
  632,  861, 1766,  794,  560,  866,  340,  169,  704,  340,
  858,  642,  583,  829, 1825,  879,  895,  745,  763,  180,
  252,  585,  761, 1907,  715,   97,  632,  637,  180,  632,
  637,  761,  180,  964, 1429,  479,  715,  585,  715,  189,
  814,  365,  577,  906,  642,  632,  637,  903, 1864, 1938,
 1015, 1224,  790,   52, 1466,  784,  435,  759, 1786,  674,
  917,  784,  763, 1834, 1038, 1555,  165, 1168, 1387, 1388,
  642,  632,  637,  642,  180,  924, 1257,  939,  759, 1160,
 1207, 1476, 1113,  745,  271,  168, 1243,  997, 1792,  642,
 1966,  681,  784,  282, 1392,  363,  968,  973,  683, 1794,
  790,  186,  715, 1796,  969,  607,  814, 1799, 1800, 1606,
 1687, 1109, 1983,  794,  763,  642,  790,  652,  932,  271,
  763, 1688,  759, 1414,  932,  784,  632,  637,  763,  436,
  829,  759,  633,  820, 1606,  340,  253, 1114,   84,  796,
 1086, 1826,  510, 1828,  783, 1038,  632,  637,   87,  996,
  652,   53,  761, 1873,  270, 1038, 1000, 1001,  607,  632,
  637, 1606, 1038,  445,  682,  783, 2001,  842,  628,  169,
  642,  984, 1606, 1152,  759, 1606,  652,  794,  394,  652,
  796, 1039, 1606,  392,  152,  607,  106, 1838,  759,  153,
  642,  633,  763,  141, 1818,  652,  271,  196,  796, 1881,
 1069,  681,  424,  642,  754,  958, 1431, 1432,  683, 1627,
 1628, 1824,  797, 1624,  795, 1492, 1358, 1184, 1184, 1185,
 1185,  652, 1797, 1798, 1052, 1706,  393,  163, 1186, 1186,
  609, 1187, 1187,  797,  883,  795,  446,  985,  260, 1188,
 1188,  959,  392,  152, 1896, 1897,  569,  425,  569,  197,
 1122,  191,  759,  359, 1189, 1189, 1419, 1477, 1152, 1795,
  614, 1905, 1039,  131, 1652, 1653,  399, 1906,  510, 1791,
 1663,  195, 1039, 1098,  682,  783,  652,  856, 1674, 1039,
 1133, 1670, 1547,  271, 1540,  393,  192, 1542,  271,  609,
  271,  164,  271, 1398,  685,  626,  652,  131,   14,  585,
  270, 1827,  107,  617,  394, 1158, 1399,  180,  252,  652,
 1951,  906, 1953,  263,  264, 1135,  252,  193, 1174,  614,
 1957, 1257, 1959,  947, 1874,  399,  569, 1468, 1190, 1400,
  180,  131,  180, 1631,  948,  685,  271, 1675,  955,  783,
 1683,  960,  271,  797,  400,  795, 1954,  282,  388,  641,
 1204,  897, 1205,  685,  426, 1209, 1214, 1735, 1944, 1945,
 1946, 1960, 1493,  650,  947,  651, 1991,  947,  271,  194,
 1875, 1975,  427, 1229, 1221,  948, 1109,  396,  948,  486,
 1402, 1876,  947,  611, 1790, 1527,  282,  282,  282, 1240,
 1241, 1242,  897,  948,  271,  897,  714,  271, 1994,  613,
  628, 1107, 1108,  400,  296,  294,  428,  388, 1995, 1999,
  897, 1244, 2002,  768,  340,  340,  947,  246,  760, 2003,
 1222, 1252,  872,  837,  835,  395,  836,  948,  838, 1184,
 1184, 1185, 1185,  463, 1917, 1918,  396,  714,  180, 1175,
 1186, 1186,  611, 1187, 1187,  956,  398,  392,  180,  662,
 1997, 1188, 1188, 1984,  796,  714,  768, 1266,  758,  760,
  152,  152,  397,  765,  645,  261, 1189, 1189, 1398, 1155,
  633, 1751,  248,  837,  835,  796,  836,  760,  838,  277,
 1877, 1399,  613,  195,  395, 1156,  486,  600,  503,  940,
  393, 1741, 1985,  716,  916, 1744,  614,  957, 1870,  758,
 1040, 1998, 1059,  633, 1400,  398, 1346,   84, 1176,  837,
  835,  298,  836,  248,  838,  645,  248,  758, 1401,  464,
  260,  397, 1607, 1041, 1152, 1610, 1890,  626,  433,  633,
  399,  248,  633, 1830,  716,   88,   89,  716,  486, 1986,
  735,  613,  195,  736,  340,  340,  600,  503,  633, 1457,
  615,  761,  716,  296,  465, 1402,  152,  306, 1107, 1108,
 1107, 1108,  905,  585,  585,  348,  941,  616, 1107, 1108,
 1107, 1108,  906,  392,  633, 1493, 1493,  252,  239, 1042,
  477,  263,  264, 1493, 1493,  796, 1493, 1493,  482, 1059,
 1074, 1075,  761,  754, 1493, 1493, 1493, 1493, 1458, 1493,
 1493, 1493, 1493, 1493, 1493,  349,  942,  388,  400, 1059,
  761, 1440,  388,  897, 1107, 1108,  393,  388,  239,  293,
  325, 1290, 1457, 1337, 1338, 1931,  318,  441,  261,  633,
  685, 1109, 1935,  282,  754, 1291, 1461,  628,  415,  864,
  216,  396,  853, 1891,  753,  852,  270, 1441,  282,  633,
  577, 1479,  754,  294,  282,  338,  399, 1483,  833,  947,
 1446, 1059,  633,  834, 1403,  416,  897,  263,  264,  897,
  948, 1460, 1447, 1619, 1619, 1623,  897, 1446,  897, 1292,
  864,  216,  897,  864,  216,  753,  320,  897,  271,  395,
  897,  195,  271, 1861, 1280,  239, 1808,  415,  864,  216,
  412,  837,  835,  753,  836,  897,  838, 1293,  833,  177,
  398,  714, 1648,  834, 1650,  837,  835, 1886,  836,  897,
  838,  714,  368,  714,  416,  947,  397,  897,  321, 1076,
  897,  897,  714,  760,  400,  239,  948, 1611,  388,  326,
  897,  452, 1281,  760,  833,  760,  503, 1039, 1039,  834,
  195,  535, 1556, 1612,  760,  180,  897, 1609,  503,  412,
  569, 1690, 1339,  270,  626, 1962, 1282,  396,  177, 1520,
 1636, 1294, 1638,  758,   43,  453,  714,  454,  897, 1608,
  195,  368,  845,  897,  187,  714, 1353,  837,  835,  499,
  836,  503,  838,  503,  758,  897,  662,  897,  760,  455,
  535,  271,  271, 1920,  329, 1561, 1605,  760,  716,  585,
  252,  257,  585,  289,  161,  395,  757,  662,  716, 1972,
  716, 1973,  109,  845,  456,  663,  845,  195,  714,  716,
  585,  585,  750,   43,  413,  195,  398,  252,  758,  533,
  714,  845,  714,  187,  897,  354,  178,  758,  499,  333,
  760,   47,  397,  829,  628,  797,  366,  757,  111,  914,
  757,  897,  825,  601,  760,  897,  761,  602,  512,  195,
  334,  195,  604,  716,  414,  757,  761,  412,  761,  418,
  837,  835,  716,  836, 1696,  838, 1039,  761,  143, 1701,
  758,  419, 1676,  195,  829, 1673,  377,  829,  409,  183,
  410,  864,  833, 1783,  758,  178,  714,  834,  754,  416,
   47,  432,  829, 1804,  797,  366, 1731,  382,  195, 1805,
  754,  825,  437,  112,  420,  716,  421,  512,  760,  754,
  448,  761,   41,  113,  647,  449,  833,  716,  652,  716,
  761,  834,  144,  451, 1754,  132,  810,  143,  460,  195,
  833, 1732,  774, 1806,  864,  834,  471,  864,  114,  753,
  180,  195,  216, 1733,  864,  475,  864,  808,  758,  439,
  864,  753,  440,  754, 1520,  864,  382,  809,  864,  473,
  753,  626,  754,  761,  478,  184,   14,  774,  195,  195,
 1333,   41,  348,  864,  195, 1976,  195,  761,  348,  774,
  348,  144,  245,  716,  132,  810,  348,  864, 1217, 1218,
 1759, 1266, 1266,  864,  441,  864,  185,  479,  864,  864,
  186,  216,  833, 1605,  753,  754,  808,  834,  864,  574,
  340,  187, 1046,  753, 1109,  195,  809,  811, 1054,  754,
 1056,  578,  187,  195,  864,  589, 1058,  592,  340,  824,
  825,  826, 1888, 1416,  187,  585,  585, 1151, 1073,  834,
  588,  761, 1352, 1417,  837,  835,  864,  836, 1619,  838,
 1069,  864,  375, 1059, 1810, 1216,  753,  580,  388,  252,
  252,  187,  593,  864,  594,  864,  834,  187,  388,  187,
  753,    0,    3,  837,  835,  595,  836,  845,  838,  929,
  845,  180,  928,  754,  596, 1092,  598,  845,  842,  845,
  610, 1130,  195,  845, 1129,  833,  865,  608,  845,  621,
  834,  845,  871,  622, 1249,  623, 1858, 1248,  187,  829,
  829,  757,  864,  139,  139, 1253,  845,  829, 1011,  837,
  835,  253,  836,  757,  838,  108, 1774, 1776,  624,  864,
  845, 1903,  757,  864,  753, 1551, 1357,  865,  845,  842,
  865,  845,  845,  873,  837,  835,  638,  836,  636,  838,
  180,  845,  634,  249,  640,  865,  644, 1088,  498,  499,
  500,   14,  253,  109, 1520,  253,  639,  845,  658, 1088,
  341, 1109, 1088, 1109,  646,  110,  757,  195,  628,  660,
  253, 1109, 1266, 1109, 1904,  757,  508,  509, 1285,  845,
 1289,  659, 1297, 1300,  845, 1305, 1308, 1311, 1901,  111,
 1882,  375,  667,  628,  252,  829,  845, 1398,  845,  829,
  672,  683,  837,  835, 1909,  836, 1363,  838, 1911, 1362,
 1399, 1098, 1939, 1775, 1777,  180,  829, 1109,  757,  686,
  628,  249,  829,  837,  835,  696,  836, 1923,  838,  697,
  701,  628,  757, 1400,  628,  752, 1412, 1449,  891, 1248,
 1448,  628,  758, 1454,  756,  845, 1453, 1401,  792, 1091,
  837,  835,  760,  836,  112,  838,  829, 1324,  837,  835,
  187,  836,  845,  838,  113,  794,  845,  249, 1021,  833,
  797, 1347,  837,  835,  834,  836,  795,  838, 1552,  891,
 1626, 1360,  891,  842, 1402,  245, 1925, 1048,  796,  114,
 1705, 1053,  798,  842, 1926,  626,  757,  891,  833, 1746,
 1500, 1070,  842,  834,  577, 1782, 1077, 1078,  842,  799,
 1081, 1082, 1083, 1084, 1085, 1089,  829,  817, 1981, 1982,
  626, 1980,  852,  800,  533,  801, 1099, 1100, 1101, 1102,
 1103,  533,  293,  802, 1110,  868, 1739, 1605,  276, 1950,
  803,  276,  782, 1135,  833,  782,  271,  626,  865,  834,
 1348,  837,  835,  804,  836,  806,  838,  249,  626,  249,
  805,  626, 1605,  809,  814,  815,  294,  816,  626,  833,
  604,  227,  818,  819,  834,  249,  868,  820,  821,  868,
 1349,  837,  835,  822,  836,  823,  838,  253,  253, 1605,
 1135,  250, 1162, 1403,  868,  253,  832,  839,  840,  842,
 1605,  865, 1266, 1605,  865,  647, 1173,  843,  847,  850,
 1605,  865,  227,  865, 1093,  227,  249,  865,  851,  249,
  868,  876,  865,  555,  878,  865, 1093,  342,  885, 1093,
  227,  887,  250,  890,  249,  250,  891,  833,  837,  835,
  865,  836,  834,  838,  894,  874,  896,  900,  902,  904,
  250, 1350,  837,  835,  865,  836,  908,  838,  833,  909,
  913,  915,  865,  834,  555,  865,  865,  555, 1716,  653,
  918,  925, 1351,  837,  835,  865,  836,  662,  838,  930,
  953,  962,  555,  253,  555,  833,  954,  340,  970,  971,
  834,  865,  978,  833,  837,  835,  976,  836,  834,  838,
  891,  977,  979,  981,  253,  982,  987,  833,  993,  994,
  253,  999,  834,  865,  998, 1270, 1271, 1275,  865, 1008,
 1284, 1286, 1288, 1010, 1296, 1299, 1302, 1304, 1307, 1310,
  865, 1011,  865, 1016, 1017, 1018, 1020,  196, 1317, 1318,
 1072, 1320, 1080, 1322,  253, 1094, 1325, 1326, 1327, 1328,
 1329, 1330,  342,  891,  988, 1118,  891,  837,  835, 1343,
  836, 1123,  838,  891, 1335,  891, 1340,  837,  835,  891,
  836, 1125,  838, 1131,  891, 1124, 1127,  891, 1148,  865,
  859, 1047, 1355, 1051, 1153, 1163,  833, 1055, 1057, 1059,
 1169,  834,  891,  852, 1180,  945,  865,  868, 1195, 1170,
  865, 1194, 1206,  933,  253, 1201,  891, 1525,  837,  835,
 1202,  836, 1211,  838,  891, 1220,  833,  891,  891, 1212,
 1213,  834, 1227,  533, 1239, 1246, 1260,  891, 1526,  837,
  835, 1237,  836, 1277,  838, 1321,  945,  945,  945,  945,
  945, 1315,  945,  891, 1314, 1332, 1323,  239,  227,  833,
  868,  249,  249,  868,  945,  945,  945,  945, 1489,  249,
  868, 1331,  868, 1360, 1361,  891,  868,  250,  250, 1364,
  891,  868, 1366,  833,  868,  250, 1382, 1385,  834, 1390,
 1391,  555,  891, 1395,  891, 1397, 1420,  833,  945,  868,
  837,  835,  834,  836, 1442,  838, 1433, 1452,  555,  555,
  555, 1405, 1450,  868,  555, 1456, 1462,  555,  833, 1463,
 1464,  868,  560,  834,  868,  868, 1319, 1529,  837,  835,
  555,  836, 1465,  838,  868, 1481,  555, 1473, 1254,  833,
 1486,  891, 1487, 1488,  834, 1490, 1491, 1498, 1495, 1499,
  868, 1501, 1502,  239, 1509, 1510, 1511,  249,  891, 1512,
 1514, 1515,  891,  560,   57, 1516,  560, 1517, 1518, 1519,
 1038, 1541,  868,  250,  239,   58, 1544,  868,  249,  533,
  239,  560,   59,  560,  249, 1613,   60, 1615, 1616,  868,
 1629,  868, 1503, 1504,  250, 1506, 1508, 1715, 1630, 1639,
  250,  874,  833, 1513, 1640,  555,   61,  834, 1634, 1530,
  837,  835,  833,  836,  239,  838, 1642,  834,  249,  837,
  835, 1344,  836, 1641,  838, 1531,  555, 1649, 1664,  678,
 1665, 1661,  555, 1538,  250, 1539, 1340, 1666,  868, 1340,
 1667, 1335, 1668,  555, 1672, 1546,  533, 1548, 1669, 1686,
 1224, 1692, 1694,  833, 1549,  868, 1550, 1695,  834,  868,
 1700,  555,  717,  945, 1707, 1709,  555,  945,   62,  945,
  945, 1729, 1730, 1736,  833,  717,  945, 1742,  249,  834,
  537,  945,  945,  717, 1743, 1752, 1756,  945, 1753,  945,
  945,  164, 1763, 1764,  250,  555, 1769,  533,  717,   63,
 1772, 1773, 1778,   64,  945, 1779, 1784,  724,  945,  945,
  945, 1801,  717,  945,  837,  835, 1747,  836, 1811,  838,
  945,  537,  945,  945,  537, 1812,  945, 1813,  152, 1814,
  945, 1656,  945, 1815,  945,  833,  945, 1817, 1819,  537,
  834,  945,  945, 1816,  945, 1820, 1831,  724,  724,  717,
 1821,  724, 1829, 1836, 1835, 1837, 1840, 1841, 1842,  945,
  945, 1843,  945,  833, 1846, 1847,  724, 1848,  834,  152,
  726, 1849,  152,  945, 1850,  945, 1851,  945,  945,  945,
  560,  945, 1852, 1853,  945,  945, 1854,  152, 1855,   65,
 1857, 1702, 1860, 1883,  945,  560, 1867, 1708,  945, 1532,
  837,  835, 1712,  836,  945,  838, 1765,  945, 1884, 1717,
  945,  726, 1895, 1898,  726,  945, 1900, 1914, 1910,  560,
 1919, 1929, 1933,  355, 1922,  560,  945, 1930,  560,  726,
 1936, 1940,  945,  945, 1948, 1947, 1949,  945,  945, 1967,
 1952, 1969, 1971, 1340, 1974,  833, 1979, 1340,  945,  945,
  834,  945, 1964, 1750,  833, 1965,  356,  945,  717,  834,
  945, 1989,  945,  945,  945,  945, 1990,  945, 1992, 1757,
  560, 1993, 1996,    1,  790,  945,  945, 1053,  202,   29,
   31,  829,  357,  165,  267,  358,  945,  945,  706,  945,
  945,  945,   82,  769,  947, 1038,  945,  945,  945,  945,
  945,  359,  945,  278,  558,  945,  945,  945,  945,  945,
  945,  945,  212,  277,  768,  945,  945,  945,  945,  945,
  945,  945,  945,  797,  945,  560,  408,  360, 1080,  750,
  192,  752,  560,  193,  945,  945,  945,  945,  945,  945,
 1037,  770, 1011, 1787,  323,  558,  379,  289,  558,  833,
  560,  321,  331,  295,  834, 1010,  537,  537,  322,  779,
  345,  537,  324,  558,  537,  558,  332,  327, 1055, 1080,
 1080, 1080, 1080, 1080, 1080, 1080,  360,  537,    6,   12,
  560,    9,  361,   14,  560,  228, 1080, 1080, 1080, 1080,
 1080,   17,    9, 1533,  837,  835,   20,  836,   24,  838,
   29,   32,  362,   33,  152,  152,   42,  335,  336, 1617,
  867, 1839,  152,  337, 1134,  363,  869, 1844, 1845, 1080,
  587, 1080,  724,  586, 1482,  724,  228, 1126, 1259,  228,
 1009,  307,  724, 1480,  724,  833, 1264, 1223,  724,  292,
  834, 1859, 1478,  724,  228, 1340,  724, 1470, 1822, 1862,
 1807, 1233,  537, 1823,  709, 1459, 1868, 1869, 1534,  837,
  835,  724,  836, 1422,  838, 1060, 1061, 1062, 1063, 1064,
 1065, 1066, 1067,  537,  248,  724,  972, 1164,  633,  537,
 1471,  533, 1899,  724,  680,  726,  681,  724,  726, 1199,
 1963, 1803,  948, 1970, 1968,  726,  724,  726, 1988, 1368,
  152,  726, 1192, 1758, 1880, 1955,  726, 1115, 1647,  726,
  688,  671,  724,  537,  661,  248, 1238,  952,  248,  560,
 1684,  152,  995,  170,  726,  625,  339,  152,  884, 1154,
 1150, 1230, 1908,  248,  352, 1394, 1637,  302,  726,  724,
 1937, 1535,  837,  835, 1043,  836,  726,  838,  889, 1728,
  726,  724, 1856,  724, 1132, 1172, 1505,  808, 1424,  726,
  560,  152,  558,  560,  899, 1536,  837,  835, 1389,  836,
    0,  838, 1543,    0,    0,  726,    0,    0,  560,  558,
  558,  558,    0,    0,    0,  558,    0,    0,  558,    0,
 1080,    0, 1080, 1080,    0,    0,    0, 1787,    0, 1080,
  724,  558,  726,    0,    0, 1080,    0,  558,    0,    0,
 1080,    0,    0, 1080,  726,    0,  726,  724,    0,    0,
    0,  724,    0,    0,    0,    0,    0, 1080, 1059,  833,
    0, 1956, 1080, 1080,  834,    0, 1080,    0, 1537,  837,
  835,    0,  836, 1080,  838, 1080, 1080,    0,    0, 1080,
    0,    0,    0, 1080,    0, 1080,    0, 1080,    0, 1080,
    0,  239,  228,  726, 1080, 1080,    0, 1080,    0, 1059,
 1059, 1059, 1059, 1059, 1073, 1059,  558,    0,    0,    0,
  726,    0, 1080, 1080,  726, 1080,    0, 1059, 1059, 1059,
 1059,    0,    0,    0,  833,    0, 1080,  558, 1080,  834,
 1080, 1080, 1080,  558, 1080,    0,    0, 1080, 1080,    0,
    0,    0,  558,    0,  558,    0,    0, 1080,    0, 1059,
    0, 1059,    0,    0,    0, 1737,  837,  835,    0,  836,
 1080,  838,  558, 1080,    0,    0,    0,  558,    0,    0,
 1738,  837,  835,    0,  836,    0,  838,    0,    0, 1080,
  248,  248,    0,    0,    0, 1080, 1080,  239,  248,    0,
 1080,    0,    0,    0,    0,    0,  558,    0,    0,    0,
    0, 1080, 1080,    0, 1080,    0,    0,  833,  239,    0,
 1080,    0,  834, 1080,  239, 1080, 1080, 1080, 1080,    0,
 1080,    0,    0,    0,    0,  560,  560,    0, 1080, 1080,
  560,  833,    0,  560,    0,    0,  834,    0,    0, 1080,
 1080,    0, 1080, 1080, 1080,    0,  560,    0,  239, 1080,
 1080, 1080, 1080, 1080,    0, 1080,    0,    0, 1080, 1080,
 1080, 1080, 1080, 1080, 1080,    0,    0,    0, 1080, 1080,
 1080, 1080, 1080, 1080, 1080, 1080,  248, 1080, 1745,  837,
  835,    0,  836,    0,  838,    0,    0, 1080, 1080, 1080,
 1080, 1080, 1080,    0, 1748,  837,  835,  248,  836,    0,
  838,    0,    0,  248,  833,    0,    0,    0,    0,  834,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1059,  560, 1059, 1059,    0,    0,    0,    0,    0, 1059,
    0,    0,    0,    0,    0, 1059,    0,  248,    0,    0,
 1059,    0,  560, 1059,    0,    0,    0,    0,  560,  560,
    0,    0,    0,    0,    0,    0,    0, 1059, 1090, 1059,
    0,    0, 1059, 1059,    0,    0, 1059,    0, 1749,  837,
  835,    0,  836, 1059,  838, 1059, 1059,    0,    0, 1059,
    0,    0,  560, 1059,    0, 1059,    0, 1059,    0, 1059,
  560,  833,    0,  560, 1059, 1059,  834, 1059,    0, 1090,
 1090, 1090, 1090, 1090, 1090, 1090,  833,    0,  560,    0,
  560,  834, 1059, 1059,    0, 1059,    0, 1090, 1090, 1090,
 1090,    0,    0, 1863,  837,  835, 1059,  836, 1059,  838,
 1059, 1059, 1059,    0, 1059,    0,    0, 1059, 1059,    0,
    0,    0,    0,    0,    0,    0,    0, 1059,    0, 1090,
    0, 1090,    0,    0,    0, 1916,  837,  835,    0,  836,
 1059,  838,    0, 1059,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1059,
    0,    0,    0,    0,    0, 1059, 1059,    0,    0,    0,
 1059,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1059, 1059,    0, 1059,    0,    0,    0,    0,    0,
 1059,    0,    0, 1059,  833, 1059, 1059, 1059, 1059,  834,
 1059,    0,    0,    0,    0,    0,    0,    0, 1059, 1059,
  833,    0,    0,    0,    0,  834,    0,    0,    0, 1059,
 1059,    0, 1059, 1059, 1059,    0,    0,    0,    0, 1059,
 1059, 1059, 1059, 1059,    0, 1059,    0,    0, 1059, 1059,
 1059, 1059, 1059, 1059, 1059,    0,    0,    0, 1059, 1059,
 1059, 1059, 1059, 1059, 1059, 1059,    0, 1059,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1059, 1059, 1059,
 1059, 1059, 1059,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  833,    0,    0,  560,    0,  834,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1090,    0, 1090, 1090,    0,  560,  560,    0,    0, 1090,
  560,    0,    0,  560,    0, 1090,    0,    0,    0,    0,
 1090,    0,    0, 1090,    0,    0,  560,    0,    0,  527,
    0,    0,  560,    0,    0,    0,    0, 1090, 1095,  833,
    0,    0, 1090, 1090,  834,    0, 1090,    0,    0,    0,
    0,    0,    0, 1090,    0, 1090, 1090,    0,    0, 1090,
    0,    0,    0, 1090,    0, 1090,    0, 1090,    0, 1090,
  527,  833,    0,  527, 1090, 1090,  834, 1090,    0, 1095,
 1095, 1095, 1095, 1095, 1095, 1095,    0,    0,  527,    0,
    0,    0, 1090, 1090,    0, 1090,    0, 1095, 1095, 1095,
 1095,  560,    0,    0,    0,    0, 1090,    0, 1090,    0,
 1090, 1090, 1090,    0, 1090,    0,    0, 1090, 1090,    0,
    0,    0,  560,    0,    0, 1703, 1704, 1090,  560, 1095,
    0, 1095,    0, 1710, 1711,    0, 1713, 1714,    0,  560,
 1090,    0,    0, 1090, 1718, 1719, 1720, 1721,    0, 1722,
 1723, 1724, 1725, 1726, 1727,    0,    0,  560,    0, 1090,
    0,    0,  560,    0,    0, 1090, 1090,    0,    0,    0,
 1090,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1090, 1090,    0, 1090,    0,    0,    0,    0,    0,
 1090,  560,    0, 1090,    0, 1090, 1090, 1090, 1090,    0,
 1090,    0,    0,    0,    0,    0,    0,    0, 1090, 1090,
    0,    0,    0,    0,    0,  560,    0,    0,    0, 1090,
 1090,    0, 1090, 1090, 1090,    0,    0,    0,    0, 1090,
 1090, 1090, 1090, 1090,    0, 1090,    0,    0, 1090, 1090,
 1090, 1090, 1090, 1090, 1090,    0,    0,    0, 1090, 1090,
 1090, 1090, 1090, 1090, 1090, 1090,  560, 1090,    0,  560,
    0,    0,    0,    0,    0,    0,    0, 1090, 1090, 1090,
 1090, 1090, 1090,    0,  560,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1095,    0, 1095, 1095,    0,  527,  527,    0,    0, 1095,
    0,    0,    0,  527,    0, 1095,    0,    0,    0,    0,
 1095,    0,    0, 1095,    0,    0,  527,    0,    0,    0,
    0,    0,    0,   69,    0,    0,    0, 1095, 1091,    0,
    0,    0, 1095, 1095,   70,    0, 1095,    0,    0,    0,
    0,   71,    0, 1095,    0, 1095, 1095,    0,    0, 1095,
    0,    0,    0, 1095,   72, 1095,    0, 1095,    0, 1095,
    0,    0,    0,    0, 1095, 1095,    0, 1095,    0, 1091,
 1091, 1091, 1091, 1091, 1091, 1091,    0,    0,    0,    0,
    0,    0, 1095, 1095,    0, 1095,    0, 1091, 1091, 1091,
 1091,  527,    0,    0,    0,    0, 1095,    0, 1095,    0,
 1095, 1095, 1095,    0, 1095,    0,    0, 1095, 1095,    0,
    0,   73,  527,    0,    0,    0,    0, 1095,  527, 1091,
    0, 1091,    0,    0,    0,    0,    0,   74,    0,    0,
 1095,    0,    0, 1095,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   75,    0,    0,    0,    0,    0, 1095,
    0,    0,  527,    0,    0, 1095, 1095,    0,   76,    0,
 1095,    0,   77,    0,    0,   78,    0,    0,    0,    0,
    0, 1095, 1095,   79, 1095,    0,    0,    0,    0,    0,
 1095,  560,  560, 1095,    0, 1095, 1095, 1095, 1095,  560,
 1095,    0,   80,    0,    0,    0,    0,    0, 1095, 1095,
    0,    0,  560,    0,    0,    0,    0,    0,    0, 1095,
 1095,    0, 1095, 1095, 1095,    0,    0,    0,    0, 1095,
 1095, 1095, 1095, 1095,    0, 1095,    0,    0, 1095, 1095,
 1095, 1095, 1095, 1095, 1095,    0,    0,    0, 1095, 1095,
 1095, 1095, 1095, 1095, 1095, 1095,    0, 1095,   81,    0,
    0,    0,    0,    0,    0,    0,    0, 1095, 1095, 1095,
 1095, 1095, 1095,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  560,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1091,    0, 1091, 1091,    0,    0,    0,    0,  560, 1091,
    0,    0,    0,    0,  560, 1091,    0,    0,    0,    0,
 1091,    0,    0, 1091,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1091, 1106,    0,
    0,    0, 1091, 1091,    0,    0, 1091,    0,  560,    0,
    0,    0,    0, 1091,    0, 1091, 1091,    0,    0, 1091,
    0,    0,    0, 1091,    0, 1091,    0, 1091,    0, 1091,
    0,    0,    0,    0, 1091, 1091,    0, 1091,    0, 1106,
 1106, 1106, 1106, 1106, 1106, 1106,    0,    0,    0,    0,
    0,    0, 1091, 1091,    0, 1091,    0, 1106, 1106, 1106,
 1106,    0,    0,    0,    0,    0, 1091,    0, 1091,    0,
 1091, 1091, 1091,    0, 1091,    0,    0, 1091, 1091,    0,
    0,    0,    0,    0,    0,    0,    0, 1091,    0, 1106,
    0, 1106,    0,    0,    0,    0,    0,    0,    0,    0,
 1091,    0,    0, 1091,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1091,
    0,    0,    0,    0,    0, 1091, 1091,    0,    0,    0,
 1091,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1091, 1091,    0, 1091,    0,    0,    0,    0,    0,
 1091,    0,    0, 1091,    0, 1091, 1091, 1091, 1091,    0,
 1091,    0,    0,    0,    0,    0,    0,    0, 1091, 1091,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1091,
 1091,    0, 1091, 1091, 1091,    0,    0,    0,    0, 1091,
 1091, 1091, 1091, 1091,    0, 1091,    0,    0, 1091, 1091,
 1091, 1091, 1091, 1091, 1091,    0,    0,    0, 1091, 1091,
 1091, 1091, 1091, 1091, 1091, 1091,    0, 1091,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1091, 1091, 1091,
 1091, 1091, 1091,    0,    0,    0,    0,   92,    0,    0,
    0,    0,    0,    0,   93,    0,    0,    0,   94,   95,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
 1106,    0, 1106, 1106,    0,    0,    0,    0,   97, 1106,
    0,    0,    0,    0,    0, 1106,    0,    0,    0,    0,
 1106,    0,    0, 1106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1106, 1111,    0,
    0,    0, 1106, 1106,    0,    0, 1106,    0,    0,    0,
    0,    0,    0, 1106,    0, 1106, 1106,    0,    0, 1106,
    0,    0,    0, 1106,    0, 1106,    0, 1106,    0, 1106,
   98,    0,    0,    0, 1106, 1106,    0, 1106,    0, 1111,
 1111, 1111, 1111, 1111, 1111, 1111,   99,    0,    0,    0,
    0,    0, 1106, 1106,    0, 1106,    0, 1111, 1111, 1111,
 1111,  100,    0,    0,    0,  101, 1106,    0, 1106,    0,
 1106, 1106, 1106,    0, 1106,    0,  102, 1106, 1106,    0,
    0,    0,    0,    0,    0,    0,    0, 1106,    0, 1111,
    0, 1111,    0,    0,    0,  103,    0,    0,    0,    0,
 1106,    0,    0, 1106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1106,
    0,    0,    0,    0,    0, 1106, 1106,    0,    0,    0,
 1106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1106, 1106,    0, 1106,    0,    0,    0,    0,    0,
 1106,  104,    0, 1106,    0, 1106, 1106, 1106, 1106,    0,
 1106,    0,    0,    0,    0,    0,    0,    0, 1106, 1106,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1106,
 1106,    0, 1106, 1106, 1106,    0,    0,    0,    0, 1106,
 1106, 1106, 1106, 1106,    0, 1106,    0,    0, 1106, 1106,
 1106, 1106, 1106, 1106, 1106,    0,    0,    0, 1106, 1106,
 1106, 1106, 1106, 1106, 1106, 1106,    0, 1106,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1106, 1106, 1106,
 1106, 1106, 1106,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1111,    0, 1111, 1111,    0,    0,    0,    0,    0, 1111,
    0,    0,    0,    0,    0, 1111,    0,    0,    0,    0,
 1111,    0,    0, 1111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1111,  913,    0,
    0,    0, 1111, 1111,    0,    0, 1111,    0,    0,    0,
    0,    0,    0, 1111,    0, 1111, 1111,    0,    0, 1111,
    0,    0,    0, 1111,    0, 1111,    0, 1111,    0, 1111,
    0,    0,    0,    0, 1111, 1111,    0, 1111,    0,  913,
  913,  913,  913,  913,    0,  913,    0,    0,    0,    0,
    0,    0, 1111, 1111,    0, 1111,    0,  913,  913,  913,
  913,    0,    0,    0,    0,    0, 1111,    0, 1111,    0,
 1111, 1111, 1111,    0, 1111,    0,    0, 1111, 1111,    0,
    0,    0,    0,    0,    0,    0,    0, 1111,    0,    0,
    0,  913,    0,    0,    0,    0,    0,    0,    0,    0,
 1111,    0,    0, 1111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1111,
    0,    0,    0,    0,    0, 1111, 1111,    0,    0,    0,
 1111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1111, 1111,    0, 1111,    0,    0,    0,    0,    0,
 1111,    0,    0, 1111,    0, 1111, 1111, 1111, 1111,    0,
 1111,    0,    0,    0,    0,    0,    0,    0, 1111, 1111,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1111,
 1111,    0, 1111, 1111, 1111,    0,    0,    0,    0, 1111,
 1111, 1111, 1111, 1111,    0, 1111,    0,    0, 1111, 1111,
 1111, 1111, 1111, 1111, 1111,    0,    0,    0, 1111, 1111,
 1111, 1111, 1111, 1111, 1111, 1111,    0, 1111,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1111, 1111, 1111,
 1111, 1111, 1111,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  913,    0,  913,  913,    0,    0,    0,    0,    0,  913,
    0,    0,    0,    0,    0,  913,    0,    0,    0,    0,
  913,    0,    0,  913,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  913,  926,    0,
    0,    0,  913,  913,    0,    0,  913,    0,    0,    0,
    0,    0,    0,  913,    0,  913,  913,    0,    0,  913,
    0,    0,    0,  913,    0,  913,    0,  913,    0,  913,
    0,    0,    0,    0,  913,  913,    0,  913,    0,  926,
  926,  926,  926,  926,    0,  926,    0,    0,    0,    0,
    0,    0,  913,  913,    0,  913,    0,  926,  926,  926,
  926,    0,    0,    0,    0,    0,  913,    0,  913,    0,
  913,  913,  913,    0,  913,    0,    0,  913,  913,    0,
    0,    0,    0,    0,    0,    0,    0,  913,    0,    0,
    0,  926,    0,    0,    0,    0,    0,    0,    0,    0,
  913,    0,    0,  913,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  913,
    0,    0,    0,    0,    0,  913,  913,    0,    0,    0,
  913,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  913,  913,    0,  913, 1181,    0,    0,    0,    0,
  913,    0,    0,  913,    0,  913,  913,  913,  913,    0,
  913,    0,    0,    0,    0,    0,    0,    0,  913,  913,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  913,
  913,    0,  913,  913,  913,    0,    0,    0,    0,  913,
  913,  913,  913,  913,    0,  913,    0,    0,  913,  913,
  913,  913,  913,  913,  913,    0,    0,    0,  913,  913,
  913,  913,  913,  913,  913,  913,    0,  913,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  913,  913,  913,
  913,  913,  913,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  926,    0,  926,  926,    0,    0,    0,    0,    0,  926,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  926,    0,    0,  926,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  926,  929,    0,
    0,    0,  926,  926,    0,    0,  926,    0,    0,    0,
    0,    0,    0,  926,    0,  926,  926,    0,    0,  926,
    0,    0,    0,  926,    0,  926,    0,  926,    0,  926,
    0,    0,    0,    0,  926,  926,    0,  926,    0,  929,
  929,  929,  929,  929,    0,  929,    0,    0,    0,    0,
    0,    0,  926,  926,    0,  926,    0,  929,  929,  929,
  929,    0,    0,    0,    0,    0,  926,    0,  926,    0,
  926,  926,  926,    0,  926,    0,    0,  926,  926,    0,
    0,    0,    0,    0,    0,    0,    0,  926,    0,    0,
    0,  929,  486,    0,    0,    0,    0,    0,    0,    0,
  926,    0,    0,  926,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  926,
  488,    0,    0,    0,    0,  926,  926,    0,    0,    0,
  926,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  926,  926,    0,  926,    0,    0,    0,  490,    0,
  926,    0,    0,  926,    0,  926,  926,  926,  926,    0,
  926,    0,    0,    0,    0,    0,    0,    0,  926,  926,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  926,
  926,    0,  926,  926,  926,    0,    0,    0,    0,  926,
  926,  926,  926,  926,    0,  926,    0,    0,  926,  926,
  926,  926,  926,  926,  926,    0,    0,    0,  926,  926,
  926,  926,  926,  926,  926,  926,    0,  926,    0,  495,
    0,    0,    0,    0,    0,    0,    0,  926,  926,  926,
  926,  926,  926,    0,    0,  497,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
  499,  500,    0,  263,  264,    0,    0,    0,    0,    0,
  929,    0,  929,  929,    0,    0,    0,    0,    0,  929,
    0,    0,  503,  504,  505,  506,  507,  508,  509,  510,
  511,    0,    0,  929,    0,    0,    0,  513,  514,    0,
    0,    0,    0,    0,    0,    0,  518,  929,  930,    0,
    0,    0,  929,  929,    0,    0,  929,    0,    0,    0,
    0,    0,    0,  929,    0,  929,  929,    0,    0,  929,
    0,    0,    0,  929,    0,  929,    0,  929,    0,  929,
    0,    0,    0,    0,  929,  929,    0,  929,    0,  930,
  930,  930,  930,  930,    0,  930,    0,    0,    0,    0,
    0,    0,  929,  929,    0,  929,    0,  930,  930,  930,
  930,    0,    0,    0,    0,    0,  929,    0,  929,    0,
  929,  929,  929,    0,  929,    0,    0,  929,  929,    0,
    0,    0,    0,    0,    0,    0,    0,  929,    0,    0,
    0,  930,    0,    0,    0,    0,    0,    0,    0,    0,
  929,    0,    0,  929,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  929,
    0,    0,    0,    0,    0,  929,  929,    0,    0,    0,
  929,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  929,  929,    0,  929,    0,    0,    0,    0,    0,
  929,    0,    0,  929,    0,  929,  929,  929,  929,    0,
  929,    0,    0,    0,    0,    0,    0,    0,  929,  929,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  929,
  929,    0,  929,  929,  929,    0,    0,    0,    0,  929,
  929,  929,  929,  929,    0,  929,    0,    0,  929,  929,
  929,  929,  929,  929,  929,    0,    0,    0,  929,  929,
  929,  929,  929,  929,  929,  929,    0,  929,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  929,  929,  929,
  929,  929,  929,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  930,    0,  930,  930,    0,    0,    0,    0,    0,  930,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  930,    0,    0,    0,  924,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  930,    0,    0,
    0,    0,  930,  930,    0,    0,  930,    0,    0,    0,
    0,    0,    0,  930,    0,  930,  930,    0,    0,  930,
    0, 1059,    0,  930, 1059,  930,    0,  930,  924,  930,
  924,  924,  924,    0,  930,  930,    0,  930,    0, 1061,
    0, 1059,    0,    0, 1059,    0,  924,  924,  924,  924,
    0,    0,  930,  930,    0,  930,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  930,    0,  930,    0,
  930,  930,  930,    0,  930,    0,    0,  930,  930,    0,
  924,    0,    0,    0, 1059,    0,    0,  930,    0,    0,
 1059, 1059, 1059,    0, 1059, 1059, 1059,    0, 1059,    0,
  930,    0,    0,  930,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1059,    0, 1059,  930,
    0,    0,    0,    0,    0,  930,  930,    0,    0,    0,
  930,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  930,  930,    0,  930,    0,    0, 1059,    0,    0,
  930,    0,    0,  930,    0,  930,  930,  930,  930,    0,
  930,    0,    0,    0, 1059,    0,    0,    0,  930,  930,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  930,
  930,    0,  930,  930,  930,    0, 1059,    0,    0,  930,
  930,  930,  930,  930,    0,  930,    0,    0,  930,  930,
  930,  930,  930,  930,  930,    0,    0,    0,  930,  930,
  930,  930,  930,  930,  930,  930,    0,  930,    0,    0,
    0, 1059, 1059,    0,    0,    0,    0,  930,  930,  930,
  930,  930,  930,    0,    0,    0,    0,    0, 1059,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  924,
    0,  924,  924,    0,    0,    0,    0,    0,  924,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  924,    0,    0,    0,  923,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  924,    0,    0,    0,
    0,  924,  924,    0,    0,  924,    0,    0,    0,    0,
    0,    0,  924,    0,  924,  924,    0,    0,  924,    0,
  710,    0,  924,  711,  924,    0,  924,  923,  924,  923,
  923,  923,    0,  924,  924,    0,  924,    0,    0,    0,
  712,    0,    0,  713,    0,  923,  923,  923,  923,    0,
    0,  924,  924,    0,  924,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  924,    0,  924,    0,  924,
  924,  924,    0,  924,    0,    0,  924,  924,    0,  923,
    0,    0,    0,  714,    0,    0,  924,    0,    0,  715,
  716,  717,    0,  718,  719,  720,    0,  721,    0,  924,
    0,    0,  924,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  722,    0,  723,  924,    0,
    0,    0,    0,    0,  924,  924,    0,    0,    0,  924,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  924,  924,    0,  924,    0,    0,  724,    0,    0,  924,
    0,    0,  924,    0,  924,  924,  924,  924,    0,  924,
    0,    0,    0,  725,    0,    0,    0,  924,  924,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  924,  924,
    0,  924,  924,  924,    0,  726,    0,    0,  924,  924,
  924,  924,  924,    0,  924,    0,    0,  924,  924,  924,
  924,  924,  924,  924,    0,    0,    0,  924,  924,  924,
  924,  924,  924,  924,  924,    0,  924,    0,    0,    0,
  727,  728,    0,    0,    0,    0,  924,  924,  924,  924,
  924,  924,    0,    0,    0,    0,    0,  729,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  923,    0,
  923,  923,    0,    0,    0,    0,    0,  923,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  923,    0,    0,    0,  925,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  923,    0,    0,    0,    0,
  923,  923,    0,    0,  923,    0,    0,    0,    0,    0,
    0,  923,    0,  923,  923,    0,    0,  923,    0,    0,
    0,  923,    0,  923,    0,  923,  925,  923,  925,  925,
  925,    0,  923,  923,    0,  923,    0,    0,    0,    0,
    0,    0,    0,    0,  925,  925,  925,  925,    0,    0,
  923,  923,    0,  923,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  923,    0,  923,    0,  923,  923,
  923,    0,  923,    0,    0,  923,  923,    0,  925,    0,
    0,    0,    0,    0,    0,  923,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  923,    0,
    0,  923,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  923,    0,    0,
    0,    0,    0,  923,  923,    0,    0,    0,  923,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  923,
  923,    0,  923,    0,    0,    0,    0,    0,  923,    0,
    0,  923,    0,  923,  923,  923,  923,    0,  923,    0,
    0,    0,    0,    0,    0,    0,  923,  923,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  923,  923,    0,
  923,  923,  923,    0,    0,    0,    0,  923,  923,  923,
  923,  923,    0,  923,    0,  866,  923,  923,  923,  923,
  923,  923,  923,    0,    0,    0,  923,  923,  923,  923,
  923,  923,  923,  923,    0,  923,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  923,  923,  923,  923,  923,
  923,    0,    0,    0,    0,    0,  866,    0,    0,  866,
    0,    0,    0,    0,    0,    0,    0,  925,    0,  925,
  925,    0,    0,    0,  866,    0,  925,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  925,    0,    0,    0,  928,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  925,    0,    0,    0,    0,  925,
  925,    0,    0,  925,    0,    0,    0,    0,    0,    0,
  925,    0,  925,  925,    0,    0,  925,    0,    0,    0,
  925,    0,  925,    0,  925,  928,  925,  928,  928,  928,
    0,  925,  925,    0,  925,    0,    0,    0,    0,    0,
    0,    0,    0,  928,  928,  928,  928,    0,    0,  925,
  925,    0,  925,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  925,    0,  925,    0,  925,  925,  925,
    0,  925,    0,    0,  925,  925,    0,  928,    0,    0,
    0,    0,    0,    0,  925,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  925,    0,    0,
  925,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  925,    0,    0,    0,
    0,    0,  925,  925,    0,    0,    0,  925,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  925,  925,
    0,  925,    0,    0,    0,    0,    0,  925,    0,    0,
  925,    0,  925,  925,  925,  925,    0,  925,    0,    0,
    0,    0,    0,    0,    0,  925,  925,  866,    0,    0,
    0,    0,    0,    0,    0,    0,  925,  925,    0,  925,
  925,  925,    0,    0,    0,    0,  925,  925,  925,  925,
  925,    0,  925,    0,  742,  925,  925,  925,  925,  925,
  925,  925,    0,    0,    0,  925,  925,  925,  925,  925,
  925,  925,  925,    0,  925,    0,    0,    0,    0,    0,
  866,    0,    0,  866,  925,  925,  925,  925,  925,  925,
  866,    0,  866,    0,    0,  742,  866,    0,  742,    0,
    0,  866,    0,    0,  866,    0,  928,    0,  928,  928,
    0,    0,    0,  742,    0,  928,    0,    0,    0,  866,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  928,
    0,    0,    0,  866,    0,    0,    0,    0,    0,    0,
    0,  866,    0,  928,  866,  866,    0,    0,  928,  928,
    0,    0,  928,    0,  866,    0,    0,    0,    0,  928,
    0,  928,  928,    0,    0,  928,    0,    0,    0,  928,
  866,  928,    0,  928,    0,  928,    0,    0,    0,    0,
  928,  928,    0,  928,    0,    0,    0,    0,    0,    0,
    0,    0,  866,    0,    0,    0,    0,  866,  928,  928,
    0,  928,    0,    0,    0,    0,    0,    0,    0,  866,
    0,  866,  928,    0,  928,    0,  928,  928,  928,    0,
  928,    0,    0,  928,  928,    0,    0,    0,    0,    0,
    0,    0,    0,  928,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  928,    0,    0,  928,
    0,    0,    0,    0,    0,    0,    0,    0,  866,    0,
    0,    0,    0,    0,    0,  928,    0,    0,    0,    0,
    0,  928,  928,    0,    0,  866,  928,    0,    0,  866,
    0,    0,    0,  713,    0,    0,    0,  928,  928,    0,
  928,    0,    0,    0,    0,    0,  928,    0,    0,  928,
    0,  928,  928,  928,  928,    0,  928,    0,    0,    0,
    0,    0,    0,    0,  928,  928,    0,    0,  742,    0,
    0,    0,    0,  713,  713,  928,  928,  713,  928,  928,
  928,    0,    0,    0,    0,  928,  928,  928,  928,  928,
    0,  928,  713,    0,  928,  928,  928,  928,  928,  928,
  928,    0,    0,    0,  928,  928,  928,  928,  928,  928,
  928,  928,    0,  928,    0,    0,    0,    0,    0,  742,
    0,    0,  742,  928,  928,  928,  928,  928,  928,  742,
    0,  742,    0,    0,    0,  742,    0,    0,    0,    0,
  742,  837,  835,  742,  836,    0,  838,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  742, 1036,
 1035, 1037,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  742,    0,    0,    0,    0,    0,    0,    0,
  742,    0,    0,    0,  742,    0,    0,    0,    0,    0,
    0,    0,    0,  742,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,    0,    0,    0,    0,  742,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    0,    0,    0,    0,  742,    4,    0,    5,
    0,    6,    0,  740,    0,    0,    7,    0,  742,    0,
  742,    0,    0,    8,    0,    0,  742,    0,    0,  742,
    0,  742,  742,  742,  742,    0,  742,    9,    0,    0,
    0,    0,    0,    0,  742,  742,    0,   10,    0,    0,
    0,    0,    0,    0,  740,  742,  742,  740,  742,  742,
  742,    0,    0,    0,    0,  742,  742,  742,  742,  742,
    0,  742,  740,    0,  742,  742,  742,  742,  742,  742,
  742,    0,    0,    0,  742,  742,  742,  742,  742,  742,
  742,  742,    0,  742,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  742,  742,  742,  742,  742,  742,    0,
   11,    0,    0,    0,    0,    0,    0,   12,  713,    0,
   13,  713,   14,   15,    0,    0,    0,    0,  713,    0,
  713,    0,    0,    0,  713,    0,    0,    0,    0,  713,
 1023,    0,  713,    0,    0,    0,  833,   16,    0,    0,
    0,  834,    0,    0, 1024,    0,    0,  713,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  713,    0,    0,    0,    0,    0,    0,    0,  713,
    0,    0,    0,  713,    0,    0,    0,    0,    0,    0,
 1025,    0,  713,    0,    0,    0,   17,    0, 1026,    0,
    0,    0,    0,    0,    0,    0, 1027,    0,  713,    0,
    0,   18,   19,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1028,    0, 1029,    0,    0,    0,
    0,    0,    0,   20,    0,  713,    0,    0,    0, 1030,
    0, 1031, 1032, 1033,    0,    0,    0,  713,    0,  713,
    0,    0,    0,    0,    0,  713,    0,    0,  713,    0,
  713,  713,  713,  713,    0,  713,    0,    0,    0,    0,
    0,    0,    0,  713,  713,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  713,  713,    0,  713,  713,  713,
 1034,    0,    0,    0,  713,  713,  713,  713,  713,    0,
  713,    0,    0,  713,  713,  713,  713,  713,  713,  713,
    0,    0,  907,  713,  713,  713,  713,  713,  713,  713,
  713,    0,  713,    0,    0,    0,    0,    0,  740,    0,
    0,  740,  713,  713,  713,  713,  713,  713,  740,    0,
  740,    0,    0,    0,  740,    0,    0,    0,    0,  740,
    0,    0,  740,    0, 1098, 1098,  907, 1098, 1098, 1098,
    0,    0,    0,    0,    0,    0,    0,  740,    0,    0,
    0,  907, 1098, 1098, 1098,    0,    0,    0,    0,    0,
    0,  740,    0,    0,    0,    0,    0,    0,    0,  740,
    0,  908,    0,  740,    0,    0,    0,    0,    0,    0,
    0,    0,  740, 1098,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  740,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1099, 1099,  908, 1099, 1099, 1099,    0,
    0,    0,    0,    0,    0,  740,    0,    0,    0,    0,
  908, 1099, 1099, 1099,    0,    0,    0,  740,    0,  740,
    0,    0,    0,    0,    0,  713,    0,    0,  713,    0,
  713,  713,  713,  713,    0,  713,    0,    0,    0,    0,
    0,    0, 1099,  713,  713,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  713,  713,    0,  713,  713,  713,
    0,    0,    0,    0,  713,  713,  740,  713,  713,    0,
  713,    0,    0,  713,  713,  713,  713,  713,  713,  713,
    0,    0,    0,  740,  713,  713,  713,  740,  713,  713,
  713,  867,  713,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  713,  713,  713,  713,  713,  713,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  867,    0,  907,  867,    0,  899,    0,    0,
    0,    0,    0, 1098,    0,    0,    0,    0,    0, 1098,
  867,    0,    0,    0, 1098,    0,    0, 1098,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  899,    0,
    0,  899,    0,    0,    0,    0,    0,  907,    0,    0,
  907,    0,    0, 1098,    0,    0,  899,  907,    0,  907,
    0, 1098,    0,  907,    0,    0,    0,    0,  907, 1098,
    0,  907,    0,  908,    0,    0,    0,    0,    0,    0,
    0,    0, 1099,    0,    0,    0,  907, 1098, 1099, 1098,
    0,    0,    0, 1099,    0,    0, 1099,    0,    0,    0,
  907,    0, 1098,    0, 1098, 1098, 1098,    0,  907,    0,
    0,  907,  907,    0,    0,    0,    0,    0,    0,    0,
    0,  907,    0,    0,    0,    0,  908,    0,    0,  908,
    0,    0, 1099,    0,    0,    0,  908,  907,  908,    0,
 1099,    0,  908,    0,    0,    0,    0,  908, 1099,    0,
  908,    0,    0, 1098,    0,    0,    0,    0,    0,  907,
  909,    0,    0,    0,  907,  908, 1099,    0, 1099,    0,
    0,    0,    0,    0,    0,    0,  907,    0,  907,  908,
    0, 1099,    0, 1099, 1099, 1099,    0,  908,    0,    0,
  908,  908,    0,    0,    0,    0,    0,    0,    0,    0,
  908,    0, 1100, 1100,  909, 1100, 1100, 1100,    0,    0,
    0,    0,    0,  867,    0,    0,  908,    0,    0,  909,
 1100, 1100, 1100,    0,    0,  907,    0,    0,    0,    0,
    0,    0, 1099,    0,    0,    0,    0,    0,  908,  861,
    0,    0,  907,  908,    0,    0,  907,    0,    0,    0,
    0, 1100,    0,    0,    0,  908,    0,  908,    0,  899,
    0,    0,    0,    0,    0,    0,  867,    0,    0,  867,
    0,    0,    0,    0,    0,    0,  867,    0,  867,    0,
  861,    0,  867,  861,    0,    0,    0,  867,    0,    0,
  867,    0,    0,    0,    0,    0,    0,    0,  861,    0,
    0,    0,    0,    0,  908,  867,    0,    0,    0,    0,
    0,  862,  899,    0,    0,  899,    0,    0,    0,  867,
    0,  908,  899,    0,  899,  908,    0,  867,  899,    0,
  867,  867,    0,  899,    0,    0,  899,    0,    0,    0,
  867,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  899,  862,    0,    0,  862,  867,    0,    0,    0,
    0,    0,    0,    0,    0,  899,    0,    0,    0,    0,
  862,  863,    0,  899,    0,    0,  899,  899,  867,    0,
    0,    0,    0,  867,    0,    0,  899,    0,    0,    0,
    0,    0,    0,    0,    0,  867,    0,  867,    0,    0,
    0,    0,  899,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  863,    0,    0,  863,    0,    0,    0,    0,
    0,    0,  909,    0,  899,    0,    0,    0,    0,  899,
  863, 1100, 1091,  837,  835,    0,  836, 1100,  838,    0,
    0,  899, 1100,  899,  867, 1100,    0,    0,    0,    0,
    0, 1036, 1035, 1037,    0,    0,    0,    0,    0,    0,
    0,  867,    0,    0,    0,  867,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  909,    0,    0,  909,    0,
    0, 1100,    0,    0,    0,  909,    0,  909,    0, 1100,
  899,  909,    0,    0,    0,    0,  909, 1100,    0,  909,
    0,  861,    0,    0,  898,    0,    0,  899,    0,    0,
    0,  899,    0,    0,  909, 1100,    0, 1100,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  909,    0,
 1100,    0, 1100, 1100, 1100,  892,  909,    0,    0,  909,
  909,    0,    0,    0,    0,  898,    0,    0,  898,  909,
    0,    0,    0,    0,  861,    0,    0,  861,    0,    0,
    0,    0,    0,  898,  861,  909,  861,    0,    0,    0,
  861,    0,    0,  862,    0,  861,  892,    0,  861,  892,
    0, 1100,    0,    0,    0,    0,    0,  909,    0,    0,
    0,    0,  909,  861,  892,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  909,    0,  909,  861,    0,    0,
    0,    0,    0,    0,    0,  861,    0,    0,  861,  861,
    0,    0,    0,    0,    0,    0,  862,    0,  861,  862,
    0,    0,    0,  863,    0,    0,  862,    0,  862,    0,
    0,    0,  862,    0,  861,    0,    0,  862,    0,    0,
  862,    0,    0,  909,    0,    0,    0,    0,    0,    0,
    0,    0, 1023,    0,    0,  862,  861,  900,  833,    0,
  909,  861,    0,  834,  909,    0, 1024,    0,    0,  862,
    0,    0,    0,  861,    0,  861,  863,  862,    0,  863,
  862,  862,    0,    0,    0,    0,  863,    0,  863,    0,
  862,    0,  863,    0,    0,    0,    0,  863,  900,    0,
  863,  900, 1025,    0,    0,    0,  862,    0,    0,    0,
 1026,    0,    0,    0,    0,  863,  900,    0, 1027,    0,
    0,    0,  861,    0,    0,    0,    0,    0,  862,  863,
    0,    0,  901,  862,    0,    0, 1028,  863, 1029,  861,
  863,  863,    0,  861,    0,  862,    0,  862,    0,    0,
  863, 1030,    0, 1031, 1032, 1033,  898,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  863,    0,    0,    0,
    0,    0,    0,  901,    0,    0,  901,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  892,  863,    0,
    0,  901,    0,  863,  862,    0,    0,    0,    0,    0,
    0,    0, 1034,    0,    0,  863,    0,  863,    0,  898,
    0,  862,  898,    0,    0,  862,    0,    0,    0,  898,
    0,  898,    0,    0,    0,  898,    0,    0,    0,    0,
  898,    0,    0,  898,    0,    0,    0,    0,    0,    0,
  892,    0,    0,  892,    0,    0,    0,    0,  898,    0,
  892,    0,  892,    0,  863,    0,  892,    0,    0,    0,
    0,  892,  898,    0,  892,  889,    0,    0,    0,    0,
  898,  863,    0,  898,  898,  863,    0,    0,    0,  892,
    0,    0,    0,  898,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  892,    0,  887,    0,    0,    0,  898,
    0,  892,    0,    0,  892,  892,  889,    0,    0,  889,
    0,    0,    0,    0,  892,    0,    0,    0,    0,  900,
    0,  898,    0,    0,  889,    0,  898,    0,    0,    0,
  892,    0,    0,    0,    0,    0,  887,    0,  898,  887,
  898,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  892,    0,  887,    0,    0,  892,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  892,
    0,  892,  900,    0,    0,  900,    0,    0,    0,    0,
    0,    0,  900,    0,  900,    0,    0,  898,  900,    0,
    0,    0,    0,  900,  901,    0,  900,    0,    0,    0,
    0,    0,    0,    0,  898,    0,    0,    0,  898,    0,
    0,  900,    0,    0,    0,    0,    0,  893,  892,    0,
    0,    0,    0,    0,    0,  900,    0,    0,    0,    0,
    0,    0,    0,  900,    0,  892,  900,  900,    0,  892,
    0,    0,    0,    0,    0,    0,  900,  901,    0,    0,
  901,    0,    0,    0,    0,    0,    0,  901,  893,  901,
    0,  893,  900,  901,    0,    0,    0,    0,  901,    0,
    0,  901,    0,    0,    0,    0,  893,    0,    0,    0,
    0,    0,    0,    0,  900,    0,  901,    0,    0,  900,
    0,    0,  902,    0,    0,    0,    0,    0,    0,    0,
  901,  900,    0,  900,    0,    0,    0,    0,  901,    0,
    0,  901,  901,    0,    0,    0,    0,    0,    0,    0,
    0,  901,    0,    0,    0,    0,    0,  889,    0,    0,
    0,    0,    0,  902,    0,    0,  902,  901,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  900,  902,    0,    0,    0,    0,    0,  887,    0,  901,
    0,    0,    0,    0,  901,    0,    0,  900,    0,    0,
    0,  900,    0,    0,    0,    0,  901,    0,  901,    0,
  889,    0,    0,  889,    0,    0,    0,    0,    0,    0,
  889,    0,  889,    0,    0,    0,  889,    0,    0,    0,
    0,  889,    0,    0,  889,    0,    0,    0,    0,    0,
  887,    0,    0,  887,  888,    0,    0,    0,    0,  889,
  887,    0,  887,    0,    0,  901,  887,    0,    0,    0,
    0,  887,    0,  889,  887,    0,    0,    0,    0,    0,
    0,  889,  901,    0,  889,  889,  901,  890,    0,  887,
    0,    0,    0,    0,  889,  888,    0,    0,  888,    0,
    0,    0,    0,  887,    0,    0,    0,    0,    0,    0,
  889,  887,    0,  888,  887,  887,    0,    0,    0,  893,
    0,    0,    0,    0,  887,    0,    0,    0,  890,    0,
    0,  890,  889,  894,    0,    0,    0,  889,    0,    0,
  887,    0,    0,    0,    0,    0,  890,    0,    0,  889,
    0,  889,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  887,    0,    0,    0,    0,  887,    0,    0,
    0,    0,  893,    0,  894,  893,    0,  894,    0,  887,
    0,  887,  893,    0,  893,    0,    0,    0,  893,    0,
    0,    0,  894,  893,  902,    0,  893,    0,  889,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  893,    0,    0,    0,  889,    0,    0,    0,  889,
    0,    0,    0,    0,    0,  893,    0,    0,  887,    0,
    0,  737,    0,  893,    0,    0,  893,  893,    0,    0,
    0,    0,    0,    0,    0,  887,  893,  902,    0,  887,
  902,    0,    0,    0,    0,    0,    0,  902,    0,  902,
    0,    0,  893,  902,    0,    0,    0,    0,  902,    0,
    0,  902,  737,    0,    0,  737,    0,    0,    0,    0,
    0,    0,    0,    0,  893,    0,  902,    0,    0,  893,
  737,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  902,  893,    0,  893,    0,    0,    0,    0,  902,    0,
    0,  902,  902,    0,    0,    0,  888,    0,    0,    0,
    0,  902,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  902,    0,    0,
    0,    0,  776,    0,    0,  527,    0,  528,    0,  890,
  893,    0,    0,    0,    0,    0,    0,    0,    0,  902,
  530,    0,    0,    0,  902,  342,    0,  893,    0,  888,
    0,  893,  888,    0,    0,    0,  902,    0,  902,  888,
    0,  888,    0,    0,    0,  888,    0,    0,    0,    0,
  888,    0,    0,  888,    0,  894,    0,    0,    0,    0,
    0,    0,  890,    0,    0,  890,    0,    0,  888,    0,
    0,    0,  890,    0,  890,    0,    0,    0,  890,    0,
    0,    0,  888,  890,    0,  902,  890,    0,    0,    0,
  888,    0,    0,  888,  888,    0,    0,    0,    0,    0,
    0,  890,  902,  888,    0,    0,  902,    0,  894,    0,
    0,  894,    0,    0,    0,  890,    0,    0,  894,  888,
  894,    0,    0,  890,  894,    0,  890,  890,    0,  894,
    0,    0,  894,    0,    0,    0,  890,    0,    0,    0,
    0,  888,    0,    0,    0,    0,  888,  894,    0,    0,
    0,    0,  890,    0,    0,    0,    0,    0,  888,    0,
  888,  894,    0,    0,    0,    0,    0,    0,    0,  894,
    0,    0,  894,  894,  890,    0,    0,    0,    0,  890,
    0,    0,  894,    0,    0,    0,    0,    0,    0,    0,
    0,  890,    0,  890,    0,    0,    0,    0,  894,    0,
    0,    0,    0,    0,    0,    0,  737,  888,    0,  737,
    0,    0,    0,    0,    0,    0,  737,    0,  737,    0,
  894,    0,  737,    0,  888,  894,    0,  737,  888,  483,
  737,    0,    0,    0,    0,    0,  484,  894,    0,  894,
  890,    0,    0,    0,    0,  737,    0,    0,  485,    0,
    0,  769,    0,    0,  486,  487,    0,  890,    0,  737,
    0,  890,    0,    0,    0,    0,    0,  737,    0,    0,
    0,  737,  776,  770,    0,  527,    0,  528,    0,    0,
  737,    0,  488,    0,    0,  489,  894,    0,    0,    0,
  530,    0,    0,    0,    0,  342,  737,    0,    0,    0,
    0,    0,    0,  894,    0,    0,    0,  894,    0,    0,
  490,    0,  491,  492,    0,    0,    0,    0,    0,    0,
    0,    0,  493,  737,    0,    0,  494,    0,    0,    0,
    0,    0,    0,    0,  771,  737,    0,  737,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  772,    0,    0,    0,    0,
    0,  495,    0,    0,  737,    0,    0,  496,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,  737,    0,    0,    0,  737,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514,    0,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  773,  774,  775,  139,  140,    0,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,    0,    0,  483,
    0,    0,    0,    0,    0,    0,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  776,    0,  770,  527,    0,  528,    0,    0,    0,
    0,    0,  488,    0,    0,  489,    0,    0,    0,  530,
    0,    0,    0,    0,  342,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,    0,  491,  492,    0,    0,    0,    0,    0,    0,
    0,    0,  493,    0,    0,    0,  494,    0,    0,    0,
    0,    0,    0,    0,  771,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   14,    0,    0,    0,  772,    0,    0,    0,    0,
    0,  495,    0,    0,    0,    0,    0,  496,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514, 1105,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  773,  774,  775,  139,  140,  530,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,    0,  483,    0,
    0,    0,    0,    0,    0,  484,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  485,    0,    0,
    0,    0,    0,  486,  487,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,  770,  527,    0,  528,    0,    0,    0,    0,
    0,  488,    0,    0,  489,    0,    0,    0,  530,    0,
    0,    0,    0,  342,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  490,
    0,  491,  492,    0,    0,    0,    0,    0,    0,    0,
    0,  493,    0,    0,    0,  494,    0,    0,    0,    0,
    0,    0,    0,  771,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  772,    0,    0,    0,    0,    0,
  495,    0,    0,    0,    0,    0,  496,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  497,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  498,  499,  500,  501,  263,  264,  116,    0,  117,  118,
  119,  120,    0,  121,  502,    0,    0,    0,    0,    0,
    0,  122,  123,  503,  504,  505,  506,  507,  508,  509,
  510,  511,  124,  512,    0,  126,  127,  128,  513,  514,
    0,  515,  516,  517,    0,  131,  132,  518,  133,    0,
    0,  134,  135,  773,  774,  775,  139,  140,    0,    0,
    0,    0,  141,  519,  143,    0,  520,  145,  146,    0,
  147,    0,  521,  522,  523,    0,  524,  525,    0,  526,
  148,  149,  150,  151,  152,  153,    0,  483,    0,    0,
    0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
    0,    0,  486,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  600,    0,    0,  527,
  488,  528,    0,  489,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  530,    0,    0,    0,    0,  342,
    0,    0,    0,    0,    0,    0,    0,    0,  490,    0,
  491,  492,    0,    0,    0,    0,    0,    0,    0,    0,
  493,    0,    0,  115,  494,    0,  116,    0,  117,  118,
  119,  120,    0,  121,    0,    0,    0,    0,    0,    0,
    0,  122,  123,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  124,  125,    0,  126,  127,  128,    0,    0,
    0,    0,  129,  130,    0,  131,  132,    0,  133,    0,
    0,  134,  135,  136,  137,  138,  139,  140,    0,  495,
    0,    0,  141,  142,  143,  496,  144,  145,  146,    0,
  147,    0,    0,    0,    0,  497,    0,    0,    0,    0,
  148,  149,  150,  151,  152,  153,    0,    0,    0,  498,
  499,  500,  501,  263,  264,  116,    0,  117,  118,  119,
  120,    0,  121,  502,    0,    0,    0,    0,    0,    0,
  122,  123,  503,  504,  505,  506,  507,  508,  509,  510,
  511,  124,  512,    0,  126,  127,  128,  513,  514, 1137,
  515,  516,  517,    0,  131,  132,  518,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  519,  143,    0,  520,  145,  146, 1086,  147,
    0,  521,  522,  523, 1087,  524,  525, 1088,  526,  148,
  149,  150,  151,  152,  153,    0, 1272,    0,    0, 1273,
    0,    0,    0,  483,    0,    0,    0,    0,    0,    0,
  484,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  485,    0,    0,    0,    0,    0,  486,  487,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,    0,    0,  527,  488,  528,    0,  489,
    0,    0,    0,    0,    0,    0,    0,    0,  581,    0,
  530,    0,    0,    0,    0,  342,    0,    0,    0,    0,
    0,    0,    0,    0,  490,  115,  491,  492,  116,    0,
  117,  118,  119,  120,    0,  121,  493,    0,    0,    0,
  494,    0,    0,  122,  123,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  125,    0,  126,  127,  128,
    0,    0,    0,    0,  129,  130,    0,  131,  132,    0,
  133,    0,    0,  134,  135,  136,  137,  138,  139,  140,
    0,    0,    0,    0,  141,  142,  143,    0,  144,  145,
  146,    0,  147, 1274,    0,  495,    0,    0,    0,    0,
    0,  496,  148,  149,  150,  151,  152,  153,    0,    0,
    0,  497,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  498,  499,  500,  501,  263,
  264,  116,    0,  117,  118,  119,  120,    0,  121,  502,
    0,    0,    0,    0,    0,    0,  122,  123,  503,  504,
  505,  506,  507,  508,  509,  510,  511,  124,  512,    0,
  126,  127,  128,  513,  514, 1137,  515,  516,  517,    0,
  131,  132,  518,  133,    0,    0,  134,  135,  136,  137,
  138,  139,  140,    0,    0,    0,    0,  141,  519,  143,
    0,  520,  145,  146,    0,  147,    0,  521,  522,  523,
    0,  524,  525,    0,  526,  148,  149,  150,  151,  152,
  153,    0, 1283,    0,    0, 1273,    0,    0,    0,  483,
    0,    0,    0,    0,    0,    0,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   14,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  600,    0,
    0,  527,  488,  528,    0,  489,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  530,    0,    0,    0,
    0,  342,    0,    0,    0,    0,    0,    0,    0,    0,
  490,  115,  491,  492,  116,    0,  117,  118,  119,  120,
    0,  121,  493,    0,    0,    0,  494,    0,    0,  122,
  123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  124,  125,    0,  126,  127,  128,    0,    0,    0,    0,
  129,  130,    0,  131,  132,    0,  133,    0,    0,  134,
  135,  136,  137,  138,  139,  140,    0,    0,    0,    0,
  141,  142,  143,    0,  144,  145,  146,    0,  147, 1274,
    0,  495,    0,    0,    0,    0,    0,  496,  148,  149,
  150,  151,  152,  153,    0,    0,    0,  497,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514,    0,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  136,  137,  138,  139,  140,  530,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,    0, 1287,    0,
    0, 1273,    0,    0,    0,  483,    0,    0,    0,    0,
    0,    0,  484,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  485,    0,    0,    0,    0,    0,
  486,  487,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  600,    0,    0,  527,  488,  528,
    0,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  530,    0,    0,    0,    0,  342,    0,    0,
    0,    0,    0,    0,    0,    0,  490,  115,  491,  492,
  116,    0,  117,  118,  119,  120,    0,  121,  493,    0,
    0,    0,  494,    0,    0,  122,  123,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,  125,    0,  126,
  127,  128,    0,    0,    0,    0,  129,  130,    0,  131,
  132,    0,  133,    0,    0,  134,  135,  136,  137,  138,
  139,  140,    0,    0,    0,    0,  141,  142,  143,    0,
  144,  145,  146,    0,  147, 1274,    0,  495,    0,    0,
    0,    0,    0,  496,  148,  149,  150,  151,  152,  153,
    0,    0,    0,  497,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  498,  499,  500,
  501,  263,  264,  116,    0,  117,  118,  119,  120,    0,
  121,  502,    0,    0,    0,    0,    0,    0,  122,  123,
  503,  504,  505,  506,  507,  508,  509,  510,  511,  124,
  512,    0,  126,  127,  128,  513,  514,    0,  515,  516,
  517,    0,  131,  132,  518,  133,    0,    0,  134,  135,
  136,  137,  138,  139,  140,    0,    0,    0,    0,  141,
  519,  143,    0,  520,  145,  146,    0,  147,    0,  521,
  522,  523,    0,  524,  525,    0,  526,  148,  149,  150,
  151,  152,  153,    0, 1295,    0,    0, 1273,    0,    0,
    0,  483,    0,    0,    0,    0,    0,    0,  484,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  485,    0,    0,    0,    0,    0,  486,  487,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,    0,  527,  488,  528,    0,  489,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  530,    0,
    0,    0,    0,  342,    0,    0,    0,    0,    0,    0,
    0,    0,  490,  115,  491,  492,  116,    0,  117,  118,
  119,  120,    0,  121,  493,    0,    0,    0,  494,    0,
    0,  122,  123,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  124,  125,    0,  126,  127,  128,    0,    0,
    0,    0,  129,  130,    0,  131,  132,    0,  133,    0,
    0,  134,  135,  136,  137,  138,  139,  140,    0,    0,
    0,    0,  141,  142,  143,    0,  144,  145,  146,    0,
  147, 1274,    0,  495,    0,    0,    0,    0,    0,  496,
  148,  149,  150,  151,  152,  153,    0,    0,    0,  497,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  498,  499,  500,  501,  263,  264,  116,
    0,  117,  118,  119,  120,    0,  121,  502,    0,    0,
    0,    0,    0,    0,  122,  123,  503,  504,  505,  506,
  507,  508,  509,  510,  511,  124,  512,    0,  126,  127,
  128,  513,  514,    0,  515,  516,  517,    0,  131,  132,
  518,  133,    0,    0,  134,  135,  136,  137,  138,  139,
  140,    0,    0,    0,    0,  141,  519,  143,    0,  520,
  145,  146,    0,  147,    0,  521,  522,  523,    0,  524,
  525,    0,  526,  148,  149,  150,  151,  152,  153,    0,
 1298,    0,    0, 1273,    0,    0,    0,  483,    0,    0,
    0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
    0,    0,  486,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  600,    0,    0,  527,
  488,  528,    0,  489,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  530,    0,    0,    0,    0,  342,
    0,    0,    0,    0,    0,    0,    0,    0,  490,  115,
  491,  492,  116,    0,  117,  118,  119,  120,    0,  121,
  493,    0,    0,    0,  494,    0,    0,  122,  123,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,  125,
    0,  126,  127,  128,    0,    0,    0,    0,  129,  130,
    0,  131,  132,    0,  133,    0,    0,  134,  135,  136,
  137,  138,  139,  140,    0,    0,    0,    0,  141,  142,
  143,    0,  144,  145,  146,    0,  147, 1274,    0,  495,
    0,    0,    0,    0,    0,  496,  148,  149,  150,  151,
  152,  153,    0,    0,    0,  497,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
  499,  500,  501,  263,  264,  116,    0,  117,  118,  119,
  120,    0,  121,  502,    0,    0,    0,    0,    0,    0,
  122,  123,  503,  504,  505,  506,  507,  508,  509,  510,
  511,  124,  512,    0,  126,  127,  128,  513,  514,    0,
  515,  516,  517,    0,  131,  132,  518,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  519,  143,    0,  520,  145,  146,    0,  147,
    0,  521,  522,  523,    0,  524,  525,    0,  526,  148,
  149,  150,  151,  152,  153,    0, 1303,    0,    0, 1273,
    0,    0,    0,  483,    0,    0,    0,    0,    0,    0,
  484,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  485,    0,    0,    0,    0,    0,  486,  487,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,    0,    0,  527,  488,  528,    0,  489,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  530,    0,    0,    0,    0,  342,    0,    0,    0,    0,
    0,    0,    0,    0,  490,   28,  491,  492,   28,    0,
   28,   28,   28,   28,    0,   28,  493,    0,    0,    0,
  494,    0,    0,   28,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,   28,    0,   28,   28,   28,
    0,    0,    0,    0,   28,   28,    0,   28,   28,    0,
   28,    0,    0,   28,   28,   28,   28,   28,   28,   28,
    0,    0,    0,    0,   28,   28,   28,    0,   28,   28,
   28,    0,   28, 1274,    0,  495,    0,    0,    0,    0,
    0,  496,   28,   28,   28,   28,   28,   28,    0,    0,
    0,  497,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  498,  499,  500,  501,  263,
  264,  116,    0,  117,  118,  119,  120,    0,  121,  502,
    0,    0,    0,    0,    0,    0,  122,  123,  503,  504,
  505,  506,  507,  508,  509,  510,  511,  124,  512,    0,
  126,  127,  128,  513,  514,    0,  515,  516,  517,    0,
  131,  132,  518,  133,    0,    0,  134,  135,  136,  137,
  138,  139,  140,    0,    0,    0,    0,  141,  519,  143,
    0,  520,  145,  146,    0,  147,    0,  521,  522,  523,
    0,  524,  525,    0,  526,  148,  149,  150,  151,  152,
  153,    0, 1306,    0,    0, 1273,    0,    0,    0,  483,
    0,    0,    0,    0,    0,    0,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  600,    0,
    0,  527,  488,  528,    0,  489,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  530,    0,    0,    0,
    0,  342,    0,    0,    0,    0,    0,    0,    0,    0,
  490,  603,  491,  492,  603,    0,  603,  603,  603,  603,
    0,  603,  493,    0,    0,    0,  494,    0,    0,  603,
  603,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  603,  603,    0,  603,  603,  603,    0,    0,    0,    0,
  603,  603,    0,  603,  603,    0,  603,    0,    0,  603,
  603,  603,  603,  603,  603,  603,    0,    0,    0,    0,
  603,  603,  603,    0,  603,  603,  603,    0,  603, 1274,
    0,  495,    0,    0,    0,    0,    0,  496,  603,  603,
  603,  603,  603,  603,    0,    0,    0,  497,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514,    0,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  136,  137,  138,  139,  140,    0,
   85,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,    0, 1309,    0,
    0, 1273,    0,    0,    0,  483,    0,    0,    0,    0,
    0,    0,  484,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  485,    0,    0,    0,    0,    0,
  486,  487,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  695,    0,  695,  695,  488,  695,
    0,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  695,    0,    0,    0,    0,  695,    0,    0,
    0,    0,    0,    0,    0,    0,  490,  286,  491,  492,
  286,    0,  286,  286,  286,  286,    0,  286,  493,    0,
    0,    0,  494,    0,    0,  286,  286,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  286,  286,    0,  286,
  286,  286,    0,    0,    0,    0,  286,  286,    0,  286,
  286,    0,  286,    0,    0,  286,  286,  286,  286,  286,
  286,  286,    0,    0,    0,    0,  286,  286,  286,    0,
  286,  286,  286,    0,  286, 1274,    0,  495,    0,    0,
    0,    0,    0,  496,  286,  286,  286,  286,  286,  286,
    0,    0,    0,  497,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  498,  499,  500,
  501,  263,  264,  116,    0,  117,  118,  119,  120,    0,
  121,  502,    0,    0,    0,    0,  321,    0,  122,  123,
  503,  504,  505,  506,  507,  508,  509,  510,  511,  124,
  512,    0,  126,  127,  128,  513,  514,    0,  515,  516,
  517,    0,  131,  132,  518,  133,    0,    0,  134,  135,
  136,  137,  138,  139,  140,    0,    0,    0,    0,  141,
  519,  143,    0,  520,  145,  146,    0,  147,    0,  521,
  522,  523,    0,  524,  525,    0,  526,  148,  149,  150,
  151,  152,  153,    0,  695,    0,    0,    0,    0,    0,
    0,  695,    0,    0,    0,    0,    0,    0,  695,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  695,    0,    0,    0,    0,    0,  695,  695,    0,    0,
    0,    0,    0,    0,  695,    0,    0,    0,    0,    0,
    0,    0,  600,    0,  603,  527,    0,  528,    0,    0,
    0,    0,    0,    0,  695,    0,    0,  695,    0,    0,
  530,    0,    0,    0,    0,  342,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  695,    0,  695,  695,    0,    0,    0,    0,
    0,    0,    0,    0,  695,   84,    0,  115,  695,    0,
  116,    0,  117,  118,  119,  120,    0,  121,    0,    0,
    0,    0,    0,    0,    0,  122,  123,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,  125,    0,  126,
  127,  128,    0,    0,    0,    0,  129,  130,    0,  131,
  132,    0,  133,    0,    0,  134,  135,  136,  137,  138,
  139,  140,    0,  695,    0,    0,  141,  142,  143,  695,
  144,  145,  146,    0,  147,    0,    0,  933,    0,  695,
    0,    0,    0,    0,  148,  149,  150,  151,  152,  153,
    0,    0,    0,  695,  695,  695,  695,  695,  695,  695,
    0,  695,  695,  695,  695,    0,  695,  695,  710,    0,
    0,    0,    0,    0,  695,  695,  695,  695,  695,  695,
  695,  695,  695,  695,  695,  695,  695,    0,  695,  695,
    0,  695,  695,    0,  695,  695,  695,    0,  695,  695,
  695,  695,    0,    0,  695,  695,  695,  695,  695,  695,
  695,    0,    0,    0,    0,  695,  695,  695,    0,  695,
  695,  695,    0,  695,    0,  695,  695,  695,    0,  695,
  695,    0,  695,  695,  695,  695,  695,  695,  695,  483,
    0,    0,    0,    0,    0,    0,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,    0,  527,    0,  528,    0,    0,    0,    0,
    0,    0,  488,    0,    0,  489,    0,    0,  530,    0,
    0,    0,    0,  342,    0,    0,    0,    0,  115,    0,
    0,  116,    0,  117,  118,  119,  120,    0,  121,    0,
  490,    0,  491,  492,    0,    0,  122,  123,    0,    0,
    0,    0,  493,    0,    0,    0,  494,  124,  125,    0,
  126,  127,  128,    0,    0,    0,    0,  129,  130,    0,
  131,  132,    0,  133,    0,    0,  134,  135,  136,  137,
  138,  139,  140,    0,    0,    0,    0,  141,  142,  143,
    0,  144,  145,  146,    0,  147,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  148,  149,  150,  151,  152,
  153,  495,    0,    0,    0,    0,    0,  496,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,  710,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514, 1112,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  136,  137,  138,  139,  140,    0,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,  483,    0,    0,
    0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
    0,    0,  486,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  600,    0,
    0,  527,    0,  528,    0,    0,    0,    0,    0,    0,
  488,    0,    0,  489,    0,    0,  530,    0,    0,    0,
    0,  342,    0,    0,    0,    0,  713,    0,    0,  713,
    0,  713,  713,  713,  713,    0,  713,    0,  490,    0,
  491,  492,    0,    0,  713,  713,    0,    0,    0,    0,
  493,    0,    0,    0,  494,  713,  713,    0,  713,  713,
  713,    0,    0,    0,    0,  713,  713,    0,  713,  713,
    0,  713,    0,    0,  713,  713,  713,  713,  713,  713,
  713,    0,    0,    0,    0,  713,  713,  713,    0,  713,
  713,  713,    0,  713,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  713,  713,  713,  713,  713,  713,  495,
    0,    0,    0,    0,    0,  496,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  497,    0,    0,    0,    0,
    0,    0,    0,  810,    0,    0,    0,    0,    0,  498,
  499,  500,  501,  263,  264,  116,    0,  117,  118,  119,
  120,    0,  121,  502,    0,    0,    0,    0,    0,    0,
  122,  123,  503,  504,  505,  506,  507,  508,  509,  510,
  511,  124,  512,    0,  126,  127,  128,  513,  514,    0,
  515,  516,  517,    0,  131,  132,  518,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  519,  143,    0,  520,  145,  146,    0,  147,
    0,  521,  522,  523,    0,  524,  525,    0,  526,  148,
  149,  150,  151,  152,  153,  483,    0,    0,    0,    0,
    0,    0,  484,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  485,    0,    0,    0,    0,    0,
  486,  487,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  600, 1095,    0,  527,
    0,  528,    0,    0,    0,    0,    0,    0,  488,    0,
    0,  489,    0,    0,  530,    0,    0,    0,    0,  342,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  490,    0,  491,  492,
    0,    0,    0,    0,    0,    0,    0,    0,  493,    0,
    0,  115,  494,    0,  116,    0,  117,  118,  119,  120,
    0,  121,    0,    0,    0,    0,    0,    0,    0,  122,
  123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  124,  125,    0,  126,  127,  128,    0,    0,    0,    0,
  129,  130,    0,  131,  132,    0,  133,   14,    0,  134,
  135,  136,  137,  138,  139,  140,    0,  495,    0,    0,
  141,  142,  143,  496,  144,  145,  146,    0,  147,    0,
    0,    0,    0,  497,  678,    0,    0,    0,  148,  149,
  150,  151,  152,  153,    0,    0,    0,  498,  499,  500,
  501,  263,  264,  116,    0,  117,  118,  119,  120,    0,
  121,  502,    0,    0,    0,    0,    0,    0,  122,  123,
  503,  504,  505,  506,  507,  508,  509,  510,  511,  124,
  512,    0,  126,  127,  128,  513,  514,    0,  515,  516,
  517,    0,  131,  132,  518,  133,    0,    0,  134,  135,
  136,  137,  138,  139,  140,    0,    0,    0,    0,  141,
  519,  143,    0,  520,  145,  146,    0,  147,    0,  521,
  522,  523,    0,  524,  525,    0,  526,  148,  149,  150,
  151,  152,  153,  483,    0,    0,    0,    0,    0,    0,
  484,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  485,    0,    0,    0,    0,    0,  486,  487,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  600,    0,    0,  527,    0,  528,
    0,    0,    0,    0,    0,    0,  488,    0,    0,  489,
    0,    0,  530,    0,    0,    0,    0,  342,    0,    0,
    0,    0,  115,    0,    0,  116,    0,  117,  118,  119,
  120,    0,  121,    0,  490,    0,  491,  492,    0,    0,
  122,  123,    0,    0,    0,    0,  493,    0,    0,    0,
  494,  124,  125,    0,  126,  127,  128,    0,    0,    0,
    0,  129,  130,    0,  131,  132,    0,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  142,  143,    0,  144,  145,  146,    0,  147,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  148,
  149,  150,  151,  152,  153,  495,    0,    0,    0,    0,
    0,  496,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  497,  684,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  498,  499,  500,  501,  263,
  264,  116,    0,  117,  118,  119,  120,    0,  121,  502,
    0,    0,    0,    0,    0,    0,  122,  123,  503,  504,
  505,  506,  507,  508,  509,  510,  511,  124,  512,    0,
  126,  127,  128,  513,  514,    0,  515,  516,  517,    0,
  131,  132,  518,  133,    0,    0,  134,  135,  136,  137,
  138,  139,  140,    0,    0,    0,    0,  141,  519,  143,
    0,  520,  145,  146,    0,  147,    0,  521,  522,  523,
    0,  524,  525,    0,  526,  148,  149,  150,  151,  152,
  153,  483,    0,    0,    0,    0,    0,    0,  484,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  485,    0,    0,    0,    0,    0,  486,  487,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,    0,    0,  527,    0,  528,    0,    0,
    0,    0,    0,    0,  488,    0,    0,  489,    0,    0,
  530,    0,    0,    0,    0,  342,    0,    0,    0,    0,
  115,    0,    0,  116,    0,  117,  118,  119,  120,    0,
  121,    0,  490,    0,  491,  492,    0,    0,  122,  123,
    0,    0,    0,    0,  493,    0,    0,    0,  494,  124,
  125,    0,  126,  127,  128,    0,    0,    0,    0,  129,
  130,    0,  131,  132,    0,  133,    0,    0,  134,  135,
  136,  137,  138,  139,  140,    0,    0,    0,    0,  141,
  142,  143,    0,  144,  145,  146,    0,  147,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  148,  149,  150,
  151,  152,  153,  495,    0,    0,    0,    0,    0,  496,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  497,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1301,    0,    0,  498,  499,  500,  501,  263,  264,  116,
    0,  117,  118,  119,  120,    0,  121,  502,    0,    0,
    0,    0,    0,    0,  122,  123,  503,  504,  505,  506,
  507,  508,  509,  510,  511,  124,  512,    0,  126,  127,
  128,  513,  514,    0,  515,  516,  517,    0,  131,  132,
  518,  133,    0,    0,  134,  135,  136,  137,  138,  139,
  140,    0,    0,    0,    0,  141,  519,  143,    0,  520,
  145,  146, 1040,  147,    0,  521,  522,  523,    0,  524,
  525,    0,  526,  148,  149,  150,  151,  152,  153,  483,
    0,    0,    0,    0,    0, 1041,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,    0,  527,    0,  528,    0,    0,    0, 1354,
    0,    0,  488,    0,    0,  489,    0,    0,  530,    0,
    0, 1042,    0,  342,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,    0,  491,  492,    0,    0,    0,    0,    0,    0,
    0,    0,  493,    0,    0,  115,  494,    0,  116,    0,
  117,  118,  119,  120,    0,  121,    0,    0,    0,    0,
    0,    0,    0,  122,  123,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  125,    0,  126,  127,  128,
    0,    0,    0,    0,  129,  130,    0,  131,  132,    0,
  133,    0,    0,  134,  135,  136,  137,  138,  139,  140,
    0,  495,    0,    0,  141,  142,  143,  496,  144,  145,
  146,    0,  147,    0,    0,    0,    0,  497,    0,    0,
    0,    0,  148,  149,  150,  151,  152,  153,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512, 1112,  126,  127,  128,  513,
  514,    0,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  136,  137,  138,  139,  140,    0,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,  483,    0,    0,
    0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
    0,    0,  486,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  697,    0,  697,  697,
  488,  697,    0,  489,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,    0,    0,    0,    0,  697,
    0,    0,    0,    0,    0,    0,    0,    0,  490,    0,
  491,  492,    0,    0,    0,    0,    0,    0,    0,    0,
  493,    0,    0,    0,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  495,
    0,    0,    0,    0,    0,  496,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  497,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1507,    0,    0,  498,
  499,  500,  501,  263,  264,  116,    0,  117,  118,  119,
  120,    0,  121,  502,    0,    0, 1111,    0,    0,    0,
  122,  123,  503,  504,  505,  506,  507,  508,  509,  510,
  511,  124,  512,    0,  126,  127,  128,  513,  514,    0,
  515,  516,  517,    0,  131,  132,  518,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  519,  143,    0,  520,  145,  146,    0,  147,
    0,  521,  522,  523,    0,  524,  525,    0,  526,  148,
  149,  150,  151,  152,  153,    0,  697,    0,    0,    0,
    0,    0,    0,  697,    0,    0,    0,    0,    0,    0,
  697,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  697,    0,    0,    0,    0,    0,  697,  697,
    0,    0,    0,    0,    0,    0,  697,    0,    0,    0,
    0,    0,    0,    0, 1051,    0, 1051, 1051,    0, 1051,
    0,    0,    0,    0,    0,    0,  697,    0,    0,  697,
    0,    0, 1051,    0,    0,    0,    0, 1051,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,  115,  697,  697,  116,    0,
  117,  118,  119,  120,    0,  121,  697,    0,    0,    0,
  697,    0,    0,  122,  123,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  125,    0,  126,  127,  128,
    0,    0,    0,    0,  129,  130,    0,  131,  132,    0,
  133,    0,    0,  134,  135,  136,  137,  138,  139,  140,
    0,    0,    0,    0,  141,  142,  143,    0,  144,  145,
  146,    0,  147,    0,    0,  697,    0,    0,    0,    0,
    0,  697,  148,  149,  150,  151,  152,  153,    0,    0,
    0,  697,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  697,  697,  697,  697,  697,
  697,  697,    0,  697,  697,  697,  697,    0,  697,  697,
    0,    0,    0,    0,    0,    0,  697,  697,  697,  697,
  697,  697,  697,  697,  697,  697,  697,  697,  697,    0,
  697,    0,    0,  697,  697,    0,  697,  697,  697,    0,
  697,  697,  697,  697,    0,    0,  697,  697,  697,  697,
  697,  697,  697,    0,    0,    0,    0,  697,  697,  697,
    0,  697,  697,  697,    0,  697,    0,  697,  697,  697,
    0,  697,  697,    0,  697,  697,  697,  697,  697,  697,
  697, 1051,    0,    0,    0,    0,    0,    0, 1051,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1051,    0,    0,    0,    0,    0, 1051, 1051,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  529,    0,    0,  527,    0,  528,    0,    0,
    0,    0,    0,    0, 1051,    0,    0, 1051,    0,    0,
  530,    0,    0,    0,    0,  342,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1051,    0, 1051, 1051,    0,    0,    0,    0,
    0,    0,    0,    0, 1051,    0,    0,    0, 1051,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1051,    0,    0,    0,    0,    0, 1051,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1051,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
    0, 1051, 1051, 1051, 1051,    0, 1051, 1051,    0,    0,
    0,    0,    0,    0, 1051, 1051, 1051, 1051, 1051, 1051,
 1051, 1051, 1051, 1051, 1051, 1051, 1051,    0, 1051, 1051,
 1051, 1051, 1051,    0, 1051, 1051, 1051,    0, 1051, 1051,
 1051, 1051,    0,    0, 1051, 1051, 1051, 1051, 1051, 1051,
 1051,    0,    0,    0,    0, 1051, 1051, 1051,    0, 1051,
 1051, 1051,    0, 1051,    0, 1051, 1051, 1051,    0, 1051,
 1051,    0, 1051, 1051, 1051, 1051, 1051, 1051, 1051,  483,
    0,    0,    0,    0,    0,    0,  484,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  485,    0,
    0,    0,    0,    0,  486,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,    0,  527,    0,  528,    0,    0,    0,    0,
    0,    0,  488,    0,    0,  489,    0,    0,  530,    0,
    0,    0,    0,  342,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,    0,  491,  492,    0,    0,    0,    0,    0,    0,
    0,    0,  493,    0,    0,    0,  494,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  495,    0,    0,    0,    0,    0,  496,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,  499,  500,  501,  263,  264,  116,    0,  117,
  118,  119,  120,    0,  121,  502,    0,    0,    0,    0,
    0,    0,  122,  123,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  124,  512,    0,  126,  127,  128,  513,
  514,    0,  515,  516,  517,    0,  131,  132,  518,  133,
    0,    0,  134,  135,  136,  137,  138,  139,  140,    0,
    0,    0,    0,  141,  519,  143,    0,  520,  145,  146,
    0,  147,    0,  521,  522,  523,    0,  524,  525,    0,
  526,  148,  149,  150,  151,  152,  153,  483,    0,    0,
    0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,    0,    0,    0,
    0,    0,  486,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1051,    0,
    0, 1051,    0, 1051,    0,    0,    0,    0,    0,    0,
  488,    0,    0,  489,    0,    0, 1051,    0,    0,    0,
    0, 1051,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  490,    0,
  491,  492,    0,    0,    0,    0,    0,    0,    0,    0,
  493,    0,    0,    0,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  495,
    0,    0,    0,    0,    0,  496,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  497,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
  499,  500,  501,  263,  264,  116,    0,  117,  118,  119,
  120,    0,  121,  502,    0,    0,    0,    0,    0,    0,
  122,  123,  503,  504,  505,  506,  507,  508,  509,  510,
  511,  124,  512,    0,  126,  127,  128,  513,  514,    0,
  515,  516,  517,    0,  131,  132,  518,  133,    0,    0,
  134,  135,  136,  137,  138,  139,  140,    0,    0,    0,
    0,  141,  519,  143,    0,  520,  145,  146,    0,  147,
    0,  521,  522,  523,    0,  524,  525,    0,  526,  148,
  149,  150,  151,  152,  153, 1051,    0,    0,    0,    0,
    0,    0, 1051,    0,    0,  570,    0,    0,    0,    0,
    0,    0,    0,    0, 1051,    0,    0,    0,    0,    0,
 1051, 1051,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  571,    0,    0,    0,  570,  570,    0, 1051,  570,
    0, 1051,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  570,    0,  570,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1051,    0, 1051, 1051,
    0,  571,  571,    0,  565,  571,    0,    0, 1051,    0,
    0,    0, 1051,    0,    0,    0,  570,    0,    0,    0,
  571,    0,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  565,    0,    0,  565,    0,
    0,    0,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  565,    0,  565,    0, 1051,    0,    0,
    0,    0,    0, 1051,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1051,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  565,    0, 1051, 1051, 1051,
 1051, 1051, 1051, 1051,    0, 1051, 1051, 1051, 1051,    0,
 1051, 1051,    0,    0,    0,    0,    0,    0, 1051, 1051,
 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
 1051,    0, 1051, 1051, 1051, 1051, 1051,    0, 1051, 1051,
 1051,    0, 1051, 1051, 1051, 1051,    0,    0, 1051, 1051,
 1051, 1051, 1051, 1051, 1051,    0,    0,    0,    0, 1051,
 1051, 1051,    0, 1051, 1051, 1051,  587, 1051,    0, 1051,
 1051, 1051,    0, 1051, 1051,    0, 1051, 1051, 1051, 1051,
 1051, 1051, 1051,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  570,    0,
  570,  570,  570,    0,    0,    0,  570,  587,    0,  570,
  587,    0,    0,    0,    0,  577,    0,    0,    0,  571,
    0,    0,  570,    0,    0,  587,    0,  587,  570,    0,
    0,  570,    0,    0,  571,    0,  571,  571,  571,    0,
    0,    0,  571,  562,    0,  571,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  577,  587,  571,  577,
    0,    0,  565,    0,  571,    0,    0,  571,    0,    0,
    0,    0,    0,  570,  577,    0,  577,  565,    0,  565,
  565,  565,    0,    0,  562,  565,    0,  562,  565,    0,
    0,    0,    0,    0,    0,    0,    0,  570,  389,    0,
    0,  565,  562,    0,  562,    0,  577,  565,    0,  571,
  565,    0,    0,    0,  390,    0,    0,    0,  570,    0,
    0,    0,    0,    0,  570,  391,    0,    0,  570,    0,
    0,    0,  392,  571,  562,  570,  393,  394,    0,    0,
    0,    0,    0,    0,    0,  395,    0,    0,    0,    0,
    0,    0,  565,  570,  571,    0,  396,    0,  570,    0,
  571,    0,    0,    0,  571,    0,    0,    0,    0,    0,
    0,  571,    0,    0,    0,    0,  565,    0,    0,    0,
    0,    0,    0,  570,    0,    0,    0,  570,    0,  571,
    0,    0,    0,    0,  571,    0,    0,  565,    0,    0,
    0,    0,    0,  565,    0,    0,    0,  565,    0,    0,
  397,    0,    0,    0,  565,    0,    0,    0,  398,  571,
    0,    0,    0,  571,  587,    0,    0,    0,    0,    0,
    0,    0,  565,    0,    0,    0,    0,  565,    0,  587,
    0,    0,  587,  587,    0,    0,    0,  587,    0,  399,
  587,    0,    0,  400,    0,    0,    0,    0,    0,    0,
    0,    0,  565,  587,  401,    0,  565,    0,    0,  587,
    0,    0,  587,  577,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  402,  403,    0,    0,    0,  577,    0,
    0,  577,  577,    0,    0,    0,  577,    0,  108,  577,
    0,  562,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  577,    0,  587,    0,  562,    0,  577,  562,
  562,  577,    0,    0,  562,    0,    0,  562,    0,    0,
    0,    0,    0,    0,    0,    0,  109,    0,  587,  404,
  562,    0,  405,    0,    0,    0,  562,    0,  110,  562,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  587,
    0,    0,    0,  577,    0,  587,    0,    0,    0,  587,
    0,    0,  111,    0,    0,    0,  587,    0,    0,    0,
    0,    0,   49,    0,    0,    0,    0,  577,    0,    0,
    0,  562,    0,    0,  587,    0,    0,    0,    0,  587,
    0,    0,    0,    0,    0,    0,    0,    0,  577,    0,
    0,    0,    0,    0,  577,  562,    0,    0,  577,    0,
   49,    0,    0,    0,  587,  577,    0,    0,  587,    0,
    0,    0,   49,    0,    0,    0,  562,  112,    0,    0,
    0,    0,  562,  577,    0,    0,  562,  113,  577,    0,
    0,    0,    0,  562,    0,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  562,  114,  577,    0,    0,  562,  577,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  115,    0,    0,  116,    0,  117,  118,  119,  120,    0,
  121,  562,    0,    0,    0,  562,    0,    0,  122,  123,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
  125,   49,  126,  127,  128,    0,    0,    0,    0,  129,
  130,   49,  131,  132,    0,  133,    0,    0,  134,  135,
  136,  137,  138,  139,  140,    0,    0,    0,    0,  141,
  142,  143,    0,  144,  145,  146,   49,  147,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  148,  149,  150,
  151,  152,  153,    0,   51,    0,    0,   51,    0,   51,
   51,   51,   51,    0,   51,    0,    0,    0,    0,    0,
    0,    0,   51,   51,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   51,   51,    0,   51,   51,   51,    0,
    0,    0,    0,   51,   51,    0,   51,   51,    0,   51,
    0,    0,   51,   51,   51,   51,   51,   51,   51,  329,
    0,    0,    0,   51,   51,   51,    0,   51,   51,   51,
    0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   51,   51,   51,   51,   51,   51,  329,    0,    0,
    0,    0,    0,    0,  329,    0,    0,    0,  329,  329,
    0,  329,    0,    0,  329,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  329,    0,    0,
    0,    0,    0,  329,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1366,    0,
  329,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  329,    0,
    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,
    0,    0,    0,  329,    0,    0,    0, 1562, 1563,    0,
 1564,    0,    0,  329,    0,    0,    0,    0,    0,    0,
    0,    0,  329,    0,  329,    0, 1565,    0,    0,    0,
    0,  329, 1566,    0,  329,    0,  329,  329,  329,  329,
    0,  329,    0,    0,    0,    0,    0,    0,    0,  329,
  329,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  329,  329,    0,  329,  329,  329,    0,    0,    0,    0,
  329,  329,    0,  329,  329,    0,  329,    0,    0,  329,
  329,  329,  329,  329,  329,  329,  329,  329,  329, 1567,
  329,  329,  329,    0,  329,  329,  329,    0,  329,    0,
    0,    0,    0, 1366,    0,    0,    0,   14,  329,  329,
  329,  329,  329,  329,    0,    0,    0,    0,    0,    0,
    0,    0, 1568,    0,    0,    0,    0,    0,    0,    0,
    0,    6,   16,    0,    0,    0,    0,    0,    0,    0,
    0, 1765, 1562, 1563,    0, 1564,    0,    0,    0,    0,
  501,    0,    0,  116,    0,  117,  118,  119,  120,    0,
  121, 1565,    0,    0,    0,    0,    0, 1566,  122,  123,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1569,
  125,    0,  126,  127,  128,    0,    0,    0,    0,  129,
  130,    0,  131,  132,    0,  133,    0,    0,  134, 1570,
  136,  137,  138,  139,  140, 1571, 1572, 1573,    0,  141,
  142,  143,    0,  144,  145,  146,    0,  147,    0,    0,
    0,    0,    0,    0, 1567,    0,    0,  148,  149,  150,
  151,  152,  153,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1568,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   16,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  501,    0,    0,  116,    0,
  117,  118,  119,  120,    0,  121,    0,    0,    0,    0,
    0,    0,    0,  122,  123,    0,  220,    0,    0,  220,
    0,    0,    0,    0, 1569,  125,    0,  126,  127,  128,
    0,    0,  220,    0,  129,  130,  220,  131,  132,  220,
  133,    0,    0,  134, 1570,  136,  137,  138,  139,  140,
 1571, 1572, 1573,    0,  141,  142,  143,    0,  144,  145,
  146,  710,  147,    0,  711,    0,    0,    0,    0,    0,
  933,    0,  148,  149,  150,  151,  152,  153,    0,  220,
    0,  712,    0,    0,  713,  220,  220,  220,    0,  220,
  220,  220,    0,  220,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  220,    0,  220,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  714,    0,    0,    0,    0,    0,
  715,  716,  717,    0,  718,  719,  720,    0,  721,    0,
    0,    0,  220,    0,    0,    0,    0,   81,    0,    0,
    0,    0,    0,    0,    0,    0,  722,    0,  723,  220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  220,    0,    0,    0,    0,    0,  724,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  725,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  220,  220,    0,    0,
    0,    0,    0,    0,    0,    0,  726,    0,    0,    0,
    0,    0,    0,  220,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,  116,    0,  117,  118,  119,  120,
    0,  121,    0,    0,    0,    0,    0,    0,    0,  122,
  123,  727,  728,    0,    0,  710,    0,    0,  711,    0,
  124,  125,    0,  126,  127,  128,    0,    0,  729,    0,
  129,  130,    0,  131,  132,  712,  133,    0,  713,  134,
  135,  136,  137,  138,  139,  140,    0,    0,    0,    0,
  141,  142,  143,    0,  144,  145,  146,    0,  147,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  148,  149,
  150,  151,  152,  153,    0,    0,    0,    0,  714,    0,
    0,    0,    0,    0,  715,  716,  717,    0,  718,  719,
  720,    0,  721,    0,    0,    0,  149,    0,    0,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  722,    0,  723,    0,    0,    0,  149,    0,    0,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  724,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  725,  149,
    0,    0,    0,    0,    0,  149,  149,  149,    0,  149,
  149,  149,    0,  149,    0,    0,    0,    0,    0,    0,
  726,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  149,    0,  149,    0,  115,    0,    0,  116,    0,
  117,  118,  119,  120,    0,  121,    0,    0,    0,    0,
    0,    0,    0,  122,  123,  727,  728,    0,    0,    0,
    0,    0,  149,    0,  124,  125,    0,  126,  127,  128,
    0,    0,  729,    0,  129,  130,    0,  131,  132,  149,
  133,    0,    0,  134,  135,  136,  137,  138,  139,  140,
    0,    0,    0,    0,  141,  142,  143,    0,  144,  145,
  146,  149,  147, 1012,    0,    0,  711,    0,    0,    0,
    0,    0,  148,  149,  150,  151,  152,  153,  220, 1013,
 1369,  220,    0,  712,    0,    0,  713,    0,    0,    0,
    0,    0,    0,    0,  220,    0,  149,  149,  220,    0,
    0,  220,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  714,    0,    0,    0,
    0,    0,  715,  716,  717,    0,  718,  719,  720,    0,
  721,  220,    0,    0,    0,    0,    0,  220,  220,  220,
 1370,  220,  220,  220,    0,  220,    0,    0,  722,    0,
  723,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  220,    0,  220,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1371,    0,    0,    0,  724,
 1372,    0,    0,    0,    0,    0, 1373,    0,    0,    0,
    0,    0,    0,    0,  220,    0,  725,  115,    0,    0,
  116,    0,  117,  118,  119, 1374,    0,  121,    0,    0,
    0,  220,    0,    0,    0,  122,  123,    0,  726,    0,
    0,    0,    0,    0,    0,    0,  124,  125,    0,  126,
  127,  128,    0,  220,    0,    0,  129,  130,    0,  131,
  132,    0,  133,    0,    0,  134,  135,  136,  137,  138,
  139,  140,    0,  727,  728,    0,  141,  142,  143,    0,
  144,  145,  146,    0,  147,    0,    0,    0,  220,  220,
  729,    0,    0,    0,  148,  149,  150,  151,  152,  153,
    0,    0,    0,  115,    0,  220,  116,  200,  117,  118,
  119,  120,  201,  121,  202,  203,  204,  205,  206,  207,
  208,  122,  123,  209,  210,  211,  212,  213,    0,    0,
  214,  215,  124,  125,  216,  126,  127,  128,  217,  218,
  219,  220,  129,  130,  221,  131,  132,  222,  133,  223,
  224,  134,  135,  136,  137,  138,  139,  140,  225,  226,
  227,  228,  141,  142,  143,  229,  144,  145,  146,  230,
  147,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  148,  149,  150,  151,  152,  153,  482,    0,    0,  482,
  482,  482,  482,  482,  482,    0,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
  482,    0,    0,  482,  482,  482,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
  482,  482,  482,  482,  482,  482,  482,  482,  482,
};
static int yycheck[] = {                                       9,
    0,    4,  181,   71,   61,  114,   16,   70,   18,   80,
  424,  171,  172,   77,  171,  172,  102,  529,   70,   75,
   16,   62,   69,  644,  461,   93,   63,  461,  840,  840,
  327,  457,  103,   74,  647,  570,  921,  101,  921,   76,
   97,   65,  608,   99,  428, 1105,   99,  921,   58,   59,
  921,   61,   62,   63,   64,   65,  667,   98,  921,  679,
   70,   71,   72,  771,   74,  106,   76,   77,  776,   79,
   80,   81,   96,  921,  898,  793, 1045,  438,  589,   89,
  104,   91,   92,   93,  453,   95,   96,   97,   98, 1365,
  100,  101,  102,  103,  104,   91,  106,  590, 1366,  904,
  426,  187,  810,  850,  100, 1137,  467,  764,  816,  377,
  828,  163, 1119,  165,  843,  183,  408,  757,  437,   45,
  731,  191,  186,    0, 1093,  930, 1250,  164,   44,    0,
  696, 1432,    0,   45,  939,  670,   41,   41,   45,  674,
   44, 1228,    0,  184,  679,    0,    0,   40,  185,   40,
 1384,   45,  176,  163,  164,  165,    0,    0,   44,  169,
    0,   44,   40,    0,  529,    0,  176,  896,  278,   41,
   44,  181,   63,  183,  184,  185,  186,  187,  287,    0,
    0,  191,   59,   41,  908,   44,   44,    0,   59,    0,
   44,   59,    0,    0,  999,  273,  243,   41,  377,   44,
   44,   59,   44,  268,   59,   59,   41, 1396,  629, 1207,
   44, 1006,   42,    0,   63,   59,   59,    0, 1233,   59,
 1472,    0,   59,    0,   59,   44,  262,  274,   41,  655,
   61,   44,    0, 1430,   41,  600,  317,   44,   59,   59,
    0,   91,  679,    0,    0,  679,   59,  264,   59,  663,
   41,   59,   59,  315,    0,    0,  322,  280,   41,   44,
   42,   44,  283,  903,   40,   47,  318, 1193,  682,  321,
  380,  632,   59,   41,  324,   40,   59,  386,  298,  395,
   59,  707,   59,   45,  581,  268,  273,  262,   44, 1413,
 1639,   59,    0, 1105, 1105, 1571, 1572,  354,   63,   59,
  597,   63,   59,   59,  397,    0,  351,    0,  318,  276,
   41,  321,    0,   59,   59, 1583,  927,  327,  328, 1245,
  832,  358,    0,    0,  935,  377,  300,  839,  484,    0,
 1038, 1039,  379,   41,  262,  259,   41,  284,   41,   44,
  457,   44,  459,  379,  354,  269,   41,  428,  358,  297,
  297,   59,  963,   41,  344,  448,  422,  513, 1163,  447,
  298,  348,   61,  429,   59, 1397,   59,   44, 1076,  273,
 1165,   59,  264, 1460,  348,  427,  359,  442,    0,    0,
  458,   59,   59,  445,  500,  437,  403,  439,   59,  441,
  262,  427,  444,   41, 1646,  463,  344,  407,  408,    0,
  315,  465,  306,  258,  379,  372,  456,  454,  431,  456,
  589,  776, 1427,  334,  434,  270,  982,  427,  475,   41,
   41, 1428,  957,  464,  471,  275,  297,  437,    0,  439,
  260,  441,  453,  454,  444, 1784,  473,   59,   59,  484,
 1629, 1410,  297, 1161,  348, 1169, 1444,    0,  303,    0,
  305,  379,  427,  463,  464,  465,  877,  315,   59,  301,
 1467, 1658,    0,  473,    0,  475,  297,  325,  478,  327,
  300,  315, 1180,  344,   41,  478, 1474,    0,  336,  264,
  315,  339,  301,  317,   41, 1411, 1762,   59,   41,  344,
   41,  336,  336, 1124,   44,  277,  434,  942,  277,  403,
  282,  336,  376,  380,  264, 1806,   59,  379,   59,  387,
  297,  403,  389,  434, 1007,  306,  506,  338,  338,  317,
  530,   59,  380,   59,  450, 1018,  380, 1020,  365,  599,
  445,  389,  315,  410,  450,  389,   59,  589,  450,  580,
  380,  698,  579,  450, 1778,  428,  439,  315, 1360, 1360,
  371,  588, 1583,  336,  458,  592,  450,  344,  506,  450,
  446,  338,  859,  376, 1688,  477,  622,  444,  336,  579,
  580,  581,  380, 1825,  432,  306,  397,  397,  588,  400,
  400,  389,  592,  477, 1195,  444,  444,  597,  446,  599,
  444,  402,  644,  640,  371,  416,  416,  634,  297, 1900,
 1257,  450,  446,  446, 1244,  510,  257,  315, 1640,  928,
  657,  446,  380, 1700,  262, 1362,  272,  909, 1129, 1131,
  397,  442,  442,  400,  634,  672, 1010,  679,  336,  897,
  956, 1252, 1361,  510,  644,  506,  997,  747, 1645,  416,
 1941,  336,  510,  699, 1137,  402,  699,  423,  336, 1647,
  494,  506,  510, 1651,  701,  401,  510, 1655, 1656, 1927,
 1465,  840, 1963,  446,  432,  442,  510,  338,  678,  679,
  510, 1466,  380, 1166,  684,  510,  497,  497,  446,  330,
  493,  389,    0,  361, 1952,  450,  493,  847,  450,    0,
  446, 1689,  264, 1691,  315,  262,  517,  517,  403,  746,
  371,  446,  510, 1763,  756,  262,  753,  754,  401,  530,
  530, 1979,  262,  257,  336,  336, 1992,   44,  897,  506,
  497,  275, 1990,  880,  432, 1993,  397,  510,  264,  400,
   41,  379, 2000,    0,    0,  428,  395, 1706,  446,  277,
  517,   59,  510,  344, 1670,  416,  756,  380,   59,  310,
  806,  446,  258,  530,  344,  298, 1201, 1202,  446, 1390,
 1391, 1687,  315, 1385,  315, 1277,   93, 1652, 1653, 1652,
 1653,  442, 1652, 1653,  798, 1493,    0,  272, 1652, 1653,
    0, 1652, 1653,  336,  397,  336,  330,  341,  798, 1652,
 1653,  334,   59,   59, 1792, 1793,  848,  303,  850,  432,
  852,  498,  510,  416, 1652, 1653, 1175, 1252,  965, 1648,
    0, 1818,  379,  265, 1425, 1426,    0, 1824,  390, 1643,
 1433,  344,  379,  833,  446,  446,  497,  868, 1450,  379,
  867, 1442, 1344,  843, 1334,   59,  376, 1337,  848,   59,
  850,  336,  852,  318,    0,  897,  517,  299,  409,  859,
  902, 1690,  511,  890,  390,  892,  331,  867,  868,  530,
 1920,  908, 1922,  453,  454,  875,  876,   59,  915,   59,
 1930, 1255, 1932,    0,  263,   59,  928, 1246,  925,  354,
  890,  333,  892, 1395,    0,   41,  896, 1453,  303,  510,
 1456,  434,  902,  446,    0,  446, 1927,  953,    0,  909,
  953,    0,  954,   59,  410,  957,  962, 1527, 1906, 1907,
 1908, 1933, 1277,  413,   41,  415, 1976,   44,  928,  315,
  309, 1952,  428,  979,  971,   41, 1105,    0,   44,  303,
  405,  320,   59,    0, 1642, 1319,  992,  993,  994,  992,
  993,  994,   41,   59,  954,   44,    0,  957, 1979,  280,
 1129, 1763, 1763,   59,  305,  305,  462,   59, 1980, 1990,
   59,  998, 1993,  973,  315,  315,   93,  319,    0, 2000,
  973, 1008,   41,   42,   43,    0,   45,   93,   47, 1864,
 1865, 1864, 1865,  309, 1864, 1865,   59,   41,  998,  352,
 1864, 1865,   59, 1864, 1865,  410,    0,  264, 1008,  276,
  297, 1864, 1865,  371,  315,   59, 1016, 1017,    0,   41,
  276,  277,    0, 1016,  397,  401, 1864, 1865,  318,  396,
  338, 1556,    0,   42,   43,  336,   45,   59,   47,  261,
  419,  331,    0,    0,   59,  412,  410,    0,    0,  316,
  264, 1541,  410,    0, 1470, 1545,  377,  462, 1756,   41,
  339,  348,  303,  371,  354,   59, 1080,  450,  421,   42,
   43,  319,   45,   41,   47,  448,   44,   59,  368,  395,
 1080,   59, 1369,  362, 1231, 1372,  376, 1129,  246,  397,
  264,   59,  400, 1694,   41,  313,  314,   44,  462,  457,
 1527,   59,   59, 1527,  445,  445,   59,   59,  416,   44,
  431,    0,   59,  450,  430,  405,  372,  319, 1920, 1920,
 1922, 1922,  348, 1123, 1124,  260,  393,  448, 1930, 1930,
 1932, 1932, 1169,  390,  442, 1490, 1491, 1137,  276,  418,
  298,  453,  454, 1498, 1499,  446, 1501, 1502,  306,  390,
  304,  305,   41,    0, 1509, 1510, 1511, 1512,   93, 1514,
 1515, 1516, 1517, 1518, 1519,  300,  433,  259,  264,  410,
   59,  298,  264,  262, 1976, 1976,  390,  269,  316,  265,
  376,  271,   44,  304,  305, 1883,   40,  428,  401,  497,
  336, 1360, 1890, 1239,   41,  285, 1239, 1366,    0,    0,
    0,  264,   41,  493,    0,   44, 1248,  334, 1254,  517,
 1252, 1254,   59,  299, 1260,  428,  390, 1260,  277,  336,
 1220,  462,  530,  282,  514,    0,  315,  453,  454,  318,
  336,   93, 1225, 1383, 1384, 1385,  325, 1237,  327,  329,
   41,   41,  331,   44,   44,   41,  394,  336, 1248,  264,
  339,    0, 1252, 1743,  300,  393, 1660,   59,   59,   59,
    0,   42,   43,   59,   45,  354,   47,  357,  277,    0,
  264,  315, 1419,  282, 1421,   42,   43, 1779,   45,  368,
   47,  325,    0,  327,   59,  402,  264,  376,   40,  443,
  379,  380,  336,  315,  390,  433,  402, 1373,  390,  376,
  389,  352,  348,  325,  277,  327,  258,  304,  305,  282,
   59,   44, 1365, 1374,  336, 1315,  405, 1371,  270,   59,
 1362, 1468,  443, 1365, 1366, 1936,  372,  390,   59, 1315,
 1400,  421, 1402,  315,    0,  386,  380,  388,  427, 1370,
  297,   59,    0,  432,    0,  389,   41,   42,   43,    0,
   45,  303,   47,  305,  336,  444,  276,  446,  380,  410,
   93, 1361, 1362,  336,   44, 1365, 1366,  389,  315, 1369,
 1370, 1371, 1372, 1373, 1374,  390,    0,  276,  325, 1947,
  327, 1949,  298,   41,  435,  284,   44,  344,  432,  336,
 1390, 1391,  339,   59,  260,  352,  390, 1397,  380,  317,
  444,   59,  446,   59,  493,  333,    0,  389,   59,  378,
  432,    0,  390,    0, 1583,    0,    0,   41,  334,  428,
   44,  510,    0,  341,  446,  514,  315,  345,    0,  386,
  378,  388,  350,  380,  300,   59,  325,  273,  327,  258,
   42,   43,  389,   45, 1481,   47,  443,  336,    0, 1486,
  432,  270,  372,  410,   41, 1448,  410,   44,  434,  309,
  446,  262,  277, 1632,  446,   59,  510,  282,  315,  510,
   59,  452,   59,  393,   59,   59,  333,    0,  435,  399,
  327,   59,   40,  399,  303,  432,  305,   59,  510,  336,
  517,  380,    0,  409,  412,  416,  277,  444,  416,  446,
  389,  282,    0,  453, 1562,    0,    0,   59,  264,  258,
  277,  368,  333,  433,  315,  282,  313,  318,  434,  315,
 1520,  270,    0,  380,  325,  333,  327,    0,  510,  258,
  331,  327,  261,  380, 1520,  336,   59,    0,  339,  315,
  336, 1583,  389,  432,  332,  395,  409,  368,  297,  506,
  317,   59,  260,  354,  303,  336,  305,  446,  260,  380,
  260,   59, 1562,  510,   59,   59,  260,  368,  384,  385,
 1570, 1571, 1572,  436,  303,  376,  426,  444,  379,  380,
  430,   59,  277, 1583,  380,  432,   59,  282,  389,  403,
  450,  441,  300,  389, 1763,  344,   59,  515,  300,  446,
  300,  426,  258,  352,  405,   40,  300,  317,  450,  527,
  528,  529, 1781,  485,  270, 1615, 1616,  477,   46,  409,
  336,  510,  317,  495,   42,   43,  427,   45, 1778,   47,
   58,  432, 1632,   61, 1661,  477,  432,  395,  259, 1639,
 1640,  297,  315,  444,  315,  446,  436,  303,  269,  305,
  446,  485,  486,   42,   43,  376,   45,  315,   47,   41,
  318, 1661,   44,  510,  376,   41,  498,  325,   44,  327,
  356,   41,  421,  331,   44,  277,    0,  428,  336,  426,
  282,  339,  600,  534,   41,  533, 1733,   44,  344,  276,
  277,  315,  493,  453,  454,   41,  354,  284,   44,   42,
   43,    0,   45,  327,   47,  260, 1615, 1616,  531,  510,
  368, 1810,  336,  514,  510,  317,   41,   41,  376,   44,
   44,  379,  380,   41,   42,   43,  410,   45,  377,   47,
 1730,  389,  315, 1733,  337,   59,  375,   46,  449,  450,
  451,  409,   41,  298, 1730,   44,  319,  405,  505,   58,
   59, 1920,   61, 1922,  497,  310,  380,  506, 1927,  505,
   59, 1930, 1762, 1932, 1811,  389,  477,  478, 1028,  427,
 1030,  506, 1032, 1033,  432, 1035, 1036, 1037, 1805,  334,
 1770, 1781,  297, 1952, 1784,  372,  444,  318,  446,  376,
  306,  461,   42,   43, 1831,   45,   41,   47, 1835,   44,
  331, 1801, 1901, 1615, 1616, 1805,  393, 1976,  432,   44,
 1979, 1811,  399,   42,   43,  446,   45, 1875,   47,   61,
  366, 1990,  446,  354, 1993,  283,   41,   41,    0,   44,
   44, 2000,  264,   41,   40,  493,   44,  368,  389,   41,
   42,   43,   40,   45,  399,   47,  433,   41,   42,   43,
  506,   45,  510,   47,  409,   40,  514, 1857,  776,  277,
  453,   41,   42,   43,  282,   45,   40,   47,   41,   41,
   41,   44,   44,   44,  405, 1875, 1876,  795,   40,  434,
   41,  799,   40,   44, 1877, 1927,  510,   59,  277,   41,
  308,  809,   44,  282, 1936,   41,  814,  815,   44,   40,
  818,  819,  820,  821,  822,  823,  493,  351,   41,   41,
 1952,   44,   44,   40,  832,   40,  834,  835,  836,  837,
  838,  839,  265,   40,  842,    0,  315, 1927,   41, 1919,
   40,   44,   41, 1933,  277,   44, 1936, 1979,  262,  282,
   41,   42,   43,  453,   45,   40,   47, 1947, 1990, 1949,
  453, 1993, 1952,   40,   40,   40,  299,   40, 2000,  277,
  878,    0,   40,   40,  282,    0,   41,   40,   40,   44,
   41,   42,   43,   40,   45,   40,   47,  276,  277, 1979,
 1980,    0,  900,  514,   59,  284,   40,   91,  402,   44,
 1990,  315, 1992, 1993,  318,  913,  914,   46,   61,   40,
 2000,  325,   41,  327,   46,   44,   41,  331,  264,   44,
  395,  317,  336,    0,   44,  339,   58,   59,  532,   61,
   59,  440,   41,   44,   59,   44,  315,  277,   42,   43,
  354,   45,  282,   47,  420,  264,   46,   61,   40,  264,
   59,   41,   42,   43,  368,   45,  337,   47,  277,   46,
   44,  344,  376,  282,   41,  379,  380,   44,  308,  344,
  344,  365,   41,   42,   43,  389,   45,  276,   47,  264,
  390,  390,   59,  372,   61,  277,  428,  450,  275,  344,
  282,  405,  392,  277,   42,   43,  439,   45,  282,   47,
  262,  439,   40,  345,  393,   40,   91,  277,   40,   40,
  399,  264,  282,  427,  315, 1023, 1024, 1025,  432,  376,
 1028, 1029, 1030,  403, 1032, 1033, 1034, 1035, 1036, 1037,
  444,   44,  446,  382,  375,   40,   40,  380, 1046, 1047,
  443, 1049,  315, 1051,  433,   41, 1054, 1055, 1056, 1057,
 1058, 1059,   63,  315,  275,  296,  318,   42,   43,   44,
   45,  428,   47,  325, 1072,  327, 1074,   42,   43,  331,
   45,  456,   47,   40,  336,  428,  314,  339,  444,  493,
   44,  794, 1090,  796,  440,  264,  277,  800,  801,  802,
  337,  282,  354,   44,   40,    0,  510,  262,   40,  494,
  514,  273,  297,  281,  493,  340,  368,   41,   42,   43,
  340,   45,  379,   47,  376,  410,  277,  379,  380,  379,
  379,  282,  408, 1131,   40,  352,   40,  389,   41,   42,
   43,  410,   45,   40,   47,   41,   41,   42,   43,   44,
   45,   40,   47,  405,  362,   41,   44,  276,  277,  277,
  315,  276,  277,  318,   59,   60,   61,   62,  262,  284,
  325,  317,  327,   44,   46,  427,  331,  276,  277,  438,
  432,  336,  270,  277,  339,  284,  378,  361,  282,  317,
  317,  258,  444,   40,  446,   44,  266,  277,   93,  354,
   42,   43,  282,   45,  264,   47,  493,   41,  275,  276,
  277,  325,  414,  368,  281,   58,   41,  284,  277,   41,
   41,  376,    0,  282,  379,  380,  264,   41,   42,   43,
  297,   45,  264,   47,  389,  306,  303,  446,  387,  277,
  306,  493,   41,   41,  282,   40,   40,   40,  317,   40,
  405,   40,   40,  372,   40,   40,   40,  372,  510,   40,
   40,   40,  514,   41,  291,   40,   44,   40,   40,   40,
  262,  427,  427,  372,  393,  302,  305,  432,  393, 1277,
  399,   59,  309,   61,  399,  446,  313,   44,   44,  444,
   41,  446, 1290, 1291,  393, 1293, 1294,  262,   41,  339,
  399,  264,  277, 1301,  339,  372,  333,  282,  381,   41,
   42,   43,  277,   45,  433,   47,  327,  282,  433,   42,
   43,   44,   45,  273,   47, 1323,  393,  384,  379,  284,
  379,  399,  399, 1331,  433, 1333, 1334,  379,  493, 1337,
  379, 1339,  379,  410,   41, 1343, 1344, 1345,  379,   41,
  450,  276,   40,  277, 1352,  510, 1354,   41,  282,  514,
   41,  428,  318,  258,   41,  317,  433,  262,  395,  264,
  265,   41,   44,   41,  277,  331,  271,  305,  493,  282,
    0,  276,  277,  339,  427,   59,   40,  282,  290,  284,
  285,  336,  336,  305,  493,  462,   59, 1395,  354,  426,
   58,  324,  428,  430,  299,  529,  339,    0,  303,  304,
  305,  277,  368,  308,   42,   43,   44,   45,  333,   47,
  315,   41,  317,  318,   44,  434,  321,  334,    0,  434,
  325, 1429,  327,  298,  329,  277,  331,  298,   41,   59,
  282,  336,  337,  334,  339,   41,  365,   40,   41,  405,
  348,   44,  378,   41,  365,   41,   41,   41,   41,  354,
  355,   41,  357,  277,   41,   41,   59,   41,  282,   41,
    0,   41,   44,  368,   41,  370,   41,  372,  373,  374,
  258,  376,   41,   41,  379,  380,   41,   59,   41,  516,
   40, 1489,   41,   40,  389,  273,  315, 1495,  393,   41,
   42,   43, 1500,   45,  399,   47,  443,  402,  378, 1507,
  405,   41,   44,   41,   44,  410,  340,  333,  458,  297,
   40,  500,   40,  338,  336,  303,  421,  336,  306,   59,
   40,  376,  427,  428,   41,   44,   40,  432,  433,  376,
  427,  376,   41, 1541,   41,  277,  301, 1545,  443,  444,
  282,  446,  298, 1551,  277,  434,  371,  452,  514,  282,
  455,   41,  457,  458,  459,  460,  304,  462,  290, 1567,
  348,  301,  455,    0,  333,  470,  471,  409,   40,  376,
  376,  264,  397,  450,  264,  400,  481,  482,  317,  484,
  485,  486,  403,   40,   44,  443,  491,  492,  493,  494,
  495,  416,  497,  270,    0,  500,  501,  502,  503,  504,
  505,  506,   40,  270,   40,  510,  511,  512,  513,  514,
  515,  516,  517,   41,  519,  403,  264,  442,    0,  339,
  450,  339,  410,  450,  529,  530,  531,  532,  533,  534,
  427,   41,   41, 1641,   59,   41,   41,   59,   44,  277,
  428,   59,   59,  305,  282,   41,  276,  277,   59,   41,
  301,  281,   59,   59,  284,   61,   59,   59,   40,   41,
   42,   43,   44,   45,   46,   47,   59,  297,  486,   44,
  458,  371,  497,   41,  462,    0,   58,   59,   60,   61,
   62,   41,  371,   41,   42,   43,   41,   45,   41,   47,
    0,    0,  517,    0,  276,  277,    0,  168,  168, 1381,
  595, 1709,  284,  169,  868,  530,  597, 1715, 1716,   91,
  329,   93,  315,  328, 1257,  318,   41,  859, 1011,   44,
  760,   95,  325, 1255,  327,  277, 1016,  973,  331,   81,
  282, 1739, 1252,  336,   59, 1743,  339, 1247, 1677, 1747,
 1660,  986,  372, 1678,  458, 1237, 1754, 1755,   41,   42,
   43,  354,   45, 1178,   47,  464,  465,  466,  467,  468,
  469,  470,  471,  393,    0,  368,  707,  902,  382,  399,
 1248, 1779, 1801,  376,  439,  315,  439,  380,  318,  937,
 1939, 1658,  684, 1943, 1942,  325,  389,  327, 1965, 1120,
  372,  331,  928, 1570, 1767, 1928,  336,  848, 1414,  339,
  444,  429,  405,  433,  422,   41,  989,  686,   44,    0,
 1457,  393,  744,   13,  354,  365,  170,  399,  610,  890,
  878,  981, 1830,   59,  174, 1137, 1401,   91,  368,  432,
 1895,   41,   42,   43,  792,   45,  376,   47,  615, 1520,
  380,  444, 1730,  446,  866,  913, 1292,  507, 1181,  389,
   41,  433,  258,   44,  629,   41,   42,   43, 1132,   45,
   -1,   47, 1339,   -1,   -1,  405,   -1,   -1,   59,  275,
  276,  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1, 1895,   -1,  271,
  493,  297,  432,   -1,   -1,  277,   -1,  303,   -1,   -1,
  282,   -1,   -1,  285,  444,   -1,  446,  510,   -1,   -1,
   -1,  514,   -1,   -1,   -1,   -1,   -1,  299,    0,  277,
   -1, 1929,  304,  305,  282,   -1,  308,   -1,   41,   42,
   43,   -1,   45,  315,   47,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,  276,  277,  493,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,  372,   -1,   -1,   -1,
  510,   -1,  354,  355,  514,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,  277,   -1,  368,  393,  370,  282,
  372,  373,  374,  399,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,  408,   -1,  410,   -1,   -1,  389,   -1,   91,
   -1,   93,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
  402,   47,  428,  405,   -1,   -1,   -1,  433,   -1,   -1,
   41,   42,   43,   -1,   45,   -1,   47,   -1,   -1,  421,
  276,  277,   -1,   -1,   -1,  427,  428,  372,  284,   -1,
  432,   -1,   -1,   -1,   -1,   -1,  462,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,  277,  393,   -1,
  452,   -1,  282,  455,  399,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,  276,  277,   -1,  470,  471,
  281,  277,   -1,  284,   -1,   -1,  282,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,  297,   -1,  433,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,  372,  519,   41,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   41,   42,   43,  393,   45,   -1,
   47,   -1,   -1,  399,  277,   -1,   -1,   -1,   -1,  282,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,  372,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,  277,   -1,  433,   -1,   -1,
  282,   -1,  393,  285,   -1,   -1,   -1,   -1,  399,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,  301,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   41,   42,
   43,   -1,   45,  315,   47,  317,  318,   -1,   -1,  321,
   -1,   -1,  433,  325,   -1,  327,   -1,  329,   -1,  331,
   41,  277,   -1,   44,  336,  337,  282,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,  277,   -1,   59,   -1,
   61,  282,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   41,   42,   43,  368,   45,  370,   47,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   91,
   -1,   93,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
  402,   47,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,  277,  457,  458,  459,  460,  282,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
  277,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,   -1,   -1,  258,   -1,  282,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,  276,  277,   -1,   -1,  271,
  281,   -1,   -1,  284,   -1,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,  297,   -1,   -1,    0,
   -1,   -1,  303,   -1,   -1,   -1,   -1,  299,    0,  277,
   -1,   -1,  304,  305,  282,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   41,  277,   -1,   44,  336,  337,  282,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   59,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,  372,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,  393,   -1,   -1, 1490, 1491,  389,  399,   91,
   -1,   93,   -1, 1498, 1499,   -1, 1501, 1502,   -1,  410,
  402,   -1,   -1,  405, 1509, 1510, 1511, 1512,   -1, 1514,
 1515, 1516, 1517, 1518, 1519,   -1,   -1,  428,   -1,  421,
   -1,   -1,  433,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,  462,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   41,  519,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,  276,  277,   -1,   -1,  271,
   -1,   -1,   -1,  284,   -1,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  291,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,  302,   -1,  308,   -1,   -1,   -1,
   -1,  309,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,  322,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,  372,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,  379,  393,   -1,   -1,   -1,   -1,  389,  399,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,  395,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,  433,   -1,   -1,  427,  428,   -1,  426,   -1,
  432,   -1,  430,   -1,   -1,  433,   -1,   -1,   -1,   -1,
   -1,  443,  444,  441,  446,   -1,   -1,   -1,   -1,   -1,
  452,  276,  277,  455,   -1,  457,  458,  459,  460,  284,
  462,   -1,  460,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,  516,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,  393,  271,
   -1,   -1,   -1,   -1,  399,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,  433,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,  333,  271,
   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
  395,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   46,   47,  411,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,  426,   -1,   -1,   -1,  430,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,  441,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   91,
   -1,   93,   -1,   -1,   -1,  460,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,  516,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   45,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
   -1,   93,  292,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
  320,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,  348,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,  419,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,   -1,  453,  454,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,  472,  473,  474,  475,  476,  477,  478,  479,
  480,   -1,   -1,  285,   -1,   -1,   -1,  487,  488,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  496,  299,    0,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  354,  355,   -1,  357,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,  272,   -1,  325,  275,  327,   -1,  329,   41,  331,
   43,   44,   45,   -1,  336,  337,   -1,  339,   -1,  290,
   -1,  292,   -1,   -1,  295,   -1,   59,   60,   61,   62,
   -1,   -1,  354,  355,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   93,   -1,   -1,   -1,  335,   -1,   -1,  389,   -1,   -1,
  341,  342,  343,   -1,  345,  346,  347,   -1,  349,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,  398,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,  415,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,  437,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,  472,  473,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,  489,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
  272,   -1,  325,  275,  327,   -1,  329,   41,  331,   43,
   44,   45,   -1,  336,  337,   -1,  339,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,   59,   60,   61,   62,   -1,
   -1,  354,  355,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,   93,
   -1,   -1,   -1,  335,   -1,   -1,  389,   -1,   -1,  341,
  342,  343,   -1,  345,  346,  347,   -1,  349,   -1,  402,
   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,  421,   -1,
   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,  432,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  443,  444,   -1,  446,   -1,   -1,  398,   -1,   -1,  452,
   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,
   -1,   -1,   -1,  415,   -1,   -1,   -1,  470,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,  437,   -1,   -1,  491,  492,
  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,  512,
  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,   -1,
  472,  473,   -1,   -1,   -1,   -1,  529,  530,  531,  532,
  533,  534,   -1,   -1,   -1,   -1,   -1,  489,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  304,  305,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,  327,   -1,  329,   41,  331,   43,   44,
   45,   -1,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
  354,  355,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,  376,   -1,   -1,  379,  380,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,   -1,
   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,   -1,   -1,
   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  443,
  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,  452,   -1,
   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,  493,
  494,  495,   -1,  497,   -1,    0,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,  510,  511,  512,  513,
  514,  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,
  534,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,  264,
  265,   -1,   -1,   -1,   59,   -1,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,  304,
  305,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,  327,   -1,  329,   41,  331,   43,   44,   45,
   -1,  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,  354,
  355,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,  376,   -1,   -1,  379,  380,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,   -1,   -1,
  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  421,   -1,   -1,   -1,
   -1,   -1,  427,  428,   -1,   -1,   -1,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  443,  444,
   -1,  446,   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,
  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  470,  471,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,   -1,   -1,   -1,  491,  492,  493,  494,
  495,   -1,  497,   -1,    0,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,  510,  511,  512,  513,  514,
  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,  318,  529,  530,  531,  532,  533,  534,
  325,   -1,  327,   -1,   -1,   41,  331,   -1,   44,   -1,
   -1,  336,   -1,   -1,  339,   -1,  262,   -1,  264,  265,
   -1,   -1,   -1,   59,   -1,  271,   -1,   -1,   -1,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  376,   -1,  299,  379,  380,   -1,   -1,  304,  305,
   -1,   -1,  308,   -1,  389,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,   -1,  325,
  405,  327,   -1,  329,   -1,  331,   -1,   -1,   -1,   -1,
  336,  337,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  427,   -1,   -1,   -1,   -1,  432,  354,  355,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,  446,  368,   -1,  370,   -1,  372,  373,  374,   -1,
  376,   -1,   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  402,   -1,   -1,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  493,   -1,
   -1,   -1,   -1,   -1,   -1,  421,   -1,   -1,   -1,   -1,
   -1,  427,  428,   -1,   -1,  510,  432,   -1,   -1,  514,
   -1,   -1,   -1,    0,   -1,   -1,   -1,  443,  444,   -1,
  446,   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,  264,   -1,
   -1,   -1,   -1,   40,   41,  481,  482,   44,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,  493,  494,  495,
   -1,  497,   59,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,  510,  511,  512,  513,  514,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,  315,
   -1,   -1,  318,  529,  530,  531,  532,  533,  534,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
  336,   42,   43,  339,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  354,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  376,   -1,   -1,   -1,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,  432,  294,   -1,  296,
   -1,  298,   -1,    0,   -1,   -1,  303,   -1,  444,   -1,
  446,   -1,   -1,  310,   -1,   -1,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,  324,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  481,  482,   44,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,  493,  494,  495,
   -1,  497,   59,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,  510,  511,  512,  513,  514,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,   -1,
  397,   -1,   -1,   -1,   -1,   -1,   -1,  404,  315,   -1,
  407,  318,  409,  410,   -1,   -1,   -1,   -1,  325,   -1,
  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,  336,
  271,   -1,  339,   -1,   -1,   -1,  277,  434,   -1,   -1,
   -1,  282,   -1,   -1,  285,   -1,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,   -1,   -1,  380,   -1,   -1,   -1,   -1,   -1,   -1,
  321,   -1,  389,   -1,   -1,   -1,  483,   -1,  329,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  337,   -1,  405,   -1,
   -1,  498,  499,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,  520,   -1,  432,   -1,   -1,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,   -1,  444,   -1,  446,
   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
  421,   -1,   -1,   -1,  491,  492,  493,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,    0,  510,  511,  512,  513,  514,  515,  516,
  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,  315,   -1,
   -1,  318,  529,  530,  531,  532,  533,  534,  325,   -1,
  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,  336,
   -1,   -1,  339,   -1,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  354,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,    0,   -1,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  389,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  432,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,  444,   -1,  446,
   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,  493,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,  510,  511,  512,  513,  514,  515,  516,
  517,    0,  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,  262,   44,   -1,    0,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,
   59,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,   -1,  321,   -1,   -1,   59,  325,   -1,  327,
   -1,  329,   -1,  331,   -1,   -1,   -1,   -1,  336,  337,
   -1,  339,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,  354,  355,  277,  357,
   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,
   -1,   -1,  321,   -1,   -1,   -1,  325,  405,  327,   -1,
  329,   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,
  339,   -1,   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,
    0,   -1,   -1,   -1,  432,  354,  355,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,  446,  368,
   -1,  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  389,   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  405,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,  493,   -1,   -1,   -1,   -1,
   -1,   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,    0,
   -1,   -1,  510,  432,   -1,   -1,  514,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,  444,   -1,  446,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,
   41,   -1,  331,   44,   -1,   -1,   -1,  336,   -1,   -1,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,  493,  354,   -1,   -1,   -1,   -1,
   -1,    0,  315,   -1,   -1,  318,   -1,   -1,   -1,  368,
   -1,  510,  325,   -1,  327,  514,   -1,  376,  331,   -1,
  379,  380,   -1,  336,   -1,   -1,  339,   -1,   -1,   -1,
  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  354,   41,   -1,   -1,   44,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,
   59,    0,   -1,  376,   -1,   -1,  379,  380,  427,   -1,
   -1,   -1,   -1,  432,   -1,   -1,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,  446,   -1,   -1,
   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  427,   -1,   -1,   -1,   -1,  432,
   59,  271,   41,   42,   43,   -1,   45,  277,   47,   -1,
   -1,  444,  282,  446,  493,  285,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  510,   -1,   -1,   -1,  514,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
  493,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,  262,   -1,   -1,    0,   -1,   -1,  510,   -1,   -1,
   -1,  514,   -1,   -1,  354,  355,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,    0,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,  389,
   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,   -1,
   -1,   -1,   -1,   59,  325,  405,  327,   -1,   -1,   -1,
  331,   -1,   -1,  262,   -1,  336,   41,   -1,  339,   44,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,   -1,   -1,
   -1,   -1,  432,  354,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  444,   -1,  446,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,  379,  380,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  389,  318,
   -1,   -1,   -1,  262,   -1,   -1,  325,   -1,  327,   -1,
   -1,   -1,  331,   -1,  405,   -1,   -1,  336,   -1,   -1,
  339,   -1,   -1,  493,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,  354,  427,    0,  277,   -1,
  510,  432,   -1,  282,  514,   -1,  285,   -1,   -1,  368,
   -1,   -1,   -1,  444,   -1,  446,  315,  376,   -1,  318,
  379,  380,   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,
  389,   -1,  331,   -1,   -1,   -1,   -1,  336,   41,   -1,
  339,   44,  321,   -1,   -1,   -1,  405,   -1,   -1,   -1,
  329,   -1,   -1,   -1,   -1,  354,   59,   -1,  337,   -1,
   -1,   -1,  493,   -1,   -1,   -1,   -1,   -1,  427,  368,
   -1,   -1,    0,  432,   -1,   -1,  355,  376,  357,  510,
  379,  380,   -1,  514,   -1,  444,   -1,  446,   -1,   -1,
  389,  370,   -1,  372,  373,  374,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,  427,   -1,
   -1,   59,   -1,  432,  493,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  421,   -1,   -1,  444,   -1,  446,   -1,  315,
   -1,  510,  318,   -1,   -1,  514,   -1,   -1,   -1,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
  336,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,  318,   -1,   -1,   -1,   -1,  354,   -1,
  325,   -1,  327,   -1,  493,   -1,  331,   -1,   -1,   -1,
   -1,  336,  368,   -1,  339,    0,   -1,   -1,   -1,   -1,
  376,  510,   -1,  379,  380,  514,   -1,   -1,   -1,  354,
   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,    0,   -1,   -1,   -1,  405,
   -1,  376,   -1,   -1,  379,  380,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,  262,
   -1,  427,   -1,   -1,   59,   -1,  432,   -1,   -1,   -1,
  405,   -1,   -1,   -1,   -1,   -1,   41,   -1,  444,   44,
  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  427,   -1,   59,   -1,   -1,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,  446,  315,   -1,   -1,  318,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,   -1,   -1,  493,  331,   -1,
   -1,   -1,   -1,  336,  262,   -1,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  510,   -1,   -1,   -1,  514,   -1,
   -1,  354,   -1,   -1,   -1,   -1,   -1,    0,  493,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,  510,  379,  380,   -1,  514,
   -1,   -1,   -1,   -1,   -1,   -1,  389,  315,   -1,   -1,
  318,   -1,   -1,   -1,   -1,   -1,   -1,  325,   41,  327,
   -1,   44,  405,  331,   -1,   -1,   -1,   -1,  336,   -1,
   -1,  339,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  427,   -1,  354,   -1,   -1,  432,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,  444,   -1,  446,   -1,   -1,   -1,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,  405,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  493,   59,   -1,   -1,   -1,   -1,   -1,  262,   -1,  427,
   -1,   -1,   -1,   -1,  432,   -1,   -1,  510,   -1,   -1,
   -1,  514,   -1,   -1,   -1,   -1,  444,   -1,  446,   -1,
  315,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,
   -1,  336,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,  318,    0,   -1,   -1,   -1,   -1,  354,
  325,   -1,  327,   -1,   -1,  493,  331,   -1,   -1,   -1,
   -1,  336,   -1,  368,  339,   -1,   -1,   -1,   -1,   -1,
   -1,  376,  510,   -1,  379,  380,  514,    0,   -1,  354,
   -1,   -1,   -1,   -1,  389,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  376,   -1,   59,  379,  380,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   41,   -1,
   -1,   44,  427,    0,   -1,   -1,   -1,  432,   -1,   -1,
  405,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,  444,
   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  427,   -1,   -1,   -1,   -1,  432,   -1,   -1,
   -1,   -1,  315,   -1,   41,  318,   -1,   44,   -1,  444,
   -1,  446,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,
   -1,   -1,   59,  336,  262,   -1,  339,   -1,  493,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  354,   -1,   -1,   -1,  510,   -1,   -1,   -1,  514,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,  493,   -1,
   -1,    0,   -1,  376,   -1,   -1,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  510,  389,  315,   -1,  514,
  318,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,
   -1,   -1,  405,  331,   -1,   -1,   -1,   -1,  336,   -1,
   -1,  339,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  427,   -1,  354,   -1,   -1,  432,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,  444,   -1,  446,   -1,   -1,   -1,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,  262,
  493,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  427,
   58,   -1,   -1,   -1,  432,   63,   -1,  510,   -1,  315,
   -1,  514,  318,   -1,   -1,   -1,  444,   -1,  446,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
  336,   -1,   -1,  339,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,   -1,  318,   -1,   -1,  354,   -1,
   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,
   -1,   -1,  368,  336,   -1,  493,  339,   -1,   -1,   -1,
  376,   -1,   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,  354,  510,  389,   -1,   -1,  514,   -1,  315,   -1,
   -1,  318,   -1,   -1,   -1,  368,   -1,   -1,  325,  405,
  327,   -1,   -1,  376,  331,   -1,  379,  380,   -1,  336,
   -1,   -1,  339,   -1,   -1,   -1,  389,   -1,   -1,   -1,
   -1,  427,   -1,   -1,   -1,   -1,  432,  354,   -1,   -1,
   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,  444,   -1,
  446,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,   -1,  379,  380,  427,   -1,   -1,   -1,   -1,  432,
   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  444,   -1,  446,   -1,   -1,   -1,   -1,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  493,   -1,  318,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,
  427,   -1,  331,   -1,  510,  432,   -1,  336,  514,  267,
  339,   -1,   -1,   -1,   -1,   -1,  274,  444,   -1,  446,
  493,   -1,   -1,   -1,   -1,  354,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,  292,  293,   -1,  510,   -1,  368,
   -1,  514,   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,
   -1,  380,   40,  311,   -1,   43,   -1,   45,   -1,   -1,
  389,   -1,  320,   -1,   -1,  323,  493,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,  405,   -1,   -1,   -1,
   -1,   -1,   -1,  510,   -1,   -1,   -1,  514,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  432,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,  444,   -1,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,  493,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,  510,   -1,   -1,   -1,  514,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,  311,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   40,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   58,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,  311,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  453,  454,  455,   -1,  457,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,   -1,  484,  485,  486,  487,  488,
   -1,  490,  491,  492,   -1,  494,  495,  496,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,
  529,  530,  531,  532,  533,  534,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,
  320,   45,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,  452,  364,   -1,  455,   -1,  457,  458,
  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,  419,
   -1,   -1,  511,  512,  513,  425,  515,  516,  517,   -1,
  519,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
  529,  530,  531,  532,  533,  534,   -1,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   40,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,  518,  519,
   -1,  521,  522,  523,  524,  525,  526,  527,  528,  529,
  530,  531,  532,  533,  534,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,  320,   45,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,  452,  350,  351,  455,   -1,
  457,  458,  459,  460,   -1,  462,  360,   -1,   -1,   -1,
  364,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,  417,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  425,  529,  530,  531,  532,  533,  534,   -1,   -1,
   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,  485,  486,  487,  488,   40,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,   -1,  528,  529,  530,  531,  532,  533,
  534,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,  320,   45,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,  452,  350,  351,  455,   -1,  457,  458,  459,  460,
   -1,  462,  360,   -1,   -1,   -1,  364,   -1,   -1,  470,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,
  491,  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,  417,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,  529,  530,
  531,  532,  533,  534,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   58,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,  320,   45,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,  452,  350,  351,
  455,   -1,  457,  458,  459,  460,   -1,  462,  360,   -1,
   -1,   -1,  364,   -1,   -1,  470,  471,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,
  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,  417,   -1,  419,   -1,   -1,
   -1,   -1,   -1,  425,  529,  530,  531,  532,  533,  534,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  453,  454,  455,   -1,  457,  458,  459,  460,   -1,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,   -1,  484,  485,  486,  487,  488,   -1,  490,  491,
  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,
  522,  523,   -1,  525,  526,   -1,  528,  529,  530,  531,
  532,  533,  534,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,  320,   45,   -1,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,  452,  350,  351,  455,   -1,  457,  458,
  459,  460,   -1,  462,  360,   -1,   -1,   -1,  364,   -1,
   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,  417,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
  529,  530,  531,  532,  533,  534,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,
  320,   45,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,  452,
  350,  351,  455,   -1,  457,  458,  459,  460,   -1,  462,
  360,   -1,   -1,   -1,  364,   -1,   -1,  470,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,
   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,  417,   -1,  419,
   -1,   -1,   -1,   -1,   -1,  425,  529,  530,  531,  532,
  533,  534,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   -1,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,  529,
  530,  531,  532,  533,  534,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,  320,   45,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,  452,  350,  351,  455,   -1,
  457,  458,  459,  460,   -1,  462,  360,   -1,   -1,   -1,
  364,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,  417,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  425,  529,  530,  531,  532,  533,  534,   -1,   -1,
   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,  485,  486,  487,  488,   -1,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,   -1,  528,  529,  530,  531,  532,  533,
  534,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,  320,   45,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,  452,  350,  351,  455,   -1,  457,  458,  459,  460,
   -1,  462,  360,   -1,   -1,   -1,  364,   -1,   -1,  470,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,
  491,  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,  417,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,  529,  530,
  531,  532,  533,  534,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   45,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   42,   43,  320,   45,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,  452,  350,  351,
  455,   -1,  457,  458,  459,  460,   -1,  462,  360,   -1,
   -1,   -1,  364,   -1,   -1,  470,  471,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,
  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,  417,   -1,  419,   -1,   -1,
   -1,   -1,   -1,  425,  529,  530,  531,  532,  533,  534,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  453,  454,  455,   -1,  457,  458,  459,  460,   -1,
  462,  463,   -1,   -1,   -1,   -1,   40,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,   -1,  484,  485,  486,  487,  488,   -1,  490,  491,
  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,
  522,  523,   -1,  525,  526,   -1,  528,  529,  530,  531,
  532,  533,  534,   -1,  260,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  450,   -1,  452,  364,   -1,
  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,
  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,  419,   -1,   -1,  511,  512,  513,  425,
  515,  516,  517,   -1,  519,   -1,   -1,  281,   -1,  435,
   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,
   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   44,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
   -1,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,  452,   -1,
   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,
  348,   -1,  350,  351,   -1,   -1,  470,  471,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,  481,  482,   -1,
  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,
  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,
  534,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,  317,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   42,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  320,   -1,   -1,  323,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,  348,   -1,
  350,  351,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,  481,  482,   -1,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,
   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,  419,
   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   -1,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,  529,
  530,  531,  532,  533,  534,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,
   -1,  323,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,  452,  364,   -1,  455,   -1,  457,  458,  459,  460,
   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,
  491,  492,   -1,  494,  495,   -1,  497,  409,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,  419,   -1,   -1,
  511,  512,  513,  425,  515,  516,  517,   -1,  519,   -1,
   -1,   -1,   -1,  435,  284,   -1,   -1,   -1,  529,  530,
  531,  532,  533,  534,   -1,   -1,   -1,  449,  450,  451,
  452,  453,  454,  455,   -1,  457,  458,  459,  460,   -1,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,   -1,  484,  485,  486,  487,  488,   -1,  490,  491,
  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,
  522,  523,   -1,  525,  526,   -1,  528,  529,  530,  531,
  532,  533,  534,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,  323,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,  348,   -1,  350,  351,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,
  364,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  419,   -1,   -1,   -1,   -1,
   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  435,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,  485,  486,  487,  488,   -1,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,   -1,  528,  529,  530,  531,  532,  533,
  534,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,  348,   -1,  350,  351,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  446,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,  339,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  267,
   -1,   -1,   -1,   -1,   -1,  362,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  317,
   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   58,   -1,
   -1,  418,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,  452,  364,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,  419,   -1,   -1,  511,  512,  513,  425,  515,  516,
  517,   -1,  519,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   42,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   42,   43,
  320,   45,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,
   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,  293,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   -1,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,  529,
  530,  531,  532,  533,  534,   -1,  260,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,  323,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,  452,  350,  351,  455,   -1,
  457,  458,  459,  460,   -1,  462,  360,   -1,   -1,   -1,
  364,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  425,  529,  530,  531,  532,  533,  534,   -1,   -1,
   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,   -1,   -1,  487,  488,   -1,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,   -1,  528,  529,  530,  531,  532,  533,
  534,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  320,   -1,   -1,  323,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,
   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   -1,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,  529,
  530,  531,  532,  533,  534,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   40,   41,   -1,  320,   44,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,  351,
   -1,   40,   41,   -1,    0,   44,   -1,   -1,  360,   -1,
   -1,   -1,  364,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,  419,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,  449,  450,  451,
  452,  453,  454,  455,   -1,  457,  458,  459,  460,   -1,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,   -1,  484,  485,  486,  487,  488,   -1,  490,  491,
  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,    0,  519,   -1,  521,
  522,  523,   -1,  525,  526,   -1,  528,  529,  530,  531,
  532,  533,  534,  258,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,  281,   41,   -1,  284,
   44,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  258,
   -1,   -1,  297,   -1,   -1,   59,   -1,   61,  303,   -1,
   -1,  306,   -1,   -1,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,  281,    0,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   91,  297,   44,
   -1,   -1,  258,   -1,  303,   -1,   -1,  306,   -1,   -1,
   -1,   -1,   -1,  348,   59,   -1,   61,  273,   -1,  275,
  276,  277,   -1,   -1,   41,  281,   -1,   44,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,  275,   -1,
   -1,  297,   59,   -1,   61,   -1,   91,  303,   -1,  348,
  306,   -1,   -1,   -1,  291,   -1,   -1,   -1,  393,   -1,
   -1,   -1,   -1,   -1,  399,  302,   -1,   -1,  403,   -1,
   -1,   -1,  309,  372,   91,  410,  313,  314,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  348,  428,  393,   -1,  333,   -1,  433,   -1,
  399,   -1,   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,
   -1,  410,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,
   -1,   -1,   -1,  458,   -1,   -1,   -1,  462,   -1,  428,
   -1,   -1,   -1,   -1,  433,   -1,   -1,  393,   -1,   -1,
   -1,   -1,   -1,  399,   -1,   -1,   -1,  403,   -1,   -1,
  387,   -1,   -1,   -1,  410,   -1,   -1,   -1,  395,  458,
   -1,   -1,   -1,  462,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  428,   -1,   -1,   -1,   -1,  433,   -1,  273,
   -1,   -1,  276,  277,   -1,   -1,   -1,  281,   -1,  426,
  284,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  297,  441,   -1,  462,   -1,   -1,  303,
   -1,   -1,  306,  258,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  460,  461,   -1,   -1,   -1,  273,   -1,
   -1,  276,  277,   -1,   -1,   -1,  281,   -1,  260,  284,
   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,  348,   -1,  273,   -1,  303,  276,
  277,  306,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,  372,  516,
  297,   -1,  519,   -1,   -1,   -1,  303,   -1,  310,  306,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  393,
   -1,   -1,   -1,  348,   -1,  399,   -1,   -1,   -1,  403,
   -1,   -1,  334,   -1,   -1,   -1,  410,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,   -1,   -1,  372,   -1,   -1,
   -1,  348,   -1,   -1,  428,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  393,   -1,
   -1,   -1,   -1,   -1,  399,  372,   -1,   -1,  403,   -1,
  298,   -1,   -1,   -1,  458,  410,   -1,   -1,  462,   -1,
   -1,   -1,  310,   -1,   -1,   -1,  393,  399,   -1,   -1,
   -1,   -1,  399,  428,   -1,   -1,  403,  409,  433,   -1,
   -1,   -1,   -1,  410,   -1,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  428,  434,  458,   -1,   -1,  433,  462,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,  458,   -1,   -1,   -1,  462,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  399,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  409,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,  434,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,  452,   -1,   -1,  455,   -1,  457,
  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,
   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,  270,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  529,  530,  531,  532,  533,  534,  298,   -1,   -1,
   -1,   -1,   -1,   -1,  305,   -1,   -1,   -1,  309,  310,
   -1,  312,   -1,   -1,  315,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,
   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,  309,  310,   -1,
  312,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  443,   -1,  445,   -1,  328,   -1,   -1,   -1,
   -1,  452,  334,   -1,  455,   -1,  457,  458,  459,  460,
   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,
  491,  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,  507,  508,  509,  391,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,
   -1,   -1,   -1,  270,   -1,   -1,   -1,  409,  529,  530,
  531,  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  309,  310,   -1,  312,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,  328,   -1,   -1,   -1,   -1,   -1,  334,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,  507,  508,  509,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,  529,  530,  531,
  532,  533,  534,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,  288,   -1,  491,  492,  292,  494,  495,  295,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
  507,  508,  509,   -1,  511,  512,  513,   -1,  515,  516,
  517,  272,  519,   -1,  275,   -1,   -1,   -1,   -1,   -1,
  281,   -1,  529,  530,  531,  532,  533,  534,   -1,  335,
   -1,  292,   -1,   -1,  295,  341,  342,  343,   -1,  345,
  346,  347,   -1,  349,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  335,   -1,   -1,   -1,   -1,   -1,
  341,  342,  343,   -1,  345,  346,  347,   -1,  349,   -1,
   -1,   -1,  398,   -1,   -1,   -1,   -1,  403,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,  415,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  437,   -1,   -1,   -1,   -1,   -1,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,
   -1,   -1,   -1,  489,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,
   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,
  471,  472,  473,   -1,   -1,  272,   -1,   -1,  275,   -1,
  481,  482,   -1,  484,  485,  486,   -1,   -1,  489,   -1,
  491,  492,   -1,  494,  495,  292,  497,   -1,  295,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,
  531,  532,  533,  534,   -1,   -1,   -1,   -1,  335,   -1,
   -1,   -1,   -1,   -1,  341,  342,  343,   -1,  345,  346,
  347,   -1,  349,   -1,   -1,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,  369,   -1,   -1,   -1,  292,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  415,  335,
   -1,   -1,   -1,   -1,   -1,  341,  342,  343,   -1,  345,
  346,  347,   -1,  349,   -1,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,  369,   -1,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,  472,  473,   -1,   -1,   -1,
   -1,   -1,  398,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,  489,   -1,  491,  492,   -1,  494,  495,  415,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,  437,  519,  272,   -1,   -1,  275,   -1,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,  272,  288,
  325,  275,   -1,  292,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,  472,  473,  292,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  489,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,   -1,
   -1,   -1,  341,  342,  343,   -1,  345,  346,  347,   -1,
  349,  335,   -1,   -1,   -1,   -1,   -1,  341,  342,  343,
  395,  345,  346,  347,   -1,  349,   -1,   -1,  367,   -1,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  430,   -1,   -1,   -1,  398,
  435,   -1,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  398,   -1,  415,  452,   -1,   -1,
  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,
   -1,  415,   -1,   -1,   -1,  470,  471,   -1,  437,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,  437,   -1,   -1,  491,  492,   -1,  494,
  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,  472,  473,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,   -1,   -1,   -1,  472,  473,
  489,   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,
   -1,   -1,   -1,  452,   -1,  489,  455,  456,  457,  458,
  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
  469,  470,  471,  472,  473,  474,  475,  476,   -1,   -1,
  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
  499,  500,  501,  502,  503,  504,  505,  506,  507,  508,
  509,  510,  511,  512,  513,  514,  515,  516,  517,  518,
  519,  520,  521,  522,  523,  524,  525,  526,  527,  528,
  529,  530,  531,  532,  533,  534,  452,   -1,   -1,  455,
  456,  457,  458,  459,  460,   -1,  462,  463,  464,  465,
  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
  476,   -1,   -1,  479,  480,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,
  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,
  506,  507,  508,  509,  510,  511,  512,  513,  514,  515,
  516,  517,  518,  519,  520,  521,  522,  523,  524,  525,
  526,  527,  528,  529,  530,  531,  532,  533,  534,
};
static int yyctable[] = {                                    171,
  697,   -1,  172,  697,   -1,  172,  695,   -1,  886,  637,
   -1,  892,  652,   -1,  907, 1098,   -1,  908, 1099,   -1,
  909, 1100,   -1, 1091,  947,   -1,
};
#define YYFINAL 21
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 534
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BEFORE","BEGIN","BETWEEN","BLOB","BY","CAST",
"CHARACTER","CHECK","COLLATE","COMMA","COMMIT","COMMITTED","COMPUTED",
"CONCATENATE","CONDITIONAL","CONSTRAINT","CONTAINING","COUNT","CREATE",
"CSTRING","CURRENT","CURSOR","DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL",
"DECLARE","DEFAULT","KW_DELETE","DESC","DISTINCT","DO","DOMAIN","DROP","ELSE",
"END","ENTRY_POINT","EQL","ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT",
"EXTERNAL","FILTER","FOR","FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ",
"GENERATOR","GEN_ID","GRANT","GROUP","GTR","HAVING","IF","KW_IN","INACTIVE",
"INNER","INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN",
"KEY","KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LPAREN","LEFT","LEQ",
"LEVEL","LIKE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT","MERGE","MESSAGE",
"MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEQ","NO","NOT",
"NOT_GTR","NOT_LSS","OF","ON","ONLY","OPTION","OR","ORDER","OUTER",
"OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","KW_PAGE_SIZE","PARAMETER","PASSWORD",
"PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY","PRIVILEGES","PROCEDURE",
"PROTECTED","READ","REAL","REFERENCES","RESERVING","RETAIN","RETURNING_VALUES",
"RETURNS","REVOKE","RIGHT","RPAREN","ROLLBACK","SEGMENT","SELECT","SET",
"SHADOW","KW_SHARED","SINGULAR","KW_SIZE","SMALLINT","SNAPSHOT","SOME","SORT",
"SQLCODE","STABILITY","STARTING","STATISTICS","SUB_TYPE","SUSPEND","SUM",
"TABLE","THEN","TO","TRANSACTION","TRIGGER","UNCOMMITTED","UNION","UNIQUE",
"UPDATE","USER","VALUES","VARCHAR","VARIABLE","VARYING","VERSION","VIEW","WAIT",
"WHEN","WHERE","WHILE","WITH","WORK","WRITE","FLOAT_NUMBER","NUMBER","NUMERIC",
"SYMBOL","STRING","INTRODUCER","ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT",
"ROLE","COLUMN","TYPE","EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND",
"WEEKDAY","YEARDAY","TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME",
"CURRENT_TIMESTAMP","NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE",
"KW_BREAK","SUBSTRING","RECREATE","KW_DESCRIPTOR","FIRST","SKIP",
"CURRENT_CONNECTION","CURRENT_TRANSACTION","BIGINT","CASE","NULLIF","COALESCE",
"USING","NULLS","LAST","ROW_COUNT","LOCK","SAVEPOINT","RELEASE","STATEMENT",
"LEAVE","INSERTING","UPDATING","DELETING","BACKUP","KW_DIFFERENCE","OPEN",
"CLOSE","FETCH","ROWS","BLOCK","IIF","SCALAR_ARRAY","CROSS","NEXT","SEQUENCE",
"RESTART","BOTH","COLLATION","COMMENT","BIT_LENGTH","CHAR_LENGTH",
"CHARACTER_LENGTH","LEADING","KW_LOWER","OCTET_LENGTH","TRAILING","TRIM",
"RETURNING","KW_IGNORE","LIMBO","UNDO","REQUESTS","TIMEOUT",
};
static char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob_io",
"statement : comment",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : exec_procedure",
"statement : exec_block",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : savepoint",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON table_noise simple_table_name TO non_role_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO non_role_grantee_list grant_option",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"table_noise : TABLE",
"table_noise :",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : KW_DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON table_noise simple_table_name FROM non_role_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM non_role_grantee_list",
"revoke : REVOKE rev_admin_option role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"rev_grant_option :",
"rev_admin_option : ADMIN OPTION FOR",
"rev_admin_option :",
"non_role_grantee_list : grantee_list",
"non_role_grantee_list : user_grantee_list",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type param_mechanism",
"param_mechanism :",
"param_mechanism : BY KW_DESCRIPTOR",
"param_mechanism : BY SCALAR_ARRAY",
"param_mechanism : KW_NULL",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type return_mechanism",
"return_value : PARAMETER pos_short_integer",
"return_mechanism :",
"return_mechanism : BY KW_VALUE",
"return_mechanism : BY KW_DESCRIPTOR",
"return_mechanism : FREE_IT",
"return_mechanism : BY KW_DESCRIPTOR FREE_IT",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_filter_subtype OUTPUT_TYPE blob_filter_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"blob_filter_subtype : symbol_blob_subtype_name",
"blob_filter_subtype : signed_short_integer",
"create : CREATE create_clause",
"create_clause : EXCEPTION exception_clause",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : SEQUENCE generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"recreate_clause : TRIGGER rtrigger_clause",
"recreate_clause : EXCEPTION rexception_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : EXCEPTION replace_exception_clause",
"exception_clause : symbol_exception_name sql_string",
"rexception_clause : symbol_exception_name sql_string",
"replace_exception_clause : symbol_exception_name sql_string",
"alter_exception_clause : symbol_exception_name sql_string",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_default_opt domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default : DEFAULT begin_trigger default_value",
"domain_default_opt : domain_default",
"domain_default_opt :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_clause :",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : check_constraint",
"null_constraint : NOT KW_NULL",
"check_constraint : CHECK begin_trigger '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : KW_PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_rem_option : KW_DIFFERENCE KW_FILE sql_string",
"db_file : file1 sql_string file_desc1",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain domain_default_opt end_default_opt column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : null_constraint",
"column_constraint : check_constraint",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON KW_DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"input_parameters : '(' input_proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS '(' output_proc_parameters ')'",
"output_parameters :",
"input_proc_parameters : input_proc_parameter",
"input_proc_parameters : input_proc_parameters ',' input_proc_parameter",
"input_proc_parameter : simple_column_def_name non_array_type begin_trigger default_par_opt end_default_opt",
"output_proc_parameters : proc_parameter",
"output_proc_parameters : output_proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"default_par_opt : DEFAULT begin_trigger default_value",
"default_par_opt : '=' begin_trigger default_value",
"default_par_opt :",
"local_declaration_list : local_declarations",
"local_declaration_list :",
"local_declarations : local_declaration",
"local_declarations : local_declarations local_declaration",
"local_declaration : DECLARE var_decl_opt local_declaration_item ';'",
"local_declaration_item : var_declaration_item",
"local_declaration_item : cursor_declaration_item",
"var_declaration_item : column_def_name non_array_type var_init_opt",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : DEFAULT default_value",
"var_init_opt : '=' default_value",
"var_init_opt :",
"cursor_declaration_item : symbol_cursor_name CURSOR FOR '(' select ')'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : simple_proc_statement ';'",
"proc_statement : complex_proc_statement",
"simple_proc_statement : assignment",
"simple_proc_statement : insert",
"simple_proc_statement : update",
"simple_proc_statement : delete",
"simple_proc_statement : singleton_select",
"simple_proc_statement : exec_procedure",
"simple_proc_statement : exec_sql",
"simple_proc_statement : exec_into",
"simple_proc_statement : exec_udf",
"simple_proc_statement : excp_statement",
"simple_proc_statement : raise_statement",
"simple_proc_statement : post_event",
"simple_proc_statement : cursor_statement",
"simple_proc_statement : breakleave",
"simple_proc_statement : SUSPEND",
"simple_proc_statement : EXIT",
"complex_proc_statement : if_then_else",
"complex_proc_statement : while",
"complex_proc_statement : for_select",
"complex_proc_statement : for_exec_into",
"excp_statement : EXCEPTION symbol_exception_name",
"excp_statement : EXCEPTION symbol_exception_name value",
"raise_statement : EXCEPTION",
"exec_sql : EXECUTE STATEMENT value",
"for_select : label_opt FOR select INTO variable_list cursor_def DO proc_block",
"for_exec_into : label_opt FOR EXECUTE STATEMENT value INTO variable_list DO proc_block",
"exec_into : EXECUTE STATEMENT value INTO variable_list",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"post_event : POST_EVENT value event_argument_opt",
"event_argument_opt :",
"singleton_select : select INTO variable_list",
"variable : ':' symbol_variable_name",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : label_opt WHILE '(' search_condition ')' DO proc_block",
"label_opt : symbol_label_name ':'",
"label_opt :",
"breakleave : KW_BREAK",
"breakleave : LEAVE",
"breakleave : LEAVE symbol_label_name",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"cursor_statement : open_cursor",
"cursor_statement : fetch_cursor",
"cursor_statement : close_cursor",
"open_cursor : OPEN symbol_cursor_name",
"close_cursor : CLOSE symbol_cursor_name",
"fetch_cursor : FETCH fetch_opt symbol_cursor_name INTO variable_list",
"fetch_opt :",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs_opt",
"proc_inputs : value_list",
"proc_inputs : '(' value_list ')'",
"proc_inputs :",
"proc_outputs_opt : RETURNING_VALUES variable_list",
"proc_outputs_opt : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs_opt :",
"exec_block : EXECUTE BLOCK block_input_params output_parameters AS local_declaration_list full_proc_block",
"block_input_params : '(' block_parameters ')'",
"block_input_params :",
"block_parameters : block_parameter",
"block_parameters : block_parameters ',' block_parameter",
"block_parameter : proc_parameter '=' parameter",
"view_clause : symbol_view_name column_parens_opt AS begin_string select_expr check_opt end_trigger",
"rview_clause : symbol_view_name column_parens_opt AS begin_string select_expr check_opt end_trigger",
"begin_string :",
"begin_trigger :",
"end_trigger :",
"end_default_opt :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"rtrigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : KW_DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR KW_DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR KW_DELETE",
"trigger_type_suffix : KW_DELETE OR INSERT",
"trigger_type_suffix : KW_DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR KW_DELETE",
"trigger_type_suffix : INSERT OR KW_DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR KW_DELETE",
"trigger_type_suffix : UPDATE OR KW_DELETE OR INSERT",
"trigger_type_suffix : KW_DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : KW_DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger local_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION alter_exception_clause",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_clause : SEQUENCE alter_sequence_clause",
"alter_clause : EXTERNAL FUNCTION alter_udf_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET domain_default end_trigger",
"alter_domain_op : ADD CONSTRAINT check_constraint",
"alter_domain_op : ADD check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain",
"alter_op : col_opt alter_col_name SET domain_default end_trigger",
"alter_op : col_opt alter_col_name DROP DEFAULT",
"alter_column_name : keyword_or_column",
"keyword_or_column : valid_symbol_name",
"keyword_or_column : ADMIN",
"keyword_or_column : COLUMN",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : RECREATE",
"keyword_or_column : CURRENT_CONNECTION",
"keyword_or_column : CURRENT_TRANSACTION",
"keyword_or_column : BIGINT",
"keyword_or_column : CASE",
"keyword_or_column : RELEASE",
"keyword_or_column : ROW_COUNT",
"keyword_or_column : SAVEPOINT",
"keyword_or_column : OPEN",
"keyword_or_column : CLOSE",
"keyword_or_column : FETCH",
"keyword_or_column : ROWS",
"keyword_or_column : USING",
"keyword_or_column : CROSS",
"keyword_or_column : BIT_LENGTH",
"keyword_or_column : BOTH",
"keyword_or_column : CHAR_LENGTH",
"keyword_or_column : CHARACTER_LENGTH",
"keyword_or_column : COMMENT",
"keyword_or_column : LEADING",
"keyword_or_column : KW_LOWER",
"keyword_or_column : OCTET_LENGTH",
"keyword_or_column : TRAILING",
"keyword_or_column : TRIM",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type",
"alter_data_type_or_domain : simple_column_name",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"alter_sequence_clause : symbol_generator_name RESTART WITH signed_long_integer",
"alter_sequence_clause : symbol_generator_name RESTART WITH NUMBER64BIT",
"alter_sequence_clause : symbol_generator_name RESTART WITH '-' NUMBER64BIT",
"alter_udf_clause : symbol_UDF_name entry_op module_op",
"entry_op : ENTRY_POINT sql_string",
"entry_op :",
"module_op : MODULE_NAME sql_string",
"module_op :",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : ADD KW_DIFFERENCE KW_FILE sql_string",
"db_alter_clause : DROP KW_DIFFERENCE KW_FILE",
"db_alter_clause : BEGIN BACKUP",
"db_alter_clause : END BACKUP",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"drop_clause : SEQUENCE symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT KW_SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"savepoint : set_savepoint",
"savepoint : release_savepoint",
"savepoint : undo_savepoint",
"set_savepoint : SAVEPOINT symbol_savepoint_name",
"release_savepoint : RELEASE SAVEPOINT symbol_savepoint_name release_only_opt",
"release_only_opt : ONLY",
"release_only_opt :",
"undo_savepoint : ROLLBACK optional_work TO optional_savepoint symbol_savepoint_name",
"optional_savepoint : SAVEPOINT",
"optional_savepoint :",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work optional_retain",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tra_misc_options",
"tran_opt : tra_timeout",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tra_misc_options : NO AUTO UNDO",
"tra_misc_options : KW_IGNORE LIMBO",
"tra_misc_options : RESTART REQUESTS",
"tra_timeout : LOCK TIMEOUT nonneg_short_integer",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : KW_SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"comment : COMMENT ON ddl_type0 IS ddl_desc",
"comment : COMMENT ON ddl_type1 symbol_ddl_name IS ddl_desc",
"comment : COMMENT ON ddl_type2 symbol_ddl_name ddl_subname IS ddl_desc",
"ddl_type0 : DATABASE",
"ddl_type1 : DOMAIN",
"ddl_type1 : TABLE",
"ddl_type1 : VIEW",
"ddl_type1 : PROCEDURE",
"ddl_type1 : TRIGGER",
"ddl_type1 : EXTERNAL FUNCTION",
"ddl_type1 : FILTER",
"ddl_type1 : EXCEPTION",
"ddl_type1 : GENERATOR",
"ddl_type1 : SEQUENCE",
"ddl_type1 : INDEX",
"ddl_type1 : ROLE",
"ddl_type1 : CHARACTER SET",
"ddl_type1 : COLLATION",
"ddl_type2 : COLUMN",
"ddl_type2 : PARAMETER",
"ddl_subname : '.' symbol_ddl_name",
"ddl_desc : sql_string",
"ddl_desc : KW_NULL",
"select : select_expr for_update_clause lock_clause",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"lock_clause : WITH LOCK",
"lock_clause :",
"select_expr : select_expr_body order_clause rows_clause",
"column_select : select_expr_body order_clause rows_clause",
"column_singleton : select_expr_body order_clause rows_clause",
"select_expr_body : query_term",
"select_expr_body : select_expr_body UNION distinct_noise query_term",
"select_expr_body : select_expr_body UNION ALL query_term",
"query_term : query_spec",
"query_spec : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : value",
"select_item : value as_noise symbol_item_alias_name",
"as_noise : AS",
"as_noise :",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_primary",
"table_primary : table_proc",
"table_primary : derived_table",
"table_primary : '(' joined_table ')'",
"derived_table : '(' select_expr ')' as_noise correlation_name derived_column_list",
"correlation_name : symbol_table_alias_name",
"correlation_name :",
"derived_column_list : '(' alias_list ')'",
"derived_column_list :",
"alias_list : symbol_item_alias_name",
"alias_list : alias_list ',' symbol_item_alias_name",
"joined_table : cross_join",
"joined_table : natural_join",
"joined_table : qualified_join",
"cross_join : table_reference CROSS JOIN table_primary",
"natural_join : table_reference NATURAL join_type JOIN table_primary",
"qualified_join : table_reference join_type JOIN table_reference join_specification",
"join_specification : join_condition",
"join_specification : named_columns_join",
"join_condition : ON search_condition",
"named_columns_join : USING '(' column_list ')'",
"table_proc : symbol_procedure_name table_proc_inputs as_noise symbol_table_alias_name",
"table_proc : symbol_procedure_name table_proc_inputs",
"table_proc_inputs : '(' value_list ')'",
"table_proc_inputs :",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT outer_noise",
"join_type : RIGHT outer_noise",
"join_type : FULL outer_noise",
"join_type :",
"outer_noise : OUTER",
"outer_noise :",
"group_clause : GROUP BY group_by_list",
"group_clause :",
"group_by_list : group_by_item",
"group_by_list : group_by_list ',' group_by_item",
"group_by_item : value",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name extra_indices_opt",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"extra_indices_opt : INDEX '(' index_list ')'",
"extra_indices_opt :",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : value order_direction nulls_clause",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : FIRST",
"nulls_placement : LAST",
"nulls_clause : NULLS nulls_placement",
"nulls_clause :",
"rows_clause : ROWS value",
"rows_clause : ROWS value TO value",
"rows_clause :",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' value_list ')' returning_clause",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : KW_DELETE FROM table_name where_clause plan_clause order_clause rows_clause",
"delete_positioned : KW_DELETE FROM table_name cursor_clause",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause plan_clause order_clause rows_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"returning_clause : RETURNING value_list",
"returning_clause : RETURNING value_list INTO variable_list",
"returning_clause :",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' value",
"exec_udf : udf",
"blob_io : READ BLOB simple_column_name FROM simple_table_name filter_clause_io segment_clause_io",
"blob_io : INSERT BLOB simple_column_name INTO simple_table_name filter_clause_io segment_clause_io",
"filter_clause_io : FILTER FROM blob_subtype_value_io TO blob_subtype_value_io",
"filter_clause_io : FILTER TO blob_subtype_value_io",
"filter_clause_io :",
"blob_subtype_value_io : blob_subtype_io",
"blob_subtype_value_io : parameter",
"blob_subtype_io : signed_short_integer",
"segment_clause_io : MAX_SEGMENT segment_length_io",
"segment_clause_io :",
"segment_length_io : unsigned_short_integer",
"segment_length_io : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : distinct_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : singular_predicate",
"predicate : trigger_action_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"distinct_predicate : value IS DISTINCT FROM value",
"distinct_predicate : value IS NOT DISTINCT FROM value",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value KW_IN in_predicate_value",
"in_predicate : value NOT KW_IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"singular_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"trigger_action_predicate : INSERTING",
"trigger_action_predicate : UPDATING",
"trigger_action_predicate : DELETING",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : next_value_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"value : null_value",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME sec_precision_opt",
"datetime_value_expression : CURRENT_TIMESTAMP sec_precision_opt",
"sec_precision_opt : '(' nonneg_short_integer ')'",
"sec_precision_opt :",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT_NUMBER",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CURRENT_CONNECTION",
"internal_info : CURRENT_TRANSACTION",
"internal_info : GDSCODE",
"internal_info : SQLCODE",
"internal_info : ROW_COUNT",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"numeric_value_function : extract_expression",
"numeric_value_function : length_expression",
"extract_expression : EXTRACT '(' timestamp_part FROM value ')'",
"length_expression : bit_length_expression",
"length_expression : char_length_expression",
"length_expression : octet_length_expression",
"bit_length_expression : BIT_LENGTH '(' value ')'",
"char_length_expression : CHAR_LENGTH '(' value ')'",
"char_length_expression : CHARACTER_LENGTH '(' value ')'",
"octet_length_expression : OCTET_LENGTH '(' value ')'",
"string_value_function : substring_function",
"string_value_function : trim_function",
"string_value_function : KW_UPPER '(' value ')'",
"string_value_function : KW_LOWER '(' value ')'",
"substring_function : SUBSTRING '(' value FROM value string_length_opt ')'",
"string_length_opt : FOR value",
"string_length_opt :",
"trim_function : TRIM '(' trim_specification value FROM value ')'",
"trim_function : TRIM '(' value FROM value ')'",
"trim_function : TRIM '(' trim_specification FROM value ')'",
"trim_function : TRIM '(' value ')'",
"trim_specification : BOTH",
"trim_specification : TRAILING",
"trim_specification : LEADING",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' value AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : IIF '(' search_condition ',' value ',' value ')'",
"case_abbreviation : COALESCE '(' value ',' value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : value",
"next_value_expression : NEXT KW_VALUE FOR symbol_generator_name",
"next_value_expression : GEN_ID '(' symbol_generator_name ',' value ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"distinct_noise : DISTINCT",
"distinct_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : valid_symbol_name",
"symbol_character_set_name : valid_symbol_name",
"symbol_collation_name : valid_symbol_name",
"symbol_column_name : valid_symbol_name",
"symbol_constraint_name : valid_symbol_name",
"symbol_cursor_name : valid_symbol_name",
"symbol_domain_name : valid_symbol_name",
"symbol_exception_name : valid_symbol_name",
"symbol_filter_name : valid_symbol_name",
"symbol_gdscode_name : valid_symbol_name",
"symbol_generator_name : valid_symbol_name",
"symbol_index_name : valid_symbol_name",
"symbol_item_alias_name : valid_symbol_name",
"symbol_label_name : valid_symbol_name",
"symbol_ddl_name : valid_symbol_name",
"symbol_procedure_name : valid_symbol_name",
"symbol_role_name : valid_symbol_name",
"symbol_table_alias_name : valid_symbol_name",
"symbol_table_name : valid_symbol_name",
"symbol_trigger_name : valid_symbol_name",
"symbol_user_name : valid_symbol_name",
"symbol_variable_name : valid_symbol_name",
"symbol_view_name : valid_symbol_name",
"symbol_savepoint_name : valid_symbol_name",
"valid_symbol_name : SYMBOL",
"valid_symbol_name : non_reserved_word",
"non_reserved_word : ACTION",
"non_reserved_word : CASCADE",
"non_reserved_word : FREE_IT",
"non_reserved_word : RESTRICT",
"non_reserved_word : ROLE",
"non_reserved_word : TYPE",
"non_reserved_word : KW_BREAK",
"non_reserved_word : KW_DESCRIPTOR",
"non_reserved_word : SUBSTRING",
"non_reserved_word : COALESCE",
"non_reserved_word : LAST",
"non_reserved_word : LEAVE",
"non_reserved_word : LOCK",
"non_reserved_word : NULLIF",
"non_reserved_word : NULLS",
"non_reserved_word : STATEMENT",
"non_reserved_word : INSERTING",
"non_reserved_word : UPDATING",
"non_reserved_word : DELETING",
"non_reserved_word : FIRST",
"non_reserved_word : SKIP",
"non_reserved_word : BLOCK",
"non_reserved_word : BACKUP",
"non_reserved_word : KW_DIFFERENCE",
"non_reserved_word : IIF",
"non_reserved_word : SCALAR_ARRAY",
"non_reserved_word : WEEKDAY",
"non_reserved_word : YEARDAY",
"non_reserved_word : SEQUENCE",
"non_reserved_word : NEXT",
"non_reserved_word : RESTART",
"non_reserved_word : COLLATION",
"non_reserved_word : RETURNING",
"non_reserved_word : KW_IGNORE",
"non_reserved_word : LIMBO",
"non_reserved_word : UNDO",
"non_reserved_word : REQUESTS",
"non_reserved_word : TIMEOUT",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, n) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, n) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous);

int  YYLex1(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous);
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);




/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
	for (const TOK* token = KEYWORD_getTokens(); token->tok_string; ++token)
	{
		DSQL_SYM symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) dsql_sym;
		symbol->sym_string = (TEXT *) token->tok_string;
		symbol->sym_length = strlen(token->tok_string);
		symbol->sym_type = SYM_keyword;
		symbol->sym_keyword = token->tok_ident;
		symbol->sym_version = token->tok_version;
		dsql_str* str = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) dsql_str;
		str->str_length = symbol->sym_length;
		strncpy((char*)str->str_data, (char*)symbol->sym_string, symbol->sym_length);
		symbol->sym_object = (void *) str;
		HSHD_insert(symbol);
	}
}


void LEX_string (
	const TEXT* string,
	USHORT	length,
	SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

	lex.line_start = lex.ptr = string;
	lex.end = string + length;
	lex.lines = 1;
	lex.att_charset = character_set;
	lex.line_start_bk = lex.line_start;
	lex.lines_bk = lex.lines;
	lex.param_number = 1;
	lex.prev_keyword = -1;
#ifdef DSQL_DEBUG
	if (DSQL_debug & 32)
		dsql_trace("Source DSQL string:\n%.*s", (int)length, string);
#endif
}


static const TEXT* lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

	return lex.ptr;
}


#ifdef NOT_USED_OR_REPLACED
static bool long_int(dsql_nod* string,
					 SLONG *long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/

	for (const UCHAR* p = (UCHAR*)((dsql_str*) string)->str_data; 
		 classes[*p] & CHR_DIGIT; p++)
	{
		if (!(classes[*p] & CHR_DIGIT)) {
			return false;
		}
	}

	*long_value = atol(((dsql_str*) string)->str_data);

	return true;
}
#endif

static dsql_fld* make_field (dsql_nod* field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	if (field_name == NULL)
	{
		dsql_fld* field =
			FB_NEW_RPT(*tdsql->getDefaultPool(), sizeof (INTERNAL_FIELD_NAME)) dsql_fld;
		strcpy (field->fld_name, INTERNAL_FIELD_NAME);
		return field;
	}
	const dsql_str* string = (dsql_str*) field_name->nod_arg[1];
	dsql_fld* field =
		FB_NEW_RPT(*tdsql->getDefaultPool(), strlen ((SCHAR*) string->str_data)) dsql_fld;
	strcpy (field->fld_name, (TEXT*) string->str_data);

	return field;
}


static dsql_fil* make_file()
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();
		   
	dsql_fil* temp_file = FB_NEW(*tdsql->getDefaultPool()) dsql_fil;

	return temp_file;
}


static dsql_nod* make_list (dsql_nod* node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	if (node)
	{
		DsqlNodStack stack;
		stack_nodes(node, stack);
		USHORT l = stack.getCount();

		const dsql_nod* old = node;
		node = FB_NEW_RPT(*tdsql->getDefaultPool(), l) dsql_nod;
		node->nod_count = l;
		node->nod_type = nod_list;
		node->nod_line = (USHORT) lex.lines_bk;
		node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
		if (MemoryPool::blk_type(old) == dsql_type_nod)
		{
			node->nod_flags = old->nod_flags;
		}
		dsql_nod** ptr = node->nod_arg + node->nod_count;

		while (stack.hasData())
			*--ptr = stack.pop();
	}

	return node;
}


static dsql_nod* make_parameter (void)
{
/**************************************
 *
 *	m a k e _ p a r a m e t e r
 *
 **************************************
 *
 * Functional description
 *	Make parameter node
 *	Any change should also be made to function below
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), 1) dsql_nod;
	node->nod_type = nod_parameter;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = 1;
	node->nod_arg[0] = (dsql_nod*)(IPTR) lex.param_number++;

	return node;
}


static dsql_nod* make_node (NOD_TYPE	type,
						   int count,
						   ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), count) dsql_nod;
	node->nod_type = type;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = count;
	dsql_nod** p = node->nod_arg;
	va_list	ptr;
	va_start (ptr, count);

	while (--count >= 0)
		*p++ = va_arg (ptr, dsql_nod*);

	va_end(ptr);
	return node;
}


static dsql_nod* make_flag_node (NOD_TYPE	type,
								SSHORT	flag,
								int		count,
								...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), count) dsql_nod;
	node->nod_type = type;
	node->nod_flags = flag;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = count;
	dsql_nod** p = node->nod_arg;
	va_list	ptr;
	va_start (ptr, count);

	while (--count >= 0)
		*p++ = va_arg (ptr, dsql_nod*);

	va_end(ptr);
	return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
#ifdef DSQL_DEBUG
	DSQL_debug = level;
#endif
	if (level >> 8)
		*yydeb = level >> 8;
}

#ifdef NOT_USED_OR_REPLACED
static bool short_int(dsql_nod* string,
					  SLONG *long_value,
					  SSHORT range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/

	if (((dsql_str*) string)->str_length > 5) {
		return false;
	}

	for (UCHAR* p = (UCHAR*)((dsql_str*) string)->str_data; 
		classes[*p] & CHR_DIGIT; p++)
	{
		if (!(classes[*p] & CHR_DIGIT)) {
			return false;
		}
	}

	/* there are 5 or fewer digits, it's value may still be greater
	 * than 32767... */

	SCHAR buf[10];	
	buf[0] = ((dsql_str*) string)->str_data[0];
	buf[1] = ((dsql_str*) string)->str_data[1];
	buf[2] = ((dsql_str*) string)->str_data[2];
	buf[3] = ((dsql_str*) string)->str_data[3];
	buf[4] = ((dsql_str*) string)->str_data[4];
	buf[5] = '\0';

	*long_value = atoi (buf);

	bool return_value;

	switch (range) 
	{
		case POSITIVE:
			return_value = *long_value > SHRT_POS_MAX;
			break;
		case NEGATIVE:
			return_value = *long_value > SHRT_NEG_MAX;
			break;
		case UNSIGNED:
			return_value = *long_value > SHRT_UNSIGNED_MAX;
			break;
	}
	return !return_value;
}
#endif

static void stack_nodes (dsql_nod*	node,
						 DsqlNodStack& stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
	if (node->nod_type != nod_list)
	{
		stack.push(node);
		return;
	}

	/* To take care of cases where long lists of nodes are in a chain
	   of list nodes with exactly one entry, this algorithm will look
	   for a pattern of repeated list nodes with two entries, the first
	   being a list node and the second being a non-list node.   Such
	   a list will be reverse linked, and then re-reversed, stacking the
	   non-list nodes in the process.   The purpose of this is to avoid
	   massive recursion of this function. */

	dsql_nod* start_chain = node;
	dsql_nod* end_chain = NULL;
	dsql_nod* curr_node = node;
	dsql_nod* next_node = node->nod_arg[0];
	while ( curr_node->nod_count == 2 &&
			curr_node->nod_arg[0]->nod_type == nod_list &&
			curr_node->nod_arg[1]->nod_type != nod_list &&
			next_node->nod_arg[0]->nod_type == nod_list &&
			next_node->nod_arg[1]->nod_type != nod_list)
	{

		/* pattern was found so reverse the links and go to next node */

		dsql_nod* save_link = next_node->nod_arg[0];
		next_node->nod_arg[0] = curr_node;
		curr_node = next_node;
		next_node = save_link;
		end_chain = curr_node;
	}

	/* see if any chain was found */

	if (end_chain)
	{

		/* first, handle the rest of the nodes */
		/* note that next_node still points to the first non-pattern node */

		stack_nodes (next_node, stack);

		/* stack the non-list nodes and reverse the chain on the way back */
		
		curr_node = end_chain;
		while (true)
		{
			stack.push(curr_node->nod_arg[1]);
			if ( curr_node == start_chain)
				break;
			dsql_nod* save_link = curr_node->nod_arg[0];
			curr_node->nod_arg[0] = next_node;
			next_node = curr_node;
			curr_node = save_link;
		}
		return;
	}

	dsql_nod** ptr = node->nod_arg;
	for (const dsql_nod* const* const end = ptr + node->nod_count; ptr < end; ptr++)
		stack_nodes (*ptr, stack);
}

inline static int yylex (
	USHORT	client_dialect,
	USHORT	db_dialect,
	USHORT	parser_version,
	bool* stmt_ambiguous)
{
	lex.prev_keyword =
		lex.yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
	return lex.prev_keyword;
}

int LexerState::yylex (
	USHORT	client_dialect,
	USHORT	db_dialect,
	USHORT	parser_version,
	bool* stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
	UCHAR	tok_class;
	char  string[MAX_TOKEN_LEN];
	SSHORT	c;

	/* Find end of white space and skip comments */

	for (;;)
	{
		if (ptr >= end)
			return -1;

		c = *ptr++;

		/* Process comments */

		if (c == '\n') {
			lines++;
			line_start = ptr;
			continue;
		}

		if ((c == '-') && (*ptr == '-'))
		{
			
			/* single-line */
			
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr /* + 1*/; /* CVC: +1 left out. */
					break;
				}
			}
			if (ptr >= end)
				return -1;
			continue;
		}
		else if ((c == '/') && (*ptr == '*'))
		{
			
			/* multi-line */
			
			const TEXT& start_block = ptr[-1];
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '*') {
					if (*ptr == '/')
						break;
				}
				if (c == '\n') {
					lines++;
					line_start = ptr /* + 1*/; /* CVC: +1 left out. */

				}
			}
			if (ptr >= end)
			{
				// I need this to report the correct beginning of the block,
				// since it's not a token really.
				last_token = &start_block;
				yyerror("unterminated block comment");
				return -1;
			}
			ptr++;
			continue;
		}

		tok_class = classes[c];

		if (!(tok_class & CHR_WHITE))
			break;
	}

	/* Depending on tok_class of token, parse token */

	last_token = ptr - 1;

	if (tok_class & CHR_INTRODUCER)
	{
		/* The Introducer (_) is skipped, all other idents are copied
		 * to become the name of the character set
		 */
		char* p = string;
		for (; ptr < end && classes[static_cast<UCHAR>(*ptr)] & CHR_IDENT; ptr++)
		{
			if (ptr >= end)
				return -1;
			check_copy_incr(p, UPPER7(*ptr), string);
		}
		
		check_bound(p, string);
		*p = 0;

		/* make a string value to hold the name, the name 
		 * is resolved in pass1_constant */

		yylval = (dsql_nod*) (MAKE_string(string, p - string))->str_data;

		return INTRODUCER;
	}

	/* parse a quoted string, being sure to look for double quotes */

	if (tok_class & CHR_QUOTE)
	{
		char* buffer = string;
		size_t buffer_len = sizeof (string);
		const char* buffer_end = buffer + buffer_len - 1;
		char* p;
		for (p = buffer; ; ++p)
		{
			if (ptr >= end)
			{
				if (buffer != string)
					gds__free (buffer);
				yyerror("unterminated string");
				return -1;
			}
			// Care about multi-line constants and identifiers
			if (*ptr == '\n') {
				lines++;
				line_start = ptr + 1;
			}
			/* *ptr is quote - if next != quote we're at the end */
			if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
				break;
			if (p > buffer_end)
			{
				char* const new_buffer = (char*) gds__alloc (2 * buffer_len);
			/* FREE: at outer block */
				if (!new_buffer)		/* NOMEM: */
				{
					if (buffer != string)
						gds__free (buffer);
					return -1;
				}
				memcpy (new_buffer, buffer, buffer_len);
				if (buffer != string)
					gds__free (buffer);
				buffer = new_buffer;
				p = buffer + buffer_len;
				buffer_len = 2 * buffer_len;
				buffer_end = buffer + buffer_len - 1;
			}
			*p = *ptr++;
		}
		if (c == '"')
		{
			*stmt_ambiguous = true; /* string delimited by double quotes could be
					**   either a string constant or a SQL delimited
					**   identifier, therefore marks the SQL
					**   statement as ambiguous  */
			if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			{
				if (buffer != string)
					gds__free (buffer);
				yyabandon (-104, isc_invalid_string_constant);
			}
			else if (client_dialect >= SQL_DIALECT_V6)
			{
				if ((p - buffer) >= MAX_TOKEN_LEN)
				{
					if (buffer != string)
						gds__free (buffer);
					yyabandon (-104, isc_token_too_long);
				}
				yylval = (dsql_nod*) MAKE_string(buffer, p - buffer);
				dsql_str* delimited_id_str = (dsql_str*) yylval;
				delimited_id_str->str_flags |= STR_delimited_id;
				if (buffer != string)
					gds__free (buffer);
				return SYMBOL;
			}
		}
		yylval = (dsql_nod*) MAKE_string(buffer, p - buffer);
		if (buffer != string)
			gds__free (buffer);
		return STRING;
	}
												 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

	fb_assert(ptr <= end);

	if ((tok_class & CHR_DIGIT) ||
		((c == '.') && (ptr < end) && (classes[static_cast<UCHAR>(*ptr)] & CHR_DIGIT)))
	{
		/* The following variables are used to recognize kinds of numbers. */

		bool have_error	 = false;	/* syntax error or value too large */
		bool have_digit	 = false;	/* we've seen a digit			  */
		bool have_decimal   = false;	/* we've seen a '.'				*/
		bool have_exp	   = false;	/* digit ... [eE]				  */
		bool have_exp_sign  = false; /* digit ... [eE] {+-]			 */
		bool have_exp_digit = false; /* digit ... [eE] ... digit		*/
		UINT64	number		 = 0;
		UINT64	limit_by_10	= MAX_SINT64 / 10;

		for (--ptr ; ptr < end ; ptr++)
		{
			c = *ptr;
			if (have_exp_digit && (! (classes[c]  & CHR_DIGIT)))
				/* First non-digit after exponent and digit terminates
				 the token. */
				break;
			else if (have_exp_sign && (! (classes[c]  & CHR_DIGIT)))
			{
				/* only digits can be accepted after "1E-" */
				have_error = true;
				break;
			}
			else if (have_exp)
			{
				/* We've seen e or E, but nothing beyond that. */
				if ( ('-' == c) || ('+' == c) )
					have_exp_sign = true;
				else if ( classes[c]  & CHR_DIGIT )
					/* We have a digit: we haven't seen a sign yet,
					but it's too late now. */
					have_exp_digit = have_exp_sign  = true;
				else
				{
					/* end of the token */
					have_error = true;
					break;
				}
			}
			else if ('.' == c)
			{
				if (!have_decimal)
					have_decimal = true;
				else
				{
					have_error = true;
					break;
				}
			}
			else if (classes[c] & CHR_DIGIT)
			{
				/* Before computing the next value, make sure there will be
				   no overflow.  */

				have_digit = true;

				if (number >= limit_by_10)
				{
				/* possibility of an overflow */
					if ((number > limit_by_10) || (c > '8'))
					{
						have_error = true;
						break;
					}
				}
				number = number * 10 + (c - '0');
			}
			else if ( (('E' == c) || ('e' == c)) && have_digit )
				have_exp = true;
			else
				/* Unexpected character: this is the end of the number. */
				break;
		}

		/* We're done scanning the characters: now return the right kind
		   of number token, if any fits the bill. */

		if (!have_error)
		{
			fb_assert(have_digit);

			if (have_exp_digit)
			{
				yylval = (dsql_nod*) MAKE_string(last_token, ptr - last_token);
				last_token_bk = last_token;
				line_start_bk = line_start;
				lines_bk = lines;

				return FLOAT_NUMBER;
			}
			else if (!have_exp)
			{

				/* We should return some kind (scaled-) integer type
				   except perhaps in dialect 1. */

				if (!have_decimal && (number <= MAX_SLONG))
				{
					yylval = (dsql_nod*) (IPTR) number;
					return NUMBER;
				}
				else
				{
					/* We have either a decimal point with no exponent
					   or a string of digits whose value exceeds MAX_SLONG:
					   the returned type depends on the client dialect,
					   so warn of the difference if the client dialect is
					   SQL_DIALECT_V6_TRANSITION.
					*/

					if (SQL_DIALECT_V6_TRANSITION == client_dialect)
					{
						/* Issue a warning about the ambiguity of the numeric
						 * numeric literal.  There are multiple calls because
						 * the message text exceeds the 119-character limit
						 * of our message database.
						 */
						ERRD_post_warning( isc_dsql_warning_number_ambiguous,
							   isc_arg_string,
							   ERR_string( last_token, ptr - last_token ),
							   isc_arg_end );
						ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
							   isc_arg_end );
					}

					yylval = (dsql_nod*) MAKE_string(last_token, ptr - last_token);

					last_token_bk = last_token;
					line_start_bk = line_start;
					lines_bk = lines;

					if (client_dialect < SQL_DIALECT_V6_TRANSITION)
						return FLOAT_NUMBER;
					else if (have_decimal)
						return SCALEDINT;
					else
						return NUMBER64BIT;
				}
			} /* else if (!have_exp) */
		} /* if (!have_error) */

		/* we got some kind of error or overflow, so don't recognize this
		 * as a number: just pass it through to the next part of the lexer.
		 */
	}

	/* Restore the status quo ante, before we started our unsuccessful
	   attempt to recognize a number. */
	ptr = last_token;
	c   = *ptr++;
	/* We never touched tok_class, so it doesn't need to be restored. */

	/* end of number-recognition code */


	if (tok_class & CHR_LETTER)
	{
		char* p = string;
		check_copy_incr(p, UPPER (c), string);
		for (; ptr < end && classes[static_cast<UCHAR>(*ptr)] & CHR_IDENT; ptr++)
		{
			if (ptr >= end)
				return -1;
			check_copy_incr(p, UPPER (*ptr), string);
		}

		check_bound(p, string);
		*p = 0;
		dsql_sym* sym =
			HSHD_lookup (NULL, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
		if (sym && (sym->sym_keyword != COMMENT || prev_keyword == -1))
		{
			yylval = (dsql_nod*) sym->sym_object;
			last_token_bk = last_token;
			line_start_bk = line_start;
			lines_bk = lines;
			return sym->sym_keyword;
		}
		yylval = (dsql_nod*) MAKE_string(string, p - string);
		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;
		return SYMBOL;
	}

	/* Must be punctuation -- test for double character punctuation */

	if (last_token + 1 < end)
	{
		dsql_sym* sym =
			HSHD_lookup (NULL, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
		if (sym)
		{
			++ptr;
			return sym->sym_keyword;
		}
	}
		
	/* Single character punctuation are simply passed on */

	return c;
}


static void yyerror_detailed(const TEXT* error_string, int yychar, YYSTYPE&, YYPOSN&)
{
/**************************************
 *
 *	y y e r r o r _ d e t a i l e d
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/
	const TEXT* line_start = lex.line_start;
	SLONG lines = lex.lines;
	if (lex.last_token < lex.line_start)
	{
		line_start = lex.line_start_bk;
		lines--;
	}

	if (yychar < 1)
		ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104,
			isc_arg_gds, isc_command_end_err2,	/* Unexpected end of command */
			isc_arg_number, lines,
			isc_arg_number, (SLONG) (lex.last_token - line_start + 1),
			0);
	else
	{
		ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104,
			/* Token unknown - line %d, column %d */
			isc_arg_gds, isc_dsql_token_unk_err,
			isc_arg_number, (SLONG) lines,
			isc_arg_number, (SLONG) (lex.last_token - line_start + 1), /*CVC: +1*/
			/* Show the token */
			isc_arg_gds, isc_random,
			isc_arg_cstring, (int) (lex.ptr - lex.last_token), lex.last_token,
			0);
	}
}


// The argument passed to this function is ignored. Therefore, messages like
// "syntax error" and "yacc stack overflow" are never seen.
static void yyerror(const TEXT* error_string)
{
	YYSTYPE errt_value =  0;
	YYPOSN errt_posn = -1;
	yyerror_detailed(error_string, -1, errt_value, errt_posn);
}


static void yyabandon (SLONG		sql_code,
					   ISC_STATUS	error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

	ERRD_post (isc_sqlerr, isc_arg_number, sql_code,
		isc_arg_gds, error_symbol, 0);
}


//
// Parser function
//
int dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous) {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%p]: state %d, reading %d (%s)", 
	     yydepth, yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%p]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%p]: CONFLICT in state %d. ", 
	       yydepth, yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%p]: backtracking 1 token\n", yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%p]: state %d, shifting to state %d\n",
               yydepth, yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%p]: state %d, shifting to state %d\n",
             yydepth, yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%p]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%p]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%p]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%p]: ERROR recovery discards state %d\n",
                 yydepth, yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%p]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%p]: state %d, reducing by rule %d (%s)",
           yydepth, yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* default action - assign last argument as in standard yacc */
  yyps->val = yyvsp[1 - yym];

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
  if (!yytrial)
{ DSQL_parse = yyvsp[-1]; }
break;
case 23:
  if (!yytrial)
{ prepare_console_debug ((IPTR) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 24:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 25:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 26:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 29:
  if (!yytrial)
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
  if (!yytrial)
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 31:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 33:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 34:
  if (!yytrial)
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 35:
  if (!yytrial)
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 36:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 37:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 38:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 39:
  if (!yytrial)
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 40:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 41:
  if (!yytrial)
{ yyval = NULL; }
break;
case 42:
  if (!yytrial)
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 43:
  if (!yytrial)
{ yyval = NULL; }
break;
case 44:
  if (!yytrial)
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 45:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 47:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					make_list(yyvsp[-2]), make_list(yyvsp[0]), NULL, yyvsp[-3]); }
break;
case 48:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 49:
  if (!yytrial)
{ yyval = NULL; }
break;
case 50:
  if (!yytrial)
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 51:
  if (!yytrial)
{ yyval = NULL; }
break;
case 55:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 57:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 58:
  if (!yytrial)
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 59:
  if (!yytrial)
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 60:
  if (!yytrial)
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 61:
  if (!yytrial)
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 63:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 65:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 66:
  if (!yytrial)
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 68:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
  if (!yytrial)
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 71:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 72:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 73:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 74:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 75:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 76:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 77:
  if (!yytrial)
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 79:
  if (!yytrial)
{ lex.g_field->fld_dtype = dtype_blob; }
break;
case 80:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_cstring; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-2]; }
break;
case 81:
  if (!yytrial)
{ yyval = NULL; }
break;
case 83:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 85:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 86:
  if (!yytrial)
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
							  yyvsp[-2], yyvsp[0]); }
break;
case 87:
  if (!yytrial)
{ yyval = NULL; }
break;
case 88:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_descriptor, CONSTANT_SLONG); }
break;
case 89:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_scalar_array, CONSTANT_SLONG); }
break;
case 90:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_ref_with_null, CONSTANT_SLONG); }
break;
case 92:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 93:
  if (!yytrial)
{ yyval = make_node (nod_udf_return_value, (int) e_udf_param_count,
							  yyvsp[-2], yyvsp[0]); }
break;
case 94:
  if (!yytrial)
{ yyval = make_node (nod_udf_return_value, (int) e_udf_param_count,
				NULL, MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG));}
break;
case 95:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_reference, CONSTANT_SLONG); }
break;
case 96:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_value, CONSTANT_SLONG); }
break;
case 97:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_descriptor, CONSTANT_SLONG); }
break;
case 98:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) (-1 * Jrd::FUN_reference), CONSTANT_SLONG); }
break;
case 99:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) (-1 * Jrd::FUN_descriptor), CONSTANT_SLONG); }
break;
case 100:
  if (!yytrial)
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 101:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_STRING); }
break;
case 102:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 103:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 104:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 105:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 106:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 107:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 108:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 109:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 110:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 111:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 112:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 113:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 114:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 115:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 116:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 117:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 118:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 119:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 120:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 121:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 122:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 123:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 124:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 125:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 126:
  if (!yytrial)
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 127:
  if (!yytrial)
{ yyval = make_node (nod_redef_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 128:
  if (!yytrial)
{ yyval = make_node (nod_replace_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 129:
  if (!yytrial)
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 130:
  if (!yytrial)
{ yyval = make_node (nod_unique, 0, NULL); }
break;
case 131:
  if (!yytrial)
{ yyval = NULL; }
break;
case 132:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 134:
  if (!yytrial)
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 135:
  if (!yytrial)
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
				 yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 136:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 137:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 138:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 139:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 140:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 141:
  if (!yytrial)
{ yyval = (dsql_nod*) 0;}
break;
case 142:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 143:
  if (!yytrial)
{ yyval = NULL; }
break;
case 146:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 147:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
										  yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 148:
  if (!yytrial)
{ yyval = NULL; }
break;
case 149:
  if (!yytrial)
{ yyval = NULL; }
break;
case 150:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 152:
  if (!yytrial)
{ yyval = NULL; }
break;
case 154:
  if (!yytrial)
{ yyval = NULL; }
break;
case 156:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 157:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 160:
  if (!yytrial)
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 161:
  if (!yytrial)
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count,
					NULL, NULL, yyvsp[-2], NULL, yyvsp[0]); }
break;
case 162:
  if (!yytrial)
{ yyval = make_node (nod_def_generator, (int) e_gen_count, yyvsp[0]); }
break;
case 163:
  if (!yytrial)
{ yyval = make_node (nod_def_role, (int) 1, yyvsp[0]); }
break;
case 164:
  if (!yytrial)
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 167:
  if (!yytrial)
{ yyval = (dsql_nod*) yyvsp[0]; }
break;
case 168:
  if (!yytrial)
{yyval = NULL;}
break;
case 171:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 172:
  if (!yytrial)
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 173:
  if (!yytrial)
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 174:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 175:
  if (!yytrial)
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 176:
  if (!yytrial)
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 177:
  if (!yytrial)
{yyval = NULL;}
break;
case 180:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 182:
  if (!yytrial)
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 183:
  if (!yytrial)
{ yyval = make_node (nod_difference_file, 1, yyvsp[0]); }
break;
case 184:
  if (!yytrial)
{ lex.g_file->fil_name = (dsql_str*) yyvsp[-1];
			  yyval = (dsql_nod*) make_node (nod_file_desc, (int) 1,
						(dsql_nod*) lex.g_file); }
break;
case 185:
  if (!yytrial)
{ lex.g_file  = make_file();}
break;
case 190:
  if (!yytrial)
{ lex.g_file->fil_start = (IPTR) yyvsp[0];}
break;
case 191:
  if (!yytrial)
{ lex.g_file->fil_length = (IPTR) yyvsp[-1];}
break;
case 198:
  if (!yytrial)
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
  if (!yytrial)
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 201:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 202:
  if (!yytrial)
{ yyval = NULL; }
break;
case 204:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 207:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 208:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
  if (!yytrial)
{ 
			lex.g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 213:
  if (!yytrial)
{ yyval = NULL; }
break;
case 214:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
											yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 215:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 216:
  if (!yytrial)
{ yyval = NULL; }
break;
case 217:
  if (!yytrial)
{ lex.g_field_name = yyvsp[0];
			  lex.g_field = make_field (yyvsp[0]);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 218:
  if (!yytrial)
{ lex.g_field = make_field (yyvsp[0]);
				  yyval = (dsql_nod*) lex.g_field; }
break;
case 219:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 220:
  if (!yytrial)
{ lex.g_field = make_field (NULL);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 227:
  if (!yytrial)
{ yyval = NULL; }
break;
case 230:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 231:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
  if (!yytrial)
{ yyval = make_node (nod_foreign, (int) e_for_count,
						make_node (nod_list, (int) 1, lex.g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 235:
  if (!yytrial)
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 236:
  if (!yytrial)
{ yyval = make_node (nod_primary, (int) e_pri_count, NULL, yyvsp[0]); }
break;
case 237:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 238:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 239:
  if (!yytrial)
{ yyval = NULL ;}
break;
case 244:
  if (!yytrial)
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 245:
  if (!yytrial)
{ yyval = make_node (nod_primary, (int) e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 246:
  if (!yytrial)
{ yyval = make_node (nod_foreign, (int) e_for_count, yyvsp[-5], yyvsp[-3], 
					 yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 247:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 248:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 249:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 250:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 251:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 252:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 253:
  if (!yytrial)
{ yyval = NULL;}
break;
case 254:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 255:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 256:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, (int) e_ref_trig_action_count, NULL);}
break;
case 257:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, (int) e_ref_trig_action_count, NULL);}
break;
case 258:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, (int) e_ref_trig_action_count, NULL);}
break;
case 259:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, (int) e_ref_trig_action_count, NULL);}
break;
case 260:
  if (!yytrial)
{ yyval = make_node (nod_def_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 261:
  if (!yytrial)
{ yyval = make_node (nod_redef_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 262:
  if (!yytrial)
{ yyval = make_node (nod_replace_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 263:
  if (!yytrial)
{ yyval = make_node (nod_mod_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 264:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 265:
  if (!yytrial)
{ yyval = NULL; }
break;
case 266:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 267:
  if (!yytrial)
{ yyval = NULL; }
break;
case 269:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 270:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-4], yyvsp[-1], yyvsp[0], NULL, NULL, NULL, NULL); }
break;
case 272:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 273:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 274:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 275:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 276:
  if (!yytrial)
{ yyval = NULL; }
break;
case 277:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 278:
  if (!yytrial)
{ yyval = NULL; }
break;
case 280:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 281:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 284:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], yyvsp[0], NULL, NULL, NULL, NULL, NULL); }
break;
case 285:
  if (!yytrial)
{ yyval = NULL; }
break;
case 286:
  if (!yytrial)
{ yyval = NULL; }
break;
case 287:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 288:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 289:
  if (!yytrial)
{ yyval = NULL; }
break;
case 290:
  if (!yytrial)
{ yyval = make_flag_node (nod_cursor, NOD_CURSOR_EXPLICIT,
				(int) e_cur_count, yyvsp[-5], yyvsp[-1], NULL, NULL); }
break;
case 293:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 294:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 295:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 296:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, NULL, NULL);}
break;
case 298:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 315:
  if (!yytrial)
{ yyval = make_node (nod_return, (int) e_rtn_count, NULL); }
break;
case 316:
  if (!yytrial)
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 321:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, yyvsp[0], NULL); }
break;
case 322:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, yyvsp[-1], yyvsp[0]); }
break;
case 323:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, NULL, NULL); }
break;
case 324:
  if (!yytrial)
{ yyval = make_node (nod_exec_sql, (int) e_exec_sql_count, yyvsp[0]); }
break;
case 325:
  if (!yytrial)
{ yyval = make_node (nod_for_select, (int) e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], yyvsp[-7]); }
break;
case 326:
  if (!yytrial)
{ yyval = make_node (nod_exec_into, (int) e_exec_into_count, yyvsp[-4], yyvsp[0], make_list (yyvsp[-2]), yyvsp[-8]); }
break;
case 327:
  if (!yytrial)
{ yyval = make_node (nod_exec_into, (int) e_exec_into_count, yyvsp[-2], 0, make_list (yyvsp[0])); }
break;
case 328:
  if (!yytrial)
{ yyval = make_node (nod_if, (int) e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 329:
  if (!yytrial)
{ yyval = make_node (nod_if, (int) e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 330:
  if (!yytrial)
{ yyval = make_node (nod_post, (int) e_pst_count, yyvsp[-1], yyvsp[0]); }
break;
case 331:
  if (!yytrial)
{ yyval = NULL; }
break;
case 332:
  if (!yytrial)
{ yyval = make_node (nod_for_select, (int) e_flp_count, yyvsp[-2],
					  make_list (yyvsp[0]), NULL, NULL); }
break;
case 333:
  if (!yytrial)
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 336:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 337:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 338:
  if (!yytrial)
{ yyval = make_node (nod_while, (int) e_while_count, yyvsp[-3], yyvsp[0], yyvsp[-6]); }
break;
case 339:
  if (!yytrial)
{ yyval = make_node (nod_label, (int) e_label_count, yyvsp[-1], NULL); }
break;
case 340:
  if (!yytrial)
{ yyval = NULL; }
break;
case 341:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count, NULL); }
break;
case 342:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count, NULL); }
break;
case 343:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count,
				make_node (nod_label, (int) e_label_count, yyvsp[0], NULL)); }
break;
case 344:
  if (!yytrial)
{ yyval = make_flag_node (nod_cursor, NOD_CURSOR_FOR,
				(int) e_cur_count, yyvsp[0], NULL, NULL, NULL); }
break;
case 345:
  if (!yytrial)
{ yyval = NULL; }
break;
case 347:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 348:
  if (!yytrial)
{ yyval = make_node (nod_on_error, (int) e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 350:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 351:
  if (!yytrial)
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 352:
  if (!yytrial)
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 353:
  if (!yytrial)
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 354:
  if (!yytrial)
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 358:
  if (!yytrial)
{ yyval = make_node (nod_cursor_open, (int) e_cur_stmt_count, yyvsp[0], NULL, NULL); }
break;
case 359:
  if (!yytrial)
{ yyval = make_node (nod_cursor_close, (int) e_cur_stmt_count, yyvsp[0], NULL, NULL); }
break;
case 360:
  if (!yytrial)
{ yyval = make_node (nod_cursor_fetch, (int) e_cur_stmt_count, yyvsp[-2], yyvsp[-3], make_list (yyvsp[0])); }
break;
case 361:
  if (!yytrial)
{ yyval = NULL; }
break;
case 362:
  if (!yytrial)
{ yyval = make_node (nod_exec_procedure, (int) e_exe_count,
					yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 363:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 364:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 365:
  if (!yytrial)
{ yyval = NULL; }
break;
case 366:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 367:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 368:
  if (!yytrial)
{ yyval = NULL; }
break;
case 369:
  if (!yytrial)
{ yyval = make_node (nod_exec_block,
						  (int) e_exe_blk_count, 
					          yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 370:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 371:
  if (!yytrial)
{ yyval = NULL; }
break;
case 373:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 374:
  if (!yytrial)
{ yyval = make_node (nod_param_val, e_prm_val_count, yyvsp[-2], yyvsp[0]); }
break;
case 375:
  if (!yytrial)
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 376:
  if (!yytrial)
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 377:
  if (!yytrial)
{ lex.beginning = lex_position(); }
break;
case 378:
  if (!yytrial)
{ lex.beginning = lex.last_token; }
break;
case 379:
  if (!yytrial)
{ yyval = (dsql_nod*) MAKE_string(lex.beginning,
					lex_position() - lex.beginning); }
break;
case 380:
  if (!yytrial)
{ yyval = (dsql_nod*) MAKE_string(lex.beginning, 
					(yychar <= 0 ? lex_position() : lex.last_token) - lex.beginning); 
			}
break;
case 381:
  if (!yytrial)
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 382:
  if (!yytrial)
{ yyval = 0; }
break;
case 383:
  if (!yytrial)
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 384:
  if (!yytrial)
{ yyval = make_node (nod_redef_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 385:
  if (!yytrial)
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 386:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 387:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 388:
  if (!yytrial)
{ yyval = NULL; }
break;
case 389:
  if (!yytrial)
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 390:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 391:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 392:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 0, 0), CONSTANT_SLONG); }
break;
case 393:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 0, 0), CONSTANT_SLONG); }
break;
case 394:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 0, 0), CONSTANT_SLONG); }
break;
case 395:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 2, 0), CONSTANT_SLONG); }
break;
case 396:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 3, 0), CONSTANT_SLONG); }
break;
case 397:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 1, 0), CONSTANT_SLONG); }
break;
case 398:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 3, 0), CONSTANT_SLONG); }
break;
case 399:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 1, 0), CONSTANT_SLONG); }
break;
case 400:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 2, 0), CONSTANT_SLONG); }
break;
case 401:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 2, 3), CONSTANT_SLONG); }
break;
case 402:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 3, 2), CONSTANT_SLONG); }
break;
case 403:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 1, 3), CONSTANT_SLONG); }
break;
case 404:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 3, 1), CONSTANT_SLONG); }
break;
case 405:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 1, 2), CONSTANT_SLONG); }
break;
case 406:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 2, 1), CONSTANT_SLONG); }
break;
case 407:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 408:
  if (!yytrial)
{ yyval = NULL; }
break;
case 409:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) e_trg_act_count, yyvsp[-1], yyvsp[0]); }
break;
case 410:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 411:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 412:
  if (!yytrial)
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 413:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 414:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 415:
  if (!yytrial)
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 416:
  if (!yytrial)
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
										  yyvsp[-1], make_list (yyvsp[0])); }
break;
case 417:
  if (!yytrial)
{ yyval = make_node (nod_mod_index, (int) e_mod_idx_count, yyvsp[0]); }
break;
case 418:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 419:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 421:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 422:
  if (!yytrial)
{ yyval = make_node (nod_def_default, (int) e_dft_count, yyvsp[-1], yyvsp[0]); }
break;
case 423:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 424:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 425:
  if (!yytrial)
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 426:
  if (!yytrial)
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 427:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 428:
  if (!yytrial)
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 430:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 431:
  if (!yytrial)
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 432:
  if (!yytrial)
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 433:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 434:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 435:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 436:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 437:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-2], yyvsp[0], NULL); }
break;
case 438:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-3], NULL,
					make_node(nod_def_default, (int) e_dft_count, yyvsp[-1], yyvsp[0])); }
break;
case 439:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-2], NULL,
					make_node(nod_del_default, (int) 0, NULL)); }
break;
case 440:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 482:
  if (!yytrial)
{ yyval = NULL; }
break;
case 483:
  if (!yytrial)
{ yyval = NULL; }
break;
case 484:
  if (!yytrial)
{ yyval = NULL; }
break;
case 485:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
					yyvsp[0], NULL, NULL, NULL, NULL); }
break;
case 486:
  if (!yytrial)
{ lex.g_field_name = yyvsp[0];
			  lex.g_field = make_field (yyvsp[0]);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 487:
  if (!yytrial)
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 488:
  if (!yytrial)
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 489:
  if (!yytrial)
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 490:
  if (!yytrial)
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 491:
  if (!yytrial)
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 492:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 493:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64)); }
break;
case 494:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-4],
				make_node(nod_negate, 1, MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64))); }
break;
case 495:
  if (!yytrial)
{ yyval = make_node(nod_mod_udf, e_mod_udf_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 496:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 497:
  if (!yytrial)
{ yyval = NULL; }
break;
case 498:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 499:
  if (!yytrial)
{ yyval = NULL; }
break;
case 500:
  if (!yytrial)
{ yyval = NULL; }
break;
case 502:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 503:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 504:
  if (!yytrial)
{ yyval = make_node (nod_difference_file, (int) 1, yyvsp[0]); }
break;
case 505:
  if (!yytrial)
{ yyval = make_node (nod_drop_difference, (int) 0, NULL); }
break;
case 506:
  if (!yytrial)
{ yyval = make_node (nod_begin_backup, (int) 0, NULL); }
break;
case 507:
  if (!yytrial)
{ yyval = make_node (nod_end_backup, (int) 0, NULL); }
break;
case 508:
  if (!yytrial)
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 510:
  if (!yytrial)
{ yyval = NULL; }
break;
case 512:
  if (!yytrial)
{ yyval = NULL; }
break;
case 513:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 514:
  if (!yytrial)
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 515:
  if (!yytrial)
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 516:
  if (!yytrial)
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 517:
  if (!yytrial)
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 518:
  if (!yytrial)
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 519:
  if (!yytrial)
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 520:
  if (!yytrial)
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 521:
  if (!yytrial)
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 522:
  if (!yytrial)
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 523:
  if (!yytrial)
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 524:
  if (!yytrial)
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 525:
  if (!yytrial)
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 526:
  if (!yytrial)
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 531:
  if (!yytrial)
{ lex.g_field->fld_ranges = make_list (yyvsp[-1]);
			  lex.g_field->fld_dimensions = lex.g_field->fld_ranges->nod_count / 2;
			  lex.g_field->fld_element_dtype = lex.g_field->fld_dtype;
			  yyval = yyvsp[-3]; }
break;
case 532:
  if (!yytrial)
{ lex.g_field->fld_ranges = make_list (yyvsp[-2]);
			  lex.g_field->fld_dimensions = lex.g_field->fld_ranges->nod_count / 2;
			  lex.g_field->fld_element_dtype = lex.g_field->fld_dtype;
			  yyval = yyvsp[-4]; }
break;
case 534:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 535:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] < 1)
			 		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG),
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG));
				  else
			 		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG),
					MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 536:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((dsql_str*) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 542:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "BIGINT",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "BIGINT",
					0);
			lex.g_field->fld_dtype = dtype_int64; 
			lex.g_field->fld_length = sizeof (SINT64); 
			}
break;
case 543:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_long; 
			lex.g_field->fld_length = sizeof (SLONG); 
			}
break;
case 544:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_short; 
			lex.g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 545:
  if (!yytrial)
{ 
			*stmt_ambiguous = true;
			if (client_dialect <= SQL_DIALECT_V5)
				{
				/* Post warning saying that DATE is equivalent to TIMESTAMP */
					ERRD_post_warning (isc_sqlwarn, isc_arg_number, (SLONG) 301, 
											   isc_arg_warning, isc_dtype_renamed, 0);
				lex.g_field->fld_dtype = dtype_timestamp; 
				lex.g_field->fld_length = sizeof (GDS_TIMESTAMP);
				}
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				yyabandon (-104, isc_transitional_date);
			else
				{
				lex.g_field->fld_dtype = dtype_sql_date; 
				lex.g_field->fld_length = sizeof (ULONG);
				}
			}
break;
case 546:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			lex.g_field->fld_dtype = dtype_sql_time; 
			lex.g_field->fld_length = sizeof (SLONG);
			}
break;
case 547:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_timestamp; 
			lex.g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 550:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			}
break;
case 551:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[-1];
			lex.g_field->fld_sub_type = 0;
			}
break;
case 552:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[-3];
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 553:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = 80;
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 554:
  if (!yytrial)
{
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[0];
		  	}
break;
case 555:
  if (!yytrial)
{
			lex.g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 556:
  if (!yytrial)
{
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[0];
			}
break;
case 557:
  if (!yytrial)
{
			lex.g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 558:
  if (!yytrial)
{
			lex.g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 559:
  if (!yytrial)
{
			lex.g_field->fld_character_set = yyvsp[0];
			}
break;
case 561:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 562:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = 1; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 563:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_varying; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 564:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			}
break;
case 565:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = 1; 
			}
break;
case 566:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_varying; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			}
break;
case 575:
  if (!yytrial)
{ 
			  lex.g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 576:
  if (!yytrial)
{  
			   lex.g_field->fld_sub_type = dsc_num_type_decimal;
			   if (lex.g_field->fld_dtype == dtype_short)
				{
				lex.g_field->fld_dtype = dtype_long;
				lex.g_field->fld_length = sizeof (SLONG);
				}
			}
break;
case 577:
  if (!yytrial)
{
			lex.g_field->fld_dtype = dtype_long; 
				lex.g_field->fld_length = sizeof (SLONG); 
			lex.g_field->fld_precision = 9;
				}
break;
case 578:
  if (!yytrial)
{		 
			if ( ((IPTR) yyvsp[-1] < 1) || ((IPTR) yyvsp[-1] > 18) )
				yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((IPTR) yyvsp[-1] > 9)
				{
				if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect	 >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect	 <= SQL_DIALECT_V5) ) )
					ERRD_post (isc_sqlerr,
					   isc_arg_number, (SLONG) -817,
					   isc_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   isc_arg_number, (SLONG) db_dialect,
					   0);
				if (client_dialect <= SQL_DIALECT_V5)
					{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double);
					}
				else
					{
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
					{
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					isc_arg_end );

					}
				lex.g_field->fld_dtype = dtype_int64;
				lex.g_field->fld_length = sizeof (SINT64);
					}
				}
			else 
				if ((IPTR) yyvsp[-1] < 5)
					{
					lex.g_field->fld_dtype = dtype_short; 
					lex.g_field->fld_length = sizeof (SSHORT); 
					}
				else
					{
					lex.g_field->fld_dtype = dtype_long; 
					lex.g_field->fld_length = sizeof (SLONG); 
					}
			lex.g_field->fld_precision = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 579:
  if (!yytrial)
{ 
			if ( ((IPTR) yyvsp[-3] < 1) || ((IPTR) yyvsp[-3] > 18) )
				yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((IPTR) yyvsp[-1] > (IPTR) yyvsp[-3]) || ((IPTR) yyvsp[-1] < 0))
				yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((IPTR) yyvsp[-3] > 9)
				{
				if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect	 >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect	 <= SQL_DIALECT_V5) ) )
					ERRD_post (isc_sqlerr,
					   isc_arg_number, (SLONG) -817,
					   isc_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   isc_arg_number, (SLONG) db_dialect,
					   0);
				if (client_dialect <= SQL_DIALECT_V5)
					{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double); 
					}
				else
					{
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					isc_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				lex.g_field->fld_dtype = dtype_int64;
				lex.g_field->fld_length = sizeof (SINT64);
					}
				}
			else
				{
				if ((IPTR) yyvsp[-3] < 5)
					{
					lex.g_field->fld_dtype = dtype_short; 
					lex.g_field->fld_length = sizeof (SSHORT); 
					}
				else
					{
					lex.g_field->fld_dtype = dtype_long; 
					lex.g_field->fld_length = sizeof (SLONG); 
					}
				}
			lex.g_field->fld_precision = (USHORT)(IPTR) yyvsp[-3];
			lex.g_field->fld_scale = - (SSHORT)(IPTR) yyvsp[-1];
			}
break;
case 582:
  if (!yytrial)
{ 
			if ((IPTR) yyvsp[0] > 7)
				{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double); 
				}
			else
				{
				lex.g_field->fld_dtype = dtype_real; 
				lex.g_field->fld_length = sizeof (float);
				}
			}
break;
case 583:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_double; 
			lex.g_field->fld_length = sizeof (double); 
			}
break;
case 584:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_real; 
			lex.g_field->fld_length = sizeof (float); 
			}
break;
case 585:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_double; 
			lex.g_field->fld_length = sizeof (double); 
			}
break;
case 586:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 587:
  if (!yytrial)
{ yyval = 0; }
break;
case 591:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-2],
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 592:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-2],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64)); }
break;
case 593:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				make_node(nod_negate, 1, MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64))); }
break;
case 597:
  if (!yytrial)
{ yyval = make_node (nod_user_savepoint, 1, yyvsp[0]); }
break;
case 598:
  if (!yytrial)
{ yyval = make_node (nod_release_savepoint, 2, yyvsp[-1], yyvsp[0]); }
break;
case 599:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 600:
  if (!yytrial)
{ yyval = 0; }
break;
case 601:
  if (!yytrial)
{ yyval = make_node (nod_undo_savepoint, 1, yyvsp[0]); }
break;
case 604:
  if (!yytrial)
{ yyval = make_node (nod_commit, e_commit_count, yyvsp[0]); }
break;
case 605:
  if (!yytrial)
{ yyval = make_node (nod_rollback, e_rollback_count, yyvsp[0]); }
break;
case 608:
  if (!yytrial)
{ yyval = make_node (nod_retain, 0, NULL); }
break;
case 609:
  if (!yytrial)
{ yyval = NULL; }
break;
case 611:
  if (!yytrial)
{ yyval = NULL; }
break;
case 612:
  if (!yytrial)
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 614:
  if (!yytrial)
{ yyval = NULL; }
break;
case 616:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 623:
  if (!yytrial)
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 624:
  if (!yytrial)
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 625:
  if (!yytrial)
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 626:
  if (!yytrial)
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 627:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 629:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 630:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 631:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 632:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 633:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 634:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 635:
  if (!yytrial)
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 636:
  if (!yytrial)
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 637:
  if (!yytrial)
{ yyval = 0; }
break;
case 638:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_NO_AUTO_UNDO, 0, NULL); }
break;
case 639:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_IGNORE_LIMBO, 0, NULL); }
break;
case 640:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_RESTART_REQUESTS, 0, NULL); }
break;
case 641:
  if (!yytrial)
{ yyval = make_node(nod_lock_timeout, 1, MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 642:
  if (!yytrial)
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 643:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_SHARED; }
break;
case 644:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_PROTECTED ; }
break;
case 645:
  if (!yytrial)
{ yyval = (dsql_nod*) 0; }
break;
case 646:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_READ; }
break;
case 647:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_WRITE; }
break;
case 649:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 650:
  if (!yytrial)
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 651:
  if (!yytrial)
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT)(IPTR) yyvsp[-1] | (SSHORT)(IPTR) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 652:
  if (!yytrial)
{ yyval = 0; }
break;
case 654:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 655:
  if (!yytrial)
{ yyval = make_node (nod_set_statistics, (int) e_stat_count, yyvsp[0]); }
break;
case 656:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-2], NULL, NULL, yyvsp[0]); }
break;
case 657:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-3], yyvsp[-2], NULL, yyvsp[0]); }
break;
case 658:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[0]); }
break;
case 659:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_database, CONSTANT_SLONG); }
break;
case 660:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_domain, CONSTANT_SLONG); }
break;
case 661:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_relation, CONSTANT_SLONG); }
break;
case 662:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_view, CONSTANT_SLONG); }
break;
case 663:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_procedure, CONSTANT_SLONG); }
break;
case 664:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_trigger, CONSTANT_SLONG); }
break;
case 665:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_udf, CONSTANT_SLONG); }
break;
case 666:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_blob_filter, CONSTANT_SLONG); }
break;
case 667:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_exception, CONSTANT_SLONG); }
break;
case 668:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_generator, CONSTANT_SLONG); }
break;
case 669:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_generator, CONSTANT_SLONG); }
break;
case 670:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_index, CONSTANT_SLONG); }
break;
case 671:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_role, CONSTANT_SLONG); }
break;
case 672:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_charset, CONSTANT_SLONG); }
break;
case 673:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_collation, CONSTANT_SLONG); }
break;
case 674:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_relation, CONSTANT_SLONG); }
break;
case 675:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_procedure, CONSTANT_SLONG); }
break;
case 676:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 678:
  if (!yytrial)
{ yyval = NULL; }
break;
case 679:
  if (!yytrial)
{ yyval = make_node (nod_select, (int) e_select_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 680:
  if (!yytrial)
{ yyval = make_node (nod_for_update, (int) e_fpd_count, yyvsp[0]); }
break;
case 681:
  if (!yytrial)
{ yyval = NULL; }
break;
case 682:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 683:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 684:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 685:
  if (!yytrial)
{ yyval = NULL; }
break;
case 686:
  if (!yytrial)
{ yyval = make_node (nod_select_expr, (int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 687:
  if (!yytrial)
{ yyval = make_flag_node (nod_select_expr, NOD_SELECT_EXPR_VALUE,
					(int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 688:
  if (!yytrial)
{ yyval = make_flag_node (nod_select_expr, NOD_SELECT_EXPR_VALUE | NOD_SELECT_EXPR_SINGLETON,
					(int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 690:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 691:
  if (!yytrial)
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 693:
  if (!yytrial)
{ yyval = make_node (nod_query_spec, (int) e_qry_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 694:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 695:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, NULL, yyvsp[0]); }
break;
case 696:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, yyvsp[0], NULL); }
break;
case 697:
  if (!yytrial)
{ yyval = 0; }
break;
case 698:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 699:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 700:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 701:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 702:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 703:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 704:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 705:
  if (!yytrial)
{ yyval = 0; }
break;
case 706:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 707:
  if (!yytrial)
{ yyval = 0; }
break;
case 709:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 711:
  if (!yytrial)
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 714:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 716:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 721:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 722:
  if (!yytrial)
{ yyval = make_node(nod_derived_table, (int) e_derived_table_count, yyvsp[-4], yyvsp[-1], yyvsp[0]); }
break;
case 724:
  if (!yytrial)
{ yyval = NULL; }
break;
case 725:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 726:
  if (!yytrial)
{ yyval = NULL; }
break;
case 728:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 732:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-3],
				make_node (nod_join_inner, (int) 0, NULL), yyvsp[0], NULL); }
break;
case 733:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-4], yyvsp[-2], yyvsp[0],
					make_node (nod_flag, 0, NULL)); }
break;
case 734:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 737:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 738:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 739:
  if (!yytrial)
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-3], yyvsp[0], yyvsp[-2]); }
break;
case 740:
  if (!yytrial)
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 741:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 742:
  if (!yytrial)
{ yyval = NULL; }
break;
case 744:
  if (!yytrial)
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 745:
  if (!yytrial)
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 746:
  if (!yytrial)
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 747:
  if (!yytrial)
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 748:
  if (!yytrial)
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 749:
  if (!yytrial)
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 750:
  if (!yytrial)
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 753:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 754:
  if (!yytrial)
{ yyval = NULL; }
break;
case 756:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 758:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 759:
  if (!yytrial)
{ yyval = NULL; }
break;
case 760:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 761:
  if (!yytrial)
{ yyval = NULL; }
break;
case 762:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 763:
  if (!yytrial)
{ yyval = NULL; }
break;
case 764:
  if (!yytrial)
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 765:
  if (!yytrial)
{ yyval = 0; }
break;
case 766:
  if (!yytrial)
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 767:
  if (!yytrial)
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 768:
  if (!yytrial)
{ yyval = 0; }
break;
case 769:
  if (!yytrial)
{ yyval = 0; }
break;
case 771:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 772:
  if (!yytrial)
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 775:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 776:
  if (!yytrial)
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 777:
  if (!yytrial)
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 778:
  if (!yytrial)
{ yyval = make_node (nod_index_order, 2, yyvsp[-1], yyvsp[0]); }
break;
case 780:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 781:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 782:
  if (!yytrial)
{ yyval = 0; }
break;
case 783:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 784:
  if (!yytrial)
{ yyval = 0; }
break;
case 786:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 787:
  if (!yytrial)
{ yyval = make_node (nod_order, (int) e_order_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 788:
  if (!yytrial)
{ yyval = 0; }
break;
case 789:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 790:
  if (!yytrial)
{ yyval = 0; }
break;
case 791:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) NOD_NULLS_FIRST, CONSTANT_SLONG); }
break;
case 792:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) NOD_NULLS_LAST, CONSTANT_SLONG); }
break;
case 793:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 794:
  if (!yytrial)
{ yyval = 0; }
break;
case 795:
  if (!yytrial)
{ yyval = make_node (nod_rows, (int) e_rows_count, NULL, yyvsp[0]); }
break;
case 796:
  if (!yytrial)
{ yyval = make_node (nod_rows, (int) e_rows_count,
				make_node (nod_subtract, 2, yyvsp[-2],
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)),
				make_node (nod_add, 2,
					make_node (nod_subtract, 2, yyvsp[0], yyvsp[-2]),
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG))); }
break;
case 797:
  if (!yytrial)
{ yyval = NULL; }
break;
case 798:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) e_ins_count, 
				yyvsp[-6], make_list (yyvsp[-5]), make_list (yyvsp[-2]), NULL, yyvsp[0]); }
break;
case 799:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) e_ins_count,
				yyvsp[-2], yyvsp[-1], NULL, yyvsp[0], NULL); }
break;
case 802:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) e_del_count,
				yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 803:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) e_del_count,
				yyvsp[-1], NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 806:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) e_upd_count,
				yyvsp[-6], make_list (yyvsp[-4]), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 807:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) e_upd_count,
				yyvsp[-3], make_list (yyvsp[-1]), NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 808:
  if (!yytrial)
{ yyval = make_node (nod_returning, (int) e_ret_count,
					make_list (yyvsp[0]), NULL); }
break;
case 809:
  if (!yytrial)
{ yyval = make_node (nod_returning, (int) e_ret_count,
					make_list (yyvsp[-2]), make_list (yyvsp[0])); }
break;
case 810:
  if (!yytrial)
{ yyval = NULL; }
break;
case 811:
  if (!yytrial)
{ yyval = make_node (nod_cursor, (int) e_cur_count, yyvsp[0], NULL, NULL, NULL); }
break;
case 813:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 814:
  if (!yytrial)
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 815:
  if (!yytrial)
{ yyval = make_node (nod_assign, 2, yyvsp[0], make_node (nod_null, 0, NULL)); }
break;
case 816:
  if (!yytrial)
{ yyval = make_node (nod_get_segment, (int) e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 817:
  if (!yytrial)
{ yyval = make_node (nod_put_segment, (int) e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 818:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 819:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 820:
  if (!yytrial)
{ yyval = NULL; }
break;
case 823:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 824:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 825:
  if (!yytrial)
{ yyval = NULL; }
break;
case 826:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 829:
  if (!yytrial)
{ yyval = NULL; }
break;
case 830:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 832:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 834:
  if (!yytrial)
{ yyval = NULL; }
break;
case 835:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 837:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 839:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 840:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 841:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 843:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 845:
  if (!yytrial)
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 846:
  if (!yytrial)
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 847:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 860:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 861:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 862:
  if (!yytrial)
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 863:
  if (!yytrial)
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 864:
  if (!yytrial)
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 865:
  if (!yytrial)
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 866:
  if (!yytrial)
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 867:
  if (!yytrial)
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 868:
  if (!yytrial)
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 869:
  if (!yytrial)
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 870:
  if (!yytrial)
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 871:
  if (!yytrial)
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 872:
  if (!yytrial)
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 873:
  if (!yytrial)
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 874:
  if (!yytrial)
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 875:
  if (!yytrial)
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 876:
  if (!yytrial)
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 877:
  if (!yytrial)
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 878:
  if (!yytrial)
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 879:
  if (!yytrial)
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 880:
  if (!yytrial)
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 881:
  if (!yytrial)
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 882:
  if (!yytrial)
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 883:
  if (!yytrial)
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 884:
  if (!yytrial)
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 887:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_equiv, 2, yyvsp[-4], yyvsp[0])); }
break;
case 888:
  if (!yytrial)
{ yyval = make_node (nod_equiv, 2, yyvsp[-5], yyvsp[0]); }
break;
case 889:
  if (!yytrial)
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 890:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 891:
  if (!yytrial)
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 892:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 893:
  if (!yytrial)
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 894:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 895:
  if (!yytrial)
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 896:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 897:
  if (!yytrial)
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 898:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 899:
  if (!yytrial)
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 900:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 901:
  if (!yytrial)
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 902:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 903:
  if (!yytrial)
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 904:
  if (!yytrial)
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 905:
  if (!yytrial)
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 906:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 907:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)); }
break;
case 908:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 2, CONSTANT_SLONG)); }
break;
case 909:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 3, CONSTANT_SLONG)); }
break;
case 911:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 912:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 923:
  if (!yytrial)
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 924:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 925:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
				  yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 926:
  if (!yytrial)
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 927:
  if (!yytrial)
{ yyval = make_node (nod_collate, (int) e_coll_count, (dsql_nod*) yyvsp[0], yyvsp[-2]); }
break;
case 928:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
				  yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 929:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				   yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
				   yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 930:
  if (!yytrial)
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
				  yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 931:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 932:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 936:
  if (!yytrial)
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 937:
  if (!yytrial)
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 938:
  if (!yytrial)
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
						}
break;
case 941:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "DATE",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "DATE",
					0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 942:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			yyval = make_node (nod_current_time, 1, yyvsp[0]);
			}
break;
case 943:
  if (!yytrial)
{ yyval = make_node (nod_current_timestamp, 1, yyvsp[0]); }
break;
case 944:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[-1], CONSTANT_SLONG); }
break;
case 945:
  if (!yytrial)
{ yyval = NULL; }
break;
case 946:
  if (!yytrial)
{ yyval = make_node (nod_array, (int) e_ary_count, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 948:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 950:
  if (!yytrial)
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 951:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_STRING); }
break;
case 952:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 953:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 954:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SINT64); }
break;
case 955:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SINT64); }
break;
case 957:
  if (!yytrial)
{ yyval = MAKE_str_constant ((dsql_str*) yyvsp[0], lex.att_charset); }
break;
case 958:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "DATE",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "DATE",
					0);
			yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_DATE);
			}
break;
case 959:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_TIME);
			}
break;
case 960:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 961:
  if (!yytrial)
{ yyval = make_parameter (); }
break;
case 962:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 963:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 964:
  if (!yytrial)
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 965:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_connection_id, CONSTANT_SLONG)); }
break;
case 966:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 967:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_gdscode, CONSTANT_SLONG)); }
break;
case 968:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 969:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 970:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 971:
  if (!yytrial)
{ ((dsql_str*) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 973:
  if (!yytrial)
{ yyval = (dsql_nod*) - (IPTR) yyvsp[0]; }
break;
case 974:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_POS_MAX)
				yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 975:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_NEG_MAX)
				yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 976:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] == 0)
				yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 977:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_UNSIGNED_MAX)
				yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 979:
  if (!yytrial)
{ yyval = (dsql_nod*) - (IPTR) yyvsp[0]; }
break;
case 980:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 984:
  if (!yytrial)
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 985:
  if (!yytrial)
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 986:
  if (!yytrial)
{ yyval = make_flag_node (nod_agg_count,
									   NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 987:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
				  yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 988:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
				  yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 989:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
				  yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 990:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
				  yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 991:
  if (!yytrial)
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 992:
  if (!yytrial)
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 993:
  if (!yytrial)
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 994:
  if (!yytrial)
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 997:
  if (!yytrial)
{ yyval = make_node (nod_extract, (int) e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 1001:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_bit, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1002:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_char, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1003:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_char, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1004:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_octet, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1007:
  if (!yytrial)
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 1008:
  if (!yytrial)
{ yyval = make_node (nod_lowcase, 1, yyvsp[-1]); }
break;
case 1009:
  if (!yytrial)
{ yyval = make_node (nod_substr, (int) e_substr_count, yyvsp[-4],
				make_node (nod_subtract, 2, yyvsp[-2],
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)), yyvsp[-1]); }
break;
case 1010:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 1011:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) SHRT_POS_MAX, CONSTANT_SLONG); }
break;
case 1012:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, yyvsp[-4], yyvsp[-3], yyvsp[-1]); }
break;
case 1013:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, 
				MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG), yyvsp[-3], yyvsp[-1]); }
break;
case 1014:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, yyvsp[-3], NULL, yyvsp[-1]); }
break;
case 1015:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count,
				MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG), NULL, yyvsp[-1]); }
break;
case 1016:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG); }
break;
case 1017:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_trailing, CONSTANT_SLONG); }
break;
case 1018:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_leading, CONSTANT_SLONG); }
break;
case 1019:
  if (!yytrial)
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 1020:
  if (!yytrial)
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 1021:
  if (!yytrial)
{ yyval = make_node (nod_cast, (int) e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 1024:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 1025:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, yyvsp[-5], yyvsp[-3]), yyvsp[-1]); }
break;
case 1026:
  if (!yytrial)
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 1029:
  if (!yytrial)
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 1030:
  if (!yytrial)
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 1031:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 1032:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 1033:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 1034:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 1035:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 1036:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 1040:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_gen_id2, 2, yyvsp[0],
						MAKE_constant((dsql_str*) 1, CONSTANT_SLONG));
			  else
				  yyval = make_node (nod_gen_id, 2, yyvsp[0],
						MAKE_constant((dsql_str*) 1, CONSTANT_SLONG));
			}
break;
case 1041:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
				  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 1042:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_year, CONSTANT_SLONG); }
break;
case 1043:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_month, CONSTANT_SLONG); }
break;
case 1044:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_day, CONSTANT_SLONG); }
break;
case 1045:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_hour, CONSTANT_SLONG); }
break;
case 1046:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_minute, CONSTANT_SLONG); }
break;
case 1047:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_second, CONSTANT_SLONG); }
break;
case 1048:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 1049:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 1054:
  if (!yytrial)
{ yyval = make_node (nod_null, 0, NULL); }
break;

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%p]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%p]: state %d, reading %d (%s)\n", 
	       yydepth, yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%p]: after reduction, shifting from state %d to state %d\n",
           yydepth, yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%p]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous) {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
