#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
    9,    9,    9,    9,   20,   20,   19,   19,   19,   30,
   30,   23,   31,   31,   31,   31,   31,   22,   22,   28,
   28,   24,   13,   13,   13,   13,   13,   13,   13,   34,
   25,   25,   25,   25,   35,   35,   35,   35,   21,   21,
   36,   36,   36,   26,   26,   41,   27,   27,   42,   42,
    6,   43,   43,   45,   50,   50,   50,   47,   47,   47,
   54,   54,   55,   55,   48,   48,   57,   57,   57,   57,
   57,   44,    5,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   12,   75,   75,   62,   62,   65,
   65,   65,   73,   84,   84,   84,   85,   85,   86,   86,
   87,   87,   91,   91,   72,   94,   94,   96,   96,   97,
   97,  100,  100,  101,  102,  102,  103,  104,   70,   74,
   71,   88,   88,  107,  108,  108,  110,  110,  111,  111,
  111,  111,  111,  109,  109,  112,  112,  113,  113,  113,
  113,  115,  115,  115,  115,  114,  114,  119,  119,  118,
   92,  120,  120,  121,  124,  125,  125,  126,  122,  123,
  123,  127,  127,  128,  128,  129,  129,  129,   90,   90,
   90,   67,   77,  130,  130,  130,  131,  131,  132,  132,
  133,  133,  133,  139,   80,   80,  135,  135,   98,   98,
   93,  143,  144,   56,  136,  136,   99,   99,   99,   99,
   99,   99,  137,  137,  151,  151,  152,  154,  154,  154,
  154,  154,  134,  153,  153,  157,  157,  157,  157,  159,
  160,  161,  156,  155,  155,  155,  155,  155,  162,  163,
  164,  164,  164,  164,   66,   76,  169,  165,  165,  166,
  166,  170,  170,  171,  167,  167,  172,  172,  173,  174,
  174,  175,  175,  176,  176,  168,  168,  168,  178,  178,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  181,  182,  183,  184,  184,
  185,  191,  187,  187,  187,  188,  188,  188,  189,  189,
  189,  189,  186,  190,  190,  179,  179,  196,  197,  197,
  198,  198,  198,  198,   11,  200,  200,  200,  201,  201,
  201,  201,  201,  201,   69,  206,  203,  207,  207,  207,
  208,  212,  217,  217,  218,  218,  219,  219,  141,  205,
   81,   83,  204,  204,   68,  222,  222,  222,  223,  226,
  226,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  224,  224,  225,    2,
  229,  229,  229,  229,  229,  229,  229,  229,  237,  238,
  235,  235,  239,  239,  239,  239,  239,  239,  239,  230,
  230,  240,  240,  240,  240,  240,  240,  240,  234,  245,
  245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
  245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
  245,  245,  245,  242,  242,  244,  244,  243,  241,  241,
  241,  236,  236,  232,  233,  233,  246,  246,  246,  246,
  247,  247,  231,  248,  248,  249,  249,    8,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
   95,   95,  138,  138,  253,  253,  256,  256,  258,  258,
   51,   51,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  263,  263,  254,  254,  254,  254,  264,  264,   59,
   59,   59,   53,   53,  260,  260,  260,  257,  257,  257,
  268,  268,  268,  267,  267,  266,  266,  266,  261,  261,
  271,  269,  269,  269,  270,  270,  262,  262,  262,  262,
  272,  272,   16,   16,   16,  274,  274,  274,    4,   14,
  276,  276,  277,  277,  278,  278,  273,  279,  279,  280,
  280,  281,  281,  281,  281,  282,  282,  283,  283,  284,
  284,  286,  286,  286,  287,  287,  287,  288,  288,  288,
  285,  290,  290,  290,  291,  291,  289,  289,  292,  294,
  294,  293,  293,  275,   15,  295,  295,  295,  296,  296,
  299,  299,  300,  300,   63,   63,   63,  297,  297,  301,
  301,  298,  210,  210,  211,  211,  304,  304,  305,  305,
  305,  302,  308,  308,  309,  309,  310,  310,  311,  311,
  312,  312,  193,  193,  314,  314,  220,  220,   29,  221,
  221,  221,  221,  221,  221,  221,  221,  315,  315,  315,
  316,  316,  316,  209,  209,  209,  209,  214,  214,  317,
  317,  318,  318,  318,  318,  318,  320,  320,  320,  215,
  215,  213,  213,  324,  324,  324,  216,  216,  325,  326,
  326,  326,  326,  326,  327,  327,  328,  328,  329,  329,
  330,  330,  330,  331,  331,   10,   10,  333,  333,    7,
    7,  334,  335,  336,   17,   17,  337,  338,  339,  339,
  180,  306,  306,    3,    3,  341,  341,  341,  343,  343,
   59,  342,  342,  344,  344,   32,   32,   79,   78,   78,
  332,  332,  345,  346,  346,  194,  194,  194,  140,  340,
  340,  105,  105,  105,  105,  348,  348,  348,  348,  348,
  348,  348,  348,  348,  348,  348,  349,  349,  349,  349,
  349,  349,  349,  349,  354,  354,  354,  354,  354,  354,
  354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
  360,  360,  350,  350,  351,  351,  351,  351,  352,  352,
  356,  356,  357,  357,  357,  357,  355,  358,  353,  353,
  361,  361,  362,  359,  364,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
   82,  150,  150,  150,  365,  363,  363,  145,  145,  369,
  369,  369,  369,  369,  367,  367,  367,  367,  367,  370,
  370,  370,  370,  370,  370,  370,  370,  370,  370,  202,
  146,  146,  147,  148,  148,   49,   49,   18,   18,  228,
  371,   52,  117,  259,  259,   89,  366,  366,  366,  366,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  373,  321,  322,  322,  322,  319,  319,  368,  323,
  323,  375,  375,  376,  376,  377,  377,  380,  380,  378,
  378,  383,  383,  382,  379,  381,  374,  374,  374,  374,
  374,  374,  374,  374,  303,  303,  149,   46,  265,  116,
  142,  347,  158,  195,  252,   61,   58,  199,  106,   64,
  307,   33,   39,  313,  251,   37,   40,  192,   38,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
    8,    6,    7,    5,    1,    2,    1,    2,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    3,
    0,    1,    7,    8,    6,    7,    6,    7,    4,    3,
    1,    3,    3,    3,    2,    2,    2,    2,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    3,    1,    2,
    2,    2,    3,    8,    1,    1,    5,    0,    1,    3,
    1,    3,    2,    4,    1,    3,    2,    3,    4,    4,
    2,    9,    2,    3,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    0,    1,
    1,    6,    6,    1,    1,    0,    0,    1,    0,    4,
    0,    1,    1,    2,    8,    1,    0,    3,    0,    0,
    1,    1,    2,    1,    1,    1,    2,    6,    1,    1,
    3,    0,    1,    1,    0,    1,    1,    2,    3,    4,
    2,    2,    3,    0,    1,    1,    2,    1,    1,    1,
    4,    3,    3,    3,    3,    1,    1,    6,    3,    1,
    3,    1,    3,    2,    1,    0,    2,    3,    1,    0,
    1,    1,    2,    3,    4,    0,    1,    2,    0,    1,
    1,    5,    5,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    2,    0,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    2,    2,    4,    1,
    1,    2,    2,    2,    0,    1,    1,    1,    1,    2,
    3,    7,    6,    1,    1,    2,    2,    0,    3,    3,
    1,    2,    2,    2,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    6,    1,
    0,    2,    1,    1,    1,    2,    3,    4,    1,    2,
    2,    2,    3,    1,    1,    1,    1,    2,    3,    1,
    2,    1,    2,    2,    2,    6,    4,    7,    8,    6,
    4,    2,    1,    3,    0,    2,    4,    0,    1,    1,
    3,    3,    6,    3,    0,    1,    2,    4,    1,    3,
    2,    2,    2,    1,    4,    1,    3,    0,    1,    1,
    1,    3,    3,    3,    7,    6,    1,    1,    3,    4,
    9,    2,    1,    3,    1,    1,    6,    3,    0,    0,
    0,    0,    3,    0,    9,    1,    1,    0,    2,    1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    5,    5,    5,    5,    5,    5,    2,    0,    4,    2,
    3,    3,    2,    2,    2,    3,    3,    2,    3,    6,
    1,    2,    4,    3,    2,    2,    2,    2,    3,    1,
    3,    3,    3,    2,    2,    4,    4,    5,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
    0,    2,    2,    0,    1,    2,    2,    2,    2,    2,
    1,    3,    7,    1,    0,    1,    0,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
    1,    1,    1,    1,    4,    5,    1,    3,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    4,    4,    6,    5,    3,    0,    2,
    2,    0,    3,    0,    4,    1,    5,    4,    1,    4,
    1,    2,    2,    1,    1,    1,    2,    2,    2,    2,
    1,    0,    3,    5,    1,    1,    2,    3,    1,    2,
    3,    0,    1,    1,    1,    5,    5,    6,    3,    2,
    1,    0,    2,    0,    1,    0,    3,    1,    0,    1,
    2,    1,    1,    1,    1,    2,    2,    1,    2,    3,
    1,    1,    3,    3,    1,    2,    3,    1,    2,    0,
    2,    1,    1,    0,    1,    1,    1,    3,    2,    3,
    0,    1,    3,    4,    3,    1,    3,    4,    3,    0,
    1,    3,    3,    3,    1,    1,    0,    3,    0,    2,
    0,    9,    1,    1,    1,    1,    1,    3,    1,    2,
    3,    2,    1,    3,    1,    1,    6,    3,    3,    2,
    3,    0,    1,    3,    1,    1,    1,    2,    1,    1,
    1,    2,    1,    2,    1,    2,    0,    2,    4,    2,
    2,    4,    2,    2,    1,    1,    0,    3,    0,    1,
    3,    1,    1,    1,    1,    3,    1,    1,    1,    2,
    0,    2,    0,    3,    5,    0,    2,    0,    4,    1,
    2,    1,    1,    0,    1,    3,    2,    1,    1,    2,
    1,    4,    2,    1,    3,    8,    5,    1,    3,    1,
    1,    4,    4,    4,    1,    1,    5,    5,    1,    3,
    3,    1,    1,    7,    7,    5,    3,    0,    1,    1,
    1,    2,    0,    1,    1,    1,    0,    3,    1,    3,
    1,    0,    3,    1,    3,    1,    3,    3,    1,    1,
    3,    1,    3,    3,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    1,    1,    5,    6,    3,    4,    5,    6,    3,    4,
    3,    4,    3,    4,    4,    5,    4,    4,    3,    4,
    1,    3,    3,    9,    9,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    3,    1,
    1,    1,    1,    1,    4,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    6,    6,    6,    8,    4,    4,    3,    6,    1,
    1,    6,    6,    1,    1,    4,    6,    4,    5,    3,
    5,    4,    5,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,  533,  534,  535,    0,  586,
  690,  691,  695,  696,  444,    0,    0,    0,    0,    0,
    0,    0,  380,  541,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  108,    0,    0,   93,    0,  860,    0,
   19,  858,    0,    0,   71,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  458,    0,
    0,   35,   32,   34,    0,   33,    0,  933,    0,    0,
    0,    0,   30,   66,   64,    0,    0,    0,    0,    0,
    0,    0,    0,  540,    0,    0,    0,    0,  646,    0,
    0,    0,  935,  627,    0,    0,    0,    0,  105,    2,
    0,    0,    0,    0,  428,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  429,  430,  431,  432,  433,    0,  409,
  926,    0,  930,    0,  388,  932,    0,  385,    0,  629,
  936,    0,  384,  939,    0,  383,    0,  539,  856,    0,
  144,  101,    0,  922,  102,    0,  211,  729,    0,  929,
  100,  139,    0,   96,    0,  103,  862,    0,   97,    0,
   98,    0,   99,  140,  104,  595,  596,    0,  861,  859,
    0,  927,   72,    0,    0,  925,  466,  459,    0,  465,
  470,  460,  461,  468,  462,  463,  464,  469,    0,   28,
    0,   37,  716,   36,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  866,    0,
  850,  638,  640,    0,  641,  643,  915,  603,    0,  604,
  644,    0,    0,    0,    0,    0,    0,    0,  558,  547,
    0,  550,  552,  553,  554,  555,  561,  562,    0,  934,
  628,    0,  106,    0,  107,    0,    0,  587,    0,  585,
    0,    0,    0,    0,  445,    0,    0,  351,    0,  214,
    0,  391,  381,  442,  443,    0,    0,    0,    0,    0,
    0,  400,    0,  356,  357,    0,    0,  545,  543,  857,
    0,    0,    0,    0,    0,    0,    0,  147,  126,    0,
   94,    0,  115,  114,    0,    0,    0,    0,    0,    0,
  918,   73,    0,    0,    0,  692,  693,  467,    0,  917,
  832,  831,  830,    0,    0,  833,  834,    0,    0,  836,
  330,  331,  325,    0,  329,  828,  835,    0,  719,    0,
    0,   25,    0,    0,  937,    0,   69,   67,   65,   31,
    0,    0,    0,  721,    0,   50,    0,    0,    0,    0,
    0,    0,    0,    0,  818,    0,    0,  820,    0,    0,
    0,  851,    0,    0,  822,  823,  824,  852,  853,    0,
  854,  855,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  726,  815,  816,  817,  821,  801,    0,  800,    0,
  804,  869,  870,  803,  797,  798,  799,  802,  867,  868,
  890,  891,  894,  895,    0,  606,    0,  703,    0,    0,
  607,    0,    0,  584,    0,  559,    0,  556,    0,  557,
  582,    0,  577,    0,    0,  551,    0,  730,  699,    0,
    0,    0,    0,    0,  521,    0,    0,    0,  591,    0,
  588,    0,  179,    0,    0,  123,  450,  166,  167,    0,
  448,    0,    0,    0,    0,  451,    0,  446,    0,    0,
  395,  397,  396,    0,  398,    0,  392,  212,    0,    0,
  262,    0,    0,    0,    0,  404,  405,    0,  435,    0,
    0,    0,    0,    0,    0,    0,  361,  360,  454,    0,
    0,  349,  143,    0,    0,  152,    0,  151,    0,  158,
  141,    0,  156,  159,  160,  148,    0,    0,  489,  525,
  492,    0,  526,    0,    0,  493,    0,    0,    0,  516,
  529,  488,  511,  490,  491,  486,  473,  351,  471,  472,
  474,    0,    0,  483,  484,  485,  487,    0,    0,    0,
    0,    0,  118,    0,    0,  195,    0,    0,  349,    0,
  214,    0,    0,   81,    0,    0,  711,    0,    0,    0,
    0,    0,    0,    0,    0,  732,  736,  737,  738,  739,
  740,  741,  742,  743,  744,  745,  837,  838,  839,  829,
    0,    0,    0,  718,   26,    0,    0,   42,   70,    0,
    0,   24,    0,  724,    0,    0,  687,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  938,  302,    0,    0,    0,    0,    0,
    0,    0,  639,    0,    0,  642,    0,    0,    0,    0,
  931,  610,  537,    0,  864,  536,    0,  560,    0,  568,
  564,  563,    0,    0,    0,  579,  567,    0,    0,  697,
  698,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  598,    0,    0,  124,    0,    0,    0,    0,    0,    0,
  351,  394,    0,  351,  352,  399,  481,    0,  264,    0,
  258,  260,  349,  923,  234,    0,    0,  351,    0,    0,
  203,  349,    0,    0,    0,    0,  239,  233,  236,  237,
  238,  403,  440,  439,  402,  401,    0,    0,    0,    0,
    0,    0,  359,    0,  351,    0,    0,  149,  153,    0,
  157,    0,    0,  512,  513,  530,    0,  527,    0,    0,
  519,  517,  518,    0,    0,    0,    0,  482,    0,    0,
    0,    0,  520,  349,    0,  194,    0,  197,  199,  200,
    0,    0,    0,    0,    0,  214,   76,    0,    0,   75,
  919,  500,  501,    0,    0,    0,  735,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  327,  333,  334,
  332,  720,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   59,   61,    0,    0,   68,    0,    0,    0,  723,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  907,  908,  909,  910,  911,  912,  913,  914,    0,
    0,    0,    0,    0,    0,  900,    0,    0,    0,  625,
    0,    0,  813,  814,  888,    0,    0,  921,  809,    0,
    0,    0,    0,    0,    0,  819,  728,  727,    0,    0,
    0,    0,  615,  616,    0,    0,  608,  611,  538,  865,
  569,  578,  573,  572,    0,  583,  731,  700,  701,  349,
    0,  209,  593,  594,  592,    0,  175,  169,  176,    0,
  172,    0,    0,  171,    0,  182,  163,  162,  863,  165,
  164,  452,    0,    0,    0,  393,  263,    0,  205,  351,
  207,    0,  352,  202,  208,    0,    0,  240,    0,  406,
  407,  351,  349,  352,    0,    0,    0,  377,    0,    0,
  350,    0,  338,  190,  191,  150,    0,    0,    0,    0,
    0,    0,  528,    0,    0,  351,  352,    0,  477,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  192,    0,    0,    0,   80,    0,    0,    0,    0,   85,
   82,    0,    0,    0,  924,  694,    0,    0,  746,    0,
    0,    0,  772,  771,    0,    0,    0,  779,  791,  789,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  734,    0,   63,   55,   56,   62,   57,   58,    0,    0,
   20,    0,    0,    0,   40,    0,    0,    0,  705,  725,
  688,    0,  704,    0,    0,    0,    0,    0,    0,  214,
    0,  871,    0,    0,  886,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  896,    0,  906,
    0,    0,    0,    0,    0,    0,  887,  825,    0,    0,
    0,    0,    0,    0,  630,    0,    0,    0,    0,    0,
  575,  576,  580,    0,  193,    0,    0,    0,    0,    0,
    0,  183,    0,    0,  389,  217,  218,  219,  220,  221,
  222,    0,    0,    0,  267,    0,  215,    0,    0,  241,
    0,  436,  437,  408,    0,    0,    0,    0,    0,    0,
  351,  456,  352,    0,  336,    0,  920,  161,    0,    0,
  495,    0,  494,  531,    0,  523,    0,    0,    0,  475,
    0,  503,    0,    0,  505,  508,  510,    0,    0,  113,
    0,  198,  351,    0,  350,   95,    0,  111,    0,   91,
    0,    0,    0,    0,   84,    0,  787,  788,    0,    0,
    0,    0,    0,    0,  790,    0,    0,    0,    0,    0,
    0,    0,  780,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   54,   60,
   52,   53,   21,  709,  710,    0,  707,  714,  715,  712,
    0,  686,    0,    0,  877,  876,    0,    0,  873,  872,
    0,  881,  880,  879,  878,  875,  874,    0,    0,  902,
    0,    0,    0,  901,    0,    0,    0,  623,    0,    0,
  618,    0,  619,    0,  636,  632,  634,    0,    0,    0,
    0,    0,    0,  177,  173,    0,    0,  188,  184,    0,
  352,  270,    0,    0,  352,  268,    0,    0,    0,  225,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  453,    0,    0,  339,  497,    0,  498,    0,  128,    0,
    0,    0,  132,  134,  135,  136,  478,  480,  476,  507,
  352,    0,    0,    0,  335,  351,   86,    0,    0,   88,
    0,    0,    0,    0,    0,    0,  793,  792,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,  689,  213,
  889,  882,  883,    0,  884,  898,  897,    0,  903,  892,
    0,  893,    0,  621,    0,    0,  653,    0,  650,  654,
  655,  657,  658,  659,    0,    0,  602,  352,    0,  168,
  185,  352,  138,    0,  276,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  275,
  279,  274,    0,    0,  284,  285,  286,  287,  290,  292,
  257,    0,  201,  226,    0,    0,    0,  231,  227,  230,
    0,  352,  375,  376,  372,  371,  374,  373,    0,    0,
  340,  496,  524,  137,  125,  133,  255,  120,  352,  353,
    0,    0,   89,   90,   77,    0,  758,  766,    0,  759,
  767,  762,  770,    0,    0,  760,  768,  761,  769,  755,
  763,  756,  764,  757,  765,  706,    0,  899,  624,    0,
    0,    0,    0,  670,  672,    0,  667,    0,  256,  178,
  390,    0,    0,    0,    0,  294,    0,    0,    0,  293,
    0,  295,  282,  288,    0,  291,  277,    0,  280,    0,
  316,  281,  204,  228,  232,    0,    0,  243,  379,    0,
    0,  355,    0,   74,   92,    0,  885,    0,    0,  656,
  651,  671,    0,    0,  273,    0,  283,    0,    0,    0,
    0,  289,    0,    0,  309,  310,  324,    0,    0,    0,
    0,  319,  278,  317,    0,    0,  242,    0,    0,    0,
    0,    0,  345,  346,    0,    0,    0,    0,    0,  678,
    0,    0,    0,  272,  269,    0,    0,    0,  297,    0,
    0,    0,  301,    0,  323,  928,  322,  321,    0,    0,
  229,    0,    0,    0,  247,    0,  246,    0,    0,    0,
    0,    0,  112,    0,  795,  680,  669,    0,    0,  681,
    0,  677,    0,    0,    0,    0,    0,    0,    0,    0,
  312,  311,  318,  320,    0,    0,  251,  250,  249,  348,
    0,    0,    0,    0,  676,    0,  683,  304,    0,    0,
  296,    0,    0,    0,  313,  254,  252,  253,    0,  341,
    0,    0,    0,    0,  314,  298,    0,    0,  794,    0,
  682,  307,  299,    0,  685,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1456,   26,   27, 1457,
   29,   30,   31,   32, 1458,   34, 1459,  597,   99,  371,
  849, 1091,  100,  627,  850,  101,  376,  632,  124,  102,
  103,  232,  920,  113,  851,  852,  172,  175,  104,  853,
  105,  378,   75,  213,  342,  420,  592, 1028,  360,  809,
  567,  475,  788,  593,  594,  595, 1030,  214, 1274,   67,
  162,   68,  208, 1702, 1226,  194,  199,  201,  203,  191,
  182,  185,  196,  205,  129,  283,  285,  368,  233,  737,
  500,  604,  966,  335,  584, 1019, 1220,  534,  685,  996,
  485,  486,  515,  330,  568, 1007, 1361,  706, 1165, 1362,
 1363, 1364, 1365, 1366,  605,  192,  183,  326,  541,  327,
  328,  542,  543,  544,  545, 1198,  960,  488,  489,  950,
  948,  490,  954,  949, 1156, 1324,  955,  956, 1161,  337,
  797,  798,  799,  800,  739,  973, 1338,  569,  741,  422,
  766,  909,  509, 1288, 1166,  423,  424,  425,  900,  426,
 1339, 1340,  518, 1479, 1607,  747,  748,  735,  749,  750,
  751, 1608, 1609, 1678,  307,  513, 1173, 1460,  168,  510,
  511, 1174, 1175, 1333, 1586, 1461, 1462, 1463, 1560, 1464,
 1465, 1466, 1467, 1468, 1469, 1470, 1627, 1666, 1594, 1668,
  427,  665, 1307,  428, 1036, 1561, 1601, 1602, 1637,  363,
  364,  429,  991, 1225, 1195,  176,  992,  993,  117,  259,
  449, 1571,  346, 1150, 1321, 1437, 1611, 1612, 1613, 1614,
 1148,  316,  529,  765, 1192,  530,  763,  197,   53,  311,
  173,  134,  294,  159,  301,  165,  725,  722,  302,  312,
  755,  313,  526,  984,  160,  295,  497,  531, 1193,   89,
  170,  217,  570,  571,  727, 1008,  728, 1009, 1010,  574,
  575,  576,  577, 1001,  813,  578,  579,  580,  781,  581,
  477,  778,   36,   37,   38,   55,  178,  319,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  691,  462,  935,
 1153,  463,  464,  696,   39,  133,  290,   40,  478,  479,
  711,  678,  260,  450,  451,  452,  682,  921,  922,  923,
  924, 1142,  430, 1130,  118,  119, 1428, 1429,  431, 1431,
  432,  433,  434,    0, 1620, 1538, 1621, 1622, 1623, 1662,
 1703,  383, 1102,   41,   42,  347,   43,   44,  471,  472,
  858, 1099, 1276, 1280,  384,  635,  188,  606,  607,  608,
  609,  610,  611,  612,  613,  614,  615,  616, 1243, 1046,
 1048, 1049,  907,  663,  435,  436,  437,  438,  367,    0,
  210,  439,  440,  890,  441,  442,  443,  444,  655,  894,
 1131, 1126,  656,
};
static short yysindex[] = {                                   2799,
 2433, -172, 1743,   90, 1013,  -83, 3086,  -89, 2349,  -64,
  209, 2042, -172, 1116,  476, -124,  646,    0,  611,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -151,    0,
    0,    0,    0,    0,    0, 8039,  250,  440,  463, -124,
  517,  557,    0,    0,  270, 1162,  603,  250,  648,  463,
  485, -124,  517,    0,  557,  688,    0,  838,    0,  629,
    0,    0,  848,  727,    0, -124,  745,  250,  940,  727,
  648,  440,  463,  485, -124,  517,  557,  688,    0,  463,
  911,    0,    0,    0, 1328,    0, 1328,    0,  915, 1001,
   56, 1361,    0,    0,    0,  603, -124,  603, 1024, 1067,
 1072,  104,  980,    0,   67,   69,   64,  973,    0,  648,
 1140, 1131,    0,    0, 1054, 1027,  463, -124,    0,    0,
 1243, -108, 1174,  -48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  504,    0,
    0, 1162,    0,  414,    0,    0, 1490,    0, 1050,    0,
    0,  425,    0,    0, 1328,    0, 1120,    0,    0, 1107,
    0,    0,  939,    0,    0, 1311,    0,    0, 1162,    0,
    0,    0, 1490,    0,  -44,    0,    0, 1276,    0, 1281,
    0, 1328,    0,    0,    0,    0,    0, 1282,    0,    0,
 1171,    0,    0, 1343, 1193,    0,    0,    0, 1171,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1211,    0,
  603,    0,    0,    0, 1117, 1233,  488,  688,  918, 1312,
 1649, 1374, 1399, 1117, 1321,  488, 1350, 1356,    0, 6824,
    0,    0,    0, 6824,    0,    0,    0,    0, 5145,    0,
    0, 1329,  440, 1402, 1323,  534, -124, 1349,    0,    0,
 1131,    0,    0,    0,    0,    0,    0,    0, 1331,    0,
    0, 1490,    0, 1276,    0, 1104, 1360,    0, 1346,    0,
 1232, 1435,  815,  -48,    0, 1506, 1201,    0,  603,    0,
  504,    0,    0,    0,    0,  603, 1385,  -76, 1340,  -60,
 1758,    0, 8072,    0,    0, 1298, 1543,    0,    0,    0,
 1747, 1747, 1162, 1440, 1162, 1876,  939,    0,    0, 3782,
    0, 1385,    0,    0, 1529,  588, 1777, -124, 1554,  440,
    0,    0, 1784,  149, 3302,    0,    0,    0, 1372,    0,
    0,    0,    0, 1375, 1381,    0,    0, 1313, 1424,    0,
    0,    0,    0, 1792,    0,    0,    0, 1456,    0, -124,
 1409,    0,  463, 1378,    0,   99,    0,    0,    0,    0,
 -124, 1331,  567,    0, -124,    0, 1523,  463, 1814, 1117,
 1457, 1821, 1822, 1823,    0, 1827, 1828,    0, 1829, 1831,
 1832,    0,    0, 1833,    0,    0,    0,    0,    0, 1837,
    0,    0, 5736, 1845, 1849, 6824, 6824, 5782, 1414, 1850,
 1377,    0,    0,    0,    0,    0,    0, 1800,    0, 1852,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1660,    0, 2478,    0, 1574, 1856,
    0, -101,   37,    0,  483,    0,  340,    0,  340,    0,
    0, 1857,    0,  320, 1467,    0,    0,    0,    0, 1868,
   39, 1855, 1385, 1878,    0, 1641, 1641, 1880,    0, 1885,
    0, 1556,    0,   85, 1592,    0,    0,    0,    0, 1162,
    0, 1747, 1747, 1747, 1747,    0, 1899,    0, 1670, 1671,
    0,    0,    0, 1644,    0, 3782,    0,    0, 3782, 1563,
    0, 1490, 1693, 1489, 5137,    0,    0,  545,    0, 1489,
 1119, 1050,    0, 1561, 1525, 1492,    0,    0,    0,  541,
 1567,    0,    0, 1508,  485,    0, 1162,    0, 1692,    0,
    0, 1876,    0,    0,    0,    0,   68, 1524,    0,    0,
    0, 1527,    0, 1573, 1937,    0, 1638, 1950,  -84,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1903,  113,    0,    0,    0,    0,  142, 1955, 1956,
 1950, 1737,    0, 1162, 1162,    0,  -76,  425,    0, 1619,
    0, 1594, 1960,    0, 4767,  127,    0, 1617, 1625, 1972,
 3847, 1976, 3378, 8101,  -13,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1564, 1424,  603,    0,    0,  977, 1580,    0,    0, 1553,
  488,    0, 1701,    0, 1578, 1990,    0, 1701,  977, 1712,
 1713,  463,  515, 6008,  580,  648, 6824,  909,  949,  971,
 1548, 6824, 3847, 2478, 1587,  -12, 6824, 6008,  675,  675,
 1116, 1690, 1999,    0,    0, 6054, 1581, 6824, 6824, 6824,
 6824, 6824,    0, 6824,   84,    0,   49, 1588, 6008, 1583,
    0,    0,    0,  318,    0,    0, -100,    0, 1596,    0,
    0,    0, -124,  627, -124,    0,    0,  603, 1331,    0,
    0, 6008, 1782,  -76, 1581,  838,  838, 1104,   34,  603,
    0, 1162, 1162,    0,  399, 1508, 1508, 1589,  485,  815,
    0,    0, 2007,    0,    0,    0,    0, 1774,    0,  603,
    0,    0,    0,    0,    0, 1781, 2013,    0, 1757, 1775,
    0,    0, 1717, 1718, 1328, 1801,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  485,  603, 5397, 1694,
 1695, 1697,    0,  485,    0, 1672, 1307,    0,    0, 1666,
    0,   53, 1679,    0,    0,    0,  485,    0, 1937,  105,
    0,    0,    0, 1787,  105, 1680,  105,    0, 2058,  485,
  485,  485,    0,    0, 1744,    0, 1597,    0,    0,    0,
 1298, 1672, -124, 1599,   78,    0,    0, 2063, 1830,    0,
    0,    0,    0,  149, 1663, 1360,    0, 1360, 4925,   65,
 6824, 6824, 3923, 2081, 1219, 4182, 6824, 4258, 1031, 4334,
 4592, 6280, 4664, 4899, 4967, 3847, 3847,    0,    0,    0,
    0,    0, 1378,  463,  517, 1378,  557,  688,  121, 2083,
    0,    0,    0,  977, 1739,    0, -135, 1763, 1331,    0,
 6008, 1763, 2088, 2083,  977, -126, 1812, 6824, 6824, 1874,
 6824, 2101, 6824, 2099, 1911, 6824, 6824, 6824, 6824, 6824,
 6824,    0,    0,    0,    0,    0,    0,    0,    0, 1824,
  964,   24, 6824,  392, 6008,    0, 3847, 2065, 2478,    0,
 2108,   64,    0,    0,    0, 2478, 1606,    0,    0, 1870,
  675,  675, 1267, 1267, 1180,    0,    0,    0,   49, 2114,
 2116,  754,    0,    0, 3847, 1836,    0,    0,    0,    0,
    0,    0,    0,    0,  470,    0,    0,    0,    0,    0,
 1611,    0,    0,    0,    0, 2117,    0,    0,    0, 1618,
    0, 1747, 1896,    0,  399,    0,    0,    0,    0,    0,
    0,    0, 2124, 3847, 1368,    0,    0, 1866,    0,    0,
    0, 1368,    0,    0,    0, 1328, 1328,    0, 2132,    0,
    0,    0,    0,    0,  373,  406,  370,    0, 1910, 1116,
    0, 1735,    0,    0,    0,    0, 1725,   90, 1624, 1756,
 1774, 2147,    0, 1508, 1667,    0,    0, 1468,    0, 2134,
 1725, 1487,  485, 2149, 2153, 2157, 1866, 1747, 1592,  -76,
    0, 1567, 1746,   38,    0,  485, 1809, 1895, 4767,    0,
    0,  485, 1714, 1898,    0,    0, 2168, 2170,    0, 1392,
 2478, 2173,    0,    0, 2478, 2175, 6326,    0,    0,    0,
 1863, 2177, 2478, 2179,  979, 2180, 2478, 2182, 6824, 6824,
 2081, 6824, 6552, 2183, 2478, 2186, 2188, 2478, 2189, 6824,
 2478, 2198, 2478, 2202, 2204, 2478, 2211, 2212, 2478, 2213,
    0, 2002,    0,    0,    0,    0,    0,    0, 1933,  977,
    0,  977,  121, 2083,    0,   77,   77,  134,    0,    0,
    0, 1668,    0, 2088, 2083, 2221, -126, 1968, 2050,    0,
 2106,    0, 2128, 6824,    0, 2190, 2330, 2451, 2518, 2576,
 2619, 6824,  485, 6008, 2478, 1839, 6008,    0, 6824,    0,
 1957,  451, 6824, 6008, 6824, 6824,    0,    0,  754, 2227,
 6008, 1027,   49, 1884,    0, 1887, 1889, 1925, 2009, 1949,
    0,    0,    0, 1866,    0, 1861, 1162, 1894, 1508, 1901,
 1508,    0, 3847,   93,    0,    0,    0,    0,    0,    0,
    0, 1844, 2024, 1866,    0, 6824,    0, 2012, 1900,    0,
 3847,    0,    0,    0, 1916, 1922, 1926, 1934, 1936, 1940,
    0,    0,    0,   64,    0,   19,    0,    0, 2256,   90,
    0, 1589,    0,    0,  105,    0, 1368, 1941,  105,    0,
  105,    0, 1774, 2283,    0,    0,    0, 2024, 1508,    0,
 1592,    0,    0, 2051,    0,    0, 2117,    0, 2291,    0,
 2292, 1162, -104, 2293,    0, 1162,    0,    0, 6824, 1923,
 1923, 1116, 2301, 1681,    0, 1923, 1923, 6824, 1923, 1923,
 1706, 2478,    0, 1280, 6824, 2478, 1923, 1923, 1923, 1923,
 2478, 1923, 1923, 1923, 1923, 1923, 1923, 1967,    0,    0,
    0,    0,    0,    0,    0, 1906,    0,    0,    0,    0,
 6008,    0, -126, 2221,    0,    0, 3782, 2305,    0,    0,
 2631,    0,    0,    0,    0,    0,    0, 2742,  108,    0,
 6008, 2045, 1921,    0, 6008, 2758, 1682,    0, 1074, 2478,
    0, 1700,    0,  754,    0,    0,    0,   49, 1130, 3847,
 1962, 2024, 1747,    0,    0, 1162, 1307,    0,    0,  372,
    0,    0,  603, 7958,    0,    0, 2478, 1641, 2012,    0,
  868, -124,  374, 1917, 2026, 1920, 2064, 2028, 2074, 1866,
    0, 5145, 1672,    0,    0, 2354,    0, 2357,    0, 2049,
 1641, 1941,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1307, 1910, 2019,    0,    0,    0, 2034,  -88,    0,
 1774, 2038, 2478, 2371, 2372,   64,    0,    0, 2374, 2380,
 2478, 2381, 2390, 6824, 6824, 2478, 2391, 2393, 2396, 2398,
 2399, 2404, 2405, 2410, 2412, 2416,    0,   77,    0,    0,
    0,    0,    0,  485,    0,    0,    0, 6008,    0,    0,
 6008,    0, 1588,    0, 1322, 2178,    0, 2417,    0,    0,
    0,    0,    0,    0,  -13,  726,    0,    0, 1508,    0,
    0,    0,    0, 3782,    0,  250, -142, 2407, 1360, 2428,
 2136, 6824, 2414, 2440, 2423, 2424, 2425, 2146, 2431,    0,
    0,    0, 4604, 2436,    0,    0,    0,    0,    0,    0,
    0, 2456,    0,    0, 2151, 2154, -124,    0,    0,    0,
 1328,    0,    0,    0,    0,    0,    0,    0, 2024, 2181,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6824, 1162,    0,    0,    0, 1162,    0,    0, 6824,    0,
    0,    0,    0, 2478, 2478,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2459,    0,    0, 1836,
 3847, 1581, 1130,    0,    0, 2141,    0, 2473,    0,    0,
    0,   97, 2455,  463, 6824,    0, 2185, 3847, 2269,    0,
 3847,    0,    0,    0,   44,    0,    0,  -82,    0,  401,
    0,    0,    0,    0,    0, 1328, 2138,    0,    0,   52,
 1588,    0, 2478,    0,    0, 1074,    0, 1949,  -13,    0,
    0,    0,  672, 1368,    0, 2465,    0, 6598, 2422,   44,
  382,    0,  584, 1236,    0,    0,    0,  250, 2068,   90,
  102,    0,    0,    0, 2138,  412,    0, 2148, 2155,   52,
 2491,  754,    0,    0, 1836, 2496, 1588, 1962, -124,    0,
 2497, 2499,  835,    0,    0, 5229, 2129, 2500,    0,  120,
 2109, 2241,    0,   44,    0,    0,    0,    0, 4127,  -82,
    0,  665,  665, 2248,    0, 2104,    0,  754, 2510,   52,
 2214, 1949,    0, 1836,    0,    0,    0,  672, 2516,    0,
  440,    0, 1690, 1711,   47, 2503, 2274, 2264, 4127, 4127,
    0,    0,    0,    0, 2107,  578,    0,    0,    0,    0,
  754,   52, 1962, 1949,    0,  440,    0,    0,   44, 2528,
    0, 1663, 4127, 2265,    0,    0,    0,    0, 1407,    0,
 1962, 2531, 2535, 1715,    0,    0, 4127, 3847,    0,  440,
    0,    0,    0,  -13,    0,
};
static short yyrindex[] = {                                      0,
    0,  177,  -63,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  897, 3454,    0,    0,    0,    0, 2578,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  386,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  910,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2242,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2199,    0,    0,    0,  271,    0,  271,    0,    0,    0,
    0, 2200,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5464, 3771,    0,    0,
    0,  929,    0,    0,    0,  498,    0,    0,    0,    0,
    0,    0,  292,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  397,    0,    0,    0,
    0,  428,    0,    0, 2321,    0,  981,    0,    0,    0,
    0,    0,  637,    0,    0, 6103,    0,    0,    0,    0,
    0,    0,  397,    0,  -87,    0,    0, 2548,    0,    0,
    0, 2321,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1002,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1034,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1047,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  201,    0,    0,
 1085,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  397,    0, 2548,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1087,    0, 2312,    0,    0,    0,    0,
 1167,    0,    0,    0,    0,    0, 2327,  -62, 8103,    0,
 1170,    0,    0,    0,    0,  208,    0,    0,    0,    0,
 2133, 2133,    0,    0,    0, 1182, 1152,    0,    0,    0,
    0, 2327,    0,    0, 1299,    0,    0,    0,    0,    0,
    0,    0, 4140, 2208,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1183,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1187,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1195,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1938,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2075,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   79,    0,    0, 2279,
    0,  117,    0,    0,    0,    0,  361,    0,  361,    0,
    0,  272,    0,  604,  657,    0, 1991,    0,    0,    0,
 1002,    0, 2327,    0,    0, 1122, 1122,  807,    0,    0,
    0,  328,    0, 3175,  114,    0,    0,    0,    0,    0,
    0, 2133, 2133, 2133, 2133,    0,  124,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2337,    0,    0,    0,    0,    0, 2312,    0,    0,
  862,    0,  472, 2131,    0,    0,    0,    0,    0,    0,
  662,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1205,    0,    0,    0,    0, 1518,  795,    0,    0,
    0, 1071,    0,    0, 1338,    0,    0, 1403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1788, 2100,    0,    0,    0,    0, 1480, 1248,    0,
 1403,    0,    0,    0,    0,    0,  -62, 1327,    0,    0,
    0,    0, 2191,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  226,    0,    0,    0,    0,  226,    0,    0,
    0,    0, 6870,    0, 6870,    0,    0, 6870, 6870, 6870,
    0,    0,    0, 2152,    0,    0,    0,    0, 2689, 2859,
 5510,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  893,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  700,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -62,    0,  898,  898,    0,    0,    0,
    0,    0,    0,    0, 3251,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  833,    0,    0,
    0,    0,    0,    0,    0, 2567,    0,    0, 2070, 1779,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  222,
  347,  359,    0,    0,    0,    0, 1484,    0,    0,    0,
    0,    0, 1635,    0,    0,    0,    0,    0, 1338,    0,
    0,    0,    0,  635,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  247,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5831,    0,    0,    0,  204,    0,
    0,    0,    0, 2310,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1227, 1293,
    0,    0,    0,    0,    0,    0,    0, 1316,    0,    0,
    0, 1316, 1317, 1332,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  819,    0,
    0, 6870,    0,    0,    0, 1309,    0,    0,    0, 2245,
 2996, 3166, 2382, 2552,    0,    0,    0,    0,    0, 1742,
  861,  831,    0,    0,    0, 1135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  338,    0,    0,    0,    0,
    0, 2133, 2156,    0, 3282,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2356,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1337, 3454,
    0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
 1686,    0,    0,    0,    0,    0,    0,    0,    0, 1491,
    0,    0,    0,    0,    0,    0, 2356, 2133, 1341,  -62,
    0, 2364, 1342,    0,    0,    0, 5831,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3638,    0,    0,    0, 7064,    0,    0,    0,    0,    0,
    0,    0, 7075,    0, 7152,    0, 7158,    0,    0,    0,
    0,    0,    0,    0, 7235,    0,    0, 7319,    0,    0,
 7382,    0, 7432,    0,    0, 7465,    0,    0, 7559,    0,
    0, 4568,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1227, 1347,    0, 2193,  244,    0,    0,    0,
    0,    0,    0, 1369, 1371, 1373,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2290, 1159,
    0, 3672,    0, 2294,    0, 2295, 2296,    0,    0, 1287,
    0,    0,    0, 2356,    0, 3095,    0,    0,    0, 2176,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2187,    0, 2365,    0,    0,    0, 1835,    0,    0,
    0,    0,    0,    0,  389,  403,  424,  788,  793,  837,
    0,    0,    0, 5464,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  845,    0,    0,
    0,    0, 1961,    0,    0,    0,    0,    0,    0,    0,
 1384,    0,    0,    0,    0,    0, 1411,    0,    0,    0,
    0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
    0, 5510,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7580,    0, 7609,    0, 7643,    0,    0,    0,    0,
 7739,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1445,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1455,
    0,    0,    0, 1045,    0,    0,    0,    0,    0,    0,
  332,    0, 2133,    0,    0,    0, 2986,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2596, 1033, 2474,    0,
 2312,    0,    0,    0,    0,    0,    0,    0,    0, 2356,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1452,  881,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  283,    0,    0,    0,    0,    0,    0,    0,    0,
   55,    0, 7789,    0,    0, 6870,    0,    0,    0,    0,
 7866,    0,    0,    0,    0, 8008,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  244,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  309,    0, 2290,  358,    0,  409,    0,    0,
    0,    0,    0,    0,  444, 2601,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  229,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8019, 8053,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
    0,    0,    0,    0,    0, 2603,    0,    0,    0,    0,
    0, 2588,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  859, 1177,    0,    0,    0,
  298,    0, 2596,    0,    0,    0,    0,   92, 4469,    0,
    0,    0, 2601,    0,    0,    0,    0,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2140,    0,    0, 2389, 2447,    0,
  187,  539,    0,    0,  234,    0,  309, 2608, 1139,    0,
    0, 2609,    0,    0,    0,    0, 2593,  107,    0, 2348,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2290, 1273,    0,
    0,  159,    0,   87,    0,    0,    0, 2601,    0,    0,
    0,    0, 2611,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  601,    0,   80,   92,    0,    0,    0,    0,    0, 2598,
    0,    0,    0, 5450,    0,    0,    0,    0, 2290,    0,
 2608, 2617,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  110,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2665,    0,    0, 2668,
    0,    0,    0,    0,    8,    0, 2670,   -1,  239,   86,
 -554, 1586,  257, -232, -471, 2671, 2434,    0,  -37,    0,
 2443,  -91,  -39,    0,  624, -871,  -31,  -26,  -20, -160,
 2446, 2054,    0,    0,    0, 1247,    0,    0,  -47, 1658,
 -532,   33, -760, 2102, 1886, -259, 1669, 2615, -273,    0,
  -54,    0, 1063,  -46,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -591, -598, 1675,
 -263,  -97, -880,    0,    0,    0,    0, -303,  -99,   36,
 1691, -286,  -45,    0, -477,    0,    0, -450, -925,    0,
 1351,    0,    0, 2409, -572,  -22,    0,    0,    0,    0,
 2385,    0, 2167, 2426, -219, 1704, -682,    0,    0,    0,
 -680,    0,    0,    0,    0,    0,    0, 1764,    0, 2437,
 2016, 1702, 2421, 2430,    0, 1194,    0, -472, 2000,  -56,
   75, -675,    0,    0,  -23, -916, -908, -900, -214, -899,
    0, 1405, -998,    0, 1136, 1406,    0, 2233,    0,    0,
    0, 1146, 1148, 1129,  -49,  400, -901,-1042,    0,    0,
 2030,    0, 1591,    0,    0, -515,    0,    0,    0, -184,
    0,    0,    0,    0,    0,    0,    0,    0, -798,    0,
 -322,    0,-1074, -272, 1081, 1214,    0, 1137,    0,    0,
 2419,  -93, 1973,    0, 1551,    0,    0, -957, -613, -827,
 1428,    0, -453,-1298, -730, -693,    0, -582, 1176,  219,
 -483, 2203, 1980, 1766, 1421,    0,    0,    1,    0,    0,
    0,    0,    0, 2482,    0,    0,    0,    0, 2501, 2284,
    0,    0,    0,    0,    0, 2513,    0,    0,    0,    0,
  -16,    0,    0,    0, -310, 2021, -304, 1600, -411,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2230,    0,
-1145, 2036,    0,    0,    0, 2800,    0,    0,    0,    0,
 2546,    0,    0,    0,    0, 2366,    0, 2360,    0,    0,
    0, 2127,    0,    0,    0,    0,    0,  -74,    0, 2119,
    0,-1154, 1259,    0, 2143, -590, 2145,    0, -748, 1909,
    0,    0, -119, -630,    0, 2711,    0, 1297,-1140,    0,
-1104,-1099,-1092,    0, 1396,    0, 1175,    0, 1220,    0,
 1128,    0,    0,    0,    0, 2369,    0,    0,    0, -329,
 2206, 1983, -994,    0,    0,    0,  751,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4050, 1099,
 1785,    0, -573,    0,    0,    0, -218,    0, 2484,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -939, 1720,    0,
};
#define YYTABLESIZE 8600
static short yytable[] = {                                     126,
  187,  164,   71,  189,   72,  234,  281,   33,  181,  167,
  366,  186,  169,  476,  362,  252,  255,  700,  535,  572,
  193,  253,  256,  218,  198,  573,  707,  901,  817,  942,
  820,  200,  951,  726,  504,  222,  729,  738,  202,  540,
  506,  686,  740,  223,  448,  204, 1177,  902, 1167,  240,
  229,  242,  634,  870,  226, 1167, 1168,  288,  221,  126,
  227,  337,  810, 1168, 1169, 1171, 1312,  228,  225,  241,
  598, 1169, 1171,  496, 1135,  917,  377,  231,  702,  668,
  892,  684,  699,  317,  863,  377, 1689,  282,  919,  999,
  284, 1610, 1178,  195,  469,  504,  998,  262,  504,  238,
  915,  419, 1277, 1184,  419, 1039,  250,  772,  254,  347,
  339,  939,   70,  447,  303, 1218,  224, 1027,  946,  702,
  337,   70,  702,  449,  713,  917, 1208,  649,  305,  251,
 1335,  251,  661, 1331,   70,  365,  662,  702,  668,  251,
  366,  331,  631,  332,  362, 1640,  978,  238, 1415, 1004,
  347,  287,  421,  347, 1423,  640,  445, 1584,  661,  470,
  609,  447,  680, 1634, 1090,  303,  480,  864,  347, 1379,
 1139,   70,  447, 1427,  369, 1371,  542,  662, 1430, 1341,
 1597,  790,  449,  457, 1300, 1096,  342, 1302,  716,  717,
  718,  719,  782,   70,   87,  662,  251,  372,  714,  116,
  565,  109,  843,  787,  572,  361,  372,  455,  106,  291,
  573,  514,  481,  629, 1432,  235,  454,  661, 1270, 1433,
 1272,  364,  468,  333,  926,  708, 1434,  520,  717,  461,
 1598, 1578,  473,  649,  125,  542,  131,   76, 1354,  109,
 1203, 1599,  505,  502,   83,  342,  119,   83,  836,  508,
  110,  187, 1322,  521,  746,  540,  524,  235,  292,  565,
 1544,  783,  470, 1081, 1082,  365,  455, 1503,  111,  717,
 1101,  571,  717,  773,  109,  536,  107,  538, 1353, 1438,
  364, 1359,  189,   54,  708,  836,  982,  717,  586,  132,
 1167,  599,  649,  590,  215,  895,  896,  663, 1168, 1093,
  588, 1097,  502, 1545,  784,  119, 1169, 1171,  637,   14,
 1104, 1106, 1351,   90,  717,  654, 1652,  846,  659,  660,
  662,  334,  736,  257, 1132,  468,  836,  601,  504,  387,
  571,  668,  625,  628,  375,  361,  123,  600,  235,  459,
 1341,  189,  702,  633,   72, 1600,  362,  638,  628,  663,
  599,  247,  372,  712,  836, 1684,  663,  652,  363,  681,
  570, 1416, 1380,  695,  504, 1419, 1352,  258, 1005,  248,
  293,  447,  668,  837,  116,  116, 1194, 1179, 1180,  235,
  916,  449, 1094, 1667,  184,  590,  601, 1427,  369,  786,
  668, 1164, 1430, 1105, 1314, 1491,  600,  972,  652,  702,
  184,  652,  370,  366, 1504,  362, 1639,  840,  648,  867,
  837, 1270, 1442, 1526, 1482, 1278,  652,  363,  649,  570,
  447, 1617, 1631,  366,  246, 1228, 1414,  358, 1432,  448,
  449,  347, 1227, 1433,  767,  476,  990,  609,  347,  897,
 1434,  347,  715,  660,  590,  347, 1569,  369, 1489,  648,
 1443,  837, 1369,  347, 1471,  662, 1472,  963,  742, 1124,
  965,  370,  732,   87,  448,  662,  504,  648,  662,  347,
  377,  455, 1026, 1244,  971,  641, 1325,  662, 1528,  837,
  305,  108,  366,  649,  660,  364,  358,  448,  661,  769,
 1497,  345,  237,  347,  184,  249,  810,  629,  184,  596,
  962,  989,  660, 1308,  467,  819,  347,  467,  596,  166,
 1308,  959,  123, 1628,  938,  342,  337,  303,  342, 1357,
  668,  504,  683,  347,  662,  249,   69,  249,  841, 1100,
  187,  702,  447,  662,  668,   69,  795,  796,  343,  702,
 1034,  629,  449,  565,  184, 1029,  447,   72,   69,  875,
  347, 1664, 1284,  630,  891,  661,  629, 1539, 1509,  898,
  899, 1541,  347,  249,  347,  649,  842,  768,  906, 1425,
  910,  911,  912,  913,  914, 1089,  906,  662,  565,  470,
  596,  447,  343,  342,  930,   69,  542,  811,  480,  789,
 1330,  662,  959,  708,  812,  119,   72,  343,  839,  661,
  344, 1568,  628,  581,  447,  455,  565,   69, 1343,  565,
  362,  502,  717,  661,  571,   83,  957,  958, 1572,  364,
 1505,  872,  363,  874, 1632,  565,  663,  342, 1386,  663,
  649,  189,  599,  836,  129,  836,  145,  663,  694,  342,
  663,  342,  468,  836,  344, 1440,  448,  187, 1159,  571,
  668,  565,  369,  369,  717,  461,  566,  936, 1624,  344,
  259,  378,  581,  802,  947,  947,  370, 1167,  601,  130,
  304, 1189,  668,  508,  649, 1168,  652,  571,  600,  177,
  571,  314, 1083, 1169, 1171, 1086,  358,  366,  649,  652,
 1409,  358, 1616,  129,  663,  145,  571,  358,  652, 1127,
 1128,  981,  983,  570,  590,  663, 1176, 1187, 1190, 1603,
  161, 1185,  836, 1642, 1219,  566,  671,  689, 1182,  668,
  378,  672,  571, 1040, 1041, 1045,  590,  648, 1053, 1055,
 1057,  582, 1065, 1068, 1071, 1073, 1076, 1079,  663,  470,
  648, 1037, 1207, 1038,  362,  652,  366, 1435,  305,  648,
 1170,  961,  663,  366,  652,  952,  363, 1170,  837,  315,
  837,  296,  660,  447,  988, 1024,  570, 1029,  837,  570,
 1108, 1109,  668, 1111,  257, 1113,  249, 1002, 1116, 1117,
 1118, 1119, 1120, 1121,  660,  570,  369,  365,  690,  980,
 1529, 1630,  368, 1358,  514, 1125,  648,  899,  652, 1368,
  370,  120,  468,  929, 1084,  648,  589,  968,  259, 1410,
  297,  570,  652, 1085,   72, 1186,  975,  457,  868,  629,
 1087,  366, 1014, 1015, 1016,  358,  629, 1088,  953,  629,
  613,  660,  504,  629,  514,  514,  367,  837,  514,  257,
  660,  629,  760, 1129,  130,  836,  365, 1618, 1188,  648,
 1287,  368, 1558,  514, 1643,  514, 1580,  629,  717,  626,
  612,  441,  626,  648,  743,  589, 1690,  343, 1017,  922,
  343,  613,  703,  504,  613, 1151,  504,  626, 1697,  761,
  131,  629,  637,  871,  660,  514, 1305, 1473,  687,  613,
 1704,  504,  663,  504,  629,  367,  542,  597,  660,  717,
  163,  612,  717,  130,  930,  441,  121,  268,  428,  544,
 1495,  629,  129,  122,  129,  145,  629,  717,  458,  612,
  441, 1683,  298,  166, 1655,  378, 1152, 1350,  549,  344,
 1698,  374,  344,  663,  714,  343,  585,  145,  629,  131,
  299,  597,  922,   69,  637,  744,  581, 1559,  375,  906,
  629,  663,  629, 1701,  667,  542,  597, 1308, 1579, 1373,
  668, 1251, 1252,  187, 1254, 1256,  145,  369,  544, 1530,
  837, 1542, 1261,  459,  300, 1591,  572,  171, 1593,  343,
  546,  581,  573,  762,   14,  145,  745,  549,  366, 1700,
  460,  343, 1170,  343,  145, 1308, 1199,  344,   72,  566,
  145,  663, 1275, 1275, 1279,  671,  669, 1709,  670,  581,
  672,  636,  581,  129, 1154, 1534, 1291,  174,  145, 1439,
  671,  669, 1313,  670, 1298,  672,  899, 1648,  581,  899,
  933, 1125,  210,  328,  566, 1306,  899, 1309, 1310,  546,
 1535,  344, 1675,  899,  614, 1214, 1426,  934,  127,  179,
  180,  365,  514,  344,  581,  344,  368, 1183, 1230, 1327,
  663, 1329,  566,  184, 1234,  566,  448, 1681,  514, 1534,
  515,  514,  514,  210,  514, 1144,  210,  746, 1337,  514,
  128,  566,  514, 1676,  548,  614,  386,  209,  614, 1145,
  504,  210,  328,  492, 1535,  514,   72,   72, 1536, 1699,
  367,  514,  206,  614,  514,  574,  504,  566,  190,  947,
  515,  515, 1501, 1146,  515,  671,  669, 1615,  670, 1372,
  672,  210,  351, 1673,  130,  589,  626,  626, 1651,  515,
 1677,  515,  123,  504,  649, 1714,  717,  448,  717,  504,
  207, 1383,  504,  548,  493,  386,  717,  589,   98,  613,
 1391,  146, 1536, 1694, 1695, 1299,  574, 1396,  351,  613,
  131,  515,  613, 1654, 1651,  210,  387, 1147,  257,  382,
  211,  613, 1659,  514,  637,  649,  248, 1706,  494,  612,
  210,  154,  326,  447, 1378,  365,   41,  212, 1382,  612,
  368, 1713,  612,  649,   49,  514,  495, 1651, 1356,  480,
   72,  612,  514,  899,  155,  216,  514,  899,  257, 1660,
  146,  663,  876,  514,  470, 1651,  597,  248,  613,   92,
  248,  663, 1661, 1136,  663,  387,   39,  613,  382,  626,
  257,  514, 1595,  663,  367,  248,  514,  717,  597,   91,
  154,  326,  717,  667,  504,   41, 1475,  509,  612,  668,
  359,  504,  878,   49,  447,  358,   94,  612,  667,  717,
 1426,  514,  219,  155,  668,  514,  717, 1595, 1476,  504,
  626,  613, 1138,  251,  880, 1477,  187,  468,  947, 1634,
  663,   92, 1596,  613, 1123,   39,  661, 1444,  509,  663,
 1248,  509,   22,   93, 1633,  321, 1514, 1515,  235,  504,
  717,  612, 1059,  504, 1481,  843,  509,  308,  509, 1478,
  309, 1671,  230,  612, 1275,  713,   45, 1596,   94, 1060,
  899,  671,  669,  899,  670,   95,  672,  661,  515,   73,
   74,   47,  322,  663,  323,   96,  457,  532,  509, 1540,
  121,  354, 1595,  470,  515,  661,   23,  515,  515,  826,
  515,   22,  826,  667, 1549,  515,  310,  324,  515,  668,
   97, 1672, 1441,  614, 1061,  366, 1595,  231,   46, 1170,
   48,  515,   43,  614,  713,   45,  614,  515,  532,  844,
  515,  532,  325,  122,  236,  614,  210,   95,  637, 1567,
   47, 1543, 1596, 1062,  677,  457,  532,   96,  532,  121,
  354,  826,  522, 1573,  239,   23,  468, 1498,   72,  243,
  110, 1576,  358,  480, 1527,  845, 1596,  673,  671,  669,
  846,  670,   97,  672,  210,  918,  847,   46,  532,   48,
  146,   43,  614,  671,  669,  480,  670,  375,  672, 1566,
  210,  614,  122,  522,   44,  848,  522, 1589,  937,  515,
  244,  210,  146,  649, 1574,  245, 1547,  343, 1575,  918,
 1063,  522,  210,  522,  722,  348,  649,  116,  358,  110,
  480,  515,  279,  264, 1605,  649,  679,  263,  515,  506,
  615,  146,  515,  189,  397,  614,  251,  280,  502,  515,
  899,  722,  289,  522,  615,  827,  624,  614,  827,  623,
  146,  503,  615,   44, 1588,  509,  349,  515,  265,  146,
  210, 1209,  515,  679,  480,  146,  286,  502,  615,  470,
  506,  509,  649,  506,  509,  509,  679,  509, 1663,  306,
 1209,  649,  509,  146,  479,  509,  266,  515,  506,  267,
  506,  515,  189, 1635,  318,  480,  667,  827,  509,  470,
  470,  370,  668,  126,  509,  268,  527,  509,  502,  667,
 1210,  502,   69,  350,  467,  668, 1619,  528,  320,  480,
  506, 1050,  615,  470,  329,  649,  502,  123,  502, 1213,
  483,  269,  468,  479,  753,  358,  754,  470,   69,  484,
  403, 1395,  336,  126,  345,  532,  358, 1051, 1638,  338,
   72,  404, 1619,  731,  838,  661,  730,  622,  345,  115,
  116,  532,  468,  468, 1687,  532,  345,  532,  860,  340,
  410,  859,  532,  179,  180,  532,  509,  661,  413,  414,
  415,  341,  345,  126,  499,  373,  468, 1021,  532, 1025,
 1020, 1619,  806, 1144,  532,  345, 1137,  532,  509, 1136,
  468, 1155,  381, 1239, 1020,  509,  667, 1145, 1158,  509,
  522, 1157,  668,  349, 1201,  126,  509, 1200,  351,  352,
  353,  667,  179,  180,  661,  499,  522,  668,  499,  344,
  522, 1146,  522,  661,  509,  504,  345,  522,  382,  509,
  522,  354,  355,  499,  385,  499,  356,  357,  994,  995,
  676,  671,  669,  522,  670, 1531,  672, 1206, 1282,  522,
 1205, 1281,  522, 1269,  509, 1271,  532,  386,  509,  349,
  350, 1388, 1422,  388, 1136, 1421,  504,  661, 1144,  504,
  903,  671,  669,  390,  670, 1147,  672,  506,  532,  391,
 1424,  622, 1145, 1421,  504,  532,  504,  671,  669,  532,
  670, 1688,  672,  506, 1421, 1712,  532,  506, 1634,  506,
  117,  117,  189,  455,  506,  453, 1146,  506,  943,  944,
  351,  352,  353,  456,  532,  502,  350,   14,  471,  532,
  506,  522,  622,  465,  189,  622,  506,  481,  482,  506,
 1708,  467,  491,  499,  502,  502,  512,  502,  356,  357,
  622,  522,  502,  522,  532,  502,  532,  533,  532,  519,
  522,  402,  537,  189,  522,  583,  587,  589,  502,  471,
 1147,  522,  471,  591,  502,  351,  352,  353,  481,  179,
  180,  481,  189,  617,  223,  622,  618,  471,  375,  522,
  189,  189,  619,  639,  522,  626,  481,  189,  354,  355,
  405,  406,  407,  356,  357,  408,  409,  631,  506,  642,
  643,  644,  645,  411,  412,  189,  646,  647,  648,  522,
  649,  650,  651,  522,  664,  223,  652,  189,  223,  189,
  506,  351,  352,  353,  657,  179,  180,  506,  658,  666,
  674,  506,  499,  223,  677,  697,  502,  675,  506,  679,
  693,  869,  189,  873,  354,  355,  877,  879,  881,  356,
  357,  499,  499,  698,  499,  702,  506,  704,  502,  499,
  705,  506,  499,  708, 1054,  502, 1058,  189, 1066, 1069,
  709, 1074, 1077, 1080,  502,  499,  502,  922,  710,  667,
  483,  499,  720,  504,  724,  668,  506,  721,  723,  734,
  506, 1115,  671,  669,  502,  670,  733,  672,  757,  502,
  504,  758,  759,  504,  764,  504,  249, 1394,  770,  667,
  504,  774,  776,  504,  775,  668,  777,  918,  922,  922,
  922,  922,  922,  934,  922,  667,  504,  779,  502,  780,
  922,  668,  504,  785,  791,  792,  922,  922,  922,  922,
  794,  504,  803,  806,  504,  805,  814,  815, 1285,  671,
  669,  816,  670,  499,  672,  818,  854,  855,  857,  504,
  882,  883,  884,  885,  886,  887,  888,  889,  922,  861,
  922,  922,  865,  866,  922,  499,  934,   56,  893,  904,
  925,  908,  499,  681,  931,  940,  964,  959,   57,  922,
  786,  922,  970,  499,  969,   58,  471,  972,  471,  736,
  622,  976,  977,  622,  504,  481,  471,  481,   59,  216,
  622,  499,  481,  622,  796,  481,  499,  622,  979,  471,
  985,  986,  622,  987,  997,  622,  504, 1006,  481,  990,
 1286,  671,  669,  504,  670, 1000,  672, 1013, 1011,  504,
 1018,  622, 1032, 1033,  504,  499,  671,  669, 1133,  670,
  216,  672,  235,  216,  223,  796,  796,  796,  796,  796,
 1047,  796,  504, 1035, 1095,  622, 1092,  504,  216,  622,
 1098, 1090, 1107,  796,  796,  796,  796, 1110,  622,  248,
  504, 1112, 1114,  504, 1122,   60, 1289,  671,  669,  667,
  670, 1134,  672, 1141,  492,  622,  504,  471,  504, 1143,
  623, 1160,   61, 1163, 1149, 1172,  481,  796, 1290,  671,
  669, 1181,  670, 1191,  672, 1196,  539,   62, 1202,  471,
  248,   63,  622,  248,   64, 1197,  471, 1204,  481, 1215,
  667, 1211,   65, 1216,  622,  481,  668, 1217,  248,  922,
 1224,  922,  622, 1026, 1232,  493, 1235, 1236, 1237,  922,
 1238,   66, 1240,  235, 1241, 1245, 1246,  922, 1247, 1249,
  471, 1250, 1257,  922,  483, 1258,  922, 1259, 1260,  481,
 1292,  671,  669,  484,  670,  235,  672, 1262,  504,  494,
  504, 1263,  235, 1264,  808,  922,  922,  667,  504,  922,
 1265, 1266, 1267,  668,  922,  922,  922,  495,  922,  922,
 1268,  504,  922,  836, 1283, 1304,  922, 1311, 1318,  922,
  922,  922, 1315,  922, 1301, 1316,  235, 1317,  922,  922,
 1320,  922, 1319, 1323, 1326,  808,  808,  808,  808,  808,
 1332,  808, 1328,  922, 1334,  922, 1355,  922,  922,  514,
  922,   91, 1344,  808,  808,  808,  808, 1342, 1345,  922,
  671,  669, 1346,  670,  922,  672,  922,  922,  922, 1360,
 1347,  922, 1348, 1370,  922,  922, 1349, 1592, 1374,  667,
 1376,  922, 1377, 1381,  922,  668,  796,  808,  796,  504,
 1242, 1387, 1408,   92,  667, 1411,  796,  216,  922,  216,
  668,  922, 1407, 1417,  796,   93, 1418,  216, 1436, 1483,
  796,  504, 1485,  796, 1484, 1486, 1487,  922,  504,  109,
 1293,  671,  669,  922,  670, 1488,  672,  504,  922,  504,
   94,  811,  796,  796,  504,  667,  796,  504,  244,  922,
  922,  668,  922,  796, 1492,  796,  796, 1493,  922,  796,
  504, 1494,  504,  796, 1500, 1502,  796,  667,  796, 1506,
  796, 1507, 1508,  668, 1510,  796,  796,  248,  796,  248,
 1511, 1512,  811,  811,  811,  811,  811,  248,  811,  244,
 1513, 1516,  244, 1517,  796,  796, 1518,  796, 1519, 1520,
  811,  811,  811,  811, 1521, 1522,  245,  244,  216,   95,
 1523,  796, 1524,  796,  796,  796, 1525, 1532,  796,   96,
 1533,  796,  796,  671,  669, 1546,  670, 1548,  672,  667,
  216,  796, 1550,  224,  811,  668,  107,  216,  504, 1551,
 1629, 1552, 1553, 1554,   97,  796, 1555,  245,  796, 1556,
  245, 1294,  671,  669, 1562,  670, 1563,  672, 1565, 1577,
  504, 1570,   98, 1564,  796,  245,  808,  504,  808, 1582,
  796,  216, 1583, 1587,  224,  796,  808,  224,  248,  671,
  669, 1606,  670, 1625,  672, 1590,  796,  796, 1636,  796,
  808, 1644,  224,  808, 1650,  796, 1653, 1657, 1646, 1665,
  248,  504, 1658, 1421, 1669, 1670, 1643,  248,  667, 1642,
 1680,  812,  808,  808,  668, 1686,  808, 1682, 1295,  671,
  669, 1691,  670,  808,  672,  808,  808, 1692, 1693,  808,
 1696, 1634, 1707,  808, 1710, 1711,  808,    1,  808,  597,
  808,  248,   27,   29,  717,  808,  808,  196,  808,  351,
  261,  142,  812,  812,  812,  812,  812,  502,  812,  605,
  259,  438,   79,  905,  808,  808,  206,  808,   91,  667,
  812,  812,  812,  812,  186,  668, 1296,  671,  669,  502,
  670,  808,  672,  808,  808,  808,  266,  378,  808,  502,
  904,  808,  808,  637,  187,  265,  352,  635,  631,  633,
  674,  808,  673,  811,  812,  811,  216,  271,  668,  675,
   92,  308,  315,  811,  626,  808,  306,  684,  808, 1297,
  671,  669,   93,  670,   25,  672,  244,   28,  244,   35,
  811, 1412,  671,  669,  808,  670,  244,  672, 1273,  389,
  808,  380,  112,  379,  856,  808, 1233,   94,  806,  811,
  811, 1031,  804,  811,  220, 1231,  808,  808, 1229,  808,
  811,  667,  811,  811,  501,  808,  811,  668,  771, 1221,
  811,  546, 1496,  811, 1212,  811,  487,  811, 1162,  941,
  474, 1222,  811,  811,  245,  811,  245,   45,  516,  806,
  667,  806,  806,  806,  245, 1585,  668,  517,   46,  974,
 1641,  811,  811, 1474,  811,   47, 1480,  806,  806,  806,
  806,  235,  752,  224, 1647, 1645,   95,  667,  811,  967,
  811,  811,  811,  668, 1336,  811,   96,  244,  811,  811,
   48, 1679, 1705, 1604, 1023, 1375, 1674,  621,  811, 1490,
 1022,  806, 1413,  671,  669, 1649,  670, 1223,  672,  244,
  801,   97,  811, 1499,  525,  811,  244,  667, 1420,  671,
  669,  507,  670,  668,  672,  756,  498, 1012, 1367,   98,
  793,  811,  114,  812, 1003,  812,  466,  811,  692,  932,
  688,  927,  811,  812,  928,  245,  945, 1140,  261, 1581,
  244, 1537, 1685,  811,  811,   49,  811, 1715, 1656,  701,
  812,  620,  811,  862, 1103, 1253,    0,  245, 1303,    0,
    0,    0,  235,    0,  245,  667,    0,    0,  805,  812,
  812,  668,    0,  812,    0,    0,    0,   50,    0,    0,
  812,   51,  812,  812,  235,    0,  812,    0,    0,    0,
  812,  235,   52,  812,    0,  812,    0,  812,  245,    0,
    0,    0,  812,  812,    0,  812,    0,    0,  667,  805,
    0,  805,  805,  805,  668,    0,    0,    0,    0,    0,
  667,  812,  812,    0,  812,  235,  668,  805,  805,  805,
  805,    0,    0,    0,    0,    0,    0,    0,  812,    0,
  812,  812,  812,    0,    0,  812,    0,    0,  812,  812,
    0,    0,    0,    0,    0,    0,    0,    0,  812,    0,
  806,  805,  806,    0,    0,    0,    0,    0,    0,    0,
  806,    0,  812,    0,    0,  812,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  806,    0,    0,
    0,  812,    0,    0,    0,  189,    0,  812,    0,    0,
    0,    0,  812,    0,    0,  807,  806,  806,    0,    0,
  806,    0,    0,  812,  812,    0,  812,  806,    0,  806,
  806,    0,  812,  806,    0,    0,    0,  806,    0,    0,
  806,  667,  806,    0,  806,    0,    0,  668,    0,  806,
  806,    0,  806,    0,    0,    0,  807,  667,  807,  807,
  807,    0,    0,  668,  189,    0,    0,    0,  806,  806,
    0,  806,    0,    0,  807,  807,  807,  807,    0,    1,
    0,    0,    0,    0,    0,  806,    0,  806,  806,  806,
    0,    0,  806,    0,    0,  806,  806,    0,    0,    0,
    0,    2,    0,    0,    0,  806,    0,    0,  807,    3,
    0,    0,    0,    0,  174,    0,    4,    0,    5,  806,
    6,    0,  806,    0,    0,    7,    0,    0,    0,    0,
    0,    0,    8,    0,    0,    0,    0,    0,  806,    0,
  805,    0,  805,    0,  806,    0,    9,    0,    0,  806,
  805,    0,    0,    0,    0,  174,    0,   10,  174,    0,
  806,  806,    0,  806,    0,    0,    0,  805,    0,  806,
    0,    0,    0,  174,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  810,  805,  805,    0,    0,
  805,    0,    0,    0,  170,    0,    0,  805,    0,  805,
  805,    0,    0,  805,    0,    0,    0,  805,    0,    0,
  805,    0,  805,    0,  805,    0,    0,    0,    0,  805,
  805,    0,  805,    0,   11,    0,  810,    0,  810,  810,
  810,   12,    0,    0,   13,    0,   14,   15,  805,  805,
    0,  805,    0,    0,  810,  810,  810,  810,    0,    0,
    0,    0,    0,  170,    0,  805,    0,  805,  805,  805,
    0,   16,  805,  189,    0,  805,  805,    0,    0,    0,
  180,    0,    0,    0,    0,  805,    0,  807,  810,  807,
    0,    0,    0,    0,  189,    0,    0,  807,    0,  805,
    0,    0,  805,    0,    0,    0,    0,    0,    0,    0,
    0,  181,    0,    0,  807,    0,  189,    0,  805,    0,
   17,    0,  189,    0,  805,    0,    0,    0,    0,  805,
    0,    0,    0,  807,  807,    0,    0,  807,    0,  180,
  805,  805,    0,  805,  807,  189,  807,  807,    0,  805,
  807,    0,    0,    0,  807,    0,    0,  807,    0,  807,
    0,  807,    0,    0,  189,    0,  807,  807,    0,  807,
  181,  603,  189,  189,  416,    0,  417,    0,    0,  189,
    0,    0,  174,    0,    0,  807,  807,    0,  807,  419,
    0,    0,    0,    0,  251,    0,    0,  189,    0,    0,
    0,    0,  807,  174,  807,  807,  807,    0,    0,  807,
    0,    0,  807,  807,    0,    0,    0,    0,    0,    0,
    0,   77,  807,    0,    0,  174,    0,    0,   78,    0,
    0,  174,   79,   80,  189,    0,  807,    0,    0,  807,
    0,   81,    0,    0,    0,  189,    0,  603,    0,    0,
  416,    0,  417,   82,  174,  807,    0,  810,    0,  810,
    0,  807,  170,    0,    0,  419,  807,  810,    0,    0,
  251,    0,    0,  174,    0,    0,    0,  807,  807,    0,
  807,    0,  174,  170,  810,    0,  807,    0,  174,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  810,  810,  170,  174,  810,    0,    0,
    0,  170,    0,    0,  810,    0,  810,  810,   83,    0,
  810,    0,    0,  647,  810,  647,  647,  810,  647,  810,
    0,  810,    0,    0,  170,   84,  810,  810,  180,  810,
    0,  647,    0,  174,    0,    0,  647,    0,    0,    0,
   85,    0,    0,  170,   86,  810,  810,    0,  810,  180,
    0,    0,  170,    0,    0,   87,    0,    0,  170,  181,
    0,    0,  810,    0,  810,  810,  810,    0,    0,  810,
    0,  180,  810,  810,   88,    0,  170,  180,    0,    0,
  181,    0,  810,    0,    0,    0,    0,    0,  392,    0,
    0,    0,    0,    0,    0,    0,  810,  393,    0,  810,
  180,    0,  181,    0,    0,    0,    0,    0,  181,    0,
    0,  394,    0,  170,  599,  810,    0,  349,  395,  180,
    0,  810,    0,    0,    0,    0,  810,    0,  180,    0,
    0,  181,    0,    0,  180,    0,  600,  810,  810,    0,
  810,    0,    0,    0,    0,    0,  810,    0,  396,    0,
  181,    0,  180,    0,    0,    0,    0,  781,    0,  181,
    0,    0,    0,    0,  392,  181,    0,    0,    0,    0,
    0,    0,    0,  393,    0,    0,  397,  398,    0,    0,
    0,    0,    0,  181,    0,    0,    0,  394,  399,  180,
    0,  620,  400,  349,  395,    0,    0,    0,  781,    0,
  601,  781,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,    0,    0,    0,  781,    0,    0,    0,
  181,    0,    0,    0,  396,    0,    0,    0,    0,    0,
    0,    0,  620,  647,    0,  620,    0,    0,    0,    0,
  647,    0,    0,  602,    0,    0,    0,    0,    0,  647,
  620,    0,  397,  398,    0,  401,    0,    0,    0,    0,
    0,    0,    0,  647,  399,  402,    0,    0,  400,  647,
  647,    0,    0,    0,    0,    0,  601,  647,    0,  351,
  352,  353,  403,  179,  180,    0,    0,    0,    0,    0,
    0,    0,    0,  404,    0,    0,    0,    0,    0,    0,
  647,    0,  354,  355,  405,  406,  407,  356,  357,  408,
  409,    0,  410,    0,    0,  661,    0,  411,  412,  602,
  413,  414,  415,    0,    0,    0,  647,    0,  647,  647,
  645,  401,  645,  645,    0,  645,    0,    0,    0,    0,
  647,  402,    0,    0,  647,    0,    0,    0,  645,    0,
    0,    0,    0,  645,    0,  351,  352,  353,  403,  179,
  180,    0,    0,    0,    0,    0,    0,    0,    0,  404,
    0,    0,    0,    0,    0,    0,    0,    0,  354,  355,
  405,  406,  407,  356,  357,  408,  409,    0,  410,    0,
    0,    0,    0,  411,  412,    0,  413,  414,  415,    0,
    0,    0,    0,    0,    0,    0,  603,  647,    0,  416,
    0,  417,    0,    0,    0,    0,    0,  647,    0,  781,
    0,    0,    0,    0,  419,    0,    0,    0,    0,  251,
    0,  647,  647,  647,  647,  647,  647,    0,    0,    0,
    0,    0,    0,    0,    0,  647,    0,    0,    0,    0,
    0,    0,    0,    0,  647,  647,  647,  647,  647,  647,
  647,  647,  647,    0,  647,    0,    0,    0,    0,  647,
  647,    0,  647,  647,  647,    0,  781,    0,    0,  781,
    0,    0,  418,    0,    0,  416,  781,  417,    0,  781,
    0,    0,    0,  781,    0,    0,    0,    0,  781,    0,
  419,  781,    0,    0,    0,  251,    0,    0,    0,    0,
  620,    0,    0,  620,    0,    0,    0,  781,    0,    0,
  620,    0,    0,  620,    0,    0,    0,  620,    0,    0,
    0,    0,  620,    0,    0,  620,    0,    0,    0,    0,
    0,  781,    0,    0,  781,  781,    0,    0,    0,    0,
  645,  620,    0,    0,  781,    0,    0,  645,    0,    0,
    0,    0,    0,    0,    0,    0,  645,    0,    0,    0,
    0,  781,    0,    0,  547,  620,    0,    0,  548,  620,
  645,    0,    0,    0,    0,    0,  645,  645,  620,    0,
    0,    0,    0,  781,  645,    0,    0,  549,  781,    0,
  550,    0,    0,    0,    0,  620,    0,    0,    0,    0,
  781,    0,  781,    0,    0,    0,    0,  645,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  620,  392,    0,    0,    0,    0,    0,    0,
    0,  551,  393,  645,  620,  645,  645,  552,  553,  554,
    0,  555,  556,  557,    0,  558,  394,  645,    0,    0,
    0,  645,  349,  395,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  559,    0,  560,    0,    0,
    0,  600,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  396,    0,    0,    0,    0,    0,    0,
    0,    0, 1042,    0,    0, 1043,    0,    0,  561,  392,
    0,    0,    0,    0,    0,    0,    0,    0,  393,    0,
    0,  397,  398,    0,  645,  562,    0,    0,    0,    0,
    0,    0,  394,  399,  645,    0,    0,  400,  349,  395,
    0,  418,    0,    0,  416,  601,  417,  563,  645,  645,
  645,  645,  645,  645,    0,    0,    0,    0,    0,  419,
    0,    0,  645,    0,  251,    0,    0,    0,    0,  396,
    0,  645,  645,  645,  645,  645,  645,  645,  645,  645,
    0,  645,  564,  565,    0,    0,  645,  645,  602,  645,
  645,  645,    0,    0,    0,    0,    0,  397,  398,  566,
  401,    0,    0,    0,    0,    0,    0,    0,    0,  399,
  402,    0,    0,  400,    0,    0,    0,  418,    0,    0,
  416,    0,  417,    0,  351,  352,  353,  403,  179,  180,
    0,    0,    0,    0,    0,  419,    0,    0,  404,    0,
  251,    0,    0,    0,    0,    0,    0,  354,  355,  405,
  406,  407,  356,  357,  408,  409,    0,  410,    0,    0,
    0,    0,  411,  412,    0,  413,  414,  415, 1044,    0,
    0,    0,    0,    0,    0,    0,  401,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  402,    0,    0,    0,
    0,    0,    0,  418,    0,    0,  416,    0,  417,    0,
  351,  352,  353,  403,  179,  180,    0,    0,    0,    0,
    0,  419,    0,    0,  404,    0,  251, 1334,    0,    0,
    0,    0,    0,  354,  355,  405,  406,  407,  356,  357,
  408,  409,  214,  410,    0,    0,  214,    0,  411,  412,
    0,  413,  414,  415,    0,    0,    0,    0,    6,    0,
    0,  214,    0,    0,    0,  214,    0,    0,  214, 1446,
 1447, 1052, 1448,    0, 1043, 1449,    0,    0,  392,    0,
    0,    0,    0,    0,    0,    0,    0,  393,    0, 1450,
    0,    0,    0,    0,    0, 1451,    0,    0,  617,    0,
    0,  394,    0,    0,    0,    0,    0,  349,  395,  214,
    0,    0,    0,    0,    0,  214,  214,  214,    0,  214,
  214,  214,    0,  214,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  396,  617,
    0,    0,  617,  214,    0,  214,    0, 1056,    0,    0,
 1043,    0,    0,    0,  392, 1452,    0,  617,    0,    0,
    0,    0,    0,  393,    0,    0,  397,  398,    0,    0,
    0,    0,    0,    0,   14,    0,  214,  394,  399,    0,
    0,   78,  400,  349,  395,    0,    0,    0,    0, 1453,
    0,    0,    0,  214,    0,    0,    0,  733,    0,   16,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1454,    0,    0,    0,  396,  214,    0,  467,    0,    0,
    0,    0,    0, 1064,    0,    0, 1043,    0,    0,    0,
  392,    0,    0,    0,    0,    0,    0, 1044,  733,  393,
    0,  733,  397,  398,    0,  401, 1455,    0,    0,    0,
  214,  214,    0,  394,  399,  402,  733,    0,  400,  349,
  395,  418,    0,    0,  416,    0,  417,  214,    0,  351,
  352,  353,  403,  179,  180,    0,    0,    0,    0,  419,
    0,    0,    0,  404,  251,    0,    0,    0,    0,    0,
  396,    0,  354,  355,  405,  406,  407,  356,  357,  408,
  409,    0,  410,    0,    0,    0,    0,  411,  412,    0,
  413,  414,  415, 1044,    0,    0,    0,    0,  397,  398,
    0,  401,    0,    0,    0,    0,    0,    0,    0,    0,
  399,  402,    0,  418,  400,    0,  416,    0,  417,    0,
    0,    0,    0,    0,    0,  351,  352,  353,  403,  179,
  180,  419,    0,    0,    0,    0,  251,    0,    0,  404,
    0,    0,    0,    0,    0,    0,    0,    0,  354,  355,
  405,  406,  407,  356,  357,  408,  409,    0,  410,    0,
    0,    0,    0,  411,  412,    0,  413,  414,  415, 1044,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  617,    0,    0,
  617,  351,  352,  353,  403,  179,  180,  617,    0,    0,
  617,    0,    0,    0,  617,  404,    0,    0,    0,  617,
    0,    0,  617,    0,  354,  355,  405,  406,  407,  356,
  357,  408,  409,    0,  410,    0,    0,    0,  617,  411,
  412,    0,  413,  414,  415,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1067,  617,    0, 1043,    0,  617,    0,  392,    0,
    0,    0,    0,    0,    0,  617,    0,  393,    0,    0,
    0,    0,    0,    0, 1334,    0,    0,    0,    0,    0,
    0,  394,  617,    0,    0,    0,  733,  349,  395,  733,
    0,    0,    0,    0,    0,    0,  733,    0,    0,  733,
    0,    0,    0,  733,    0,    6,    0,    0,  733,  617,
    0,  733, 1557,    0,    0,    0, 1446, 1447,  396, 1448,
    0,  617, 1449, 1072,    0,    0, 1043,  733,    0,    0,
  392,    0,    0,    0,    0,    0, 1450,    0,  418,  393,
    0,  416, 1451,  417,    0,    0,  397,  398,    0,    0,
    0,  733,    0,  394,  733,  733,  419,    0,  399,  349,
  395,  251,  400,    0,  733,  903,  671,  669,    0,  670,
    0,  672,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  733,    0,    0,  834,  833,  835,    0,    0,    0,
  396,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1452,  733,    0,    0,  418,    0,  733,  416,
    0,  417,    0,    0,    0,    0,    0, 1044,  397,  398,
  733,   14,  733,    0,  419,  401,    0,    0,    0,  251,
  399,    0,    0,    0,  400,  402, 1453,    0,    0,  807,
    0,    0,    0,  548,    0,    0,   16,    0,    0,  351,
  352,  353,  403,  179,  180, 1558,    0, 1454,  808,    0,
    0,    0,  549,  404,  467,  550,    0,    0,    0,    0,
    0,    0,  354,  355,  405,  406,  407,  356,  357,  408,
  409,    0,  410,    0,    0,    0,    0,  411,  412, 1044,
  413,  414,  415, 1455,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,    0,  551,  402,    0,    0,
    0,    0,  552,  553,  554,    0,  555,  556,  557,    0,
  558,  351,  352,  353,  403,  179,  180,    0,    0,    0,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
  559,    0,  560,    0,  354,  355,  405,  406,  407,  356,
  357,  408,  409,    0,  410,    0,    0,    0, 1075,  411,
  412, 1043,  413,  414,  415,  392,    0,    0,    0,    0,
    0,    0,    0,  561,  393,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  418,    0,  446,  416,  394,  417,
  562,    0,    0,    0,  349,  395,  821,    0,    0,    0,
    0,    0,  419,    0,  667,    0,    0,  251,    0,    0,
  668,    0,  563,  822,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  396, 1078,    0,    0, 1043,
    0,    0,    0,  392,    0,    0,    0,    0,    0,    0,
    0,    0,  393,    0,    0,    0,    0,  564,  565,  823,
    0,    0,    0,  397,  398,    0,  394,    0,  824,    0,
    0,    0,  349,  395,  566,  399,  825,    0,  418,  400,
    0,  416,    0,  417,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  826,  419,  827,    0, 1384,
 1385,  251,    0,  396,    0, 1389, 1390,    0, 1392, 1393,
    0,  828,    0,  829,  830,  831, 1397, 1398, 1399, 1400,
    0, 1401, 1402, 1403, 1404, 1405, 1406,    0,    0,    0,
    0,  397,  398,    0, 1044,    0,    0,    0,    0,    0,
    0,    0,  401,  399,    0,    0,    0,  400,    0,    0,
    0,    0,  402,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  832,    0,  351,  352,  353,  403,
  179,  180,    0,    0,    0,    0,    0,    0,    0,    0,
  404,    0,    0,    0,    0,    0,    0,    0,    0,  354,
  355,  405,  406,  407,  356,  357,  408,  409,    0,  410,
    0,    0, 1044,    0,  411,  412,    0,  413,  414,  415,
  401,    0,    0,    0,    0,    0,    0,    0,    0,  547,
  402,  392,    0,  548,    0,    0,    0,    0,    0,    0,
  393,  736,    0,    0,  351,  352,  353,  403,  179,  180,
    0,    0,  549,    0,  394,  550,    0,    0,  404,    0,
  349,  395,    0,    0,    0,    0,    0,  354,  355,  405,
  406,  407,  356,  357,  408,  409,    0,  410,    0,    0,
    0,    0,  411,  412,    0,  413,  414,  415,    0,    0,
    0,  396,    0,    0,    0,    0,  551,    0,    0,    0,
    0,    0,  552,  553,  554,    0,  555,  556,  557,    0,
  558,    0,    0,    0,    0,  392,    0,  350,    0,  397,
  398,    0,    0,  916,  393,  916,  916,    0,  916,    0,
  559,  399,  560,    0,    0,  400,    0,    0,  394,    0,
    0,  916,    0,    0,  349,  395,  916,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  561,    0,    0,    0,    0,    0,  647,
    0,    0,  647,    0,  647,  396,    0,    0,    0,    0,
  562,    0,    0,    0,    0,    0,    0,  647,    0,    0,
    0,    0,  647,    0,    0,    0,    0,    0,  401,    0,
    0,  350,  563,  397,  398,    0,    0,    0,  402,    0,
    0,    0,    0,    0,    0,  399,    0,  184,    0,  400,
    0,    0,  351,  352,  353,  403,  179,  180,    0,    0,
    0,    0,    0,    0,    0,    0,  404,  564,  565,    0,
    0,    0,    0,    0,    0,  354,  355,  405,  406,  407,
  356,  357,  408,  409,  566,  410,    0,    0,    0,    0,
  411,  412,    0,  413,  414,  415,  661,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  401,    0,    0,    0,    0,    0,    0,  547,
    0,    0,  402,  548,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,  352,  353,  403,
  179,  180,  549,    0,    0,  550,    0,    0,    0,    0,
  404,    0,    0,    0,    0,    0,    0,    0,    0,  354,
  355,  405,  406,  407,  356,  357,  408,  409,    0,  410,
  300,    0,    0,    0,  411,  412,    0,  413,  414,  415,
  916,    0,    0,    0,    0,    0,  551,    0,    0,  916,
    0,    0,  552,  553,  554,    0,  555,  556,  557,    0,
  558,  300,    0,  916,    0,    0,    0,    0,  300,  916,
  916,    0,  300,  300,    0,  300,    0,    0,  300,  647,
  559,    0,  560,    0,    0,  418,  647,    0,  416,    0,
  417,    0,  300,    0,    0,  647,    0,    0,  300,    0,
  916,    0,    0,  419,    0,    0,    0,    0,  251,  647,
    0,    0,    0,  561,    0,  647,  647,    0,    0,    0,
    0,    0,    0,  647,    0,    0,  916,    0,  916,  916,
  562,  418,    0,    0,  416,    0,  417,    0,    0,    0,
  916,    0,    0,    0,  916,    0,  647,    0,    0,  419,
    0,    0,  563,    0,  251,    0,    0,    0,  300,    0,
    0,    0,    0,    0,    0,    0,    0,  184,    0,    0,
    0,    0,    0,    0,  647,  647,    0,  300,    0,    0,
    0,    0,    0,    0,    0,    0,  647,  564,  565,    0,
  647,    0,  300,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  300,    0,  566,    0,    0,  916,    0,    0,
    0,  300,    0,  300,    0,    0,    0,  916,    0,    0,
  300,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  916,  916,  916,  916,  916,  916,    0,    0,    0,
    0,    0,    0,    0,    0,  916,    0,    0,    0,  300,
    0,    0,    0,  647,  916,  916,  916,  916,  916,  916,
  916,  916,  916,  647,  916,    0,    0,    0,    0,  916,
  916,    0,  916,  916,  916,    0,    0,  647,  647,  647,
  647,  647,  647,    0,    0,    0,    0,    0,    0,    0,
    0,  647,    0,    0,    0,    0,    0,    0,    0,    0,
  647,  647,  647,  647,  647,  647,  647,  647,  647,    0,
  647,    0,  392,    0,    0,  647,  647,    0,  647,  647,
  647,  393,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  394,    0,    0,    0,    0,
    0,  349,  395,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  418,  392,    0,
  416,    0,  417,    0,    0,    0,    0,  393,    0,    0,
    0,    0,  396,    0,    0,  419,    0,    0,    0,    0,
  251,  394,    0,    0,    0,    0,    0,  349,  395,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  397,  398,    0,  418,  905,    0,  416,    0,  417,    0,
    0,    0,  399,  214,    0,    0,  400,  214,  396,    0,
    0,  419,    0,    0,    0,    0,  251,    0,    0,    0,
    0,    0,  214,    0,    0,    0,  214,    0,    0,  214,
    0,    0,    0,    0,    0,    0,  397,  398,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  399,    0,
    0,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  401,
  214,    0,    0,    0,    0,    0,  214,  214,  214,  402,
  214,  214,  214,    0,  214,    0,    0,  653,    0,    0,
    0,    0,    0,  351,  352,  353,  403,  179,  180,  661,
    0,    0,    0,    0,  214,    0,  214,  404,    0,    0,
    0,    0,    0,    0,    0,  401,  354,  355,  405,  406,
  407,  356,  357,  408,  409,  402,  410,    0,    0,    0,
    0,  411,  412,    0,  413,  414,  415,  214,    0,  351,
  352,  353,  403,  179,  180,    0,    0,    0,    0,    0,
    0,    0,    0,  404,  214,    0,    0,    0,    0,    0,
    0,    0,  354,  355,  405,  406,  407,  356,  357,  408,
  409,    0,  410,    0,  392,    0,  214,  411,  412,    0,
  413,  414,  415,  393,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  394,    0,    0,
    0,    0,    0,  349,  395,    0,    0,    0,    0,    0,
    0,  214,  214,    0,    0,    0,    0,    0,    0,  418,
  392,    0,  416,    0,  417,    0,    0,    0,  214,  393,
    0,    0,    0,    0,  396,    0,    0,  419,    0,    0,
    0,    0,  251,  394,    0,    0,    0,    0,    0,  349,
  395,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  350,    0,  397,  398,    0,  418,    0,    0,  416,    0,
  417,    0,    0,    0,  399,  127,    0,    0,  400,  127,
  396,    0,    0,  419,    0,    0,    0,    0,  251,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  127,    0,
    0,  127,    0,    0,    0,    0,    0,    0,  397,  398,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  399,    0,    0,    0,  400,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  401,  127,    0,    0,    0,    0,    0,  127,  127,
  127,  402,  127,  127,  127,    0,  127,    0,    0,    0,
    0,    0,    0,    0,    0,  351,  352,  353,  403,  179,
  180,    0,    0,    0,    0,    0,  127,    0,  127,  404,
    0,    0,    0,    0,    0,    0,    0,  401,  354,  355,
  405,  406,  407,  356,  357,  408,  409,  402,  410,    0,
    0,    0,    0,  411,  412,    0,  413,  414,  415,  127,
    0,  351,  352,  353,  403,  179,  180,    0,    0,    0,
    0,    0,    0,    0,    0,  404,  127,    0,    0,    0,
    0,    0,    0,    0,  354,  355,  405,  406,  407,  356,
  357,  408,  409,    0,  410,    0,  392,    0,  127,  411,
  412,    0,  413,  414,  415,  393,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  394,
    0,    0,    0,    0,    0,  349,  395,    0,    0,    0,
    0,    0,    0,  127,  127,    0,    0,    0,    0,    0,
    0,  418,  392,    0,  416,    0,  417,    0,    0,    0,
  127,  393,    0,    0,    0,    0,  396,    0,    0,  419,
    0,    0,    0,    0,  251,  394,    0,    0,    0,    0,
    0,  349,  395,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  397,  398,    0, 1626,    0,    0,
  416,    0,  417,    0,    0,    0,  399,    0,    0,    0,
  400,    0,  396,    0,    0,  419,    0,    0,    0,    0,
  251,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  397,  398,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  399,    0,    0,    0,  400,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  401,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  402,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1070,    0,    0,  351,  352,  353,
  403,  179,  180, 1242,    0,    0,    0,    0,    0,    0,
    0,  404,    0,    0,    0,    0,    0,    0,    0,  401,
  354,  355,  405,  406,  407,  356,  357,  408,  409,  402,
  410,    0,    0,    0,    0,  411,  412,    0,  413,  414,
  415,    0,    0,  351,  352,  353,  403,  179,  180,    0,
    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,
    0,    0,    0,    0,    0,    0,  354,  355,  405,  406,
  407,  356,  357,  408,  409,    0,  410,    0,  392,    0,
    0,  411,  412,    0,  413,  414,  415,  393,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  394,    0,    0,    0,    0,    0,  349,  395,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  418,  392,    0,  416,    0,  417,    0,
    0,    0,    0,  393,    0,    0,    0,    0,  396,    0,
    0,  419,    0,    0,    0,    0,  251,  394,    0,    0,
    0,    0,    0,  349,  395,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  397,  398,    0,  916,
    0,    0,  916,    0,  916,    0,    0,    0,  399,    0,
    0,    0,  400,    0,  396,    0,    0,  916,    0,    0,
    0,    0,  916,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  350,    0,  397,  398,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  399,    0,    0,    0,  400,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  401,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  402,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1255,    0,    0,  351,
  352,  353,  403,  179,  180,    0,    0,    0,    0,    0,
    0,    0,    0,  404,    0,    0,    0,    0,    0,    0,
    0,  401,  354,  355,  405,  406,  407,  356,  357,  408,
  409,  402,  410,    0,    0,    0,    0,  411,  412,    0,
  413,  414,  415,    0,    0,  351,  352,  353,  403,  179,
  180,    0,    0,  750,    0,    0,    0,    0,    0,  404,
    0,    0,    0,    0,  751,    0,    0,    0,  354,  355,
  405,  406,  407,  356,  357,  408,  409,    0,  410,    0,
  392,    0,    0,  411,  412,    0,  413,  414,  415,  393,
    0,    0,    0,    0,  750,    0,    0,  750,    0,    0,
    0,    0,    0,  394,    0,  751,    0,    0,  751,  349,
  395,    0,  750,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  751,    0,    0,  916,    0,    0,    0,
    0,    0,    0,    0,    0,  916,    0,    0,    0,    0,
  396,  775,    0,    0,    0,    0,    0,  754,    0,  916,
    0,    0,    0,    0,    0,  916,  916,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  397,  398,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  399,    0,  775,    0,  400,  775,  916,    0,  754,    0,
    0,  754,    0,    0,    0,    0,    0,    0,    0,    0,
  775,    0,    0,    0,    0,    0,  754,    0,    0,    0,
    0,    0,    0,    0,  916,  916,    0,    0,    0,    0,
    0,    0,    0,    0,  752,    0,  916,    0,    0,    0,
  916,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,    0,  752,    0,    0,  752,    0,
    0,  351,  352,  353,  403,  179,  180,    0,    0,    0,
    0,    0,    0,  752,    0,  404,    0,    0,    0,    0,
    0,    0,    0,  916,  354,  355,  405,  406,  407,  356,
  357,  408,  409,  916,  410,    0,    0,    0,  753,  411,
  412,    0,  413,  414,  415,  750,    0,  916,  916,  916,
  916,  916,  916,    0,    0,    0,  751,    0,    0,    0,
    0,  916,    0,    0,    0,    0,    0,    0,    0,    0,
  916,  916,  916,  916,  916,  916,  916,  916,  916,  753,
  916,    0,  753,    0,    0,  916,  916,    0,  916,  916,
  916,    0,    0,    0,    0,    0,    0,  753,    0,    0,
    0,  783,  750,    0,    0,  750,    0,    0,    0,    0,
    0,    0,  750,  751,    0,  750,  751,    0,    0,  750,
    0,    0,    0,  751,  750,    0,  751,  750,    0,    0,
  751,    0,    0,  775,    0,  751,    0,    0,  751,  754,
    0,    0,  783,  750,    0,  783,    0,    0,    0,    0,
    0,  747,    0,    0,  751,    0,    0,    0,    0,    0,
  783,    0,    0,    0,    0,    0,    0,  750,    0,    0,
  750,  750,    0,    0,    0,    0,    0,    0,  751,    0,
  750,  751,  751,    0,  748,    0,    0,    0,    0,    0,
  775,  751,  747,  775,    0,  747,  754,  750,    0,  754,
  775,    0,    0,  775,    0,    0,  754,  775,  751,  754,
  747,    0,  775,  754,    0,  775,  752,    0,  754,  750,
    0,  754,    0,    0,  750,  748,    0,    0,  748,    0,
  751,  775,    0,    0,    0,  751,  750,  754,  750,    0,
    0,    0,    0,  748,    0,    0,    0,  751,    0,  751,
    0,    0,    0,    0,    0,  775,    0,    0,  775,  775,
    0,  754,    0,    0,  754,  754,    0,    0,  775,    0,
    0,    0,    0,  752,  754,    0,  752,    0,  749,    0,
    0,    0,    0,  752,    0,  775,  752,    0,    0,    0,
  752,  754,    0,    0,    0,  752,    0,    0,  752,  782,
  753,    0,    0,    0,    0,    0,    0,  775,    0,    0,
    0,    0,  775,  754,  752,    0,    0,    0,  754,  749,
    0,    0,  749,    0,  775,    0,  775,    0,  776,    0,
  754,    0,  754,    0,    0,    0,    0,  749,  752,    0,
  782,  752,  752,  782,    0,    0,    0,    0,    0,    0,
    0,  752,    0,    0,    0,    0,    0,  753,  782,    0,
  753,    0,  784,  783,    0,    0,    0,  753,  752,  776,
  753,    0,  776,    0,  753,    0,    0,    0,    0,  753,
    0,    0,  753,    0,    0,    0,    0,  776,    0,    0,
  752,    0,    0,    0,    0,  752,    0,    0,  753,    0,
    0,    0,    0,  784,    0,    0,  784,  752,    0,  752,
    0,    0,    0,  747,    0,    0,    0,    0,    0,    0,
  783,  784,  753,  783,    0,  753,  753,    0,    0,    0,
  783,    0,    0,  783,    0,  753,    0,  783,    0,    0,
    0,    0,  783,    0,    0,  783,  748,    0,    0,    0,
    0,    0,  753,    0,    0,    0,    0,    0,  785,    0,
    0,  783,    0,    0,    0,    0,    0,    0,    0,    0,
  747,    0,    0,  747,  753,    0,    0,    0,    0,  753,
  747,    0,    0,  747,    0,  783,    0,  747,  783,  783,
    0,  753,  747,  753,    0,  747,    0,    0,  783,  785,
    0,    0,  785,  748,    0,    0,  748,    0,  773,    0,
    0,  747,    0,  748,    0,  783,  748,  785,    0,    0,
  748,    0,    0,    0,    0,  748,    0,    0,  748,    0,
    0,    0,    0,    0,    0,  747,    0,  783,  747,  747,
  749,    0,  783,    0,  748,    0,    0,    0,  747,  773,
    0,    0,  773,    0,  783,    0,  783,    0,    0,    0,
    0,  782,    0,    0,    0,  747,    0,  773,  748,    0,
    0,  748,  748,    0,    0,    0,    0,    0,    0,    0,
    0,  748,    0,    0,    0,  777,    0,  747,    0,    0,
  776,    0,  747,    0,    0,    0,    0,  749,  748,    0,
  749,    0,    0,    0,  747,    0,  747,  749,    0,    0,
  749,    0,    0,    0,  749,    0,    0,    0,  782,  749,
  748,  782,  749,    0,  784,  748,  777,    0,  782,  777,
    0,  782,    0,    0,    0,  782,    0,  748,  749,  748,
  782,    0,    0,  782,  777,    0,    0,  776,    0,    0,
  776,    0,    0,    0,    0,    0,    0,  776,    0,  782,
  776,    0,  749,    0,  776,  749,  749,    0,    0,  776,
    0,    0,  776,    0,    0,  749,    0,    0,    0,    0,
    0,  784,    0,  782,  784,    0,  782,  782,  776,    0,
    0,  784,  749,    0,  784,    0,  782,    0,  784,    0,
    0,    0,    0,  784,    0,    0,  784,    0,    0,    0,
    0,    0,  776,  782,  749,  776,  776,    0,    0,  749,
  785,    0,  784,    0,    0,  776,    0,  786,    0,    0,
    0,  749,    0,  749,    0,  782,    0,    0,  774,    0,
  782,    0,  776,    0,    0,    0,  784,    0,    0,  784,
  784,    0,  782,    0,  782,    0,    0,    0,    0,  784,
    0,    0,    0,    0,  776,    0,    0,    0,  786,  776,
  773,  786,  778,    0,    0,    0,  784,  785,    0,  774,
  785,  776,  774,  776,    0,    0,  786,  785,    0,    0,
  785,    0,    0,    0,  785,    0,    0,  774,  784,  785,
    0,    0,  785,  784,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  778,    0,  784,  778,  784,  785,    0,
    0,    0,    0,    0,    0,    0,    0,  773,    0,    0,
  773,  778,    0,    0,    0,    0,    0,  773,    0,    0,
  773,    0,  785,    0,  773,  785,  785,  777,    0,  773,
    0,    0,  773,    0,    0,  785,    0,    0,    0,    0,
    0,    0,  671,  669,    0,  670,    0,  672,  773,    0,
    0,    0,  785,    0,    0,    0,    0,    0,    0,    0,
  834,  833,  835,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  773,    0,  785,  773,  773,    0,    0,  785,
    0,    0,    0,    0,  777,  773,    0,  777,    0,    0,
    0,  785,    0,  785,  777,    0,    0,  777,    0,    0,
    0,  777,  773,    0,    0,    0,  777,    0,    0,  777,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  773,  777,    0,    0, 1334,  773,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  773,    0,  773,    0,    0,    0,    0,    0,  777,
    0,    0,  777,  777,    0,    0,    0,    0,    0,    6,
    0,    0,  777,    0,    0,    0, 1445,    0,    0,  786,
 1446, 1447,    0, 1448,    0,    0, 1449,    0,    0,  777,
  774,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1450,    0,    0,    0,    0,    0, 1451,    0,    0,    0,
    0,  777,    0,    0,    0,    0,  777,    0,    0,    0,
    0,    0,    0,    0,  778,    0,    0,    0,  777,    0,
  777,    0,    0,    0,    0,    0,  786,    0,    0,  786,
    0,    0,    0,    0,    0,    0,  786,  774,    0,  786,
  774,    0,    0,  786,    0,    0,    0,  774,  786,    0,
  774,  786,    0,    0,  774,    0, 1452,    0,    0,  774,
    0,    0,  774,    0,    0,    0,    0,  786,    0,    0,
    0,  778,  821,    0,  778,   14,    0,    0,  774,    0,
  667,  778,    0,    0,  778,    0,  668,    0,  778,  822,
 1453,  786,    0,  778,  786,  786,  778,    0,    0,    0,
   16,    0,  774,    0,  786,  774,  774,    0,    0,    0,
    0, 1454,  778,    0,    0,  774,    0,    0,  467,    0,
    0,  786,    0,    0,    0,  823,    0,    0,    0,    0,
    0,    0,  774,    0,  824,    0,  778,    0,    0,  778,
  778,    0,  825,  786,    0,    0,    0, 1455,  786,  778,
    0,    0,    0,    0,  774,    0,    0,    0,    0,  774,
  786,  826,  786,  827,    0,    0,  778,    0,    0,    0,
    0,  774,    0,  774,    0,    0,    0,  828,    0,  829,
  830,  831,    0,    0,    0,    0,    0,    0,  778,    0,
    0,    0,    0,  778,    0,    0,    0,    0,    0,  135,
    0,    0,    0,    0,    0,  778,    0,  778,  136,  137,
  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,    0,    0,  152,  153,  154,  155,
  832,  156,  523,    0,  157,  158,    0,    0,    0,    0,
    0,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,    0,    0,  152,
  153,  154,  155,  434,  156,    0,    0,  157,  158,    0,
    0,    0,    0,  434,  434,  434,  434,  434,  434,  434,
  434,  434,  434,  434,  434,  434,  434,  434,    0,    0,
  434,  434,  434,  434,    0,  434,    0,    0,  434,  434,
};
static short yycheck[] = {                                      16,
   57,   48,    4,   58,    4,   97,  126,    0,   56,   49,
  229,   57,   50,  286,  229,  115,  116,  471,  322,  330,
   60,  115,  116,   78,   62,  330,  477,  658,  601,  705,
  603,   63,  713,  506,  298,   82,  509,  515,   65,  326,
  300,  453,  515,   83,  259,   66,  972,  661,  965,  106,
   90,  108,  382,  644,   86,  972,  965,  132,   81,   76,
   87,    0,  595,  972,  965,  965, 1141,   88,   85,  107,
  344,  972,  972,  293,  902,   42,  237,   40,    0,    0,
  653,   45,   44,  175,  639,  246,   40,  127,   40,  772,
  128,   40,  973,   61,  279,   41,   44,  120,   44,   44,
  674,   58, 1097,  984,   58,   41,   40,   40,   40,    0,
  202,  702,   45,    0,  162, 1017,   84,   40,  710,   41,
   59,   45,   44,    0,   40,   42, 1007,   41,   59,   63,
 1173,   63,   41,   41,   45,  229,    0,   59,   59,   63,
  359,  189,   44,  193,  359,   44,  745,   44,   41,   45,
   41,  260,  250,   44, 1309,  388,  254,   61,    0,  279,
   44,  259,  264,   44,   44,   59,  286,  639,   59,  274,
  919,   45,   59, 1319,  231, 1218,    0,   41, 1319, 1178,
  263,   40,   59,  284, 1124,  321,    0, 1127,  492,  493,
  494,  495,  277,   45,   41,   59,   63,  235,  485,  287,
    0,  265,  329,   91,  515,  229,  244,    0,  273,  258,
  515,  288,  287,  374, 1319,  278,  263,   59, 1090, 1319,
 1092,    0,  279,  268,  678,    0, 1319,  288,    0,  267,
  313, 1530,  282,    0,   16,   59,  388,  321, 1196,  303,
 1001,  324,  299,    0,   41,   59,    0,   44,  262,  306,
   12,  308, 1154,  310,  518,  542,  313,  320,  307,   59,
  403,  346,  382,  836,  837,  359,   59,  356,   12,   41,
  861,    0,   44,  547,  338,  323,  341,  325,  260, 1322,
   59, 1207,    0,  456,   59,  262,  759,   59,  336,  441,
 1207,    0,   59,  340,   76,  308,  309,    0, 1207,  854,
  338,  437,   59,  446,  568,   59, 1207, 1207,  383,  418,
  865,  866, 1193,  403,   44,  413, 1615,  444,  416,  417,
  418,  366,  285,  260,  897,  382,  262,    0,  274,  244,
   59,    0,  370,  373,  461,  359,  461,    0,  401,  440,
 1339,   59,  264,  381,  344,  428,    0,  385,  388,   41,
   59,  113,  390,  269,  262, 1654,   59,    0,    0,  461,
    0, 1301,  467,   44,  310, 1305, 1194,  304,  780,  113,
  419,  258,   41,  387,  462,  463,  990,  976,  977,  442,
  297,  258,  854,  264,  461,    0,   59, 1533,    0,  277,
   59,  964, 1533,  865, 1143, 1353,   59,  301,   41,  321,
  461,   44,    0,  622,  493,   59,  305,  622,    0,  642,
  387, 1283,   41, 1408,   41, 1098,   59,   59,  332,   59,
  307, 1576,   41,    0,  321, 1024,  319,    0, 1533,  644,
  307,  322, 1024, 1533,  534,  708,  418,  321,  329,  452,
 1533,  332,  490,    0,   59,  336, 1489,   59, 1350,   41,
 1331,  387, 1213,  344, 1335,  319, 1337,  721,  515,  436,
  724,   59,  512,  310,  679,  329,  412,   59,  332,  360,
  631,  264,  395, 1047,  738,  390, 1157,  341, 1418,  387,
  411,  273,   59,  397,   41,  264,   59,  702,  397,  537,
 1371,  453,  437,  384,  461,  459, 1029,    0,  461,  432,
  720,  765,   59, 1134,  461,  603,  397,  461,  432,  461,
 1141,  459,  461, 1588,  699,  329,  455,  411,  332, 1202,
  441,  467,  486,  414,  388,  459,  459,  459,  622,  859,
  587,  453,  419,  397,  455,  459,  584,  585,    0,  461,
  814,   44,  419,  343,  461,  805,  644,  547,  459,  647,
  441, 1626, 1107,  455,  652,  397,   59, 1438, 1386,  657,
  658, 1442,  453,  459,  455,  332,  623,  535,  666, 1318,
  668,  669,  670,  671,  672,  455,  674,  441,  378,  699,
  432,  679,   44,  397,  684,  459,  410,  461,  708,  448,
 1163,  455,  459,  368,  596,  349,  596,   59,  622,  441,
    0, 1482,  642,    0,  702,  398,  406,  459, 1181,  409,
  264,  368,  384,  455,  343,  412,  716,  717, 1499,  398,
 1381,   42,  264,  646,   41,  425,  329,  441, 1242,  332,
  397,  349,  341,  262,    0,  262,    0,  329,  319,  453,
  332,  455,  699,  262,   44, 1326,  861,  704,  952,  378,
  319,  451,  264,  710,  384,  693,    0,  695, 1584,   59,
  264,    0,   59,  589,  712,  713,  264, 1584,  341,   59,
  257,  302,  341,  730,  441, 1584,  319,  406,  341,  410,
  409,  257,  843, 1584, 1584,  846,  259,  264,  455,  332,
 1281,  264, 1573,   59,  397,   59,  425,  270,  341,  308,
  309,  758,  759,  343,  319,  397,  970,  302,  339,  309,
  461,  339,  262,  302, 1018,   59,   42,  378,  982,  388,
   59,   47,  451,  821,  822,  823,  341,  319,  826,  827,
  828,  332,  830,  831,  832,  833,  834,  835,  441,  859,
  332,  816, 1006,  818,  398,  388,  965, 1320,  335,  341,
  965,  719,  455,  972,  397,  357,  398,  972,  387,  335,
  387,  258,  319,  861,  764,  803,  406, 1027,  387,  409,
  868,  869,  441,  871,  260,  873,  459,  777,  876,  877,
  878,  879,  880,  881,  341,  425,  398,    0,  449,  757,
 1421, 1590,    0, 1205,    0,  893,  388,  895,  441, 1211,
  398,  326,  859,  486,  844,  397,    0,  733,  412, 1287,
  307,  451,  455,  845,  814,  443,  742,  284,  304,  322,
  847,  398,  790,  791,  792,  398,  329,  848,  430,  332,
    0,  388,    0,  336,   40,   41,    0,  387,   44,  260,
  397,  344,  302,  452,    0,  262,   59, 1578,  443,  441,
 1110,   59,  452,   59,  443,   61, 1532,  360,    0,   41,
    0,    0,   44,  455,  320,   59, 1665,  329,  794,  398,
  332,   41,  473,   41,   44,  406,   44,   59,  301,  339,
    0,  384,  344,  304,  441,   91,  436, 1338,  406,   59,
 1689,   59,    0,   61,  397,   59,    0,    0,  455,   41,
  461,   41,   44,   59, 1004,   44,  431,  425,  437,    0,
 1361,  414,  278,  438,  280,  279,  419,   59,  385,   59,
   59, 1652,  419,  461, 1618,  264,  457, 1191,    0,  329,
  353,  444,  332,   41, 1221,  397,  349,  301,  441,   59,
  437,   44,  471,  459,  344,  401,  343, 1463,  461, 1047,
  453,   59,  455, 1684,  280,   59,   59, 1588, 1531, 1223,
  286, 1059, 1060, 1020, 1062, 1063,  330, 1024,   59, 1423,
  387, 1444, 1070,  440,  471, 1548, 1287,  461, 1551,  441,
    0,  378, 1287,  443,  418,  349,  442,   59, 1207, 1683,
  457,  453, 1207,  455,  358, 1626,  998,  397,  998,  343,
  364,    0, 1096, 1097, 1098,   42,   43, 1701,   45,  406,
   47,  445,  409,  379,  940,  344, 1114,  461,  382, 1323,
   42,   43, 1142,   45, 1122,   47, 1124, 1610,  425, 1127,
  404, 1129,    0,    0,  378, 1133, 1134, 1135, 1136,   59,
  369,  441,  378, 1141,    0, 1013, 1319,  421,  403,  462,
  463,  264,  258,  453,  451,  455,  264,  983, 1026, 1159,
   59, 1161,  406,  461, 1032,  409, 1281, 1650,  274,  344,
    0,  277,  278,   41,  280,  322,   44, 1341, 1176,  285,
  435,  425,  288,  419,    0,   41,    0,  459,   44,  336,
  258,   59,   59,  279,  369,  301, 1096, 1097,  427, 1682,
  264,  307,  265,   59,  310,  406,  274,  451,  461, 1157,
   40,   41, 1376,  360,   44,   42,   43, 1571,   45, 1219,
   47,    0,  278, 1639,  280,  319,  308,  309, 1612,   59,
  466,   61,  461,  301,    0, 1708,  278, 1352,  280,  307,
  303, 1239,  310,   59,  330,   59,  288,  341,  461,  319,
 1248,    0,  427, 1669, 1670, 1123,  457, 1255,  278,  329,
  280,   91,  332, 1617, 1648,   44,    0,  414,  260,    0,
  323,  341,  338,  379,  344,   41,    0, 1693,  364,  319,
   59,    0,    0, 1281, 1232,  398,    0,  461, 1236,  329,
  398, 1707,  332,   59,    0,  401,  382, 1681, 1200, 1319,
 1200,  341,  408, 1301,    0,  461,  412, 1305,  260,  375,
   59,  319,  304,  419, 1334, 1699,  319,   41,  388,  302,
   44,  329,  388,   44,  332,   59,    0,  397,   59,  411,
  260,  437, 1555,  341,  398,   59,  442,  379,  341,  260,
   59,   59,  384,  280,  412,   59,  379,    0,  388,  286,
   40,  419,  304,   59, 1352,   45,  339,  397,  280,  401,
 1533,  467,  323,   59,  286,  471,  408, 1590,  401,  437,
  452,  441,   93,   63,  304,  408, 1333, 1334, 1326,   44,
  388,  302, 1555,  453,  321,   59,    0, 1333,   41,  397,
  312,   44,    0,  314,   59,  357, 1394, 1395,  384,  467,
  442,  441,  272,  471, 1342,  329,   59,  258,   61,  442,
  261, 1634,  402,  453, 1408,    0,    0, 1590,  339,  289,
 1418,   42,   43, 1421,   45,  408,   47,   41,  258,  317,
  318,    0,  394,  441,  396,  418,    0,    0,   91, 1439,
    0,    0, 1665, 1463,  274,   59,    0,  277,  278,   41,
  280,   59,   44,  280, 1452,  285,  307,  419,  288,  286,
  443, 1634, 1327,  319,  334, 1584, 1689,   40,    0, 1584,
    0,  301,    0,  329,   59,   59,  332,  307,   41,  403,
  310,   44,  444,    0,  384,  341,  265,  408,  344, 1481,
   59, 1446, 1665,  363,  321,   59,   59,  418,   61,   59,
   59,   93,    0, 1501,   44,   59, 1463, 1372, 1408,  386,
    0, 1509,   45, 1533, 1414,  439, 1689,   41,   42,   43,
  444,   45,  443,   47,  303,  675,  450,   59,   91,   59,
  279,   59,  388,   42,   43, 1555,   45,  461,   47, 1477,
  319,  397,   59,   41,    0,  469,   44, 1545,  698,  379,
  384,    0,  301,  319, 1502,  384, 1449,  211, 1506,  709,
  430,   59,  341,   61,  418,  219,  332,  495,   45,   59,
 1590,  401,  419,  343, 1566,  341,  338,  338,  408,    0,
  322,  330,  412,    0,  355,  441,   63,  461,  288,  419,
 1588,  445,  319,   91,  336,   41,   41,  453,   44,   44,
  349,  301,  344,   59, 1544,  258,  296,  437,  378,  358,
   59,   44,  442,  375, 1634,  364,  274,    0,  360, 1639,
   41,  274,  388,   44,  277,  278,  388,  280, 1626,   40,
   44,  397,  285,  382,   44,  288,  406,  467,   59,  409,
   61,  471,   59, 1598,  425, 1665,  280,   93,  301, 1669,
 1670,  435,  286, 1570,  307,  425,  259,  310,   41,  280,
   93,   44,  459,  353,  461,  286, 1583,  270,  462, 1689,
   91,  353,  414, 1693,  264,  441,   59,  461,   61,   93,
  349,  451, 1639,   93,  466,  259,  468, 1707,  459,  358,
  461,  312,  317, 1610,  322,  258,  270,  379, 1600,  319,
 1600,  472, 1619,   41,   41,  319,   44,   44,  336,  494,
  495,  274, 1669, 1670, 1661,  278,  344,  280,   41,  338,
  491,   44,  285,  462,  463,  288,  379,  341,  499,  500,
  501,  461,  360, 1650,    0,  403, 1693,   41,  301,   41,
   44, 1658,   44,  322,  307,  453,   41,  310,  401,   44,
 1707,   41,  341,  262,   44,  408,  280,  336,   41,  412,
  258,   44,  286,  296,   41, 1682,  419,   44,  458,  459,
  460,  280,  462,  463,  388,   41,  274,  286,   44,  337,
  278,  360,  280,  397,  437,    0,  414,  285,   40,  442,
  288,  481,  482,   59,  321,   61,  486,  487,  392,  393,
   41,   42,   43,  301,   45,  384,   47,   41,   41,  307,
   44,   44,  310, 1090,  467, 1092,  379,  319,  471,  296,
  353,   41,   41,  403,   44,   44,   41,  441,  322,   44,
   41,   42,   43,  384,   45,  414,   47,  258,  401,  384,
   41,    0,  336,   44,   59,  408,   61,   42,   43,  412,
   45,   41,   47,  274,   44,   41,  419,  278,   44,  280,
  462,  463,  279,  362,  285,  437,  360,  288,  706,  707,
  458,  459,  460,  451,  437,  258,  353,  418,    0,  442,
  301,  379,   41,  435,  301,   44,  307,    0,  443,  310,
  384,  461,  358,  288,  277,  278,  412,  280,  486,  487,
   59,   44,  285,  401,  467,  288,  264,   61,  471,  470,
  408,  444,  373,  330,  412,  287,   40,  264,  301,   41,
  414,  419,   44,   40,  307,  458,  459,  460,   41,  462,
  463,   44,  349,  462,    0,   44,  462,   59,  461,  437,
  357,  358,  462,  321,  442,  437,   59,  364,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   44,  379,  403,
   40,   40,   40,  496,  497,  382,   40,   40,   40,  467,
   40,   40,   40,  471,  461,   41,   40,  394,   44,  396,
  401,  458,  459,  460,   40,  462,  463,  408,   40,   40,
   91,  412,  258,   59,  321,  429,  379,   46,  419,   44,
   44,  643,  419,  645,  481,  482,  648,  649,  650,  486,
  487,  277,  278,   46,  280,   61,  437,   40,  401,  285,
  280,  442,  288,   44,  826,  408,  828,  444,  830,  831,
   46,  833,  834,  835,  417,  301,  419,    0,  383,  280,
  349,  307,   44,  258,  301,  286,  467,  278,  278,  461,
  471,   41,   42,   43,  437,   45,  264,   47,  398,  442,
    0,  437,  471,  278,  398,  280,  459,  262,  277,  280,
  285,  448,  400,  288,  448,  286,   40,   40,   41,   42,
   43,   44,   45,   46,   47,  280,  301,  350,  471,   40,
    0,  286,  307,   91,   40,   40,   59,   60,   61,   62,
  264,   41,  384,   44,   44,  412,  390,  383,   41,   42,
   43,   40,   45,  379,   47,   40,  437,  465,  318,   59,
  473,  474,  475,  476,  477,  478,  479,  480,   91,   40,
   93,   41,  321,  321,   44,  401,   46,  295,  452,   41,
  453,  461,  408,  461,  449,  264,   40,  459,  306,   59,
  277,   61,   40,  419,  274,  313,  278,  301,  280,  285,
  319,  345,  345,  322,  379,  278,  288,  280,  326,    0,
  329,  437,  285,  332,    0,  288,  442,  336,  278,  301,
  387,  387,  341,  387,  419,  344,  401,  301,  301,  418,
   41,   42,   43,  408,   45,  417,   47,   40,  419,    0,
  357,  360,   40,  274,  419,  471,   42,   43,   44,   45,
   41,   47,  278,   44,  280,   41,   42,   43,   44,   45,
   40,   47,  437,  461,  386,  384,   44,  442,   59,  388,
  368,   44,  321,   59,   60,   61,   62,  264,  397,    0,
   41,   41,   44,   44,  321,  403,   41,   42,   43,  280,
   45,   44,   47,   40,  279,  414,  471,  379,   59,   44,
   44,  266,  420,   40,  329,  300,  379,   93,   41,   42,
   43,   40,   45,  264,   47,  441,  301,  435,  423,  401,
   41,  439,  441,   44,  442,  461,  408,   41,  401,   41,
  280,   58,  450,   41,  453,  408,  286,   41,   59,  262,
  455,  264,  461,  395,  310,  330,  493,  310,   41,  272,
   41,  469,   40,  379,   40,  353,   40,  280,   40,   40,
  442,   40,   40,  286,  349,   40,  289,   40,   40,  442,
   41,   42,   43,  358,   45,  401,   47,   40,  278,  364,
  280,   40,  408,   40,    0,  308,  309,  280,  288,  312,
   40,   40,   40,  286,  264,  265,  319,  382,  321,  322,
  328,  301,  325,  262,   44,  309,  329,   41,  344,  332,
  280,  334,  389,  336,  436,  389,  442,  389,  341,  342,
  332,  344,  274,  423,  391,   41,   42,   43,   44,   45,
  447,   47,  392,  303,  271,  305,   41,  360,  361,  288,
  363,  260,  387,   59,   60,   61,   62,  408,  387,  319,
   42,   43,  387,   45,  377,   47,  379,  380,  381,  379,
  387,  384,  387,   41,  387,  388,  387,   59,  278,  280,
   40,  341,   41,   41,  397,  286,  262,   93,  264,  379,
  418,   41,  437,  302,  280,   41,  272,  278,  411,  280,
  286,  414,  386,  309,  280,  314,  436,  288,  397,  443,
  286,  401,  443,  289,  339,  302,  339,  430,  408,  328,
   41,   42,   43,  436,   45,  302,   47,  278,  441,  280,
  339,    0,  308,  309,  285,  280,  312,  288,    0,  452,
  453,  286,  455,  319,   41,  321,  322,   41,  461,  325,
  301,  353,  442,  329,  386,  372,  332,  280,  334,  372,
  336,   41,   41,  286,   41,  341,  342,  278,  344,  280,
   41,   41,   41,   42,   43,   44,   45,  288,   47,   41,
   41,   41,   44,   41,  360,  361,   41,  363,   41,   41,
   59,   60,   61,   62,   41,   41,    0,   59,  379,  408,
   41,  377,   41,  379,  380,  381,   41,  280,  384,  418,
   44,  387,  388,   42,   43,   59,   45,   40,   47,  280,
  401,  397,   59,    0,   93,  286,  341,  408,  379,   40,
   59,   59,   59,   59,  443,  411,  341,   41,  414,   59,
   44,   41,   42,   43,   59,   45,   41,   47,  345,   41,
  401,  321,  461,  353,  430,   59,  262,  408,  264,  369,
  436,  442,   40,   59,   41,  441,  272,   44,  379,   42,
   43,  384,   45,   59,   47,  341,  452,  453,  461,  455,
  286,  384,   59,  289,   44,  461,   41,   41,  384,  411,
  401,  442,   44,   44,  436,  305,  443,  408,  280,  302,
   41,    0,  308,  309,  286,   40,  312,  344,   41,   42,
   43,   59,   45,  319,   47,  321,  322,  294,  305,  325,
  464,   44,  308,  329,   44,   41,  332,    0,  334,  338,
  336,  442,  384,  384,  264,  341,  342,   40,  344,  278,
  264,  459,   41,   42,   43,   44,   45,  390,   47,  321,
  264,  471,  412,  452,  360,  361,   40,  363,  260,  280,
   59,   60,   61,   62,  459,  286,   41,   42,   43,  310,
   45,  377,   47,  379,  380,  381,  271,  264,  384,  437,
  436,  387,  388,  344,  459,  271,   41,  344,  344,  344,
   40,  397,   40,  262,   93,  264,   59,  461,   41,   41,
  302,   59,  305,  272,   44,  411,   59,   41,  414,   41,
   42,   43,  314,   45,    0,   47,  278,    0,  280,    0,
  289,   41,   42,   43,  430,   45,  288,   47, 1093,  246,
  436,  239,   12,  238,  631,  441, 1029,  339,    0,  308,
  309,  806,  591,  312,   80, 1027,  452,  453, 1024,  455,
  319,  280,  321,  322,  296,  461,  325,  286,  542, 1019,
  329,  327, 1362,  332, 1011,  334,  291,  336,  955,  704,
  284, 1020,  341,  342,  278,  344,  280,  295,  308,   41,
  280,   43,   44,   45,  288, 1542,  286,  308,  306,  740,
 1605,  360,  361, 1339,  363,  313, 1341,   59,   60,   61,
   62,  278,  520,  280, 1609, 1608,  408,  280,  377,  730,
  379,  380,  381,  286, 1174,  384,  418,  379,  387,  388,
  338, 1643, 1692, 1560,  802, 1225, 1640,  359,  397, 1352,
  801,   93,   41,   42,   43, 1610,   45, 1022,   47,  401,
  588,  443,  411, 1373,  313,  414,  408,  280,   41,   42,
   43,  301,   45,  286,   47,  522,  294,  787, 1209,  461,
  581,  430,   13,  262,  779,  264,  271,  436,  459,  693,
  455,  679,  441,  272,  680,  379,  708,  919,  118, 1533,
  442, 1436, 1658,  452,  453,  403,  455, 1710, 1619,  471,
  289,  358,  461,  638,  862, 1061,   -1,  401, 1129,   -1,
   -1,   -1,  379,   -1,  408,  280,   -1,   -1,    0,  308,
  309,  286,   -1,  312,   -1,   -1,   -1,  435,   -1,   -1,
  319,  439,  321,  322,  401,   -1,  325,   -1,   -1,   -1,
  329,  408,  450,  332,   -1,  334,   -1,  336,  442,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,  280,   41,
   -1,   43,   44,   45,  286,   -1,   -1,   -1,   -1,   -1,
  280,  360,  361,   -1,  363,  442,  286,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,
  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,
   -1,  430,   -1,   -1,   -1,    0,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,   -1,    0,  308,  309,   -1,   -1,
  312,   -1,   -1,  452,  453,   -1,  455,  319,   -1,  321,
  322,   -1,  461,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,  280,  334,   -1,  336,   -1,   -1,  286,   -1,  341,
  342,   -1,  344,   -1,   -1,   -1,   41,  280,   43,   44,
   45,   -1,   -1,  286,   59,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,  283,   -1,   -1,   -1,  397,   -1,   -1,   93,  291,
   -1,   -1,   -1,   -1,    0,   -1,  298,   -1,  300,  411,
  302,   -1,  414,   -1,   -1,  307,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,   -1,   -1,   -1,   -1,  430,   -1,
  262,   -1,  264,   -1,  436,   -1,  328,   -1,   -1,  441,
  272,   -1,   -1,   -1,   -1,   41,   -1,  339,   44,   -1,
  452,  453,   -1,  455,   -1,   -1,   -1,  289,   -1,  461,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,  308,  309,   -1,   -1,
  312,   -1,   -1,   -1,    0,   -1,   -1,  319,   -1,  321,
  322,   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,  406,   -1,   41,   -1,   43,   44,
   45,  413,   -1,   -1,  416,   -1,  418,  419,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  377,   -1,  379,  380,  381,
   -1,  443,  384,  258,   -1,  387,  388,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,  397,   -1,  262,   93,  264,
   -1,   -1,   -1,   -1,  279,   -1,   -1,  272,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  289,   -1,  301,   -1,  430,   -1,
  492,   -1,  307,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,   59,
  452,  453,   -1,  455,  319,  330,  321,  322,   -1,  461,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,  349,   -1,  341,  342,   -1,  344,
   59,   40,  357,  358,   43,   -1,   45,   -1,   -1,  364,
   -1,   -1,  258,   -1,   -1,  360,  361,   -1,  363,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,  382,   -1,   -1,
   -1,   -1,  377,  279,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  306,  397,   -1,   -1,  301,   -1,   -1,  313,   -1,
   -1,  307,  317,  318,  419,   -1,  411,   -1,   -1,  414,
   -1,  326,   -1,   -1,   -1,  430,   -1,   40,   -1,   -1,
   43,   -1,   45,  338,  330,  430,   -1,  262,   -1,  264,
   -1,  436,  258,   -1,   -1,   58,  441,  272,   -1,   -1,
   63,   -1,   -1,  349,   -1,   -1,   -1,  452,  453,   -1,
  455,   -1,  358,  279,  289,   -1,  461,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  308,  309,  301,  382,  312,   -1,   -1,
   -1,  307,   -1,   -1,  319,   -1,  321,  322,  403,   -1,
  325,   -1,   -1,   40,  329,   42,   43,  332,   45,  334,
   -1,  336,   -1,   -1,  330,  420,  341,  342,  258,  344,
   -1,   58,   -1,  419,   -1,   -1,   63,   -1,   -1,   -1,
  435,   -1,   -1,  349,  439,  360,  361,   -1,  363,  279,
   -1,   -1,  358,   -1,   -1,  450,   -1,   -1,  364,  258,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,  301,  387,  388,  469,   -1,  382,  307,   -1,   -1,
  279,   -1,  397,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,  276,   -1,  414,
  330,   -1,  301,   -1,   -1,   -1,   -1,   -1,  307,   -1,
   -1,  290,   -1,  419,  293,  430,   -1,  296,  297,  349,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,  358,   -1,
   -1,  330,   -1,   -1,  364,   -1,  315,  452,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,  461,   -1,  327,   -1,
  349,   -1,  382,   -1,   -1,   -1,   -1,    0,   -1,  358,
   -1,   -1,   -1,   -1,  267,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,   -1,  290,  367,  419,
   -1,    0,  371,  296,  297,   -1,   -1,   -1,   41,   -1,
  379,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  419,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,  260,   -1,   44,   -1,   -1,   -1,   -1,
  267,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,  276,
   59,   -1,  355,  356,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  367,  444,   -1,   -1,  371,  296,
  297,   -1,   -1,   -1,   -1,   -1,  379,  304,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,  418,   -1,  496,  497,  422,
  499,  500,  501,   -1,   -1,   -1,  353,   -1,  355,  356,
   40,  434,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
  367,  444,   -1,   -1,  371,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  434,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  444,   -1,  262,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,  319,   -1,   -1,  322,
   -1,   -1,   40,   -1,   -1,   43,  329,   45,   -1,  332,
   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,
   58,  344,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,   -1,   -1,  360,   -1,   -1,
  329,   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
  260,  360,   -1,   -1,  397,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  414,   -1,   -1,  273,  384,   -1,   -1,  277,  388,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,  397,   -1,
   -1,   -1,   -1,  436,  304,   -1,   -1,  296,  441,   -1,
  299,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  441,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  340,  276,  353,  453,  355,  356,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,  290,  367,   -1,   -1,
   -1,  371,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,   -1,
   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,  407,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,  355,  356,   -1,  434,  424,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  367,  444,   -1,   -1,  371,  296,  297,
   -1,   40,   -1,   -1,   43,  379,   45,  446,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,  472,   -1,   63,   -1,   -1,   -1,   -1,  327,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,  481,  482,   -1,   -1,  496,  497,  422,  499,
  500,  501,   -1,   -1,   -1,   -1,   -1,  355,  356,  498,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  444,   -1,   -1,  371,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,  472,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,  426,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,  472,   -1,   63,  271,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  273,  491,   -1,   -1,  277,   -1,  496,  497,
   -1,  499,  500,  501,   -1,   -1,   -1,   -1,  302,   -1,
   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,  313,
  314,  260,  316,   -1,  263,  319,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,  333,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,    0,   -1,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,  340,
   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,   41,
   -1,   -1,   44,  374,   -1,  376,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,  399,   -1,   59,   -1,   -1,
   -1,   -1,   -1,  276,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,  418,   -1,  407,  290,  367,   -1,
   -1,  412,  371,  296,  297,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,  424,   -1,   -1,   -1,    0,   -1,  443,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  454,   -1,   -1,   -1,  327,  446,   -1,  461,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,  426,   41,  276,
   -1,   44,  355,  356,   -1,  434,  490,   -1,   -1,   -1,
  481,  482,   -1,  290,  367,  444,   59,   -1,  371,  296,
  297,   40,   -1,   -1,   43,   -1,   45,  498,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,  472,   63,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  426,   -1,   -1,   -1,   -1,  355,  356,
   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  444,   -1,   40,  371,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,  458,  459,  460,  461,  462,  463,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,  472,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  360,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  384,   -1,  263,   -1,  388,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  414,   -1,   -1,   -1,  319,  296,  297,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,
   -1,   -1,   -1,  336,   -1,  302,   -1,   -1,  341,  441,
   -1,  344,  309,   -1,   -1,   -1,  313,  314,  327,  316,
   -1,  453,  319,  260,   -1,   -1,  263,  360,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,  333,   -1,   40,  276,
   -1,   43,  339,   45,   -1,   -1,  355,  356,   -1,   -1,
   -1,  384,   -1,  290,  387,  388,   58,   -1,  367,  296,
  297,   63,  371,   -1,  397,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  414,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  399,  436,   -1,   -1,   40,   -1,  441,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  426,  355,  356,
  453,  418,  455,   -1,   58,  434,   -1,   -1,   -1,   63,
  367,   -1,   -1,   -1,  371,  444,  433,   -1,   -1,  273,
   -1,   -1,   -1,  277,   -1,   -1,  443,   -1,   -1,  458,
  459,  460,  461,  462,  463,  452,   -1,  454,  292,   -1,
   -1,   -1,  296,  472,  461,  299,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,  426,
  499,  500,  501,  490,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  444,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,  496,
  497,  263,  499,  500,  501,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  407,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   42,   43,  290,   45,
  424,   -1,   -1,   -1,  296,  297,  272,   -1,   -1,   -1,
   -1,   -1,   58,   -1,  280,   -1,   -1,   63,   -1,   -1,
  286,   -1,  446,  289,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,  481,  482,  325,
   -1,   -1,   -1,  355,  356,   -1,  290,   -1,  334,   -1,
   -1,   -1,  296,  297,  498,  367,  342,   -1,   40,  371,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  361,   58,  363,   -1, 1240,
 1241,   63,   -1,  327,   -1, 1246, 1247,   -1, 1249, 1250,
   -1,  377,   -1,  379,  380,  381, 1257, 1258, 1259, 1260,
   -1, 1262, 1263, 1264, 1265, 1266, 1267,   -1,   -1,   -1,
   -1,  355,  356,   -1,  426,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  430,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,  426,   -1,  496,  497,   -1,  499,  500,  501,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  444,  267,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  276,  285,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,  296,   -1,  290,  299,   -1,   -1,  472,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,   -1,   -1,   -1,  267,   -1,  353,   -1,  355,
  356,   -1,   -1,   40,  276,   42,   43,   -1,   45,   -1,
  374,  367,  376,   -1,   -1,  371,   -1,   -1,  290,   -1,
   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,  327,   -1,   -1,   -1,   -1,
  424,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,  353,  446,  355,  356,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,  461,   -1,  371,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  481,  482,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  498,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,  418,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,  444,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  271,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  267,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,  276,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,  302,   -1,  290,   -1,   -1,   -1,   -1,  309,  296,
  297,   -1,  313,  314,   -1,  316,   -1,   -1,  319,  260,
  374,   -1,  376,   -1,   -1,   40,  267,   -1,   43,   -1,
   45,   -1,  333,   -1,   -1,  276,   -1,   -1,  339,   -1,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,
   -1,   -1,   -1,  407,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,  353,   -1,  355,  356,
  424,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  327,   -1,   -1,   58,
   -1,   -1,  446,   -1,   63,   -1,   -1,   -1,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,  418,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  481,  482,   -1,
  371,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  443,   -1,  498,   -1,   -1,  434,   -1,   -1,
   -1,  452,   -1,  454,   -1,   -1,   -1,  444,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,  490,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  267,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,  267,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   40,   41,   -1,   43,   -1,   45,   -1,
   -1,   -1,  367,  273,   -1,   -1,  371,  277,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  444,
  350,  351,  352,   -1,  354,   -1,   -1,  452,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,  418,
   -1,   -1,   -1,   -1,  374,   -1,  376,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  407,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,  267,   -1,  446,  496,  497,   -1,
  499,  500,  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  267,   -1,   43,   -1,   45,   -1,   -1,   -1,  498,  276,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,  367,  273,   -1,   -1,  371,  277,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,
  348,  444,  350,  351,  352,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  444,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  407,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,  267,   -1,  446,  496,
  497,   -1,  499,  500,  501,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  267,   -1,   43,   -1,   45,   -1,   -1,   -1,
  498,  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,  459,  460,
  461,  462,  463,  418,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  444,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  267,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
  267,   -1,   -1,  496,  497,   -1,  499,  500,  501,  276,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   41,   -1,   -1,   44,  296,
  297,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,
  327,    0,   -1,   -1,   -1,   -1,   -1,    0,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   41,   -1,  371,   44,  327,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,    0,  496,
  497,   -1,  499,  500,  501,  262,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   41,
  491,   -1,   44,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,    0,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  319,   -1,  332,  322,   -1,   -1,  336,
   -1,   -1,   -1,  329,  341,   -1,  332,  344,   -1,   -1,
  336,   -1,   -1,  262,   -1,  341,   -1,   -1,  344,  262,
   -1,   -1,   41,  360,   -1,   44,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  397,  387,  388,   -1,    0,   -1,   -1,   -1,   -1,   -1,
  319,  397,   41,  322,   -1,   44,  319,  414,   -1,  322,
  329,   -1,   -1,  332,   -1,   -1,  329,  336,  414,  332,
   59,   -1,  341,  336,   -1,  344,  262,   -1,  341,  436,
   -1,  344,   -1,   -1,  441,   41,   -1,   -1,   44,   -1,
  436,  360,   -1,   -1,   -1,  441,  453,  360,  455,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  397,   -1,
   -1,   -1,   -1,  319,  397,   -1,  322,   -1,    0,   -1,
   -1,   -1,   -1,  329,   -1,  414,  332,   -1,   -1,   -1,
  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,    0,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,  436,  360,   -1,   -1,   -1,  441,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,    0,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,   59,  384,   -1,
   41,  387,  388,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,   59,   -1,
  322,   -1,    0,  262,   -1,   -1,   -1,  329,  414,   41,
  332,   -1,   44,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,  360,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,  453,   -1,  455,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   59,  384,  322,   -1,  387,  388,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  262,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,  436,   -1,   -1,   -1,   -1,  441,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
   -1,  453,  341,  455,   -1,  344,   -1,   -1,  397,   41,
   -1,   -1,   44,  319,   -1,   -1,  322,   -1,    0,   -1,
   -1,  360,   -1,  329,   -1,  414,  332,   59,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  436,  387,  388,
  262,   -1,  441,   -1,  360,   -1,   -1,   -1,  397,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  414,   -1,   59,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,    0,   -1,  436,   -1,   -1,
  262,   -1,  441,   -1,   -1,   -1,   -1,  319,  414,   -1,
  322,   -1,   -1,   -1,  453,   -1,  455,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,  319,  341,
  436,  322,  344,   -1,  262,  441,   41,   -1,  329,   44,
   -1,  332,   -1,   -1,   -1,  336,   -1,  453,  360,  455,
  341,   -1,   -1,  344,   59,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  360,
  332,   -1,  384,   -1,  336,  387,  388,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  384,  322,   -1,  387,  388,  360,   -1,
   -1,  329,  414,   -1,  332,   -1,  397,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  384,  414,  436,  387,  388,   -1,   -1,  441,
  262,   -1,  360,   -1,   -1,  397,   -1,    0,   -1,   -1,
   -1,  453,   -1,  455,   -1,  436,   -1,   -1,    0,   -1,
  441,   -1,  414,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   41,  441,
  262,   44,    0,   -1,   -1,   -1,  414,  319,   -1,   41,
  322,  453,   44,  455,   -1,   -1,   59,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   59,  436,  341,
   -1,   -1,  344,  441,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,  453,   44,  455,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,   59,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  384,   -1,  336,  387,  388,  262,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,  360,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  384,   -1,  436,  387,  388,   -1,   -1,  441,
   -1,   -1,   -1,   -1,  319,  397,   -1,  322,   -1,   -1,
   -1,  453,   -1,  455,  329,   -1,   -1,  332,   -1,   -1,
   -1,  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,  360,   -1,   -1,  271,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,  397,   -1,   -1,   -1,  309,   -1,   -1,  262,
  313,  314,   -1,  316,   -1,   -1,  319,   -1,   -1,  414,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,  319,   -1,  332,
  322,   -1,   -1,  336,   -1,   -1,   -1,  329,  341,   -1,
  332,  344,   -1,   -1,  336,   -1,  399,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  319,  272,   -1,  322,  418,   -1,   -1,  360,   -1,
  280,  329,   -1,   -1,  332,   -1,  286,   -1,  336,  289,
  433,  384,   -1,  341,  387,  388,  344,   -1,   -1,   -1,
  443,   -1,  384,   -1,  397,  387,  388,   -1,   -1,   -1,
   -1,  454,  360,   -1,   -1,  397,   -1,   -1,  461,   -1,
   -1,  414,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,  414,   -1,  334,   -1,  384,   -1,   -1,  387,
  388,   -1,  342,  436,   -1,   -1,   -1,  490,  441,  397,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,
  453,  361,  455,  363,   -1,   -1,  414,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,  377,   -1,  379,
  380,  381,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,  488,  489,  490,  491,
  430,  493,  461,   -1,  496,  497,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,   -1,  488,
  489,  490,  491,  461,  493,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,   -1,   -1,
  488,  489,  490,  491,   -1,  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 501
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 19:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 26:
{ yyval = yyvsp[0]; }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_list (yyvsp[0]); }
break;
case 31:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 32:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 33:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 39:
{ yyval = 0; }
break;
case 40:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 41:
{ yyval = 0; }
break;
case 42:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 50:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 63:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = yyvsp[0];}
break;
case 72:
{ yyval = yyvsp[0]; }
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 76:
{ g_field->fld_dtype = dtype_blob; }
break;
case 77:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 78:
{ yyval = (NOD) NULL; }
break;
case 80:
{ yyval = yyvsp[-1]; }
break;
case 82:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 83:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 86:
{ yyval = yyvsp[-1]; }
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 95:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 109:
{ yyval = NULL; }
break;
case 110:
{ yyval = make_list (yyvsp[0]); }
break;
case 112:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 113:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 114:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 115:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 116:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 117:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 118:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 119:
{ yyval = (NOD) 0;}
break;
case 120:
{ yyval = yyvsp[-1]; }
break;
case 121:
{ yyval = (NOD) NULL; }
break;
case 124:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 125:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 126:
{ yyval = NULL; }
break;
case 127:
{ yyval = NULL; }
break;
case 128:
{ yyval = yyvsp[0]; }
break;
case 129:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = (NOD) NULL; }
break;
case 133:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 137:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 138:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 139:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 144:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 145:
{yyval = (NOD) NULL;}
break;
case 148:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 149:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 150:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 151:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 152:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 153:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 154:
{yyval = (NOD) NULL;}
break;
case 157:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 161:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 162:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 163:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 164:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 165:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 166:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 167:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 168:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 169:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 170:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 171:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 173:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 174:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 175:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 178:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 179:
{ g_file  = make_file ();}
break;
case 184:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 192:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 193:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 194:
{ yyval = yyvsp[0]; }
break;
case 195:
{ yyval = yyvsp[0]; }
break;
case 196:
{ yyval = (NOD) NULL; }
break;
case 198:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 201:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 202:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 203:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 204:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 207:
{ yyval = NULL; }
break;
case 208:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = (NOD) NULL; }
break;
case 211:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 212:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 213:
{ yyval = yyvsp[-1]; }
break;
case 214:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 220:
{ yyval = yyvsp[0]; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 227:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 228:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 229:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 231:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 232:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = yyvsp[0]; }
break;
case 235:
{ yyval = NULL ;}
break;
case 240:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 241:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 242:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 243:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 244:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 245:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 246:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 247:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 248:
{ yyval = NULL;}
break;
case 249:
{ yyval = yyvsp[0];}
break;
case 250:
{ yyval = yyvsp[0];}
break;
case 251:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 252:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 253:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 254:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 255:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 256:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 257:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 258:
{ yyval = make_list (yyvsp[-1]); }
break;
case 259:
{ yyval = NULL; }
break;
case 260:
{ yyval = yyvsp[0]; }
break;
case 261:
{ yyval = NULL; }
break;
case 263:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 264:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 265:
{ yyval = make_list (yyvsp[0]); }
break;
case 266:
{ yyval = NULL; }
break;
case 268:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 270:
{ yyval = NULL; }
break;
case 271:
{ yyval = NULL; }
break;
case 272:
{ yyval = yyvsp[0]; }
break;
case 273:
{ yyval = yyvsp[0]; }
break;
case 276:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 277:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 278:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 280:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 283:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 289:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 293:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 294:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 295:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 296:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 297:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 298:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 299:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 300:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 301:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 302:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 303:
{ yyval = make_list (yyvsp[0]); }
break;
case 304:
{ yyval = make_list (yyvsp[-1]); }
break;
case 305:
{ yyval = NULL; }
break;
case 306:
{ yyval = make_list (yyvsp[0]); }
break;
case 307:
{ yyval = make_list (yyvsp[-1]); }
break;
case 308:
{ yyval = NULL; }
break;
case 311:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 312:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 313:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 314:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 315:
{ yyval = NULL; }
break;
case 317:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 321:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 322:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 323:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 324:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 325:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 326:
{ yyval = make_list (yyvsp[0]); }
break;
case 327:
{ yyval = make_list (yyvsp[-1]); }
break;
case 328:
{ yyval = NULL; }
break;
case 332:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
 					  yyvsp[-5], yyvsp[-4], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 337:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 338:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 340:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 341:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 342:
{ yyval = make_list (yyvsp[0]); }
break;
case 344:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 347:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 348:
{ yyval = yyvsp[-1]; }
break;
case 349:
{ beginning = lex_position(); }
break;
case 350:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 351:
{ beginning = last_token; }
break;
case 352:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 353:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 354:
{ yyval = 0; }
break;
case 355:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 356:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 358:
{ yyval = NULL; }
break;
case 359:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 360:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 362:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 363:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 364:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 365:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 366:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 367:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 368:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 370:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 371:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 372:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 373:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 376:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 377:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 378:
{ yyval = NULL; }
break;
case 379:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 380:
{ yyval = yyvsp[0]; }
break;
case 381:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 382:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 383:
{ yyval = yyvsp[0]; }
break;
case 384:
{ yyval = yyvsp[0]; }
break;
case 385:
{ yyval = yyvsp[0]; }
break;
case 386:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 387:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 388:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 389:
{ yyval = yyvsp[0]; }
break;
case 390:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 392:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 393:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 394:
{ yyval = yyvsp[0]; }
break;
case 395:
{ yyval = yyvsp[0]; }
break;
case 396:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 397:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 401:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 402:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 403:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 404:
{ yyval = yyvsp[0]; }
break;
case 405:
{ yyval = yyvsp[0]; }
break;
case 406:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 407:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 408:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 409:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 434:
{ yyval = NULL; }
break;
case 435:
{ yyval = NULL; }
break;
case 436:
{ yyval = NULL; }
break;
case 437:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 438:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 439:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 440:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 441:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 442:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 443:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 444:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 446:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 447:
{ yyval = yyvsp[0]; }
break;
case 448:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 449:
{ yyval = yyvsp[0]; }
break;
case 450:
{ yyval = yyvsp[0]; }
break;
case 452:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 453:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 455:
{ yyval = NULL; }
break;
case 457:
{ yyval = NULL; }
break;
case 458:
{ yyval = yyvsp[0]; }
break;
case 459:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 460:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 461:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 462:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 463:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 464:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 465:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 466:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 467:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 468:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 469:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 470:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 475:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 476:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 478:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 479:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 480:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 486:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 487:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 488:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 489:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 490:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 491:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 494:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 495:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 496:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 497:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 498:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 499:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 500:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 501:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 502:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 503:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 507:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 509:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 510:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 519:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 520:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 521:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 522:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 523:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 524:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 527:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 528:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 529:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 530:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 531:
{ yyval = yyvsp[-1]; }
break;
case 532:
{ yyval = 0; }
break;
case 536:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 537:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 538:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 539:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 540:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 543:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 544:
{ yyval = (NOD) NULL; }
break;
case 546:
{ yyval = (NOD) NULL; }
break;
case 547:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 549:
{ yyval = (NOD) NULL; }
break;
case 551:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 556:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 557:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 558:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 559:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 560:
{ yyval = yyvsp[0];}
break;
case 562:
{ yyval = yyvsp[0];}
break;
case 563:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 564:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 565:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 566:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 567:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 568:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 569:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 570:
{ yyval = 0; }
break;
case 571:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 572:
{ yyval = (NOD) NOD_SHARED; }
break;
case 573:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 574:
{ yyval = (NOD) 0; }
break;
case 575:
{ yyval = (NOD) NOD_READ; }
break;
case 576:
{ yyval = (NOD) NOD_WRITE; }
break;
case 578:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 579:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 580:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 581:
{ yyval = 0; }
break;
case 583:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 584:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 585:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 586:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 587:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 588:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 589:
{ yyval = make_list (yyvsp[0]); }
break;
case 590:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 593:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 594:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 595:
{ yyval = 0; }
break;
case 596:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 597:
{ yyval = 0; }
break;
case 598:
{ yyval = yyvsp[0]; }
break;
case 599:
{ yyval = 0; }
break;
case 600:
{ yyval = yyvsp[0]; }
break;
case 601:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 602:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 603:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 604:
{ yyval = 0; }
break;
case 605:
{ yyval = make_list (yyvsp[0]); }
break;
case 606:
{ yyval = 0; }
break;
case 608:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 611:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 612:
{ yyval = make_list (yyvsp[0]); }
break;
case 614:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 617:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 618:
{ yyval = yyvsp[-1]; }
break;
case 619:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 620:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 621:
{ yyval = make_list (yyvsp[-1]); }
break;
case 622:
{ yyval = NULL; }
break;
case 624:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 628:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 629:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 630:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 631:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 632:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 633:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 634:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 635:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 636:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 637:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 638:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 639:
{ yyval = yyvsp[-1]; }
break;
case 640:
{ yyval = yyvsp[0]; }
break;
case 641:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 642:
{ yyval = yyvsp[-1]; }
break;
case 643:
{ yyval = yyvsp[0]; }
break;
case 644:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 645:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 646:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 647:
{ yyval = 0; }
break;
case 648:
{ yyval = make_list (yyvsp[0]); }
break;
case 649:
{ yyval = 0; }
break;
case 651:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 656:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 660:
{ yyval = yyvsp[0]; }
break;
case 661:
{ yyval = 0; }
break;
case 662:
{ yyval = yyvsp[0]; }
break;
case 663:
{ yyval = 0; }
break;
case 664:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 665:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 666:
{ yyval = 0;}
break;
case 667:
{ yyval = yyvsp[0]; }
break;
case 668:
{ yyval = 0; }
break;
case 669:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 670:
{ yyval = 0; }
break;
case 671:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 672:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 673:
{ yyval = 0; }
break;
case 674:
{ yyval = 0; }
break;
case 676:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 677:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 680:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 681:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 682:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 683:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 685:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 686:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 687:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 693:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 694:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 697:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 698:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 704:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 705:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 711:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 712:
{ yyval = yyvsp[0]; }
break;
case 714:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 717:
{ yyval = NULL; }
break;
case 718:
{ yyval = make_list (yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 722:
{ yyval = NULL; }
break;
case 723:
{ yyval = make_list (yyvsp[-1]); }
break;
case 725:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 727:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 728:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 729:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 731:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 733:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 735:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 746:
{ yyval = yyvsp[-1]; }
break;
case 747:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 749:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 750:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 751:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 752:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 753:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 754:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 755:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 756:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 757:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 758:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 759:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 760:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 761:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 762:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 763:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 764:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 765:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 766:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 767:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 768:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 769:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 770:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 773:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 774:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 775:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 776:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 777:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 778:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 779:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 780:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 781:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 782:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 783:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 784:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 785:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 787:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 788:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 789:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 790:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 792:
{ yyval = make_list (yyvsp[-1]); }
break;
case 793:
{ yyval = yyvsp[-1]; }
break;
case 794:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 795:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 805:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 806:
{ yyval = yyvsp[0]; }
break;
case 807:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 808:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 809:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 810:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 811:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 812:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 813:
{ yyval = yyvsp[-1]; }
break;
case 814:
{ yyval = yyvsp[-1]; }
break;
case 817:
{ yyval = yyvsp[0]; }
break;
case 818:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 819:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 820:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 821:
{ yyval = yyvsp[0]; }
break;
case 822:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 823:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 824:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 825:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 827:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 829:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 830:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 831:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 832:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 833:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 834:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 836:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 837:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 838:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 839:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 845:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 846:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 847:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 848:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 849:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 850:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 851:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 852:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 853:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 854:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 855:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 856:
{ yyval = yyvsp[0]; }
break;
case 857:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 859:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 860:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 861:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 862:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 863:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 865:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 866:
{ yyval = yyvsp[0];}
break;
case 871:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 872:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 873:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 874:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 875:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 876:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 877:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 878:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 879:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 880:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 881:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 882:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 883:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 884:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 885:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 886:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 887:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 888:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 889:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 892:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 893:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 896:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 897:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 898:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 899:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 900:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 901:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 902:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 903:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 907:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 908:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 909:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 910:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 911:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 912:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 913:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 914:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 917:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
