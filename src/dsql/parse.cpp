#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 * 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
 *                            exception handling in SPs/triggers,
 *                            implemented ROWS_AFFECTED system variable
 * 2002.10.21 Nickolay Samofatov: Added support for explicit pessimistic locks
 * 2002.10.29 Nickolay Samofatov: Added support for savepoints
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		DSQL_NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
DSQL_NOD		DSQL_parse;
#else
extern DSQL_NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static DSQL_FLD	g_field;
static FIL	g_file;
static DSQL_NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define NULLS 503
#define LAST 504
#define ROWS_AFFECTED 505
#define LOCK 506
#define SAVEPOINT 507
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    9,    9,    9,    9,    9,   23,   23,   22,
   22,   22,   33,   33,   26,   34,   34,   34,   34,   34,
   25,   25,   31,   31,   27,   14,   14,   14,   14,   14,
   14,   14,   37,   28,   28,   28,   28,   38,   38,   38,
   38,   24,   24,   39,   39,   39,   29,   29,   44,   30,
   30,   45,   45,    6,   46,   46,   48,   53,   53,   53,
   50,   50,   50,   57,   57,   58,   58,   51,   51,   60,
   60,   60,   60,   60,   47,    5,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   12,   78,   78,
   78,   13,   82,   82,   65,   65,   68,   68,   68,   76,
   91,   91,   91,   92,   92,   93,   93,   94,   94,   98,
   98,   75,  101,  101,  103,  103,  104,  104,  107,  107,
  108,  109,  109,  110,  111,   73,   77,   74,   95,   95,
  114,  115,  115,  117,  117,  118,  118,  118,  118,  118,
  116,  116,  119,  119,  120,  120,  120,  120,  122,  122,
  122,  122,  121,  121,  126,  126,  125,   99,  127,  127,
  128,  131,  132,  132,  133,  129,  130,  130,  134,  134,
  135,  135,  136,  136,  136,   97,   97,   97,   70,   80,
  137,  137,  137,  138,  138,  139,  139,  140,  140,  140,
  146,   87,   87,  142,  142,  105,  105,  100,  150,  151,
   59,  143,  143,  106,  106,  106,  106,  106,  106,  144,
  144,  158,  158,  159,  161,  161,  161,  161,  161,  141,
  160,  160,  165,  165,  165,  165,  167,  168,  169,  163,
  163,  164,  162,  162,  162,  162,  162,  170,  171,  172,
  172,  172,  172,   69,   79,   83,  177,  173,  173,  174,
  174,  178,  178,  179,  175,  175,  180,  180,  181,  182,
  182,  183,  183,  184,  184,  176,  186,  186,  186,  187,
  187,  185,  185,  185,  185,  185,  185,  185,  185,  185,
  185,  185,  185,  185,  185,  185,  185,  190,  190,  191,
  192,  193,  194,  195,  195,  196,  202,  198,  198,  198,
  199,  199,  199,  200,  200,  200,  200,  197,  201,  201,
  188,  188,  207,  208,  208,  209,  209,  209,  209,   11,
  211,  211,  211,  212,  212,  212,  212,  212,  212,   72,
   81,  217,  218,  214,  219,  219,  219,  220,  223,  228,
  228,  229,  229,  230,  230,  148,  216,   88,   90,  215,
  215,   71,   84,  233,  233,  233,  234,  237,  237,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  235,  235,  236,    2,  240,  240,
  240,  240,  240,  240,  240,  248,  249,  246,  246,  250,
  250,  250,  250,  250,  250,  250,  241,  241,  251,  251,
  251,  251,  251,  251,  251,  245,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  253,  253,  255,  255,  254,  252,  252,  252,  247,  247,
  243,  244,  244,  257,  257,  257,  257,  258,  258,  242,
  259,  259,  260,  260,    8,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  102,  102,  145,
  145,  264,  264,  267,  267,  269,  269,   54,   54,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  274,  274,
  265,  265,  265,  265,  275,  275,   62,   62,   62,   56,
   56,  271,  271,  271,  268,  268,  268,  279,  279,  279,
  278,  278,  277,  277,  277,  272,  272,  282,  280,  280,
  280,  281,  281,  273,  273,  273,  273,  283,  283,   19,
   19,   19,  285,  285,  285,   16,   17,  289,  289,    4,
   15,  288,  288,  290,  290,  291,  291,  284,  292,  292,
  293,  293,  294,  294,  294,  294,  295,  295,  296,  296,
  297,  297,  299,  299,  299,  300,  300,  300,  301,  301,
  301,  298,  303,  303,  303,  304,  304,  302,  302,  305,
  307,  307,  306,  306,  286,   18,  308,  308,  308,  309,
  309,  312,  312,  313,  313,   66,   66,   66,  314,  314,
  314,  310,  310,  315,  315,  316,  316,  311,  319,  317,
  317,  317,  317,  320,  320,  320,  321,  321,  321,  221,
  221,  222,  222,  323,  323,  324,  324,  324,  318,  327,
  327,  328,  328,  329,  329,  330,  330,  331,  331,  204,
  204,  333,  333,  231,  231,   32,  232,  232,  232,  232,
  232,  232,  232,  232,  225,  225,  334,  334,  335,  335,
  335,  335,  335,  337,  337,  337,  226,  226,  224,  224,
  341,  341,  341,  227,  227,  342,  343,  343,  343,  343,
  343,  344,  344,  345,  345,  346,  346,  347,  347,  347,
  348,  348,   10,   10,  350,  350,    7,    7,  351,  352,
  353,   20,   20,  354,  355,  356,  356,  189,  325,  325,
    3,    3,  358,  358,  358,  360,  360,   62,  359,  359,
  361,  361,   35,   35,   86,   85,   85,  349,  349,  362,
  363,  363,  205,  205,  205,  147,  357,  357,  112,  112,
  112,  112,  365,  365,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
  366,  371,  371,  371,  371,  371,  371,  371,  371,  371,
  371,  371,  371,  371,  371,  371,  371,  377,  377,  367,
  367,  368,  368,  368,  368,  369,  369,  373,  373,  374,
  374,  374,  374,  372,  375,  370,  370,  378,  378,  379,
  376,  381,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,  157,
  157,  157,  382,  380,  380,  152,  152,  387,  387,  387,
  387,  387,  384,  384,  384,  384,  384,  213,  153,  153,
  154,  155,  155,  386,  386,  386,   52,   52,   21,   21,
  239,  388,   55,  124,  270,  270,   96,  383,  383,  383,
  383,  389,  389,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  390,  338,  339,  339,  339,  336,  336,  385,
  340,  340,  392,  392,  393,  393,  394,  394,  397,  397,
  395,  395,  400,  400,  399,  396,  398,  391,  391,  391,
  391,  391,  391,  391,  391,  322,  322,  156,   49,  276,
  123,  149,  364,  166,  206,  263,   64,   61,  210,  113,
   67,  326,   36,   42,  332,  262,   40,   43,  203,   41,
  287,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    7,    8,    6,    7,    5,    1,    2,    1,
    2,    1,    1,    3,    1,    1,    1,    1,    2,    2,
    3,    0,    3,    0,    1,    7,    8,    6,    7,    6,
    7,    4,    3,    1,    3,    3,    3,    2,    2,    2,
    2,    1,    3,    1,    2,    2,    1,    3,    1,    1,
    3,    1,    2,    2,    2,    3,    8,    1,    1,    5,
    0,    1,    3,    1,    3,    2,    4,    1,    3,    2,
    3,    4,    4,    2,    9,    2,    3,    7,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    4,    2,    2,    1,    0,    1,    1,    6,    6,
    1,    1,    0,    0,    1,    0,    4,    0,    1,    1,
    2,    8,    1,    0,    3,    0,    0,    1,    1,    2,
    1,    1,    1,    2,    6,    1,    1,    3,    0,    1,
    1,    0,    1,    1,    2,    3,    4,    2,    2,    3,
    0,    1,    1,    2,    1,    1,    1,    4,    3,    3,
    3,    3,    1,    1,    6,    3,    1,    3,    1,    3,
    2,    1,    0,    2,    3,    1,    0,    1,    1,    2,
    3,    4,    0,    1,    2,    0,    1,    1,    5,    5,
    3,    2,    0,    1,    3,    1,    1,    6,    3,    2,
    6,    2,    1,    2,    2,    2,    0,    1,    1,    2,
    0,    2,    0,    1,    1,    1,    1,    1,    1,    0,
    1,    1,    2,    2,    2,    5,    1,    2,    3,    2,
    2,    0,    1,    1,    1,    1,    3,    4,    8,    4,
    0,    6,    1,    1,    2,    2,    0,    3,    3,    1,
    2,    2,    2,    8,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    6,    1,
    0,    2,    1,    1,    1,    3,    1,    2,    0,    1,
    2,    2,    2,    1,    1,    1,    1,    1,    1,    2,
    3,    1,    2,    1,    2,    2,    2,    3,    4,    2,
    6,    4,    7,    8,    6,    4,    2,    1,    3,    0,
    2,    4,    0,    1,    1,    3,    3,    6,    3,    0,
    1,    2,    4,    1,    3,    2,    2,    2,    1,    4,
    1,    3,    0,    1,    1,    1,    3,    3,    3,    7,
    7,    7,    7,    1,    1,    3,    4,    8,    2,    1,
    3,    1,    1,    6,    3,    0,    0,    0,    0,    3,
    0,    9,    9,    1,    1,    0,    2,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    5,    5,
    5,    5,    5,    5,    2,    0,    4,    2,    3,    3,
    2,    2,    3,    3,    2,    3,    6,    1,    2,    4,
    3,    2,    2,    2,    2,    3,    1,    3,    3,    3,
    2,    2,    4,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    0,    2,    2,
    0,    1,    2,    2,    2,    2,    2,    1,    3,    7,
    1,    0,    1,    0,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    2,    2,    2,    1,    1,    1,
    1,    4,    5,    1,    3,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    4,    6,    5,    3,    0,    2,    2,    0,    3,
    0,    4,    1,    5,    4,    1,    4,    1,    2,    2,
    1,    1,    1,    2,    2,    2,    2,    1,    0,    3,
    5,    1,    1,    2,    3,    1,    2,    3,    0,    1,
    1,    1,    5,    5,    6,    2,    5,    1,    0,    3,
    2,    1,    0,    2,    0,    1,    0,    3,    1,    0,
    1,    2,    1,    1,    1,    1,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    1,    2,    3,    1,    2,
    0,    2,    1,    1,    0,    1,    1,    1,    3,    2,
    3,    0,    1,    3,    4,    3,    1,    3,    4,    3,
    0,    1,    3,    4,    4,    1,    1,    0,    2,    2,
    0,    4,    0,    2,    0,    2,    0,    9,   10,    2,
    1,    1,    0,    2,    4,    2,    2,    4,    2,    1,
    1,    1,    1,    1,    3,    1,    2,    3,    2,    1,
    3,    1,    1,    6,    3,    3,    2,    3,    0,    1,
    3,    1,    1,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    0,    3,    0,    1,    3,    1,    1,
    1,    1,    3,    1,    1,    1,    2,    0,    2,    0,
    3,    5,    0,    2,    0,    4,    1,    2,    1,    1,
    0,    1,    3,    2,    1,    1,    2,    1,    4,    2,
    1,    3,    8,    5,    1,    3,    1,    1,    4,    4,
    4,    1,    1,    5,    5,    1,    3,    3,    1,    1,
    7,    7,    5,    3,    0,    1,    1,    1,    2,    0,
    1,    1,    1,    0,    3,    1,    3,    1,    0,    3,
    1,    3,    1,    3,    3,    1,    1,    3,    1,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    1,    1,    5,
    6,    3,    4,    5,    6,    3,    4,    3,    4,    3,
    4,    4,    5,    4,    4,    3,    4,    1,    3,    3,
   10,   10,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    1,    1,    1,    1,    3,    1,    1,    1,
    1,    1,    4,    1,    3,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
    1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    6,    6,    6,    8,    4,    4,    3,    6,
    1,    1,    6,    6,    1,    1,    4,    6,    4,    5,
    3,    5,    4,    5,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,  550,
  551,  552,    0,  607,  717,  718,  722,  723,  461,    0,
    0,    0,    0,    0,    0,  398,  562,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
   96,    0,  881,    0,   22,  879,    0,    0,   74,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,    0,   38,   35,   37,    0,   36,
    0,  954,    0,    0,    0,    0,   33,   69,   67,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  632,    0,    0,    0,  956,  664,    0,    0,
    0,    0,    0,  108,  961,  556,    2,    0,    0,    0,
    0,  445,  427,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  446,  447,  448,  449,  450,    0,  426,  947,    0,  951,
    0,  405,  953,    0,  402,    0,  666,  957,    0,  401,
    0,  560,  877,    0,  151,  104,    0,  943,  105,    0,
  218,  756,    0,  950,  103,  146,    0,    0,   99,    0,
  106,  883,    0,  100,    0,  101,  960,    0,  102,  147,
  107,  616,  617,    0,  882,  880,    0,  948,   75,    0,
    0,  946,  483,  476,    0,  482,  487,  477,  478,  485,
  479,  480,  481,  486,    0,   31,    0,   40,  743,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  887,    0,  868,  634,  636,
    0,  637,  639,  936,  640,    0,  641,  630,    0,    0,
    0,    0,    0,    0,    0,  579,  568,    0,  571,  573,
  574,  575,  576,  582,  583,    0,  955,  665,    0,  109,
    0,  110,    0,  111,    0,    0,  608,    0,  606,    0,
    0,    0,    0,  462,    0,    0,  368,    0,  221,    0,
  408,  399,  459,  460,    0,    0,    0,    0,    0,    0,
  417,    0,  374,  375,    0,  566,  564,  878,    0,    0,
    0,    0,    0,    0,    0,  154,  133,    0,   97,    0,
    0,  112,    0,  122,  121,    0,    0,    0,    0,    0,
    0,  939,   76,    0,    0,    0,  719,  720,  484,    0,
  938,  860,  859,  858,    0,    0,  861,  862,    0,    0,
  864,  345,  346,  340,    0,  344,  856,  863,    0,  746,
    0,    0,   28,    0,    0,  958,    0,   72,   70,   68,
   34,    0,    0,    0,  748,    0,   53,    0,    0,    0,
    0,    0,  558,    0,    0,    0,    0,  846,  874,    0,
    0,  848,    0,    0,  875,    0,  869,    0,    0,  850,
  851,  852,  870,  871,    0,  872,  873,    0,    0,    0,
  876,    0,    0,    0,    0,    0,    0,  753,  842,  843,
  844,  849,  828,    0,  827,    0,  831,  890,  891,  830,
  824,  825,  826,  829,  845,  888,  889,  911,  912,  915,
  916,    0,  643,    0,  730,    0,    0,  644,    0,    0,
  605,    0,  580,    0,  577,    0,  578,  603,    0,  598,
    0,    0,  572,    0,  757,  726,    0,    0,    0,    0,
    0,    0,  538,    0,    0,    0,  612,    0,  609,    0,
  186,    0,    0,  130,  467,  173,  174,    0,  465,    0,
    0,    0,    0,  468,    0,  463,    0,    0,  412,  414,
  413,    0,  415,    0,  409,  219,    0,    0,  272,    0,
    0,    0,    0,  421,  422,    0,  452,    0,    0,    0,
    0,    0,    0,    0,  379,  378,  471,    0,    0,  150,
    0,    0,  159,    0,  158,    0,  165,  148,    0,  163,
  166,  167,  155,    0,    0,  506,  542,  509,    0,  543,
    0,    0,  510,    0,    0,    0,  533,  546,  505,  528,
  507,  508,  503,  490,  368,  488,  489,  491,    0,    0,
  500,  501,  502,  504,    0,    0,    0,    0,    0,  113,
    0,  114,    0,  125,    0,    0,  202,    0,    0,  366,
    0,  221,    0,    0,   84,    0,    0,  738,    0,    0,
    0,    0,    0,    0,    0,    0,  759,  763,  764,  765,
  766,  767,  768,  769,  770,  771,  772,  865,  866,  867,
  857,    0,    0,    0,  745,   29,    0,    0,   45,   73,
    0,    0,   27,    0,  751,    0,    0,    0,  714,    0,
    0,    0,    0,    0,  557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  959,  317,    0,    0,
    0,    0,    0,    0,    0,  635,    0,    0,  638,    0,
    0,    0,    0,  952,  647,  554,    0,  885,  553,    0,
  581,    0,  589,  585,  584,    0,    0,    0,  600,  588,
    0,    0,  724,  725,    0,    0,    0,  366,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
    0,    0,    0,    0,  368,  411,    0,  368,  369,  416,
  498,    0,  274,    0,  268,  270,  366,  944,  241,    0,
    0,  368,    0,    0,  210,  366,    0,    0,    0,    0,
  246,  240,  243,  244,  245,  420,  457,  456,  419,  418,
    0,    0,    0,    0,    0,    0,  377,    0,  368,    0,
  156,  160,    0,  164,    0,    0,  529,  530,  547,    0,
  544,    0,    0,  536,  534,  535,    0,    0,    0,    0,
  499,    0,    0,    0,    0,  537,    0,    0,  366,    0,
  201,    0,  204,  206,  207,    0,    0,    0,    0,    0,
  221,   79,    0,    0,   78,  940,  517,  518,    0,    0,
    0,  762,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  342,  348,  349,  347,  747,    0,    0,    0,
    0,    0,    0,    0,    0,   54,   62,   64,    0,    0,
   71,    0,    0,    0,  750,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  928,  929,  930,
  931,  932,  933,  934,  935,    0,    0,    0,    0,    0,
    0,  921,    0,    0,    0,  662,    0,    0,  840,  841,
  909,    0,    0,  942,  836,    0,    0,    0,    0,    0,
    0,  847,  755,  754,    0,    0,    0,    0,  652,  653,
    0,    0,  645,  648,  555,  886,  590,  599,  594,  593,
    0,  604,  758,  727,  728,  366,    0,    0,  216,    0,
    0,  613,    0,    0,  622,  182,  176,  183,    0,  179,
    0,    0,  178,    0,  189,  170,  169,  884,  172,  171,
  469,    0,    0,    0,  410,  273,    0,  212,  368,  214,
    0,  369,  209,  215,    0,    0,    0,    0,  423,  424,
  368,  366,  369,    0,    0,    0,  395,    0,  197,  198,
  157,    0,    0,    0,    0,    0,    0,  545,    0,    0,
  368,  369,    0,  494,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  199,    0,    0,
    0,    0,  355,    0,   83,    0,    0,    0,    0,   88,
   85,    0,    0,    0,  945,  721,    0,    0,  773,    0,
    0,    0,  799,  798,    0,    0,    0,  806,  818,  816,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  761,    0,   66,   58,   59,   65,   60,   61,    0,    0,
   23,    0,    0,    0,   43,    0,    0,    0,  732,  752,
    0,  715,    0,  731,    0,    0,    0,    0,    0,    0,
  221,    0,  892,    0,    0,  907,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  917,    0,
  927,    0,    0,    0,    0,    0,    0,  908,  853,    0,
    0,    0,    0,    0,    0,  667,    0,    0,    0,    0,
    0,  596,  597,  601,    0,  200,    0,    0,  614,  615,
  626,    0,    0,    0,    0,    0,    0,  190,    0,    0,
  406,  224,  225,  226,  227,  228,  229,    0,    0,    0,
  277,    0,  222,    0,    0,    0,    0,  247,    0,  453,
  454,  425,    0,    0,    0,    0,    0,    0,  368,  473,
  369,  941,  168,    0,    0,  512,    0,  511,  548,    0,
  540,    0,    0,    0,  492,    0,  520,    0,    0,  522,
  525,  527,  366,    0,    0,    0,  120,    0,  205,  368,
    0,    0,  367,    0,   98,    0,  118,    0,   94,    0,
    0,    0,    0,   87,    0,  814,  815,    0,    0,    0,
    0,    0,    0,  817,    0,    0,    0,    0,    0,    0,
    0,  807,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   57,   63,   55,
   56,   24,  736,  737,    0,  734,  741,  742,  739,    0,
    0,  713,    0,    0,  898,  897,    0,    0,  894,  893,
    0,  902,  901,  900,  899,  896,  895,    0,    0,  923,
    0,    0,    0,  922,    0,    0,    0,  660,    0,    0,
  655,    0,  656,    0,  673,  669,  671,    0,    0,    0,
    0,    0,  367,  619,  620,    0,  184,  180,    0,    0,
  195,  191,    0,  369,  280,    0,    0,  369,  278,    0,
    0,    0,  232,    0,    0,  248,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  470,  514,    0,  515,    0,
  135,    0,    0,    0,  139,  141,  142,  143,  495,  497,
  493,  524,    0,    0,  369,    0,    0,    0,    0,  350,
    0,  356,  368,   89,    0,    0,   91,    0,    0,    0,
    0,    0,    0,  820,  819,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,    0,    0,  716,  220,  910,  903,
  904,    0,  905,  919,  918,    0,  924,  913,    0,  914,
    0,  658,    0,    0,  680,    0,  677,  681,  682,  684,
  685,  686,    0,    0,  628,  369,  351,    0,  175,  192,
  369,  145,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  285,  290,  284,
    0,    0,    0,  294,  295,  296,  297,  298,  299,  302,
  304,  267,    0,  208,  233,    0,    0,    0,    0,  234,
  237,    0,    0,  369,  393,  394,  390,  389,  392,  391,
    0,  513,  541,  144,  132,  140,    0,  368,  264,  127,
  369,    0,    0,  370,  357,    0,    0,   92,   93,   80,
    0,  785,  793,    0,  786,  794,  789,  797,    0,    0,
  787,  795,  788,  796,  782,  790,  783,  791,  784,  792,
  733,    0,    0,  920,  661,    0,    0,    0,    0,  697,
  699,    0,  694,    0,  265,  185,  407,    0,  310,    0,
    0,    0,  306,    0,    0,    0,  305,    0,  307,  293,
  300,    0,  303,  286,    0,  291,    0,  331,  292,  211,
  235,    0,    0,  238,    0,  250,  252,  397,  369,    0,
  372,    0,    0,    0,  362,  363,    0,    0,   77,   95,
    0,    0,  906,    0,    0,  683,  678,  698,    0,    0,
  283,    0,  308,    0,    0,    0,    0,    0,  301,    0,
    0,  324,  325,  339,    0,    0,    0,    0,  334,  332,
  239,    0,    0,    0,    0,    0,  266,  369,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  705,    0,
    0,    0,  282,  279,  309,    0,    0,    0,  312,    0,
    0,    0,  316,    0,  338,  949,  337,  336,    0,    0,
    0,    0,    0,  249,    0,  256,    0,  255,  373,  365,
    0,    0,    0,  119,    0,    0,    0,  707,  696,    0,
    0,  708,    0,  704,    0,    0,    0,    0,    0,    0,
    0,    0,  327,  326,  333,  335,  236,    0,    0,  260,
  259,  258,    0,  358,    0,  629,  822,  703,    0,  710,
  319,    0,    0,  311,    0,    0,    0,  328,  263,  261,
  262,    0,    0,    0,    0,    0,  329,  313,    0,    0,
    0,    0,  709,  322,  314,  821,  712,
};
static short yydgoto[] = {                                      19,
   20,   21,   22,   23,   24,   25, 1504,   27,   28, 1505,
   30,   31,   32,   33,   34,   35,   36, 1506,   38, 1507,
  618,  103,  382,  874, 1121,  104,  648,  875,  105,  387,
  653,  128,  106,  107,  238,  946,  117,  876,  877,  179,
  208,  108,  878,  109,  389,   79,  219,  353,  436,  613,
 1058,  371,  834,  584,  493,  811,  614,  615,  616, 1060,
  220, 1313,   71,  169,   72,  214, 1774, 1265,  199,  204,
  206,  209,  195,  186,  189,  201,  211,  134,  290,  292,
  294,  342,  600,  602,  379,  239,  761,  518,  625,  995,
  346,  605, 1046, 1257,  551,  708, 1021,  503,  504,  533,
  338,  585, 1032, 1403,  730, 1201, 1404, 1405, 1406, 1407,
 1408,  626,  196,  187,  334,  558,  335,  336,  559,  560,
  561,  562, 1233,  989,  506,  507,  979,  977,  508,  983,
  978, 1192, 1367,  984,  985, 1197,  348,  822,  823,  824,
  825,  763, 1002, 1381,  586,  765,  438,  827,  935,  527,
 1328, 1202,  439,  440,  441,  926,  442, 1382, 1383,  536,
 1530, 1674, 1218,  771,  772,  759,  773,  774,  775, 1675,
 1676, 1751,  316,  531, 1209, 1508,  175,  528,  529, 1210,
 1211, 1376, 1652, 1509, 1510, 1511, 1512, 1617, 1513, 1514,
 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1697, 1738, 1661,
 1740,  443,  688, 1347,  444, 1066, 1618, 1668, 1669, 1707,
  374,  375,  445, 1051, 1263, 1420,    0,    0, 1052, 1053,
  266,  466, 1553,  357, 1181, 1361, 1485, 1633, 1634, 1635,
 1636, 1179,  325,  547,  789, 1230,  548,  787,  202,   56,
  320,  180,  141,  303,  166,  310,  172,  749,  746,  311,
  321,  779,  322,  544, 1013,  167,  304,  515,  549, 1231,
   93,  177,  223,  587,  588,  751, 1033,  752, 1034, 1035,
  591,  592,  593,  594, 1026,  838,  595,  596,  597,  804,
  598,  495,  801,   40,   41,   42,  136,   58,  404,  182,
  327,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  714,  479,  961, 1184,  480,  481,  719,   43,  140,  299,
   44,  496,  497, 1189,  735,  975,  121,  701,  659,  122,
  123,  267,  467,  468,  469,  705,  947,  948,  949,  950,
 1173,  446, 1161, 1476, 1477,  447, 1479,  448,  449,  450,
    0, 1689, 1594, 1690, 1691, 1692, 1734, 1775,  394, 1133,
   45,   46,  358,   47,   48,  488,  489,  883, 1129, 1315,
 1319,  395,  656,  192,  627,  628,  629,  630,  631,  632,
  633,  634,  635,  636,  637, 1282, 1076, 1078, 1079,  933,
  686,  451,  452,  453,  454,  455,  378,  216,  456,  457,
  916,  458,  459,  460,  461,  678,  920, 1162, 1157,  679,
};
static short yysindex[] = {                                   3007,
 1704, -154, 3002,  105, 1061,    9, 3685,   25, 2798,   61,
  171, 1052, -154, 1147,  722,  303, 1338,  418,    0,  895,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  514,    0,    0,    0,    0,    0,    0, 8642,
  501,  527,  604,  303,  698,    0,    0,  684, 1201,  703,
  501,  877,  837,  604,  849,  303,  698,    0,  892,  945,
    0,  680,    0, 1097,    0,    0, 1125, 1118,    0,  303,
 1135,  501, 1286, 1118,  877,  527,  604,  849,  303,  698,
  892,  945,    0,  604, 1231,    0,    0,    0, 1632,    0,
 1632,    0, 1295, 1300,  210, 1603,    0,    0,    0,  703,
  303,  703, 1316, 1350, 1367,  327, 2341, 1321,  149,  169,
  637, 1288,    0,  877, 1469, 1583,    0,    0, 1382, 1358,
  604,  303,  892,    0,    0,    0,    0, 1550,  -63, 1523,
  573,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  624,    0,    0, 1201,    0,
    4,    0,    0, 1823,    0,  984,    0,    0,    6,    0,
 1448,    0,    0, 1417,    0,    0, 1421,    0,    0, 1645,
    0,    0, 1201,    0,    0,    0, 1093, 1823,    0,   86,
    0,    0, 1566,    0, 1599,    0,    0, 1632,    0,    0,
    0,    0,    0, 1582,    0,    0, 1471,    0,    0, 1605,
 1487,    0,    0,    0, 1471,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1798,    0,  703,    0,    0,    0,
 -140, 1572,  796,  945,  633, 1623, 1930, 1656, 1660, -140,
 1585,  796, 1602, 1606, 1484,    0, 5819,    0,    0,    0,
 5819,    0,    0,    0,    0, 3918,    0,    0, 1557,  527,
 1633, 1549,  519,  303, 1563,    0,    0, 1583,    0,    0,
    0,    0,    0,    0,    0, 1535,    0,    0, 1823,    0,
 1566,    0, 1632,    0, -124, 1584,    0, 1558,    0, 1263,
 1646, 1229,  573,    0, 1717, 1202,    0,  703,    0,  624,
    0,    0,    0,    0,  703, 1595,  440, 1543,  466, 1972,
    0, 8681,    0,    0, 1284,    0,    0,    0, 1957, 1957,
 1201, 1652, 1201, 2257, 1421,    0,    0, 5753,    0,  604,
  698,    0, 1595,    0,    0, 1732,  884, 1980,  303, 1768,
  527,    0,    0, 1993,  184, 1747,    0,    0,    0, 1573,
    0,    0,    0,    0, 1574, 1577,    0,    0, 1307, 1831,
    0,    0,    0,    0, 2001,    0,    0,    0, 1762,    0,
  303, 1610,    0,  604, 1597,    0,   73,    0,    0,    0,
    0,  303, 1535, -103,    0,  303,    0, 1727,  604, 2015,
 -140, 1658,    0,  418, 2026, 2032, 2036,    0,    0, 2037,
 2039,    0, 2043, 2045,    0, 2046,    0,    0, 2049,    0,
    0,    0,    0,    0, 2050,    0,    0, 4472, 2051, 2052,
    0, 5819, 5819, 4700, 1637, 2059, 1647,    0,    0,    0,
    0,    0,    0, 2009,    0, 2062,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1729,    0, 2151,    0, 1784, 2065,    0,  -20,   21,
    0, 1463,    0,  483,    0,  483,    0,    0, 2066,    0,
  326, 1683,    0,    0,    0,    0, 2070,  128, 2064, 1595,
 2077, 1859,    0, 1849, 1849, 2087,    0, 2086,    0, 1752,
    0,  116, 1795,    0,    0,    0,    0, 1201,    0, 1957,
 1957, 1957, 1957,    0, 2101,    0, 1868, 1875,    0,    0,
    0, 1854,    0, 5753,    0,    0, 5753, 1772,    0, 1823,
 1897, 1702, 4431,    0,    0,  -74,    0, 1702,  314,  984,
    0, 1766, 1728, 1695,    0,    0,    0,   38, 1774,    0,
 1714,  849,    0, 1201,    0, 1899,    0,    0, 2257,    0,
    0,    0,    0,  140, 1726,    0,    0,    0, 1730,    0,
 1782, 2139,    0, 1836, 2147,  744,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2106,  173,
    0,    0,    0,    0,  185, 2161, 2162, 2147, 1823,    0,
 1884,    0, 1948,    0, 1201, 1201,    0,  440,    6,    0,
 1829,    0, 1802, 2172,    0, 5841,  137,    0, 1827, 1839,
 2180, 2399, 2184, 1844, 3954,  498,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1788, 1831,  703,    0,    0, 1397, 1790,    0,    0,
 1760,  796,    0, 1919,    0, 1826, 1147, 2199,    0, 1919,
 1397, 1920, 1924,  604,    0,  959, 4786,  141,  877, 5819,
 1136, 1303, 1356, 2570, 5819, 2399, 2151, 1801,  -40, 5819,
 4786,  924,  924, 1147, 2107, 2209,    0,    0, 4965, 1793,
 5819, 5819, 5819, 5819, 5819,    0, 5819,  112,    0,   33,
 1806, 4786, 1809,    0,    0,    0,  802,    0,    0,  -42,
    0, 1819,    0,    0,    0,  303,  879,  303,    0,    0,
  703, 1535,    0,    0, 4786, 2007,  440,    0, 1793,  680,
  680, -124,  146,  703, 1820, 1201, 1201,    0,  617, 1714,
 1714, 1815,  849, 1229,    0,    0, 2236,    0,    0,    0,
    0, 2000,    0,  703,    0,    0,    0,    0,    0, 2008,
 2241,    0, 1982, 2002,    0,    0, 1941, 1952, 1632, 2020,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  849,  703, 6781, 1912, 1913, 1922,    0,  849,    0, 1332,
    0,    0, 1889,    0,  154, 1903,    0,    0,    0,  849,
    0, 2139,  162,    0,    0,    0, 2010,  162, 1895,  162,
    0, 2281,  849,  849,  849,    0, 1595,  303,    0, 1965,
    0, 1833,    0,    0,    0, 1284, 1906,  303, 1837,  198,
    0,    0, 2294, 2063,    0,    0,    0,    0,  184, 1877,
 1918,    0, 1918, 3706,  397, 5819, 5819, 2579, 2302,  594,
 2661, 5819, 2896, 1269, 3131, 3213, 5029, 3366, 3448, 3683,
 2399, 2399,    0,    0,    0,    0,    0, 1597,  604,  698,
 1597,  892,  945,  119, 2303,    0,    0,    0, 1397, 1964,
    0,  -65, 1985, 1535,    0,  637, 4786, 1985, 2318, 2303,
 1397,  -39, 2047, 5819, 5819, 2100, 5819, 2325, 5819, 2323,
 2115, 5819, 5819, 5819, 5819, 5819, 5819,    0,    0,    0,
    0,    0,    0,    0,    0, 2060, 1370,  878, 5819,  543,
 4786,    0, 2399, 2467, 2151,    0, 2338,  637,    0,    0,
    0, 2151, 1851,    0,    0, 2104,  924,  924,  989,  989,
 1236,    0,    0,    0,   33, 2345, 2344, 1400,    0,    0,
 2399, 2068,    0,    0,    0,    0,    0,    0,    0,    0,
  -75,    0,    0,    0,    0,    0, 1855, 1906,    0, 1896,
 1896,    0, 2354, 1901,    0,    0,    0,    0, 1856,    0,
 1957, 2134,    0,  617,    0,    0,    0,    0,    0,    0,
    0, 2362, 2399, 1568,    0,    0, 2105,    0,    0,    0,
 1568,    0,    0,    0, 1632, 1632, 1917, 2375,    0,    0,
    0,    0,    0,  505,  362,  769,    0, 2156,    0,    0,
    0, 1960,  105, 1857, 1999, 2000, 2387,    0, 1714, 1862,
    0,    0, 1248,    0, 2378, 1960, 1507,  849, 2392, 2397,
 2404, 2176,    6, 2105, 1957, 1795,  440,    0, 1774,  637,
 1997, 2013,    0,   43,    0,  849, 2061, 2149, 5841,    0,
    0,  849, 1967, 2153,    0,    0, 2420, 2423,    0, 1547,
 2151, 2427,    0,    0, 2151, 2429, 5255,    0,    0,    0,
 2120, 2435, 2151, 2436, 1345, 2438, 2151, 2439, 5819, 5819,
 2302, 5819, 5319, 2441, 2151, 2443, 2444, 2151, 2445, 5819,
 2151, 2447, 2151, 2448, 2454, 2151, 2458, 2459, 2151, 2460,
    0, 2239,    0,    0,    0,    0,    0,    0, 2175, 1397,
    0, 1397,  119, 2303,    0,  156,  156,   53,    0,    0,
 3918,    0, 1864,    0, 2318, 2303, 2461,  -39, 2222, 2349,
    0, 2367,    0, 2382, 5819,    0, 2406, 2450, 2692, 2747,
 2806, 2884, 5819,  849, 4786, 2151, 2080, 4786,    0, 5819,
    0, 2195,  889, 5819, 4786, 5819, 5819,    0,    0, 1400,
 2465, 4786, 1358,   33, 2129,    0, 2130, 2132, 2178, 2252,
 2193,    0,    0,    0, 2105,    0, 1997, 1183,    0,    0,
    0, 2109, 1201, 2143, 1714, 2154, 1714,    0, 2399,  643,
    0,    0,    0,    0,    0,    0,    0, 2088, 2272, 2105,
    0, 5819,    0, 2260, 2141, 1917,  680,    0, 2399,    0,
    0,    0, 2165, 2166, 2167, 2182, 2185, 2186,    0,    0,
    0,    0,    0, 2518,  105,    0, 1815,    0,    0,  162,
    0, 1568, 2192,  162,    0,  162,    0, 2000, 2541,    0,
    0,    0,    0, 1284, 2272, 1714,    0, 1795,    0,    0,
 3918, 2305,    0,   -2,    0, 2354,    0, 2546,    0, 2550,
 1201,  408, 2551,    0, 1201,    0,    0, 5819, 2177, 2177,
 1147, 2552, 1881,    0, 2177, 2177, 5819, 2177, 2177, 1666,
 2151,    0, 1783, 5819, 2151, 2177, 2177, 2177, 2177, 2151,
 2177, 2177, 2177, 2177, 2177, 2177, 2210,    0,    0,    0,
    0,    0,    0,    0, 2163,    0,    0,    0,    0, 1784,
 4786,    0,  -39, 2461,    0,    0, 5753, 2557,    0,    0,
 2921,    0,    0,    0,    0,    0,    0, 2928,  167,    0,
 4786, 2293, 2169,    0, 4786, 2949, 1890,    0, 1807, 2151,
    0, 1894,    0, 1400,    0,    0,    0,   33, 2056, 2399,
 2211, 2272,    0,    0,    0, 1957,    0,    0, 1201, 1332,
    0,    0,  647,    0,    0,  703, 4775,    0,    0, 2151,
 1849, 2260,    0, 1070,  303,    0, 2271,  688, 2170, 2273,
 2171, 2321, 2278, 2324, 2105,    0,    0, 2584,    0, 2586,
    0, 2275, 1849, 2192,    0,    0,    0,    0,    0,    0,
    0,    0, 2105, 1774,    0, 1332, 2156, 2310, 2246,    0,
 1906,    0,    0,    0, 2261,  384,    0, 2000, 2262, 2151,
 2595, 2599,  637,    0,    0, 2603, 2605, 2151, 2607, 2608,
 5819, 5819, 2151, 2609, 2610, 2615, 2616, 2617, 2619, 2620,
 2622, 2624, 2636,    0,  156, 1806,    0,    0,    0,    0,
    0,  849,    0,    0,    0, 4786,    0,    0, 4786,    0,
 1806,    0, 1039, 2398,    0, 2638,    0,    0,    0,    0,
    0,    0,  498,  550,    0,    0,    0, 1714,    0,    0,
    0,    0, 5753,  177,  -86, 2625, 1584, 2643, 2346, 5819,
 2631, 2651, 2635, 2640, 2641, 2361, 2644,    0,    0,    0,
 2396, 4548, 2648,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2668,    0,    0, 2358, 2370,  303, 1917,    0,
    0, 1632,  527,    0,    0,    0,    0,    0,    0,    0,
 2272,    0,    0,    0,    0,    0, 2272,    0,    0,    0,
    0,   62, 1806,    0,    0, 5819, 1201,    0,    0,    0,
 1201,    0,    0, 5819,    0,    0,    0,    0, 2151, 2151,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2068, 2671,    0,    0, 2068, 2399, 1793, 2056,    0,
    0, 2347,    0, 2677,    0,    0,    0,  182,    0, 5499,
  604, 5819,    0, 2380, 2399, 2629,    0, 2399,    0,    0,
    0,   49,    0,    0,  931,    0, 2270,    0,    0,    0,
    0, 1917, 1632,    0, 2348,    0,    0,    0,    0, 2156,
    0,   62, 2681, 1400,    0,    0, 2068, 2151,    0,    0,
 1807, 2193,    0, 2193,  498,    0,    0,    0,  812, 1568,
    0, 2669,    0, 3051, 5584, 3183,   49,  694,    0,  805,
 1074,    0,    0,    0,  501, 2268,  105,  179,    0,    0,
    0, 2348,  509, 1917, 2356, 2357,    0,    0, 1400, 2690,
   62, 2394, 2193, 2702, 1806, 2211, 2211,  303,    0, 2704,
 2706, 1355,    0,    0,    0, 4002, 2335, 2707,    0,  201,
 2316, 2451,    0,   49,    0,    0,    0,    0, 4775,  931,
 1917,  546,  546,    0, 2455,    0, 2317,    0,    0,    0,
 1400,   62, 2211,    0, 2068, 2374, 2374,    0,    0,  812,
 2723,    0,  527,    0, 2107, 1914,  133, 2705, 2473, 2463,
 4775, 4775,    0,    0,    0,    0,    0, 2307,  -27,    0,
    0,    0, 1420,    0, 2193,    0,    0,    0,  527,    0,
    0,   49, 2725,    0, 1877, 4775, 2471,    0,    0,    0,
    0, 2399, 2211, 2736, 2740, 1921,    0,    0, 4775,  498,
 2374,  527,    0,    0,    0,    0,    0,
};
static short yyrindex[] = {                                      0,
    0,  176,  880,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  155, 2079,    0,    0,    0,    0,    0, 2782,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  910,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  958,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2453,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2401,    0,    0,    0,  114,    0,
  114,    0,    0,    0,    0, 2422,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1144,    0,    0,
 4155, 2314,    0,    0,    0, 1195,    0,    0,    0, 1627,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  336,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   65,    0,    0,    0,    0,  908,    0,
 1212,    0,    0,    0,    0,    0, 1891,    0,    0, 8704,
    0,    0,    0,    0,    0,    0,    0,   65,    0,  -70,
    0,    0, 2743,    0,    0,    0,    0, 2540,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1252,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1274,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  913,    0,    0,    0,
    0,    0,    0,    0, 2351,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  247,    0,    0, 1323,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
 2743,    0, 2540,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1336,    0, 2529,    0,    0,    0,    0, 1343,
    0,    0,    0,    0,    0, 2553,  538, 5356,    0, 1363,
    0,    0,    0,    0,  241,    0,    0,    0, 2359, 2359,
    0,    0,    0, 1372, 2315,    0,    0,    0,    0,    0,
    0,    0, 2553,    0,    0, 1510,    0,    0,    0,    0,
    0,    0,    0, 6424, 2418,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1376,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1477,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1489,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 6123,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6288,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  151,    0,    0, 2499,    0,  350,    0,
    0,    0,    0,  660,    0,  660,    0,    0,  517,    0,
  771,  847,    0,   84,    0,    0,    0, 1252,    0, 2553,
    0,    0,    0,   88,   88, 1084,    0,    0,    0,   85,
    0, 2654,  111,    0,    0,    0,    0,    0,    0, 2359,
 2359, 2359, 2359,    0,  211,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2559,
    0,    0,    0,    0,    0, 2529,    0,    0, 1044,    0,
  868, 2355,    0,    0,    0,    0,    0,    0,  178,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1514,    0,
    0,    0,    0, 1360,  822,    0,    0,    0, 1187,    0,
    0, 1443,    0,    0, 1474,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  920, 1296,
    0,    0,    0,    0, 1511, 1243,    0, 1474,   65,    0,
    0,    0,    0,    0,    0,    0,    0,  538, 1457,    0,
    0,    0,    0, 2413,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  286,    0,    0, 2079,    0,    0,  286,
    0,    0,    0,    0,    0, 5883,    0, 5883,    0,    0,
 5883, 5883, 5883,    0,    0,    0, 2376,    0,    0,    0,
    0, 6975, 7142, 4237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  506,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  538,    0,    0,   94,
   94,    0,    0,    0,  374,    0,    0,    0, 2920,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  190,    0,    0,    0,    0,    0,    0,    0, 2789,
    0,    0, 2430, 1705,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  714,  759,  778,    0,    0,    0, 2022,
    0,    0,    0,    0,    0, 1659,    0,    0,    0,    0,
    0, 1443,    0,    0,    0,    0,  790,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2553,    0,    0,  285,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 8611,
    0,    0,    0,  243,    0,    0,    0,    0, 2520,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1519, 1526,    0,    0,    0,    0,    0,
    0,    0, 1542,    0,    0, 4155,    0, 1542, 1545, 1546,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  755,    0,    0, 5883,    0,    0,
    0, 1767,    0,    0,    0, 6480, 7280, 7447, 6645, 6837,
    0,    0,    0,    0,    0, 2029, 1516,  829,    0,    0,
    0,  552,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1324,
 1324,    0,   98,    0,    0,    0,    0,    0,    0,    0,
 2359, 2377,    0, 2930,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2563,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1414,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1561,    0,    0,
    0,    0,    0,    0,    0, 1696,    0,    0,    0,    0,
    0,    0,    0,    0, 1654,    0,    0,    0,    0,    0,
    0,    0, 1457, 2563, 2359, 1564,  538,    0, 2573, 4155,
 1567,  115,    0,    0,    0,    0, 8611,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1045,    0,    0,    0, 5019,    0,    0,    0,    0,    0,
    0,    0, 7549,    0, 7585,    0, 7591,    0,    0,    0,
    0,    0,    0,    0, 7679,    0,    0, 7762,    0,    0,
 7773,    0, 7875,    0,    0, 7911,    0,    0, 8012,    0,
    0, 8558,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1519, 1569,    0, 2403,  325,    0,    0,    0,
    0,    0,    0,    0, 1587, 1619, 1636,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2501,
 1607,    0, 2136,    0, 2508,    0, 2510, 2512,    0,    0,
  733,    0,    0,    0, 2563,    0, 1567,    0,    0,    0,
    0, 2486,    0,    0,    0, 2407,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2402,    0, 2593,
    0,    0,    0,  859,    0, 1414, 2453,    0,    0,    0,
    0,    0,  786,  795,  813,  815,  911,  922,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  839,    0,    0,    0,    0, 2319,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1653,    0,    0,
    0,    0,    0,    0,    0, 1670,    0,    0,    0,    0,
    0,  130,    0,    0,    0,    0,    0,    0,    0,    0,
 4237,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8041,    0, 8125,    0, 8224,    0,    0,    0,    0, 8253,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1674,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1779,
    0,    0,    0, 1527,    0,    0,    0,    0,    0,    0,
  827,    0,    0,    0,    0, 2359,    0,    0,    0, 2917,
    0,    0,    0,    0,    0,    0, 2556,    0,    0, 2826,
 1539, 2251,    0, 2529,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2563,    0,    0,    0,    0,    0,
    0,    0, 1676,  856,    0,    0,    0,    0,    0,    0,
    0,    0, 2563, 2573,    0,  293,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  712,    0, 8339,
    0,    0, 5883,    0,    0,    0,    0, 8371,    0,    0,
    0,    0, 8459,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  325, 1019,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  704,    0, 2501,  794,    0,  502,    0,    0,    0,    0,
    0,    0,  665, 2830,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2564,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2544,    0,
    0,   78,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  378,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8479, 8587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  809,    0,    0,    0,  429,    0,    0,    0,    0,
    0, 2834,    0,    0,    0,    0,    0, 2818,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2569,    0,    0,    0,
    0, 2544,  108,    0,  120,    0,    0,    0,    0,    0,
    0,    0,  347,  423,    0,    0,  400, 2826,    0,    0,
    0,  253,    0,  608, 3501,    0,    0,    0, 2830,    0,
    0,    0,    0,    0,   74,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  279,    0, 1414,  390,  488,    0,    0, 2501, 1882,
    0,    0,  165,    0,  704,  324,   83, 1407,    0,    0,
 2838,    0,    0,    0,    0,    0, 2832,  206,    0, 2587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2544,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  585,    0,  127,    0,  429, 1398, 2848,    0,    0, 2830,
    0,    0,    0,    0, 2849,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2501,    0,  608,    0,    0,    0,    0,    0,
    0,    0, 2835,    0,    0,    0, 4484,    0,    0,    0,
    0,    0,   83, 2856,    0,    0,    0,    0,    0, 1013,
 2848,    0,    0,    0,    0,    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2901,    0,    0, 2902,
    0,    0,    0,    0,    0,    0,    0,   10,    0, 2907,
    2,  280,  -22, -582, 1785,  836, -237, -480, 2898, 2659,
    0,  -35,    0, 2673,  -94,  -41,    0,  717, -395,  -34,
  -47,  -31, -163, 2670, 2264,    0,    0,    0,  640,    0,
    0,  -51, 1860, -510,   -7, -793, 2301, 2091, -272, 1883,
 2854, -260,    0,  -57,    0, -639,  -50,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -402, -630, 1878, -269, -156, -920,
    0,    0,    0,    0, -308, -104, -254, 1898, -307,  -46,
    0, -504,    0,    0, -465, -961,    0, 1538,    0,    0,
 2642, -573,  -37,    0,    0,    0,    0, 2613,    0, 2384,
 2649, -193, 1929, -724,    0,    0,    0, -694,    0,    0,
    0,    0,    0,    0, 1969,    0, 2665, 2233, 1927, 2650,
 2660,    0, 1383,    0, -492, 2216,  -60, -653, -701,    0,
    0,  -19, -939, -937, -934, -224, -924,    0, 1600, -974,
    0, 1311,-1148, 1615,    0, 2449,    0,    0,    0, 1328,
 1331, 1297,  121, -296,  -98, -100,    0,    0, 2254,    0,
 1799,    0,    0, -217,    0,    0,    0,    0, -145,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -574,
    0, -410,    0,-1113, -286, 1246, 1402,    0, 1304,    0,
    0, 2645,  -99, 2053, 1835, 1657,    0,    0,    0, -989,
 -832, -881,    0, -471, -305, -233, -293,    0,-1359, 1392,
  282, -463, -509, -727, -918,-1257,    0,    0,    1,    0,
    0,    0,    0,    0, 2703,    0,    0,    0,    0, 2716,
 2489,    0,    0,    0,    0,    0, 2727,    0,    0,    0,
    0,  -15,    0,    0,    0, -320, 2221, -312, 1791, -436,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2456,
    0,-1175, 2232,    0,    0,    0, 2652, 3039,    0,    0,
    0,    0,    0, 2775,    0,    0,    0,    0, 2583,    0,
 2581,    0,    0,    0, 2343,    0,    0,    0, -357,    0,
  595,    0, 2337, 2103,    0,    0, -612,-1180,  593,    0,
 2950, 1517,    0, 2369, -604, 2379,    0, -718, 2138,    0,
    0, -127, -657,    0, 1488,-1172,    0,-1159,-1099, -923,
    0, 1601,    0, 1351,    0, 1403,    0, 1306,    0,    0,
    0,    0, 2602,    0,    0,    0, -324, 2437, 2213,-1004,
    0,    0,    0, 1065,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2250, 2142, 2011,    0, -571,
    0,    0,    0, -222,    0,    0, 2730,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  164, 1943,    0,
};
#define YYTABLESIZE 9202
static short yytable[] = {                                     191,
  130,  171,  288,  193,   76,   75,  240,  185,  494,   37,
  373,  174,  377,  190,  259,  262,  723,  589,  176,  260,
  263,  552,  198,  927,  224,  590,  557,  969,  762,  731,
  203,  750,  205,  709,  753,  228,  524,  522,  210, 1213,
  764,  465,  980,  233,  886,  229,  603,  227,  842,  246,
  845,  248,  235, 1131, 1203,  232, 1204,  200, 1352, 1205,
  234, 1203,  896, 1204,  130,  707, 1205, 1386,  655, 1207,
 1024,  928,  945,  231,  968,  247, 1207,  744,  889,  388,
  230, 1214,  237,  943,  625,  293,  269,  217,  388,  289,
  970,  971, 1222,  618,  619, 1166,  291,  624, 1049,  826,
  437, 1632,  918,  997,  462,  835,  435,  744,  514,  464,
  464, 1243, 1004,  350,  354,  258,  652,  312,  744,  257,
  965,  744, 1316,  695,  943,  941,  695,  943,  217,  955,
 1260,  217,  320,  689,  618,  376,  744,  618, 1007, 1456,
  486,  339,  943,  625,  943,  373,  217,  377,  744,   74,
  729,  744,  618,  943,  563,  737,  624,  744,  487, 1551,
  257,  662, 1120,  257,  688, 1044,  744,  498, 1471,  464,
   90,  722, 1762,  354,  689,  563,  380,  396,  257,  795,
  890,   74,  898, 1475,   74,  695, 1478,  943,  257,  521,
  435,  729,  689,  726,  729,  738,  296, 1023,  492, 1480,
   74,  740,  741,  742,  743,  383, 1029, 1463,  261,  729,
  466,  258,  589,  563,  383,  372,  123, 1261,  258,  471,
  590,  650, 1710,  688,  813,  485, 1170,  398,   74,  952,
  521,  258, 1238,  521,  563, 1599,  396, 1057,  478, 1384,
  472,  474, 1650,  703, 1704,  767,  586,  523,  521, 1320,
  521,  557,  688,  244,  526, 1126,  191, 1421,  539, 1481,
  313,  542,  323,  810,  318,  487,  770,  921,  922,  466,
  376,  677, 1679, 1770, 1422,  682,  683,  685,  257,  553,
 1401,  555, 1132,   86,  126,  735,   86, 1111, 1112,  868,
 1011,  114,  196,  688,  381,  607, 1123,  129,  599,  472,
  611,   57, 1203,  796, 1204,  586,  601, 1205, 1135, 1137,
 1396,  688, 1185,  609,  657,  807, 1601, 1207,  343,  257,
  127, 1721,  257,  695,  519, 1771,  768,  760,  269,   80,
 1182,  973,  485,  110,   73,  623,  484,  257,  314,  784,
  324,  658,  649,  126,  735,  646,  359,  943,  943, 1163,
  372,  196,  217,  344,   14,   76,  654,  649, 1221, 1602,
  660,  221, 1753,  943,  695,  383, 1030,  769,  464,  718,
  244, 1127, 1678,  627, 1215, 1216,  785,  690,  663, 1418,
 1624, 1183,  695,  519,  736,  744,  943,  744,  943,  253,
  217,  123,  123,  646,  623,  744,  253,  476, 1124,  676,
  264,  111,  943, 1317,  871,  359,  217, 1384,  942,  490,
 1136,  923,  618, 1475,  729, 1050, 1478,  464,  865, 1200,
  377,  386,  360, 1267,  943,  625,  893,   94,  217, 1480,
  253, 1555,  627,  253,  618, 1482,  690, 1069,  624,   90,
  704,  396,  465,  112,  897,  494,  790,  521,  253,  809,
 1581,  345,  689, 1492, 1411, 1354,  739, 1522,  676, 1523,
 1685,  744,  689,  521, 1739,  689,  360,  844,  466,  676,
  695,  729,  766, 1671,  689,  992,  269,  465,  994,  256,
  786,  360, 1001, 1709,  320, 1462,  744,  254,  388, 1481,
  521,  744, 1000,  173, 1549, 1548,  521,  744, 1368,  521,
  465,  675,  792,  188,  472, 1283,  706, 1348,  744,  484,
  464,  988, 1399,  901, 1348,  744,  592,  466,  917, 1018,
 1042,  689,  127,  924,  925, 1714, 1414,  651,  254,  464,
  689,  254,  932, 1254,  936,  937,  938,  939,  940,  625,
  932, 1698,  675,  866,  791,  464,  254,  191,  835,  744,
  991,  676,  624,  820,  821, 1324,  257, 1059,  257, 1130,
  675,  688, 1747,   73,   76, 1595,  257,  695,  464,  354,
 1597,  617,  188, 1119,  689,  592,  964, 1387, 1064,  744,
  356,  695, 1736,  867,  361,  563,  943,  617,  689,  586,
  217,  563, 1056,  484,  487,   73,  618,  836,   73, 1413,
 1564,  521,  956,  729,  498,  688,  188,  256,  521,  744,
  676,  729,  988, 1627,   73,  617,  318,   76,  837,  688,
  256,  257,  649,  864,  586, 1373,  521,  256,  361,  466,
 1631,  900,  812,  126, 1560,  986,  987,  168,  472, 1473,
  688,  196,   73,  361,  717, 1388,  243,  252,  688,  688,
  756, 1266,  586,  735,   86,  586,  521,  257,  861,  591,
  521,  485,  465, 1225,  687, 1482,  191,  253, 1433,  253,
  646,  586, 1195,  380, 1489,  359,  623,  253,  359,  257,
  478, 1426,  962, 1374,  976,  976,  257, 1491, 1693, 1070,
 1071, 1075,  519,  526, 1083, 1085, 1087,  586, 1095, 1098,
 1101, 1103, 1106, 1109, 1113,  687,  690, 1116, 1677,  690,
 1203,  695, 1204,  382,  627, 1205, 1457, 1684,  591,  817,
  257, 1010, 1012,  687, 1309, 1207, 1311,  532, 1534, 1212,
  464,  676,  688,  297, 1701,  990, 1256, 1139, 1140, 1558,
 1142, 1220, 1144,  359,  690, 1147, 1148, 1149, 1150, 1151,
 1152,  360,  521,  538,  360,  521,  487, 1719,  380,  861,
  676, 1242, 1156,  127,  925,  254,  674,  254,  253, 1206,
  602,  377,  382, 1009,  690,  254, 1206,  381,  377,  777,
  257,  778, 1043,  862, 1059,  387, 1483,  359, 1017,  136,
  253,  688, 1054,  679,  388,  663,  676,  253,  663,  359,
 1027,  359,  474, 1400, 1226, 1039, 1040, 1041,  676, 1410,
 1712, 1585,  384,  663,  383,  242,  676,  380,  690,  360,
  675,  531, 1458,  485, 1117,  676,  695, 1114,  650,  602,
  300,  253,  690,  675,  679, 1115,  381,  679,  137,   76,
  676, 1118,  675, 1223,  387, 1702,  587,  115,  136,  676,
 1158, 1159,  679,  388,  676,  138,  354,  242,  230,  592,
  712,  531,  531,  360,  359,  531,  254,  676, 1327,  650,
  676,  384,  650,  383, 1427,  360, 1559,  360,  135,  301,
  531,  305,  531,  676,  862,  695, 1646,  650,  254,  675,
  499,  253,  676, 1590,  592,  254,  264,  137,  675,  230,
  188,  138,  230,  475,  861,  587,  465,  376,  861,  611,
  386,  595,  531,  361,  138, 1524,  361,  230, 1591,  498,
  932,  385,  592, 1748,  956,  592,  188, 1309,  674,  254,
  306,  713, 1290, 1291,   96, 1293, 1295, 1545,  242,  676,
  265,  592,  675, 1300,  212, 1255, 1080, 1224,  676,  861,
  738, 1713,  254,  137,  139,  861,  675,  565,  476, 1395,
  498,  168,  595,  498, 1749,  694,  376,  592,  611,  386,
  695,   98, 1081,  981,  464,  477, 1592,  382,  498,  242,
  385,  361,  213,  687, 1582,  521,  191,  170, 1331,  254,
 1417,  302,  676,  380, 1160,  688, 1338, 1348,  925, 1586,
 1598,  925,  591, 1156,  688,  687,  589, 1346,  925, 1349,
 1350, 1750,  364, 1645,  590,  925,  565, 1206,  690,  377,
  805,  521,  380,   76, 1234,  361, 1314, 1314, 1318,  862,
 1249, 1658,  690,  862, 1660,  690,  465,  361, 1348,  361,
   99,  381,  307,  458,  808, 1353,  982,  124, 1269,  387,
  100,  688,  687,  364, 1273, 1380,  364, 1488,  388,  690,
  308,  687,  663,  663,  173,  591,  861,  136,  591,  136,
 1227,  364, 1474,  688,  862,  101,  384,  690,  383,  531,
  862, 1637, 1700,  610,  591,  808, 1362,  458,  808,  806,
 1370,  690, 1372,  181,  309,  531,  465,  197,  531,  531,
  690,  531,  458,  808,  464,  687,  531, 1228, 1378,  531,
  591,  382,  679,  602,  770, 1490,  368, 1704,  137,  687,
  688, 1430,  531,  521,  610,  679,   76,   76,  531,  688,
 1438,  531, 1703,  368,  679,  138,  242, 1443,  230,  861,
  676,  976,  610,  561,  116,  695, 1339,  650,  602,  690,
  861, 1416,  125, 1556, 1415, 1590,  380,  650,  178,  126,
  650, 1550, 1763,  188,  464,  663,  376,  695,  136,  650,
 1682,  376,  674,  688,  386,  381,  602,  376,  521,  602,
 1591,  679,  116,  387,  925,  385,  532, 1776,  925,  587,
  679,  862,  388, 1664,  570,  602,  676,  498, 1780,  498,
  531, 1662,  561,  690,  498,  676,  663,  498,  690,  691,
  384,  567,  383, 1725,  695, 1682,  650,  116,  264, 1425,
  498,  602,  531, 1429,  587,  650,  532,  532,  611,  531,
  532,  498,  606,  531,  679,   76, 1398,  242, 1592,  385,
  531,  317,  526, 1665,  318,  532, 1662,  532,  679,  487,
  611,  690,  587,  570, 1666,  587,  386, 1682,  531,  242,
  256, 1486,  894,  531,  862,  943,  242,  695,  690,  650,
  567,  587,  127,  343,  691,  862, 1642,  532, 1630, 1167,
 1644,  650,  959,  526, 1569, 1570,  526,  955,  531, 1682,
  319, 1244,  531, 1743, 1616,  521, 1541,  587,  498,  960,
  242,  526, 1474,  526,  445,  376,  808,   73,  386,  925,
  690,   95,  925, 1155, 1547,  191,  485,  976, 1340,  385,
  498, 1342,  569,  621, 1345, 1663, 1662,  498, 1169, 1493,
  749, 1683,  343,  526,  364,  403,  521,  194,  943,  521,
 1245,  364,  404, 1606,  364,  183,  184,  690,  364, 1532,
  690, 1662,  207,   96,  521, 1314,  364,  749, 1667,  519,
 1175,  498,  400,  808,  621,   97,  808,  621, 1756, 1757,
 1663,  161,  364,  808, 1176,  341,  808,   77,   78,  113,
  808,  569,  621, 1596,  487,  808,  694,  692,  808,  693,
   98,  695, 1726, 1727,  403,  264,  364,  611, 1177, 1638,
  519,  404,  610,  519,  808,  102,  690, 1641, 1686,  364,
 1687,  694,  692,  251,  693,  690,  695, 1744,  519, 1755,
  519,  400, 1587, 1786,  610, 1206,  364,  377,  808, 1754,
  161,  808,  808, 1067,  341, 1068, 1600, 1625,  611,  902,
 1628,  808,  549, 1654,  532, 1656, 1629,  217, 1526, 1723,
 1663,  485, 1178,  364,  251,   76,  611,  251,  808,   99,
  532,  498, 1583,  532,  532,  364,  532,  364,  690,  100,
 1527,  532,  251,  539,  532, 1663,   44, 1528,  690, 1781,
  808,  690, 1626,  549,  498,  808,  549,  532,   52,  520,
  690, 1745, 1623,  532,  101,  340,  532,  808,  925,  808,
  526,  549,  521,  549, 1464, 1639, 1604,  510, 1467, 1640,
  523, 1529,  102,  162,  539,  649,  526,  539,   42,  526,
  526, 1773,  526, 1767, 1768,   25,  651,  526, 1672,  498,
  526,  341,  539,  549,  539,   44,  130,  690,  217, 1735,
 1089,  740,  545,  526,   48,   50,  690,   52, 1778,  526,
 1244,  523,  526,  546,  523,  215,  649, 1090,  511, 1655,
  474, 1785,  264,  128,  539,  532,  371,  651,   26,  523,
  651,  523,  162,  521,  649,  521,  498,   42,  218,  217,
  521,  487,  217,  521,   25,  651,   49,  532,  694,  692,
  690,  693,  512,  695,  532,  222,  521,  217,  532, 1248,
  740,  523, 1091,   48,   50,  532,  904, 1705,  225,  498,
  513,  501,  369,  487,  487,  264,  130,  519,   51,  474,
  502,  526,  128,  532,  690,  371,  666,   26,  532, 1584,
  691, 1092,  236, 1688,  498,   46,  519,  519,  487,  519,
  119,  120,  621,  526,  519,   49,  245,  519,  485,  690,
  526,  487,  129,  532,  526,  691, 1287,  532,  516,  906,
  519,  526,  183,  184,  621,  130,  519,   76, 1708,  117,
  666,  237, 1688,   47,  521,  217, 1364,   51,  241,  526,
  485,  485, 1760,  242,  526,  666, 1365,  696,  694,  692,
 1154,  693, 1731,  695,   46,  521,  521,  496, 1093,  516,
  549,  249,  516,  521,  488,  485,  130,  694,  692,  526,
  693,  129,  695,  526, 1688,  376,  549,  516,  485,  516,
  549, 1175,  549, 1019, 1020,  868,  376,  549,  117, 1732,
  549,  539,   47,  250,  217, 1176,  521,  521,  519,  521,
  131, 1175, 1733,  549,  706,  488,  496,  539,  488,  549,
  251,  539,  549,  539,  521, 1176,  521,  255,  539, 1177,
  519,  539,  944,  488,  362,  363,  364,  519,  523,  699,
  694,  692,  132,  693,  539,  695,  519,  329,  519, 1177,
  539,  706,  120,  539,  523,  963,  624,  133,  523,  432,
  523,  433,  367,  368,  706,  523,  519,  944,  523,  869,
  286,  519,  645, 1772,  435,  644,  270,  854, 1278,  258,
  854,  523,  755, 1178,  330,  754,  331,  523,  287,  855,
  523,  549,  855,  295,  694,  692,  690,  693,  863,  695,
  519,  643,  691, 1178,  649,  870, 1308,  370, 1310,  332,
  871,  298,  369,  549,  649,  651,  872,  649,  694,  692,
  549,  693,  539,  695,  549,  651,  649,  386,  651,  854,
  258,  549,  315,  360,  333,  873,  885,  651,  710,  884,
  674,  855,  326, 1048,  539,  369, 1047, 1055,  328,  549,
  831,  539,  347,  624,  549,  539,  432,  275,  433,  523,
  152, 1168,  539,  258, 1167, 1186, 1194, 1236, 1047, 1193,
 1235,  435, 1241,  649, 1322, 1240,  258, 1321,  337,  549,
  539,  523,  649,  549,  651,  539,  516,  349,  523,  351,
  361, 1435,  523,  651, 1167,  271,  690, 1441,  652,  523,
 1470,  352,  691, 1469, 1472,  516,  516, 1469,  516,  356,
  539,  355,  652,  516,  539,  690,  516,  523,  666,  152,
  652,  691,  523,  521, 1761,  666,  649, 1469,  666,  516,
  272, 1784,  666,  392, 1704,  516,  652,  651,  649,  393,
  666,  124,  124,  521,  384,  521,  396,  523,  397,  651,
  521,  523,  488,  521,  488,  401,  666,  399,  273,  402,
  403,  274,  488,  470,  472,  484,  521,  482,   49,  473,
  500,   14,  521,  509,  517,  488,  530,  275,  690,   50,
  666,  417,  537,  405,  691,  540,   51,  550,  604,  608,
  652,  196,  406,  666,  554,  362,  363,  364,  659,  183,
  184,  610,  612,  276,  638,  639,  407,  516,  640,  620,
  666,   52,  360,  408,  643,  666,  647,  661,  365,  366,
  420,  421,  422,  367,  368,  423,  424,  386,  652,  516,
  664,  621,  690,  426,  427,  666,  516,  666,  691,  659,
  409,  667,  659,  410,  521,  668,  669,  516,  670,  666,
  196,  666,  671,  488,  672,  673,  690,  659,  674,  675,
  680,  681,  691,  360, 1442,  516,  521,  687,  689,  697,
  516,  411,  412,  521,  700,  488,   53,  698,  702,  716,
  405,  720,  488,  413,  521,  721,  727,  414,  633,  406,
  633,  633,  728,  633,  725,  622,  360,  700,  729,  516,
  732,  733,  521,  407,  734,  657,  633,  521,   54,  360,
  408,  633,   55,  501,  744,  745,  488,  929,  694,  692,
  361,  693,  747,  695,  748, 1146,  694,  692,  621,  693,
  757,  695,  758,  781,  782,  783,  521,  409,  623,  152,
  410,  788,  256,  797,  415,  793,  657,  798,  800,  657,
  416,  799,  895,  361,  899,  802,  803,  903,  905,  907,
  417,  152,  694,  692,  657,  693,  808,  695,  411,  412,
  814,  815,  818,  362,  362,  363,  364,  418,  183,  184,
  413,  819,  828,  830,  414,  831,  839,  362,  419,  841,
  152,  840,  622,  843,  880,  362,  879,  365,  366,  420,
  421,  422,  367,  368,  423,  424,  882,  425,  887,  152,
  891,  362,  426,  427,  892,  428,  429,  430,  152,  930,
  231,  431,  919,  934,  152,  362,  363,  364,  951,  183,
  184,  684, 1325,  694,  692,  623,  693,  957,  695,  704,
  966,  415,  152,  988,  974,  993,  809,  416,  365,  366,
  999,  998, 1001,  367,  368, 1005,  760,  417,  362,  363,
  364,  231,  183,  184,  231,  362, 1006, 1008, 1014, 1015,
  196,  362,  363,  364,  418,  183,  184, 1022, 1016,  231,
 1031,  365,  366, 1036,  153,  419,  367,  368,  521, 1025,
 1038, 1045,  196, 1050,  365,  366,  420,  421,  422,  367,
  368,  423,  424, 1062,  425,  657, 1063, 1065,  633,  426,
  427, 1077,  428,  429,  430,  633, 1122,  659,  431, 1125,
  659,  196, 1128,  631,  633,  631,  631,  659,  631,  521,
  659, 1120,  521, 1141,  659, 1143, 1145, 1138,  633,  659,
  196,  631,  659,  153,  633,  633,  631,  521,  196,  196,
 1153, 1165,  633,  690, 1172,  196,  690, 1174,  659, 1326,
  694,  692,  691,  693,  690,  695, 1180,  644, 1188, 1196,
  691, 1199,  633,  196, 1208,  633, 1191, 1329,  694,  692,
  411,  693,  659,  695, 1219,  196,  659,  196, 1217, 1229,
 1232, 1237, 1330,  694,  692,  659,  693, 1239,  695,  223,
  690,  633, 1250,  633,  633, 1246,  691, 1251,  624, 1253,
  196,  432,  659,  433, 1252,  633, 1332,  694,  692,  633,
  693, 1262,  695, 1264,  657, 1056,  435,  657, 1271, 1274,
 1276,  258, 1275, 1277,  657,  196, 1279,  657, 1280,  659,
  223,  657, 1284,  223, 1285, 1286,  657, 1288, 1289,  657,
 1296,  659, 1297, 1298, 1299,  181, 1301, 1302,  223,  659,
 1333,  694,  692, 1303,  693,  657,  695, 1304, 1305, 1306,
  861,  690, 1307, 1344, 1323, 1351,  633,  691,  694,  692,
 1164,  693,  633,  695,   73, 1341,  418, 1355, 1356,  657,
 1357, 1358,  633,  657, 1360, 1359,  181,  419,  242,  181,
  231, 1366,  657, 1369, 1375,  510,  633,  633,  633,  633,
  633,  633, 1377,  251,  181, 1371,  425,  532, 1385,  657,
  633, 1389, 1390, 1391,  428,  429,  430,  556, 1397,  633,
  633,  633,  633,  633,  633,  633,  633,  633, 1392,  633,
 1402, 1393, 1394,  631,  633,  633,  657,  633,  633,  633,
  631, 1412, 1419,  633,  251, 1423,  511,  251,  657,  631,
 1424, 1428, 1434,  153, 1281, 1454,  521, 1459,  521, 1455,
   95, 1465,  251,  631, 1466,  501,  521, 1484, 1533,  631,
  631, 1536, 1535, 1537,  502,  153, 1539,  631,  434,  521,
  512,  432, 1538,  433, 1542, 1540, 1543, 1544,  690,  242,
 1552, 1554, 1557, 1561,  691, 1562,  435,  631,  513, 1563,
  631,  258,   96, 1565,  153, 1566,  690, 1567, 1568, 1571,
 1572,  242,  691,  177,   97, 1573, 1574, 1575,  242, 1576,
 1577,  690, 1578,  153, 1579,  405,  631,  691,  631,  631,
  694,  692,  153,  693,  406,  695, 1580, 1588,  153,   98,
  631, 1589, 1605, 1603,  631,  690,  111, 1659,  407, 1607,
 1608,  691,  242, 1609,  360,  408,  153,  521, 1610, 1611,
  434, 1612, 1613,  432, 1614,  433, 1619,  223, 1620,  223,
 1621, 1643,  177,  621, 1622, 1648, 1649,  223,  435,  521,
 1657, 1615,  409,  258, 1681,  410,  521, 1694, 1706,  690,
 1720, 1673, 1334,  694,  692,  691,  693, 1722,  695, 1715,
 1717,  631, 1724,  181, 1729, 1737,  690,  631,   99, 1730,
 1469, 1741,  691,  411,  412, 1742, 1712,  631,  100, 1713,
  521,  138, 1759, 1764,  181,  413, 1765, 1766, 1704,  414,
 1769,  631,  631,  631,  631,  631,  631,  622, 1779, 1782,
 1783,    1,  203,  101,   30,  631,  181, 1335,  694,  692,
  618,  693,  181,  695,  631,  631,  631,  631,  631,  631,
  631,  631,  631,  744,  631,   32,  368,  519,  223,  631,
  631,  559,  631,  631,  631,  181,  271,  149,  631,  642,
  623,  251,  269,  251,   82,  455,  415,  926,  213,  519,
  223,  251,  416,  276,  181,  193,  396,  223, 1072,  519,
  925, 1073,  417,  181,  674,  405, 1336,  694,  692,  181,
  693,  672,  695,  668,  406,  670,  362,  363,  364,  418,
  183,  184,  281,  275,  289,  194,  369,  181,  407,  701,
  419,  223,  287,  700,  360,  408,  223,  288,  702,  365,
  366,  420,  421,  422,  367,  368,  423,  424,  611,  425,
  323,  330,  663,  321,  426,  427,  711,  428,  429,  430,
   26,   29,  409,  431,  181,  410,   39, 1312,  690,  116,
  400,  177,  829,  390,  691,  881,  196,  391, 1272,  187,
 1082, 1061,  251, 1073, 1337,  694,  692,  405,  693,  188,
  695, 1268,  177,  411,  412,  434,  406,  226,  432, 1270,
  433, 1546,  794, 1258,  251,  413,  519,  563,  505,  414,
  407,  251, 1198,  435,  177,  491,  360,  408,  258,  967,
  177, 1460,  694,  692, 1247,  693,  534,  695, 1461,  694,
  692,  690,  693, 1259,  695,  196,  535,  691,  187, 1003,
 1651, 1525, 1711,  177,  409,  251,  776,  410,  188, 1468,
  694,  692, 1084,  693, 1088,  695, 1096, 1099, 1531, 1104,
 1107, 1110,  177, 1718, 1074, 1716,  415,  996, 1379, 1752,
 1777,  177,  416, 1746,  642,  411,  412,  177, 1670, 1487,
 1187, 1363,  417, 1680,  543,  525,  690,  413,  780,  516,
 1037,  414,  691, 1028, 1409,  177,  362,  363,  364,  418,
  183,  184,  908,  909,  910,  911,  912,  913,  914,  915,
  419,  118,  483,  816,  711,  665,  715,   95,  958,  365,
  366,  420,  421,  422,  367,  368,  423,  424,  972,  425,
  953,  268,  177, 1190,  426,  427, 1647,  428,  429,  430,
 1758,  954, 1171,  431, 1593,  690, 1074, 1787,  415,  724,
 1728,  691,  694,  692,  416,  693,  888,  695,  641,   96,
 1134, 1292, 1343,    0,  417,    0,    0,    0,    0, 1695,
    0,   97,    0,    0,    0,    0,    0,    0,  362,  363,
  364,  418,  183,  184,    0,    0,    0,    0,    0,    0,
    0,    0,  419,    0,    0,    0,   98,    0,    0,    0,
    0,  365,  366,  420,  421,  422,  367,  368,  423,  424,
    0,  425,    0,    0,    0, 1086,  426,  427, 1073,  428,
  429,  430,  405,  690,    0,  431,    0,    0,    0,  691,
  434,  406,    0,  432,  196,  433,    0,  187,    0,    0,
    0,    0,    0,    0,    0,  407,    0,  188,  435,    0,
    0,  360,  408,  258,    0,  196,    0,    0,  187,    0,
  690,    0,    0,    0,    0,   99,  691,  690,  188,    0,
    0,    0,    0,  691,    0,  100,    0,  196,    0,  409,
  187,    0,  410,  196,  694,  692,  187,  693,  690,  695,
  188,    0,    0,    0,  691,    0,  188,    0,    0,    0,
  101, 1699,    0,    0,    0,    0,  196,    0,    0,  187,
  411,  412,  434,    0,    0,  432,    0,  433,  102,  188,
    0,    0,  413,    0,    0,  196,  414,    1,  187,    0,
  435,    0,    0,  196,  196,  258,    0,  187,  188,    0,
  196,    0,    0,  187,    0,    0,    0,  188,    0,    2,
    0,    0,    0,  188,    0,    0,   59,    3,  196,    0,
    0,  187,    0,    0,    4,    0,    5,   60,    6,    0,
    0,  188,    0,    7,   61,    0,    0,    0,    0,    0,
    8, 1074,    0,  415,    0,    0,    0,   62,    0,  416,
  690,    0,    0,    0,    9,  196,  691,    0,  187,  417,
    0,    0,    0,    0,    0,   10,  196,    0,  188,    0,
    0,    0,    0,  362,  363,  364,  418,  183,  184,    0,
    0,    0,    0,    0,    0,    0,    0,  419,    0,    0,
    0,    0,    0,    0,    0,    0,  365,  366,  420,  421,
  422,  367,  368,  423,  424,    0,  425,    0,   63,    0,
 1094,  426,  427, 1073,  428,  429,  430,  405,    0,    0,
  431,    0,    0,    0,   64,  434,  406,    0,  432,    0,
  433,    0,   11,    0,    0,    0,    0,    0,    0,   12,
  407,   65,   13,  435,   14,   15,  360,  408,  258,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
   67,    0,    0,   68,    0,    0,    0,    0,    0,   16,
    0,   69,    0,    0,  409,    0,    0,  410,    0,    0,
    0,    0,  690,    0,    0,    0,    0,    0,  691,    0,
   70,    0, 1097,    0,    0, 1073,    0,    0,    0,  405,
    0,    0,    0,    0,    0,  411,  412,  434,  406,    0,
  432,    0,  433,    0,    0,    0,    0,  413,   17,    0,
  654,  414,  407,    0,    0,  435,    0,    0,  360,  408,
  258,    0,    0,   18,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1431, 1432,
    0,    0,    0,    0, 1436, 1437,  409, 1439, 1440,  410,
    0,  654,    0,    0,  654, 1444, 1445, 1446, 1447,    0,
 1448, 1449, 1450, 1451, 1452, 1453, 1074,    0,  415,  654,
    0,    0,    0,    0,  416,    0,    0,  411,  412,    0,
    0,    0,    0,    0,  417,    0,    0,    0,    0,  413,
    0,    0,    0,  414,    0,    0,    0,    0,  362,  363,
  364,  418,  183,  184,    0,    0,    0,    0,    0,    0,
    0,    0,  419,    0,    0,    0,    0,    0,    0,    0,
    0,  365,  366,  420,  421,  422,  367,  368,  423,  424,
    0,  425,    0,    0,    0, 1102,  426,  427, 1073,  428,
  429,  430,  405,    0,    0,  431,    0,    0, 1074,    0,
  415,  406,    0,    0,    0,    0,  416,    0,    0,    0,
    0,    0,    0,    0,    0,  407,  417,    0,    0,    0,
    0,  360,  408,    0,    0,    0,    0,    0,    0,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,    0,  409,
    0,    0,  410,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,    0,    0,    0, 1105,  426,  427,
 1073,  428,  429,  430,  405,    0,    0,  431,    0,    0,
  411,  412,  434,  406,    0,  432,    0,  433,    0,    0,
    0,    0,  413,    0,    0,    0,  414,  407,    0,    0,
  435,    0,    0,  360,  408,  258,  929,  694,  692,    0,
  693,    0,  695,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  859,  858,  860,    0,    0,
    0,  409,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1074,    0,  415,    0,    0,    0,    0,    0,  416,
    0,    0,  411,  412,    0,    0,    0,    0,    0,  417,
    0,    0,    0,    0,  413,    0,    0,    0,  414,  654,
    0,    0,  654,  362,  363,  364,  418,  183,  184,  654,
    0,    0,  654,    0,    0,    0,  654,  419,    0,    0,
    0,  654,    0,    0,  654,    0,  365,  366,  420,  421,
  422,  367,  368,  423,  424,    0,  425,    0,    0,    0,
  654,  426,  427,    0,  428,  429,  430,    0,    0,    0,
  431,    0,    0, 1074,    0,  415,    0,    0,    0,    0,
    0,  416,    0,    0,  654,    0,    0,    0,  654,    0,
    0,  417,    0,    0,    0,    0,    0,  654,    0,    0,
    0,    0,    0,    0,    0,  362,  363,  364,  418,  183,
  184,    0,    0,    0,  654,    0,    0,    0,    0,  419,
    0,    0,    0,    0,    0,    0,    0,    0,  365,  366,
  420,  421,  422,  367,  368,  423,  424,    0,  425,    0,
    0,  654, 1108,  426,  427, 1073,  428,  429,  430,  405,
    0,    0,  431,  654,    0,    0,    0,  434,  406,  463,
  432,    0,  433,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  407,    0,    0,  435,    0,  846,  360,  408,
  258,    0,    0,    0,    0,  690,    0,    0,    0,    0,
   81,  691,    0,    0,  847,  694,  692,   82,  693,    0,
  695,   83,   84,    0,    0,    0,  409,    0,    0,  410,
   85,    0,    0,  859,  858,  860,    0,    0,    0,    0,
    0,    0,   86,    0,    0,    0,    0,    0,    0,    0,
  848,    0,    0,    0,    0,    0,    0,  411,  412,  849,
    0,  434,    0,    0,  432,    0,  433,  850,    0,  413,
    0,    0,    0,  414,    0,    0,    0,    0,    0,  435,
    0,    0,    0,    0,  258,    0,  851,    0,  852,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  853,    0,  854,  855,  856,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   88,    0,    0,    0, 1074,    0,
  415,    0,    0,    0,    0,    0,  416,    0,    0,   89,
    0,    0,    0,   90,    0,    0,  417,    0,    0,    0,
    0,    0,    0,    0,   91,  857,    0,    0,    0,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
    0,    0,    0,   92,  419,    0,    0,    0,    0,    0,
    0,    0,    0,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,    0,    0,    0,    0,  426,  427,
    0,  428,  429,  430,  405,    0,    0,  431,    0,    0,
    0,    0,    0,  406,  937,    0,  937,  937,    0,  937,
    0,    0,    0,    0,    0,    0,    0,  407,    0,    0,
    0,    0,  937,  360,  408,    0,    0,  937,    0,    0,
    0,    0,    0,    0,    0,  846,    0,    0,    0,    0,
    0,    0,    0,  690,    0,    0,    0,    0,    0,  691,
    0,  409,  847,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  405,    0,
  361,    0,  411,  412,    0,    0,  633,  406,  848,  633,
    0,  633,    0,    0,  413,    0,    0,  849,  414,    0,
    0,  407,    0,    0,  633,  850,    0,  360,  408,  633,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  851,    0,  852,    0,    0,    0,
    0,    0,    0,    0,    0,  409,    0,    0,  410,    0,
  853,    0,  854,  855,  856,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  415,    0,    0,    0,    0,
    0,  416,    0,    0,  361,    0,  411,  412,    0,    0,
    0,  417,    0,    0,    0,    0,    0,    0,  413,    0,
    0,    0,  414,    0,    0,  362,  363,  364,  418,  183,
  184,    0,    0,  857,    0,    0,    0,    0,    0,  419,
    0,    0,    0,    0,    0,    0,    0,    0,  365,  366,
  420,  421,  422,  367,  368,  423,  424,    0,  425,    0,
    0,    0,    0,  426,  427,    0,  428,  429,  430,  684,
    0,  937,  431,    0,    0,    0,    0,    0,    0,  415,
  937,    0,    0,    0,    0,  416,    0,    0,    0,    0,
    0,    0,    0,    0,  937,  417,    0,    0,    0,    0,
  937,  937,    0,    0,    0,    0,    0,    0,    0,  362,
  363,  364,  418,  183,  184,    0,    0,    0,    0,    0,
    0,    0,    0,  419,    0,    0,    0,    0,  937,    0,
    0,  937,  365,  366,  420,  421,  422,  367,  368,  423,
  424,    0,  425,    0,    0,    0,  633,  426,  427,    0,
  428,  429,  430,  633,    0,    0,  431,  937,    0,  937,
  937,  434,  633,    0,  432,    0,  433,    0,    0,    0,
    0,  937,    0,    0,    0,  937,  633,    0,    0,  435,
    0,    0,  633,  633,  258,    0,    0,    0,    0,    0,
  633,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  633,    0,    0,  633,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  937,    0,    0,    0,    0,    0,  937,    0,
    0,  633,  633,    0,    0,    0,    0,    0,  937,    0,
    0,    0,    0,  633,    0,    0,    0,  633,    0,    0,
    0,    0,  937,  937,  937,  937,  937,  937,    0,    0,
    0,    0,    0,    0,    0,    0,  937,    0,    0,    0,
    0,    0,    0,    0,    0,  937,  937,  937,  937,  937,
  937,  937,  937,  937,    0,  937,    0,    0,    0,    0,
  937,  937,    0,  937,  937,  937,    0,    0,    0,  937,
    0,    0,    0,    0,  633,    0,    0,    0,    0,    0,
  633,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  633,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  633,  633,  633,  633,  633,  633,
    0,    0,    0,  564,    0,    0,    0,  565,  633,    0,
    0,    0,    0,    0,    0,  760,    0,  633,  633,  633,
  633,  633,  633,  633,  633,  633,  566,  633,    0,  567,
    0,    0,  633,  633,    0,  633,  633,  633,  405,  434,
    0,  633,  432,    0,  433,    0,    0,  406,    0,    0,
    0,    0,    0,    0,  315,    0,    0,  435,    0,    0,
    0,  407,  258,    0,    0,    0,    0,  360,  408,    0,
  568,    0,    0,    0,    0,    0,  569,  570,  571,    0,
  572,  573,  574,    0,  575,  315,    0,    0,    0,    0,
    0,    0,  315,    0,    0,  409,  315,  315,  410,  315,
    0,    0,  315,    0,  576,    0,  577,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  315,    0, 1377,    0,
    0,    0,  315,    0,    0,  434,  411,  412,  432,    0,
  433,    0,    0,    0,    0,    0,    0,  578,  413,    0,
    0,    0,  414,  435,    0,    0,    0,    0,  258,    6,
    0,    0,    0,    0,  579,    0,    0,    0,    0,    0,
 1494, 1495,    0, 1496,    0,    0, 1497,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  580,    0,    0,    0,
 1498,    0,  315,    0,    0,    0, 1499,    0,    0,    0,
    0,  188,    0,    0,    0,    0,    0,    0,    0,  415,
    0,  315,    0,    0,    0,  416,    0,    0,    0,    0,
    0,  581,  582,    0,    0,  417,  315,    0,    0,    0,
    0,    0,    0,  676,    0,    0,  315,    0,  583,  362,
  363,  364,  418,  183,  184,  315,    0,  315,    0,    0,
    0,    0,    0,  419,  315,    0, 1500,    0,    0,    0,
    0,    0,  365,  366,  420,  421,  422,  367,  368,  423,
  424,    0,  425,    0,    0,   14,  405,  426,  427,    0,
  428,  429,  430,  315,    0,  406,  431,    0,    0,    0,
 1501,    0,    0,    0,    0,    0,    0,    0,    0,  407,
   16,    0,    0,    0,    0,  360,  408,    0,    0, 1615,
    0, 1502,    0,    0,  434,  931,    0,  432,  484,  433,
    0,    0,    0,    0,    0,    0,    0,    0,  777,    0,
    0,    0,  435,  409,    0,    0,  410,  258,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1503,    0,    0,
    0,    0,    0,    0,    0, 1377,    0,    0,    0,    0,
    0,    0,  405,    0,  411,  412,    0,    0,    0,  777,
    0,  406,  777,    0,    0,    0,  413,    0,  434,    0,
  414,  432,    0,  433,    0,  407,    6,  777,    0,    0,
    0,  360,  408,    0,    0,    0,  435, 1494, 1495,    0,
 1496,  258,    0, 1497,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1498,    0,  409,
    0,    0,  410, 1499,    0,    0,    0,  684,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  415,    0,    0,
    0,    0,    0,  416,    0,    0,    0,    0,  361,    0,
  411,  412,    0,  417,    0,    0,    0,    0,    0,    0,
    0,    0,  413,    0,    0,    0,  414,  362,  363,  364,
  418,  183,  184,    0,    0,    0,    0,    0,    0,    0,
    0,  419,    0, 1500,    0,    0,    0,    0,    0,    0,
  365,  366,  420,  421,  422,  367,  368,  423,  424,    0,
  425,    0,   14,    0,    0,  426,  427,    0,  428,  429,
  430,    0,    0,    0,  431,    0,    0, 1501,    0,    0,
    0,    0,    0,  415,    0,    0,    0,   16,    0,  416,
    0,    0,    0,    0,    0,    0,    0,    0, 1502,  417,
    0,  405,    0,    0,    0,  484,    0,    0,    0,    0,
  406,    0,    0,  362,  363,  364,  418,  183,  184,    0,
    0,    0,    0,    0,  407,    0,    0,  419,    0,    0,
  360,  408,    0,    0, 1503,    0,  365,  366,  420,  421,
  422,  367,  368,  423,  424,    0,  425,    0,    0,    0,
  777,  426,  427,    0,  428,  429,  430,    0,  409,    0,
  431,  410,    0,    0,  434,  405,    0,  432,    0,  433,
    0,    0,    0,    0,  406,    0,    0,    0,    0,    0,
    0,    0,  435,    0,    0,    0,    0,  258,  407,  411,
  412,    0,    0,    0,  360,  408,    0,    0,    0,    0,
    0,  413,    0,    0,    0,  414,    0,  777,    0,    0,
  777,    0,    0,    0,    0,    0,    0,  777,    0,    0,
  777,    0,  409,    0,  777,  410,    0,    0,  434,  777,
    0,  432,  777,  433,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  435,    0,  777,    0,
    0,  258,    0,  411,  412,    0,    0,    0,    0,    0,
    0,    0,  415,    0,    0,  413,    0,    0,  416,  414,
    0,    0,  777,    0,    0,  777,  777,    0,  417,    0,
    0,    0,    0,    0,    0,  777,    0,    0,    0,    0,
    0,    0,  362,  363,  364,  418,  183,  184,    0,    0,
    0,    0,  777,    0,    0,    0,  419,    0,    0,    0,
    0,    0,    0,    0,    0,  365,  366,  420,  421,  422,
  367,  368,  423,  424,  777,  425,  415,    0,    0,  777,
  426,  427,  416,  428,  429,  430,    0,    0,    0,  431,
    0,  777,  417,  777,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1100,    0,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,    0,    0,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,    0,  425,
    0,  405,    0,    0,  426,  427,    0,  428,  429,  430,
  406,    0,    0,  431,    0,    0,    0,    0,  434,    0,
    0,  432,    0,  433,  407,    0,    0,    0,    0,    0,
  360,  408,    0,    0,    0,    0,  435, 1653,    0,    0,
    0,  258,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  409,    0,
    0,  410,    0,    0,    0,  405,    0,    0,    0,    0,
    0,    0,    0,    0,  406,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  407,  411,
  412,    0,    0,    0,  360,  408,    0,    0,    0,    0,
    0,  413,    0, 1696,    0,  414,  432,    0,  433,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  435,  409,    0,    0,  410,  258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1281,  411,  412,    0,    0,    0,    0,    0,
    0,    0,  415,    0,    0,  413,    0,    0,  416,  414,
    0,    0,    0,    0,    0,    0,    0,    0,  417,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  362,  363,  364,  418,  183,  184,    0,    0,
    0,    0,    0,    0,    0,    0,  419,    0,    0,    0,
    0,    0,    0,    0,    0,  365,  366,  420,  421,  422,
  367,  368,  423,  424,    0,  425,  415,    0,    0,    0,
  426,  427,  416,  428,  429,  430,    0,    0,    0,  431,
    0,    0,  417,    0,    0,  405,    0,    0,    0,    0,
    0,    0,    0, 1294,  406,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,    0,    0,  407,    0,
  419,    0,    0,    0,  360,  408,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,    0,  425,
    0,    0,    0,    0,  426,  427,  451,  428,  429,  430,
    0,    0,  409,  431,    0,  410,  451,  451,  451,  451,
  451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
  451,    0,    0,  451,  451,  451,  451,    0,  451,    0,
  405,  451,  451,  411,  412,    0,    0,    0,  434,  406,
    0,  432,    0,  433,    0,  413,    0,    0,    0,  414,
    0,    0,    0,  407,    0,    0,  435,    0,    0,  360,
  408,  258,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  409,    0,    0,
  410,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  937,    0,    0,  937,  415,  937,    0,    0,
    0,    0,  416,    0,    0,    0,  361,    0,  411,  412,
  937,    0,  417,    0,    0,  937,    0,    0,    0,    0,
  413,    0,    0,    0,  414,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,    0,    0,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,    0,  425,
    0,    0,    0,    0,  426,  427,    0,  428,  429,  430,
    0,    0,    0,  431,    0,    0,    0,    0,    0,    0,
    0,  415,    0,    0,    0,    0,    0,  416,    0,    0,
    0,    0,    0,    0,    0,  564,    0,  417,    0,  565,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  362,  363,  364,  418,  183,  184,    0,  566,    0,
    0,  567,    0,    0,    0,  419,    0,    0,    0,    0,
    0,    0,    0,    0,  365,  366,  420,  421,  422,  367,
  368,  423,  424,    0,  425,    0,    0,    0,    0,  426,
  427,    0,  428,  429,  430,  405,    0,    0,  431,    0,
    0,    0,  568,    0,  406,    0,    0,    0,  569,  570,
  571,    0,  572,  573,  574,    0,  575,    0,  407,    0,
    0,    0,    0,  832,  360,  408,    0,  565,    0,    0,
    0,    0,  943,    0,    0,    0,  576,    0,  577,    0,
    0,    0,  833,    0,    0,    0,  566,    0,    0,  567,
    0,    0,  409,    0,    0,  410,    0,    0,    0,  937,
    0,    0,    0,    0,    0,    0,    0,    0,  937,  578,
    0,    0,  939,  943,  943,  943,  943,  943,  955,  943,
    0,    0,  937,  411,  412,    0,  579,    0,  937,  937,
  568,  943,  943,  943,  943,  413,  569,  570,  571,  414,
  572,  573,  574,    0,  575,    0,    0,    0,  580,    0,
    0,    0,    0,    0,    0,    0,  937,    0,    0,  937,
    0,    0,    0,  943,  576,  943,  577,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  581,  582,    0,    0,  937,  937,    0,
    0,    0,    0,    0,    0,    0,  415,  578,    0,  937,
  583,    0,  416,  937,    0,    0,    0,    0,    0,    0,
    0,    0,  417,    0,  579,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,  580,  823,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,    0,  425,
  937,    0,    0,    0,  426,  427,  937,  428,  429,  430,
    0,  581,  582,  431,    0,    0,  937,    0,  823,  823,
  823,  823,  823,    0,  823,    0,    0,    0,  583,    0,
  937,  937,  937,  937,  937,  937,  823,  823,  823,  823,
    0,    0,    0,    0,  937,    0,    0,    0,    0,    0,
    0,    0,    0,  937,  937,  937,  937,  937,  937,  937,
  937,  937,    0,  937,    0,    0,    0,    0,  937,  937,
  823,  937,  937,  937,  943,    0,  943,  937,    0,    0,
    0,    0,    0,    0,  943,    0,    0,    0,    0,    0,
    0,    0,  943,    0,    0,    0,    0,    0,  943,    0,
    0,  943,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  943,  943,    0,    0,  943,    0,    0,    0,    0,    0,
    0,  943,    0,  943,  943,    0,    0,  943,    0,    0,
    0,  943,    0,    0,  943,    0,  943,    0,  943,    0,
    0,    0,    0,  943,  943,    0,  943,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  835,
    0,    0,  943,  943,    0,  943,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  943,
    0,  943,  943,  943,    0,    0,  943,    0,    0,  943,
  943,    0,    0,    0,    0,    0,    0,    0,    0,  943,
  835,  835,  835,  835,  835,    0,  835,    0,    0,    0,
    0,    0,    0,  943,    0,    0,  943,    0,  835,  835,
  835,  835,    0,    0,    0,    0,    0,    0,    0,  823,
    0,  823,  943,    0,    0,    0,    0,    0,  943,  823,
    0,    0,    0,  943,    0,    0,    0,  823,    0,    0,
    0,    0,  835,  823,  943,  943,  823,  943,    0,    0,
    0,    0,    0,  943,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  823,  823,    0,    0,  823,
    0,    0,    0,    0,    0,    0,  823,    0,  823,  823,
    0,    0,  823,    0,    0,    0,  823,    0,    0,  823,
    0,  823,    0,  823,    0,    0,    0,    0,  823,  823,
    0,  823,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  838,    0,    0,  823,  823,    0,
  823,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  823,    0,  823,  823,  823,    0,
    0,  823,    0,    0,  823,  823,    0,    0,    0,    0,
    0,    0,    0,    0,  823,  838,  838,  838,  838,  838,
    0,  838,    0,    0,    0,    0,  221,    0,  823,    0,
  221,  823,    0,  838,  838,  838,  838,    0,    0,    0,
    0,    0,    0,    0,    0,  221,    0,  823,    0,  221,
    0,    0,  221,  823,    0,    0,    0,    0,  823,    0,
    0,    0,    0,    0,    0,    0,    0,  838,    0,  823,
  823,  835,  823,  835,    0,    0,    0,    0,  823,    0,
    0,  835,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  221,    0,  835,    0,    0,  835,  221,
  221,  221,    0,  221,  221,  221,    0,  221,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  835,  835,    0,
    0,  835,    0,    0,    0,    0,    0,  221,  835,  221,
  835,  835,    0,    0,  835,    0,    0,    0,  835,    0,
    0,  835,    0,  835,    0,  835,    0,    0,    0,    0,
  835,  835,    0,  835,    0,    0,    0,    0,    0,    0,
  221,    0,    0,    0,    0,   81,  839,    0,    0,  835,
  835,    0,  835,    0,    0,    0,    0,  221,    0,    0,
    0,    0,    0,    0,    0,    0,  835,    0,  835,  835,
  835,    0,    0,  835,    0,    0,  835,  835,    0,  221,
    0,    0,    0,    0,    0,    0,  835,  839,  839,  839,
  839,  839,    0,  839,    0,    0,    0,    0,    0,    0,
  835,    0,    0,  835,    0,  839,  839,  839,  839,    0,
    0,    0,    0,    0,  221,  221,  838,    0,  838,  835,
    0,    0,    0,    0,    0,  835,  838,    0,    0,    0,
  835,  221,    0,    0,    0,    0,    0,    0,    0,  839,
    0,  835,  835,  838,  835,    0,    0,    0,    0,    0,
  835,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  838,  838,    0,    0,  838,    0,    0,    0,
    0,    0,    0,  838,    0,  838,  838,    0,    0,  838,
    0,    0,    0,  838,  833,    0,  838,    0,  838,    0,
  838,    0,    0,    0,    0,  838,  838,    0,  838,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  838,  838,    0,  838,    0,    0,
    0,    0,    0,    0,    0,  833,    0,  833,  833,  833,
    0,  838,    0,  838,  838,  838,    0,    0,  838,    0,
    0,  838,  838,  833,  833,  833,  833,    0,    0,    0,
    0,  838,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  564,    0,  838,    0,  565,  838,    0,
    0,    0,    0,    0,    0,    0,    0,  833,    0,    0,
    0,    0,    0,    0,  838,    0,  566,    0,    0,  567,
  838,    0,    0,    0,    0,  838,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  838,  838,  839,  838,
  839,    0,    0,    0,    0,  838,    0,    0,  839,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  568,    0,    0,    0,    0,  839,  569,  570,  571,    0,
  572,  573,  574,    0,  575,    0,    0,    0,    0,    0,
    0,  832,    0,    0,  839,  839,    0,    0,  839,    0,
    0,    0,    0,    0,  576,  839,  577,  839,  839,    0,
    0,  839,    0,    0,    0,  839,    0,    0,  839,    0,
  839,    0,  839,    0,    0,    0,    0,  839,  839,    0,
  839,    0,  832,    0,  832,  832,  832,  578,    0,    0,
    0,    0,    0,    0,    0,    0,  839,  839,    0,  839,
  832,  832,  832,  832,  579,    0,    0,    0,    0,    0,
    0,    0,    0,  839,    0,  839,  839,  839,    0,    0,
  839,    0,    0,  839,  839,    0,  580,    0,    0,    0,
    0,    0,    0,  839,  832,    0,  833,    0,  833,    0,
    0,  188,    0,    0,    0,    0,  833,  839,    0,    0,
  839,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  581,  582,  833,    0,    0,  839,    0,    0,    0,
    0,    0,  839,    0,    0,    0,    0,  839,  583,  834,
    0,    0,  833,  833,    0,    0,  833,    0,  839,  839,
    0,  839,    0,  833,    0,  833,  833,  839,    0,  833,
    0,    0,    0,  833,    0,    0,  833,    0,  833,    0,
  833,    0,    0,    0,    0,  833,  833,    0,  833,    0,
  834,    0,  834,  834,  834,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  833,  833,    0,  833,  834,  834,
  834,  834,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  833,    0,  833,  833,  833,    0,    0,  833,    0,
    0,  833,  833,    0,    0,    0,    0,    0,    0,    0,
    0,  833,  834,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  833,    0,    0,  833,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  832,  833,  832,    0,    0,    0,    0,
  833,    0,    0,  832,    0,  833,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  833,  833,    0,  833,
  832,    0,    0,    0,    0,  833,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  837,    0,    0,  832,
  832,    0,    0,  832,    0,    0,    0,    0,    0,    0,
  832,    0,  832,  832,    0,    0,  832,    0,    0,    0,
  832,    0,    0,  832,    0,  832,    0,  832,    0,    0,
    0,    0,  832,  832,    0,  832,    0,  837,    0,  837,
  837,  837,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  832,  832,    0,  832,  837,  837,  837,  837,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  832,    0,
  832,  832,  832,    0,    0,  832,    0,    0,  832,  832,
    0,    0,    0,    0,    0,    0,    0,    0,  832,  837,
    0,  834,    0,  834,    0,    0,    0,    0,  778,    0,
    0,  834,  832,    0,    0,  832,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  834,    0,
    0,  832,    0,    0,    0,    0,    0,  832,    0,    0,
    0,    0,  832,    0,  802,    0,    0,  834,  834,  778,
  781,  834,  778,  832,  832,    0,  832,    0,  834,    0,
  834,  834,  832,    0,  834,    0,    0,  778,  834,    0,
    0,  834,    0,  834,    0,  834,    0,    0,    0,    0,
  834,  834,    0,  834,    0,  802,    0,    0,  802,    0,
    0,  781,    0,    0,  781,    0,    0,    0,    0,  834,
  834,    0,  834,  802,    0,    0,    0,    0,    0,  781,
    0,    0,    0,    0,    0,    0,  834,    0,  834,  834,
  834,    0,    0,  834,    0,    0,  834,  834,    0,    0,
    0,    0,    0,    0,    0,    0,  834,    0,  779,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  834,    0,    0,  834,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  837,  834,
  837,    0,    0,    0,    0,  834,    0,    0,  837,  779,
  834,    0,  779,    0,    0,    0,    0,    0,    0,    0,
    0,  834,  834,    0,  834,  837,    0,  779,    0,    0,
  834,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  837,  837,    0,    0,  837,    0,
    0,  780,    0,    0,    0,  837,    0,  837,  837,    0,
    0,  837,  810,    0,    0,  837,    0,    0,  837,    0,
  837,    0,  837,    0,    0,    0,    0,  837,  837,    0,
  837,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  780,    0,    0,  780,  837,  837,    0,  837,
  778,    0,    0,  810,    0,    0,  810,    0,    0,    0,
  780,    0,    0,  837,    0,  837,  837,  837,    0,    0,
  837,  810,    0,  837,  837,    0,    0,    0,    0,    0,
    0,    0,    0,  837,    0,    0,  802,    0,    0,    0,
    0,    0,  781,    0,    0,    0,    0,  837,    0,    0,
  837,    0,    0,    0,    0,    0,    0,  778,    0,    0,
  778,    0,    0,    0,  774,    0,  837,  778,    0,    0,
  778,    0,  837,    0,  778,    0,    0,  837,    0,  778,
    0,    0,  778,    0,    0,    0,    0,    0,  837,  837,
    0,  837,    0,  802,    0,    0,  802,  837,  778,  781,
  775,    0,  781,  802,    0,  774,  802,    0,  774,  781,
  802,    0,  781,    0,    0,  802,  781,    0,  802,    0,
    0,  781,  778,  774,  781,  778,  778,    0,    0,    0,
  779,    0,    0,    0,  802,  778,    0,    0,    0,    0,
  781,  775,    0,    0,  775,    0,    0,    0,    0,    0,
    0,    0,  778,    0,    0,    0,    0,    0,  802,  775,
    0,  802,  802,    0,  781,    0,    0,  781,  781,    0,
    0,  802,    0,    0,  778,    0,    0,  781,    0,  778,
    0,    0,    0,    0,    0,    0,    0,  779,  802,    0,
  779,  778,    0,  778,  781,    0,    0,  779,    0,    0,
  779,  776,    0,    0,  779,    0,    0,    0,    0,  779,
  802,    0,  779,  780,    0,  802,  781,    0,    0,    0,
    0,  781,    0,    0,  810,    0,    0,  802,  779,  802,
  809,    0,    0,  781,    0,  781,    0,    0,    0,    0,
    0,    0,  776,    0,    0,  776,    0,    0,    0,    0,
    0,    0,  779,    0,    0,  779,  779,    0,    0,    0,
  776,    0,    0,    0,    0,  779,    0,    0,    0,    0,
  780,  809,    0,  780,  809,    0,    0,    0,    0,    0,
  780,  810,  779,  780,  810,    0,    0,  780,    0,  809,
    0,  810,  780,    0,  810,  780,    0,    0,  810,    0,
    0,    0,    0,  810,  779,    0,  810,    0,    0,  779,
    0,  780,    0,    0,  803,    0,    0,    0,    0,    0,
    0,  779,  810,  779,    0,    0,  774,    0,    0,    0,
    0,    0,    0,    0,    0,  780,    0,    0,  780,  780,
    0,    0,    0,    0,    0,    0,  810,    0,  780,  810,
  810,    0,    0,    0,    0,  803,    0,    0,  803,  810,
    0,    0,  775,    0,    0,  780,    0,    0,    0,    0,
    0,    0,    0,  803,    0,    0,  810,    0,    0,    0,
    0,    0,    0,  774,    0,    0,  774,  780,    0,    0,
    0,    0,  780,  774,    0,    0,  774,    0,  810,    0,
  774,    0,    0,  810,  780,  774,  780,    0,  774,    0,
    0,    0,    0,  811,    0,  810,    0,  810,    0,  775,
    0,    0,  775,    0,  774,    0,    0,    0,    0,  775,
    0,    0,  775,    0,    0,    0,  775,    0,    0,    0,
    0,  775,  812,    0,  775,    0,    0,    0,  774,    0,
    0,  774,  774,    0,  811,    0,    0,  811,    0,    0,
  775,  774,    0,  776,    0,    0,    0,    0,    0,    0,
    0,    0,  811,    0,    0,    0,    0,    0,  774,    0,
    0,    0,    0,  812,  775,    0,  812,  775,  775,    0,
    0,    0,  809,    0,    0,    0,    0,  775,    0,    0,
  774,  812,    0,    0,    0,  774,    0,    0,    0,    0,
    0,    0,    0,    0,  775,    0,    0,  774,    0,  774,
  776,    0,    0,  776,    0,    0,    0,    0,  800,    0,
  776,    0,    0,  776,    0,    0,  775,  776,    0,    0,
    0,  775,  776,    0,    0,  776,    0,    0,    0,  809,
    0,    0,  809,  775,    0,  775,    0,    0,    0,  809,
  804,  776,  809,    0,    0,    0,  809,    0,    0,  800,
    0,  809,  800,    0,  809,    0,  803,    0,    0,    0,
    0,    0,    0,    0,    0,  776,    0,  800,  776,  776,
  809,    0,    0,    0,    0,    0,    0,    0,  776,    0,
    0,  804,    0,    0,  804,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  809,  776,    0,  809,  809,  804,
    0,    0,    0,    0,    0,    0,    0,  809,    0,    0,
    0,    0,    0,  803,    0,    0,  803,  776,    0,    0,
    0,    0,  776,  803,  809,    0,  803,    0,  813,    0,
  803,    0,    0,    0,  776,  803,  776,    0,  803,    0,
    0,    0,    0,    0,    0,    0,  809,    0,  801,    0,
    0,  809,    0,    0,  803,  811,    0,    0,    0,    0,
    0,    0,    0,  809,    0,  809,    0,    0,    0,  813,
    0,    0,  813,    0,    0,    0,    0,    0,  803,    0,
    0,  803,  803,    0,  812,    0,    0,  813,    0,  801,
    0,  803,  801,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  801,  803,    0,
    0,    0,  811,    0,    0,  811,    0,    0,    0,    0,
    0,    0,  811,    0,    0,  811,    0,  760,    0,  811,
  803,    0,    0,    0,  811,  803,    0,  811,    0,    0,
    0,  812,    0,    0,  812,    0,    0,  803,    0,  803,
    0,  812,    0,  811,  812,    0,  805,    0,  812,    0,
    0,    0,    0,  812,    0,    0,  812,    0,  760,    0,
  800,  760,    0,    0,    0,    0,    0,  811,    0,    0,
  811,  811,  812,    0,    0,    0,  760,    0,    0,    0,
  811,    0,    0,    0,    0,    0,    0,  805,    0,    0,
  805,    0,  804,    0,    0,    0,  812,  811,    0,  812,
  812,    0,    0,    0,    0,  805,    0,    0,    0,  812,
    0,    0,    0,    0,    0,    0,    0,  800,    0,  811,
  800,    0,    0,    0,  811,    0,  812,  800,    0,    0,
  800,    0,    0,    0,  800,    0,  811,    0,  811,  800,
    0,    0,  800,    0,    0,    0,    0,    0,  812,  804,
    0,    0,  804,  812,    0,    0,    0,    0,  800,  804,
    0,    0,  804,    0,    0,  812,  804,  812,    0,    0,
    0,  804,    0,    0,  804,    0,    0,    0,    0,    0,
  813,    0,  800,    0,    0,  800,  800,    0,    0,    0,
  804,    0,    0,    0,    0,  800,    0,    0,    0,    0,
  801,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  800,    0,  804,    0,    0,  804,  804,    0,
    0,    0,    0,    0,    0,    0,    0,  804,    0,    0,
    0,    0,    0,    0,  800,    0,    0,  813,    0,  800,
  813,    0,    0,    0,  804,    0,    0,  813,    0,    0,
  813,  800,    0,  800,  813,    0,    0,  801,    0,  813,
  801,    0,  813,    0,    0,    0,  804,  801,    0,    0,
  801,  804,    0,    0,  801,    0,    0,    0,  813,  801,
    0,    0,  801,  804,    0,  804,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,    0,
    0,    0,  813,    0,    0,  813,  813,    0,  805,    0,
    0,    0,    0,    0,    0,  813,    0,    0,    0,    0,
    0,    0,  801,    0,    0,  801,  801,    0,    0,    0,
    0,    0,  813,    0,    0,  801,  760,    0,    0,  760,
    0,    0,    0,  221,    0,    0,  760,  221,    0,  760,
    0,    0,  801,  760,  813,    0,    0,    0,  760,  813,
    0,  760,  221,    0,    0,  805,  221,    0,  805,  221,
    0,  813,    0,  813,  801,  805,    0,  760,  805,  801,
    0,    0,  805,    0,    0,    0,    0,  805,    0,    0,
  805,  801,    0,  801,    0,    0,    0,    0,    0,    0,
    0,  760,    0,    0,  760,  760,  805,    0,    0,    0,
  221,    0,    0,    0,  760,    0,  221,  221,  221,    0,
  221,  221,  221,    0,  221,    0,    0,    0,    0,    0,
  805,  760,    0,  805,  805,    0,  134,    0,    0,    0,
  134,    0,    0,  805,  221,    0,  221,    0,    0,    0,
    0,    0,    0,  760,    0,    0,    0,    0,  760,  134,
  805,    0,  134,    0,    0,    0,    0,    0,    0,    0,
  760,    0,  760,    0,    0,    0,    0,  221,    0,    0,
    0,    0,  805,    0,    0,    0,    0,  805,    0,    0,
    0,    0,    0,    0,  221,    0,    0,    0,    0,  805,
    0,  805,    0,  134,    0,    0,    0,    0,    0,  134,
  134,  134,    0,  134,  134,  134,  221,  134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  134,    0,  134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  221,  221,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  142,    0,    0,    0,    0,    0,  221,    0,
  134,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,  134,    0,  159,
  160,  161,  162,    0,  163,    0,    0,  164,  165,    0,
    0,  541,    0,    0,    0,    0,    0,    0,    0,  134,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,    0,    0,  159,  160,
  161,  162,    0,  163,    0,    0,  164,  165,    0,    0,
    0,    0,    0,    0,  134,  134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  134,
};
static short yycheck[] = {                                      60,
   16,   52,  130,   61,    4,    4,  101,   59,  295,    0,
  235,   53,  235,   60,  119,  120,  488,  338,   54,  119,
  120,  330,   64,  681,   82,  338,  334,  729,  533,  495,
   66,  524,   67,  470,  527,   86,  309,  307,   70, 1001,
  533,  266,  737,   91,  657,   87,  343,   85,  622,  110,
  624,  112,   94,  886,  994,   90,  994,   65, 1172,  994,
   92, 1001,  667, 1001,   80,   45, 1001, 1216,  393,  994,
  795,  684,   40,   89,  728,  111, 1001,    0,  661,  243,
   88, 1002,   40,    0,    0,  133,  124,    0,  252,  131,
  730,  731, 1013,    0,  355,  928,  132,    0,  826,  609,
  257,   40,  676,  757,  261,  616,   58,    0,  302,  266,
    0, 1032,  766,  208,    0,   63,   44,  169,   41,    0,
  725,   44, 1127,   41,   41,  697,    0,   44,   41,   46,
 1049,   44,   59,    0,   41,  235,   59,   44,  769, 1320,
  286,  193,   59,   59,   61,  370,   59,  370,   41,   45,
    0,   44,   59,   42,    0,   40,   59,   44,  286, 1417,
   41,  399,   44,   44,    0,  819,   59,  295, 1349,   59,
   41,   44,   40,   59,   41,    0,  237,    0,   59,   40,
  661,   45,   42, 1359,   45,   59, 1359,   42,   40,    0,
   58,   41,   59,  490,   44,  503,  260,   44,  293, 1359,
   45,  510,  511,  512,  513,  241,   45,   41,   40,   59,
    0,   63,  533,   59,  250,  235,  287, 1050,   63,  270,
  533,  385,   44,   59,   40,  286,  945,  250,   45,  701,
   41,   63, 1026,   44,   59,   59,   59,   40,  274, 1214,
    0,  284,   61,  264,   44,  320,    0,  308,   59, 1131,
   61,  559,    0,   44,  315,  321,  317,  260,  319, 1359,
  257,  322,  257,   91,   59,  393,  536,  308,  309,   59,
  370,  428, 1632,  301, 1264,  432,  433,  434,    0,  331,
 1242,  333,  887,   41,    0,    0,   44,  861,  862,  329,
  783,   12,    0,   41,  435,  347,  879,   16,  340,   59,
  351,  456, 1242,  564, 1242,   59,  341, 1242,  891,  892,
 1231,   59,  966,  349,  418,  585,  403, 1242,  198,   41,
  461, 1681,   44,    0,    0,  353,  401,  285,  264,  321,
  406,  734,  393,  273,  459,    0,  461,   59,  335,  302,
  335,  445,  384,   59,   59,  381,    0,  264,  265,  923,
  370,   59,  265,  268,  418,  355,  392,  399, 1012,  446,
  396,   80, 1722,  280,   41,  401,  803,  442,  258,   44,
   44,  437, 1630,    0, 1005, 1006,  339,    0,  401, 1261,
 1529,  457,   59,   59,  269,  278,  303,  280,  305,    0,
  303,  462,  463,   44,   59,  288,  117,  440,  879,    0,
  260,  341,  319, 1128,  444,   59,  319, 1382,  297,  289,
  891,  452,  319, 1589,  264,  418, 1589,  307,  643,  993,
  643,  461,    0, 1054,  341,  341,  664,  403,  341, 1589,
   41, 1421,   59,   44,  341, 1359,   59,   41,  341,  310,
  461,  264,  667,  273,  304,  732,  551,  258,   59,  277,
 1455,  366,  319, 1374, 1248, 1174,  508, 1378,   59, 1380,
 1641,  384,  329,  274,  264,  332,   44,  624,  258,   41,
  388,  321,  533, 1622,  341,  745,  412,  702,  748,  459,
  443,   59,  301,  305,  411,  319,  379,    0,  652, 1589,
  301,  384,  762,  461, 1415, 1414,  307,  384, 1193,  310,
  725,    0,  554,  461,  264, 1077,  486, 1165,  401,  461,
  667,  459, 1237,  670, 1172,  408,    0,  307,  675,  789,
  817,  388,  461,  680,  681, 1674, 1254,  455,   41,  419,
  397,   44,  689, 1043,  691,  692,  693,  694,  695,  455,
  697, 1655,   41,  643,  552,  702,   59,  608, 1059,  442,
  744,    0,  455,  605,  606, 1138,  278,  830,  280,  884,
   59,  397, 1711,  459,  564, 1486,  288,  441,  725,  455,
 1491,  432,  461,  455,  441,   59,  722, 1217,  839,  502,
  453,  455, 1696,  644,    0,  410,  503,  432,  455,  343,
  503,  437,  395,  461,  722,  459,  503,  461,  459, 1253,
 1433,  412,  707,  453,  732,  441,  461,  459,  419,  502,
   59,  461,  459, 1534,  459,  432,  411,  617,  617,  455,
  459,  502,  664,  643,  378, 1199,  437,  459,   44,  419,
 1551,  669,  448,  349, 1428,  740,  741,  461,  398, 1358,
  388,  349,  459,   59,  319, 1219,  437,  321,   41,  397,
  530, 1054,  406,  368,  412,  409,  467,  379,  262,    0,
  471,  722,  887,  302,    0, 1589,  727,  278, 1281,  280,
  321,  425,  981,  734, 1369,  329,  341,  288,  332,  401,
  716,  274,  718,   41,  736,  737,  408,   41, 1650,  846,
  847,  848,  368,  754,  851,  852,  853,  451,  855,  856,
  857,  858,  859,  860,  868,   41,  329,  871, 1629,  332,
 1650,  388, 1650,    0,  341, 1650, 1321, 1638,   59,  599,
  442,  782,  783,   59, 1120, 1650, 1122,  288,   41,  999,
  887,  332,    0,  139,   41,  743, 1045,  894,  895,  356,
  897, 1011,  899,  397,   41,  902,  903,  904,  905,  906,
  907,  329,   41,  288,  332,   44,  884, 1678,    0,  262,
  332, 1031,  919,  461,  921,  278,  344,  280,  379,  994,
    0,  994,   59,  781,  397,  288, 1001,    0, 1001,  466,
  502,  468,  818,  387, 1057,    0, 1360,  441,  788,    0,
  401,   59,  828,    0,    0,   41,  397,  408,   44,  453,
  800,  455,  284, 1240,  443,  813,  814,  815,    0, 1246,
  302, 1469,    0,   59,    0,  278,  388,   59,  441,  397,
  319,    0, 1327,  884,  872,  397,    0,  869,    0,   59,
  258,  442,  455,  332,   41,  870,   59,   44,    0,  839,
  441,  873,  341,  339,   59,   41,    0,   12,   59,   41,
  308,  309,   59,   59,  455,    0,  217,  320,    0,  343,
  378,   40,   41,  441,  225,   44,  379,   59, 1141,   41,
  319,   59,   44,   59,  467,  453,  493,  455,  461,  307,
   59,  258,   61,  332,  387,   59, 1588,   59,  401,  388,
  296,  502,  341,  344,  378,  408,  260,   59,  397,   41,
  461,  388,   44,  385,  262,   59, 1131,    0,  262,    0,
    0,  406,   91,  329,   59, 1381,  332,   59,  369,    0,
 1077,    0,  406,  378, 1029,  409,  461, 1323,  344,  442,
  307,  449, 1089, 1090,  302, 1092, 1093, 1403,  401,  388,
  304,  425,  441, 1100,  265, 1044,  353,  443,  397,  262,
 1258,  443,  117,   59,  441,  262,  455,    0,  440, 1229,
   41,  461,  457,   44,  419,   42,   59,  451,   59,   59,
   47,  339,  379,  357, 1131,  457,  427,  264,   59,  442,
   59,  397,  303,  319, 1456,  274, 1047,  461, 1145,  502,
 1260,  419,  441, 1054,  452,  388, 1153, 1655, 1155, 1471,
 1493, 1158,  343, 1160,  397,  341, 1327, 1164, 1165, 1166,
 1167,  466,    0, 1587, 1327, 1172,   59, 1242,    0, 1242,
  277,  310,  264, 1023, 1023,  441, 1126, 1127, 1128,  387,
 1038, 1605,  329,  387, 1608,  332, 1261,  453, 1696,  455,
  408,  264,  419,    0,    0, 1173,  430,  326, 1056,  264,
  418,  319,  388,   41, 1062, 1212,   44, 1366,  264,   41,
  437,  397,  308,  309,  461,  406,  262,  278,  409,  280,
  302,   59, 1359,  341,  387,  443,  264,   59,  264,  258,
  387, 1553, 1657,    0,  425,   41, 1185,   44,   44,  346,
 1195,  388, 1197,  410,  471,  274, 1321,  261,  277,  278,
  397,  280,   59,   59, 1261,  441,  285,  339, 1209,  288,
  451,  398,  319,  343, 1384, 1370,  278,   44,  280,  455,
  388, 1278,  301,  412,   41,  332, 1126, 1127,  307,  397,
 1287,  310,   59,  278,  341,  280,  278, 1294,  280,  262,
  332, 1193,   59,    0,  265,  319, 1154,  319,  378,    0,
  262, 1256,  431, 1423, 1255,  344,  398,  329,  461,  438,
  332, 1416, 1737,  461, 1321,  411,  259,  341,  379,  341,
 1634,  264,  344,  441,  264,  398,  406,  270,  467,  409,
  369,  388,  303,  398, 1341,  264,    0, 1762, 1345,  343,
  397,  387,  398,  263,    0,  425,  388,  278, 1772,  280,
  379, 1612,   59,  280,  285,  397,  452,  288,   59,  286,
  398,    0,  398, 1685,  388, 1679,  388,  338,  260, 1271,
  301,  451,  401, 1275,  378,  397,   40,   41,  319,  408,
   44, 1359,  349,  412,  441, 1235, 1235,  379,  427,  444,
  419,  258,    0,  313,  261,   59, 1657,   61,  455, 1377,
  341,    0,  406,   59,  324,  409,  461, 1721,  437,  401,
  459, 1362,  304,  442,  387,  398,  408,  441,  280,  441,
   59,  425,  461,    0,  286,  387, 1582,   91, 1548,   44,
 1586,  453,  404,   41, 1441, 1442,   44,  486,  467, 1753,
  307,   44,  471, 1704, 1512,    0, 1395,  451,  379,  421,
  442,   59, 1589,   61,  437,  398,  262,  459,  398, 1466,
   59,  260, 1469,  436, 1413, 1376, 1377, 1369, 1155,  398,
  401, 1158,    0,    0,  436, 1612, 1737,  408,   93, 1376,
  418, 1637,   59,   91,  322,    0,   41,  461,  471,   44,
   93,  329,    0, 1500,  332,  462,  463,  329,  336, 1385,
  332, 1762,  461,  302,   59, 1455,  344,  445,  428,    0,
  322,  442,    0,  319,   41,  314,  322,   44, 1726, 1727,
 1657,    0,  360,  329,  336,    0,  332,  317,  318,  328,
  336,   59,   59, 1488, 1512,  341,   42,   43,  344,   45,
  339,   47, 1686, 1687,   59,  260,  384,    0,  360, 1556,
   41,   59,  319,   44,  360,  461,  388, 1564, 1642,  397,
 1644,   42,   43,    0,   45,  397,   47, 1704,   59, 1725,
   61,   59,  384, 1781,  341, 1650,  414, 1650,  384, 1723,
   59,  387,  388,  841,   59,  843, 1494, 1532,   41,  304,
 1541,  397,    0, 1600,  258, 1602, 1547,  323,  379, 1683,
 1737, 1512,  414,  441,   41, 1455,   59,   44,  414,  408,
  274, 1589, 1462,  277,  278,  453,  280,  455,  319,  418,
  401,  285,   59,    0,  288, 1762,    0,  408,  329, 1773,
  436,  332, 1533,   41, 1612,  441,   44,  301,    0,  288,
  341, 1709, 1528,  307,  443,  403,  310,  453, 1655,  455,
  258,   59,  301,   61, 1341, 1557, 1497,  279, 1345, 1561,
    0,  442,  461,    0,   41,    0,  274,   44,    0,  277,
  278, 1755,  280, 1741, 1742,    0,    0,  285, 1623, 1657,
  288,  439,   59,   91,   61,   59, 1552,  388,    0, 1696,
  272,    0,  259,  301,    0,    0,  397,   59, 1766,  307,
   44,   41,  310,  270,   44,  459,   41,  289,  330, 1601,
    0, 1779,  260,    0,   91,  379,    0,   41,    0,   59,
   44,   61,   59,  278,   59,  280, 1704,   59,  461,   41,
  285, 1709,   44,  288,   59,   59,    0,  401,   42,   43,
  441,   45,  364,   47,  408,  461,  301,   59,  412,   93,
   59,   91,  334,   59,   59,  419,  304, 1665,  323, 1737,
  382,  349,   45, 1741, 1742,  260, 1632,  258,    0,   59,
  358,  379,   59,  437,  280,   59,    0,   59,  442, 1466,
  286,  363,  402, 1649, 1762,    0,  277,  278, 1766,  280,
  494,  495,  319,  401,  285,   59,   44,  288, 1709,  280,
  408, 1779,    0,  467,  412,  286,  312,  471,    0,  304,
  301,  419,  462,  463,  341, 1681,  307, 1667, 1667,    0,
   44,   40, 1688,    0,  379,    0,  494,   59,  384,  437,
 1741, 1742, 1733,  384,  442,   59,  504,   41,   42,   43,
  321,   45,  338,   47,   59,    0,  401,   44,  430,   41,
  258,  386,   44,  408,    0, 1766, 1722,   42,   43,  467,
   45,   59,   47,  471, 1730,  259,  274,   59, 1779,   61,
  278,  322,  280,  392,  393,  329,  270,  285,   59,  375,
  288,  258,   59,  384,   59,  336,   41,  442,  379,   44,
  403,  322,  388,  301,  338,   41,   93,  274,   44,  307,
  384,  278,  310,  280,   59,  336,   61,  437,  285,  360,
  401,  288,  698,   59,  458,  459,  460,  408,  258,   41,
   42,   43,  435,   45,  301,   47,  417,  357,  419,  360,
  307,  375,  495,  310,  274,  721,   40,  450,  278,   43,
  280,   45,  486,  487,  388,  285,  437,  733,  288,  403,
  419,  442,   41,  384,   58,   44,  338,   41,  262,   63,
   44,  301,   41,  414,  394,   44,  396,  307,  461,   41,
  310,  379,   44,  274,   42,   43,  280,   45,   41,   47,
  471,   44,  286,  414,  319,  439, 1120,   40, 1122,  419,
  444,  319,   45,  401,  329,  319,  450,  332,   42,   43,
  408,   45,  379,   47,  412,  329,  341,  461,  332,   93,
   63,  419,   40,  296,  444,  469,   41,  341,  406,   44,
  344,   93,  425,   41,  401,   45,   44,   41,  462,  437,
   44,  408,  317,   40,  442,  412,   43,  425,   45,  379,
    0,   41,  419,   63,   44,   41,   41,   41,   44,   44,
   44,   58,   41,  388,   41,   44,   63,   44,  264,  467,
  437,  401,  397,  471,  388,  442,  258,  319,  408,  338,
  353,   41,  412,  397,   44,  343,  280,  262,  322,  419,
   41,  461,  286,   44,   41,  277,  278,   44,  280,  453,
  467,  337,  336,  285,  471,  280,  288,  437,  322,   59,
  344,  286,  442,  258,   41,  329,  441,   44,  332,  301,
  378,   41,  336,  341,   44,  307,  360,  441,  453,   40,
  344,  462,  463,  278,  403,  280,  321,  467,  319,  453,
  285,  471,  278,  288,  280,  384,  360,  403,  406,  384,
  507,  409,  288,  437,  362,  461,  301,  435,  295,  451,
  443,  418,  307,  358,  288,  301,  412,  425,  280,  306,
  384,  444,  470,  267,  286,   44,  313,   61,  287,   40,
  414,    0,  276,  397,  373,  458,  459,  460,    0,  462,
  463,  264,   40,  451,  462,  462,  290,  379,  462,  293,
  414,  338,  296,  297,   44,  419,  437,  321,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  461,   44,  401,
  403,  315,  280,  496,  497,   40,  408,  441,  286,   41,
  324,   40,   44,  327,  379,   40,   40,  419,   40,  453,
   59,  455,   40,  379,   40,   40,  280,   59,   40,   40,
   40,   40,  286,  296,  312,  437,  401,  461,   40,   91,
  442,  355,  356,  408,  321,  401,  403,   46,   44,   44,
  267,  429,  408,  367,  419,   46,   40,  371,   40,  276,
   42,   43,  264,   45,   61,  379,  296,  321,  280,  471,
   44,   46,  437,  290,  383,    0,   58,  442,  435,  296,
  297,   63,  439,  349,   44,  278,  442,   41,   42,   43,
  353,   45,  278,   47,  301,   41,   42,   43,  315,   45,
  264,   47,  461,  398,  437,  471,  471,  324,  422,  279,
  327,  398,  459,  448,  428,  277,   41,  448,   40,   44,
  434,  400,  666,  353,  668,  350,   40,  671,  672,  673,
  444,  301,   42,   43,   59,   45,   91,   47,  355,  356,
   40,   40,  319,  322,  458,  459,  460,  461,  462,  463,
  367,  264,  384,  412,  371,   44,  390,  336,  472,   40,
  330,  383,  379,   40,  465,  344,  437,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  318,  491,   40,  349,
  321,  360,  496,  497,  321,  499,  500,  501,  358,   41,
    0,  505,  452,  461,  364,  458,  459,  460,  453,  462,
  463,  418,   41,   42,   43,  422,   45,  449,   47,  461,
  264,  428,  382,  459,  455,   40,  277,  434,  481,  482,
   40,  274,  301,  486,  487,  345,  285,  444,  458,  459,
  460,   41,  462,  463,   44,  414,  345,  278,  387,  387,
  279,  458,  459,  460,  461,  462,  463,  419,  387,   59,
  301,  481,  482,  419,    0,  472,  486,  487,    0,  417,
   40,  357,  301,  418,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   40,  491,  418,  274,  461,  260,  496,
  497,   40,  499,  500,  501,  267,   44,  319,  505,  386,
  322,  330,  368,   40,  276,   42,   43,  329,   45,   41,
  332,   44,   44,  264,  336,   41,   44,  321,  290,  341,
  349,   58,  344,   59,  296,  297,   63,   59,  357,  358,
  321,   44,  304,  280,   40,  364,  280,   44,  360,   41,
   42,   43,  286,   45,  280,   47,  329,   44,  503,  266,
  286,   40,  324,  382,  300,  327,  506,   41,   42,   43,
  355,   45,  384,   47,   40,  394,  388,  396,  502,  264,
  461,  423,   41,   42,   43,  397,   45,   41,   47,    0,
  280,  353,   41,  355,  356,   58,  286,   41,   40,  264,
  419,   43,  414,   45,   41,  367,   41,   42,   43,  371,
   45,  455,   47,  441,  319,  395,   58,  322,  310,  493,
   41,   63,  310,   41,  329,  444,   40,  332,   40,  441,
   41,  336,  353,   44,   40,   40,  341,   40,   40,  344,
   40,  453,   40,   40,   40,    0,   40,   40,   59,  461,
   41,   42,   43,   40,   45,  360,   47,   40,   40,   40,
  262,  280,  328,  309,   44,   41,  428,  286,   42,   43,
   44,   45,  434,   47,  459,  436,  461,  389,  389,  384,
  389,  344,  444,  388,  332,  274,   41,  472,  278,   44,
  280,  423,  397,  391,  447,  279,  458,  459,  460,  461,
  462,  463,  271,    0,   59,  392,  491,  288,  408,  414,
  472,  387,  387,  387,  499,  500,  501,  301,   41,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  387,  491,
  379,  387,  387,  260,  496,  497,  441,  499,  500,  501,
  267,   41,  278,  505,   41,   40,  330,   44,  453,  276,
   41,   41,   41,  279,  418,  386,  278,   41,  280,  437,
  260,  309,   59,  290,  436,  349,  288,  397,  338,  296,
  297,  339,  443,  443,  358,  301,  339,  304,   40,  301,
  364,   43,  302,   45,   41,  302,   41,  353,  280,  379,
  321,  386,  372,  372,  286,   41,   58,  324,  382,   41,
  327,   63,  302,   41,  330,   41,  280,   41,   41,   41,
   41,  401,  286,    0,  314,   41,   41,   41,  408,   41,
   41,  280,   41,  349,   41,  267,  353,  286,  355,  356,
   42,   43,  358,   45,  276,   47,   41,  280,  364,  339,
  367,   44,   40,   59,  371,  280,  341,   59,  290,   59,
   40,  286,  442,   59,  296,  297,  382,  379,   59,   59,
   40,  341,   59,   43,  309,   45,   59,  278,   41,  280,
  353,   41,   59,  315,  345,  369,   40,  288,   58,  401,
  341,  452,  324,   63,   44,  327,  408,   59,  461,  280,
   41,  384,   41,   42,   43,  286,   45,  344,   47,  384,
  384,  428,   41,  258,   41,  411,  280,  434,  408,   44,
   44,  436,  286,  355,  356,  305,  302,  444,  418,  443,
  442,  388,   40,   59,  279,  367,  294,  305,   44,  371,
  464,  458,  459,  460,  461,  462,  463,  379,  308,   44,
   41,    0,   40,  443,  384,  472,  301,   41,   42,   43,
  338,   45,  307,   47,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  264,  491,  384,  278,  390,  379,  496,
  497,  461,  499,  500,  501,  330,  264,  459,  505,  321,
  422,  278,  264,  280,  412,  471,  428,  452,   40,  310,
  401,  288,  434,  271,  349,  459,  264,  408,  260,  437,
  436,  263,  444,  358,  344,  267,   41,   42,   43,  364,
   45,  344,   47,  344,  276,  344,  458,  459,  460,  461,
  462,  463,  461,  271,  309,  459,   41,  382,  290,   40,
  472,  442,  309,   40,  296,  297,   59,  309,   41,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   41,  491,
   59,  305,   44,   59,  496,  497,   41,  499,  500,  501,
    0,    0,  324,  505,  419,  327,    0, 1123,  280,   12,
  252,  258,  612,  244,  286,  652,    0,  245, 1059,    0,
  260,  831,  379,  263,   41,   42,   43,  267,   45,    0,
   47, 1054,  279,  355,  356,   40,  276,   84,   43, 1057,
   45, 1404,  559, 1046,  401,  367,  305,  335,  300,  371,
  290,  408,  984,   58,  301,  291,  296,  297,   63,  727,
  307,   41,   42,   43, 1036,   45,  317,   47,   41,   42,
   43,  280,   45, 1047,   47,   59,  317,  286,   59,  764,
 1598, 1382, 1672,  330,  324,  442,  538,  327,   59,   41,
   42,   43,  851,   45,  853,   47,  855,  856, 1384,  858,
  859,  860,  349, 1676,  426, 1675,  428,  754, 1210, 1713,
 1765,  358,  434, 1710,  370,  355,  356,  364, 1617, 1363,
  968, 1187,  444, 1632,  322,  310,  280,  367,  540,  303,
  810,  371,  286,  802, 1244,  382,  458,  459,  460,  461,
  462,  463,  473,  474,  475,  476,  477,  478,  479,  480,
  472,   13,  278,  598,  472,  404,  476,  260,  716,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  732,  491,
  702,  122,  419,  971,  496,  497, 1589,  499,  500,  501,
 1730,  703,  945,  505, 1484,  280,  426, 1782,  428,  488,
 1688,  286,   42,   43,  434,   45,  660,   47,  369,  302,
  888, 1091, 1160,   -1,  444,   -1,   -1,   -1,   -1,   59,
   -1,  314,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,  260,  496,  497,  263,  499,
  500,  501,  267,  280,   -1,  505,   -1,   -1,   -1,  286,
   40,  276,   -1,   43,  258,   45,   -1,  258,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,  258,   58,   -1,
   -1,  296,  297,   63,   -1,  279,   -1,   -1,  279,   -1,
  280,   -1,   -1,   -1,   -1,  408,  286,  280,  279,   -1,
   -1,   -1,   -1,  286,   -1,  418,   -1,  301,   -1,  324,
  301,   -1,  327,  307,   42,   43,  307,   45,  280,   47,
  301,   -1,   -1,   -1,  286,   -1,  307,   -1,   -1,   -1,
  443,   59,   -1,   -1,   -1,   -1,  330,   -1,   -1,  330,
  355,  356,   40,   -1,   -1,   43,   -1,   45,  461,  330,
   -1,   -1,  367,   -1,   -1,  349,  371,  261,  349,   -1,
   58,   -1,   -1,  357,  358,   63,   -1,  358,  349,   -1,
  364,   -1,   -1,  364,   -1,   -1,   -1,  358,   -1,  283,
   -1,   -1,   -1,  364,   -1,   -1,  295,  291,  382,   -1,
   -1,  382,   -1,   -1,  298,   -1,  300,  306,  302,   -1,
   -1,  382,   -1,  307,  313,   -1,   -1,   -1,   -1,   -1,
  314,  426,   -1,  428,   -1,   -1,   -1,  326,   -1,  434,
  280,   -1,   -1,   -1,  328,  419,  286,   -1,  419,  444,
   -1,   -1,   -1,   -1,   -1,  339,  430,   -1,  419,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  387,   -1,
  260,  496,  497,  263,  499,  500,  501,  267,   -1,   -1,
  505,   -1,   -1,   -1,  403,   40,  276,   -1,   43,   -1,
   45,   -1,  406,   -1,   -1,   -1,   -1,   -1,   -1,  413,
  290,  420,  416,   58,  418,  419,  296,  297,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
  439,   -1,   -1,  442,   -1,   -1,   -1,   -1,   -1,  443,
   -1,  450,   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,
  469,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,  355,  356,   40,  276,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,  367,  492,   -1,
    0,  371,  290,   -1,   -1,   58,   -1,   -1,  296,  297,
   63,   -1,   -1,  507,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1279, 1280,
   -1,   -1,   -1,   -1, 1285, 1286,  324, 1288, 1289,  327,
   -1,   41,   -1,   -1,   44, 1296, 1297, 1298, 1299,   -1,
 1301, 1302, 1303, 1304, 1305, 1306,  426,   -1,  428,   59,
   -1,   -1,   -1,   -1,  434,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,  260,  496,  497,  263,  499,
  500,  501,  267,   -1,   -1,  505,   -1,   -1,  426,   -1,
  428,  276,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  444,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,  324,
   -1,   -1,  327,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,  260,  496,  497,
  263,  499,  500,  501,  267,   -1,   -1,  505,   -1,   -1,
  355,  356,   40,  276,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,  290,   -1,   -1,
   58,   -1,   -1,  296,  297,   63,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  426,   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  319,
   -1,   -1,  322,  458,  459,  460,  461,  462,  463,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,  472,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
  360,  496,  497,   -1,  499,  500,  501,   -1,   -1,   -1,
  505,   -1,   -1,  426,   -1,  428,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,  384,   -1,   -1,   -1,  388,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,  441,  260,  496,  497,  263,  499,  500,  501,  267,
   -1,   -1,  505,  453,   -1,   -1,   -1,   40,  276,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   58,   -1,  272,  296,  297,
   63,   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,
  306,  286,   -1,   -1,  289,   42,   43,  313,   45,   -1,
   47,  317,  318,   -1,   -1,   -1,  324,   -1,   -1,  327,
  326,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,  334,
   -1,   40,   -1,   -1,   43,   -1,   45,  342,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,  361,   -1,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,  403,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  420,   -1,   -1,   -1,  426,   -1,
  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,  435,
   -1,   -1,   -1,  439,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  450,  430,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  469,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,
   -1,  499,  500,  501,  267,   -1,   -1,  505,   -1,   -1,
   -1,   -1,   -1,  276,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   58,  296,  297,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,  324,  289,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  353,   -1,  355,  356,   -1,   -1,   40,  276,  325,   43,
   -1,   45,   -1,   -1,  367,   -1,   -1,  334,  371,   -1,
   -1,  290,   -1,   -1,   58,  342,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  418,
   -1,  267,  505,   -1,   -1,   -1,   -1,   -1,   -1,  428,
  276,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,  444,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,  324,   -1,
   -1,  327,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,  260,  496,  497,   -1,
  499,  500,  501,  267,   -1,   -1,  505,  353,   -1,  355,
  356,   40,  276,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,  290,   -1,   -1,   58,
   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,   -1,   -1,  505,
   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  472,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  296,  491,   -1,  299,
   -1,   -1,  496,  497,   -1,  499,  500,  501,  267,   40,
   -1,  505,   43,   -1,   45,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   58,   -1,   -1,
   -1,  290,   63,   -1,   -1,   -1,   -1,  296,  297,   -1,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,  302,   -1,   -1,   -1,   -1,
   -1,   -1,  309,   -1,   -1,  324,  313,  314,  327,  316,
   -1,   -1,  319,   -1,  374,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,  271,   -1,
   -1,   -1,  339,   -1,   -1,   40,  355,  356,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  407,  367,   -1,
   -1,   -1,  371,   58,   -1,   -1,   -1,   -1,   63,  302,
   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,
  313,  314,   -1,  316,   -1,   -1,  319,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,   -1,
  333,   -1,  399,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,
   -1,  418,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,  444,  433,   -1,   -1,   -1,
   -1,   -1,   -1,  452,   -1,   -1,  443,   -1,  498,  458,
  459,  460,  461,  462,  463,  452,   -1,  454,   -1,   -1,
   -1,   -1,   -1,  472,  461,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,  418,  267,  496,  497,   -1,
  499,  500,  501,  490,   -1,  276,  505,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
  443,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,  452,
   -1,  454,   -1,   -1,   40,   41,   -1,   43,  461,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   58,  324,   -1,   -1,  327,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  490,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  355,  356,   -1,   -1,   -1,   41,
   -1,  276,   44,   -1,   -1,   -1,  367,   -1,   40,   -1,
  371,   43,   -1,   45,   -1,  290,  302,   59,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   58,  313,  314,   -1,
  316,   63,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,  324,
   -1,   -1,  327,  339,   -1,   -1,   -1,  418,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  418,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,  505,   -1,   -1,  433,   -1,   -1,
   -1,   -1,   -1,  428,   -1,   -1,   -1,  443,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  454,  444,
   -1,  267,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,
  276,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,  472,   -1,   -1,
  296,  297,   -1,   -1,  490,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
  262,  496,  497,   -1,  499,  500,  501,   -1,  324,   -1,
  505,  327,   -1,   -1,   40,  267,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,  355,
  356,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  324,   -1,  336,  327,   -1,   -1,   40,  341,
   -1,   43,  344,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,  360,   -1,
   -1,   63,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  428,   -1,   -1,  367,   -1,   -1,  434,  371,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  436,  491,  428,   -1,   -1,  441,
  496,  497,  434,  499,  500,  501,   -1,   -1,   -1,  505,
   -1,  453,  444,  455,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  455,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  267,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  276,   -1,   -1,  505,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,  327,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  355,
  356,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   40,   -1,  371,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,  324,   -1,   -1,  327,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  418,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  428,   -1,   -1,  367,   -1,   -1,  434,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,  428,   -1,   -1,   -1,
  496,  497,  434,  499,  500,  501,   -1,   -1,   -1,  505,
   -1,   -1,  444,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  455,  276,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,
  472,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,   -1,  496,  497,  461,  499,  500,  501,
   -1,   -1,  324,  505,   -1,  327,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
  485,   -1,   -1,  488,  489,  490,  491,   -1,  493,   -1,
  267,  496,  497,  355,  356,   -1,   -1,   -1,   40,  276,
   -1,   43,   -1,   45,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,  290,   -1,   -1,   58,   -1,   -1,  296,
  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,  428,   45,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,  353,   -1,  355,  356,
   58,   -1,  444,   -1,   -1,   63,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,   -1,   -1,  505,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,  444,   -1,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,  296,   -1,
   -1,  299,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,  267,   -1,   -1,  505,   -1,
   -1,   -1,  340,   -1,  276,   -1,   -1,   -1,  346,  347,
  348,   -1,  350,  351,  352,   -1,  354,   -1,  290,   -1,
   -1,   -1,   -1,  273,  296,  297,   -1,  277,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,  374,   -1,  376,   -1,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,  407,
   -1,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,  290,  355,  356,   -1,  424,   -1,  296,  297,
  340,   59,   60,   61,   62,  367,  346,  347,  348,  371,
  350,  351,  352,   -1,  354,   -1,   -1,   -1,  446,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,
   -1,   -1,   -1,   91,  374,   93,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  428,  407,   -1,  367,
  498,   -1,  434,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,  446,    0,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  428,   -1,   -1,   -1,  496,  497,  434,  499,  500,  501,
   -1,  481,  482,  505,   -1,   -1,  444,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,  498,   -1,
  458,  459,  460,  461,  462,  463,   59,   60,   61,   62,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,
   93,  499,  500,  501,  262,   -1,  264,  505,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  308,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,
   -1,  264,  430,   -1,   -1,   -1,   -1,   -1,  436,  272,
   -1,   -1,   -1,  441,   -1,   -1,   -1,  280,   -1,   -1,
   -1,   -1,   93,  286,  452,  453,  289,  455,   -1,   -1,
   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,  322,
   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,
   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,
   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  360,  361,   -1,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,  273,   -1,  411,   -1,
  277,  414,   -1,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,   -1,  430,   -1,  296,
   -1,   -1,  299,  436,   -1,   -1,   -1,   -1,  441,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,  452,
  453,  262,  455,  264,   -1,   -1,   -1,   -1,  461,   -1,
   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,   -1,  286,   -1,   -1,  289,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  308,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,  374,  319,  376,
  321,  322,   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
  407,   -1,   -1,   -1,   -1,  412,    0,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   -1,   -1,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  446,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,  414,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  481,  482,  262,   -1,  264,  430,
   -1,   -1,   -1,   -1,   -1,  436,  272,   -1,   -1,   -1,
  441,  498,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,  452,  453,  289,  455,   -1,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  308,  309,   -1,   -1,  312,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,  325,
   -1,   -1,   -1,  329,    0,   -1,  332,   -1,  334,   -1,
  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,
   -1,  387,  388,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  273,   -1,  411,   -1,  277,  414,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,  430,   -1,  296,   -1,   -1,  299,
  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  452,  453,  262,  455,
  264,   -1,   -1,   -1,   -1,  461,   -1,   -1,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,   -1,   -1,   -1,   -1,  289,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,
   -1,   -1,   -1,   -1,  374,  319,  376,  321,  322,   -1,
   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,   41,   -1,   43,   44,   45,  407,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,
   59,   60,   61,   62,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,  446,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   93,   -1,  262,   -1,  264,   -1,
   -1,  461,   -1,   -1,   -1,   -1,  272,  411,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  289,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,  498,    0,
   -1,   -1,  308,  309,   -1,   -1,  312,   -1,  452,  453,
   -1,  455,   -1,  319,   -1,  321,  322,  461,   -1,  325,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,  430,  264,   -1,   -1,   -1,   -1,
  436,   -1,   -1,  272,   -1,  441,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,  455,
  289,   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,  308,
  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,   -1,  363,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   93,
   -1,  262,   -1,  264,   -1,   -1,   -1,   -1,    0,   -1,
   -1,  272,  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,    0,   -1,   -1,  308,  309,   41,
    0,  312,   44,  452,  453,   -1,  455,   -1,  319,   -1,
  321,  322,  461,   -1,  325,   -1,   -1,   59,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   41,   -1,   -1,   44,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,  360,
  361,   -1,  363,   59,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,  430,
  264,   -1,   -1,   -1,   -1,  436,   -1,   -1,  272,   41,
  441,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  452,  453,   -1,  455,  289,   -1,   59,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,
   -1,    0,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,
   -1,  325,    0,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,  360,  361,   -1,  363,
  262,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   59,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   59,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  411,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,    0,   -1,  430,  329,   -1,   -1,
  332,   -1,  436,   -1,  336,   -1,   -1,  441,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  452,  453,
   -1,  455,   -1,  319,   -1,   -1,  322,  461,  360,  319,
    0,   -1,  322,  329,   -1,   41,  332,   -1,   44,  329,
  336,   -1,  332,   -1,   -1,  341,  336,   -1,  344,   -1,
   -1,  341,  384,   59,  344,  387,  388,   -1,   -1,   -1,
  262,   -1,   -1,   -1,  360,  397,   -1,   -1,   -1,   -1,
  360,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,  384,   59,
   -1,  387,  388,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,  397,   -1,   -1,  436,   -1,   -1,  397,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,  414,   -1,
  322,  453,   -1,  455,  414,   -1,   -1,  329,   -1,   -1,
  332,    0,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
  436,   -1,  344,  262,   -1,  441,  436,   -1,   -1,   -1,
   -1,  441,   -1,   -1,  262,   -1,   -1,  453,  360,  455,
    0,   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
  319,   41,   -1,  322,   44,   -1,   -1,   -1,   -1,   -1,
  329,  319,  414,  332,  322,   -1,   -1,  336,   -1,   59,
   -1,  329,  341,   -1,  332,  344,   -1,   -1,  336,   -1,
   -1,   -1,   -1,  341,  436,   -1,  344,   -1,   -1,  441,
   -1,  360,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,  453,  360,  455,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,  397,  387,
  388,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,  397,
   -1,   -1,  262,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  414,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,  436,   -1,   -1,
   -1,   -1,  441,  329,   -1,   -1,  332,   -1,  436,   -1,
  336,   -1,   -1,  441,  453,  341,  455,   -1,  344,   -1,
   -1,   -1,   -1,    0,   -1,  453,   -1,  455,   -1,  319,
   -1,   -1,  322,   -1,  360,   -1,   -1,   -1,   -1,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,
   -1,  341,    0,   -1,  344,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,   41,   -1,   -1,   44,   -1,   -1,
  360,  397,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,  414,   -1,
   -1,   -1,   -1,   41,  384,   -1,   44,  387,  388,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  397,   -1,   -1,
  436,   59,   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  414,   -1,   -1,  453,   -1,  455,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,    0,   -1,
  329,   -1,   -1,  332,   -1,   -1,  436,  336,   -1,   -1,
   -1,  441,  341,   -1,   -1,  344,   -1,   -1,   -1,  319,
   -1,   -1,  322,  453,   -1,  455,   -1,   -1,   -1,  329,
    0,  360,  332,   -1,   -1,   -1,  336,   -1,   -1,   41,
   -1,  341,   44,   -1,  344,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   59,  387,  388,
  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,  414,   -1,  387,  388,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,  436,   -1,   -1,
   -1,   -1,  441,  329,  414,   -1,  332,   -1,    0,   -1,
  336,   -1,   -1,   -1,  453,  341,  455,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,    0,   -1,
   -1,  441,   -1,   -1,  360,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,  262,   -1,   -1,   59,   -1,   41,
   -1,  397,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,  414,   -1,
   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,   -1,  332,   -1,    0,   -1,  336,
  436,   -1,   -1,   -1,  341,  441,   -1,  344,   -1,   -1,
   -1,  319,   -1,   -1,  322,   -1,   -1,  453,   -1,  455,
   -1,  329,   -1,  360,  332,   -1,    0,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   41,   -1,
  262,   44,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,  360,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,  262,   -1,   -1,   -1,  384,  414,   -1,  387,
  388,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  436,
  322,   -1,   -1,   -1,  441,   -1,  414,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,  453,   -1,  455,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  436,  319,
   -1,   -1,  322,  441,   -1,   -1,   -1,   -1,  360,  329,
   -1,   -1,  332,   -1,   -1,  453,  336,  455,   -1,   -1,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
  360,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  414,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  436,   -1,   -1,  319,   -1,  441,
  322,   -1,   -1,   -1,  414,   -1,   -1,  329,   -1,   -1,
  332,  453,   -1,  455,  336,   -1,   -1,  319,   -1,  341,
  322,   -1,  344,   -1,   -1,   -1,  436,  329,   -1,   -1,
  332,  441,   -1,   -1,  336,   -1,   -1,   -1,  360,  341,
   -1,   -1,  344,  453,   -1,  455,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,  397,  319,   -1,   -1,  322,
   -1,   -1,   -1,  273,   -1,   -1,  329,  277,   -1,  332,
   -1,   -1,  414,  336,  436,   -1,   -1,   -1,  341,  441,
   -1,  344,  292,   -1,   -1,  319,  296,   -1,  322,  299,
   -1,  453,   -1,  455,  436,  329,   -1,  360,  332,  441,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,  387,  388,  360,   -1,   -1,   -1,
  340,   -1,   -1,   -1,  397,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,
  384,  414,   -1,  387,  388,   -1,  273,   -1,   -1,   -1,
  277,   -1,   -1,  397,  374,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,  296,
  414,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,  407,   -1,   -1,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,
   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,  453,
   -1,  455,   -1,  340,   -1,   -1,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,  446,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,  498,   -1,
  407,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,  424,   -1,  488,
  489,  490,  491,   -1,  493,   -1,   -1,  496,  497,   -1,
   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  446,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,   -1,   -1,  488,  489,
  490,  491,   -1,  493,   -1,   -1,  496,  497,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  498,
};
#define YYFINAL 19
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 507
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING","NULLS","LAST","ROWS_AFFECTED",
"LOCK","SAVEPOINT",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : user_savepoint",
"statement : undo_savepoint",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : excp_statement",
"proc_statement : raise_statement",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"excp_statement : EXCEPTION symbol_exception_name ';'",
"excp_statement : EXCEPTION symbol_exception_name value ';'",
"raise_statement : EXCEPTION ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"user_savepoint : SAVEPOINT symbol_savepoint_name",
"undo_savepoint : ROLLBACK optional_work TO optional_savepoint symbol_savepoint_name",
"optional_savepoint : SAVEPOINT",
"optional_savepoint :",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction nulls_placement",
"order_item : ordinal collate_clause order_direction nulls_placement",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : NULLS FIRST",
"nulls_placement : NULLS LAST",
"nulls_placement :",
"for_update_clause : FOR UPDATE for_update_list lock_clause",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"lock_clause : WITH LOCK",
"lock_clause :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"ordered_select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause order_clause",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt ordered_select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' ordered_select_expr ')'",
"unique_predicate : SINGULAR '(' ordered_select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause order_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause order_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : proc_internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"proc_internal_info : GDSCODE",
"proc_internal_info : SQLCODE",
"proc_internal_info : ROWS_AFFECTED",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
"symbol_savepoint_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (DSQL_NOD, SLONG *);
static DSQL_FLD	make_field (DSQL_NOD);
static FIL	make_file (void);
static DSQL_NOD	make_list (DSQL_NOD);
static DSQL_NOD	make_node (NOD_TYPE, int, ...);
static DSQL_NOD	make_parameter (void);
static DSQL_NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (DSQL_NOD, SLONG *, SSHORT);
static void	stack_nodes (DSQL_NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;
static USHORT   param_number;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
	param_number = 1;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    DSQL_NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static DSQL_FLD make_field (
    DSQL_NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
DSQL_FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = FB_NEW_RPT(*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) dsql_fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = FB_NEW_RPT(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) dsql_fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = FB_NEW(*tdsql->tsql_default) fil;

return temp_file;
}


static DSQL_NOD make_list (
    DSQL_NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
DSQL_NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
DSQL_NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = FB_NEW_RPT(*tdsql->tsql_default, l) dsql_nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (DSQL_NOD) LLS_POP (&stack);

return node;
}


static DSQL_NOD make_parameter (void)
{
/**************************************
 *
 *	m a k e _ p a r a m e t e r
 *
 **************************************
 *
 * Functional description
 *	Make parameter node
 *	Any change should also be made to function below
 *
 **************************************/
DSQL_NOD	node;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, 1) dsql_nod;
node->nod_type = nod_parameter;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = 1;
node->nod_arg[0] = (DSQL_NOD)param_number++;

return node;
}


static DSQL_NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
DSQL_NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) dsql_nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, DSQL_NOD);

return node;
}


static DSQL_NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
DSQL_NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) dsql_nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, DSQL_NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 100)
        *yydeb = level - 100;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    DSQL_NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    DSQL_NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
DSQL_NOD	*ptr, *end;
DSQL_NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (DSQL_NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (DSQL_NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (DSQL_NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (DSQL_NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (DSQL_NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (DSQL_NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (DSQL_NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (DSQL_NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (DSQL_NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 22:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 26:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 27:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 29:
{ yyval = yyvsp[0]; }
break;
case 30:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 31:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 32:
{ yyval = make_list (yyvsp[0]); }
break;
case 34:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 35:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 36:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 38:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 39:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 40:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 41:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 44:
{ yyval = 0; }
break;
case 45:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 51:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 52:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 53:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 66:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 72:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 73:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 74:
{ yyval = yyvsp[0];}
break;
case 75:
{ yyval = yyvsp[0]; }
break;
case 76:
{ yyval = yyvsp[0]; }
break;
case 77:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 79:
{ g_field->fld_dtype = dtype_blob; }
break;
case 80:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 81:
{ yyval = (DSQL_NOD) NULL; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 85:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 86:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 87:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 89:
{ yyval = yyvsp[-1]; }
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 94:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(DSQL_NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 95:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 98:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = yyvsp[0]; }
break;
case 115:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 116:
{ yyval = NULL; }
break;
case 117:
{ yyval = make_list (yyvsp[0]); }
break;
case 119:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 120:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 125:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 126:
{ yyval = (DSQL_NOD) 0;}
break;
case 127:
{ yyval = yyvsp[-1]; }
break;
case 128:
{ yyval = (DSQL_NOD) NULL; }
break;
case 131:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 132:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = NULL; }
break;
case 135:
{ yyval = yyvsp[0]; }
break;
case 136:
{ yyval = (DSQL_NOD) NULL; }
break;
case 137:
{ yyval = (DSQL_NOD) NULL; }
break;
case 140:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 144:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 146:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 148:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 151:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (DSQL_NOD) yyvsp[0]; }
break;
case 152:
{yyval = (DSQL_NOD) NULL;}
break;
case 155:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 156:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 158:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 160:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 161:
{yyval = (DSQL_NOD) NULL;}
break;
case 164:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 168:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 172:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 175:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 176:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 177:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(DSQL_NOD) g_file);}
break;
case 178:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (DSQL_NOD) make_node (nod_file_desc, (int) 1,
						(DSQL_NOD) g_file); }
break;
case 180:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 181:
{ 
		         check_log_file_attrs(); 
			 yyval = (DSQL_NOD) make_node (nod_log_file_desc, (int) 1,
                                                (DSQL_NOD) g_file); }
break;
case 182:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 186:
{ g_file  = make_file ();}
break;
case 191:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 192:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 199:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = yyvsp[0]; }
break;
case 203:
{ yyval = (DSQL_NOD) NULL; }
break;
case 205:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 211:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 214:
{ yyval = NULL; }
break;
case 215:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 216:
{ yyval = yyvsp[0]; }
break;
case 217:
{ yyval = (DSQL_NOD) NULL; }
break;
case 218:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (DSQL_NOD) g_field; }
break;
case 219:
{ g_field = make_field (yyvsp[0]);
				  yyval = (DSQL_NOD) g_field; }
break;
case 220:
{ yyval = yyvsp[-1]; }
break;
case 221:
{ g_field = make_field (NULL);
			  yyval = (DSQL_NOD) g_field; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (DSQL_NOD) NULL; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = yyvsp[0]; }
break;
case 230:
{ yyval = (DSQL_NOD) NULL; }
break;
case 233:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 235:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 236:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 238:
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 239:
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 240:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 241:
{ yyval = yyvsp[0]; }
break;
case 242:
{ yyval = NULL ;}
break;
case 247:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 250:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 251:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 256:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 257:
{ yyval = NULL;}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = yyvsp[0];}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 264:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 268:
{ yyval = make_list (yyvsp[-1]); }
break;
case 269:
{ yyval = NULL; }
break;
case 270:
{ yyval = yyvsp[0]; }
break;
case 271:
{ yyval = NULL; }
break;
case 273:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 274:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 275:
{ yyval = make_list (yyvsp[0]); }
break;
case 276:
{ yyval = NULL; }
break;
case 278:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = NULL; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 283:
{ yyval = yyvsp[0]; }
break;
case 286:
{ yyval = yyvsp[-1]; }
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 288:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 289:
{ yyval = make_node (nod_block, e_blk_count, NULL, NULL);}
break;
case 291:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 301:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 305:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 306:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 307:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 308:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-1], NULL); }
break;
case 309:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-2], yyvsp[-1]); }
break;
case 310:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, NULL, NULL); }
break;
case 311:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 312:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 313:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 314:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 315:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 316:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 317:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 318:
{ yyval = make_list (yyvsp[0]); }
break;
case 319:
{ yyval = make_list (yyvsp[-1]); }
break;
case 320:
{ yyval = NULL; }
break;
case 321:
{ yyval = make_list (yyvsp[0]); }
break;
case 322:
{ yyval = make_list (yyvsp[-1]); }
break;
case 323:
{ yyval = NULL; }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 329:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 330:
{ yyval = NULL; }
break;
case 332:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 337:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 338:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 340:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 341:
{ yyval = make_list (yyvsp[0]); }
break;
case 342:
{ yyval = make_list (yyvsp[-1]); }
break;
case 343:
{ yyval = NULL; }
break;
case 347:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 349:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 351:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 353:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 354:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 355:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 356:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 357:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 358:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL, NULL); }
break;
case 359:
{ yyval = make_list (yyvsp[0]); }
break;
case 361:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 364:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 365:
{ yyval = yyvsp[-1]; }
break;
case 366:
{ beginning = lex_position(); }
break;
case 367:
{ yyval = (DSQL_NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 368:
{ beginning = last_token; }
break;
case 369:
{ yyval = (DSQL_NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 370:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 371:
{ yyval = 0; }
break;
case 372:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 373:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 374:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 376:
{ yyval = NULL; }
break;
case 377:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 378:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 390:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 391:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 392:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 393:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 394:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 395:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 396:
{ yyval = NULL; }
break;
case 397:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 400:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = yyvsp[0]; }
break;
case 403:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 404:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 405:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 409:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 410:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 411:
{ yyval = yyvsp[0]; }
break;
case 412:
{ yyval = yyvsp[0]; }
break;
case 413:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 414:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 415:
{ yyval = yyvsp[0]; }
break;
case 416:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 418:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 419:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 421:
{ yyval = yyvsp[0]; }
break;
case 422:
{ yyval = yyvsp[0]; }
break;
case 423:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 424:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 425:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 426:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = NULL; }
break;
case 453:
{ yyval = NULL; }
break;
case 454:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 455:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (DSQL_NOD) g_field; }
break;
case 456:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 457:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 458:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 459:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 460:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 461:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (DSQL_NOD) NULL; }
break;
case 463:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 464:
{ yyval = yyvsp[0]; }
break;
case 465:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 466:
{ yyval = yyvsp[0]; }
break;
case 467:
{ yyval = yyvsp[0]; }
break;
case 469:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 470:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 472:
{ yyval = NULL; }
break;
case 474:
{ yyval = NULL; }
break;
case 475:
{ yyval = yyvsp[0]; }
break;
case 476:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 483:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 484:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 485:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 486:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 487:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 492:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 493:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 495:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 496:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 497:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 503:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 506:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 507:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 511:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 512:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 513:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 514:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 515:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 516:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 517:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 518:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 519:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 520:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 523:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 527:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 536:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 537:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 538:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 539:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 540:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 541:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 544:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 545:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 546:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 547:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 548:
{ yyval = yyvsp[-1]; }
break;
case 549:
{ yyval = 0; }
break;
case 553:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 554:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 555:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 556:
{ yyval = make_node (nod_user_savepoint, 1, yyvsp[0]); }
break;
case 557:
{ yyval = make_node (nod_undo_savepoint, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 564:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 565:
{ yyval = (DSQL_NOD) NULL; }
break;
case 567:
{ yyval = (DSQL_NOD) NULL; }
break;
case 568:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 570:
{ yyval = (DSQL_NOD) NULL; }
break;
case 572:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 577:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 578:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 579:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 580:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 581:
{ yyval = yyvsp[0];}
break;
case 583:
{ yyval = yyvsp[0];}
break;
case 584:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 585:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 586:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 587:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 588:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 589:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 590:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 593:
{ yyval = (DSQL_NOD) NOD_SHARED; }
break;
case 594:
{ yyval = (DSQL_NOD) NOD_PROTECTED ; }
break;
case 595:
{ yyval = (DSQL_NOD) 0; }
break;
case 596:
{ yyval = (DSQL_NOD) NOD_READ; }
break;
case 597:
{ yyval = (DSQL_NOD) NOD_WRITE; }
break;
case 599:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 600:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 601:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 608:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 609:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 610:
{ yyval = make_list (yyvsp[0]); }
break;
case 611:
{ yyval = 0; }
break;
case 613:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 615:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 616:
{ yyval = 0; }
break;
case 617:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 618:
{ yyval = 0; }
break;
case 619:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 620:
{ yyval = 0; }
break;
case 621:
{ yyval = 0; }
break;
case 622:
{ yyval = make_node (nod_for_update, 2, yyvsp[-1], yyvsp[0]); }
break;
case 623:
{ yyval = 0; }
break;
case 624:
{ yyval = yyvsp[0]; }
break;
case 625:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 626:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 627:
{ yyval = 0; }
break;
case 628:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL, NULL); }
break;
case 629:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-8], yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 630:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 631:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 632:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 633:
{ yyval = 0; }
break;
case 634:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 635:
{ yyval = yyvsp[-1]; }
break;
case 636:
{ yyval = yyvsp[0]; }
break;
case 637:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = yyvsp[0]; }
break;
case 640:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 641:
{ yyval = 0; }
break;
case 642:
{ yyval = make_list (yyvsp[0]); }
break;
case 643:
{ yyval = 0; }
break;
case 645:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 647:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 648:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 649:
{ yyval = make_list (yyvsp[0]); }
break;
case 651:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 654:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 655:
{ yyval = yyvsp[-1]; }
break;
case 656:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 657:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 658:
{ yyval = make_list (yyvsp[-1]); }
break;
case 659:
{ yyval = NULL; }
break;
case 661:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 665:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 666:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 667:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 668:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 669:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 670:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 671:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 672:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 673:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 674:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 675:
{ yyval = make_list (yyvsp[0]); }
break;
case 676:
{ yyval = 0; }
break;
case 678:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 683:
{ yyval = make_node (nod_collate, e_coll_count, (DSQL_NOD) yyvsp[0], yyvsp[-2]); }
break;
case 687:
{ yyval = yyvsp[0]; }
break;
case 688:
{ yyval = 0; }
break;
case 689:
{ yyval = yyvsp[0]; }
break;
case 690:
{ yyval = 0; }
break;
case 691:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 692:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 693:
{ yyval = 0;}
break;
case 694:
{ yyval = yyvsp[0]; }
break;
case 695:
{ yyval = 0; }
break;
case 696:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 697:
{ yyval = 0; }
break;
case 698:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 699:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 700:
{ yyval = 0; }
break;
case 701:
{ yyval = 0; }
break;
case 703:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 704:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 708:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 709:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 710:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 714:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 716:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 720:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 721:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 724:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 725:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 727:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 728:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 731:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 732:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 733:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 738:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 739:
{ yyval = yyvsp[0]; }
break;
case 741:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 744:
{ yyval = NULL; }
break;
case 745:
{ yyval = make_list (yyvsp[-1]); }
break;
case 747:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 749:
{ yyval = NULL; }
break;
case 750:
{ yyval = make_list (yyvsp[-1]); }
break;
case 752:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 754:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 755:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 756:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 758:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 761:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 773:
{ yyval = yyvsp[-1]; }
break;
case 774:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 775:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 776:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 777:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 778:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 779:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 780:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 781:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 782:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 783:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 784:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 786:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 787:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 788:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 789:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 790:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 791:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 792:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 793:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 794:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 795:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 796:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 797:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 800:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 801:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 802:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 803:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 804:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 805:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 806:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 807:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 808:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 809:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 810:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 811:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 812:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 813:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 814:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 815:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 816:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 817:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 819:
{ yyval = make_list (yyvsp[-1]); }
break;
case 820:
{ yyval = yyvsp[-1]; }
break;
case 821:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-8], yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 822:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-8], yyvsp[-7], make_list (yyvsp[-6]), yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0],
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 832:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 833:
{ yyval = yyvsp[0]; }
break;
case 834:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 835:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 836:
{ yyval = make_node (nod_collate, e_coll_count, (DSQL_NOD) yyvsp[0], yyvsp[-2]); }
break;
case 837:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 838:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 839:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 840:
{ yyval = yyvsp[-1]; }
break;
case 841:
{ yyval = yyvsp[-1]; }
break;
case 844:
{ yyval = yyvsp[0]; }
break;
case 845:
{ yyval = yyvsp[0]; }
break;
case 846:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 847:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 848:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 849:
{ yyval = yyvsp[0]; }
break;
case 850:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 851:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 852:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 853:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 855:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 857:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 858:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 859:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 860:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 861:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 862:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 864:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 865:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 866:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 867:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 868:
{ yyval = make_parameter (); }
break;
case 869:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 870:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 871:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 872:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_connection_id, CONSTANT_SLONG)); }
break;
case 873:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 874:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_gdscode, CONSTANT_SLONG)); }
break;
case 875:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 876:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 877:
{ yyval = yyvsp[0]; }
break;
case 878:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 880:
{ yyval = (DSQL_NOD) - (SLONG) yyvsp[0]; }
break;
case 881:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 882:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 883:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 884:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 886:
{ yyval = (DSQL_NOD) - (SLONG) yyvsp[0]; }
break;
case 887:
{ yyval = yyvsp[0];}
break;
case 892:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 893:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 894:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 895:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 896:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 897:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 898:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 899:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 900:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 901:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 902:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 903:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 904:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 905:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 906:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 907:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 908:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 909:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 910:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 913:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 914:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 917:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 918:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 919:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 920:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 921:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 922:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 923:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 924:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 928:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 929:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 930:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 931:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 932:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 933:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 934:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 935:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 938:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
