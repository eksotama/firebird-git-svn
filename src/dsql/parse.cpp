#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 * 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
 *                            exception handling in SPs/triggers,
 *                            implemented ROWS_AFFECTED system variable
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define NULLS 503
#define LAST 504
#define ROWS_AFFECTED 505
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   76,   13,
   80,   80,   80,   63,   63,   66,   66,   66,   74,   90,
   90,   90,   91,   91,   92,   92,   93,   93,   97,   97,
   73,  100,  100,  102,  102,  103,  103,  106,  106,  107,
  108,  108,  109,  110,   71,   75,   72,   94,   94,  113,
  114,  114,  116,  116,  117,  117,  117,  117,  117,  115,
  115,  118,  118,  119,  119,  119,  119,  121,  121,  121,
  121,  120,  120,  125,  125,  124,   98,  126,  126,  127,
  130,  131,  131,  132,  128,  129,  129,  133,  133,  134,
  134,  135,  135,  135,   96,   96,   96,   68,   78,  136,
  136,  136,  137,  137,  138,  138,  139,  139,  139,  145,
   86,   86,  141,  141,  104,  104,   99,  149,  150,   57,
  142,  142,  105,  105,  105,  105,  105,  105,  143,  143,
  157,  157,  158,  160,  160,  160,  160,  160,  140,  159,
  159,  164,  164,  164,  164,  166,  167,  168,  162,  162,
  163,  161,  161,  161,  161,  161,  169,  170,  171,  171,
  171,  171,   67,   77,   81,  176,  172,  172,  173,  173,
  177,  177,  178,  174,  174,  179,  179,  180,  181,  181,
  182,  182,  183,  183,  175,  185,  185,  185,  186,  186,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  184,  184,  189,  189,  190,  191,
  192,  193,  194,  194,  195,  201,  197,  197,  197,  198,
  198,  198,  199,  199,  199,  199,  196,  200,  200,  187,
  187,  206,  207,  207,  208,  208,  208,  208,   11,  210,
  210,  210,  211,  211,  211,  211,  211,  211,   70,   79,
   83,  216,  213,  217,  217,  217,  218,  222,  227,  227,
  228,  228,  229,  229,  147,  215,   87,   89,  214,  214,
   69,   82,  232,  232,  232,  233,  236,  236,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  234,  234,  235,    2,  239,  239,  239,
  239,  239,  239,  239,  239,  247,  248,  245,  245,  249,
  249,  249,  249,  249,  249,  249,  240,  240,  250,  250,
  250,  250,  250,  250,  250,  244,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  252,  252,  254,  254,  253,  251,  251,  251,  246,  246,
  242,  243,  243,  256,  256,  256,  256,  257,  257,  241,
  258,  258,  259,  259,    8,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  101,  101,  144,
  144,  263,  263,  266,  266,  268,  268,   52,   52,  265,
  265,  265,  265,  265,  265,  265,  265,  265,  273,  273,
  264,  264,  264,  264,  274,  274,   60,   60,   60,   54,
   54,  270,  270,  270,  267,  267,  267,  278,  278,  278,
  277,  277,  276,  276,  276,  271,  271,  281,  279,  279,
  279,  280,  280,  272,  272,  272,  272,  282,  282,   17,
   17,   17,  284,  284,  284,    4,   15,  286,  286,  287,
  287,  288,  288,  283,  289,  289,  290,  290,  291,  291,
  291,  291,  292,  292,  293,  293,  294,  294,  296,  296,
  296,  297,  297,  297,  298,  298,  298,  295,  300,  300,
  300,  301,  301,  299,  299,  302,  304,  304,  303,  303,
  285,   16,  305,  305,  305,  306,  306,  309,  309,  310,
  310,   64,   64,   64,  311,  311,  311,  307,  307,  312,
  312,  308,  220,  220,  221,  221,  315,  315,  316,  316,
  316,  313,  319,  319,  320,  320,  321,  321,  322,  322,
  323,  323,  203,  203,  325,  325,  230,  230,   30,  231,
  231,  231,  231,  231,  231,  231,  231,  326,  326,  326,
  327,  327,  327,  219,  219,  219,  219,  224,  224,  328,
  328,  329,  329,  329,  329,  329,  331,  331,  331,  225,
  225,  223,  223,  335,  335,  335,  226,  226,  336,  337,
  337,  337,  337,  337,  338,  338,  339,  339,  340,  340,
  341,  341,  341,  342,  342,   10,   10,  344,  344,    7,
    7,  345,  346,  347,   18,   18,  348,  349,  350,  350,
  188,  317,  317,    3,    3,  352,  352,  352,  354,  354,
   60,  353,  353,  355,  355,   33,   33,   85,   84,   84,
  343,  343,  356,  357,  357,  204,  204,  204,  146,  351,
  351,  111,  111,  111,  111,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  359,  359,  360,  360,  360,  360,
  360,  360,  360,  360,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
  371,  371,  361,  361,  362,  362,  362,  362,  363,  363,
  367,  367,  368,  368,  368,  368,  366,  369,  364,  364,
  372,  372,  373,  370,  375,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,  156,  156,  156,  376,  374,  374,  151,  151,
  381,  381,  381,  381,  381,  378,  378,  378,  378,  378,
  212,  152,  152,  153,  154,  154,  380,  380,  380,   50,
   50,   19,   19,  238,  382,   53,  123,  269,  269,   95,
  377,  377,  377,  377,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  383,  383,  384,  332,  333,  333,  333,
  330,  330,  379,  334,  334,  386,  386,  387,  387,  388,
  388,  391,  391,  389,  389,  394,  394,  393,  390,  392,
  385,  385,  385,  385,  385,  385,  385,  385,  314,  314,
  155,   47,  275,  122,  148,  358,  165,  205,  262,   62,
   59,  209,  112,   65,  318,   34,   40,  324,  261,   38,
   41,  202,   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    2,    2,    2,    1,    0,    1,    1,    6,    6,    1,
    1,    0,    0,    1,    0,    4,    0,    1,    1,    2,
    8,    1,    0,    3,    0,    0,    1,    1,    2,    1,
    1,    1,    2,    6,    1,    1,    3,    0,    1,    1,
    0,    1,    1,    2,    3,    4,    2,    2,    3,    0,
    1,    1,    2,    1,    1,    1,    4,    3,    3,    3,
    3,    1,    1,    6,    3,    1,    3,    1,    3,    2,
    1,    0,    2,    3,    1,    0,    1,    1,    2,    3,
    4,    0,    1,    2,    0,    1,    1,    5,    5,    3,
    2,    0,    1,    3,    1,    1,    6,    3,    2,    6,
    2,    1,    2,    2,    2,    0,    1,    1,    2,    0,
    2,    0,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    2,    2,    5,    1,    2,    3,    2,    2,
    0,    1,    1,    1,    1,    3,    4,    8,    4,    0,
    6,    1,    1,    2,    2,    0,    3,    3,    1,    2,
    2,    2,    8,    8,    8,    8,    3,    0,    2,    0,
    1,    3,    2,    1,    0,    1,    2,    6,    1,    0,
    2,    1,    1,    1,    3,    1,    2,    0,    1,    2,
    2,    2,    1,    1,    1,    1,    1,    1,    2,    3,
    1,    2,    1,    2,    2,    2,    3,    4,    2,    6,
    4,    7,    8,    6,    4,    2,    1,    3,    0,    2,
    4,    0,    1,    1,    3,    3,    6,    3,    0,    1,
    2,    4,    1,    3,    2,    2,    2,    1,    4,    1,
    3,    0,    1,    1,    1,    3,    3,    3,    7,    7,
    7,    7,    1,    1,    3,    4,    9,    2,    1,    3,
    1,    1,    6,    3,    0,    0,    0,    0,    3,    0,
    9,    9,    1,    1,    0,    2,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    5,    5,    5,
    5,    5,    5,    2,    0,    4,    2,    3,    3,    2,
    2,    2,    3,    3,    2,    3,    6,    1,    2,    4,
    3,    2,    2,    2,    2,    3,    1,    3,    3,    3,
    2,    2,    4,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    0,    2,    2,
    0,    1,    2,    2,    2,    2,    2,    1,    3,    7,
    1,    0,    1,    0,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    2,    2,    2,    1,    1,    1,
    1,    4,    5,    1,    3,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    4,    6,    5,    3,    0,    2,    2,    0,    3,
    0,    4,    1,    5,    4,    1,    4,    1,    2,    2,
    1,    1,    1,    2,    2,    2,    2,    1,    0,    3,
    5,    1,    1,    2,    3,    1,    2,    3,    0,    1,
    1,    1,    5,    5,    6,    3,    2,    1,    0,    2,
    0,    1,    0,    3,    1,    0,    1,    2,    1,    1,
    1,    1,    2,    2,    1,    2,    3,    1,    1,    3,
    3,    1,    2,    3,    1,    2,    0,    2,    1,    1,
    0,    1,    1,    1,    3,    2,    3,    0,    1,    3,
    4,    3,    1,    3,    4,    3,    0,    1,    3,    4,
    4,    1,    1,    0,    2,    2,    0,    3,    0,    2,
    0,    9,    1,    1,    1,    1,    1,    3,    1,    2,
    3,    2,    1,    3,    1,    1,    6,    3,    3,    2,
    3,    0,    1,    3,    1,    1,    1,    2,    1,    1,
    1,    2,    1,    2,    1,    2,    0,    2,    4,    2,
    2,    4,    2,    2,    1,    1,    0,    3,    0,    1,
    3,    1,    1,    1,    1,    3,    1,    1,    1,    2,
    0,    2,    0,    3,    5,    0,    2,    0,    4,    1,
    2,    1,    1,    0,    1,    3,    2,    1,    1,    2,
    1,    4,    2,    1,    3,    8,    5,    1,    3,    1,
    1,    4,    4,    4,    1,    1,    5,    5,    1,    3,
    3,    1,    1,    7,    7,    5,    3,    0,    1,    1,
    1,    2,    0,    1,    1,    1,    0,    3,    1,    3,
    1,    0,    3,    1,    3,    1,    3,    3,    1,    1,
    3,    1,    3,    3,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    1,    1,    5,    6,    3,    4,    5,    6,    3,    4,
    3,    4,    3,    4,    4,    5,    4,    4,    3,    4,
    1,    3,    3,    9,    9,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    3,
    1,    1,    1,    1,    1,    4,    1,    3,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    4,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    6,    6,    6,    8,    4,
    4,    3,    6,    1,    1,    6,    6,    1,    1,    4,
    6,    4,    5,    3,    5,    4,    5,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  550,  551,  552,    0,
  603,  710,  711,  715,  716,  461,    0,    0,    0,    0,
    0,    0,    0,  397,  558,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,    0,   94,    0,
  874,    0,   20,  872,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  475,    0,    0,   36,   33,   35,    0,   34,    0,  947,
    0,    0,    0,    0,   31,   67,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  557,    0,    0,    0,    0,
  666,    0,    0,    0,  949,  647,    0,    0,    0,    0,
    0,  106,    2,    0,    0,    0,    0,  445,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,  440,  441,  442,  443,  444,  446,  447,  448,  449,
  450,    0,  426,  940,    0,  944,    0,  405,  946,    0,
  402,    0,  649,  950,    0,  401,  953,    0,  400,    0,
  556,  870,    0,  150,  102,    0,  936,  103,    0,  217,
  749,    0,  943,  101,  145,    0,    0,   97,    0,  104,
  876,    0,   98,    0,   99,    0,  100,  146,  105,  612,
  613,    0,  875,  873,    0,  941,   73,    0,    0,  939,
  483,  476,    0,  482,  487,  477,  478,  485,  479,  480,
  481,  486,    0,   29,    0,   38,  736,   37,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  880,    0,  861,  658,  660,    0,  661,  663,
  929,  623,    0,  624,  664,    0,    0,    0,    0,    0,
    0,    0,  575,  564,    0,  567,  569,  570,  571,  572,
  578,  579,    0,  948,  648,    0,  107,    0,  108,    0,
  109,    0,    0,  604,    0,  602,    0,    0,    0,    0,
  462,    0,    0,  367,    0,  220,    0,  408,  398,  459,
  460,    0,    0,    0,    0,    0,    0,  417,    0,  373,
  374,    0,    0,  562,  560,  871,    0,    0,    0,    0,
    0,    0,    0,  153,  132,    0,   95,    0,    0,    0,
  110,    0,  121,  120,    0,    0,    0,    0,    0,    0,
  932,   74,    0,    0,    0,  712,  713,  484,    0,  931,
  853,  852,  851,    0,    0,  854,  855,    0,    0,  857,
  344,  345,  339,    0,  343,  849,  856,    0,  739,    0,
    0,   26,    0,    0,  951,    0,   70,   68,   66,   32,
    0,    0,    0,  741,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,  839,  867,    0,    0,  841,    0,
    0,  868,    0,  862,    0,    0,  843,  844,  845,  863,
  864,    0,  865,  866,    0,    0,    0,  869,    0,    0,
    0,    0,    0,    0,  746,  835,  836,  837,  842,  821,
    0,  820,    0,  824,  883,  884,  823,  817,  818,  819,
  822,  838,  881,  882,  904,  905,  908,  909,    0,  626,
    0,  723,    0,    0,  627,    0,    0,  601,    0,  576,
    0,  573,    0,  574,  599,    0,  594,    0,    0,  568,
    0,  750,  719,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,  608,    0,  605,    0,  185,    0,    0,
  129,  467,  172,  173,    0,  465,    0,    0,    0,    0,
  468,    0,  463,    0,    0,  412,  414,  413,    0,  415,
    0,  409,  218,    0,    0,  271,    0,    0,    0,    0,
  421,  422,    0,  452,    0,    0,    0,    0,    0,    0,
    0,  378,  377,  471,    0,    0,  365,  149,    0,    0,
  158,    0,  157,    0,  164,  147,    0,  162,  165,  166,
  154,    0,    0,  506,  542,  509,    0,  543,    0,    0,
  510,    0,    0,    0,  533,  546,  505,  528,  507,  508,
  503,  490,  367,  488,  489,  491,    0,    0,  500,  501,
  502,  504,    0,    0,    0,    0,    0,  111,    0,  112,
    0,  113,    0,  124,    0,    0,  201,    0,    0,  365,
    0,  220,    0,    0,   82,    0,    0,  731,    0,    0,
    0,    0,    0,    0,    0,    0,  752,  756,  757,  758,
  759,  760,  761,  762,  763,  764,  765,  858,  859,  860,
  850,    0,    0,    0,  738,   27,    0,    0,   43,   71,
    0,    0,   25,    0,  744,    0,    0,  707,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  952,  316,    0,    0,    0,    0,
    0,    0,    0,  659,    0,    0,  662,    0,    0,    0,
    0,  945,  630,  554,    0,  878,  553,    0,  577,    0,
  585,  581,  580,    0,    0,    0,  596,  584,    0,    0,
  717,  718,    0,    0,    0,  365,    0,    0,    0,    0,
    0,    0,  618,    0,    0,  130,    0,    0,    0,    0,
    0,    0,  367,  411,    0,  367,  368,  416,  498,    0,
  273,    0,  267,  269,  365,  937,  240,    0,    0,  367,
    0,    0,  209,  365,    0,    0,    0,    0,  245,  239,
  242,  243,  244,  420,  457,  456,  419,  418,    0,    0,
    0,    0,    0,    0,  376,    0,  367,    0,    0,  155,
  159,    0,  163,    0,    0,  529,  530,  547,    0,  544,
    0,    0,  536,  534,  535,    0,    0,    0,    0,  499,
    0,    0,    0,    0,  537,    0,    0,    0,  365,    0,
  200,    0,  203,  205,  206,    0,    0,    0,    0,    0,
  220,   77,    0,    0,   76,  933,  517,  518,    0,    0,
    0,  755,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  341,  347,  348,  346,  740,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   60,   62,    0,    0,
   69,    0,    0,    0,  743,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  921,  922,  923,  924,
  925,  926,  927,  928,    0,    0,    0,    0,    0,    0,
  914,    0,    0,    0,  645,    0,    0,  833,  834,  902,
    0,    0,  935,  829,    0,    0,    0,    0,    0,    0,
  840,  748,  747,    0,    0,    0,    0,  635,  636,    0,
    0,  628,  631,  555,  879,  586,  595,  590,  589,    0,
  600,  751,  720,  721,  365,    0,    0,  215,    0,    0,
  609,    0,  181,  175,  182,    0,  178,    0,    0,  177,
    0,  188,  169,  168,  877,  171,  170,  469,    0,    0,
    0,  410,  272,    0,  211,  367,  213,    0,  368,  208,
  214,    0,    0,    0,    0,  423,  424,  367,  365,  368,
    0,    0,    0,  394,    0,    0,    0,    0,  354,  196,
  197,  156,    0,    0,    0,    0,    0,    0,  545,    0,
    0,  367,  368,    0,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  365,    0,    0,    0,    0,  198,
    0,    0,    0,   81,    0,    0,    0,    0,   86,   83,
    0,    0,    0,  938,  714,    0,    0,  766,    0,    0,
    0,  792,  791,    0,    0,    0,  799,  811,  809,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  754,
    0,   64,   56,   57,   63,   58,   59,    0,    0,   21,
    0,    0,    0,   41,    0,    0,    0,  725,  745,  708,
    0,  724,    0,    0,    0,    0,    0,    0,  220,    0,
  885,    0,    0,  900,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  910,    0,  920,    0,
    0,    0,    0,    0,    0,  901,  846,    0,    0,    0,
    0,    0,    0,  650,    0,    0,    0,    0,    0,  592,
  593,  597,    0,  199,    0,    0,  610,  611,    0,    0,
    0,    0,    0,    0,  189,    0,    0,  406,  223,  224,
  225,  226,  227,  228,    0,    0,    0,  276,    0,  221,
    0,    0,    0,    0,  246,    0,  453,  454,  425,    0,
    0,    0,    0,    0,    0,  367,  473,  368,    0,    0,
  366,    0,  934,  167,    0,    0,  512,    0,  511,  548,
    0,  540,    0,    0,    0,  492,    0,  520,    0,    0,
  522,  525,  527,  365,    0,    0,    0,    0,  119,    0,
  204,  367,  366,   96,    0,  117,    0,   92,    0,    0,
    0,    0,   85,    0,  807,  808,    0,    0,    0,    0,
    0,    0,  810,    0,    0,    0,    0,    0,    0,    0,
  800,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   55,   61,   53,   54,
   22,  729,  730,    0,  727,  734,  735,  732,    0,  706,
    0,    0,  891,  890,    0,    0,  887,  886,    0,  895,
  894,  893,  892,  889,  888,    0,    0,  916,    0,    0,
    0,  915,    0,    0,    0,  643,    0,    0,  638,    0,
  639,    0,  656,  652,  654,    0,    0,    0,    0,    0,
  366,  615,  616,    0,  183,  179,    0,    0,  194,  190,
    0,  368,  279,    0,    0,  368,  277,    0,    0,    0,
  231,    0,    0,  247,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  470,    0,    0,  352,    0,  355,  514,
    0,  515,    0,  134,    0,    0,    0,  138,  140,  141,
  142,  495,  497,  493,  524,    0,    0,    0,  368,    0,
    0,  349,  367,   87,    0,    0,   89,    0,    0,    0,
    0,    0,    0,  813,  812,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   39,    0,  709,  219,  903,  896,  897,
    0,  898,  912,  911,    0,  917,  906,    0,  907,    0,
  641,    0,    0,  673,    0,  670,  674,  675,  677,  678,
  679,    0,    0,  622,  368,  350,    0,  174,  191,  368,
  144,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  284,  289,  283,    0,
    0,    0,  293,  294,  295,  296,  297,  298,  301,  303,
  266,    0,  207,  232,    0,    0,    0,    0,  233,  236,
    0,    0,  368,  392,  393,  389,  388,  391,  390,    0,
    0,  369,  356,  513,  541,  143,  131,  139,    0,  367,
  366,  263,  126,  368,    0,    0,   90,   91,   78,    0,
  778,  786,    0,  779,  787,  782,  790,    0,    0,  780,
  788,  781,  789,  775,  783,  776,  784,  777,  785,  726,
    0,  913,  644,    0,    0,    0,    0,  690,  692,    0,
  687,    0,  264,  184,  407,    0,  309,    0,    0,    0,
  305,    0,    0,    0,  304,    0,  306,  292,  299,    0,
  302,  285,    0,  290,    0,  330,  291,  210,  234,    0,
    0,  237,    0,  249,  251,  396,    0,    0,  368,    0,
  351,  371,    0,   75,   93,    0,  899,    0,    0,  676,
  671,  691,    0,    0,  282,    0,  307,    0,    0,    0,
    0,    0,  300,    0,    0,  323,  324,  338,    0,    0,
    0,    0,  333,  331,  238,    0,    0,    0,    0,    0,
    0,    0,    0,  361,  362,    0,  265,  368,    0,    0,
    0,    0,  698,    0,    0,    0,  281,  278,  308,    0,
    0,    0,  311,    0,    0,    0,  315,    0,  337,  942,
  336,  335,    0,    0,    0,    0,    0,  248,    0,  255,
    0,  254,    0,    0,    0,    0,    0,  372,  118,    0,
  815,  700,  689,    0,    0,  701,    0,  697,    0,    0,
    0,    0,    0,    0,    0,    0,  326,  325,  332,  334,
  235,    0,    0,  259,  258,  257,  364,    0,    0,    0,
    0,  696,    0,  703,  318,    0,    0,  310,    0,    0,
    0,  327,  262,  260,  261,    0,  357,    0,    0,    0,
    0,  328,  312,    0,    0,  814,    0,  702,  321,  313,
    0,  705,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1503,   26,   27, 1504,
   29,   30,   31,   32,   33, 1505,   35, 1506,  618,  101,
  381,  874, 1120,  102,  648,  875,  103,  386,  653,  126,
  104,  105,  236,  945,  115,  876,  877,  175,  178,  106,
  878,  107,  388,   77,  217,  352,  433,  613, 1057,  370,
  834,  582,  490,  810,  614,  615,  616, 1059,  218, 1312,
   69,  165,   70,  212, 1769, 1264,  198,  203,  205,  207,
  194,  185,  188,  200,  209,  132,  287,  289,  291,  341,
  598,  600,  602,  378,  237,  759,  515,  625,  992,  345,
  605, 1048, 1259,  549,  706, 1022,  500,  501,  530,  336,
  583, 1033, 1406,  728, 1198, 1407, 1408, 1409, 1410, 1411,
  626,  195,  186,  332,  556,  333,  334,  557,  558,  559,
  560, 1234,  986,  503,  504,  976,  974,  505,  980,  975,
 1189, 1365,  981,  982, 1194,  347,  822,  823,  824,  825,
  761,  999, 1379,  584,  763,  435,  788,  934,  524, 1326,
 1199,  436,  437,  438,  925,  439, 1380, 1381,  533, 1529,
 1668, 1215,  769,  770,  757,  771,  772,  773, 1669, 1670,
 1745,  313,  528, 1206, 1507,  171,  525,  526, 1207, 1208,
 1374, 1646, 1508, 1509, 1510, 1511, 1615, 1512, 1513, 1514,
 1515, 1516, 1517, 1518, 1519, 1520, 1691, 1732, 1655, 1734,
  440,  686, 1345,  441, 1065, 1616, 1662, 1663, 1701,  373,
  374,  442, 1017, 1231, 1397,  179, 1018, 1019,  119,  263,
  463, 1628,  356, 1179, 1359, 1484, 1672, 1673, 1674, 1675,
 1177,  322,  544,  787, 1227,  545,  785,  201,   54,  317,
  176,  137,  300,  162,  307,  168,  747,  744,  308,  318,
  777,  319,  541, 1010,  163,  301,  512,  546, 1228,   91,
  173,  221,  585,  586,  749, 1034,  750, 1035, 1036,  589,
  590,  591,  592, 1027,  838,  593,  594,  595,  803,  596,
  492,  800,   37,   38,   39,   56,  181,  325,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  712,  476,  960,
 1182,  477,  478,  717,   40,  136,  296,   41,  493,  494,
 1187,  733,  699,  264,  464,  465,  466,  703,  946,  947,
  948,  949, 1171,  443, 1159,  120,  121, 1475, 1476,  444,
 1478,  445,  446,  447,    0, 1683, 1592, 1684, 1685, 1686,
 1728, 1770,  393, 1131,   42,   43,  357,   44,   45,  485,
  486,  883, 1128, 1314, 1318,  394,  656,  191,  627,  628,
  629,  630,  631,  632,  633,  634,  635,  636,  637, 1281,
 1075, 1077, 1078,  932,  684,  448,  449,  450,  451,  452,
  377,  214,  453,  454,  915,  455,  456,  457,  458,  676,
  919, 1160, 1155,  677,
};
static short yysindex[] = {                                   4402,
 2816,  -89, 2819,  131, 1464,  382, 3604,  323, 1622,  523,
  517, 1584,  -89, 1333,  734,  506, 1190,    0,  776,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -54,
    0,    0,    0,    0,    0,    0, 5326,  516,  538,  605,
  506,  615,  703,    0,    0,  690, 1453,  824,  516,  865,
  873,  605,  756,  506,  615,    0,  703,  911,    0, 1180,
    0,  786,    0,    0, 1016,  921,    0,  506,  969,  516,
 1127,  921,  865,  538,  605,  756,  506,  615,  703,  911,
    0,  605, 1094,    0,    0,    0, 1477,    0, 1477,    0,
 1154, 1169,  207, 1524,    0,    0,    0,  824,  506,  824,
 1215, 1219, 1232,  157, 2267,    0,  135,  174,   28, 1123,
    0,  865, 1290,  971,    0,    0, 1211, 1207,  605,  506,
  703,    0,    0, 1409,  458, 1379,  -15,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  833,    0,    0, 1453,    0,  532,    0,    0, 1675,
    0, 1174,    0,    0,  555,    0,    0, 1477,    0, 1280,
    0,    0, 1257,    0,    0,  926,    0,    0, 1502,    0,
    0, 1453,    0,    0,    0,  358, 1675,    0,   49,    0,
    0, 1455,    0, 1413,    0, 1477,    0,    0,    0,    0,
    0, 1450,    0,    0, 1335,    0,    0, 1465, 1358,    0,
    0,    0, 1335,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1415,    0,  824,    0,    0,    0,  490, 1414,
 1014,  911, 1138, 1507, 1810, 1531, 1535,  490, 1488, 1014,
 1487, 1495,    0, 5726,    0,    0,    0, 5726,    0,    0,
    0,    0, 3799,    0,    0, 1419,  538, 1533, 1442, 1027,
  506, 1486,    0,    0,  971,    0,    0,    0,    0,    0,
    0,    0, 1467,    0,    0, 1675,    0, 1455,    0, 1477,
    0,  662, 1512,    0, 1489,    0,  105, 1576, 1023,  -15,
    0, 1649,  769,    0,  824,    0,  833,    0,    0,    0,
    0,  824, 1529,  -91, 1480,   -9, 1898,    0, 5869,    0,
    0,  987, 1688,    0,    0,    0, 1885, 1885, 1453, 1581,
 1453, 1969,  926,    0,    0, 6228,    0,  605,  615,  703,
    0, 1529,    0,    0, 1668,  725, 1917,  506, 1695,  538,
    0,    0, 1920,  218, 1682,    0,    0,    0, 1505,    0,
    0,    0,    0, 1514, 1522,    0,    0, 1345, 1854,    0,
    0,    0,    0, 1930,    0,    0,    0,  859,    0,  506,
 1527,    0,  605, 1521,    0,   43,    0,    0,    0,    0,
  506, 1467,  813,    0,  506,    0, 1664,  605, 1943,  490,
 1586, 1954, 1956, 1959,    0,    0, 1965, 1971,    0, 1972,
 1977,    0, 1985,    0,    0, 1988,    0,    0,    0,    0,
    0, 1993,    0,    0, 4341, 1995, 1996,    0, 5726, 5726,
 4520, 1578, 2018, 1208,    0,    0,    0,    0,    0,    0,
 1928,    0, 2016,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1222,    0,
 1979,    0, 1742, 2023,    0,   26,   58,    0,  396,    0,
 -100,    0, -100,    0,    0, 2028,    0,  145, 1644,    0,
    0,    0,    0, 2029,   66, 2013, 1529, 2045, 1824,    0,
 1811, 1811, 2049,    0, 2048,    0, 1717,    0,  121, 1752,
    0,    0,    0,    0, 1453,    0, 1885, 1885, 1885, 1885,
    0, 2059,    0, 1828, 1829,    0,    0,    0, 1814,    0,
 6228,    0,    0, 6228, 1693,    0, 1675, 1848, 1650, 3532,
    0,    0,  639,    0, 1650,  759, 1174,    0, 1749, 1702,
 1677,    0,    0,    0,  478, 1751,    0,    0, 1687,  756,
    0, 1453,    0, 1874,    0,    0, 1969,    0,    0,    0,
    0,  284, 1710,    0,    0,    0, 1726,    0, 1775, 2137,
    0, 1834, 2148,    5,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2099,   89,    0,    0,
    0,    0,  178, 2151, 2155, 2148, 1675,    0, 1879,    0,
 1477,    0, 1929,    0, 1453, 1453,    0,  -91,  555,    0,
 1816,    0, 1798, 2160,    0, 5133,  162,    0, 1815, 1830,
 2174, 2394, 2177, 1925, 3534,  507,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1706, 1854,  824,    0,    0, 1921, 1782,    0,    0,
 1753, 1014,    0, 1902,    0, 1708, 2183,    0, 1902, 1921,
 1903, 1916,  605,  984, 4584,  208,  865, 5726, 1167, 1168,
 1431, 1901, 5726, 2394, 1979, 1786,   44, 5726, 4584, 1009,
 1009, 1333, 1481, 2198,    0,    0, 4821, 1783, 5726, 5726,
 5726, 5726, 5726,    0, 5726,  101,    0,  127, 1789, 4584,
 1785,    0,    0,    0,  956,    0,    0,   46,    0, 1804,
    0,    0,    0,  506, 1112,  506,    0,    0,  824, 1467,
    0,    0, 4584, 1992,  -91,    0, 1783, 1180, 1180,  662,
   91,  824,    0, 1453, 1453,    0,  -84, 1687, 1687, 1799,
  756, 1023,    0,    0, 2222,    0,    0,    0,    0, 1989,
    0,  824,    0,    0,    0,    0,    0, 1997, 2227,    0,
 1968, 1987,    0,    0, 1931, 1933, 1477, 2004,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  756,  824,
 5661, 1886, 1887, 1892,    0,  756,    0, 1869, 1472,    0,
    0, 1871,    0,  116, 1876,    0,    0,    0,  756,    0,
 2137,  170,    0,    0,    0, 1999,  170, 1875,  170,    0,
 2262,  756,  756,  756,    0, 1529,  506, 2039,    0, 1950,
    0, 1714,    0,    0,    0,  987, 1869,  506, 1716,  256,
    0,    0, 2269, 2037,    0,    0,    0,    0,  218, 1861,
 1512,    0, 1512, 2987,  667, 5726, 5726, 2478, 2283,  864,
 2713, 5726, 2948, 1191, 3030, 3183, 4904, 3265, 3500, 3735,
 2394, 2394,    0,    0,    0,    0,    0, 1521,  605,  615,
 1521,  703,  911,   65, 2285,    0,    0,    0, 1921, 1944,
    0,  407, 1963, 1467,    0, 4584, 1963, 2288, 2285, 1921,
  -75, 2017, 5726, 5726, 2070, 5726, 2296, 5726, 2298, 1544,
 5726, 5726, 5726, 5726, 5726, 5726,    0,    0,    0,    0,
    0,    0,    0,    0, 2024, 1166,   25, 5726,  466, 4584,
    0, 2394, 2075, 1979,    0, 2300,   28,    0,    0,    0,
 1979, 1718,    0,    0, 2066, 1009, 1009, 1377, 1377,  723,
    0,    0,    0,  127, 2310, 2308,  702,    0,    0, 2394,
 2033,    0,    0,    0,    0,    0,    0,    0,    0, -134,
    0,    0,    0,    0,    0, 1735, 1869,    0, 1863, 1863,
    0, 2320,    0,    0,    0, 1765,    0, 1885, 2104,    0,
  -84,    0,    0,    0,    0,    0,    0,    0, 2349, 2394,
 2158,    0,    0, 2091,    0,    0,    0, 2158,    0,    0,
    0, 1477, 1477, 1890, 2353,    0,    0,    0,    0,    0,
  402,  -70,  673,    0, 2132, 1333, 1946, 1957,    0,    0,
    0,    0, 1942,  131, 1771, 1982, 1989, 2374,    0, 1687,
 1781,    0,    0, 1360,    0, 2360, 1942, 1451,  756, 2378,
 2379, 2382, 2163,  555,    0, 2091, 1885, 1752,  -91,    0,
 1751, 1946,  104,    0,  756, 2041, 2118, 5133,    0,    0,
  756, 1939, 2128,    0,    0, 2399, 2402,    0, 1667, 1979,
 2413,    0,    0, 1979, 2415, 5084,    0,    0,    0, 2103,
 2418, 1979, 2426, 1458, 2438, 1979, 2440, 5726, 5726, 2283,
 5726, 5166, 2451, 1979, 2453, 2454, 1979, 2455, 5726, 1979,
 2456, 1979, 2459, 2465, 1979, 2467, 2468, 1979, 2472,    0,
 2205,    0,    0,    0,    0,    0,    0, 2186, 1921,    0,
 1921,   65, 2285,    0,  280,  280,  184,    0,    0,    0,
 1793,    0, 2288, 2285, 2469,  -75, 1647, 1847,    0, 2009,
    0, 2035, 5726,    0, 2114, 2185, 2427, 2434, 2537, 2545,
 5726,  756, 4584, 1979, 2079, 4584,    0, 5726,    0, 2207,
  599, 5726, 4584, 5726, 5726,    0,    0,  702, 2476, 4584,
 1207,  127, 2131,    0, 2133, 2135, 2181, 2254, 2197,    0,
    0,    0, 2091,    0, 1946, -183,    0,    0, 2107, 1453,
 2140, 1687, 2142, 1687,    0, 2394,  692,    0,    0,    0,
    0,    0,    0,    0, 2090, 2271, 2091,    0, 5726,    0,
 2255, 2136, 1890, 1180,    0, 2394,    0,    0,    0, 2159,
 2162, 2164, 2169, 2171, 2172,    0,    0,    0,   28, 2284,
    0,  465,    0,    0, 2522,  131,    0, 1799,    0,    0,
  170,    0, 2158, 2187,  170,    0,  170,    0, 1989, 2523,
    0,    0,    0,    0,  987, 1869, 2271, 1687,    0, 1752,
    0,    0,    0,    0, 2320,    0, 2525,    0, 2530, 1453,
  -95, 2531,    0, 1453,    0,    0, 5726, 2157, 2157, 1333,
 2532, 1817,    0, 2157, 2157, 5726, 2157, 2157, 2087, 1979,
    0, 1528, 5726, 1979, 2157, 2157, 2157, 2157, 1979, 2157,
 2157, 2157, 2157, 2157, 2157, 2191,    0,    0,    0,    0,
    0,    0,    0, 2154,    0,    0,    0,    0, 4584,    0,
  -75, 2469,    0,    0, 6228, 2544,    0,    0, 2584,    0,
    0,    0,    0,    0,    0, 2736,  136,    0, 4584, 2292,
 2161,    0, 4584, 2766, 1822,    0, 1352, 1979,    0, 1840,
    0,  702,    0,    0,    0,  127, 1596, 2394, 2196, 2271,
    0,    0,    0, 1885,    0,    0, 1453, 1472,    0,    0,
  699,    0,    0,  824, 3638,    0,    0, 1979, 1811, 2255,
    0, 1187,  506,    0, 2256,  707, 2165, 2264, 2166, 2303,
 2272, 2313, 2091,    0, 3799, 2226,    0, 1869,    0,    0,
 2578,    0, 2581,    0, 2275, 1811, 2187,    0,    0,    0,
    0,    0,    0,    0,    0, 2091, 1751, 1946,    0, 1472,
 2132,    0,    0,    0, 2252,  -86,    0, 1989, 2260, 1979,
 2592, 2593,   28,    0,    0, 2596, 2609, 1979, 2611, 2615,
 5726, 5726, 1979, 2617, 2618, 2619, 2621, 2622, 2625, 2627,
 2631, 2632, 2633,    0,  280,    0,    0,    0,    0,    0,
  756,    0,    0,    0, 4584,    0,    0, 4584,    0, 1789,
    0, 1322, 2398,    0, 2636,    0,    0,    0,    0,    0,
    0,  507,  740,    0,    0,    0, 1687,    0,    0,    0,
    0, 6228,  175,  363, 2624, 1512, 2641, 2345, 5726, 2629,
 2649, 2634, 2637, 2638, 2351, 2639,    0,    0,    0, 2386,
 5413, 2640,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2659,    0,    0, 2355, 2366,  506, 1890,    0,    0,
 1477,  538,    0,    0,    0,    0,    0,    0,    0, 2271,
 2391,    0,    0,    0,    0,    0,    0,    0, 2271,    0,
    0,    0,    0,    0, 5726, 1453,    0,    0,    0, 1453,
    0,    0, 5726,    0,    0,    0,    0, 1979, 1979,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2675,    0,    0, 2033, 2394, 1783, 1596,    0,    0, 2348,
    0, 2679,    0,    0,    0,   92,    0, 5401,  605, 5726,
    0, 2381, 2394, 2606,    0, 2394,    0,    0,    0,  134,
    0,    0,  575,    0, 2281,    0,    0,    0,    0, 1890,
 1477,    0, 2339,    0,    0,    0,  146, 1789,    0, 2132,
    0,    0, 1979,    0,    0, 1352,    0, 2197,  507,    0,
    0,    0,  588, 2158,    0, 2676,    0, 2801, 5629, 2883,
  134,  709,    0,  710, 1492,    0,    0,    0,  516, 2286,
  131,  151,    0,    0,    0, 2339,  -60, 1890, 2352, 2362,
  146, 2707,  702,    0,    0, 2033,    0,    0, 2711, 1789,
 2196,  506,    0, 2714, 2718,  903,    0,    0,    0, 3978,
 2346, 2719,    0,  120, 2328, 2462,    0,  134,    0,    0,
    0,    0, 3638,  575, 1890,  494,  494,    0, 2470,    0,
 2326,    0,  702, 2729,  146, 2436, 2197,    0,    0, 2033,
    0,    0,    0,  588, 2742,    0,  538,    0, 1481, 1859,
   72, 2725, 2491, 2481, 3638, 3638,    0,    0,    0,    0,
    0, 2324,  -17,    0,    0,    0,    0,  702,  146, 2196,
 2197,    0,  538,    0,    0,  134, 2746,    0, 1861, 3638,
 2483,    0,    0,    0,    0, 1499,    0, 2196, 2748, 2752,
 1865,    0,    0, 3638, 2394,    0,  538,    0,    0,    0,
  507,    0,
};
static short yyrindex[] = {                                      0,
    0,  221, 1035,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  801, 2001,    0,    0,    0,    0, 2794,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  857,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  811,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2457,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2412,    0,    0,    0,  108,    0,  108,    0,
    0,    0,    0, 2414,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4042, 2243,
    0,    0,    0,  822,    0,    0,    0, 1240,    0,    0,
    0,    0,    0,    0,    0,  792,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
    0,    0,    0,    0,  694,    0,    0, 2535,    0, 1021,
    0,    0,    0,    0,    0, 1665,    0,    0, 6535,    0,
    0,    0,    0,    0,    0,    0,   12,    0,  511,    0,
    0, 2761,    0,    0,    0, 2535,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1045,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1059,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1161,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   99,    0,    0, 1065,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   12,    0, 2761,    0, 2535,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1130,
    0, 2526,    0,    0,    0,    0, 1132,    0,    0,    0,
    0,    0, 2539,  468, 4198,    0, 1136,    0,    0,    0,
    0,  378,    0,    0,    0,    0, 2356, 2356,    0,    0,
    0, 1145, 2225,    0,    0,    0,    0,    0,    0,    0,
    0, 2539,    0,    0, 1457,    0,    0,    0,    0,    0,
    0,    0, 4758, 2422,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1248,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1268,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1298,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 6106,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,    0,    0, 2493,    0,  406,    0,    0,    0,    0,
  202,    0,  202,    0,    0,  239,    0,  401,  480,    0,
   77,    0,    0,    0, 1045,    0, 2539,    0,    0,    0,
   73,   73,  893,    0,    0,    0,  842,    0, 3023,  165,
    0,    0,    0,    0,    0,    0, 2356, 2356, 2356, 2356,
    0,  193,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2554,    0,    0,    0,
    0,    0, 2526,    0,    0,  260,    0, 1011, 2350,    0,
    0,    0,    0,    0,    0,  182,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1325,    0,    0,    0,
    0,  597,  922,    0,    0,    0, 1002,    0,    0, 1233,
    0,    0, 1468,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1730, 1801,    0,    0,
    0,    0, 1506, 1078,    0, 1468,   12,    0,    0,    0,
 2535,    0,    0,    0,    0,    0,    0,  468, 1081,    0,
    0,    0,    0, 2408,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  274,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  305,    0,    0,    0,    0,  305,    0,
    0,    0,    0, 5808,    0, 5808,    0,    0, 5808, 5808,
 5808,    0,    0,    0, 2372,    0,    0,    0,    0, 6890,
 7027, 4277,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1922,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -113,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  468,    0,    0,   76,   76,    0,
    0,    0,    0,    0,    0,    0, 3193,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1519,
    0,    0,    0,    0,    0,    0,    0, 2786,    0,    0,
 2153, 2509,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  628,  745,  754,    0,    0,    0,    0, 1741,    0,
    0,    0,    0,    0, 1561,    0,    0,    0,    0,    0,
 1233,    0,    0,    0,    0,  125,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2539,    0,    0,    0,  381,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 8441,
    0,    0,    0,  245,    0,    0,    0,    0, 2517,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1365, 1367,    0,    0,    0,    0,    0,
    0,    0, 1374,    0,    0,    0, 1374, 1375, 1378,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  774,    0,    0, 5808,    0,    0,    0,
  886,    0,    0,    0, 6413, 7197, 7334, 6583, 6720,    0,
    0,    0,    0,    0,  527,  100, 1672,    0,    0,    0,
 2007,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  836,  836,
    0,  897,    0,    0,    0,    0,    0, 2356, 2370,    0,
 3428,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2559,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1498,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1392, 2001, 1400,  114,    0,    0,
    0,    0,    0,    0,    0,    0, 1028,    0,    0,    0,
    0,    0,    0,    0,    0, 1520,    0,    0,    0,    0,
    0,    0,    0, 1081,    0, 2559, 2356, 1476,  468,    0,
 2568, 1400,    0,    0,    0, 8441,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3789,
    0,    0,    0, 4901,    0,    0,    0,    0,    0,    0,
    0, 5377,    0, 7430,    0, 7493,    0,    0,    0,    0,
    0,    0,    0, 7573,    0,    0, 7657,    0,    0, 7691,
    0, 7702,    0,    0, 7801,    0,    0, 7891,    0,    0,
  806,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1365, 1493,    0, 2400,  374,    0,    0,    0,    0,
    0,    0, 1537, 1558, 1583,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2403,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2492, 1287,    0,
 2216,    0, 2496,    0, 2497, 2498,    0,    0,  878,    0,
    0,    0, 2559,    0, 1400,    0,    0,    0, 2806,    0,
    0,    0, 2376,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2390,    0, 2587,    0,    0,    0,
 1592,    0, 1498, 2457,    0,    0,    0,    0,    0,  765,
  772,  773,  784,  794,  803,    0,    0,    0, 4042,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  906,    0,    0,    0,    0, 2623,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1590,
    0,    0,    0,    0, 1608,    0,    0,    0,    0,    0,
  155,    0,    0,    0,    0,    0,    0,    0,    0, 4277,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7897,
    0, 7974,    0, 8060,    0,    0,    0,    0, 8080,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1626,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1137,    0,    0,
    0, 1867,    0,    0,    0,    0,    0,    0,  318,    0,
    0,    0,    0, 2356,    0,    0,    0, 2760,    0,    0,
    0,    0,    0,    0, 2550,    0,    0, 2820, 1643, 2358,
    0, 2526,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1648,  938,    0,    0,    0,
    0,    0,    0,    0,    0, 2559, 2568, 1400,    0,  411,
    0,    0,    0,    0,    0,    0,    0,  387,    0, 8163,
    0,    0, 5808,    0,    0,    0,    0, 8208,    0,    0,
    0,    0, 8295,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  374,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  655,
    0, 2492,  676,    0,  350,    0,    0,    0,    0,    0,
    0, 1402, 2822,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2558,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2635,    0,    0,
   90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8316, 8422,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   88,    0,    0,    0,    0,    0, 2823,
    0,    0,    0,    0,    0, 2809,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2560,    0,    0,    0,    0, 2635,
   83,    0,   96,    0,    0,    0,    0,  199,    0,    0,
    0,    0, 2820,    0,    0,    0,    0,  273, 3318,    0,
    0,    0, 2822,    0,    0,    0,    0,    0,  263,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  122,    0, 1498,  128,  147,
    0,  281, 1332,    0,    0,  150,    0,    0,    0,  655,
 2830, 1281,    0,    0, 2831,    0,    0,    0,    0,    0,
 2814,  272,    0, 2569,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2635,    0,    0,    0,    0,    0,
    0,    0, 2492, 1748,    0,    0,  205,    0,    0,   88,
    0,    0,    0, 2822,    0,    0,    0,    0, 2840,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1342,    0,  126,
  273,    0,    0,    0,    0,    0, 2828,    0,    0,    0,
 4116,    0,    0,    0,    0, 2492,    0, 2830, 2848,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1792,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2896,    0,    0, 2897,
    0,    0,    0,    0,    0,    8,    0, 2898,   -1,  232,
   21, -563, 1778,  233, -187,  111, 2890, 2655,    0,  -35,
    0, 2664,  -90,  -44,    0,  241, -414,  -29,  -33,  -25,
 -157, 2666, 2257,    0,    0,    0, 1384,    0,    0,  -46,
 1856, -536,   16, -870, 2304, 2088, -273, 1862, 2838, -285,
    0,  -55,    0, -637,  -47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -578,  203, 1868, -277,  255, -929,    0,
    0,    0,    0, -279, -104, -484, 1881, -317,  -41,    0,
 -491,    0,    0, -471, -952,    0, 1525,    0,    0, 2642,
 -596,  -28,    0,    0,    0,    0, 2594,    0, 2377, 2646,
 -210, 1894, -624,    0,    0,    0, -674,    0,    0,    0,
    0,    0,    0, 1952,    0, 2647, 2220, 1897, 2643, 2644,
    0, 1351,    0, -486, 2190,  -57, -552, -695,    0,    0,
  -11, -946, -934, -931, -221, -923,    0, 1568, -909,    0,
 1283,-1131, 1571,    0, 2419,    0,    0,    0, 1285, 1299,
 1249,  140, -270, -684, -420,    0,    0, 2218,    0, 1764,
    0,    0, -464,    0,    0,    0,    0, -182,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -712,    0,
   67,    0,-1107, -282, 1213, 1366,    0, 1278,    0,    0,
 2616,  -94, -721, -884,-1112,    0,    0,-1013, -628, -861,
 1589,    0, -466, -803, -724, -400,    0, -378, 1315,  975,
 -451, -501, -715, -936,-1231,    0,    0,    1,    0,    0,
    0,    0,    0, 2668,    0,    0,    0,    0, 2683, 2458,
    0,    0,    0,    0,    0, 2692,    0,    0,    0,    0,
  -16,    0,    0,    0, -314, 2188, -305, 1754, -427,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2404,    0,
-1134, 2193,    0,    0,    0, 2983,    0,    0,    0,    0,
 2723,    0,    0,    0,    0, 2536,    0, 2528,    0,    0,
    0, 2290,    0,    0,    0,    0,    0,  -85,    0, 2277,
 2038,    0,-1202, 1565,    0, 2312, -618, 2314,    0, -734,
 2069,    0,    0, -121, -649,    0, 2899,    0, 1430, -691,
    0, -685, -605, -593,    0, 1538,    0, 1296,    0, 1343,
    0, 1250,    0,    0,    0,    0, 2541,    0,    0,    0,
 -306, 2383, 2146,-1019,    0,    0,    0, 1032,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2416,
 1591, 1945,    0, -582,    0,    0,    0, -213,    0,    0,
 2670,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -244, 1883,    0,
};
#define YYTABLESIZE 8939
static short yytable[] = {                                     128,
  190,  167,   73,  192,   74,  170,  285,   34,  238,  491,
  184,  372,  256,  259,  555,  172,  189,  197,  721,  376,
  729,  587,  257,  260,  222,  842,  519,  845,  202,  926,
  588,  968,  521,  206,  748,  204,  226,  751,  760,  707,
  227,  462,  208,  762, 1200, 1210,  895,  233,  550,  294,
  244, 1200,  246,  927,  225,  231, 1201,  827,  230, 1202,
  977,  128, 1350, 1201,  232, 1164, 1202, 1204,  619, 1211,
  229,  603,  216,  245, 1204,  614,  936,  917,  199,  835,
 1219, 1384,  737,  387,  286,  655,  652,  323,  511,  737,
  969,  970,  387,  266,  288,  256,  888,  290,  582,  632,
  483,  228,  705, 1244,  964, 1052, 1315,  826, 1119,  720,
 1051, 1756,  940,  353, 1262,  349,  216,  936,  309,  614,
  936,  256,  948,  737,  135,  688,  737,  252,  669,  432,
  737,  216,  942,  737,  614,  936,  256,  936,  375,  256,
  632,  737,  942,  235, 1470,  337,  253,  372,  737,  669,
 1422,  737, 1644,  972,  256,  376, 1239,  582,  632, 1024,
  735,  484,  256, 1698,  464,  256,  944, 1263,  252, 1025,
  495,  252,  353,  967,  254,   72, 1462,  379, 1426,  809,
  256,  395,  736,  135,  688, 1671,  252,  253,  716, 1554,
  253,  432,  466,  722, 1704,   88,  529,  255,  683,  489,
  242,  587,  994,  382,  681,  253,   72,  496,  669, 1168,
  661, 1001,  382,  258, 1030,  587,  724,  812, 1399,  468,
  559,  371, 1474,  464,  588,  482,  650,  738,  739,  740,
  741, 1222,  951, 1597,  722,  475,  255,  722,  588,  555,
  395, 1706,  297,  112,  113, 1185,  255,  520, 1486,  897,
  242,  466,  722,  868,  523,  768,  190,  683,  536,  458,
  587,  539,   72,  681, 1110, 1111, 1046, 1130,  397, 1557,
  484, 1180,  978,  682,  375,  268,  795,  710,  535,  559,
  358,  804,  551, 1764,  553,   84,  861,  261,   84,  701,
 1404,  298,  591,  597, 1008, 1056, 1200,  588, 1394,  607,
 1361, 1382,  611,  458,  728,  806,  601,  658, 1201,  599,
 1362, 1202,  609,  681,  682, 1122,  343,  688,  458, 1204,
 1363,  319, 1181,  794,   72, 1161, 1133, 1135,   72,  471,
  317,  262,  682,  134,  482, 1765,  342,  216,  649,  358,
  936,  936,  255,  591,  646,  979,  251,  252,  711,  668,
  805,  920,  921,  649,   74,  654,  936,  371,  688,  659,
  737, 1257,  737,  728,  382,  808,   55, 1395,  871,  187,
  737, 1427, 1223,  519, 1031,  216,  688,  472, 1414,  936,
  125,  936, 1707, 1733, 1543,  385,  135, 1229,  758,  734,
  668,  216,  998, 1197,  614,  936, 1622,  941, 1678,  256,
  598,  256,  135,  299,  135,  252, 1558,  252,  668,  256,
  195,  862, 1183,  216,  344,  252,  614,  936,  632,  669,
  662,  865,  464,  268,  253,  487,  253,  521,  632,  376,
  521,  632,  519, 1680,  253, 1580,  472, 1352, 1631,  125,
  632,  582, 1491,  462,  789,  395, 1521,  491, 1522,  629,
  466,  187, 1474,  498, 1461, 1703, 1218,  722,  737,  598,
 1153,  737,  499,  715,   88,  989,  737,  261,  991,  195,
 1382,  464,  764,  737, 1265,  892,  582,  250,  462,  583,
 1550,  669,  997,  737,  669,  473,  702,  632, 1665, 1552,
  737,  737, 1256, 1282,  387,  922,  632,  651, 1360,  466,
  256,  462, 1316,  135,  582,  791,  252,  582,  434, 1015,
  818,  896,  459, 1346,  722, 1366,  253,  461,  355, 1118,
 1346,  835,  256,  582,  737,  253,  642,  683,  252,  256,
  683,  988,  481, 1551, 1418,  252, 1708,  963,  583, 1417,
  632, 1692, 1255,  704,  587, 1043,  669,  253,  866,  582,
  190,  187,  632, 1063,  253, 1593, 1058, 1559,  820,  821,
 1595,  187,   74,  256,  187,  790,  688,  642,  353,  252,
  642, 1563, 1322, 1741,  985,  216, 1385, 1129,  614,  936,
  688,  588, 1730,  464,  737,  642,  867,  169,  253,   71,
  669,  737,  682,  253,  481,  683,  519,  256,  484, 1371,
  955,  681,  682, 1625,  669,  682,  125,  587,  495,  358,
  587,  466,  358, 1402,  682,  837,  588,   74,  649, 1386,
   71, 1472,  836,  256, 1632,  811,  587,  381,  253,  252,
  559,  864,  253,  983,  984,  164,  688,  519,  899,  683,
  519,  472,  985,  241,  588,  681,  722,  588,  253,  617,
 1055, 1433,  587,  683,  722,  519,   84,  519,  688,  681,
  521,  682,  482,  588,  462, 1477,  754,  190,  668,  681,
  682, 1479,  728,  319,  379,  672,   71,  358,  475,  675,
  961,  668,  317,  680,  681,  683,  381,  973,  973,  588,
  668, 1687, 1488,  375,  523,  683,  521, 1200, 1192, 1677,
 1456, 1416,   78, 1679, 1308,  688, 1310, 1068, 1540, 1201,
 1112,  617, 1202, 1115,  682,  617,  672,  293, 1209,  672,
 1204,  358, 1007, 1009, 1398,   92,  629, 1125,  682,  125,
 1217, 1549, 1372,  358,  672,  358,  816,  668,   71, 1490,
 1220,  519,   71,  598,  379,  241,  668, 1533, 1718, 1695,
 1696, 1480,  375,  380, 1243, 1066,  987, 1067,  688,  195,
  338, 1482,  484, 1481,  386, 1599, 1165, 1258,  861, 1203,
  889,  387,  383, 1156, 1157,  472, 1203,  376,  598,  782,
 1638, 1044, 1058,  382,  376, 1376, 1014,  241,  310,  110,
  668,  619, 1053,  385, 1006,  108,  339,  122,  521, 1028,
  559,  708,  384,  379,  668,  753,  598,  340, 1600,  598,
  561,  320,  380, 1403,  646, 1167,  783,  646, 1583, 1413,
  272,  566,  583,  386, 1113,  598,  482, 1040, 1041, 1042,
  387,  383,  646, 1457,  133,  617, 1419, 1658, 1116,   74,
 1114,  621,  382, 1126, 1221,  642,  753, 1117,  642,  753,
  619,  598,  385,  521,  519,  642,  607,  583,  642,  559,
  861,  384,  642,  109,  753, 1325,  311,  642,  241,  561,
  642, 1742, 1717,  519,  519,   14,  519,  681,  844,  617,
  566,  519, 1016, 1489,  519,  583,  642, 1659,  583,  321,
 1640,  381,  606,  862,  617, 1477,  620,  519, 1660,  645,
  621, 1479,  644,  519,  583,  136, 1308, 1523, 1338,  241,
  642, 1340, 1743, 1681,  642,  607, 1751, 1158,  681,  461,
  784,  531,  900,  642,  380,  955,  847,  916,  861,  847,
  583, 1588,  923,  924, 1547, 1553,  681,  137, 1694, 1485,
  642,  931,  736,  935,  936,  937,  938,  939, 1393,  931,
  125,  606,  375,  861,  461,  620, 1589,  375,  765, 1744,
  861,  531,  531,  375,  136,  531,  125,  642,  861, 1004,
  861,  861,  122,  122, 1224,  519,  164,  461,  847,  642,
  531, 1480,  531,  683, 1421,  862,  683,  642, 1639, 1123,
  127,  190, 1750, 1481,  672,  379,  137,  519,  166, 1346,
 1134,  532, 1661, 1584,  519, 1596, 1652,  672,  379, 1654,
  587, 1225,  531,  519, 1590,  519,  672,  380, 1757,  588,
  563, 1203, 1235, 1173,   74,  381, 1768,  521,  386,  376,
 1313, 1313, 1317,  519, 1343,  387,  383, 1174,  519,  766,
 1346,  532,  532, 1771,  683,  532, 1614,  382,  125, 1351,
  692,  683,  219,  862, 1250,  693,  517,  385,  342,  122,
  532, 1175,  532,  672,  565,  169,  384,  519,  521,  518,
 1268,  521,  672,  606, 1473,  174, 1272,  526,  862,  563,
  767,  646,  646, 1588, 1487,  862,  521, 1368,  521, 1370,
  302,  375,  532,  862, 1463,  862,  862,  462, 1466,  180,
 1069, 1070, 1074,  683,  768, 1082, 1084, 1086, 1589, 1094,
 1097, 1100, 1102, 1105, 1108, 1176,  672,  342,  526, 1626,
   71,  526,  481,  565,  753,   74,   74,  753, 1629,  403,
  672,  404,  619,  196,  753,  399,  526,  753,  526,  303,
  461,  753,  379,  973,  160, 1555,  753, 1137, 1138,  753,
 1140,  380, 1142, 1420,  617, 1145, 1146, 1147, 1148, 1149,
 1150, 1676,  386,  177,  123,  753, 1590, 1337,  526,  387,
  383,  124, 1154,  462,  924,  607,  617,  848, 1781,  531,
  848,  382,  621,  367,  646,  136,  182,  183,  403,  753,
  404,  385,  753,  753,  399,  531,  681,  607,  531,  531,
  384,  531,  753,  160, 1212, 1213,  531,  692,  690,  531,
  691,  606,  693, 1720,   71,  367, 1079,  137,  681,  753,
 1582, 1716,  531, 1425,  775,  646,  776, 1429,  531,  848,
   14,  531,  549,  606, 1401,  495,   74,  620, 1739,  649,
 1725,  753, 1080,  261,  213,  542,  753,  340,  694,  692,
  690,  304,  691,  484,  693, 1266,  543,  657,  753,  532,
  753, 1716,  697,  692,  690,  681,  691,   42,  693,  305,
 1761, 1762, 1630,  549,  681,  532,  549, 1726,  532,  532,
 1721,  532,  327,  649,  187,  521,  532,  893,  688,  532,
 1727,  549, 1713,  549,  689, 1773, 1716,   50,  649,  115,
  531,  507,  532,  306, 1473,  521,  340,  521,  532, 1780,
  471,  532,  521,  268, 1716,  521,  190,  482,  681,  328,
  973,  329,  531,  549,  161,  193,   42, 1657,  521,  531,
  931,  359, 1492,  531,  521,  526, 1748,  115,  215,  375,
  531,  360, 1289, 1290,  330, 1292, 1294, 1531,  269, 1767,
  375,  526,  508, 1299,  526,  526,   50,  526,  531, 1307,
 1313, 1309,  526,  531,   40,  526,   23, 1776, 1657,  331,
 1766,  100,  115,  733,   46,  359,  270,   48,  526,  271,
  532,  216, 1594,  161,  526,  360,  509,  526,  531,  484,
  359,  474,  531,  692,  690,  272,  691, 1329,  693,  370,
  360,  680,  532, 1245,  510, 1336,  521,  924,  936,  532,
  924,  472, 1154,  532,  253, 1738, 1344,  924, 1347, 1348,
  532,  273, 1203,   40,  924,   23,  261,  261,  521,  220,
  376,  314,  733,   46,  315,  521,   48, 1598,  532,   94,
 1623,  954,  680,  532,  210,  688,  521,  445, 1657,  223,
  474,  689, 1246,  482,  369,   74,  526,  384,  370,  368,
  680, 1581, 1088, 1378,  521,  495,  473,  539,  532,  521,
  901,  903,  532, 1657,  385,  127,   96,  255,  526, 1089,
  316,  936,  211,  474, 1624,  526, 1152,  688,  495,  526,
  549, 1621,   24,  689, 1245,  234,  526,  250,  521,  692,
  690,  688,  691, 1602,  693,  523,  549,  689,  539, 1634,
  549,  539,  549, 1635,  526,  958,  235,  549,  521,  526,
  549,  928,  692,  690, 1090,  691,  539,  693,  539,  495,
 1666, 1430,  959,  549,  127, 1698,   47,  239,  250,  549,
 1438,  250,  549, 1249,  526,   97,  523, 1443,  526,  523,
 1697,   24,  240, 1091, 1649,   98,  250,   49,  539,  521,
  516,  649,  521,  496,  523, 1525,  523,  243,  649,  692,
  690,  649,  691,  461,  693,  649,  495,  521,  742,  521,
   99,  484,   44,  649, 1144,  692,  690, 1526,  691,  128,
  693,  229,  129,  924, 1527,   47,  523,  924,  353,  649,
  247,  516,  248, 1699,  516,  742,  358,  116,  635,  495,
  128,  549,  496,  484,  484,  249,   49,  118,  699,  516,
 1092,  516,  635,  649,  130,   45, 1682,  267, 1528,  283,
  635,  688,  229,  549,  495,  229,  649,  689,  484,  131,
  549,   44,  216, 1173,  549,  482,  635,  216,  128,  461,
  229,  549,  484,  649,  128,  699,  688, 1174,  649, 1702,
  359,   74,  689,  359,  151, 1682,  116,  284,  699,  549,
  360,  633,  698,  360,  549,  657, 1656,  482,  482, 1754,
  649, 1175,  292,  216,   45,  657,  216, 1323,  692,  690,
  261,  691,  649,  693,  649, 1568, 1569,  295,  128,  549,
  635,  216,  482,  549,  324, 1585,  216, 1682,  692,  690,
  359,  691,  633,  693,  312,  633,  482, 1656,  326,  924,
  680,  624,  924,  151,  429,  539,  430,  943,  359,  498,
  633,  348,  128,  753,  905, 1176,  752,  688,  360,  432,
  195,  539,  680,  689,  255,  539,  863,  539,  885,  643,
  962,  884,  539, 1604, 1050,  539, 1054, 1049, 1166,  831,
  688, 1165,  943,  523, 1737,  335,  689,  360,  539, 1286,
  498,  346,  359,  498,  539, 1184,  521,  539, 1049,  523,
   75,   76,  360,  523,  359,  523,  359,  350,  498,  680,
  523,  363,  521,  523,  360,  351,  360, 1656,  680,  195,
  521,  354,  361,  362,  363, 1191,  523,  688, 1190, 1633,
  355, 1237,  523,  689, 1236,  523,  383, 1636,  516,  521,
 1173, 1242, 1656,  688, 1241,  521,  117,  118,  521,  689,
  366,  367,  363, 1320, 1174,  363, 1319,  516,  516, 1442,
  516,  521,  680,   93,  521,  516,  539,  391,  516,  392,
  363,  395, 1648,  396, 1650,  467,  680, 1435, 1175,  521,
 1165,  516, 1469, 1020, 1021, 1468,  634,  516,  539,  241,
  400,  229,  361,  362,  363,  539,  182,  183,  401,  539,
 1471,   93, 1775, 1468,  523,   94,  539, 1324,  692,  690,
  398,  691,  470,  693,  469,  364,  365,   95,  368, 1755,
  366,  367, 1468,  924,  539, 1779,  523,  634, 1698,  539,
  634,  111, 1176,  523,  182,  183,  255,  523,  123,  123,
  479,  683,   96,   94,  523,  634,  688,  481, 1277,   14,
  521,  497,  689,  506,  539,   95,  514,  521,  539,  516,
  527,  537,  523,  151, 1729,  548,  688,  523,  402,  534,
  408,  547,  689,  552,  604,  521,  608,  403,  610,  612,
   96,  516,  683,  647,  624,  151,  638,  429,  516,  430,
  241,  404,  523,  643,  620,  639,  523,  359,  405,  516,
  683,  385,  432,  640,  660,  521,  652,  255,  663,  521,
  633,   97,  241,  664,  151,  665,  621,  516,  666,  241,
  633,   98,  516,  633,  667,  406,  669,  498,  407,  498,
  668,  669,  633,  151,  498,  657,  670,  498,  695,  195,
  692,  690,  151,  691,  671,  693,   99,  672,  151,   97,
  498,  516,  673,  241,  678,  679,  408,  409,  685,   98,
  667,  195,  667,  667,  100,  667,  151,  669,  410, 1327,
  692,  690,  411,  691,   71,  693,  415,  687,  667,  633,
  622,  696,  698,  667,   99,  669,  700,  416,  633,  361,
  195,  714,  718,  723,  719, 1328,  692,  690,  521,  691,
  521,  693,  100,  361,  725,  521,  422,  726,  521,  195,
  727,  361,  730,  731,  425,  426,  427,  195,  195,  732,
  498,  521,  742,  623,  195,  743,  745,  361,  498,  412,
  756,  755,  633,  363,  746,  413,  692,  690, 1162,  691,
  363,  693,  195,  363,  633,  414,  688,  363,  692,  690,
  498,  691,  689,  693,  195,  363,  195,  498,  780,  361,
  362,  363,  415,  182,  183,  253,  779,  781,  786,  359,
  792,  363,  222,  416, 1330,  692,  690,  796,  691,  195,
  693,  361,  364,  365,  417,  418,  419,  366,  367,  420,
  421,  498,  422,  797,  798,  363,  799,  423,  424,  521,
  425,  426,  427,  801,  195,  634,  428,  802,  363,  807,
  813,  402,  819,  222,  814,  634,  222,  817,  634,  828,
  403,  521,  368,  831,  839,  363,  360,  634,  521,  830,
  657,  222,  840,  841,  404,  640,  843,  880,  879,  882,
  359,  405,  886,  890,  152, 1331,  692,  690,  894,  691,
  898,  693,  363,  902,  904,  906,  891,  918,  929,  621,
  683,  950,  521,  933,  363,  702,  363,  507,  406,  868,
  683,  407,  956,  683,  634,  965,  640,  985,  688,  640,
  667,  990,  683,  634,  689,  808,  996,  667,  998,  554,
  995,  758, 1011, 1012,  640, 1002,  667, 1003, 1013,  408,
  409, 1005,  665,  152,  665,  665, 1016,  665,  688, 1023,
  667,  410, 1026, 1037,  689,  411,  667,  667,  508, 1032,
  665, 1039, 1045,  622,  667,  665, 1047,  634, 1061,  683,
 1062,  361,  362,  363,  688,  182,  183,  498,  683,  634,
  689, 1064, 1076,  869,  667,  669,  499,  667, 1121, 1124,
 1127, 1119,  509, 1139,  364,  365, 1141, 1136,  669,  366,
  367, 1143,  682, 1163, 1151,  688,  623,  669, 1441, 1170,
  510, 1172,  412,  667,  688,  667,  667,  230,  413,  870,
  689, 1178,  683,  644,  871, 1186,  688,  667,  414, 1193,
  872,  667,  689,  907,  908,  909,  910,  911,  912,  913,
  914,  385,  361,  362,  363,  415,  182,  183, 1196,  873,
 1205, 1214, 1216,  688,  669, 1226,  416, 1232,  230,  689,
 1230,  230, 1233,  669, 1238,  364,  365,  417,  418,  419,
  366,  367,  420,  421, 1240,  422,  230, 1247, 1251, 1252,
  423,  424, 1253,  425,  426,  427, 1254, 1270,  667,  428,
  222, 1273,  222,  624,  667, 1055,  429, 1274,  430, 1275,
  222, 1083, 1276, 1087,  667, 1095, 1098,  669, 1103, 1106,
 1109,  432, 1278,  359, 1279, 1283,  255, 1284,  667,  667,
  667,  667,  667,  667,  688, 1285,  861, 1332,  692,  690,
  689,  691,  667,  693, 1333,  692,  690, 1287,  691, 1288,
  693,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 1295,  667, 1296, 1297, 1298, 1300,  667,  667, 1301,  667,
  667,  667,  665,  152, 1302,  667, 1303, 1304,  488,  665,
  360, 1305, 1321, 1306, 1339, 1342, 1349,  431,  665, 1353,
  429, 1354,  430, 1355, 1356,  152,   93, 1357, 1358, 1364,
 1367,  222,  665, 1369,  640,  432, 1373,  640,  665,  665,
  255, 1375,  529, 1383,  640, 1387,  665,  640, 1388,  488,
 1389,  640,  488,  222,  152, 1390,  640, 1391, 1392,  640,
  222, 1396, 1400, 1415, 1423, 1405,  665,  488,   94,  665,
 1424, 1428, 1434,  152, 1280,  640, 1454, 1334,  692,  690,
   95,  691,  152,  693, 1458, 1335,  692,  690,  152,  691,
 1455,  693, 1483, 1532,  222,  665, 1465,  665,  665,  640,
 1464,  414, 1535,  640, 1537,   96,  152, 1534, 1536,  665,
 1538, 1542,  640,  665, 1539,  361,  362,  363, 1544,  182,
  183, 1545,  521, 1556, 1459,  692,  690, 1546,  691,  640,
  693, 1560, 1561, 1562,  250,  241, 1564,  230,  364,  365,
  417,  418,  419,  366,  367,  420,  421,  692,  690, 1565,
  691, 1566,  693,  423,  424, 1567,  640, 1570, 1571, 1572,
  402, 1573, 1574,  521, 1653, 1575,  521, 1576,  640,  403,
  665, 1577, 1578, 1579,   97,  250,  665, 1586,  250, 1587,
 1603,  521, 1601,  404,   98,  109,  665, 1605, 1606,  359,
  405, 1610, 1607,  250, 1612, 1608, 1609, 1611, 1617, 1618,
  665,  665,  665,  665,  665,  665,  688, 1619,  621,   99,
 1620, 1627,  689,  688,  665, 1637, 1642,  406, 1643,  689,
  407, 1651, 1667,  665,  665,  665,  665,  665,  665,  665,
  665,  665, 1613,  665, 1688, 1709,  241, 1071,  665,  665,
 1072,  665,  665,  665,  402, 1711, 1700,  665,  408,  409,
 1715, 1719,  431,  403, 1723,  429, 1731,  430,  241,  195,
  410, 1724, 1468, 1735,  411,  241, 1736,  404, 1707, 1747,
  432, 1706,  622,  359,  405,  255, 1460,  692,  690, 1749,
  691, 1753,  693, 1758, 1759, 1760,  488, 1763,  488, 1698,
 1774, 1777, 1778,    1,  614,   28,  488,   30,  737,  241,
  202,  406,  270,  367,  407,  180, 1467,  692,  690,  488,
  691,  519,  693,  625,  148,  623,  688,  268,  195,   80,
  455,  412,  689,  919,  688,  212,  519,  413,  192,  275,
  689,  395,  408,  409,  193,  657,  519,  414,  918,  655,
  651,  653,  692,  690,  410,  691,  180,  693,  411,  180,
  280,  361,  362,  363,  415,  182,  183,  274,  288, 1689,
  368,  694,  693,  688,  180,  416,  286,  222,  287,  689,
  688,  695,  322,  329,  364,  365,  417,  418,  419,  366,
  367,  420,  421,  646,  422,  688,  320,  488,  704,  423,
  424,  689,  425,  426,  427,   25,   28,   36,  428, 1311,
  521,  114,  521, 1073,  399,  412,  390,  389,  881,  488,
  521,  413,  250, 1271,  250,  829,  488, 1269, 1060,  224,
 1267,  414,  250,  521,  692,  690,  561,  691, 1260,  693,
 1248, 1548, 1195,  793,  488,  361,  362,  363,  415,  182,
  183, 1693,  502,  516,  966, 1261, 1645, 1524, 1705,  416,
  488, 1000, 1530,  774, 1712, 1746,  531,  532,  364,  365,
  417,  418,  419,  366,  367,  420,  421, 1710,  422,  993,
 1377, 1772, 1081,  423,  424, 1072,  425,  426,  427,  402,
 1664, 1740,  428, 1541,  642, 1714,  540,  431,  403,  522,
  429,  513,  430, 1029,  778,  116, 1038,  480, 1412,  815,
  713,  521,  404,  957,  709,  432,  971, 1188,  359,  405,
  255,  952, 1169,  250,  953,  688, 1641,  195,  265, 1752,
 1591,  689,  176,  521, 1722,  722, 1782,  928,  692,  690,
  521,  691, 1132,  693, 1291,  250,  406,  641,  195,  407,
 1341,  887,  250,    0,    0,  688,  859,  858,  860,    0,
    0,  689,    0,    0,    0,    0,    0,    0,    0,    0,
  195,    0,    0,  180,  521,    0,  195,  408,  409,  431,
    0,    0,  429,    0,  430,    0,  250,    0,    0,  410,
  688,  176,    0,  411,  180,    0,  689,  432,    0,  195,
    0,    0,  255,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  180,    0,  195,    0,
   46,    0,  180,   57,    0,    0,  195,  195,    0,    0,
    0,   47,    0,  195,   58,    0,    0,    0,   48,    0,
    0,   59,    0,    0,    0,  180,    0,    0, 1073,    0,
  412,  195,    0,    0,   60,    0,  413,    0,    0,    0,
    0,    0,    0,   49,  180,    0,  414,    0,    0,    0,
    0,    0,  688,  180,    0,    0,    0,    0,  689,  180,
  361,  362,  363,  415,  182,  183,    0,    0,  195,    0,
    0,    0,    0,    0,  416,    0,    0,  180,    0,  195,
    0,    0,  186,  364,  365,  417,  418,  419,  366,  367,
  420,  421,    0,  422,    0,   61,    0, 1085,  423,  424,
 1072,  425,  426,  427,  402,    0,    0,  428,   50,    0,
    0,   62,  431,  403,  180,  429,    0,  430,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,   63,    0,
  432,    0,    0,  359,  405,  255,    0,    0,    0,    0,
   51,  186,    0,   64,   52,    0,    0,   65,  846,    0,
   66,    0,    0,    0,    0,   53,  688,    0,   67,    0,
    0,  406,  689,    0,  407,  847,    0,    0,    0,    0,
  176,    0,    0,    0,    0,    0,    0,   68,    0, 1093,
    0,    0, 1072,    0,    0,    0,  402,    0,    0,    0,
    0,  176,  408,  409,  431,  403,    0,  429,    0,  430,
    0,  848,    0,    0,  410,    0,    0,  637,  411,  404,
  849,    0,  432,  176,    0,  359,  405,  255,  850,  176,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  851,    0,  852,
    0,    0,  176,  406,    0,    0,  407,    0,  637,    0,
    0,  637,    0,  853,    0,  854,  855,  856,    0,    0,
    0,  176,    0, 1073,    0,  412,  637,    0,    0,    0,
  176,  413,    0,    0,  408,  409,  176,    0,    0,    0,
    0,  414,    0,    0,    0,    0,  410,    0,    0,    0,
  411,    0,    0,    0,  176,  361,  362,  363,  415,  182,
  183,    0,    0,    0,    0,    0,  857,    0,    0,  416,
    0,    0,    0,    0,    0,    0,    0,  187,  364,  365,
  417,  418,  419,  366,  367,  420,  421,    0,  422,    0,
    0,  176, 1096,  423,  424, 1072,  425,  426,  427,  402,
  186,    0,  428,    0,    0, 1073,    0,  412,  403,    0,
    0,    0,    0,  413,    0,    0,    0,    0,    0,    0,
    0,  186,  404,  414,    0,    0,    0,    0,  359,  405,
    0,    0,    0,    0,    0,    0,  187,  361,  362,  363,
  415,  182,  183,  186,    0,    0,    0,    0,    0,  186,
    0,  416,    0,    0,    0,    0,  406,    0,    0,  407,
  364,  365,  417,  418,  419,  366,  367,  420,  421,    0,
  422,    0,  186,    0, 1101,  423,  424, 1072,  425,  426,
  427,  402,    0,    0,  428,    0,    0,  408,  409,  431,
  403,  186,  429,    0,  430,    0,    0,    0,    0,  410,
  186,    0,    0,  411,  404,    0,  186,  432,    0,    0,
  359,  405,  255,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  186,  692,  690,    0,  691,    0,
  693,    0,    0,    0,    0,    0,    0,    0,  406,    0,
    0,  407,    0,  859,  858,  860,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1073,    0,
  412,  186,    0,    0,    0,    0,  413,    0,    0,  408,
  409,    0,    0,    0,    0,    0,  414,    0,    0,    0,
    0,  410,    0,    0,    0,  411,  637,    0,    0,  637,
  361,  362,  363,  415,  182,  183,  637,    0,    0,  637,
    0,    0,    0,  637,  416,    0,    0,    0,  637,    0,
    0,  637,    0,  364,  365,  417,  418,  419,  366,  367,
  420,  421,    0,  422,    0,    0,    0,  637,  423,  424,
    0,  425,  426,  427,    0,  187,    0,  428,    0,    0,
 1073,    0,  412, 1431, 1432,    0,    0,    0,  413, 1436,
 1437,  637, 1439, 1440,    0,  637,  187,    0,  414,    0,
 1444, 1445, 1446, 1447,  637, 1448, 1449, 1450, 1451, 1452,
 1453,    0,  361,  362,  363,  415,  182,  183,  187,    0,
    0,  637,    0,    0,  187,    0,  416,    0,    0,    0,
    0,    0,    0,    0,    0,  364,  365,  417,  418,  419,
  366,  367,  420,  421,    0,  422,    0,  187,  637, 1104,
  423,  424, 1072,  425,  426,  427,  402,    0,    0,  428,
  637,    0,    0,    0,  431,  403,  187,  429,    0,  430,
    0,    0,    0,    0,    0,  187,    0,    0,  801,  404,
    0,  187,  432,    0,    0,  359,  405,  255,    0,    0,
    0,    0,    0,    0,  562,  846,    0,    0,  563,  187,
    0,    0,    0,  688,    0,    0,  758,    0,    0,  689,
    0,    0,  847,  406,    0,    0,  407,  564,    0,  801,
  565,    0,  801,    0,    0,    0,    0,    0,  431,    0,
  460,  429,    0,  430,    0,    0,  187,  801,    0,    0,
    0,    0,    0,    0,  408,  409,  432,    0,  848,    0,
    0,  255,    0,    0,    0,    0,  410,  849,    0,    0,
  411,  566,    0,    0,    0,  850,    0,  567,  568,  569,
    0,  570,  571,  572,    0,  573,    0,    0,    0,    0,
    0,    0,    0,    0,  851,    0,  852,    0,    0,    0,
    0,    0,    0,    0,    0,  574,    0,  575, 1375,   79,
  853,    0,  854,  855,  856,    0,   80,    0,    0,    0,
   81,   82,    0,    0,    0, 1073,    0,  412,    0,   83,
    0,    0,    0,  413,    0,    0,    0,    0,  576,    6,
    0,   84,    0,  414,    0,    0,    0,    0,    0,    0,
 1493, 1494,    0, 1495,    0,  577, 1496,  361,  362,  363,
  415,  182,  183,  857,    0,    0,    0,    0,    0,    0,
 1497,  416,    0,    0,    0,    0, 1498,  578,    0,    0,
  364,  365,  417,  418,  419,  366,  367,  420,  421,    0,
  422,    0,  187,    0, 1107,  423,  424, 1072,  425,  426,
  427,  402,    0,    0,  428,    0,   85,    0,    0,    0,
  403,    0,  579,  580,    0,    0,    0,  431,    0,    0,
  429,    0,  430,   86,  404,    0,    0,    0,    0,  581,
  359,  405,    0,    0,    0,  432, 1499,    0,   87,    0,
  255,    0,   88,    0,    0,    0,    0,    0,    0,    0,
  801,    0,    0,   89,    0,   14,    0,    0,  406,    0,
    0,  407,    0,    0,    0,  402,    0,    0,    0,    0,
 1500,    0,   90,    0,  403,    0,    0,    0,    0,    0,
   16,  930,    0,  930,  930,    0,  930,    0,  404,  408,
  409, 1501,    0,    0,  359,  405,    0,    0,  481,  930,
    0,  410,    0,    0,  930,  411,    0,  801,    0,    0,
  801,    0,    0,    0,    0,    0,    0,  801,    0,    0,
  801,    0,  406,    0,  801,  407,    0, 1502,    0,  801,
    0,    0,  801,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,    0,
    0,  360,    0,  408,  409,    0,    0,    0,    0,    0,
 1073,    0,  412,    0,    0,  410,    0,    0,  413,  411,
    0,    0,  801,    0,    0,  801,  801,    0,  414,    0,
    0,    0,    0,    0,    0,  801,    0,    0,    0,    0,
    0,    0,  361,  362,  363,  415,  182,  183,    0,    0,
    0,    0,  801,    0,    0,    0,  416,    0,    0,    0,
    0,    0,    0,    0,    0,  364,  365,  417,  418,  419,
  366,  367,  420,  421,  801,  422,  412,    0,    0,  801,
  423,  424,  413,  425,  426,  427,    0,    0,    0,  428,
    0,  801,  414,  801,  402,    0,    0,    0,    0,    0,
    0,    0,    0,  403,    0,    0,  361,  362,  363,  415,
  182,  183,    0,    0,    0,    0,    0,  404,    0,    0,
  416,    0,    0,  359,  405,    0,    0,    0,    0,  364,
  365,  417,  418,  419,  366,  367,  420,  421,    0,  422,
    0,    0,    0,    0,  423,  424,    0,  425,  426,  427,
    0,  406,    0,  428,  407,    0,    0,    0,  930,    0,
    0,    0,    0,    0,    0,    0,  667,  930,    0,  667,
    0,  667,    0,    0,    0,    0,    0,    0,    0,    0,
  360,  930,  408,  409,  667,    0,    0,  930,  930,  667,
    0,    0,    0,    0,  410,    0,    0,    0,  411,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  930,    0,    0,  930,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  431,    0,    0,  429,    0,  430,  314,    0,    0,    0,
    0,    0,    0,    0,  930,  682,  930,  930,  432,    0,
    0,    0,    0,  255,    0,  412,    0,    0,  930,    0,
    0,  413,  930,    0,    0,    0,    0,  314,    0,    0,
    0,  414,    0,    0,  314,    0,    0,    0,  314,  314,
    0,  314,    0,    0,  314,  361,  362,  363,  415,  182,
  183,    0,    0,    0,    0,    0,    0,    0,  314,  416,
    0,    0,    0,    0,  314,    0,    0,    0,  364,  365,
  417,  418,  419,  366,  367,  420,  421,    0,  422,  930,
    0,    0,    0,  423,  424,  930,  425,  426,  427,    0,
    0,    0,  428,    0,    0,  930,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  930,
  930,  930,  930,  930,  930,    0,    0,    0,    0,    0,
    0,    0,    0,  930,  314,    0,    0,    0,    0,    0,
    0,    0,  930,  930,  930,  930,  930,  930,  930,  930,
  930,    0,  930,  314,    0,    0,  667,  930,  930,    0,
  930,  930,  930,  667,    0,    0,  930,    0,  314,    0,
    0,    0,  667,    0,    0,    0,    0,    0,  314,  431,
    0,    0,  429,    0,  430,    0,  667,  314,    0,  314,
    0,    0,  667,  667,    0,    0,  314,  432,    0,    0,
  667,    0,  255,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  667,    0,    0,  667,    0,  314,    0,  402,    0,    0,
    0,    0,    0,    0,    0,    0,  403,    0,    0,    0,
    0,    0,    0,  431,    0,    0,  429,    0,  430,    0,
  404,  667,  667,    0,    0,    0,  359,  405,    0,    0,
    0,  432,    0,  667,    0,    0,  255,  667,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  451,    0,
    0,    0,    1,    0,  406,    0,    0,  407,  451,  451,
  451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
  451,  451,  451,    0,    2,  451,  451,  451,  451,    0,
  451,    0,    3,  451,  451,  408,  409,    0,    0,    4,
    0,    5,    0,    6,  667,    0,    0,  410,    7,    0,
  667,  411,    0,    0,    0,    8,    0,    0,    0,    0,
  667,    0,    0,    0,    0,    0,    0,    0,    0,    9,
    0,    0,    0,    0,  667,  667,  667,  667,  667,  667,
   10,    0,    0,    0,    0,    0,    0,    0,  667,    0,
    0,    0,    0,    0,    0,    0,    0,  667,  667,  667,
  667,  667,  667,  667,  667,  667,    0,  667,  412,    0,
    0,    0,  667,  667,  413,  667,  667,  667,    0,    0,
    0,  667,    0,    0,  414,    0,  402,    0,    0,    0,
    0,    0,  674,    0,    0,  403,    0,    0,  361,  362,
  363,  415,  182,  183,    0,    0,    0,   11,    0,  404,
    0,    0,  416,    0,   12,  359,  405,   13,    0,   14,
   15,  364,  365,  417,  418,  419,  366,  367,  420,  421,
    0,  422,    0,    0,    0,    0,  423,  424,    0,  425,
  426,  427,    0,  406,   16,  428,  407,    0,    0,    0,
  402,    0,    0,    0,    0,    0,    0,    0,    0,  403,
  431,  930,    0,  429,    0,  430,    0,    0,    0,    0,
    0,    0,    0,  404,  408,  409,    0,    0,  432,  359,
  405,    0,    0,  255,    0,    0,  410,    0,    0,    0,
  411,    0,    0,   17,    0,    0,    0,    0,    0,    0,
  770,    0,    0,    0,    0,    0,    0,  406,    0,    0,
  407,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  360,  682,  408,  409,
    0,  770,    0,  431,  770,    0,  429,  412,  430,    0,
  410,    0,    0,  413,  411,    0,    0,    0,    0,  770,
    0,  432,    0,  414,    0,    0,  255,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  361,  362,  363,
  415,  182,  183,    0,    0,    0,    0,    0,    0,    0,
    0,  416,    0,    0,    0,    0,    0,    0,    0,    0,
  364,  365,  417,  418,  419,  366,  367,  420,  421,    0,
  422,  412,    0,    0,    0,  423,  424,  413,  425,  426,
  427,    0,    0,    0,  428,    0,    0,  414,    0,    0,
  220,    0,    0,    0,  220,    0,    0,    0,    0,    0,
    0,  361,  362,  363,  415,  182,  183,    0,    0,  220,
    0,    0,    0,  220,    0,  416,  220,    0,    0,    0,
    0,    0,    0,    0,  364,  365,  417,  418,  419,  366,
  367,  420,  421,    0,  422,    0,    0,    0,    0,  423,
  424,    0,  425,  426,  427,    0,    0,  402,  428,    0,
    0,    0,    0,    0,    0,    0,  403,  220,    0,    0,
    0,    0,    0,  220,  220,  220,    0,  220,  220,  220,
  404,  220,    0,    0,    0,    0,  359,  405,    0,    0,
    0,    0,    0,  431,    0,    0,  429,    0,  430,    0,
    0,  220,    0,  220,    0,    0,    0,    0,    0,    0,
    0,  432,    0,    0,  406,    0,  255,  407,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  770,    0,  220,    0,    0,    0,    0,   79,
  402,    0,    0,    0,    0,  408,  409,    0,    0,  403,
    0,  220,    0,    0,    0,    0,    0,  410,    0,    0,
    0,  411,    0,  404,    0,    0,    0,    0,    0,  359,
  405,    0,    0,  220,    0,  431,    0,    0,  429,    0,
  430,    0,    0,    0,    0,    0,    0,    0,    0,  770,
    0,    0,  770,  432,    0,    0,    0,  406,  255,  770,
  407,    0,  770,    0,    0,    0,  770,    0,  220,  220,
    0,  770,    0,    0,  770,    0,    0,    0,  412,    0,
    0,    0,    0,    0,  413,  220,    0,    0,  408,  409,
  770,    0,    0,    0,  414,    0,    0,    0,    0,    0,
  410,    0,    0,    0,  411,    0,    0,    0,  361,  362,
  363,  415,  182,  183,  770,    0,    0,  770,  770,    0,
    0,    0,  416,    0,    0,    0,    0,  770,    0,    0,
    0,  364,  365,  417,  418,  419,  366,  367,  420,  421,
    0,  422,    0,    0,  770,    0,  423,  424,    0,  425,
  426,  427,    0,    0,    0,  428,    0,    0,    0,    0,
    0,  412,    0,    0,    0,    0,  770,  413,    0,    0,
    0,  770,    0,    0,    0,    0,    0,  414,    0,    0,
  402,    0,    0,  770,    0,  770,    0,    0, 1099,  403,
    0,  361,  362,  363,  415,  182,  183,    0,    0,    0,
    0,    0,    0,  404,    0,  416,  771,    0,    0,  359,
  405,    0,    0,    0,  364,  365,  417,  418,  419,  366,
  367,  420,  421,    0,  422,    0,    0,    0,    0,  423,
  424,    0,  425,  426,  427,  832,    0,  406,  428,  563,
  407,    0,    0,    0,    0,    0,    0,  771,    0,    0,
  771,    0,    0,    0,  833,    0,    0,    0,  564,    0,
    0,  565,  402,    0,    0,  771,    0,    0,  408,  409,
  431,  403,    0,  429,    0,  430,    0,    0,    0,    0,
  410,    0,    0,    0,  411,  404,    0,    0,  432, 1647,
    0,  359,  405,  255,    0,    0,    0,    0,    0,    0,
    0,    0,  566,    0,    0,    0,    0,    0,  567,  568,
  569,    0,  570,  571,  572,    0,  573,    0,    0,  406,
    0,    0,  407,    0,    0,    0,    0,    0,    0,    0,
    0, 1280,    0,    0,    0,    0,  574,    0,  575,    0,
    0,  412,    0,    0,    0,    0,    0,  413,    0,    0,
  408,  409,    0,    0,    0,    0,    0,  414,    0,    0,
    0,    0,  410,    0,    0,    0,  411,    0,    0,  576,
    0,  361,  362,  363,  415,  182,  183,    0,    0,    0,
    0,    0,    0,    0,    0,  416,  577,    0,    0,    0,
    0,    0,    0,    0,  364,  365,  417,  418,  419,  366,
  367,  420,  421,    0,  422,    0,    0,    0,  578,  423,
  424,    0,  425,  426,  427,    0,    0,    0,  428,    0,
    0,    0,    0,  412,    0,    0,    0,    0,    0,  413,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  414,
    0,    0,    0,  579,  580,    0,    0,    0,    0,    0,
 1293,    0,    0,  361,  362,  363,  415,  182,  183,    0,
  581,    0,    0,    0,    0,    0,    0,  416,  771,    0,
    0,    0,    0,    0,    0,    0,  364,  365,  417,  418,
  419,  366,  367,  420,  421,    0,  422,    0,    0,    0,
    0,  423,  424,    0,  425,  426,  427,  402, 1690,    0,
  428,  429,    0,  430,    0,    0,  403,    0,    0,    0,
    0,    0,    0, 1375,    0,    0,  432,    0,    0,    0,
  404,  255,    0,    0,    0,  771,  359,  405,  771,    0,
    0,    0,    0,    0,    0,  771,    0,    0,  771,    0,
    0,    0,  771,    0,    6,    0,    0,  771,    0,    0,
  771,    0,    0,    0,  406, 1493, 1494,  407, 1495,    0,
    0, 1496,    0,    0,    0,    0,  771,    0,    0,    0,
    0,    0,    0,    0,    0, 1497,    0,    0,    0,    0,
    0, 1498,    0,    0,    0,  408,  409,    0,    0,    0,
  771,    0,    0,  771,  771,  431,    0,  410,  429,    0,
  430,  411,    0,  771,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  432,    0,    0,  138,    0,  255,    0,
  771,    0,    0,    0,    0,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154, 1499,  771,  155,  156,  157,  158,  771,  159,    0,
    0,  160,  161,    0,    0,    0,    0,    0,  412,  771,
   14,  771,    0,    0,  413,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  414, 1500,    0,  930,    0,    0,
  930,    0,  930,    0,    0,   16,    0,    0,  361,  362,
  363,  415,  182,  183, 1613,  930, 1501,    0,    0,    0,
  930,    0,  416,  481,    0,    0,    0,    0,    0,    0,
    0,  364,  365,  417,  418,  419,  366,  367,  420,  421,
    0,  422,    0,    0,    0,  402,  423,  424,    0,  425,
  426,  427, 1502,    0,  403,  428,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  404,    0,
    0,    0,    0,    0,  359,  405,    0,    0,    0,    0,
    0,    0,    0,  562,    0,    0,    0,  563,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  406,    0,    0,  407,  564,    0,    0,  565,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  360,    0,  408,  409,    0,    0,    0,    0,    0,
    0,    0,  402,    0,    0,  410,    0,    0,    0,  411,
  566,  403,    0,    0,    0,    0,  567,  568,  569,    0,
  570,  571,  572,    0,  573,  404,    0,    0,    0,    0,
    0,  359,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  574,    0,  575,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  406,
    0,    0,  407,    0,    0,    0,  412,    0,    0,    0,
    0,    0,  413,    0,    0,    0,    0,  576,    0,    0,
    0,    0,  414,    0,  930,    0,    0,    0,    0,    0,
  408,  409,    0,  930,  577,    0,  361,  362,  363,  415,
  182,  183,  410,    0,    0,    0,  411,  930,    0,    0,
  416,    0,    0,  930,  930,  936,  578,    0,    0,  364,
  365,  417,  418,  419,  366,  367,  420,  421,    0,  422,
    0,  187,    0,    0,  423,  424,    0,  425,  426,  427,
    0,  930,    0,  428,  930,    0,    0,    0,    0,    0,
    0,  579,  580,    0,    0,  932,  936,  936,  936,  936,
  936,  948,  936,  412,    0,    0,    0,    0,  581,  413,
    0,    0,  930,  930,  936,  936,  936,  936,    0,  414,
    0,    0,    0,    0,  930,    0,    0,    0,  930,    0,
    0,    0,    0,  361,  362,  363,  415,  182,  183,    0,
    0,    0,    0,    0,    0,    0,  936,  416,  936,    0,
    0,    0,    0,    0,    0,    0,  364,  365,  417,  418,
  419,  366,  367,  420,  421,    0,  422,    0,    0,    0,
    0,  423,  424,    0,  425,  426,  427,    0,    0,    0,
  428,    0,    0,    0,    0,  930,    0,    0,    0,    0,
    0,  930,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  930,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  930,  930,  930,  930,  930,
  930,    0,    0,    0,    0,  816,    0,    0,    0,  930,
    0,    0,    0,    0,    0,    0,    0,    0,  930,  930,
  930,  930,  930,  930,  930,  930,  930,    0,  930,    0,
    0,    0,    0,  930,  930,    0,  930,  930,  930,    0,
    0,    0,  930,    0,    0,    0,  816,  816,  816,  816,
  816,    0,  816,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,    0,  816,  816,  816,  816,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,    0,    0,  155,  156,  157,  158,
    0,  159,    0,    0,  160,  161,    0,  936,  816,  936,
    0,    0,    0,    0,    0,    0,    0,  936,    0,    0,
    0,    0,    0,    0,    0,  936,    0,    0,    0,    0,
    0,  936,    0,    0,  936,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  828,  936,  936,    0,    0,  936,    0,    0,
    0,    0,    0,    0,  936,    0,  936,  936,    0,    0,
  936,    0,    0,    0,  936,    0,    0,  936,    0,  936,
    0,  936,    0,    0,    0,    0,  936,  936,    0,  936,
    0,    0,    0,  828,  828,  828,  828,  828,    0,  828,
    0,    0,    0,    0,    0,  936,  936,    0,  936,    0,
    0,  828,  828,  828,  828,    0,    0,    0,    0,    0,
    0,    0,  936,    0,  936,  936,  936,    0,    0,  936,
    0,    0,  936,  936,    0,    0,    0,    0,    0,    0,
  562,    0,  936,    0,  563,  828,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  936,    0,    0,  936,
    0,    0,    0,  564,    0,    0,  565,    0,    0,    0,
    0,    0,    0,    0,    0,  936,    0,  816,    0,  816,
    0,  936,    0,    0,    0,    0,  936,  816,    0,    0,
    0,    0,    0,    0,    0,  816,    0,  936,  936,    0,
  936,  816,    0,    0,  816,    0,  936,  566,    0,    0,
    0,    0,    0,  567,  568,  569,    0,  570,  571,  572,
    0,  573,  831,  816,  816,    0,    0,  816,    0,    0,
    0,    0,    0,    0,  816,    0,  816,  816,    0,    0,
  816,  574,    0,  575,  816,    0,    0,  816,    0,  816,
    0,  816,    0,    0,    0,    0,  816,  816,    0,  816,
    0,    0,    0,  831,  831,  831,  831,  831,    0,  831,
    0,    0,    0,    0,  576,  816,  816,    0,  816,    0,
    0,  831,  831,  831,  831,    0,    0,    0,    0,    0,
    0,  577,  816,    0,  816,  816,  816,    0,    0,  816,
    0,    0,  816,  816,    0,    0,    0,    0,    0,    0,
    0,    0,  816,  578,  828,  831,  828,    0,    0,    0,
    0,    0,    0,    0,  828,    0,  816,    0,    0,  816,
    0,    0,    0,    0,    0,    0,    0,    0,  828,    0,
    0,  828,    0,    0,    0,  816,    0,    0,  579,  580,
    0,  816,    0,    0,    0,    0,  816,    0,    0,  832,
  828,  828,    0,    0,  828,  581,    0,  816,  816,    0,
  816,  828,    0,  828,  828,    0,  816,  828,    0,    0,
    0,  828,    0,    0,  828,    0,  828,    0,  828,    0,
    0,    0,    0,  828,  828,    0,  828,    0,    0,    0,
  832,  832,  832,  832,  832,    0,  832,    0,    0,    0,
    0,    0,  828,  828,    0,  828,    0,    0,  832,  832,
  832,  832,    0,    0,    0,    0,    0,    0,    0,  828,
    0,  828,  828,  828,    0,    0,  828,    0,    0,  828,
  828,    0,    0,    0,    0,    0,    0,  133,    0,  828,
    0,  133,  832,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  828,    0,    0,  828,    0,    0,    0,
  133,    0,    0,  133,    0,    0,    0,    0,    0,    0,
    0,    0,  828,    0,  831,    0,  831,    0,  828,    0,
    0,    0,    0,  828,  831,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  828,  828,    0,  828,    0,    0,
    0,  831,    0,  828,  133,    0,    0,    0,    0,    0,
  133,  133,  133,    0,  133,  133,  133,    0,  133,  826,
  831,  831,    0,    0,  831,    0,    0,    0,    0,    0,
    0,  831,    0,  831,  831,    0,    0,  831,  133,    0,
  133,  831,    0,    0,  831,    0,  831,    0,  831,    0,
    0,    0,    0,  831,  831,    0,  831,    0,    0,    0,
  826,    0,  826,  826,  826,    0,    0,    0,    0,    0,
    0,  133,  831,  831,    0,  831,    0,    0,  826,  826,
  826,  826,    0,    0,    0,    0,    0,    0,  133,  831,
    0,  831,  831,  831,    0,    0,  831,    0,    0,  831,
  831,    0,    0,    0,    0,    0,    0,    0,    0,  831,
  133,  832,  826,  832,    0,    0,    0,    0,    0,    0,
    0,  832,    0,  831,    0,    0,  831,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  832,    0,
    0,    0,  831,    0,    0,  133,  133,    0,  831,    0,
    0,    0,    0,  831,    0,    0,  825,  832,  832,    0,
    0,  832,  133,    0,  831,  831,    0,  831,  832,    0,
  832,  832,    0,  831,  832,    0,    0,    0,  832,    0,
    0,  832,    0,  832,    0,  832,    0,    0,    0,    0,
  832,  832,    0,  832,    0,    0,    0,  825,    0,  825,
  825,  825,    0,    0,    0,    0,    0,    0,    0,  832,
  832,    0,  832,    0,    0,  825,  825,  825,  825,    0,
    0,    0,    0,    0,    0,    0,  832,    0,  832,  832,
  832,    0,    0,  832,    0,    0,  832,  832,    0,    0,
    0,    0,    0,    0,    0,    0,  832,    0,    0,  825,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  832,    0,    0,  832,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  832,
    0,  826,    0,  826,    0,  832,    0,    0,    0,    0,
  832,  826,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  832,  832,    0,  832,    0,    0,    0,  826,    0,
  832,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  827,  826,  826,    0,
    0,  826,    0,    0,    0,    0,    0,    0,  826,    0,
  826,  826,    0,    0,  826,    0,    0,    0,  826,    0,
    0,  826,    0,  826,    0,  826,    0,    0,    0,    0,
  826,  826,    0,  826,    0,    0,    0,  827,    0,  827,
  827,  827,    0,    0,    0,    0,    0,    0,    0,  826,
  826,    0,  826,    0,    0,  827,  827,  827,  827,    0,
    0,    0,    0,    0,    0,    0,  826,    0,  826,  826,
  826,    0,    0,  826,    0,    0,  826,  826,    0,    0,
    0,    0,    0,    0,    0,    0,  826,    0,  825,  827,
  825,    0,    0,    0,    0,    0,    0,    0,  825,    0,
  826,    0,    0,  826,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  825,    0,    0,    0,  826,
    0,    0,    0,    0,    0,  826,    0,    0,    0,    0,
  826,    0,    0,  830,  825,  825,    0,    0,  825,    0,
    0,  826,  826,    0,  826,  825,    0,  825,  825,    0,
  826,  825,    0,    0,    0,  825,    0,    0,  825,    0,
  825,    0,  825,    0,    0,    0,    0,  825,  825,    0,
  825,    0,    0,    0,  830,    0,  830,  830,  830,    0,
    0,    0,    0,    0,    0,    0,  825,  825,    0,  825,
    0,    0,  830,  830,  830,  830,    0,    0,    0,    0,
    0,    0,    0,  825,    0,  825,  825,  825,    0,    0,
  825,    0,    0,  825,  825,    0,    0,    0,    0,    0,
    0,    0,    0,  825,    0,    0,  830,    0,    0,  795,
    0,    0,    0,    0,    0,    0,    0,  825,    0,    0,
  825,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  825,    0,  827,    0,
  827,    0,  825,    0,    0,    0,    0,  825,  827,    0,
  795,    0,    0,  795,    0,    0,    0,    0,  825,  825,
    0,  825,    0,    0,    0,  827,    0,  825,  795,    0,
    0,    0,  774,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  827,  827,    0,    0,  827,    0,
    0,    0,    0,    0,    0,  827,    0,  827,  827,    0,
    0,  827,    0,    0,    0,  827,    0,    0,  827,    0,
  827,    0,  827,  774,    0,    0,  774,  827,  827,    0,
  827,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  774,    0,    0,    0,    0,  827,  827,    0,  827,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  772,  827,    0,  827,  827,  827,    0,    0,
  827,    0,    0,  827,  827,    0,    0,    0,    0,    0,
    0,    0,    0,  827,    0,  830,    0,  830,    0,    0,
    0,    0,    0,    0,    0,  830,    0,  827,    0,    0,
  827,    0,    0,  772,    0,    0,  772,    0,    0,    0,
    0,    0,  830,    0,    0,    0,  827,    0,    0,    0,
    0,  772,  827,    0,    0,    0,    0,  827,    0,    0,
    0,  830,  830,    0,    0,  830,    0,    0,  827,  827,
    0,  827,  830,    0,  830,  830,  773,  827,  830,    0,
    0,    0,  830,    0,    0,  830,    0,  830,    0,  830,
    0,    0,    0,    0,  830,  830,    0,  830,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  803,  795,    0,  830,  830,    0,  830,  773,    0,    0,
  773,  767,    0,    0,    0,    0,    0,    0,    0,    0,
  830,    0,  830,  830,  830,  773,    0,  830,    0,    0,
  830,  830,    0,    0,    0,    0,    0,    0,    0,    0,
  830,  803,    0,    0,  803,    0,    0,    0,    0,    0,
    0,    0,  767,    0,  830,  767,    0,  830,  795,  803,
    0,  795,    0,    0,  774,    0,    0,    0,  795,    0,
  767,  795,    0,  830,    0,  795,    0,    0,    0,  830,
  795,    0,    0,  795,  830,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  830,  830,    0,  830,  795,
    0,    0,    0,    0,  830,    0,    0,    0,    0,    0,
  768,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  774,    0,  795,  774,    0,  795,  795,    0,    0,
    0,  774,    0,    0,  774,    0,  795,    0,  774,    0,
    0,    0,    0,  774,  772,    0,  774,    0,    0,    0,
    0,  768,    0,  795,  768,    0,    0,    0,    0,    0,
    0,    0,  774,    0,    0,    0,    0,    0,    0,  768,
    0,    0,    0,    0,    0,  795,    0,    0,    0,    0,
  795,    0,    0,    0,    0,    0,  774,    0,    0,  774,
  774,    0,  795,    0,  795,    0,    0,    0,    0,  774,
  769,  772,    0,    0,  772,    0,  802,    0,    0,    0,
    0,  772,    0,    0,  772,    0,  774,    0,  772,    0,
    0,    0,    0,  772,    0,    0,  772,    0,  773,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  774,    0,
    0,  769,  772,  774,  769,    0,    0,  802,    0,    0,
  802,    0,    0,    0,    0,  774,    0,  774,    0,  769,
    0,    0,  803,    0,    0,  802,  772,    0,    0,  772,
  772,    0,    0,  767,    0,    0,    0,    0,    0,  772,
    0,    0,    0,  796,    0,  773,    0,    0,  773,    0,
    0,    0,    0,    0,    0,  773,  772,    0,  773,    0,
    0,    0,  773,    0,    0,    0,    0,  773,    0,    0,
  773,    0,    0,    0,    0,    0,    0,    0,  772,  803,
    0,    0,  803,  772,  796,    0,  773,  796,    0,  803,
  767,    0,  803,  767,    0,  772,  803,  772,    0,    0,
  767,  803,  796,  767,  803,    0,    0,  767,    0,    0,
  773,    0,  767,  773,  773,  767,    0,    0,    0,    0,
  803,    0,    0,  773,    0,    0,    0,    0,    0,  804,
    0,  767,  768,    0,    0,    0,    0,    0,    0,    0,
  773,    0,    0,    0,  803,    0,    0,  803,  803,  805,
    0,    0,    0,    0,    0,  767,    0,  803,  767,  767,
    0,    0,  773,    0,    0,    0,    0,  773,  767,    0,
  804,    0,    0,  804,  803,    0,    0,    0,    0,  773,
    0,  773,    0,    0,    0,  767,    0,    0,  804,  768,
  805,    0,  768,  805,    0,    0,  803,    0,    0,  768,
    0,  803,  768,    0,    0,    0,  768,  767,  805,    0,
    0,  768,  767,  803,  768,  803,    0,    0,    0,    0,
    0,    0,  769,    0,  767,    0,  767,    0,  802,    0,
  768,    0,  793,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  768,    0,    0,  768,  768,    0,
    0,    0,    0,    0,    0,    0,    0,  768,    0,    0,
    0,    0,    0,  793,    0,    0,  793,  797,    0,  769,
    0,    0,  769,    0,  768,  802,    0,    0,  802,  769,
    0,  793,  769,    0,    0,  802,  769,    0,  802,    0,
    0,  769,  802,    0,  769,  796,  768,  802,    0,    0,
  802,  768,    0,    0,    0,    0,    0,    0,  797,    0,
  769,  797,    0,  768,    0,  768,  802,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  797,    0,    0,    0,
    0,    0,    0,    0,  769,    0,    0,  769,  769,    0,
  802,    0,    0,  802,  802,    0,    0,  769,    0,    0,
    0,    0,  796,  802,  806,  796,    0,    0,    0,    0,
    0,    0,  796,    0,  769,  796,    0,    0,    0,  796,
  802,    0,    0,    0,  796,  794,    0,  796,    0,    0,
    0,  804,    0,    0,    0,    0,  769,    0,    0,    0,
    0,  769,  802,  796,    0,  806,    0,  802,  806,    0,
    0,  805,    0,  769,    0,  769,    0,    0,    0,  802,
    0,  802,    0,  806,    0,    0,  794,  796,    0,  794,
  796,  796,    0,    0,    0,    0,    0,    0,    0,    0,
  796,    0,    0,    0,  794,    0,    0,    0,  804,    0,
    0,  804,    0,    0,    0,    0,    0,  796,  804,    0,
    0,  804,    0,    0,    0,  804,    0,    0,  805,    0,
  804,  805,    0,  804,    0,    0,    0,    0,  805,  796,
    0,  805,    0,    0,  796,  805,    0,    0,    0,  804,
  805,  798,    0,  805,  793,    0,  796,    0,  796,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  805,
    0,    0,    0,  804,    0,    0,  804,  804,    0,    0,
    0,    0,    0,    0,    0,    0,  804,    0,    0,    0,
    0,    0,  798,  805,    0,  798,  805,  805,    0,  797,
    0,    0,    0,  804,    0,    0,  805,    0,    0,    0,
  798,  793,    0,    0,  793,    0,    0,    0,    0,    0,
    0,  793,    0,  805,  793,  804,    0,    0,  793,    0,
  804,    0,    0,  793,    0,    0,  793,    0,    0,    0,
    0,    0,  804,    0,  804,  805,    0,    0,    0,    0,
  805,    0,  793,    0,    0,    0,  797,    0,    0,  797,
    0,    0,  805,    0,  805,    0,  797,    0,    0,  797,
    0,    0,    0,  797,    0,    0,  793,    0,  797,  793,
  793,  797,    0,    0,    0,    0,  806,    0,    0,  793,
    0,    0,    0,    0,    0,    0,    0,  797,    0,    0,
    0,    0,    0,    0,    0,    0,  793,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  797,    0,    0,  797,  797,    0,    0,  793,    0,
    0,    0,    0,  793,  797,    0,    0,    0,    0,    0,
    0,    0,    0,  806,    0,  793,  806,  793,    0,    0,
    0,  797,    0,  806,    0,    0,  806,    0,    0,    0,
  806,    0,    0,    0,  794,  806,    0,  794,  806,    0,
    0,    0,    0,  797,  794,    0,    0,  794,  797,    0,
    0,  794,    0,    0,  806,    0,  794,    0,    0,  794,
  797,    0,  797,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  794,    0,    0,  806,    0,
    0,  806,  806,  798,    0,    0,    0,    0,    0,    0,
    0,  806,    0,    0,    0,    0,    0,    0,    0,  794,
    0,    0,  794,  794,    0,    0,    0,    0,  806,    0,
    0,    0,  794,  220,    0,    0,    0,  220,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  794,
  806,    0,  220,    0,    0,  806,  220,    0,    0,  220,
  798,    0,    0,  798,    0,    0,    0,  806,    0,  806,
  798,  794,    0,  798,    0,    0,  794,  798,    0,    0,
    0,    0,  798,    0,    0,  798,    0,    0,  794,    0,
  794,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  220,  798,    0,    0,    0,    0,  220,  220,  220,    0,
  220,  220,  220,    0,  220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  798,    0,    0,  798,  798,
    0,    0,    0,    0,  220,    0,  220,    0,  798,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  798,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  798,    0,    0,
    0,    0,  798,    0,  220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  798,    0,  798,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  220,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  220,  220,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  220,
};
static short yycheck[] = {                                      16,
   58,   49,    4,   59,    4,   50,  128,    0,   99,  292,
   57,  233,  117,  118,  332,   51,   58,   62,  485,  233,
  492,  336,  117,  118,   80,  622,  304,  624,   64,  679,
  336,  727,  306,   67,  521,   65,   84,  524,  530,  467,
   85,  263,   68,  530,  991,  998,  665,   92,  328,  135,
  108,  998,  110,  682,   83,   89,  991,  610,   88,  991,
  735,   78, 1170,  998,   90,  927,  998,  991,  354,  999,
   87,  342,    0,  109,  998,    0,    0,  674,   63,  616,
 1010, 1213,    0,  241,  129,  392,   44,  178,  299,    0,
  728,  729,  250,  122,  130,    0,  660,  131,    0,    0,
  283,   86,   45, 1033,  723,  827, 1126,  609,   44,   44,
  826,   40,  695,    0, 1051,  206,   44,   41,  165,   44,
   44,    0,   46,   41,    0,    0,   44,    0,   41,   58,
   41,   59,   42,   44,   59,   59,   41,   61,  233,   44,
   41,   59,   42,   40, 1347,  192,    0,  369,   59,    0,
 1263,   44,   61,  732,   59,  369, 1027,   59,   59,   44,
   40,  283,   41,   44,    0,   44,   40, 1052,   41,  794,
  292,   44,   59,  726,   40,   45,   41,  235,  274,   91,
   59,    0,  500,   59,   59,   40,   59,   41,   44, 1421,
   44,   58,    0,    0,   44,   41,  288,   63,    0,  290,
   44,    0,  755,  239,    0,   59,   45,  293,   59,  944,
  398,  764,  248,   40,   45,  530,  487,   40, 1232,  267,
    0,  233, 1357,   59,  530,  283,  384,  507,  508,  509,
  510,  302,  699,   59,   41,  271,   63,   44,    0,  557,
   59,  302,  258,   12,   12,  967,   63,  305, 1361,   42,
   44,   59,   59,  329,  312,  533,  314,   59,  316,    0,
   59,  319,   45,   59,  861,  862,  819,  886,  248,  356,
  392,  406,  357,    0,  369,  264,  562,  378,  288,   59,
    0,  277,  329,  301,  331,   41,  262,  260,   44,  264,
 1243,  307,  406,  338,  781,   40, 1243,   59, 1228,  346,
 1185, 1211,  350,   44,    0,  583,  340,  393, 1243,  339,
  494, 1243,  348,   41,   41,  879,  268,    0,   59, 1243,
  504,   59,  457,   40,   45,  922,  890,  891,   45,  284,
   59,  304,   59,  388,  392,  353,  197,  265,  383,   59,
  264,  265,   63,  457,  380,  430,  115,  115,  449,    0,
  346,  308,  309,  398,  354,  391,  280,  369,   41,  395,
  278, 1046,  280,   59,  400,  277,  456, 1229,  444,  461,
  288,  467,  443,    0,  802,  303,   59,    0, 1249,  303,
    0,  305,  443,  264, 1398,  461,  441, 1016,  285,  269,
   41,  319,  301,  990,  319,  319, 1528,  297, 1630,  278,
    0,  280,  278,  419,  280,  278,  493,  280,   59,  288,
    0,  387,  965,  341,  366,  288,  341,  341,  319,  332,
  400,  643,  258,  412,  278,  286,  280,   41,  329,  643,
   44,  332,   59, 1636,  288, 1455,   59, 1172, 1551,   59,
  341,  343, 1372,  665,  549,  264, 1376,  730, 1378,   44,
  258,  461, 1587,  349,  319,  305, 1009,  264,  505,   59,
  436,  379,  358,  319,  310,  743,  384,  260,  746,   59,
 1380,  307,  530,  384, 1053,  663,  378,  321,  700,    0,
 1417,  332,  760,  401,  397,  440,  461,  388, 1620, 1419,
  408,  384, 1045, 1076,  652,  452,  397,  455, 1183,  307,
  379,  723, 1127,  379,  406,  552,  379,  409,  254,  787,
  601,  304,  258, 1163,  321, 1190,  459,  263,  453,  455,
 1170, 1058,  401,  425,  442,  379,    0,  329,  401,  408,
  332,  742,  461, 1418, 1256,  408, 1668,  720,   59, 1255,
  441, 1649, 1044,  486,  343,  816,  397,  401,  643,  451,
  608,  461,  453,  839,  408, 1485,  830, 1428,  605,  606,
 1490,  461,  562,  442,  461,  550,  441,   41,  455,  442,
   44, 1433, 1136, 1705,  459,  503, 1214,  884,  503,  503,
  455,  343, 1690,  419,  502,   59,  644,  461,  442,  459,
  441,  502,  319,  459,  461,  397,    0,  502,  720, 1196,
  705,  397,  329, 1533,  455,  332,  461,  406,  730,  329,
  409,  419,  332, 1238,  341,  617,  378,  617,  663, 1216,
  459, 1356,  461,  502, 1554,  448,  425,    0,  459,  502,
  410,  643,  459,  738,  739,  461,  319,   41,  667,  441,
   44,  264,  459,  437,  406,  441,  453,  409,  502,  432,
  395, 1280,  451,  455,  461,   59,  412,   61,  341,  455,
  274,  388,  720,  425,  886, 1357,  527,  725,  319,  397,
  397, 1357,  368,  411,  732,    0,  459,  397,  714,  425,
  716,  332,  411,  429,  430,  431,   59,  734,  735,  451,
  341, 1644, 1367,    0,  752,   41,  310, 1644,  978, 1629,
 1319, 1254,  321, 1633, 1119,  388, 1121,   41, 1393, 1644,
  868,  432, 1644,  871,  441,  432,   41,  260,  996,   44,
 1644,  441,  780,  781,  260,  403,  321,  321,  455,  349,
 1008, 1416,   41,  453,   59,  455,  597,  388,  459,   41,
  339,  368,  459,  343,    0,  278,  397,   41, 1678,   41,
   41, 1357,   59,    0, 1032,  841,  741,  843,  441,  349,
  403, 1358,  884, 1357,    0,  403,   44, 1047,  262,  991,
  660,    0,    0,  308,  309,  398,  998,  991,  378,  302,
 1584,  817, 1056,    0,  998, 1206,  786,  320,  257,  273,
  441,    0,  828,    0,  779,  273,  439,  287,  412,  799,
    0,  406,    0,   59,  455,    0,  406,  450,  446,  409,
    0,  257,   59, 1241,   41,   93,  339,   44, 1468, 1247,
  425,    0,  343,   59,  869,  425,  884,  812,  813,  814,
   59,   59,   59, 1325,   59,    0, 1257,  263,  872,  839,
  870,    0,   59,  437,  443,  319,   41,  873,  322,   44,
   59,  451,   59,  467,  258,  329,    0,  378,  332,   59,
  262,   59,  336,  341,   59, 1139,  335,  341,  401,   59,
  344,  378, 1676,  277,  278,  418,  280,    0,  624,   44,
   59,  285,  418, 1368,  288,  406,  360,  313,  409,  335,
 1586,  264,    0,  387,   59, 1587,    0,  301,  324,   41,
   59, 1587,   44,  307,  425,    0, 1321, 1379, 1153,  442,
  384, 1156,  419, 1638,  388,   59, 1720,  452,   41,  665,
  443,    0,  668,  397,  435, 1030,   41,  673,  262,   44,
  451,  344,  678,  679, 1406, 1420,   59,    0, 1651, 1360,
  414,  687, 1260,  689,  690,  691,  692,  693, 1226,  695,
  461,   59,  259,  262,  700,   59,  369,  264,  320,  466,
  262,   40,   41,  270,   59,   44,  461,  441,  262,  767,
  262,  262,  462,  463,  302,  379,  461,  723,   93,  453,
   59, 1587,   61,  329, 1262,  387,  332,  461, 1585,  879,
   16, 1049, 1717, 1587,  319, 1053,   59,  401,  461, 1649,
  890,    0,  428, 1470,  408, 1492, 1603,  332,  264, 1606,
 1325,  339,   91,  417,  427,  419,  341,  264, 1731, 1325,
    0, 1243, 1024,  322, 1024,  398, 1751,    0,  264, 1243,
 1125, 1126, 1127,  437,  436,  264,  264,  336,  442,  401,
 1690,   40,   41, 1756,    0,   44, 1511,  264,  461, 1171,
   42,  397,   78,  387, 1039,   47,  288,  264,    0,  326,
   59,  360,   61,  388,    0,  461,  264,  471,   41,  301,
 1055,   44,  397,  349, 1357,  461, 1061,    0,  387,   59,
  442,  308,  309,  344, 1364,  387,   59, 1192,   61, 1194,
  258,  398,   91,  387, 1339,  387,  387, 1319, 1343,  410,
  846,  847,  848,   59, 1382,  851,  852,  853,  369,  855,
  856,  857,  858,  859,  860,  414,  441,   59,   41, 1540,
  459,   44,  461,   59,  319, 1125, 1126,  322, 1549,    0,
  455,    0,  341,  261,  329,    0,   59,  332,   61,  307,
  886,  336,  398, 1190,    0, 1423,  341,  893,  894,  344,
  896,  398,  898, 1258,  319,  901,  902,  903,  904,  905,
  906, 1628,  398,  461,  431,  360,  427, 1152,   91,  398,
  398,  438,  918, 1395,  920,  319,  341,   41, 1775,  258,
   44,  398,  341,  278,  411,  280,  462,  463,   59,  384,
   59,  398,  387,  388,   59,  274,  319,  341,  277,  278,
  398,  280,  397,   59, 1002, 1003,  285,   42,   43,  288,
   45,  319,   47, 1680,  459,  278,  353,  280,  341,  414,
 1465, 1673,  301, 1270,  466,  452,  468, 1274,  307,   93,
  418,  310,    0,  341, 1236, 1357, 1236,  341, 1703,    0,
  338,  436,  379,  260,  459,  259,  441,    0,   41,   42,
   43,  419,   45, 1375,   47, 1053,  270,  445,  453,  258,
  455, 1713,   41,   42,   43,  388,   45,    0,   47,  437,
 1735, 1736, 1550,   41,  397,  274,   44,  375,  277,  278,
 1681,  280,  357,   44,  461,  258,  285,  304,  280,  288,
  388,   59, 1671,   61,  286, 1760, 1748,    0,   59,  265,
  379,  279,  301,  471, 1587,  278,   59,  280,  307, 1774,
  284,  310,  285,  343, 1766,  288, 1374, 1375,  441,  394,
 1367,  396,  401,   91,    0,  461,   59, 1610,  301,  408,
 1076,    0, 1374,  412,  307,  258, 1715,  303,  323,  259,
  419,    0, 1088, 1089,  419, 1091, 1092, 1383,  378, 1750,
  270,  274,  330, 1099,  277,  278,   59,  280,  437, 1119,
 1455, 1121,  285,  442,    0,  288,    0, 1768, 1651,  444,
 1749,  461,  338,    0,    0,   44,  406,    0,  301,  409,
  379,  461, 1487,   59,  307,   44,  364,  310,  467, 1511,
   59,    0,  471,   42,   43,  425,   45, 1143,   47,    0,
   59,    0,  401,   44,  382, 1151,  379, 1153,  398,  408,
 1156,  385, 1158,  412,  459, 1698, 1162, 1163, 1164, 1165,
  419,  451, 1644,   59, 1170,   59,  260,  260,  401,  461,
 1644,  258,   59,   59,  261,  408,   59, 1493,  437,  302,
 1531,  486,   41,  442,  265,  280,  419,  437, 1731,  323,
   59,  286,   93, 1511,   40, 1455,  379,  444,   59,   45,
   59, 1461,  272, 1209,  437, 1587,  440,    0,  467,  442,
  304,  304,  471, 1756,  461,    0,  339,   63,  401,  289,
  307,  471,  303,  457, 1532,  408,  321,  280, 1610,  412,
  258, 1527,    0,  286,   44,  402,  419,    0,  471,   42,
   43,  280,   45, 1496,   47,    0,  274,  286,   41, 1556,
  278,   44,  280, 1560,  437,  404,   40,  285,    0,  442,
  288,   41,   42,   43,  334,   45,   59,   47,   61, 1651,
 1621, 1277,  421,  301,   59,   44,    0,  384,   41,  307,
 1286,   44,  310,   93,  467,  408,   41, 1293,  471,   44,
   59,   59,  384,  363, 1599,  418,   59,    0,   91,   41,
    0,  322,   44,   44,   59,  379,   61,   44,  329,   42,
   43,  332,   45, 1319,   47,  336, 1698,   59,  418,   61,
  443, 1703,    0,  344,   41,   42,   43,  401,   45,    0,
   47,    0,  403, 1339,  408,   59,   91, 1343,  215,  360,
  386,   41,  384, 1659,   44,  445,  223,    0,  322, 1731,
 1627,  379,   93, 1735, 1736,  384,   59,  495,  338,   59,
  430,   61,  336,  384,  435,    0, 1643,  338,  442,  419,
  344,  280,   41,  401, 1756,   44,  397,  286, 1760,  450,
  408,   59,    0,  322,  412, 1703,  360,    0,   59, 1395,
   59,  419, 1774,  414, 1671,  375,  280,  336,  419, 1661,
  329, 1661,  286,  332,    0, 1682,   59,  461,  388,  437,
  329,    0,  321,  332,  442,  344, 1610, 1735, 1736, 1727,
  441,  360,  274,   41,   59,  344,   44,   41,   42,   43,
  260,   45,  453,   47,  455, 1441, 1442,  319, 1715,  467,
  414,   59, 1760,  471,  425,  384,   59, 1724,   42,   43,
  296,   45,   41,   47,   40,   44, 1774, 1651,  462, 1465,
  319,   40, 1468,   59,   43,  258,   45,  696,  397,    0,
   59,  319, 1749,   41,  304,  414,   44,  280,  397,   58,
    0,  274,  341,  286,   63,  278,   41,  280,   41,   44,
  719,   44,  285, 1499,   41,  288,   41,   44,   41,   44,
  280,   44,  731,  258, 1698,  264,  286,  353,  301,  312,
   41,  317,  441,   44,  307,   41,  258,  310,   44,  274,
  317,  318,  441,  278,  453,  280,  455,  338,   59,  388,
  285,    0,  274,  288,  453,  461,  455, 1731,  397,   59,
    0,  337,  458,  459,  460,   41,  301,  280,   44, 1555,
  453,   41,  307,  286,   44,  310,  403, 1563,  258,  301,
  322,   41, 1756,  280,   44,  307,  494,  495,  310,  286,
  486,  487,   41,   41,  336,   44,   44,  277,  278,  312,
  280,   41,  441,  260,   44,  285,  379,  341,  288,   40,
   59,  321, 1598,  319, 1600,  437,  455,   41,  360,   59,
   44,  301,   41,  392,  393,   44,    0,  307,  401,  278,
  384,  280,  458,  459,  460,  408,  462,  463,  384,  412,
   41,  260,  384,   44,  379,  302,  419,   41,   42,   43,
  403,   45,  451,   47,  362,  481,  482,  314,   45,   41,
  486,  487,   44, 1649,  437,   41,  401,   41,   44,  442,
   44,  328,  414,  408,  462,  463,   63,  412,  462,  463,
  435,    0,  339,  302,  419,   59,  280,  461,  262,  418,
  412,  443,  286,  358,  467,  314,  288,  419,  471,  379,
  412,   44,  437,  279, 1690,   61,  280,  442,  267,  470,
  355,  264,  286,  373,  287,  437,   40,  276,  264,   40,
  339,  401,   41,  437,   40,  301,  462,   43,  408,   45,
  379,  290,  467,   44,  293,  462,  471,  296,  297,  419,
   59,  461,   58,  462,  321,  467,   44,   63,  403,  471,
  319,  408,  401,   40,  330,   40,  315,  437,   40,  408,
  329,  418,  442,  332,   40,  324,    0,  278,  327,  280,
   40,   40,  341,  349,  285,  344,   40,  288,   91,  279,
   42,   43,  358,   45,   40,   47,  443,   40,  364,  408,
  301,  471,   40,  442,   40,   40,  355,  356,  461,  418,
   40,  301,   42,   43,  461,   45,  382,   41,  367,   41,
   42,   43,  371,   45,  459,   47,  461,   40,   58,  388,
  379,   46,  321,   63,  443,   59,   44,  472,  397,  322,
  330,   44,  429,   61,   46,   41,   42,   43,  278,   45,
  280,   47,  461,  336,   40,  285,  491,  264,  288,  349,
  280,  344,   44,   46,  499,  500,  501,  357,  358,  383,
  349,  301,   44,  422,  364,  278,  278,  360,  379,  428,
  461,  264,  441,  322,  301,  434,   42,   43,   44,   45,
  329,   47,  382,  332,  453,  444,  280,  336,   42,   43,
  401,   45,  286,   47,  394,  344,  396,  408,  437,  458,
  459,  460,  461,  462,  463,  459,  398,  471,  398,  296,
  277,  360,    0,  472,   41,   42,   43,  448,   45,  419,
   47,  414,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  442,  491,  448,  400,  384,   40,  496,  497,  379,
  499,  500,  501,  350,  444,  319,  505,   40,  397,   91,
   40,  267,  264,   41,   40,  329,   44,  319,  332,  384,
  276,  401,   45,   44,  390,  414,  353,  341,  408,  412,
  344,   59,  383,   40,  290,    0,   40,  465,  437,  318,
  296,  297,   40,  321,    0,   41,   42,   43,  664,   45,
  666,   47,  441,  669,  670,  671,  321,  452,   41,  315,
  319,  453,  442,  461,  453,  461,  455,  279,  324,  329,
  329,  327,  449,  332,  388,  264,   41,  459,  280,   44,
  260,   40,  341,  397,  286,  277,   40,  267,  301,  301,
  274,  285,  387,  387,   59,  345,  276,  345,  387,  355,
  356,  278,   40,   59,   42,   43,  418,   45,  280,  419,
  290,  367,  417,  419,  286,  371,  296,  297,  330,  301,
   58,   40,  264,  379,  304,   63,  357,  441,   40,  388,
  274,  458,  459,  460,  280,  462,  463,  349,  397,  453,
  286,  461,   40,  403,  324,  319,  358,  327,   44,  386,
  368,   44,  364,  264,  481,  482,   41,  321,  332,  486,
  487,   44,  418,   44,  321,  280,  422,  341,  262,   40,
  382,   44,  428,  353,  280,  355,  356,    0,  434,  439,
  286,  329,  441,   44,  444,  503,  280,  367,  444,  266,
  450,  371,  286,  473,  474,  475,  476,  477,  478,  479,
  480,  461,  458,  459,  460,  461,  462,  463,   40,  469,
  300,  502,   40,  280,  388,  264,  472,  441,   41,  286,
  455,   44,  461,  397,  423,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   41,  491,   59,   58,   41,   41,
  496,  497,   41,  499,  500,  501,  264,  310,  428,  505,
  278,  493,  280,   40,  434,  395,   43,  310,   45,   41,
  288,  851,   41,  853,  444,  855,  856,  441,  858,  859,
  860,   58,   40,  296,   40,  353,   63,   40,  458,  459,
  460,  461,  462,  463,  280,   40,  262,   41,   42,   43,
  286,   45,  472,   47,   41,   42,   43,   40,   45,   40,
   47,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   40,  491,   40,   40,   40,   40,  496,  497,   40,  499,
  500,  501,  260,  279,   40,  505,   40,   40,    0,  267,
  353,   40,   44,  328,  436,  309,   41,   40,  276,  389,
   43,  389,   45,  389,  344,  301,  260,  274,  332,  423,
  391,  379,  290,  392,  319,   58,  447,  322,  296,  297,
   63,  271,  288,  408,  329,  387,  304,  332,  387,   41,
  387,  336,   44,  401,  330,  387,  341,  387,  387,  344,
  408,  278,   41,   41,   40,  379,  324,   59,  302,  327,
   41,   41,   41,  349,  418,  360,  386,   41,   42,   43,
  314,   45,  358,   47,   41,   41,   42,   43,  364,   45,
  437,   47,  397,  338,  442,  353,  436,  355,  356,  384,
  309,  444,  339,  388,  302,  339,  382,  443,  443,  367,
  339,  386,  397,  371,  302,  458,  459,  460,   41,  462,
  463,   41,    0,  372,   41,   42,   43,  353,   45,  414,
   47,  372,   41,   41,    0,  278,   41,  280,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   42,   43,   41,
   45,   41,   47,  496,  497,   41,  441,   41,   41,   41,
  267,   41,   41,   41,   59,   41,   44,   41,  453,  276,
  428,   41,   41,   41,  408,   41,  434,  280,   44,   44,
   40,   59,   59,  290,  418,  341,  444,   59,   40,  296,
  297,  341,   59,   59,  309,   59,   59,   59,   59,   41,
  458,  459,  460,  461,  462,  463,  280,  353,  315,  443,
  345,  321,  286,  280,  472,   41,  369,  324,   40,  286,
  327,  341,  384,  481,  482,  483,  484,  485,  486,  487,
  488,  489,  452,  491,   59,  384,  379,  260,  496,  497,
  263,  499,  500,  501,  267,  384,  461,  505,  355,  356,
   44,   41,   40,  276,   41,   43,  411,   45,  401,    0,
  367,   44,   44,  436,  371,  408,  305,  290,  443,   41,
   58,  302,  379,  296,  297,   63,   41,   42,   43,  344,
   45,   40,   47,   59,  294,  305,  278,  464,  280,   44,
  308,   44,   41,    0,  338,  384,  288,  384,  264,  442,
   40,  324,  264,  278,  327,    0,   41,   42,   43,  301,
   45,  390,   47,  321,  459,  422,  280,  264,   59,  412,
  471,  428,  286,  452,  280,   40,  310,  434,  459,  271,
  286,  264,  355,  356,  459,  344,  437,  444,  436,  344,
  344,  344,   42,   43,  367,   45,   41,   47,  371,   44,
  461,  458,  459,  460,  461,  462,  463,  271,  309,   59,
   41,   40,   40,  280,   59,  472,  309,   59,  309,  286,
   41,   41,   59,  305,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   44,  491,  280,   59,  379,   41,  496,
  497,  286,  499,  500,  501,    0,    0,    0,  505, 1122,
  278,   12,  280,  426,  250,  428,  243,  242,  652,  401,
  288,  434,  278, 1058,  280,  612,  408, 1056,  831,   82,
 1053,  444,  288,  301,   42,   43,  333,   45, 1048,   47,
 1037, 1407,  981,  557,  288,  458,  459,  460,  461,  462,
  463,   59,  297,  302,  725, 1049, 1596, 1380, 1666,  472,
  442,  762, 1382,  535, 1670, 1707,  314,  314,  481,  482,
  483,  484,  485,  486,  487,  488,  489, 1669,  491,  752,
 1207, 1759,  260,  496,  497,  263,  499,  500,  501,  267,
 1615, 1704,  505, 1395,  369, 1671,  319,   40,  276,  307,
   43,  300,   45,  801,  537,   13,  809,  275, 1245,  596,
  473,  379,  290,  714,  469,   58,  730,  970,  296,  297,
   63,  700,  944,  379,  701,  280, 1587,  258,  120, 1724,
 1483,  286,    0,  401, 1682,  485, 1777,   41,   42,   43,
  408,   45,  887,   47, 1090,  401,  324,  368,  279,  327,
 1158,  659,  408,   -1,   -1,  280,   60,   61,   62,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  301,   -1,   -1,  258,  442,   -1,  307,  355,  356,   40,
   -1,   -1,   43,   -1,   45,   -1,  442,   -1,   -1,  367,
  280,   59,   -1,  371,  279,   -1,  286,   58,   -1,  330,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  301,   -1,  349,   -1,
  295,   -1,  307,  295,   -1,   -1,  357,  358,   -1,   -1,
   -1,  306,   -1,  364,  306,   -1,   -1,   -1,  313,   -1,
   -1,  313,   -1,   -1,   -1,  330,   -1,   -1,  426,   -1,
  428,  382,   -1,   -1,  326,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  349,   -1,  444,   -1,   -1,   -1,
   -1,   -1,  280,  358,   -1,   -1,   -1,   -1,  286,  364,
  458,  459,  460,  461,  462,  463,   -1,   -1,  419,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,  382,   -1,  430,
   -1,   -1,    0,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,  387,   -1,  260,  496,  497,
  263,  499,  500,  501,  267,   -1,   -1,  505,  403,   -1,
   -1,  403,   40,  276,  419,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  420,   -1,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
  435,   59,   -1,  435,  439,   -1,   -1,  439,  272,   -1,
  442,   -1,   -1,   -1,   -1,  450,  280,   -1,  450,   -1,
   -1,  324,  286,   -1,  327,  289,   -1,   -1,   -1,   -1,
  258,   -1,   -1,   -1,   -1,   -1,   -1,  469,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  279,  355,  356,   40,  276,   -1,   43,   -1,   45,
   -1,  325,   -1,   -1,  367,   -1,   -1,    0,  371,  290,
  334,   -1,   58,  301,   -1,  296,  297,   63,  342,  307,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  361,   -1,  363,
   -1,   -1,  330,  324,   -1,   -1,  327,   -1,   41,   -1,
   -1,   44,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
   -1,  349,   -1,  426,   -1,  428,   59,   -1,   -1,   -1,
  358,  434,   -1,   -1,  355,  356,  364,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  382,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,  430,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,  419,  260,  496,  497,  263,  499,  500,  501,  267,
  258,   -1,  505,   -1,   -1,  426,   -1,  428,  276,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  279,  290,  444,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   59,  458,  459,  460,
  461,  462,  463,  301,   -1,   -1,   -1,   -1,   -1,  307,
   -1,  472,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  330,   -1,  260,  496,  497,  263,  499,  500,
  501,  267,   -1,   -1,  505,   -1,   -1,  355,  356,   40,
  276,  349,   43,   -1,   45,   -1,   -1,   -1,   -1,  367,
  358,   -1,   -1,  371,  290,   -1,  364,   58,   -1,   -1,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,  327,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,   -1,
  428,  419,   -1,   -1,   -1,   -1,  434,   -1,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,  319,   -1,   -1,  322,
  458,  459,  460,  461,  462,  463,  329,   -1,   -1,  332,
   -1,   -1,   -1,  336,  472,   -1,   -1,   -1,  341,   -1,
   -1,  344,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,  360,  496,  497,
   -1,  499,  500,  501,   -1,  258,   -1,  505,   -1,   -1,
  426,   -1,  428, 1278, 1279,   -1,   -1,   -1,  434, 1284,
 1285,  384, 1287, 1288,   -1,  388,  279,   -1,  444,   -1,
 1295, 1296, 1297, 1298,  397, 1300, 1301, 1302, 1303, 1304,
 1305,   -1,  458,  459,  460,  461,  462,  463,  301,   -1,
   -1,  414,   -1,   -1,  307,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,  330,  441,  260,
  496,  497,  263,  499,  500,  501,  267,   -1,   -1,  505,
  453,   -1,   -1,   -1,   40,  276,  349,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,    0,  290,
   -1,  364,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  272,   -1,   -1,  277,  382,
   -1,   -1,   -1,  280,   -1,   -1,  285,   -1,   -1,  286,
   -1,   -1,  289,  324,   -1,   -1,  327,  296,   -1,   41,
  299,   -1,   44,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,  419,   59,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   58,   -1,  325,   -1,
   -1,   63,   -1,   -1,   -1,   -1,  367,  334,   -1,   -1,
  371,  340,   -1,   -1,   -1,  342,   -1,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,  271,  306,
  377,   -1,  379,  380,  381,   -1,  313,   -1,   -1,   -1,
  317,  318,   -1,   -1,   -1,  426,   -1,  428,   -1,  326,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,  407,  302,
   -1,  338,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,
  313,  314,   -1,  316,   -1,  424,  319,  458,  459,  460,
  461,  462,  463,  430,   -1,   -1,   -1,   -1,   -1,   -1,
  333,  472,   -1,   -1,   -1,   -1,  339,  446,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  461,   -1,  260,  496,  497,  263,  499,  500,
  501,  267,   -1,   -1,  505,   -1,  403,   -1,   -1,   -1,
  276,   -1,  481,  482,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,  420,  290,   -1,   -1,   -1,   -1,  498,
  296,  297,   -1,   -1,   -1,   58,  399,   -1,  435,   -1,
   63,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  450,   -1,  418,   -1,   -1,  324,   -1,
   -1,  327,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  433,   -1,  469,   -1,  276,   -1,   -1,   -1,   -1,   -1,
  443,   40,   -1,   42,   43,   -1,   45,   -1,  290,  355,
  356,  454,   -1,   -1,  296,  297,   -1,   -1,  461,   58,
   -1,  367,   -1,   -1,   63,  371,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  324,   -1,  336,  327,   -1,  490,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
  426,   -1,  428,   -1,   -1,  367,   -1,   -1,  434,  371,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  436,  491,  428,   -1,   -1,  441,
  496,  497,  434,  499,  500,  501,   -1,   -1,   -1,  505,
   -1,  453,  444,  455,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
  472,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,  324,   -1,  505,  327,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  276,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,  290,  355,  356,   58,   -1,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  353,  418,  355,  356,   58,   -1,
   -1,   -1,   -1,   63,   -1,  428,   -1,   -1,  367,   -1,
   -1,  434,  371,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,  444,   -1,   -1,  309,   -1,   -1,   -1,  313,  314,
   -1,  316,   -1,   -1,  319,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,  472,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,  428,
   -1,   -1,   -1,  496,  497,  434,  499,  500,  501,   -1,
   -1,   -1,  505,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,  418,   -1,   -1,  260,  496,  497,   -1,
  499,  500,  501,  267,   -1,   -1,  505,   -1,  433,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,  443,   40,
   -1,   -1,   43,   -1,   45,   -1,  290,  452,   -1,  454,
   -1,   -1,  296,  297,   -1,   -1,  461,   58,   -1,   -1,
  304,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,  327,   -1,  490,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
  290,  355,  356,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   58,   -1,  367,   -1,   -1,   63,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,   -1,
   -1,   -1,  261,   -1,  324,   -1,   -1,  327,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
  483,  484,  485,   -1,  283,  488,  489,  490,  491,   -1,
  493,   -1,  291,  496,  497,  355,  356,   -1,   -1,  298,
   -1,  300,   -1,  302,  428,   -1,   -1,  367,  307,   -1,
  434,  371,   -1,   -1,   -1,  314,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,  428,   -1,
   -1,   -1,  496,  497,  434,  499,  500,  501,   -1,   -1,
   -1,  505,   -1,   -1,  444,   -1,  267,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  276,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,  406,   -1,  290,
   -1,   -1,  472,   -1,  413,  296,  297,  416,   -1,  418,
  419,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,   -1,  324,  443,  505,  327,   -1,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   40,   41,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  355,  356,   -1,   -1,   58,  296,
  297,   -1,   -1,   63,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  492,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  353,  418,  355,  356,
   -1,   41,   -1,   40,   44,   -1,   43,  428,   45,   -1,
  367,   -1,   -1,  434,  371,   -1,   -1,   -1,   -1,   59,
   -1,   58,   -1,  444,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,  428,   -1,   -1,   -1,  496,  497,  434,  499,  500,
  501,   -1,   -1,   -1,  505,   -1,   -1,  444,   -1,   -1,
  273,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,  292,
   -1,   -1,   -1,  296,   -1,  472,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,  267,  505,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
  290,  354,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,  324,   -1,   63,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  407,   -1,   -1,   -1,   -1,  412,
  267,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,  276,
   -1,  424,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,  446,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,
   -1,   -1,  322,   58,   -1,   -1,   -1,  324,   63,  329,
  327,   -1,  332,   -1,   -1,   -1,  336,   -1,  481,  482,
   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,  428,   -1,
   -1,   -1,   -1,   -1,  434,  498,   -1,   -1,  355,  356,
  360,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,  414,   -1,  496,  497,   -1,  499,
  500,  501,   -1,   -1,   -1,  505,   -1,   -1,   -1,   -1,
   -1,  428,   -1,   -1,   -1,   -1,  436,  434,   -1,   -1,
   -1,  441,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
  267,   -1,   -1,  453,   -1,  455,   -1,   -1,  455,  276,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,  290,   -1,  472,    0,   -1,   -1,  296,
  297,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,  273,   -1,  324,  505,  277,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,
   -1,  299,  267,   -1,   -1,   59,   -1,   -1,  355,  356,
   40,  276,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,  290,   -1,   -1,   58,   59,
   -1,  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,
  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,  324,
   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  418,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,
   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  407,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  446,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,  505,   -1,
   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,
  455,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
  498,   -1,   -1,   -1,   -1,   -1,   -1,  472,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  267,   40,   -1,
  505,   43,   -1,   45,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   58,   -1,   -1,   -1,
  290,   63,   -1,   -1,   -1,  319,  296,  297,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
   -1,   -1,  336,   -1,  302,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,   -1,  324,  313,  314,  327,  316,   -1,
   -1,  319,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   40,   -1,  367,   43,   -1,
   45,  371,   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,  461,   -1,   63,   -1,
  414,   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
  485,  399,  436,  488,  489,  490,  491,  441,  493,   -1,
   -1,  496,  497,   -1,   -1,   -1,   -1,   -1,  428,  453,
  418,  455,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  444,  433,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,  443,   -1,   -1,  458,  459,
  460,  461,  462,  463,  452,   58,  454,   -1,   -1,   -1,
   63,   -1,  472,  461,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,  267,  496,  497,   -1,  499,
  500,  501,  490,   -1,  276,  505,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,   -1,   -1,  327,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,   -1,  367,   -1,   -1,   -1,  371,
  340,  276,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,   -1,  327,   -1,   -1,   -1,  428,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,  407,   -1,   -1,
   -1,   -1,  444,   -1,  267,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,  276,  424,   -1,  458,  459,  460,  461,
  462,  463,  367,   -1,   -1,   -1,  371,  290,   -1,   -1,
  472,   -1,   -1,  296,  297,    0,  446,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  461,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,  324,   -1,  505,  327,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,  428,   -1,   -1,   -1,   -1,  498,  434,
   -1,   -1,  355,  356,   59,   60,   61,   62,   -1,  444,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,  472,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,   -1,
  505,   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,
   -1,   -1,  505,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,  488,  489,  490,  491,
   -1,  493,   -1,   -1,  496,  497,   -1,  262,   93,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,  308,  309,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  273,   -1,  397,   -1,  277,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  430,   -1,  262,   -1,  264,
   -1,  436,   -1,   -1,   -1,   -1,  441,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,  452,  453,   -1,
  455,  286,   -1,   -1,  289,   -1,  461,  340,   -1,   -1,
   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,    0,  308,  309,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,  374,   -1,  376,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,  407,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  424,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,  446,  262,   93,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,  430,   -1,   -1,  481,  482,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,    0,
  308,  309,   -1,   -1,  312,  498,   -1,  452,  453,   -1,
  455,  319,   -1,  321,  322,   -1,  461,  325,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  397,
   -1,  277,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  430,   -1,  262,   -1,  264,   -1,  436,   -1,
   -1,   -1,   -1,  441,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  452,  453,   -1,  455,   -1,   -1,
   -1,  289,   -1,  461,  340,   -1,   -1,   -1,   -1,   -1,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,    0,
  308,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  321,  322,   -1,   -1,  325,  374,   -1,
  376,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  407,  360,  361,   -1,  363,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  424,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
  446,  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,
   -1,   -1,  430,   -1,   -1,  481,  482,   -1,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,    0,  308,  309,   -1,
   -1,  312,  498,   -1,  452,  453,   -1,  455,  319,   -1,
  321,  322,   -1,  461,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
   -1,  262,   -1,  264,   -1,  436,   -1,   -1,   -1,   -1,
  441,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  452,  453,   -1,  455,   -1,   -1,   -1,  289,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,  308,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,
  321,  322,   -1,   -1,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,  262,   93,
  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,
  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,  430,
   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,
  441,   -1,   -1,    0,  308,  309,   -1,   -1,  312,   -1,
   -1,  452,  453,   -1,  455,  319,   -1,  321,  322,   -1,
  461,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   93,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  430,   -1,  262,   -1,
  264,   -1,  436,   -1,   -1,   -1,   -1,  441,  272,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,  452,  453,
   -1,  455,   -1,   -1,   -1,  289,   -1,  461,   59,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,
   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   41,   -1,   -1,   44,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,  262,   -1,  264,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,  411,   -1,   -1,
  414,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  289,   -1,   -1,   -1,  430,   -1,   -1,   -1,
   -1,   59,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,
   -1,  308,  309,   -1,   -1,  312,   -1,   -1,  452,  453,
   -1,  455,  319,   -1,  321,  322,    0,  461,  325,   -1,
   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,
   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,  262,   -1,  360,  361,   -1,  363,   41,   -1,   -1,
   44,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,  379,  380,  381,   59,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,  411,   44,   -1,  414,  319,   59,
   -1,  322,   -1,   -1,  262,   -1,   -1,   -1,  329,   -1,
   59,  332,   -1,  430,   -1,  336,   -1,   -1,   -1,  436,
  341,   -1,   -1,  344,  441,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,  455,  360,
   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  384,  322,   -1,  387,  388,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,
   -1,   -1,   -1,  341,  262,   -1,  344,   -1,   -1,   -1,
   -1,   41,   -1,  414,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,
  441,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,  397,
    0,  319,   -1,   -1,  322,   -1,    0,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  414,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,
   -1,   41,  360,  441,   44,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,   59,
   -1,   -1,  262,   -1,   -1,   59,  384,   -1,   -1,  387,
  388,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,    0,   -1,  319,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  329,  414,   -1,  332,   -1,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  436,  319,
   -1,   -1,  322,  441,   41,   -1,  360,   44,   -1,  329,
  319,   -1,  332,  322,   -1,  453,  336,  455,   -1,   -1,
  329,  341,   59,  332,  344,   -1,   -1,  336,   -1,   -1,
  384,   -1,  341,  387,  388,  344,   -1,   -1,   -1,   -1,
  360,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,    0,
   -1,  360,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,    0,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  397,  387,  388,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,  397,   -1,
   41,   -1,   -1,   44,  414,   -1,   -1,   -1,   -1,  453,
   -1,  455,   -1,   -1,   -1,  414,   -1,   -1,   59,  319,
   41,   -1,  322,   44,   -1,   -1,  436,   -1,   -1,  329,
   -1,  441,  332,   -1,   -1,   -1,  336,  436,   59,   -1,
   -1,  341,  441,  453,  344,  455,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  453,   -1,  455,   -1,  262,   -1,
  360,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,    0,   -1,  319,
   -1,   -1,  322,   -1,  414,  319,   -1,   -1,  322,  329,
   -1,   59,  332,   -1,   -1,  329,  336,   -1,  332,   -1,
   -1,  341,  336,   -1,  344,  262,  436,  341,   -1,   -1,
  344,  441,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
  360,   44,   -1,  453,   -1,  455,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,  397,   -1,   -1,
   -1,   -1,  319,  397,    0,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  414,  332,   -1,   -1,   -1,  336,
  414,   -1,   -1,   -1,  341,    0,   -1,  344,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,
   -1,  441,  436,  360,   -1,   41,   -1,  441,   44,   -1,
   -1,  262,   -1,  453,   -1,  455,   -1,   -1,   -1,  453,
   -1,  455,   -1,   59,   -1,   -1,   41,  384,   -1,   44,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   59,   -1,   -1,   -1,  319,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  414,  329,   -1,
   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,  319,   -1,
  341,  322,   -1,  344,   -1,   -1,   -1,   -1,  329,  436,
   -1,  332,   -1,   -1,  441,  336,   -1,   -1,   -1,  360,
  341,    0,   -1,  344,  262,   -1,  453,   -1,  455,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,
   -1,   -1,   41,  384,   -1,   44,  387,  388,   -1,  262,
   -1,   -1,   -1,  414,   -1,   -1,  397,   -1,   -1,   -1,
   59,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,  414,  332,  436,   -1,   -1,  336,   -1,
  441,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  453,   -1,  455,  436,   -1,   -1,   -1,   -1,
  441,   -1,  360,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,  453,   -1,  455,   -1,  329,   -1,   -1,  332,
   -1,   -1,   -1,  336,   -1,   -1,  384,   -1,  341,  387,
  388,  344,   -1,   -1,   -1,   -1,  262,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  414,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  436,   -1,
   -1,   -1,   -1,  441,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,  453,  322,  455,   -1,   -1,
   -1,  414,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,
  336,   -1,   -1,   -1,  319,  341,   -1,  322,  344,   -1,
   -1,   -1,   -1,  436,  329,   -1,   -1,  332,  441,   -1,
   -1,  336,   -1,   -1,  360,   -1,  341,   -1,   -1,  344,
  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,  384,   -1,
   -1,  387,  388,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,  414,   -1,
   -1,   -1,  397,  273,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,
  436,   -1,  292,   -1,   -1,  441,  296,   -1,   -1,  299,
  319,   -1,   -1,  322,   -1,   -1,   -1,  453,   -1,  455,
  329,  436,   -1,  332,   -1,   -1,  441,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,  360,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  498,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 505
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING","NULLS","LAST","ROWS_AFFECTED",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : VIEW replace_view_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : excp_statement",
"proc_statement : raise_statement",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"excp_statement : EXCEPTION symbol_exception_name ';'",
"excp_statement : EXCEPTION symbol_exception_name value ';'",
"raise_statement : EXCEPTION ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction nulls_placement",
"order_item : ordinal collate_clause order_direction nulls_placement",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : NULLS FIRST",
"nulls_placement : NULLS LAST",
"nulls_placement :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : proc_internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"proc_internal_info : GDSCODE",
"proc_internal_info : SQLCODE",
"proc_internal_info : ROWS_AFFECTED",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = FB_NEW_RPT(*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = FB_NEW_RPT(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = FB_NEW(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = FB_NEW_RPT(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
{ yyval = yyvsp[0]; }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
{ yyval = yyvsp[0];}
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = yyvsp[0]; }
break;
case 75:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
{ yyval = (NOD) NULL; }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
{ yyval = yyvsp[-1]; }
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 115:
{ yyval = NULL; }
break;
case 116:
{ yyval = make_list (yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 119:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 120:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 125:
{ yyval = (NOD) 0;}
break;
case 126:
{ yyval = yyvsp[-1]; }
break;
case 127:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 131:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 132:
{ yyval = NULL; }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = yyvsp[0]; }
break;
case 135:
{ yyval = (NOD) NULL; }
break;
case 136:
{ yyval = (NOD) NULL; }
break;
case 139:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 144:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 146:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 150:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 151:
{yyval = (NOD) NULL;}
break;
case 154:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 155:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 157:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 160:
{yyval = (NOD) NULL;}
break;
case 163:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 167:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 168:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 172:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 175:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 176:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 177:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 179:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 180:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 181:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 184:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 185:
{ g_file  = make_file ();}
break;
case 190:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 191:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 198:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = yyvsp[0]; }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 204:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 207:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 213:
{ yyval = NULL; }
break;
case 214:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 217:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 218:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 219:
{ yyval = yyvsp[-1]; }
break;
case 220:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = yyvsp[0]; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = (NOD) NULL; }
break;
case 232:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 235:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 237:
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 238:
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 239:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 240:
{ yyval = yyvsp[0]; }
break;
case 241:
{ yyval = NULL ;}
break;
case 246:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 247:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 250:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 251:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 256:
{ yyval = NULL;}
break;
case 257:
{ yyval = yyvsp[0];}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_list (yyvsp[-1]); }
break;
case 268:
{ yyval = NULL; }
break;
case 269:
{ yyval = yyvsp[0]; }
break;
case 270:
{ yyval = NULL; }
break;
case 272:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 273:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 274:
{ yyval = make_list (yyvsp[0]); }
break;
case 275:
{ yyval = NULL; }
break;
case 277:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 278:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 279:
{ yyval = NULL; }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = yyvsp[0]; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 285:
{ yyval = yyvsp[-1]; }
break;
case 286:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 288:
{ yyval = make_node (nod_block, e_blk_count, NULL, NULL);}
break;
case 290:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 300:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 304:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 305:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 306:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 307:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-1], NULL); }
break;
case 308:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-2], yyvsp[-1]); }
break;
case 309:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, NULL, NULL); }
break;
case 310:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 311:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 312:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 313:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 314:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 315:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 316:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 317:
{ yyval = make_list (yyvsp[0]); }
break;
case 318:
{ yyval = make_list (yyvsp[-1]); }
break;
case 319:
{ yyval = NULL; }
break;
case 320:
{ yyval = make_list (yyvsp[0]); }
break;
case 321:
{ yyval = make_list (yyvsp[-1]); }
break;
case 322:
{ yyval = NULL; }
break;
case 325:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 328:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 329:
{ yyval = NULL; }
break;
case 331:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 334:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 337:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 338:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 339:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 340:
{ yyval = make_list (yyvsp[0]); }
break;
case 341:
{ yyval = make_list (yyvsp[-1]); }
break;
case 342:
{ yyval = NULL; }
break;
case 346:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 347:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 349:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 351:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 353:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 354:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 355:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 356:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 357:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 358:
{ yyval = make_list (yyvsp[0]); }
break;
case 360:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 363:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 364:
{ yyval = yyvsp[-1]; }
break;
case 365:
{ beginning = lex_position(); }
break;
case 366:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 367:
{ beginning = last_token; }
break;
case 368:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 369:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 370:
{ yyval = 0; }
break;
case 371:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 372:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 373:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 375:
{ yyval = NULL; }
break;
case 376:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 377:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 378:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 390:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 391:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 392:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 393:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 394:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 395:
{ yyval = NULL; }
break;
case 396:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 397:
{ yyval = yyvsp[0]; }
break;
case 398:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 399:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 400:
{ yyval = yyvsp[0]; }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = yyvsp[0]; }
break;
case 403:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 404:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 405:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 409:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 410:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 411:
{ yyval = yyvsp[0]; }
break;
case 412:
{ yyval = yyvsp[0]; }
break;
case 413:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 414:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 415:
{ yyval = yyvsp[0]; }
break;
case 416:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 418:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 419:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 421:
{ yyval = yyvsp[0]; }
break;
case 422:
{ yyval = yyvsp[0]; }
break;
case 423:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 424:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 425:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 426:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = NULL; }
break;
case 453:
{ yyval = NULL; }
break;
case 454:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 455:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 456:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 457:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 458:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 459:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 460:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 461:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 463:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 464:
{ yyval = yyvsp[0]; }
break;
case 465:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 466:
{ yyval = yyvsp[0]; }
break;
case 467:
{ yyval = yyvsp[0]; }
break;
case 469:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 470:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 472:
{ yyval = NULL; }
break;
case 474:
{ yyval = NULL; }
break;
case 475:
{ yyval = yyvsp[0]; }
break;
case 476:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 483:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 484:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 485:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 486:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 487:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 492:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 493:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 495:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 496:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 497:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 503:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 506:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 507:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 511:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 512:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 513:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 514:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 515:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 516:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 517:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 518:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 519:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 520:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 523:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 527:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 536:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 537:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 538:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 539:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 540:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 541:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 544:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 545:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 546:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 547:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 548:
{ yyval = yyvsp[-1]; }
break;
case 549:
{ yyval = 0; }
break;
case 553:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 554:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 555:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 556:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 557:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 560:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 561:
{ yyval = (NOD) NULL; }
break;
case 563:
{ yyval = (NOD) NULL; }
break;
case 564:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 566:
{ yyval = (NOD) NULL; }
break;
case 568:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 573:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 574:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 575:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 576:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 577:
{ yyval = yyvsp[0];}
break;
case 579:
{ yyval = yyvsp[0];}
break;
case 580:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 581:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 582:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 583:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 584:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 585:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 586:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 587:
{ yyval = 0; }
break;
case 588:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 589:
{ yyval = (NOD) NOD_SHARED; }
break;
case 590:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 591:
{ yyval = (NOD) 0; }
break;
case 592:
{ yyval = (NOD) NOD_READ; }
break;
case 593:
{ yyval = (NOD) NOD_WRITE; }
break;
case 595:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 597:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 598:
{ yyval = 0; }
break;
case 600:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 601:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 602:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 603:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 606:
{ yyval = make_list (yyvsp[0]); }
break;
case 607:
{ yyval = 0; }
break;
case 609:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 610:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 611:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 612:
{ yyval = 0; }
break;
case 613:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 614:
{ yyval = 0; }
break;
case 615:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 616:
{ yyval = 0; }
break;
case 617:
{ yyval = 0; }
break;
case 618:
{ yyval = yyvsp[0]; }
break;
case 619:
{ yyval = 0; }
break;
case 620:
{ yyval = yyvsp[0]; }
break;
case 621:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 622:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 623:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 624:
{ yyval = 0; }
break;
case 625:
{ yyval = make_list (yyvsp[0]); }
break;
case 626:
{ yyval = 0; }
break;
case 628:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 630:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 631:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 632:
{ yyval = make_list (yyvsp[0]); }
break;
case 634:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 637:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 638:
{ yyval = yyvsp[-1]; }
break;
case 639:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 640:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 641:
{ yyval = make_list (yyvsp[-1]); }
break;
case 642:
{ yyval = NULL; }
break;
case 644:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 648:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 649:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 650:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 651:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 652:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 653:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 654:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 655:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 656:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 657:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 658:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 659:
{ yyval = yyvsp[-1]; }
break;
case 660:
{ yyval = yyvsp[0]; }
break;
case 661:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 662:
{ yyval = yyvsp[-1]; }
break;
case 663:
{ yyval = yyvsp[0]; }
break;
case 664:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 665:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 666:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 667:
{ yyval = 0; }
break;
case 668:
{ yyval = make_list (yyvsp[0]); }
break;
case 669:
{ yyval = 0; }
break;
case 671:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 676:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 680:
{ yyval = yyvsp[0]; }
break;
case 681:
{ yyval = 0; }
break;
case 682:
{ yyval = yyvsp[0]; }
break;
case 683:
{ yyval = 0; }
break;
case 684:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 685:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 686:
{ yyval = 0;}
break;
case 687:
{ yyval = yyvsp[0]; }
break;
case 688:
{ yyval = 0; }
break;
case 689:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 690:
{ yyval = 0; }
break;
case 691:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 692:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 693:
{ yyval = 0; }
break;
case 694:
{ yyval = 0; }
break;
case 696:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 702:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 703:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 705:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 707:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 713:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 714:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 717:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 718:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 720:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 721:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 724:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 725:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 726:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 727:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 731:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 732:
{ yyval = yyvsp[0]; }
break;
case 734:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 737:
{ yyval = NULL; }
break;
case 738:
{ yyval = make_list (yyvsp[-1]); }
break;
case 740:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = NULL; }
break;
case 743:
{ yyval = make_list (yyvsp[-1]); }
break;
case 745:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 747:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 749:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 751:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 753:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 754:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 755:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 766:
{ yyval = yyvsp[-1]; }
break;
case 767:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 768:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 769:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 771:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 772:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 773:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 774:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 775:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 779:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 780:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 783:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 784:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 786:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 787:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 788:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 789:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 790:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 793:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 794:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 795:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 796:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 797:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 798:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 799:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 800:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 801:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 802:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 803:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 804:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 805:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 806:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 807:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 808:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 809:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 810:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 812:
{ yyval = make_list (yyvsp[-1]); }
break;
case 813:
{ yyval = yyvsp[-1]; }
break;
case 814:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 815:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 825:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 826:
{ yyval = yyvsp[0]; }
break;
case 827:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 828:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 829:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 830:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 831:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 832:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 833:
{ yyval = yyvsp[-1]; }
break;
case 834:
{ yyval = yyvsp[-1]; }
break;
case 837:
{ yyval = yyvsp[0]; }
break;
case 838:
{ yyval = yyvsp[0]; }
break;
case 839:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 840:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 841:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 842:
{ yyval = yyvsp[0]; }
break;
case 843:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 844:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 845:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 846:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 848:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 850:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 851:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 852:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 853:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 854:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 855:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 857:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 858:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 859:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 860:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 861:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 862:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 863:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 864:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 865:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_connection_id, CONSTANT_SLONG)); }
break;
case 866:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 867:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_gdscode, CONSTANT_SLONG)); }
break;
case 868:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 869:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 870:
{ yyval = yyvsp[0]; }
break;
case 871:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 873:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 874:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 875:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 876:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 877:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 879:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 880:
{ yyval = yyvsp[0];}
break;
case 885:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 886:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 887:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 888:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 889:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 890:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 891:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 892:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 893:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 894:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 895:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 896:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 897:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 898:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 899:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 900:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 901:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 902:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 903:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 906:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 907:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 910:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 911:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 912:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 913:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 914:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 915:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 916:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 917:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 921:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 922:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 923:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 924:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 925:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 926:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 927:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 928:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 931:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
