#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 *
 */

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

#define YYSTYPE		NOD
#ifdef DEBUG
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/

static FLD	field;
static FIL	file;
static NOD	field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;


#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#ifdef DEBUG
#undef DEBUG
#endif
#define DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define LIMIT 488
#define SUBSTRING 489
#define CONNECTION_ID 490
#define TRANSACTION_ID 491
#define LARGEINT 492
#define KW_INT64 493
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    9,    9,
    9,    9,    9,   19,   19,   18,   18,   18,   29,   29,
   22,   30,   30,   30,   30,   30,   21,   21,   27,   27,
   23,   12,   12,   12,   12,   12,   12,   12,   33,   24,
   24,   24,   24,   34,   34,   34,   20,   20,   35,   35,
   35,   25,   25,   39,   26,   26,   41,   41,    6,   42,
   42,   44,   49,   49,   49,   46,   46,   46,   53,   53,
   54,   47,   47,   56,   56,   56,   56,   43,    5,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   61,   61,   64,   64,   64,   72,   80,   80,   80,   81,
   81,   82,   82,   83,   83,   87,   87,   71,   90,   90,
   92,   92,   93,   93,   96,   96,   97,   98,   98,   99,
  100,   69,   73,   70,   84,   84,  103,  104,  104,  106,
  106,  107,  107,  107,  107,  107,  105,  105,  108,  108,
  109,  109,  109,  109,  111,  111,  111,  111,  110,  110,
  115,  115,  114,   88,  116,  116,  117,  120,  121,  121,
  122,  118,  119,  119,  123,  123,  124,  124,  125,  125,
  125,   86,   86,   86,   66,  126,  126,  126,  127,  127,
  128,  128,  129,  129,  129,  135,   76,   76,  131,  131,
   94,   94,   89,  140,  141,   55,  132,  132,   95,   95,
   95,   95,   95,  133,  133,  146,  146,  147,  149,  149,
  149,  149,  149,  130,  148,  148,  152,  152,  152,  152,
  154,  155,  156,  151,  150,  150,  150,  150,  150,  157,
  158,  159,  159,  159,  159,   65,  164,  160,  160,  161,
  161,  165,  165,  166,  162,  162,  167,  167,  168,  169,
  169,  163,  163,  163,  171,  171,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
  174,  175,  176,  177,  177,  178,  184,  180,  180,  180,
  181,  181,  181,  182,  182,  182,  182,  179,  183,  183,
  172,  172,  188,  189,  189,  190,  190,  190,  190,   11,
  192,  192,  192,  193,  193,  193,  193,  193,  193,   68,
  195,  198,  198,  198,  199,  202,  207,  207,  208,  208,
  209,  209,  137,  197,   77,   79,  196,  196,   67,  212,
  212,  212,  213,  216,  216,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
  214,  214,  215,    2,  219,  219,  219,  219,  219,  219,
  219,  225,  225,  227,  227,  227,  227,  227,  227,  227,
  220,  220,  228,  228,  228,  228,  228,  228,  228,  224,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  230,
  230,  232,  232,  231,  229,  229,  229,  226,  226,  222,
  223,  223,  234,  234,  234,  234,  235,  235,  221,  236,
  236,  237,  237,    8,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,   91,   91,  134,  134,  241,
  241,  244,  244,  246,  246,   50,   50,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  251,  251,  252,  252,
  242,  242,  242,  242,  253,  253,   58,   58,   58,   52,
   52,  248,  248,  248,  245,  245,  245,  257,  257,  257,
  256,  256,  255,  255,  255,  249,  249,  260,  258,  258,
  258,  259,  259,  250,  250,  250,  250,  261,  261,   15,
   15,   15,  263,  263,  263,    4,   13,  265,  265,  266,
  266,  267,  267,  262,  268,  268,  269,  269,  270,  270,
  270,  270,  271,  271,  272,  272,  273,  273,  275,  275,
  275,  276,  276,  276,  277,  277,  277,  274,  279,  279,
  279,  280,  280,  278,  278,  281,  283,  283,  282,  282,
  264,   14,  284,  284,  284,  285,  285,  288,  288,  289,
  289,   62,   62,   62,  286,  286,  290,  290,  287,  200,
  200,  201,  201,  294,  294,  295,  295,  295,  291,  298,
  298,  299,  299,  300,  300,  301,  301,  302,  302,  186,
  186,  304,  304,  210,  210,   28,  211,  211,  211,  211,
  211,  211,  211,  211,  204,  204,  305,  305,  306,  306,
  306,  205,  205,  203,  203,  292,  292,  308,  308,  308,
  206,  206,  309,  310,  310,  310,  310,  310,  311,  311,
  312,  312,  313,  313,  314,  314,  314,  315,  315,   10,
   10,  316,  316,    7,    7,  317,  318,  319,   16,   16,
  320,  321,  322,  322,  173,  296,  296,    3,    3,  323,
  323,  323,  325,  325,   58,  324,  324,  326,  326,   31,
   31,   75,   74,   74,  139,  139,  139,  136,  101,  101,
  101,  101,  328,  328,  328,  328,  328,  328,  328,  328,
  328,  328,  328,  329,  329,  329,  329,  329,  329,  329,
  329,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  340,  340,  330,
  330,  331,  331,  331,  331,  332,  332,  336,  336,  337,
  337,  337,  337,  335,  338,  333,  333,  341,  341,  339,
  343,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,  145,  145,  145,  344,  347,  347,
  142,  142,  348,  348,  348,  348,  348,  346,  346,  346,
  346,  346,  342,  342,  342,  342,  342,  342,  342,  342,
  194,  349,  143,  143,   48,   48,   17,   17,  218,  350,
   51,  113,  247,  247,   85,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  307,  307,  351,  351,  351,  351,  351,  351,  351,  351,
  293,  293,  144,   45,  254,  112,  138,  327,  153,  187,
  240,   60,   57,  191,  102,   63,  297,   32,   40,  303,
  239,   36,   38,  185,   37,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    7,    8,
    6,    7,    5,    1,    2,    1,    2,    1,    1,    3,
    1,    1,    1,    1,    2,    2,    3,    0,    3,    0,
    1,    7,    8,    6,    7,    6,    7,    4,    3,    1,
    3,    3,    3,    2,    2,    2,    1,    3,    1,    2,
    2,    1,    3,    1,    1,    3,    1,    2,    2,    2,
    3,    8,    1,    1,    5,    0,    1,    3,    1,    3,
    2,    1,    3,    2,    3,    4,    2,    9,    2,    3,
    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    0,    0,    1,    1,    2,    1,    1,    1,    2,
    6,    1,    1,    3,    0,    1,    1,    0,    1,    1,
    2,    3,    4,    2,    2,    3,    0,    1,    1,    2,
    1,    1,    1,    4,    3,    3,    3,    3,    1,    1,
    6,    3,    1,    3,    1,    3,    2,    1,    0,    2,
    3,    1,    0,    1,    1,    2,    3,    4,    0,    1,
    2,    0,    1,    1,    5,    3,    2,    0,    1,    3,
    1,    1,    6,    3,    2,    6,    2,    1,    2,    2,
    2,    0,    1,    1,    2,    0,    2,    0,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    2,    2,    4,
    1,    1,    2,    2,    2,    0,    1,    1,    1,    1,
    2,    3,    7,    6,    1,    1,    2,    2,    0,    3,
    3,    1,    2,    2,    2,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    5,    1,
    1,    2,    3,    4,    1,    2,    2,    2,    3,    1,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    6,    4,    7,    8,    6,    4,    2,    1,    3,    0,
    2,    4,    0,    1,    1,    3,    3,    6,    3,    0,
    1,    2,    4,    1,    3,    2,    2,    2,    1,    4,
    1,    3,    0,    1,    1,    1,    3,    3,    3,    7,
    1,    1,    3,    4,    8,    2,    1,    3,    1,    1,
    6,    3,    0,    0,    0,    0,    3,    0,    9,    1,
    1,    0,    2,    1,    1,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
    2,    0,    4,    2,    3,    3,    2,    2,    3,    3,
    2,    1,    2,    4,    3,    2,    2,    2,    2,    3,
    1,    3,    3,    3,    2,    2,    4,    4,    5,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    1,    1,    1,    0,    2,    2,    0,
    1,    2,    2,    2,    2,    2,    1,    3,    7,    1,
    0,    1,    0,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    2,    2,    1,    1,    1,    1,    4,
    5,    1,    3,    1,    3,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    4,    6,    5,    3,    0,    2,    2,    0,    3,
    0,    4,    1,    5,    4,    1,    4,    1,    2,    2,
    1,    1,    1,    2,    2,    2,    2,    1,    0,    3,
    5,    1,    1,    2,    3,    1,    2,    3,    0,    1,
    1,    1,    5,    5,    6,    3,    2,    1,    0,    2,
    0,    1,    0,    3,    1,    0,    1,    2,    1,    1,
    1,    1,    2,    2,    1,    2,    3,    1,    1,    3,
    3,    1,    2,    3,    1,    2,    0,    2,    1,    1,
    0,    1,    1,    1,    3,    2,    3,    0,    1,    3,
    4,    3,    1,    3,    4,    3,    0,    1,    3,    3,
    3,    1,    1,    0,    3,    0,    2,    0,    9,    1,
    1,    1,    1,    1,    3,    1,    2,    3,    2,    1,
    3,    1,    1,    6,    3,    3,    2,    3,    0,    1,
    3,    1,    1,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    0,    3,    0,    1,    3,    1,    1,
    3,    2,    0,    2,    0,    2,    0,    3,    5,    0,
    2,    0,    4,    1,    2,    1,    1,    0,    1,    3,
    2,    1,    1,    2,    1,    4,    2,    1,    3,    8,
    5,    1,    3,    1,    1,    4,    4,    4,    1,    1,
    5,    5,    1,    3,    3,    1,    1,    7,    7,    5,
    3,    0,    1,    1,    1,    2,    0,    1,    1,    1,
    0,    3,    1,    3,    1,    3,    3,    1,    1,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    1,    1,    5,
    6,    3,    4,    5,    6,    3,    4,    3,    4,    3,
    4,    4,    5,    4,    4,    3,    4,    3,    3,    8,
    8,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
    1,    3,    1,    1,    1,    1,    1,    4,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    1,    1,    1,    1,    2,    1,    2,    1,    1,
    1,    1,    1,    2,    1,    4,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    6,    4,    6,    6,
    4,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,  510,  511,  512,    0,  563,  654,  655,
  659,  660,  420,    0,    0,    0,    0,    0,    0,  364,
  518,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,   89,    0,  809,    0,   18,  807,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  434,    0,    0,   34,   31,   33,
    0,   32,    0,  859,    0,    0,    0,    0,   29,   62,
   64,    0,    0,    0,    0,    0,    0,    0,    0,  517,
  841,  580,    0,  581,    0,    0,    0,  861,  604,    0,
    0,    2,    0,    0,    0,    0,  407,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  408,  409,    0,  390,  852,    0,  856,
    0,  371,  858,    0,  368,    0,  606,  862,    0,  367,
    0,  516,  805,    0,  137,   97,    0,    0,   98,    0,
  685,  203,    0,  688,    0,  855,   96,  132,    0,   92,
    0,   99,  811,    0,   93,    0,   94,  865,    0,   95,
  133,  100,  572,  573,    0,  810,  808,    0,  853,   70,
    0,    0,  851,  442,  435,    0,  441,  436,  437,  444,
  438,  439,  440,  445,    0,   27,    0,   36,  680,   35,
    0,    0,    0,    0,    0,  848,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  771,
    0,  843,    0,  773,    0,    0,    0,  769,  785,  784,
  783,    0,    0,    0,    0,  775,  776,  777,  786,  787,
  803,  804,    0,    0,  583,    0,    0,  801,    0,  789,
    0,    0,  770,  667,  774,  757,  756,    0,    0,  584,
    0,    0,  758,  753,  754,  755,  788,    0,    0,    0,
    0,    0,    0,    0,  535,  524,    0,  527,  529,  530,
  531,  532,  538,  539,    0,  860,  605,    0,    0,  564,
    0,  562,    0,    0,    0,    0,  421,    0,    0,  333,
    0,  206,    0,  372,  365,  418,  419,    0,    0,    0,
    0,    0,    0,  381,    0,  340,  341,    0,  522,  520,
  806,    0,    0,    0,    0,    0,    0,    0,  140,  119,
    0,    0,   90,    0,  108,  107,    0,    0,    0,    0,
    0,    0,  844,   71,    0,    0,    0,  656,  657,  443,
    0,    0,  315,  316,  310,    0,  314,  781,    0,  683,
    0,    0,   24,    0,    0,  863,    0,   67,   65,   63,
   30,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,  790,    0,    0,    0,    0,    0,    0,
  791,  792,    0,    0,    0,    0,    0,  864,  287,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  857,  587,    0,    0,  561,    0,  536,    0,  533,
    0,  534,  559,    0,  554,    0,    0,  528,    0,  663,
    0,  498,    0,    0,    0,  568,  565,    0,  172,    0,
    0,  116,  426,  159,  160,    0,  424,    0,    0,    0,
    0,  427,    0,  422,  335,    0,  376,  378,  377,    0,
  379,    0,  373,  204,    0,    0,  252,    0,    0,    0,
    0,  385,  386,    0,  411,    0,    0,    0,    0,    0,
    0,    0,  345,  344,  430,    0,    0,  136,    0,    0,
  145,    0,  144,    0,  151,  134,    0,  149,  152,  153,
  141,    0,    0,  464,  502,  469,    0,  503,    0,    0,
  470,    0,    0,    0,  493,  506,  463,  488,  465,  466,
  467,  468,  448,  335,  446,  447,  449,    0,    0,  458,
  459,  460,  461,  462,    0,    0,    0,    0,  687,  686,
    0,  111,    0,    0,  187,    0,    0,  333,    0,  206,
    0,    0,   79,    0,    0,  675,    0,    0,    0,    0,
    0,    0,    0,    0,  689,  693,  694,  695,  696,  697,
  698,  699,  700,  701,  702,  782,    0,    0,    0,  682,
   25,    0,    0,   41,   68,    0,    0,   23,    0,    0,
  651,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  833,  834,  835,  836,  837,  838,  839,  840,    0,    0,
  767,  768,  832,    0,    0,  847,  763,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  592,  593,    0,
    0,  585,  588,  772,  815,  514,    0,  813,  513,    0,
  537,    0,  545,  541,  540,    0,    0,    0,  556,  544,
    0,    0,  661,  662,    0,    0,    0,    0,    0,  575,
    0,    0,  117,    0,    0,    0,    0,    0,    0,  375,
    0,    0,  336,  380,  456,    0,  254,    0,  248,  250,
  333,  849,  225,    0,    0,  335,    0,    0,  195,  333,
    0,    0,    0,    0,  230,  224,  227,  228,  229,  384,
  416,  415,  383,  382,    0,    0,    0,    0,    0,    0,
  343,    0,  335,    0,  142,  146,    0,  150,    0,    0,
  489,  490,  507,    0,  504,    0,    0,  496,  494,  495,
    0,    0,    0,    0,  457,    0,    0,    0,    0,  497,
  333,    0,  186,    0,  189,  191,  192,    0,    0,    0,
    0,    0,  206,   74,    0,   81,   73,  845,  477,  478,
    0,    0,    0,  692,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  312,  318,  319,  317,  684,    0,
    0,    0,    0,    0,    0,    0,   50,   57,   59,    0,
    0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  206,    0,  816,    0,    0,  828,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  831,  778,
    0,    0,    0,    0,    0,    0,  607,    0,    0,    0,
    0,    0,  515,  814,  546,  555,  550,  549,    0,  560,
  665,  664,  201,  570,  571,  569,    0,  168,  162,  169,
    0,  165,    0,    0,  164,    0,  175,  156,  155,  812,
  158,  157,  428,    0,  210,  207,  209,  211,  212,  213,
  374,  253,    0,  197,  335,  199,  336,  194,  200,    0,
    0,  231,    0,  387,  388,  335,  333,  336,    0,    0,
    0,  361,    0,  183,  184,  143,    0,    0,    0,    0,
    0,    0,  505,    0,    0,  335,  336,    0,  452,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,    0,    0,    0,    0,  322,    0,   78,    0,    0,
    0,    0,   82,   80,    0,    0,  850,  658,    0,    0,
  703,    0,    0,    0,  729,  728,    0,    0,    0,  736,
  746,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  691,    0,   61,   54,   55,   60,   56,    0,    0,
   19,    0,    0,    0,   39,    0,    0,    0,  669,  652,
    0,  668,    0,    0,    0,    0,  822,  821,    0,    0,
  818,  817,    0,  826,  825,  824,  823,  820,  819,    0,
    0,    0,  595,    0,  602,    0,  600,  596,    0,  613,
  609,  611,    0,    0,    0,    0,  552,  553,  557,    0,
    0,    0,    0,    0,    0,  176,    0,    0,    0,    0,
  257,    0,    0,    0,  232,    0,  412,  413,  389,    0,
    0,    0,    0,    0,    0,  335,  432,  336,  846,  154,
    0,    0,  472,    0,  471,  508,    0,  500,    0,    0,
    0,  450,    0,  480,    0,    0,  482,  485,  487,    0,
    0,  106,    0,  190,  335,    0,    0,  334,    0,   91,
    0,  104,    0,   87,    0,    0,    0,    0,    0,  744,
  745,    0,    0,    0,    0,  802,  793,  796,  794,    0,
    0,  795,  747,    0,    0,    0,    0,    0,    0,    0,
  737,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,   58,   51,   52,
   20,  673,  674,    0,  671,  678,  679,  676,    0,  650,
    0,    0,  205,  827,  829,  830,    0,    0,  598,    0,
    0,    0,  617,  620,    0,    0,    0,    0,  170,  166,
    0,    0,  181,  177,  336,    0,    0,  336,  258,    0,
    0,    0,  216,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  429,  474,    0,  475,    0,  121,    0,
    0,    0,  125,  127,  128,  129,  453,  455,  451,  484,
  336,    0,    0,    0,    0,  320,    0,  323,  335,   83,
    0,    0,   85,    0,    0,    0,    0,    0,    0,  749,
    0,  748,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,  653,    0,  601,    0,    0,    0,    0,  626,
    0,  579,    0,  161,  178,  131,    0,  262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  261,  265,  260,    0,    0,  270,  271,  272,  273,
  276,  278,  247,    0,  193,  217,    0,    0,    0,  222,
  218,  221,    0,  336,  359,  360,  356,  355,  358,  357,
    0,  473,  501,  130,  118,  126,  246,  113,  336,    0,
    0,  337,  324,    0,    0,   86,   75,    0,  715,  723,
    0,  797,  800,  798,  799,  716,  724,  719,  727,    0,
    0,  717,  725,  718,  726,  712,  720,  713,  721,  714,
  722,  670,    0,    0,  621,  618,    0,  634,  636,    0,
  631,    0,  171,    0,    0,    0,    0,  280,    0,    0,
    0,  279,    0,  268,  274,    0,  277,  263,    0,  266,
    0,  301,  267,  196,  219,  223,    0,    0,  234,  363,
  339,    0,    0,    0,  329,  330,    0,    0,   72,   88,
    0,  751,  628,    0,  635,    0,  259,  269,    0,    0,
    0,    0,  275,    0,  295,    0,  294,  309,    0,    0,
    0,    0,  304,  264,  302,    0,    0,  233,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  642,
    0,    0,    0,    0,    0,    0,  282,    0,    0,    0,
  286,    0,  308,  854,  307,  306,    0,    0,  220,    0,
    0,    0,  238,    0,  237,  332,    0,    0,    0,  105,
    0,  629,  644,  633,    0,    0,  645,    0,  641,    0,
    0,    0,    0,    0,    0,    0,    0,  296,  297,  303,
  305,    0,    0,  242,  241,  240,    0,  325,    0,  640,
    0,  647,  289,    0,    0,  281,    0,    0,    0,  298,
  245,  243,  244,    0,  750,    0,    0,    0,  299,  283,
    0,    0,    0,  646,  292,  284,  649,
};
static short yydgoto[] = {                                      17,
   18,   19,   20,   21,   22,   23, 1328,   25,   26, 1329,
   28,   29,   30, 1330,   32, 1331,  576,   95,  382,  825,
 1031,   96,  603,  826,   97,  387,  608,  119,   98,   99,
  218,  655,  109,  827,  828,  159,  189,  829,  100,  101,
  389,   72,  200,  364,  269,  571,  971,  270,  786,  543,
  452,  765,  572,  573,  574,  973,  201, 1192,   64,  149,
   65,  195, 1566, 1140,  180,  185,  187,  190,  177,  166,
  169,  182,  192,  379,  219,  715,  476,  583,  911,  357,
  563,  959, 1132,  509,  668,  936,  461,  462,  491,  351,
  544,  947, 1251,  686,  906, 1252, 1253, 1254, 1255, 1256,
  584,  178,  167,  347,  516,  348,  349,  517,  518,  519,
  520, 1110,  901,  464,  465,  891,  889,  466,  895,  890,
 1080, 1219,  896,  897, 1085,  359,  774,  775,  776,  777,
  717,  703, 1231,  545,  719,  171,  480,  647,  272,  485,
 1050,  373,  273,  274,  275, 1232, 1233,  494, 1351, 1478,
  725,  726,  713,  727,  728,  729, 1479, 1480, 1545,  329,
  489, 1089, 1332,  155,  486,  487, 1090, 1091, 1333, 1334,
 1335, 1431, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1495,
 1533, 1466, 1535,  276,  419, 1066,  978, 1432, 1472, 1473,
 1505,  375,  376,  277,  964, 1138, 1266,  965,  966,  113,
  278, 1371,  368,  872, 1076, 1312, 1443, 1444, 1445, 1446,
  870,  338,  505,  743, 1107,  506,  741,  183,   50,  333,
  160,  126,  316,  146,  323,  152,  324,  334,  733,  335,
  502,  928,  147,  317,  473,  507, 1108,   85,  157,  204,
  546,  547,  705,  948,  706,  949,  950,  550,  551,  552,
  553,  554,  941,  790,  555,  556,  557,  758,  558,  454,
  755,   34,   35,   36,   52,  162,  340,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  674,  444,  879, 1079,
  445,  446,  679,   37,  125,  312,   38,  455,  456,  690,
  429, 1217,  114,  279,  280,  281,  433,  656,  657,  658,
  659,  864,  282, 1067, 1212, 1213,  283, 1310, 1490, 1412,
 1491, 1492, 1493, 1529, 1567, 1041,   39,   40,  369,   41,
   42,  451,  834, 1039, 1194, 1198,  174,  585,  586,  587,
  588,  589,  590,  591,  592,  593,  594,  595, 1160,  988,
  990, 1161,  417,  284,  285,  286,  645,  287, 1162,  197,
  639,
};
static short yysindex[] = {                                   3834,
 1385, -211, 1975,   79,  756,   49, 2945,    6, 2832,  -71,
  282, 2889, -211,  -32,  306,  183,    0,  614,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  352,    0,    0,    0,
    0,    0,    0, 5920,  221,  246,  259,  183,  434,    0,
    0,  407,  883,  448,  221,  470,  259,  405,  183,  434,
    0,  477,  491,    0,  -48,    0,  503,    0,    0,  661,
  535,    0,  183,  541,  221,  774,  535,  246,  259,  405,
  183,  434,  477,  491,    0,  259,  616,    0,    0,    0,
 1077,    0, 1077,    0,  763,  771,  116, 1096,    0,    0,
    0,  699,  183,  699,  845,  781,  806,   70, 1071,    0,
    0,    0, 5527,    0,  470,  880, 1294,    0,    0,  847,
  834,    0, 1038, -128, 1018,  -73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -127,    0,    0,  883,    0,
  403,    0,    0, 1310,    0, 1086,    0,    0,  419,    0,
  988,    0,    0,  898,    0,    0, 1252,    0,    0, 1173,
    0,    0, 1376,    0,  883,    0,    0,    0, 1310,    0,
  -69,    0,    0, 1116,    0, 1137,    0,    0, 1077,    0,
    0,    0,    0,    0, 1127,    0,    0, 1029,    0,    0,
 1170, 1042,    0,    0,    0, 1029,    0,    0,    0,    0,
    0,    0,    0,    0,  389,    0,  448,    0,    0,    0,
  766, 1110, -212,  491, -141,    0, 1185, 1077, 1199, 1214,
  766, 1152, -212, 1190, 1196, 1522, 1556, 1558, 1129,    0,
 1562,    0, 1563,    0, 1578, 1596, 1598,    0,    0,    0,
    0,    0, 1601, 1146, 1197,    0,    0,    0,    0,    0,
    0,    0, 6379, 6379,    0, 5848, 1203,    0, 1638,    0,
 1320, 1603,    0,    0,    0,    0,    0, 1367, 1658,    0,
 -116, 1660,    0,    0,    0,    0,    0, 1270,  246, 1360,
 1264,  551,  183, 1286,    0,    0, 1294,    0,    0,    0,
    0,    0,    0,    0,  448,    0,    0,  868, 1313,    0,
 1292,    0, -108, 1382,  742,  -73,    0, 1454,  150,    0,
  699,    0, -127,    0,    0,    0,    0,  699, 1336, -150,
 1283, -122, 1700,    0, 6281,    0,    0, 1122,    0,    0,
    0, 1719, 1719,  883, 1401,  883, 1524, 1252,    0,    0,
 6765,   22,    0, 1336,    0,    0, 1494,  487, 1745,  183,
 1527,  246,    0,    0, 1747,    5, 4270,    0,    0,    0,
 1476, 1460,    0,    0,    0, 1749,    0,    0, 1377,    0,
  183, 1362,    0,  259, 1339,    0,  137,    0,    0,    0,
    0,  183,  439,  183,    0, 1475,  259, 1753,  766, 1399,
  473, 5882,  398,    0,  470, 6379,  579,  582,  607, 2846,
    0,    0,  765,  765,  -32, 1235, 1766,    0,    0, 5991,
 1349, 6379, 6379, 6379, 6379, 6379, 6379,   46, 1361, 5882,
 1351,    0,    0,   33,   43,    0,  472,    0, -168,    0,
 -168,    0,    0, 1771,    0,   60, 1394,    0, 1773,    0,
   39,    0, 1557, 1557, 1792,    0,    0, 1457,    0,  136,
 1493,    0,    0,    0,    0,  883,    0, 1719, 1719, 1719,
 1719,    0, 1806,    0,    0, 1575,    0,    0,    0, 1555,
    0, 6765,    0,    0, 6765, 1523,    0, 1310, 1604, 1408,
 5596,    0,    0,  386,    0, 1408, 1033, 1086,    0, 1464,
 1424, 1409,    0,    0,    0,  397, 1473,    0, 1413,  405,
    0,  883,    0, 1602,    0,    0, 1524,    0,    0,    0,
    0,  151, 1427,    0,    0,    0, 1435,    0, 1486, 1847,
    0, 1540, 1851,  -82,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1802,  131,    0,
    0,    0,    0,    0,   65, 1858, 1859, 1851,    0,    0,
 1637,    0,  883,  883,    0, -150,  419,    0, 1519,    0,
 1492, 1866,    0, 6617,  106,    0, 1525, 1529, 1876, 4519,
 1881, 4367, 5023,  369,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1537, 1460,  448,    0,
    0, 1340, 1487,    0,    0, 1461, -212,    0, 1610, 1892,
    0, 1610, 1340, 1616, 1619,  259, 6379, 6379, 1679, 6379,
 1903, 6379, 1901, 1404, 6379, 6379, 6379, 6379, 6379, 6379,
    0,    0,    0,    0,    0,    0,    0,    0, 1627, 6379,
    0,    0,    0, 1320, 1572,    0,    0, 1669,  765,  765,
 1128, 1128, 1010,   46, 1911, 1910,  583,    0,    0, 4519,
 1631,    0,    0,    0,    0,    0,  578,    0,    0, -106,
    0, 1515,    0,    0,    0,  183,  750,  183,    0,    0,
 5882,  448,    0,    0, 1349,  -48,  -48,  868,  448,    0,
  883,  883,    0, -121, 1413, 1413, 1506,  405,  742,    0,
 1927, 1171,    0,    0,    0, 1692,    0,  699,    0,    0,
    0,    0,    0, 1694, 1932,    0, 1555, 1688,    0,    0,
 1630, 1633, 1077, 1698,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  405,  699, 6682, 1593, 1594, 1595,
    0,  405,    0,  983,    0,    0, 1564,    0,   73, 1574,
    0,    0,    0,  405,    0, 1847,   85,    0,    0,    0,
 1689,   85, 1576,   85,    0, 1953,  405,  405,  405,    0,
    0, 1640,    0, 1581,    0,    0,    0, 1122, 1584,  183,
 1622,   37,    0,    0, 1954,    0,    0,    0,    0,    0,
    5, 1546, 1313,    0, 1313, 4890,   55, 6379, 6379, 4616,
 1970,  987, 4759, 6379, 4856, 1106, 4996, 5093, 6060, 5147,
 5233, 5376, 4519, 4519,    0,    0,    0,    0,    0, 1339,
  259,  434, 1339,  477,  143, 1968,    0,    0,    0, 1340,
 1634,    0,  344, 1645, 5882, 1645, 1978, 1968, 1340,  222,
 1702, 1691, 2062,    0, 2111,    0, 2213, 6379,    0, 2442,
 2516, 2589, 2628, 2641, 2748, 6379,  934, 6379,    0,    0,
  583, 1983, 5882,  834,   46, 1636,    0, 1643, 1648, 1685,
 1757, 1706,    0,    0,    0,    0,    0,    0, -192,    0,
    0,    0,    0,    0,    0,    0, 2005,    0,    0,    0,
 1624,    0, 1719, 1776,    0, -121,    0,    0,    0,    0,
    0,    0,    0, 4519,    0,    0,    0,    0,    0,    0,
    0,    0, 1750,    0,    0,    0,    0,    0,    0, 1077,
 1077,    0, 2012,    0,    0,    0,    0,    0, -102, -131,
  507,    0, 1789,    0,    0,    0, 1599,   79, 1632, 1635,
 1692, 2015,    0, 1413, 1642,    0,    0, 1022,    0, 2001,
 1599, 1178,  405, 2021, 2022, 2029, 1750, 1719, 1493, -150,
    0, 1473,  -32, 1617, 1641,    0,   11,    0,  405, 1678,
 1764, 6617,    0,    0,  405, 1765,    0,    0, 2036, 2038,
    0, 1359, 1320, 2044,    0,    0, 1320, 2045, 2047,    0,
    0, 1733, 2050, 1320, 2054, 1251, 2055, 1320, 2060, 6379,
 6379, 1970, 6379, 6142, 2061, 1320, 2066, 2071, 1320, 2073,
 6379, 1320, 2074, 1320, 2075, 2077, 1320, 2079, 2081, 1320,
 2084,    0, 1825,    0,    0,    0,    0,    0, 1774, 1340,
    0, 1340,  143, 1968,    0,  164,  164,   31,    0,    0,
 1651,    0, 1978, 1968, 2083,  222,    0,    0, 6765, 2089,
    0,    0, 2766,    0,    0,    0,    0,    0,    0, 2773,
 1361, 1320,    0, 1320,    0, 1676,    0,    0,  583,    0,
    0,    0,   46, 1670, 4519, 1644,    0,    0,    0, 1712,
  883, 1746, 1413, 1751, 1413,    0,  313, 1695, 1868, 1750,
    0, 6379, 1853, 1736,    0, 4519,    0,    0,    0, 1760,
 1762, 1763, 1770, 1772, 1775,    0,    0,    0,    0,    0,
 2110,   79,    0, 1506,    0,    0,   85,    0, 1171, 1781,
   85,    0,   85,    0, 1692, 2122,    0,    0,    0, 1868,
 1413,    0, 1493,    0,    0, 5527, 1888,    0,  -85,    0,
 2005,    0, 2128,    0, 2129,  883, -112, 2130,  883,    0,
    0, 6379, 1754, 1754,  -32,    0,    0,    0,    0, 2132,
 1711,    0,    0, 1754, 1754, 6379, 1754, 1754, 1419, 1320,
    0, 1274, 6379, 1320, 1754, 1754, 1754, 1754, 1320, 1754,
 1754, 1754, 1754, 1754, 1754, 1783,    0,    0,    0,    0,
    0,    0,    0, 1737,    0,    0,    0,    0, 5882,    0,
  222, 2083,    0,    0,    0,    0, 1631, 5882,    0,  861,
 1896, 2136,    0,    0,  369, 2142, 1790, 1719,    0,    0,
  883,  983,    0,    0,    0,  448, 5456,    0,    0, 1320,
 1557, 1853,    0,  832,  183,  660, 1743, 1850, 1755, 1895,
 1860, 1898, 1750,    0,    0, 2162,    0, 2163,    0, 1854,
 1557, 1781,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  983, 1789, 1885, 1822,    0, 1584,    0,    0,    0,
 1837, 1855,    0, 1692, 1838, 1320, 2172, 2173, 6379,    0,
 1921,    0, 2175, 2180, 1320, 2181, 2182, 6379, 6379, 1320,
 2183, 2184, 2185, 2188, 2190, 2191, 2192, 2200, 2206, 2208,
    0,  164,    0, 1706,    0, 4519, 1349, 1670, 1413,    0,
  779,    0, 1413,    0,    0,    0, 6765,    0,  221,  342,
 2193, 1313, 2210, 1920, 6379, 2203, 2211, 2205, 2207, 1926,
 2209,    0,    0,    0, 4464, 2212,    0,    0,    0,    0,
    0,    0,    0, 2228,    0,    0, 1919, 1928,  183,    0,
    0,    0, 1077,    0,    0,    0,    0,    0,    0,    0,
 1868,    0,    0,    0,    0,    0,    0,    0,    0,   50,
 1361,    0,    0, 6379,  883,    0,    0,  883,    0,    0,
  934,    0,    0,    0,    0,    0,    0,    0,    0, 1320,
 1320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1790,  369,    0,    0, 1189,    0,    0, 1905,
    0, 2235,    0, 2217, 2218,  259, 6379,    0, 1939, 4519,
 1785,    0, 4519,    0,    0,    2,    0,    0,  768,    0,
 -115,    0,    0,    0,    0,    0, 1077, 1899,    0,    0,
    0,   50, 2241,  583,    0,    0, 1631, 1320,    0,    0,
 1361,    0,    0, 1413,    0,  700,    0,    0, 6240, 1998,
    2,  662,    0,  707,    0,  668,    0,    0,  221, 1826,
   79,   84,    0,    0,    0, 1899,  -19,    0, 1906, 1907,
  583, 2248,   50, 1950, 1706, 2256, 1631, 2257,  183,    0,
 2259, 2258,  695, 5611, 1893, 2261,    0,  142, 1871, 2004,
    0,    2,    0,    0,    0,    0, 3583,  768,    0,  712,
  712, 2009,    0, 1869,    0,    0,  583,   50, 1790,    0,
 1706,    0,    0,    0,  700, 2273,    0,  246,    0, 1235,
 1713,   13, 2255, 2027, 2020, 3583, 3583,    0,    0,    0,
    0, 1862,  413,    0,    0,    0,  876,    0, 1790,    0,
  246,    0,    0,    2, 2284,    0, 1546, 3583, 2023,    0,
    0,    0,    0, 4519,    0, 2285, 2289, 1734,    0,    0,
 3583,  369,  246,    0,    0,    0,    0,
};
static short yyrindex[] = {                                      0,
    0,  147,  686,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  220, 5708,    0,    0,    0, 2332,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  826,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1995,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1952,    0,    0,    0,
   62,    0,   62,    0,    0,    0,    0, 1960,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  881,    0,    0,    0,
 1353,    0,    0,    0,  299,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -114,    0,    0,    0,    0,  801,    0,
  998,    0,    0,    0,    0,    0, 1041, 1084,    0, 6848,
    0,    0,    0,    0,    0,    0,    0,    0, -114,    0,
  367,    0,    0, 2305,    0,    0,    0,    0, 2082,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1004,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  735,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1263,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  225, 1497,    0,    0,    0,    0,    0,    0, 2026,    0,
   71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  418,    0,    0, 1105,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1136,    0, 2072,    0,    0,
    0,    0, 1158,    0,    0,    0,    0,    0, 2085,  553,
 5749,    0, 1169,    0,    0,    0,    0,  129,    0,    0,
    0, 1897, 1897,    0,    0,    0, 1243, 1400,    0,    0,
    0,    0,    0, 2085,    0,    0,  966,    0,    0,    0,
    0,    0,    0,    0, 6534, 1962,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1269,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1279,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1299,    0,    0,
 6443,    0, 6443,    0,    0,    0, 6443, 6443, 6443,    0,
    0,    0, 2134, 2279, 6443,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  268,    0,
  268,    0,    0,  650,    0,  778,  799,    0,    0,    0,
 1004,    0,  923,  923,  684,    0,    0,  308,    0, 3211,
   57,    0,    0,    0,    0,    0,    0, 1897, 1897, 1897,
 1897,    0,  154,    0,    0,    0,    0,    0,    0,  201,
    0,    0,    0,    0,    0,    0,    0, 2093,    0,    0,
    0,    0,    0, 2072,    0,    0,  815,    0,  555, 1889,
    0,    0,    0,    0,    0,    0,  300,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1300,    0,    0,    0,
    0, 1811, 1488,    0,    0,    0, 3830,    0,    0, 3913,
    0,    0, 4010,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2457, 4210,    0,
    0,    0,    0,    0, 4085, 3799,    0, 4010,    0,    0,
    0,    0,    0,    0,    0,  553, 1156,    0,    0,    0,
    0, 1947,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   82,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  118,    0,
    0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1191,    0,    0,    0, 1667, 2389, 2584,
 1804, 1974,    0,    0,  558,  698,  174,    0,    0,    0,
  803,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  273,    0,    0,    0,
    0,    0,    0,    0,    0,  664,  664,    0,    0,    0,
    0,    0,    0, 4286,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
    0,    0,    0, 2323,    0,    0, 2039, 1193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  348,  357,  669,
    0,    0,    0, 2654,    0,    0,    0,    0,    0, 4113,
    0,    0,    0,    0,    0, 3913,    0,    0,    0,    0,
  935,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6700,    0,    0,    0,    0,    0,    0,    0,    0,
 2056,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1332, 1335,    0,    0,    0,    0,
    0,    0,    0, 1352,    0, 1352, 1398, 1416,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2024, 1403,    0, 1573,    0, 2025,    0, 2030, 2031,    0,
    0,  688,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  322,    0,    0,    0,
    0,    0, 1897, 1908,    0, 4483,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2099,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1417,    0,    0,    0,    0,    0,    0,    0,
 4175,    0,    0,    0,    0,    0,    0,    0,    0, 1179,
    0,    0,    0,    0,    0,    0, 2099, 1897, 1439,  553,
    0, 2100, 5708, 1463,   54,    0,    0,    0,    0, 6700,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   81,    0,    0,    0,  560,    0,    0,    0,
    0,    0,    0, 2535,    0, 2697,    0, 2739,    0,    0,
    0,    0,    0,    0,    0, 2781,    0,    0, 2845,    0,
    0, 2894,    0, 2958,    0,    0, 3047,    0,    0, 3096,
    0,    0, 3608,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1332, 1512,    0, 1936,  193,    0,    0,    0,
    0,    0, 1534, 1551, 1553,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  297, 1218,    0,  198,    0,    0,    0,    0,  646,    0,
    0,    0,    0,    0,    0,  797,    0,    0,    0, 3010,
    0,    0,    0, 1917,    0,    0,    0,    0,    0, 2106,
    0,    0, 2161,    0,    0,    0,    0,    0,    0,  716,
  752,  791,  794,  804,  855,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  802,
    0,    0,    0,    0, 3737,    0,    0,    0,    0,    0,
    0,    0, 1561,    0,    0,    0,    0,    0,    0,    0,
 1568,    0,    0,    0,    0,    0,   67,    0,    0,    0,
    0,    0,    0,    0, 6443,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3160,
    0, 3202,    0, 3244,    0,    0,    0,    0, 3334,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1611,    0,    0,    0,    0,  284,    0,    0, 2024,
  691,  457,    0,    0,   78,  900,  927, 1897,    0,    0,
    0, 4093,    0,    0,    0,    0,    0,    0,    0, 2341,
 1166, 2420,    0, 2072,    0,    0,    0,    0,    0,    0,
    0,    0, 2099,    0,    0,    0,    0,    0,    0,    0,
 1628,  813,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  293,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,    0, 3357,    0,    0,    0,    0,
    0,    0,    0,    0, 3406,    0,    0,    0,    0, 3495,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  193,    0,   51,    0,    0,    0,    0,    0,    0,
 2346,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  230,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3559,
 3579,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2349, 3714,    0,    0,    0,    0,    0, 2347,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1108, 1452,    0,    0,
    0,    0,   99,  153,    0,    0,  216, 2341,    0,    0,
  297,    0,    0,    0,    0, 2346,    0,    0,   25,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2782,    0,    0, 3427, 4230,
 2024, 1499,    0,    0,  184,    0,  284,    0,  782,    0,
    0, 2351,    0,    0, 2334,   28,    0, 2094,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,    0,   76,    0,
   51,    0,    0,    0, 2346,    0,    0,    0,    0, 2350,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2024,    0, 2349,    0,
    0,    0,    0,    0, 2342,    0,    0,    0, 4505,    0,
    0,    0,    0,    0,    0, 2359,    0,    0,    0,    0,
    0,  929,    0,    0,    0,    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2405,    0,    0, 2409,
    0,    0,    0,    8,    0, 2413,    1,  207,  -59, -516,
 1383,  219, -263,   91, 2407, 2189,    0,  -31,    0, 2196,
  -86,  -37,    0,  557, -827,  -30,  -51, -164, 2202,  844,
 1817,    0,    0,    0,   40,    0,    0,  -39, 1456, -518,
  -43, -821, 1861, 1653, -281, 1467, 2361, -287,    0,  -49,
    0,  757,  -42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -594,  366, 1478, -455,  -40, -826,    0,
    0,    0,    0, -325, -488,-1018, 1483, -328,  -45,    0,
 -444,    0,    0, -431, 1324,    0, 1200,    0,    0, -169,
 -555,  -17,    0,    0,    0,    0, 2112,    0, 1937, 2145,
 -241, 1516, -669,    0,    0,    0, -637,    0,    0,    0,
    0,    0,    0, 1577,    0,    0,    0, 1509, 2141, 2144,
    0, 1769,    0, -451, 1759,  -41,  214, -639,  -52,    0,
    0, -563, -657, -202, -609,    0, 1240, -911,    0, 1012,
 1246,    0, 1994,    0,    0,    0, 1016, 1013,  989,  -68,
 2148, -872, -963,    0,    0, 1795,    0, 1414,  234,    0,
    0,    0, -235,    0,    0,    0,    0,    0,    0,    0,
    0,-1269,    0,   16,    0, -653,  951, 1081,    0, 1009,
    0,    0, 2147, -204,    0,    0,    0,    0, -891, -372,
 1384,    0, -413, -777,-1149,-1246,    0, -381, 1082,  167,
  102, 1956, 1748, 1565, 1262,    0,    0,   -1,    0,    0,
    0,    0,    0, 2195,    0,    0, 2216, 2034,    0,    0,
    0,    0,    0, 2220,    0,    0,    0,    0,  -15,    0,
    0,    0, -327, 1778, -318, 1423, -406,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1988,    0,    0,
 1791,    0,    0,    0, 2536,    0,    0,    0,    0, 2253,
    0,    0,    0,    0, 2115,    0, 2113,    0,    0,    0,
 1877,    0,    0,    0,    0,    0,  -80,    0, 1867,    0,
 -809,    0, 1597,    0, 2126, -380, 2135,    0, -547, 1913,
    0,    0,  -54, 1357,    0, 1265, -973,    0, 1249,    0,
 1045,    0, 1083,    0, 1001,    0,    0,    0, 2120,    0,
    0,    0, 1965, 1742, -881,    0,  340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3535, 1432,
 1579,    0,    0,    0,    0, -203, 2153, 2214, 1301,    0,
    0,
};
#define YYTABLESIZE 7341
static short yytable[] = {                                     173,
  121,  172,   69,  151,   68,  175,  220,   31,  170,  154,
  377,  378,  374,  165,  181,  661,  156,  510,  515,  179,
  744,  619,  687,  548,  794,  205,  797,  184,  669,  186,
  704,  213,  549,  707,  816,  208,  210,  683,  724,  718,
  482,  209,  640,  310,  908,  883,  716, 1061,  215,   67,
  217,  212, 1554,  321,  892,  787,  423,  121,  388,  267,
  227,  481,  229,  559,  481,  211,  307,  481,  388,  450,
  267,  228,  271,  472,  559,  632,  970,  622,  577,  939,
  738,  624,  682,  290, 1130,  654,  288,  667,  761, 1442,
 1093,  623,  910,  268,  887,  981,  837,  288,  326,  112,
 1214, 1099,  361,  678,  767,  681,  861,   84,  481,  325,
  354,  481,  321,  224,  586,  423,  938,  672,  622, 1115,
 1120,  738,  624,   67,  738, 1228,  481, 1508,  431,  944,
  318,  309,  693,  614,  632,  353,  622,  490,  907,  738,
  624,  393,  695,  696,  697,  698,  519,  431,  477,  249,
   67,  625,  327,  425, 1403, 1195, 1452,  326,  112,  224,
   88, 1272,  173,  548,  380,  496, 1261,  377,  378,  374,
 1102,  396,  549,  590, 1267,  692,  672,  439,  874,  319,
  607, 1234,  120,  623,  313, 1502, 1030,  431,  515,  383,
  749, 1498,  479, 1474,  759,   67,  327,   90,  355,  383,
  208,  102, 1188, 1315, 1190,  519,  898,  899,   67,  672,
  625,  327,  425, 1077,  590,  616,  193,  590,  106,  519,
  605,  764,  413,  414,  666,  416,  268,  111,  457,  681,
  107,  385,  590,  314,  750,  893, 1100,  365,  603,  202,
  459,  603,  623, 1368,   51,  370,  436, 1268,  386,  460,
  173,  479,  449,  173,  194,  453,  603, 1022, 1023,  208,
  916,  443, 1555,  760, 1078,  666,   91,  547,  666,  103,
  681,  112, 1548,  681,  616,  173,   92,  172,  519,  481,
  673, 1244, 1510,  666, 1568,  926,  484,  933,  681,   14,
  497,  320,  182,  500,  481,  714,  356,  249,  576,  362,
  881,   93, 1565, 1259,  511,  700,  513,  578,  894,  321,
  168, 1103,  611, 1033,  423,  234,  813, 1069,  565,  569,
 1234,  577, 1043, 1045,  616,  481,  547,  235,  567,  664,
  481, 1158,  963,  441, 1214, 1519, 1429,  625,  226,  615,
 1101,  481,  738,  322,  432,  315,  604,  348, 1087,  601,
  945,  182,  841, 1225, 1273,  567,  346,  576,  362,  604,
  609,  271,  612,  423,   69,  624,  578,  383, 1196,   73,
 1361, 1549, 1141, 1188,  481, 1373,   84,  481,  677,  644,
  577,  648,  649,  650,  651,  652,  644,  623, 1507,  271,
  233,  586,  431,  818,  378,  817,  622, 1440, 1316,  738,
  624, 1343,  738, 1344,  691, 1534,  348,  763,   86,  738,
  624,  425,  738,  624,  567,  346,  738,  542,  622,  710,
 1402,  738,  624, 1511,  738, 1157,  694,  326,  372, 1304,
  326,  969,  481,  371, 1367,  290,  575,  478,  288,  621,
  738,  814,  388, 1220, 1247,  681,  882,  623,  112,  720,
  479,  268, 1377,  787, 1040,  874,  615,  903,  208, 1092,
  425,  908,  168,   66,  738,  622,  745,  738,  738,  624,
 1097,  168,  746,  168,  622,  423,  542,  738,  624,  481,
  625,  327,  226,  625,  327,  672,  481,  481,  666,  900,
 1119,  367,  590,  226,  738,  326,  614,  615,  378,  909,
  972,  665,  590,  976,  481,  590,  153,  208,  321,  910,
  118,  173,  766,  172,  590,  615,  632,  614,  622, 1215,
   69,  738,  624,  772,  773, 1210,  431, 1439,  666, 1202,
  632,  900,  622,  738,  481,  738,  624,   66,  481,  326,
 1236,  796, 1441,  665,  173,  666,  819,  616,  625,  327,
  820,  326,  223,  326,  104,  907,  519,  599,  328,  707,
  479,  590, 1049,  362,   66,  622,  788, 1083,  738,  624,
  590, 1451,  425,   69,  813,  789,  842,  843,  604,  845,
  623,  847,  575, 1314,  850,  851,  852,  853,  854,  855,
 1136,  606,  625,  327, 1222,  575, 1224, 1029,  599,  857,
  707,  599,  328,  707, 1203,  327,  625,  327,  603,   66,
  547,  348,  616,  681,  590,  616,  599,  328,  707,  208,
  346, 1486,   66, 1383,  623,  625,  590,  173,  625,  449,
  813,  115, 1131,  173,  173,  453,  380,  208,  623,  576,
  271,  182, 1262,  118,  443,  591,  880, 1207,  578,  548,
 1243,  888,  888,  109,  902, 1024,  616,  111, 1027,  326,
 1065,  590,  577,  574, 1036,  823,  484, 1405,  347, 1485,
  616,  208,  122,  547,  567,  336,  547,  666,  551, 1263,
  616,  148,  386,  566,  239,  666,  591,  623,  972,  591,
  619,  560,  547,  625,  925,  927,  567,  589,  738,  814,
 1354,  620, 1499,  838,  591,  721,  150,  574,  548, 1521,
 1248, 1502,  979, 1562,  980,  353, 1258, 1382,  547,  153,
  625,  548,  574,  954,  955,  956, 1501,  347,  623,  551,
  549,  619,  111,  924,  619,  739,  116,  327,  589,  123,
  932,  242,  566,  117, 1416,  348,  623, 1500,  967,  619,
 1404,  354,  942,  337,  346,  814,  589,  982,  983,  987,
  542,  625,  994,  996,  998, 1563, 1006, 1009, 1012, 1014,
 1017, 1020, 1028,  560,  353,  615,  617,  558,  724,  625,
 1037,  779, 1279, 1025, 1159,  378,  722, 1417,  615,   69,
  350, 1026,  124,  349,  271,  542,  627,  615,  543, 1345,
  342,  123,  616,  352,  693, 1496,  425, 1053, 1104, 1068,
  354,  426,  124, 1374,  417, 1060,  161, 1062, 1303, 1365,
 1407,  707, 1064,  542, 1413,  521,  542,  723,  109,  109,
  226, 1193, 1193, 1197,  439,  564,  558,  627,  111,  740,
 1531,  111,  542,  616,  615, 1105,  249,  250,  251,  350,
  163,  164,  349,  615,  351,  627,   14,  543,  417,  342,
  123,  616,  352,   66, 1462, 1414,  111, 1464,  542,  254,
  255,  124,  226,  417,  259,  260,  599,  670,  707,  599,
  526,  707,  625,  610,  521,  627,  599,  328,  707,  599,
  328,  707, 1313,  599,  158,  707,  294,  615,  599,  630,
  707,  599,  614,  707,  866,  173,  191,  172,  168, 1126,
  629,  615,  173,  351,  380,  378,  909,  599,  867,  707,
 1034,  813,  202,  813,  913, 1144,  632,  214,  331, 1044,
  176, 1148,  347,  919,  122,  440,   69,  188, 1111,  526,
  630,  599,  868,  707,  615,  599,  707,  707,  163,  164,
  102,   94,  848,  226,  599,  328,  707, 1447,  630, 1169,
 1170,  196, 1172, 1174,  591, 1488,  202,  632,  813,  331,
 1179,  599,  331,  707,  591,  425,  423,  591,  424,  353,
  426,  202,  574,  198,  957,  632,  591,  331,  102,  614,
  441,  407,  548,  122,  226,  199,  869,  523,  599,  328,
  707,  203,  566,  625,  574, 1065,  623,  442, 1572,  619,
  599,  328,  707,  328,  707,  354,  589,  216,  599,  173,
  468, 1211,  619,  102,  566,  848,  589,  548,  623,  589,
 1468,  619, 1526,  591,   69,   69,  665, 1487,  589,  625,
  138,  888,  591, 1408,  421,  599,  814,  707,  814,  625,
  422, 1230,  625,  858,  350,  548,  523,  349,  548,  342,
 1481,  625,  625,  873,  342, 1121,  347,  352, 1409, 1527,
  342,  469,   70,   71,  548,  623, 1384,  378,  619,  335,
 1469,  123, 1528,  848,  623,  589,  591,  619,  922, 1542,
  335, 1470,  124,  814,  589,  271,  206, 1193,  591,  138,
  548, 1517,  860,  313,  525,  470, 1271,  681,  625, 1275,
   69, 1276, 1246,  353, 1122,  627,  217,  625,  351,  643,
  558,  616, 1408,  471,  848, 1285, 1410,  848,  623,  860,
 1543,  619, 1290,  591,  616,  369, 1547,  627,  589,  225,
 1098,  543,  848,  616,  848,  619,  221, 1409,  681,  354,
  589,  681,  681,  877,  222,  558,  643,  370,  271,  226,
  118,  625,  313,  525,  231,  202,  681, 1064,  366,  643,
  878,  173,  173,  172,  449,  623,  543, 1544,  619,  681,
 1317,  888,  866,  558,  627,  589,  558,  202,  350,  232,
  616,  349,  446,  627,  369, 1471,  867,  866,  342,  616,
  381,  352,  558, 1353,  543, 1410,  202,  543,  625,  202,
 1347,  867,  122,  421,  122,  371,  370,  289,  630,  422,
  868, 1121,  454,  543,  202,  202,  118,  366,  558, 1453,
  230,  779, 1348,  446,  779,  868,  446,  627, 1381, 1349,
  630,  202,  147,  616, 1306,  632, 1454, 1390, 1391,  543,
  331,  446,  351,  173,  428, 1211, 1065,  331,  780, 1564,
  331,  780,  848,  202,  331,  305, 1438,  632,  311, 1415,
 1125,  454,  331, 1350,  869,  641,  425,  423,   40,  424,
  173,  426,  449,  779, 1421, 1094, 1095,  630,  331,  869,
  616, 1065,  425,  423,  306,  424,  630,  426,   48,  148,
   69,  147,  844,  848,  848,  848,  848,  848,  860,  848,
  780,  308,  331,  122,  632,  425,  423, 1437,  424,  138,
  426,  848,  848,  848,  848,  331,   66,  311,  168, 1419,
   87,   38, 1142, 1448,   21, 1449,  311,   40, 1450,  991,
  630,  138,  331,  330,  163,  164,  331,  848,  848,  328,
 1476,  677,  606,  848,  121,  848,  848,   48,  148,  341,
  848,  425,  423,  848,  424,  992,  426,  632,  848,  331,
  138,  173,   88, 1465,  934,  935, 1460, 1000, 1459,  848,
  503,  331,  848,  331,   89,  681,  848,  681,  848,  138,
   38,  504,  332,   21, 1001,  681,  606,   44,  138,  139,
  425,  423,  848,  424,  138,  426,  173,  421, 1465,   90,
  677,  606,  339,  422,  342,   46,  433,  600, 1064, 1503,
  599,  352,  138,  848,  848,  342,  121,  110,  110,  848,
  848,  848,  358,  848,  848,  848,  350,  848,  114, 1002,
 1489, 1467,  884,  885,  849,  425,  423,  173,  424, 1538,
  426,  239,  173, 1530,  449,  360,   44,  848,  139,  848,
  425,  423,  338,  424,  362,  426,  239,  121, 1003,   69,
  446, 1506,  446, 1489,   46,  433, 1467,  173,   91, 1465,
  446,  173,  173,  449,  449, 1552,  681,  491,   92,  363,
  848,  681,  239,  446,  367,  239,  752,  114,  731,  173,
  732, 1465,  121,  173,  371,  449,  366,  848,  681, 1489,
  239,   22,  384,   93,  421,  681,  173, 1539,  449,  394,
  422,  338,  268,  242,  848,  392,  848,  491,  491,  848,
  421,  491,  395,   45,  848, 1004,  422,  752,  752,  752,
  752,  752,  848,  752,  848, 1484,  491, 1467,  848,  681,
   47,  848,   42,  421,  397,  752,  752,  752,  752,  422,
  115,  401, 1166,  709,  848,  848,  708,  103, 1430, 1467,
   22,  446,  597,  399,  848,  848,  848,  815,  491,  400,
  598,  848, 1484,  848,  848, 1289, 1187,  848, 1189,  752,
  404,  848,   45,  446,  848,  402,  848,  403,  848,  421,
  446,  405,  406,  848,  848,  422,  848,  411,  342,   47,
   43,   42,  859,  597,  905,  858,  597,  407, 1484,  115,
 1152,  961,  848,  848,  960,  848,  103,  202,  249,  250,
  251,  597,  163,  164,  446,  408,  290,  409,  421,  848,
  410,  848,  848,  848,  422,  343,  848,  344, 1484,  848,
  848,  254,  255,  256,  257,  258,  259,  260,  412,  848,
  261,  262,  968,  418, 1082,  783,  762, 1081,  820,   43,
  345,  291, 1113,  848,  606, 1112,  848,  420,  139,   43,
 1288,  606, 1118,  421,  606, 1117,  202,  428,  606,  422,
   44, 1200,  848,  427, 1199,  346,  606,   45,  421,  292,
  139,  430,  293,  848,  422,  434,  435,  762,  762,  762,
  762,  762,  606,  762,  438,  848, 1209,  848,  294, 1208,
  447,  437,   46,  848,  592,  762,  762,  762,  762,  139,
   14, 1047,  425,  423,  458,  424,  606,  426,  592,  467,
 1540,  475,  821,  498,  295,  491,  592,  488,  139,  606,
  848, 1282,  495, 1553, 1281,  239, 1208,  139,  752,  762,
  752,  491,  592,  139,  491,  491,  606,  491,  752, 1559,
 1560,  606,  491,  512, 1575,  491,  752, 1502,  822,  508,
  562,  139,  752,  823,  566,  752,  570,   47,  491,  824,
  568, 1570,  598,  606,  491,  613,  607,  491,  602,  386,
  386,  616,  468,  765, 1576,  606,  642,  606,  752,  646,
  479,  432,  242,  660,  676,  752,  592,  752,  752,   48,
  329,  752,  680,   49,  514,  752,  425,  423,  752,  424,
  752,  426,  752,  681,  329,  688,  685,  752,  752,  689,
  752,  459,  329, 1463,  765,  765,  765,  765,  765,  699,
  765,  479,  701,  469,  479,  702,  752,  752,  329,  752,
  736,  735,  765,  765,  765,  765,  491,  711,  712,  479,
  742,  665,  459,  752,  751,  752,  752,  752,  747,  737,
  752,  460,  752,  752,  752,  753,  754,  470,  491,  756,
  757,  597,  762,  752,  597,  491,  765,  768,  769,  491,
  771,  597,  780,  782,  597,  471,  491,  752,  597,  783,
  752,  792,  329,  597,  791,  793,  597,  249,  250,  251,
  795,  163,  164,  830,  491,  831,  752,  833,  762,  491,
  762,  835,  597,  249,  250,  251,  839,  752,  762,  840,
  254,  255,  844,  846,  848,  259,  260,  856,  421,  752,
  863,  752,  762,  865,  491,  762,  597,  752,  491,  871,
  597,  259,  260,  875,  900,  371,  904,  914,  763,  597,
  421,  915,  714,  766,  920,  923,  422,  921,  762,  929,
  930,  931,  937,  268,  752,  762,  597,  762,  762,  946,
  940,  762,  953,  975,  951,  762,  958,  618,  762,  622,
  762,  963,  762,  626,  628,  630,  977,  762,  762,  989,
  762, 1032, 1038,  597,  766,  766,  766,  766,  766, 1035,
  766, 1030, 1046, 1063, 1070,  597,  762,  762, 1073,  762,
 1074, 1071,  766,  766,  766,  766, 1072, 1075,  208,  425,
  423, 1084,  424,  762,  426,  762,  762,  762,  599, 1088,
  762, 1096, 1106,  762,  762, 1116, 1497, 1114, 1123, 1109,
  597, 1127, 1128,  762,  421,  765,  766,  765,  479, 1129,
  422, 1137,  969, 1146, 1149,  765, 1150,  762, 1151,  208,
  762, 1139,  208, 1153, 1154, 1163,  813,  479,  479, 1164,
  479,  371,  765, 1165, 1167,  479,  762,  208,  479, 1168,
 1175, 1186, 1048,  425,  423, 1176,  424,  762,  426,  268,
 1177,  479, 1178, 1180, 1181,  765, 1182,  479, 1183,  762,
 1184,  762,  765, 1185,  765,  765, 1201,  762,  765, 1204,
  252, 1216,  765,  760, 1218,  765, 1221,  765, 1227,  765,
  490, 1226, 1223, 1235,  765,  765, 1237,  765, 1238, 1239,
 1245, 1051,  425,  423,  762,  424, 1240,  426, 1241, 1250,
  214, 1242, 1260,  765,  765, 1265,  765, 1269, 1301, 1270,
 1274, 1155, 1280, 1302,  760, 1307,  760,  760,  760, 1308,
  765, 1309,  765,  765,  765, 1355, 1311,  765, 1356,  479,
  765,  765,  760,  760,  760,  760, 1358, 1357, 1359, 1360,
  765,  214, 1362, 1363,  214, 1370, 1364, 1372, 1375, 1378,
 1376,  479, 1379, 1380,  765, 1386,  239,  765,  479,  214,
 1387, 1388, 1389, 1392, 1393, 1394,  760,  479, 1395,  479,
 1396, 1397, 1398,  765,  995,  766,  999,  766, 1007, 1010,
 1399, 1015, 1018, 1021,  765,  766, 1400,  479, 1401, 1420,
 1423, 1418,  479, 1052,  425,  423,  765,  424,  765,  426,
  103, 1422,  766, 1424,  765, 1425, 1426, 1427, 1434,   53,
 1433, 1435, 1436, 1455, 1456, 1457, 1458,  421,  759, 1461,
   54,  479, 1477,  422, 1483,  766, 1504,   55, 1516, 1512,
 1514,  765,  766, 1518,  766,  766, 1520, 1522,  766, 1524,
   56, 1525,  766, 1532, 1208,  766, 1536,  766, 1537,  766,
 1510, 1511, 1551, 1556,  766,  766,  208,  766,  208,  759,
 1557,  759,  759,  759, 1558, 1561,  208, 1502, 1573, 1574,
 1571,    1,  574,  766,  766,   26,  766,  759,  759,  759,
  759,  421,  239,   28,  188,  681,  582,  422,  251,  335,
  766,  479,  766,  766,  766,  135,  249,  766,   77,  414,
  766,  766,  198,  362, 1156,  479,  179,  614,  612,  256,
  766,  759,  479,  608,  610,  180,  255,   57,  249,  250,
  251,  336,  163,  164,  766,  638,  637,  766,  761,  632,
  421,  639,  293,  603,   58,  760,  422,  760,  300,  648,
  291,  254,  255,  766,   24,  760,  259,  260,   27,   59,
  261,  262,   33,   60,  766, 1191,   61,  208,  108,  215,
  391,  398,  760,  832,   62,  390,  766, 1147,  766,  761,
  781,  761,  761,  761,  766,  974, 1145,  207,  226,  208,
  214, 1133, 1249,   63, 1143,  760,  208,  761,  761,  761,
  761, 1366,  760,  748,  760,  760,  456,  463,  760,  521,
  215,  766,  760,  215, 1155,  760, 1124,  760, 1134,  760,
  492, 1346, 1086,  493,  760,  760,  918,  760,  215, 1352,
  208,  761, 1054,  425,  423,  917,  424, 1509,  426,  730,
 1156, 1513,  421,  760,  760, 1515,  760,  456,  422, 1546,
  456,  561,  912, 1229,  249,  250,  251, 1569,  163,  164,
  760, 1475,  760,  760,  760,  456, 1541,  760,  597, 1264,
  760,  760,  778, 1482, 1369,  962, 1135,  254,  255,  501,
  760,  734,  259,  260,  708,  474,  261,  262,  483,  226,
  759,  952,  759, 1257,  760,  770,  943,  760,  110,  448,
  759,  671,  876,  675,  886,  662, 1055,  425,  423, 1411,
  424,  226,  426,  760, 1305,  663,  862,  759,  226, 1550,
  684, 1523, 1406, 1577,  760,  708,  836, 1042,  708,  653,
 1171, 1385,    0,  764,  596,    0,  760,    0,  760,    0,
  759,    0,    0,  708,  760,    0,    0,  759,    0,  759,
  759,    0,  226,  759,    0,    0,    0,  759,    0,    0,
  759,    0,  759,    0,  759,    0,    0,    0,    0,  759,
  759,  760,  759,    0,  764,    0,  764,  764,  764, 1056,
  425,  423,    0,  424,    0,  426,    0,    0,  759,  759,
    0,  759,  764,  764,  764,  764,    0,    0,    0,    0,
  761,    0,  761,  182,    0,  759,    0,  759,  759,  759,
  761,    0,  759,    0,    0,  759,  759,    0, 1057,  425,
  423,    0,  424,    0,  426,  759,  764,  761,    0,    0,
    0, 1058,  425,  423,    0,  424,    0,  426,    0,  759,
    0,    0,  759,    0,    0,    0,  732,  226,    0,  215,
  761,    0,    0,    0,    0,    0,    0,  761,  759,  761,
  761,    0,  182,  761,    0,    0,    0,  761,    0,  759,
  761,  421,  761,    0,  761,    0,    0,  422,    0,  761,
  761,  759,  761,  759,  456,    0,  456,  732,  711,  759,
  732,  456,    0,    0,  456,    0,    0,    0,  761,  761,
    0,  761,    0,    0,    0,  732,    0,  456,    0,    0,
    0,    0,    0,    0,    0,  761,  759,  761,  761,  761,
    0,    0,  761,    0,    0,  761,  761,    0,    0,  711,
  709,  239,  711,    0,    0,  761,    0,    0, 1059,  425,
  423,    0,  424,    0,  426,  421,  708,  711,  226,  761,
    0,  422,  761,    0,    0,    0, 1205,  425,  423,    0,
  424,    0,  426, 1206,  425,  423,    0,  424,  761,  426,
  226,  709,  239,    0,  709,  239,    0,  226,    0,  761,
    0,    0,    0,    0,    0,  456,    0,    0,    0,  709,
  239,  761,    0,  761,  710,  764,    0,  764,    0,  761,
    0,    0,    0,  708,    0,  764,  708,  456,    0,    0,
    0,  226,    0,  708,  456,    0,  708,    0,  421,    0,
  708,    0,  764,    0,  422,  708,  761,    0,  708,    0,
    0,    0,    0,    0,    0,  710,    0,    0,  710,    0,
    0,    0,    0,  740,  708,  764,    0,    0,  456,    0,
    0,    0,  764,  710,  764,  764,    0,  421,  764,    0,
    0,    0,  764,  422,    0,  764,    0,  764,  708,  764,
  421,  708,  708,    0,  764,  764,  422,  764,    0,    0,
    0,  708,  182,    0,  740,    0,    0,  740,    0,    0,
    0,    0,    0,  764,  764,    0,  764,    0,  708,    0,
    0,    0,  740,    0,  182,    0,    0,  704,  732,    0,
  764,    0,  764,  764,  764,    0,    0,  764,    0,    0,
  764,  764,    0,    0,    0,  708,    0,    0,    0,    0,
  764,    0,    0,  182,    0,    0,    0,  708,    0,  708,
    0,    0,    0,    0,  764,    0,    0,  764,  704,    0,
  711,  704,  182,    0,    0,    0,    0,    0,    0,  167,
  182,  182,    0,  764,    0,  732,  704,  182,  732,    0,
    0,    0,  708,    0,  764,  732,    0,  421,  732,    0,
    0,    0,  732,  422,    0,  182,  764,  732,  764,    0,
  732,    0,  709,    0,  764,  421,  705,  182,    0,  182,
  167,  422,  421,  167,    0,    0,  732,  711,  422,  239,
  711,  239,    0,    0,    0,    0,    0,  711,  167,  239,
  711,  764,  182,    0,  711,    0,    0,    0,    0,  711,
  732,    0,  711,  732,  732,    0,    0,  705,    0,    0,
  705,   87,    0,  732,    0,  706,    0,  182,  711,  709,
    0,    0,  709,    0,    0,  705,  710,    0,    0,  709,
  732,    0,  709,    0,    0,    0,  709,    0,    0,    0,
    0,  709,  711,    0,  709,  711,  711,    0,    0,    0,
    0,    0,    0,   88,    0,  711,  706,  732,    0,  706,
  709,    0,    0,    0,    0,   89,    0,    0,   87,  732,
    0,  732,  711,    0,  706,  740,    0,    0,    0,  739,
  239,    0,    0,  710,  709,    0,  710,  709,  709,    0,
   90,    0,    0,  710,    0,    0,  710,  709,    0,  711,
  710,    0,  239,    0,  732,  710,    0,    0,  710,  239,
   88,  711,    0,  711,  709,    0,    0,    0,    0,    0,
  739,  733,   89,  739,  710,    0,    0,    0,    0,    0,
  163,    0,  740,    0,    0,  740,  105,    0,  739,  704,
    0,  709,  740,  239,    0,  740,  711,   90,  710,  740,
    0,  710,  710,  709,  740,  709,    0,  740,    0,   91,
    0,  710,  733,  741,    0,  733,    0,    0,    0,   92,
   74,    0,    0,  740,    0,    0,    0,   75,  710,    0,
  733,   76,   77,    0,    0,    0,    0,  167,  709,  163,
    0,    0,    0,    0,   93,    0,  704,  740,    0,  704,
  740,  740,   78,    0,  741,  710,  704,  741,  167,  704,
  740,    0,   94,  704,    0,    0,   91,  710,  704,  710,
    0,  704,  741,    0,    0,    0,   92,  740,  705,    0,
  167,    0,    0,    0,    0,    0,  167,  704,  631,  632,
  633,  634,  635,  636,  637,  638,    0,    0,    0,    0,
    0,   93,  710,  742,  740,    0,    0,    0,    0,  167,
    0,  704,    0,    0,  704,  704,  740,   79,  740,   94,
    0,    0,    0,    0,  704,    0,  730,  706,  167,    0,
    0,    0,    0,    0,   80,  705,    0,  167,  705,    0,
    0,  704,    0,  167,  742,  705,    0,  742,  705,   81,
    0,  740,  705,   82,    0,    0,    0,  705,    0,    0,
  705,  167,  742,    0,   83,    0,    0,  730,  704,    0,
  730,    0,    0,    0,    0,  734,  705,    0,    0,    0,
  704,    0,  704,   84,  706,  730,    0,  706,    0,    0,
    0,  739,    0,    0,  706,    0,  235,  706,  167,    0,
  705,  706,    0,  705,  705,    0,  706,    0,    0,  706,
    0,    0,    0,  705,    0,  704,  734,    0,    0,  734,
    0,    0,    0,    0,    0,  706,    0,    0,    0,    0,
  705,    0,    0,  733,  734,    0,    0,  235,  163,    0,
  235,    0,    0,    0,    0,    0,    0,    0,  739,  706,
    0,  739,  706,  706,    0,  235,    0,  705,  739,  163,
    0,  739,  706,    0,  743,  739,    0,    0,    0,  705,
  739,  705,    0,  739,    0,  741,    0,    0,    0,  706,
    0,  163,    0,    0,    0,    0,    0,  163,    0,  739,
  733,    0,    0,  733,    0,    0,    0,    0,    0,    0,
  733,    0,    0,  733,  705,  743,  706,  733,  743,    0,
  163,    0,  733,  739,    0,  733,  739,  739,  706,    0,
  706,    0,    0,  743,    0,    0,  739,    0,  731,  163,
    0,  733,  741,    0,    0,  741,    0,    0,  163,    0,
    0,    0,  741,  739,  163,  741,    0,    0,  735,  741,
    0,    0,    0,  706,  741,  733,    0,  741,  733,  733,
    0,    0,  163,    0,    0,  742,    0,    0,  733,  731,
  739,    0,  731,  741,    0,    0,    0,  690,    0,    0,
    0,    0,  739,    0,  739,  733,    0,  731,  730,  735,
    0,    0,  735,    0,    0,    0,    0,  741,    0,  163,
  741,  741,    0,    0,    0,    0,    0,  735,    0,    0,
  741,    0,  733,    0,    0,    0,    0,  739,  690,    0,
    0,  690,  742,    0,  733,  742,  733,  741,    0,    0,
    0,    0,  742,    0,    0,  742,  690,  734,    0,  742,
    0,    0,    0,    0,  742,  730,    0,  742,  730,    0,
    0,    0,    0,    0,  741,  730,    0,    0,  730,  733,
    0,    0,  730,  742,    0,    0,  741,  730,  741,    0,
  730,    0,    0,    0,  235,    0,  235,    0,    0,    0,
    0,    0,    0,  594,  235,    0,  730,  742,    0,    0,
  742,  742,    0,    0,  734,    0,    0,  734,    0,    0,
  742,  741,    0,    0,  734,    0,  481,  734,    0,    0,
  730,  734,    0,  730,  730,    0,  734,  742,    0,  734,
    0,    0,    0,  730,  594,    0,  743,  594,    0,    0,
    0,    0,    0,    0,    0,  734,    0,    0,    0,    0,
  730,    0,  594,    0,  742,    0,    0,  481,    0,    0,
  481,    0,    0,    0,    0,    0,  742,    0,  742,  734,
    0,    0,  734,  734,    0,  481,    0,  730,  486,    0,
    0,    0,  734,    0,    0,  235,    0,    0,    0,  730,
    0,  730,    0,  743,    0,    0,  743,    0,    0,  734,
  731,  742,    0,  743,    0,    0,  743,  235,    0,  492,
  743,    0,    0,    0,  235,  743,    0,    0,  743,  486,
  735,    0,  486,    0,  730,    0,  734,    0,    0,    0,
    0,    0,    0, 1227,  743,    0,    0,  486,  734,    0,
  734,    0,    0,    0,    0,    0,    0,    0,  235,  492,
  492,    0,    0,  492,    0,    0,    0,  731,  743,    0,
  731,  743,  743,    0,    6,    0,    0,  731,  492,  486,
  731,  743,    0,  734,  731, 1319, 1320,  735, 1321,  731,
  735, 1322,  731,    0,    0,    0,    0,  735,  743,    0,
  735,    0,  509,    0,  735, 1323,    0,    0,  731,  735,
  492, 1324,  735,    0,    0,    0,  690,    0,    0,  690,
    0,    0,    0,    0,    0,  743,  690,    0,  735,  690,
    0,    0,  731,  690,    0,  731,  731,  743,  690,  743,
    0,  690,    0,  509,    0,  731,  509,    0,    0,    0,
    0,    0,  735,    0,    0,  735,  735,  690,    0,    0,
    0,  509,  731,    0,    0,  735,    0,    0,    0,    0,
    0, 1325,  743,    0,    0,    0,    0,    0,    0,    0,
    0,  690,  735,    0,  690,  690,    0,    0,    0,  731,
   14,    0,    0,  509,  690,    0,    0,    0,    0,  499,
    0,  731,    0,  731,  481, 1326,  481,    0,    0,  735,
    0,  690,    0,    0,  481,   16,    0,    0,    0,    0,
    0,  735,  594,  735,    0,  594, 1327,  481,    0,    0,
    0,    0,  594,  168,    0,  594,  731,    0,  690,  594,
  499,    0,    0,  499,  594,    0,  486,  594,    0,    0,
  690,    0,  690,    0,    0,    0,  735,    0,  499,    0,
    0,    0,  486,  594,    0,  486,  486,    0,  486,    0,
    0,    0,    0,  486,  483,    0,  486,  492,    0,    0,
    0,    0,  182,    0,    1,  690,    0,  594,    0,  486,
  499,  594,    0,  492,    0,  486,  492,  492,  486,  492,
  594,    0,  476,    0,  492,  481,    2,  492,    0,    0,
    0,    0,    0,    0,    3,  483,    0,  594,  483,    0,
  492,    4,    0,    5,    0,    6,  492,  481,    0,  492,
    7,    0,    0,  483,  481,    0,    0,    8,    0,    0,
    0,  182,    0,  476,  594,    0,  476,    0,    0,    0,
    0,    9,    0,    0,    0,    0,  594,    0,    0,    0,
  509,  476,   10,    0,  481,  483,    0,  486,  481,    0,
    0,    0,    0,    0,    0,    0,  509,    0,    0,    0,
  509,    0,  509,    0,    0,    0,    0,  509,    0,  486,
  509,  594,    0,    0,    0,    0,  486,    0,  492,  481,
  486,    0,    0,  509,    0,  481,    0,  486,  481,  509,
    0,    0,  509,    0,    0,    0,    0,    0,    0,  236,
  492,    0,    0,  481,    0,  486,    0,  492,    0,   11,
  486,  492,    0,    0,    0,    0,   12,    0,  492,   13,
  481,   14,   15,  481,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  486,  492,  499,  481,  486,
  236,  492,    0,  236,    0,    0,   16,    0,    0,    0,
    0,    0,    0,  499,    0,  173,    0,  499,  236,  499,
    0,  509,    0,    0,  499,    0,  492,  499,    0,    0,
  492,    0,    0,    0,    0,    0,    0,    0,    0,  582,
  499,    0,  263,  509,  264,    0,  499,    0,    0,  499,
  509,    0,    0,    0,  509,    0,    0,  267,    0,    0,
    0,  509,  268,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  483,    0,  173,    0,    0,    0,    0,  509,
  182,    0,    0,    0,  509,    0,    0,    0,  483,    0,
    0,    0,  483,    0,  483,    0,    0,    0,    0,  483,
  476,  182,  483,    0,    0,    0,    0,    0,    0,  509,
    0,    0,    0,  509,    0,  483,    0,    0,  499,  476,
  476,  483,  476,  182,  483,    0,    0,  476,    0,  182,
  476,    0,    0,    0,    0,    0,  582,    0,    0,  263,
  499,  264,    0,  476,    0,    0,    0,  499,    0,  476,
    0,  499,  182,    0,  267,    0,    0,    0,  499,  268,
    0,    0,  481,    0,    0,    0,    0,    0,    0,    0,
    0,  182,    0,    0,    0,    0,  499,    0,    0,  182,
  182,  499,  481,    0,  481,    0,  182,    0,    0,  481,
    0,    0,  481,  483,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  182,  481,  499,    0,    0,    0,
  499,  481,  174,    0,    0,  483,    0,  481,    0,  481,
    0,  476,  483,    0,  481,    0,  483,  481,    0,    0,
    0,    0,    0,  483,    0,    0,    0,  236,    0,  236,
  481,  182,    0,  476,    0,    0,    0,  236,    0,    0,
  476,  483,  182,    0,    0,    0,  483,    0,    0,    0,
    0,  476,    0,    0,    0,    0,  236,    0,    0,    0,
    0,  174,    0,  173,    0,  237,    0,    0,    0,  476,
    0,  483,    0,  481,  476,  483,    0,    0,  582,  238,
    0,  263,  578,  264,  173,  239,  240,    0,    0,    0,
    0,    0,    0,    0,    0,  481,  267,    0,    0,    0,
    0,  268,  481,  476,  579,    0,  173,    0,  481,    0,
    0,    0,  173,  481,    0,    0,  241,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,    0,
  481,  481,    0,    0,    0,  173,  481,  481,    0,    0,
    0,    0,    0,    0,  243,  244,    0,    0,    0,    0,
  236,    0,    0,  236,  173,    0,  245,  236,    0,    0,
  246,    0,  237,  173,    0,  481,    0,    0,  580,  173,
    0,  481,    0,    0,    0,  266,  238,    0,  263,    0,
  264,    0,  239,  240,    0,    0,    0,  173,    0,    0,
    0,  236,    0,  267,    0,    0,    0,    0,  268,    0,
    0,  579,    0,    0,    0,    0,    0, 1277, 1278,    0,
    0,  581,    0,  241,    0,    0,    0,    0, 1283, 1284,
    0, 1286, 1287,  247,  173,    0,    0,    0,    0, 1291,
 1292, 1293, 1294,  248, 1295, 1296, 1297, 1298, 1299, 1300,
    0,  243,  244,    0,    0,    0,    0,  249,  250,  251,
  252,  163,  164,  245, 1227,    0,    0,  246,    0,    0,
  174,  253,    0,    0,    0,  580,    0,    0,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,  174,    0,    0,    0,    6,    0,    0,    0,    0,
    0,    0, 1428,    0,    0,  285, 1319, 1320,    0, 1321,
    0,    0, 1322,  174,  415,  236,    0,    0,  581,  174,
    0,    0,    0,    0,  237,    0, 1323,    0,  266,    0,
  247,  263, 1324,  264,    0,    0,  285,    0,  238,    0,
  248,    0,  174,  285,  239,  240,  267,  285,  285,    0,
  285,  268,    0,  285,  249,  250,  251,  252,  163,  164,
    0,  174,    0,  579,    0,    0,    0,  285,  253,    0,
  174,    0,    0,  285,    0,  241,  174,  254,  255,  256,
  257,  258,  259,  260,    0,    0,  261,  262,    0,    0,
    0,    0, 1325,    0,  174,    0,    0,    0,    0,    0,
    0,    0,    0,  243,  244,  984,    0,    0,  985,    0,
    0,   14,  236,    0,    0,  245,    0,    0,    0,  246,
    0,  237,    0,    0,    0,  266, 1326,  580,  263,    0,
  264,  174,    0,  285,    0,  238,   16,    0,    0,    0,
    0,  239,  240,  267,    0, 1429,    0, 1327,  268,    0,
    0,    0,  285,    0,  168,    0,    0,    0,    0,    0,
  641,  425,  423,    0,  424,    0,  426,  285,    0,    0,
  581,    0,  241,    0,    0,    0,    0,  285,    0,  811,
  810,  812,  247,    0,    0,    0,  285,    0,  285,    0,
    0,    0,  248,    0,    0,  285,    0,    0,    0,    0,
  243,  244,    0,    0,    0,    0,  249,  250,  251,  252,
  163,  164,  245,    0,    0,    0,  246,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,    0,  254,
  255,  256,  257,  258,  259,  260,    0,    0,  261,  262,
    0,    0,    0,    0,    0,    0,    0,    0,  993,    0,
    0,  985,    0,    0,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,  237,  266,    0,    0,  263,    0,
  264,  986,    0,    0,    0,    0,    0,    0,  238,  247,
    0,    0,    0,  267,  239,  240,    0,    0,  268,  248,
    0,    0,    0,    0,  425,  423,    0,  424,    0,  426,
    0,    0,    0,  249,  250,  251,  252,  163,  164,    0,
    0,    0,  811,  810,  812,  241,    0,  253,    0,    0,
    0,    0,    0,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,    0,    0,
    0,    0,    0,  243,  244,  997,    0,    0,  985,    0,
    0,    0,  236,    0,    0,  245,    0,    0,    0,  246,
    0,  237,  266,    0,    0,  263,    0,  264,    0,    0,
    0,    0,    0,    0,    0,  238,    0,    0,    0,    0,
  267,  239,  240,    0,    0,  268,    0,    0,    0,    0,
    0,  798,    0,    0,    0,    0,    0,    0,    0,  421,
    0,    0,    0,    0,    0,  422,    0,    0,  799,    0,
    0,    0,  241,    0,  986,    0,  266,    0,    0,  263,
    0,  264,  247,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  248,    0,  267,    0,    0,    0,    0,  268,
  243,  244,    0,    0,  800,    0,  249,  250,  251,  252,
  163,  164,  245,  801,    0,    0,  246,    0,    0,    0,
  253,  802,    0,    0,    0,    0,    0,    0,    0,  254,
  255,  256,  257,  258,  259,  260,    0,    0,  261,  262,
  803,    0,  804,    0,    0, 1005,    0,    0,  985,    0,
    0,    0,  236,    0,    0,    0,  805,    0,  806,  807,
  808,  237,  266,    0,    0,  263,    0,  264,    0,    0,
    0,  986,    0,    0,    0,  238,    0,    0,    0,  247,
  267,  239,  240,    0,  798,  268,    0,    0,    0,  248,
    0,    0,  421,    0,    0,    0,    0,    0,  422,    0,
    0,  799,    0,  249,  250,  251,  252,  163,  164,  809,
    0,    0,  241,    0,    0,    0,    0,  253,    0,    0,
    0,    0,    0,    0,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,  800,    0,    0,
  243,  244, 1008,    0,    0,  985,  801,    0,    0,  236,
    0,    0,  245,    0,  802,    0,  246,    0,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  238,  803,    0,  804,    0,    0,  239,  240,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  805,
    0,  806,  807,  808,    0,    0, 1013,    0,    0,  985,
    0,    0,    0,  236,    0,  266,    0,    0,  263,  241,
  264,  986,  237,    0,    0,    0,    0,    0,    0,  247,
    0,    0,    0,  267,    0,    0,  238,    0,  268,  248,
    0,    0,  239,  240,    0,    0,    0,  243,  244,    0,
    0,    0,  809,  249,  250,  251,  252,  163,  164,  245,
    0,    0,    0,  246,    0,    0,    0,  253,    0,    0,
    0,    0,    0,  241,    0,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,    0,    0,
    0,    0, 1016,    0,    0,  985,    0,    0,    0,  236,
    0,  243,  244,    0,    0,    0,    0,    0,  237,    0,
    0,    0,    0,  245,    0,    0,    0,  246,  986,    0,
    0,    0,  238,    0,    0,    0,  247,    0,  239,  240,
    0,    0,    0,    0,    0,    0,  248,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0,    0,  241,
    0,    0,    0,    0,  253,    0,  266,    0,  265,  263,
    0,  264,  986,  254,  255,  256,  257,  258,  259,  260,
  247,    0,  261,  262,  267,    0,    0,  243,  244,  268,
  248,    0,    0,    0,    0,    0,    0,    0,    0,  245,
    0,    0,    0,  246,  249,  250,  251,  252,  163,  164,
    0,    0,    0,    0,    0,    0,    0,    0,  253,    0,
    0,    0,    0,    0,    0,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0, 1019,  261,  262,  985,    0,
    0,    0,  236,    0,    0,    0,    0,    0,    0,    0,
  266,  237,    0,  263,    0,  264,    0,    0,  986,    0,
    0,    0,    0,    0,    0,  238,  247,    0,  267,    0,
    0,  239,  240,  268,    0,    0,  248,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  250,  251,  252,  163,  164,    0,    0,    0,    0,
    0,    0,  241,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,  254,  255,  256,  257,  258,  259,  260,
    0,    0,  261,  262,    0,    0, 1227,    0,    0,    0,
  243,  244,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  245,    0,    0,    0,  246,  842,    0,  842,
  842,    0,  842,    0,    0,    0,    0,    6,    0,    0,
    0,    0,    0,    0, 1318,  842,    0,    0, 1319, 1320,
  842, 1321,    0,    0, 1322,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1323,    0,
    0,    0,    0,  236, 1324,    0,    0,    0,    0,    0,
    0,  986,  237,    0,    0,    0,    0,    0,    0,  247,
    0,    0,    0,    0,    0,    0,  238,    0,    0,  248,
    0,    0,  239,  240,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  249,  250,  251,  252,  163,  164,    0,
    0,    0,    0,    0,    0,    0,    0,  253,    0,    0,
    0,    0,    0,  241, 1325,    0,  254,  255,  256,  257,
  258,  259,  260,    0,    0,  261,  262,    0,  522,    0,
    0,    0,  523,   14,    0,    0,    0,  236,    0,  242,
  714,  243,  244,    0,    0,    0,  237,  266, 1326,    0,
  263,  524,  264,  245,  525,    0,    0,  246,   16,    0,
  238,    0,    0,    0,    0,  267,  239,  240,    0, 1327,
  268,    0,    0,    0,    0,    0,  168,    0,    0,    0,
    0,  266,    0,    0,  263,    0,  264,    0,    0,    0,
    0,    0,    0,    0,    0,  526,    0,  241,    0,  267,
    0,  527,  528,  529,  268,  530,  531,  532,    0,  533,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  247,    0,    0,  242,    0,  243,  244,    0,    0,  534,
  248,  535,    0,    0,  842,    0,    0,  245,    0,    0,
    0,  246,    0,  842,  249,  250,  251,  252,  163,  164,
    0,    0,    0,    0,    0,    0,    0,  842,  253,    0,
    0,    0,  536,  842,  842,    0,    0,  254,  255,  256,
  257,  258,  259,  260,    0,    0,  261,  262,    0,  537,
    0,    0,    0,    0,    0,    0,    0,    0,  415,    0,
  266,  643,    0,  263,  842,  264,    0,    0,    0,    0,
    0,  538,    0,    0,  247,    0,    0,    0,  267,    0,
    0,    0,    0,  268,  248,    0,  226,    0,    0,    0,
  842,    0,  842,  842,    0,    0,    0,    0,  249,  250,
  251,  252,  163,  164,  842,    0,  539,  540,  842,    0,
    0,    0,  253,    0,    0,    0,    0,  541,  542,    0,
    0,  254,  255,  256,  257,  258,  259,  260,    0,  266,
  261,  262,  263,    0,  264,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  236,    0,    0,  267,    0,    0,
    0,    0,  268,  237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  238,    0,    0,
    0,  842,    0,  239,  240,    0,    0,    0,  236,    0,
    0,  842,    0,    0,    0,    0,    0,  237,    0,    0,
    0,    0,    0,    0,    0,  842,  842,  842,  842,  842,
  842,  238,    0,    0,  241,    0,    0,  239,  240,  842,
    0,  266,    0,    0,  263,    0,  264,    0,  842,  842,
  842,  842,  842,  842,  842,    0,    0,  842,  842,  267,
    0,    0,  243,  244,  268,    0,    0,    0,  241,  410,
    0,    0,    0,    0,  245,    0,    0,    0,  246,  410,
  410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
  410,  410,  410,  410,  242,    0,  243,  244,  410,  410,
    0,    0,    0,    0,    0,    0,    0,    0,  245,    0,
    0,    0,  246,    0,    0,    0,    0,  236,    0,    0,
    0,    0,    0,    0,    0,  415,  237,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1494,
  238,  247,  263,    0,  264,    0,  239,  240,    0,    0,
    0,  248,    0,    0,    0,    0,    0,  267,    0,    0,
    0,    0,  268,    0,    0,  249,  250,  251,  252,  163,
  164,    0,    0,    0,    0,  247,    0,  241,    0,  253,
    0,    0,    0,    0,    0,  248,  236,    0,  254,  255,
  256,  257,  258,  259,  260,  237,    0,  261,  262,  249,
  250,  251,  252,  163,  164,  243,  244,    0,    0,  238,
    0,    0,    0,  253,    0,  239,  240,  245,    0,    0,
    0,  246,  254,  255,  256,  257,  258,  259,  260,    0,
    0,  261,  262,    0,    0,    0,    0,    0,    0,    0,
  127,    0,    0,    0,    0,    0,  241,    0,    0,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,  140,  141,  142,  143,    0,    0,    0,  236,  144,
  145,    0,    0,    0,  243,  244,    0,  237,  266,    0,
    0,  263,    0,  264,  247,    0,  245,    0,    0,    0,
  246,  238,    0,    0,  248,    0,  267,  239,  240,    0,
    0,  268,    0,    0,    0,    0,    0,    0,  249,  250,
  251,  252,  163,  164,    0,    0,    0,    0,    0,    0,
    0,    0,  253,    0,    0,    0,    0,    0,  241,    0,
    0,  254,  255,  256,  257,  258,  259,  260,    0,    0,
  261,  262,  842,    0,    0,  842,    0,  842,    0,    0,
    0,    0,    0,  247,    0,    0,  243,  244,    0,    0,
  842,    0,    0,  248,    0,  842,  236,    0,  245,    0,
    0,    0,  246,    0, 1011,  237,    0,  249,  250,  251,
  252,  163,  164,    0,    0,    0,    0,    0,    0,  238,
    0,  253,    0,    0,    0,  239,  240,    0,    0,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  241,    0,    0,    0,
    0,    0,    0,    0,    0,  247,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  248,    0,    0,    0,    0,
    0,    0,  242,    0,  243,  244, 1173,    0,    0,  249,
  250,  251,  252,  163,  164,    0,  245,    0,    0,    0,
  246,    0,    0,  253,    0,    0,    0,    0,    0,    0,
    0,    0,  254,  255,  256,  257,  258,  259,  260,    0,
    0,  261,  262,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,  237,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  238,    0,
    0,    0,    0,  247,  239,  240,    0,    0,    0,    0,
    0,    0,    0,  248,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  249,  250,  251,
  252,  163,  164,    0,    0,  241,    0,    0,    0,  842,
    0,  253,    0,    0,    0,    0,    0,    0,  842,    0,
  254,  255,  256,  257,  258,  259,  260,    0,    0,  261,
  262,    0,  842,  243,  244,    0,    0,    0,  842,  842,
    0,  499,    0,    0,    0,  245,    0,    0,    0,  246,
  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
  138,  139,  140,  141,  142,  143,    0,    0,    0,  842,
  144,  145,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  842,  842,    0,
    0,    0,    0,    0,    0,    0,  206,    0,    0,  842,
  206,    0,  247,  842,    0,    0,    0,    0,    0,    0,
    0,    0,  248,    0,    0,  206,    0,    0,    0,  206,
    0,    0,  206,    0,    0,    0,  249,  250,  251,  252,
  163,  164,    0,    0,    0,    0,    0,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,    0,  254,
  255,  256,  257,  258,  259,  260,    0,    0,  261,  262,
    0,    0,    0,  206,    0,    0,  842,    0,    0,  206,
  206,  206,    0,  206,  206,  206,  842,  206,    0,  784,
    0,    0,    0,  523,    0,    0,    0,    0,    0,    0,
  842,  842,  842,  842,  842,  842,    0,  206,  785,  206,
    0,    0,  524,    0,  842,  525,    0,    0,    0,    0,
    0,    0,    0,  842,  842,  842,  842,  842,  842,  842,
    0,    0,  842,  842,    0,    0,    0,    0,    0,    0,
  206,    0,    0,    0,    0,   76,    0,    0,    0,    0,
    0,    0,    0,    0,  522,    0,  526,  206,  523,    0,
    0,    0,  527,  528,  529,    0,  530,  531,  532,    0,
  533,    0,  206,    0,    0,    0,  206,  524,    0,  206,
  525,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  534,  206,  535,    0,    0,  206,    0,    0,  206,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,  206,    0,    0,    0,    0,
    0,  526,    0,  536,    0,  206,  206,  527,  528,  529,
    0,  530,  531,  532,    0,  533,    0,  522,    0,  206,
  537,  523,    0,    0,    0,  206,  206,  206,    0,  206,
  206,  206,    0,  206,    0,  534,    0,  535,    0,    0,
  524,    0,  538,  525,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  206,    0,  206,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  536,    0,
    0,    0,    0,    0,    0,    0,    0,  539,  540,    0,
    0,    0,    0,    0,  526,  537,  206,    0,  541,  542,
  527,  528,  529,    0,  530,  531,  532,    0,  533,    0,
  120,    0,    0,  206,  120,    0,    0,  538,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  534,    0,
  535,    0,  226,  120,    0,  206,  120,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  539,  540,    0,    0,    0,    0,    0,    0,
    0,  536,    0,  541,  542,    0,    0,    0,    0,    0,
  206,  206,    0,    0,    0,    0,    0,  120,  537,    0,
    0,  206,  206,  120,  120,  120,    0,  120,  120,  120,
    0,  120,    0,    0,    0,    0,    0,    0,    0,    0,
  538,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  120,    0,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  539,  540,    0,    0,    0,
    0,    0,    0,    0,  120,    0,  541,  542,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  120,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  120,  120,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
  120,
};
static short yycheck[] = {                                      54,
   16,   54,    4,   46,    4,   55,   93,    0,   54,   47,
  215,  215,  215,   53,   58,  429,   48,  343,  347,   57,
  509,  402,  454,  351,  580,   75,  582,   59,  435,   60,
  482,   83,  351,  485,  598,   78,   80,  451,  494,  491,
  322,   79,  415,  124,  702,  685,  491,  857,   86,   45,
   40,   82,   40,    0,  692,  574,    0,   73,  223,   58,
  102,   41,  104,   42,   44,   81,  121,    0,  233,  305,
   58,  103,  113,  315,   42,    0,   40,    0,  366,  749,
    0,    0,   44,   59,  957,   40,   59,   45,  544,   40,
  917,   41,  702,   63,  689,   41,  613,  115,    0,    0,
 1074,  928,  189,   44,   40,   44,  654,   41,   41,  149,
  179,   44,   59,   44,   44,   59,   44,    0,   41,  941,
  947,   41,   41,   45,   44, 1089,   59,   44,    0,   45,
  258,  260,  461,  397,   59,  175,   59,  288,  702,   59,
   59,  228,  468,  469,  470,  471,    0,  264,  318,  264,
   45,    0,    0,    0, 1304, 1037, 1403,   59,   59,   44,
  302,  274,  217,  491,  217,  288, 1130,  372,  372,  372,
  302,  231,  491,    0,  260,   40,   59,  284,  667,  307,
   44, 1093,   16,    0,  258,   44,   44,   59,  517,  221,
   40, 1461,    0,  309,  277,   45,   44,  339,  268,  231,
    0,  273, 1030, 1222, 1032,   59,  695,  696,   45,  378,
   59,   59,   59,  406,   41,    0,  265,   44,   12,    0,
  385,   91,  263,  264,    0,  266,   63,  260,  309,    0,
   12,  444,   59,  307,  522,  357,  339,  198,   41,   73,
  349,   44,   59, 1262,  456,  206,  289, 1139,  461,  358,
  305,   59,  305,  308,  303,  308,   59,  813,  814,   59,
  716,  293, 1532,  346,  457,   41,  408,    0,   44,  341,
   41,  304, 1519,   44,   59,  330,  418,  330,   59,  321,
  449, 1108,  302,   59, 1554,  737,  328,  743,   59,  418,
  332,  419,    0,  335,  274,  285,  366,  412,    0,    0,
  681,  443, 1549, 1125,  344,  475,  346,    0,  430,  437,
  461,  443,  393,  830,  258,  109,  262,  865,  358,  362,
 1232,    0,  839,  840,   41,  258,   59,  109,  360,  297,
  310,  989,  418,  440, 1308, 1485,  452,   41,  461,  399,
  443,  274,  262,  471,  461,  419,  384,    0,  904,  381,
  757,   59,  616,   41,  467,    0,    0,   59,   59,  397,
  392,  402,  394,  307,  366,  406,   59,  399, 1038,  321,
 1243, 1521,  967, 1201,  307, 1267,  310,  310,  319,  420,
   59,  422,  423,  424,  425,  426,  427,  405,  305,  430,
  321,  321,  264,  598,  598,  598,  319, 1361, 1225,  319,
  319, 1228,  322, 1230,  269,  264,   59,  277,  403,  329,
  329,  258,  332,  332,   59,   59,  336,    0,  341,  488,
 1302,  341,  341,  443,  344,  989,  466,  329,   40, 1207,
  332,  395,  412,   45, 1261,  411,  432,  288,  411,   42,
  360,  387,  607, 1081, 1114,  384,  682,  397,  349,  491,
  301,   63, 1274,  972,  835,  944,    0,  699,  258,  915,
  307, 1119,  461,  459,  384,  388,  510,  387,  388,  388,
  926,  461,  512,  461,  397,  419,   59,  397,  397,  412,
  329,  329,  461,  332,  332,  368,  419,  467,  264,  459,
  946,  453,  319,  461,  414,  397,  344,   41,  702,  702,
  782,  459,  329,  791,  437,  332,  461,  307,  455, 1119,
  461,  566,  448,  566,  341,   59,  441,  344,  441, 1075,
  522,  441,  441,  563,  564, 1073,  398, 1354,  486, 1046,
  455,  459,  455,  453,  467,  455,  455,  459,  471,  441,
 1096,  582, 1369,  459,  599,  321,  599,  332,  397,  397,
  329,  453,  437,  455,  273, 1119,  410,    0,    0,    0,
  368,  388,  844,  264,  459,  488,  461,  893,  488,  488,
  397, 1381,  419,  575,  262,  575,  617,  618,  616,  620,
  397,  622,  432, 1221,  625,  626,  627,  628,  629,  630,
  963,  455,  441,  441, 1083,  432, 1085,  455,   41,  640,
   41,   44,   44,   44, 1049,  453,  455,  455,  411,  459,
  343,  264,  397,  384,  441,  332,   59,   59,   59,  419,
  264, 1448,  459, 1281,  441,  329,  453,  682,  332,  682,
  262,  326,  958,  688,  689,  688,  689,  437,  455,  341,
  681,  349, 1131,  461,  676,    0,  678, 1061,  341,    0,
 1106,  691,  692,  287,  698,  820,  441,  260,  823,  257,
  863,  488,  341,    0,  321,  444,  708, 1307,    0, 1447,
  455,  471,   59,  406,  319,  257,  409,  453,  406, 1135,
  397,  461,  461,    0,  296,  461,   41,    0,  970,   44,
    0,  352,  425,  397,  736,  737,  341,    0,  302,  387,
   41,  304,   41,  613,   59,  320,  461,   44,   59, 1487,
 1117,   44,  793,  301,  795,    0, 1123, 1281,  451,  461,
    0, 1049,   59,  767,  768,  769,   59,   59,   41,  457,
 1049,   41,  260,  735,   44,  339,  431,  335,   41,  388,
  742,  353,   59,  438,  403,  398,   59,   41,  780,   59,
 1306,    0,  754,  335,  398,  387,   59,  798,  799,  800,
  343,   41,  803,  804,  805,  353,  807,  808,  809,  810,
  811,  812,  824,  434,   59,  319,  304,    0, 1234,   59,
  437,  568, 1155,  821,  989,  989,  401,  446,  332,  791,
    0,  822,  441,    0,  835,  378,    0,  341,    0, 1231,
    0,    0,    0,    0, 1133, 1459,   42,  848,  302,  864,
   59,   47,    0, 1269,    0,  856,  410,  858, 1199, 1251,
 1309,  262,  863,  406, 1313,    0,  409,  442,  462,  463,
  278, 1036, 1037, 1038,  284,  349,   59,   41,  260,  443,
 1494,  260,  425,   41,  388,  339,  458,  459,  460,   59,
  462,  463,   59,  397,    0,   59,  418,   59,   44,   59,
   59,   59,   59,  459, 1420, 1317,  260, 1423,  451,  481,
  482,   59,  320,   59,  486,  487,  319,  406,  319,  322,
    0,  322,  304,  445,   59,  304,  329,  329,  329,  332,
  332,  332, 1218,  336,  461,  336,  425,  441,  341,    0,
  341,  344,  344,  344,  322,  960,   63,  960,  461,  953,
  304,  455,  967,   59,  967, 1119, 1119,  360,  336,  360,
  830,  262,    0,  262,  711,  969,    0,   84,    0,  839,
  461,  975,  264,  720,    0,  385,  938,  461,  938,   59,
   41,  384,  360,  384,  488,  388,  387,  388,  462,  463,
  265,  461,  398,  401,  397,  397,  397, 1371,   59, 1000,
 1001,  459, 1003, 1004,  319, 1454,   44,   41,  262,   41,
 1011,  414,   44,  414,  329,   42,   43,  332,   45,  264,
   47,   59,  319,  323,  771,   59,  341,   59,  303,  344,
  440,  437,  343,   59,  442,  461,  414,    0,  441,  441,
  441,  461,  319,    0,  341, 1208,  319,  457, 1564,  319,
  453,  453,  453,  455,  455,  264,  319,  402,  461, 1074,
  279, 1074,  332,  338,  341,  471,  329,  378,  341,  332,
  263,  341,  338,  388, 1036, 1037,  459, 1451,  341,  319,
    0, 1081,  397,  344,  280,  488,  387,  488,  387,  329,
  286, 1092,  332,   44,  264,  406,   59,  264,  409,  259,
 1442,  341,   59,  486,  264,   44,  398,  264,  369,  375,
  270,  330,  317,  318,  425,  388, 1281, 1281,  388,  278,
  313,  280,  388,    0,  397,  388,  441,  397,  723,  378,
  278,  324,  280,  387,  397, 1136,  323, 1302,  453,   59,
  451, 1483,   93,    0,    0,  364, 1146,    0,  388, 1149,
 1112, 1152, 1112,  398,   93,  319,   40,  397,  264,  338,
  343,  319,  344,  382,   41, 1166,  427,   44,  441,   46,
  419,  441, 1173,  488,  332,    0, 1518,  341,  441,   44,
  927,  343,   59,  341,   61,  455,  384,  369,   41,  398,
  453,   44,  418,  404,  384,  378,  375,    0, 1199,  461,
  461,  441,   59,   59,  384,    0,   59, 1208,    0,  388,
  421, 1226, 1227, 1226, 1227,  488,  378,  466,  488,  445,
 1226, 1221,  322,  406,  388,  488,  409,  265,  398,  384,
  388,  398,    0,  397,   59,  428,  336,  322,  398,  397,
  435,  398,  425, 1235,  406,  427,   41,  409,  488,   44,
  379,  336,  278,  280,  280,   45,   59,  338,  319,  286,
  360,   44,   44,  425,   59,  303,  461,   59,  451,   41,
  386,   41,  401,   41,   44,  360,   44,  441, 1279,  408,
  341,  319,    0,  441,  384,  319,   58, 1288, 1289,  451,
  322,   59,  398, 1308,  321, 1308, 1459,  329,   41,  384,
  332,   44,    0,  341,  336,  419, 1353,  341,    0, 1319,
   93,   93,  344,  442,  414,   41,   42,   43,    0,   45,
 1335,   47, 1335,   93, 1325,  920,  921,  388,  360,  414,
  488, 1494,   42,   43,  461,   45,  397,   47,    0,    0,
 1302,   59,   40,   41,   42,   43,   44,   45,   46,   47,
   93,  274,  384,  379,  388,   42,   43, 1349,   45,  279,
   47,   59,   60,   61,   62,  397,  459,   59,  461, 1322,
  260,    0,  967, 1374,    0, 1375,  319,   59, 1378,  353,
  441,  301,  414,  258,  462,  463,  261,  264,  265,   40,
 1437,    0,    0,   91, 1370,   93,  273,   59,   59,  462,
  277,   42,   43,  280,   45,  379,   47,  441,  285,  441,
  330, 1426,  302, 1426,  392,  393, 1417,  272, 1416,  296,
  259,  453,  299,  455,  314,  278,  303,  280,  305,  349,
   59,  270,  307,   59,  289,  288,   44,    0,  358,    0,
   42,   43,  319,   45,  364,   47, 1461,  280, 1461,  339,
   59,   59,  425,  286,  259,    0,    0,   41, 1459, 1469,
   44,   46,  382,  340,  341,  270, 1442,  462,  463,  346,
  347,  348,  317,  350,  351,  352,  264,  354,    0,  334,
 1456, 1426,  686,  687,   41,   42,   43, 1502,   45, 1502,
   47,    0, 1507, 1494, 1507,  319,   59,  374,   59,  376,
   42,   43,    0,   45,  338,   47,  296, 1483,  363, 1471,
  278, 1471,  280, 1489,   59,   59, 1461, 1532,  408, 1532,
  288, 1536, 1537, 1536, 1537, 1528,  379,    0,  418,  461,
  407,  384,   41,  301,  453,   44,    0,   59,  466, 1554,
  468, 1554, 1518, 1558,   45, 1558,  337,  424,  401, 1525,
   59,    0,  403,  443,  280,  408, 1571, 1502, 1571,  321,
  286,   59,   63,  353,  262,  341,  264,   40,   41,  446,
  280,   44,  319,    0,  272,  430,  286,   41,   42,   43,
   44,   45,  280,   47,  461, 1444,   59, 1532,  286,  442,
    0,  289,    0,  280,  403,   59,   60,   61,   62,  286,
    0,   40,  312,   41,  481,  482,   44,    0, 1335, 1554,
   59,  379,    0,  384,  312,  492,  493,   41,   91,  384,
   44,  319, 1481,  321,  322,  312, 1030,  325, 1032,   93,
  462,  329,   59,  401,  332,   40,  334,   40,  336,  280,
  408,   40,   40,  341,  342,  286,  344,  462,  357,   59,
    0,   59,   41,   41,  444,   44,   44,   40, 1517,   59,
  262,   41,  360,  361,   44,  363,   59,    0,  458,  459,
  460,   59,  462,  463,  442,   40,  343,   40,  280,  377,
   40,  379,  380,  381,  286,  394,  384,  396, 1547,  387,
  388,  481,  482,  483,  484,  485,  486,  487,  462,  397,
  490,  491,   41,  461,   41,   44,    0,   44,  329,   59,
  419,  378,   41,  411,  322,   44,  414,   40,  279,  295,
  262,  329,   41,  280,  332,   44,   59,  321,  336,  286,
  306,   41,  430,   91,   44,  444,  344,  313,  280,  406,
  301,   44,  409,  441,  286,   46,  437,   41,   42,   43,
   44,   45,  360,   47,  451,  453,   41,  455,  425,   44,
  435,  362,  338,  461,  322,   59,   60,   61,   62,  330,
  418,   41,   42,   43,  443,   45,  384,   47,  336,  358,
 1507,  288,  403,   44,  451,  258,  344,  412,  349,  397,
  488,   41,  470,   41,   44,  296,   44,  358,  262,   93,
  264,  274,  360,  364,  277,  278,  414,  280,  272, 1536,
 1537,  419,  285,  373,   41,  288,  280,   44,  439,   61,
  287,  382,  286,  444,   40,  289,   40,  403,  301,  450,
  264, 1558,   44,  441,  307,  321,   44,  310,  437,  461,
  461,  403,  279,    0, 1571,  453,   41,  455,  312,  461,
    0,  461,  353,  453,   44,  319,  414,  321,  322,  435,
  322,  325,  429,  439,  301,  329,   42,   43,  332,   45,
  334,   47,  336,   61,  336,   44,  280,  341,  342,  383,
  344,  349,  344,   59,   41,   42,   43,   44,   45,   44,
   47,   41,  278,  330,   44,  301,  360,  361,  360,  363,
  437,  398,   59,   60,   61,   62,  379,  264,  461,   59,
  398,  459,  349,  377,  448,  379,  380,  381,  277,  471,
  384,  358,  448,  387,  388,  400,   40,  364,  401,  350,
   40,  319,   91,  397,  322,  408,   93,   40,   40,  412,
  264,  329,  384,  412,  332,  382,  419,  411,  336,   44,
  414,  383,  414,  341,  390,   40,  344,  458,  459,  460,
   40,  462,  463,  437,  437,  465,  430,  318,  262,  442,
  264,   40,  360,  458,  459,  460,  321,  441,  272,  321,
  481,  482,  264,   41,   44,  486,  487,  321,  280,  453,
   40,  455,  286,   44,  467,  289,  384,  461,  471,  329,
  388,  486,  487,  449,  459,   45,   40,  274,  277,  397,
  280,   40,  285,    0,  345,  278,  286,  345,  312,  387,
  387,  387,  419,   63,  488,  319,  414,  321,  322,  301,
  417,  325,   40,   40,  419,  329,  357,  401,  332,  403,
  334,  418,  336,  407,  408,  409,  461,  341,  342,   40,
  344,   44,  368,  441,   41,   42,   43,   44,   45,  386,
   47,   44,  321,   41,  389,  453,  360,  361,  344,  363,
  274,  389,   59,   60,   61,   62,  389,  332,    0,   42,
   43,  266,   45,  377,   47,  379,  380,  381,   44,  300,
  384,   40,  264,  387,  388,   41,   59,  423,   58,  461,
  488,   41,   41,  397,  280,  262,   93,  264,  258,   41,
  286,  455,  395,  310,  310,  272,   41,  411,   41,   41,
  414,  441,   44,   40,   40,  353,  262,  277,  278,   40,
  280,   45,  289,   40,   40,  285,  430,   59,  288,   40,
   40,  328,   41,   42,   43,   40,   45,  441,   47,   63,
   40,  301,   40,   40,   40,  312,   40,  307,   40,  453,
   40,  455,  319,   40,  321,  322,   44,  461,  325,   41,
  461,  488,  329,    0,  423,  332,  391,  334,  271,  336,
  288,  447,  392,  408,  341,  342,  387,  344,  387,  387,
   41,   41,   42,   43,  488,   45,  387,   47,  387,  379,
    0,  387,   41,  360,  361,  278,  363,   40,  386,   41,
   41,  418,   41,  437,   41,  280,   43,   44,   45,   44,
  377,   40,  379,  380,  381,  443,  397,  384,  339,  379,
  387,  388,   59,   60,   61,   62,  302,  443,  339,  302,
  397,   41,   41,   41,   44,  321,  353,  386,  372,  372,
  356,  401,   41,   41,  411,   41,  296,  414,  408,   59,
   41,   41,   41,   41,   41,   41,   93,  417,   41,  419,
   41,   41,   41,  430,  803,  262,  805,  264,  807,  808,
   41,  810,  811,  812,  441,  272,   41,  437,   41,   40,
   40,   59,  442,   41,   42,   43,  453,   45,  455,   47,
  341,   59,  289,   59,  461,   59,  341,   59,   41,  295,
   59,  353,  345,  369,   40,   59,   59,  280,    0,  341,
  306,  471,  384,  286,   44,  312,  461,  313,   41,  384,
  384,  488,  319,  344,  321,  322,   41,   41,  325,   41,
  326,   44,  329,  411,   44,  332,  436,  334,  305,  336,
  302,  443,   40,   59,  341,  342,  278,  344,  280,   41,
  294,   43,   44,   45,  305,  464,  288,   44,   44,   41,
  308,    0,  338,  360,  361,  384,  363,   59,   60,   61,
   62,  280,  296,  384,   40,  264,  321,  286,  264,  278,
  377,  390,  379,  380,  381,  459,  264,  384,  412,  471,
  387,  388,   40,  264,  444,  310,  459,  344,  344,  271,
  397,   93,  437,  344,  344,  459,  271,  403,  458,  459,
  460,   41,  462,  463,  411,   40,   40,  414,    0,   41,
  280,   41,   59,   44,  420,  262,  286,  264,  305,   41,
   59,  481,  482,  430,    0,  272,  486,  487,    0,  435,
  490,  491,    0,  439,  441, 1033,  442,  379,   12,    0,
  225,  233,  289,  607,  450,  224,  453,  972,  455,   41,
  570,   43,   44,   45,  461,  783,  970,   77,  278,  401,
  280,  959, 1119,  469,  967,  312,  408,   59,   60,   61,
   62, 1252,  319,  517,  321,  322,    0,  313,  325,  348,
   41,  488,  329,   44,  418,  332,  951,  334,  960,  336,
  330, 1232,  896,  330,  341,  342,  718,  344,   59, 1234,
  442,   93,   41,   42,   43,  717,   45, 1476,   47,  496,
  444, 1479,  280,  360,  361, 1480,  363,   41,  286, 1511,
   44,  354,  708, 1090,  458,  459,  460, 1557,  462,  463,
  377, 1431,  379,  380,  381,   59, 1508,  384,  372, 1136,
  387,  388,  567, 1442, 1263,  778,  962,  481,  482,  335,
  397,  498,  486,  487,    0,  316,  490,  491,  323,  379,
  262,  764,  264, 1121,  411,  558,  756,  414,   13,  297,
  272,  437,  676,  441,  688,  430,   41,   42,   43, 1311,
   45,  401,   47,  430, 1208,  431,  654,  289,  408, 1525,
  451, 1489, 1308, 1573,  441,   41,  612,  836,   44,  427,
 1002, 1281,   -1,    0,  371,   -1,  453,   -1,  455,   -1,
  312,   -1,   -1,   59,  461,   -1,   -1,  319,   -1,  321,
  322,   -1,  442,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,  488,  344,   -1,   41,   -1,   43,   44,   45,   41,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,  360,  361,
   -1,  363,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
  262,   -1,  264,    0,   -1,  377,   -1,  379,  380,  381,
  272,   -1,  384,   -1,   -1,  387,  388,   -1,   41,   42,
   43,   -1,   45,   -1,   47,  397,   93,  289,   -1,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,    0,  278,   -1,  280,
  312,   -1,   -1,   -1,   -1,   -1,   -1,  319,  430,  321,
  322,   -1,   59,  325,   -1,   -1,   -1,  329,   -1,  441,
  332,  280,  334,   -1,  336,   -1,   -1,  286,   -1,  341,
  342,  453,  344,  455,  278,   -1,  280,   41,    0,  461,
   44,  285,   -1,   -1,  288,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   -1,   59,   -1,  301,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,  488,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   41,
    0,    0,   44,   -1,   -1,  397,   -1,   -1,   41,   42,
   43,   -1,   45,   -1,   47,  280,  262,   59,  379,  411,
   -1,  286,  414,   -1,   -1,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   41,   42,   43,   -1,   45,  430,   47,
  401,   41,   41,   -1,   44,   44,   -1,  408,   -1,  441,
   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,   -1,   59,
   59,  453,   -1,  455,    0,  262,   -1,  264,   -1,  461,
   -1,   -1,   -1,  319,   -1,  272,  322,  401,   -1,   -1,
   -1,  442,   -1,  329,  408,   -1,  332,   -1,  280,   -1,
  336,   -1,  289,   -1,  286,  341,  488,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,    0,  360,  312,   -1,   -1,  442,   -1,
   -1,   -1,  319,   59,  321,  322,   -1,  280,  325,   -1,
   -1,   -1,  329,  286,   -1,  332,   -1,  334,  384,  336,
  280,  387,  388,   -1,  341,  342,  286,  344,   -1,   -1,
   -1,  397,  279,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  360,  361,   -1,  363,   -1,  414,   -1,
   -1,   -1,   59,   -1,  301,   -1,   -1,    0,  262,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,
  397,   -1,   -1,  330,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,   41,   -1,
  262,   44,  349,   -1,   -1,   -1,   -1,   -1,   -1,    0,
  357,  358,   -1,  430,   -1,  319,   59,  364,  322,   -1,
   -1,   -1,  488,   -1,  441,  329,   -1,  280,  332,   -1,
   -1,   -1,  336,  286,   -1,  382,  453,  341,  455,   -1,
  344,   -1,  262,   -1,  461,  280,    0,  394,   -1,  396,
   41,  286,  280,   44,   -1,   -1,  360,  319,  286,  278,
  322,  280,   -1,   -1,   -1,   -1,   -1,  329,   59,  288,
  332,  488,  419,   -1,  336,   -1,   -1,   -1,   -1,  341,
  384,   -1,  344,  387,  388,   -1,   -1,   41,   -1,   -1,
   44,  260,   -1,  397,   -1,    0,   -1,  444,  360,  319,
   -1,   -1,  322,   -1,   -1,   59,  262,   -1,   -1,  329,
  414,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,
   -1,  341,  384,   -1,  344,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,  302,   -1,  397,   41,  441,   -1,   44,
  360,   -1,   -1,   -1,   -1,  314,   -1,   -1,  260,  453,
   -1,  455,  414,   -1,   59,  262,   -1,   -1,   -1,    0,
  379,   -1,   -1,  319,  384,   -1,  322,  387,  388,   -1,
  339,   -1,   -1,  329,   -1,   -1,  332,  397,   -1,  441,
  336,   -1,  401,   -1,  488,  341,   -1,   -1,  344,  408,
  302,  453,   -1,  455,  414,   -1,   -1,   -1,   -1,   -1,
   41,    0,  314,   44,  360,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  319,   -1,   -1,  322,  328,   -1,   59,  262,
   -1,  441,  329,  442,   -1,  332,  488,  339,  384,  336,
   -1,  387,  388,  453,  341,  455,   -1,  344,   -1,  408,
   -1,  397,   41,    0,   -1,   44,   -1,   -1,   -1,  418,
  306,   -1,   -1,  360,   -1,   -1,   -1,  313,  414,   -1,
   59,  317,  318,   -1,   -1,   -1,   -1,  258,  488,   59,
   -1,   -1,   -1,   -1,  443,   -1,  319,  384,   -1,  322,
  387,  388,  338,   -1,   41,  441,  329,   44,  279,  332,
  397,   -1,  461,  336,   -1,   -1,  408,  453,  341,  455,
   -1,  344,   59,   -1,   -1,   -1,  418,  414,  262,   -1,
  301,   -1,   -1,   -1,   -1,   -1,  307,  360,  473,  474,
  475,  476,  477,  478,  479,  480,   -1,   -1,   -1,   -1,
   -1,  443,  488,    0,  441,   -1,   -1,   -1,   -1,  330,
   -1,  384,   -1,   -1,  387,  388,  453,  403,  455,  461,
   -1,   -1,   -1,   -1,  397,   -1,    0,  262,  349,   -1,
   -1,   -1,   -1,   -1,  420,  319,   -1,  358,  322,   -1,
   -1,  414,   -1,  364,   41,  329,   -1,   44,  332,  435,
   -1,  488,  336,  439,   -1,   -1,   -1,  341,   -1,   -1,
  344,  382,   59,   -1,  450,   -1,   -1,   41,  441,   -1,
   44,   -1,   -1,   -1,   -1,    0,  360,   -1,   -1,   -1,
  453,   -1,  455,  469,  319,   59,   -1,  322,   -1,   -1,
   -1,  262,   -1,   -1,  329,   -1,    0,  332,  419,   -1,
  384,  336,   -1,  387,  388,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,  397,   -1,  488,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,
  414,   -1,   -1,  262,   59,   -1,   -1,   41,  258,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,  384,
   -1,  322,  387,  388,   -1,   59,   -1,  441,  329,  279,
   -1,  332,  397,   -1,    0,  336,   -1,   -1,   -1,  453,
  341,  455,   -1,  344,   -1,  262,   -1,   -1,   -1,  414,
   -1,  301,   -1,   -1,   -1,   -1,   -1,  307,   -1,  360,
  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,   -1,  332,  488,   41,  441,  336,   44,   -1,
  330,   -1,  341,  384,   -1,  344,  387,  388,  453,   -1,
  455,   -1,   -1,   59,   -1,   -1,  397,   -1,    0,  349,
   -1,  360,  319,   -1,   -1,  322,   -1,   -1,  358,   -1,
   -1,   -1,  329,  414,  364,  332,   -1,   -1,    0,  336,
   -1,   -1,   -1,  488,  341,  384,   -1,  344,  387,  388,
   -1,   -1,  382,   -1,   -1,  262,   -1,   -1,  397,   41,
  441,   -1,   44,  360,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,  453,   -1,  455,  414,   -1,   59,  262,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  384,   -1,  419,
  387,  388,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  397,   -1,  441,   -1,   -1,   -1,   -1,  488,   41,   -1,
   -1,   44,  319,   -1,  453,  322,  455,  414,   -1,   -1,
   -1,   -1,  329,   -1,   -1,  332,   59,  262,   -1,  336,
   -1,   -1,   -1,   -1,  341,  319,   -1,  344,  322,   -1,
   -1,   -1,   -1,   -1,  441,  329,   -1,   -1,  332,  488,
   -1,   -1,  336,  360,   -1,   -1,  453,  341,  455,   -1,
  344,   -1,   -1,   -1,  278,   -1,  280,   -1,   -1,   -1,
   -1,   -1,   -1,    0,  288,   -1,  360,  384,   -1,   -1,
  387,  388,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
  397,  488,   -1,   -1,  329,   -1,    0,  332,   -1,   -1,
  384,  336,   -1,  387,  388,   -1,  341,  414,   -1,  344,
   -1,   -1,   -1,  397,   41,   -1,  262,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,
  414,   -1,   59,   -1,  441,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  384,
   -1,   -1,  387,  388,   -1,   59,   -1,  441,    0,   -1,
   -1,   -1,  397,   -1,   -1,  379,   -1,   -1,   -1,  453,
   -1,  455,   -1,  319,   -1,   -1,  322,   -1,   -1,  414,
  262,  488,   -1,  329,   -1,   -1,  332,  401,   -1,    0,
  336,   -1,   -1,   -1,  408,  341,   -1,   -1,  344,   41,
  262,   -1,   44,   -1,  488,   -1,  441,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  360,   -1,   -1,   59,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  442,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,  319,  384,   -1,
  322,  387,  388,   -1,  302,   -1,   -1,  329,   59,   91,
  332,  397,   -1,  488,  336,  313,  314,  319,  316,  341,
  322,  319,  344,   -1,   -1,   -1,   -1,  329,  414,   -1,
  332,   -1,    0,   -1,  336,  333,   -1,   -1,  360,  341,
   91,  339,  344,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  441,  329,   -1,  360,  332,
   -1,   -1,  384,  336,   -1,  387,  388,  453,  341,  455,
   -1,  344,   -1,   41,   -1,  397,   44,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,  360,   -1,   -1,
   -1,   59,  414,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  399,  488,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,  414,   -1,  387,  388,   -1,   -1,   -1,  441,
  418,   -1,   -1,   91,  397,   -1,   -1,   -1,   -1,    0,
   -1,  453,   -1,  455,  278,  433,  280,   -1,   -1,  441,
   -1,  414,   -1,   -1,  288,  443,   -1,   -1,   -1,   -1,
   -1,  453,  319,  455,   -1,  322,  454,  301,   -1,   -1,
   -1,   -1,  329,  461,   -1,  332,  488,   -1,  441,  336,
   41,   -1,   -1,   44,  341,   -1,  258,  344,   -1,   -1,
  453,   -1,  455,   -1,   -1,   -1,  488,   -1,   59,   -1,
   -1,   -1,  274,  360,   -1,  277,  278,   -1,  280,   -1,
   -1,   -1,   -1,  285,    0,   -1,  288,  258,   -1,   -1,
   -1,   -1,    0,   -1,  261,  488,   -1,  384,   -1,  301,
   91,  388,   -1,  274,   -1,  307,  277,  278,  310,  280,
  397,   -1,    0,   -1,  285,  379,  283,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  291,   41,   -1,  414,   44,   -1,
  301,  298,   -1,  300,   -1,  302,  307,  401,   -1,  310,
  307,   -1,   -1,   59,  408,   -1,   -1,  314,   -1,   -1,
   -1,   59,   -1,   41,  441,   -1,   44,   -1,   -1,   -1,
   -1,  328,   -1,   -1,   -1,   -1,  453,   -1,   -1,   -1,
  258,   59,  339,   -1,    0,   91,   -1,  379,  442,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
  278,   -1,  280,   -1,   -1,   -1,   -1,  285,   -1,  401,
  288,  488,   -1,   -1,   -1,   -1,  408,   -1,  379,    0,
  412,   -1,   -1,  301,   -1,   41,   -1,  419,   44,  307,
   -1,   -1,  310,   -1,   -1,   -1,   -1,   -1,   -1,    0,
  401,   -1,   -1,   59,   -1,  437,   -1,  408,   -1,  406,
  442,  412,   -1,   -1,   -1,   -1,  413,   -1,  419,  416,
   41,  418,  419,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  467,  437,  258,   59,  471,
   41,  442,   -1,   44,   -1,   -1,  443,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   -1,    0,   -1,  278,   59,  280,
   -1,  379,   -1,   -1,  285,   -1,  467,  288,   -1,   -1,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  301,   -1,   43,  401,   45,   -1,  307,   -1,   -1,  310,
  408,   -1,   -1,   -1,  412,   -1,   -1,   58,   -1,   -1,
   -1,  419,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  258,   -1,   59,   -1,   -1,   -1,   -1,  437,
  258,   -1,   -1,   -1,  442,   -1,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,  280,   -1,   -1,   -1,   -1,  285,
  258,  279,  288,   -1,   -1,   -1,   -1,   -1,   -1,  467,
   -1,   -1,   -1,  471,   -1,  301,   -1,   -1,  379,  277,
  278,  307,  280,  301,  310,   -1,   -1,  285,   -1,  307,
  288,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,
  401,   45,   -1,  301,   -1,   -1,   -1,  408,   -1,  307,
   -1,  412,  330,   -1,   58,   -1,   -1,   -1,  419,   63,
   -1,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  349,   -1,   -1,   -1,   -1,  437,   -1,   -1,  357,
  358,  442,  278,   -1,  280,   -1,  364,   -1,   -1,  285,
   -1,   -1,  288,  379,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  301,  467,   -1,   -1,   -1,
  471,  307,    0,   -1,   -1,  401,   -1,  278,   -1,  280,
   -1,  379,  408,   -1,  285,   -1,  412,  288,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,  278,   -1,  280,
  301,  419,   -1,  401,   -1,   -1,   -1,  288,   -1,   -1,
  408,  437,  430,   -1,   -1,   -1,  442,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   59,   -1,  258,   -1,  276,   -1,   -1,   -1,  437,
   -1,  467,   -1,  379,  442,  471,   -1,   -1,   40,  290,
   -1,   43,  293,   45,  279,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  401,   58,   -1,   -1,   -1,
   -1,   63,  408,  471,  315,   -1,  301,   -1,  379,   -1,
   -1,   -1,  307,  419,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  401,  437,   -1,   -1,   -1,  330,  442,  408,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
  401,   -1,   -1,  267,  349,   -1,  367,  408,   -1,   -1,
  371,   -1,  276,  358,   -1,  471,   -1,   -1,  379,  364,
   -1,  442,   -1,   -1,   -1,   40,  290,   -1,   43,   -1,
   45,   -1,  296,  297,   -1,   -1,   -1,  382,   -1,   -1,
   -1,  442,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,  315,   -1,   -1,   -1,   -1,   -1, 1153, 1154,   -1,
   -1,  422,   -1,  327,   -1,   -1,   -1,   -1, 1164, 1165,
   -1, 1167, 1168,  434,  419,   -1,   -1,   -1,   -1, 1175,
 1176, 1177, 1178,  444, 1180, 1181, 1182, 1183, 1184, 1185,
   -1,  355,  356,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,  367,  271,   -1,   -1,  371,   -1,   -1,
  258,  472,   -1,   -1,   -1,  379,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,  279,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,  309,   -1,   -1,  271,  313,  314,   -1,  316,
   -1,   -1,  319,  301,  418,  267,   -1,   -1,  422,  307,
   -1,   -1,   -1,   -1,  276,   -1,  333,   -1,   40,   -1,
  434,   43,  339,   45,   -1,   -1,  302,   -1,  290,   -1,
  444,   -1,  330,  309,  296,  297,   58,  313,  314,   -1,
  316,   63,   -1,  319,  458,  459,  460,  461,  462,  463,
   -1,  349,   -1,  315,   -1,   -1,   -1,  333,  472,   -1,
  358,   -1,   -1,  339,   -1,  327,  364,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,
   -1,   -1,  399,   -1,  382,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,  260,   -1,   -1,  263,   -1,
   -1,  418,  267,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,  276,   -1,   -1,   -1,   40,  433,  379,   43,   -1,
   45,  419,   -1,  399,   -1,  290,  443,   -1,   -1,   -1,
   -1,  296,  297,   58,   -1,  452,   -1,  454,   63,   -1,
   -1,   -1,  418,   -1,  461,   -1,   -1,   -1,   -1,   -1,
   41,   42,   43,   -1,   45,   -1,   47,  433,   -1,   -1,
  422,   -1,  327,   -1,   -1,   -1,   -1,  443,   -1,   60,
   61,   62,  434,   -1,   -1,   -1,  452,   -1,  454,   -1,
   -1,   -1,  444,   -1,   -1,  461,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,  490,  491,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   40,   -1,   -1,   43,   -1,
   45,  426,   -1,   -1,   -1,   -1,   -1,   -1,  290,  434,
   -1,   -1,   -1,   58,  296,  297,   -1,   -1,   63,  444,
   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   60,   61,   62,  327,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,  260,   -1,   -1,  263,   -1,
   -1,   -1,  267,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,  276,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   58,  296,  297,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,  327,   -1,  426,   -1,   40,   -1,   -1,   43,
   -1,   45,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   58,   -1,   -1,   -1,   -1,   63,
  355,  356,   -1,   -1,  325,   -1,  458,  459,  460,  461,
  462,  463,  367,  334,   -1,   -1,  371,   -1,   -1,   -1,
  472,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,  490,  491,
  361,   -1,  363,   -1,   -1,  260,   -1,   -1,  263,   -1,
   -1,   -1,  267,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,  276,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,  426,   -1,   -1,   -1,  290,   -1,   -1,   -1,  434,
   58,  296,  297,   -1,  272,   63,   -1,   -1,   -1,  444,
   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,  458,  459,  460,  461,  462,  463,  430,
   -1,   -1,  327,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,  325,   -1,   -1,
  355,  356,  260,   -1,   -1,  263,  334,   -1,   -1,  267,
   -1,   -1,  367,   -1,  342,   -1,  371,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  361,   -1,  363,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,  380,  381,   -1,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,   -1,   40,   -1,   -1,   43,  327,
   45,  426,  276,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   58,   -1,   -1,  290,   -1,   63,  444,
   -1,   -1,  296,  297,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,  430,  458,  459,  460,  461,  462,  463,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,  327,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  426,   -1,
   -1,   -1,  290,   -1,   -1,   -1,  434,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,  327,
   -1,   -1,   -1,   -1,  472,   -1,   40,   -1,   42,   43,
   -1,   45,  426,  481,  482,  483,  484,  485,  486,  487,
  434,   -1,  490,  491,   58,   -1,   -1,  355,  356,   63,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,  260,  490,  491,  263,   -1,
   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,  276,   -1,   43,   -1,   45,   -1,   -1,  426,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  434,   -1,   58,   -1,
   -1,  296,  297,   63,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,  271,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   58,   -1,   -1,  313,  314,
   63,  316,   -1,   -1,  319,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,   -1,   -1,  267,  339,   -1,   -1,   -1,   -1,   -1,
   -1,  426,  276,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,  444,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,  327,  399,   -1,  481,  482,  483,  484,
  485,  486,  487,   -1,   -1,  490,  491,   -1,  273,   -1,
   -1,   -1,  277,  418,   -1,   -1,   -1,  267,   -1,  353,
  285,  355,  356,   -1,   -1,   -1,  276,   40,  433,   -1,
   43,  296,   45,  367,  299,   -1,   -1,  371,  443,   -1,
  290,   -1,   -1,   -1,   -1,   58,  296,  297,   -1,  454,
   63,   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  340,   -1,  327,   -1,   58,
   -1,  346,  347,  348,   63,  350,  351,  352,   -1,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,  353,   -1,  355,  356,   -1,   -1,  374,
  444,  376,   -1,   -1,  267,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,  276,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  472,   -1,
   -1,   -1,  407,  296,  297,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,   -1,   -1,  490,  491,   -1,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,   -1,
   40,   41,   -1,   43,  327,   45,   -1,   -1,   -1,   -1,
   -1,  446,   -1,   -1,  434,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,  444,   -1,  461,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,  367,   -1,  481,  482,  371,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,  492,  493,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   40,
  490,  491,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,  434,   -1,  296,  297,   -1,   -1,   -1,  267,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,  290,   -1,   -1,  327,   -1,   -1,  296,  297,  472,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,  481,  482,
  483,  484,  485,  486,  487,   -1,   -1,  490,  491,   58,
   -1,   -1,  355,  356,   63,   -1,   -1,   -1,  327,  461,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,  353,   -1,  355,  356,  490,  491,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  418,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  290,  434,   43,   -1,   45,   -1,  296,  297,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,  434,   -1,  327,   -1,  472,
   -1,   -1,   -1,   -1,   -1,  444,  267,   -1,  481,  482,
  483,  484,  485,  486,  487,  276,   -1,  490,  491,  458,
  459,  460,  461,  462,  463,  355,  356,   -1,   -1,  290,
   -1,   -1,   -1,  472,   -1,  296,  297,  367,   -1,   -1,
   -1,  371,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,  483,  484,  485,   -1,   -1,   -1,  267,  490,
  491,   -1,   -1,   -1,  355,  356,   -1,  276,   40,   -1,
   -1,   43,   -1,   45,  434,   -1,  367,   -1,   -1,   -1,
  371,  290,   -1,   -1,  444,   -1,   58,  296,  297,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,  327,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,   -1,   -1,
  490,  491,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,  355,  356,   -1,   -1,
   58,   -1,   -1,  444,   -1,   63,  267,   -1,  367,   -1,
   -1,   -1,  371,   -1,  455,  276,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,  472,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,  355,  356,  455,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,   -1,
   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,   -1,   -1,  434,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,  327,   -1,   -1,   -1,  267,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
  481,  482,  483,  484,  485,  486,  487,   -1,   -1,  490,
  491,   -1,  290,  355,  356,   -1,   -1,   -1,  296,  297,
   -1,  461,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,   -1,   -1,   -1,  327,
  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,  367,
  277,   -1,  434,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,  292,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,   -1,   -1,  490,  491,
   -1,   -1,   -1,  340,   -1,   -1,  434,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,  444,  354,   -1,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,  374,  292,  376,
   -1,   -1,  296,   -1,  472,  299,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
   -1,   -1,  490,  491,   -1,   -1,   -1,   -1,   -1,   -1,
  407,   -1,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,  340,  424,  277,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,  273,   -1,   -1,   -1,  277,  296,   -1,  446,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  292,  376,   -1,   -1,  296,   -1,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,  340,   -1,  407,   -1,  492,  493,  346,  347,  348,
   -1,  350,  351,  352,   -1,  354,   -1,  273,   -1,  340,
  424,  277,   -1,   -1,   -1,  346,  347,  348,   -1,  350,
  351,  352,   -1,  354,   -1,  374,   -1,  376,   -1,   -1,
  296,   -1,  446,  299,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  407,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
   -1,   -1,   -1,   -1,  340,  424,  407,   -1,  492,  493,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,
  273,   -1,   -1,  424,  277,   -1,   -1,  446,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,  461,  296,   -1,  446,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  407,   -1,  492,  493,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,   -1,   -1,   -1,   -1,  340,  424,   -1,
   -1,  492,  493,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,  492,  493,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  492,
  493,
};
#define YYFINAL 17
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 493
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","LIMIT","SUBSTRING","CONNECTION_ID","TRANSACTION_ID",
"LARGEINT","KW_INT64",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : USER",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens",
"primary_constraint : PRIMARY KEY column_parens",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE VARIABLE column_def_name non_array_type ';'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_string default_opt end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION nonneg_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : SYMBOL",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : largeint_keyword",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"largeint_keyword : LARGEINT",
"largeint_keyword : KW_INT64",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT distinct_clause select_list from_clause where_clause group_clause having_clause limit_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : udf",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_clause : LIMIT limit_range",
"limit_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : column_name",
"column_list : column_list ',' column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN scalar_set",
"in_predicate : value NOT IN scalar_set",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"scalar_set : '(' constant_list ')'",
"scalar_set : '(' column_select ')'",
"column_select : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : USER",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : COUNT '(' '*' ')'",
"function : COUNT '(' all_noise value ')'",
"function : COUNT '(' DISTINCT value ')'",
"function : SUM '(' all_noise value ')'",
"function : SUM '(' DISTINCT value ')'",
"function : AVG '(' all_noise value ')'",
"function : AVG '(' DISTINCT value ')'",
"function : MINIMUM '(' all_noise value ')'",
"function : MINIMUM '(' DISTINCT value ')'",
"function : MAXIMUM '(' all_noise value ')'",
"function : MAXIMUM '(' DISTINCT value ')'",
"function : CAST '(' rhs AS data_type_descriptor ')'",
"function : KW_UPPER '(' value ')'",
"function : GEN_ID '(' symbol_generator_name ',' value ')'",
"function : EXTRACT '(' timestamp_part FROM value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyerror (TEXT *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static SSHORT	lines, att_charset;

// TMN: Temp hack
#if (defined(_MSC_VER) || defined(__BORLANDC__)) && defined(CONST)
#undef CONST
#define CONST
#endif

typedef struct tok {
    USHORT	tok_ident;
    CONST SCHAR	*tok_string;
    CONST USHORT tok_version;
} TOK;

static CONST TOK tokens [] = {
#include "../dsql/keywords.h"
    {0, 0, 0}
    };


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = tokens; token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

line_start = ptr = string;
end = string + length;
lines = 1;
att_charset = character_set;
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

if (file->fil_partitions)
    {
    if (!file->fil_length)
	{
	yyabandon (-261, isc_log_length_spec);
	/* Total length of a partitioned log must be specified */
	}

    if (PARTITION_SIZE (OneK*file->fil_length,file->fil_partitions) <
	(OneK*MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_partition_too_small);
	    /* Log partition size too small */
	}
    }
else
    {
    if ((file->fil_length) && (file->fil_length < MIN_LOG_LENGTH))
	{
	yyabandon (-239, isc_log_too_small);   /* Log size too small */
	}
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    if (c == '\n')
	{
	lines++;
	line_start = ptr + 1;
	}

    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr + 1;
		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p,UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	};
    yylval = (NOD) MAKE_string (string, p - string);
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start), 
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 18:
{ DSQL_debug = (int) yyvsp[0];
			  if (DSQL_debug > 10)
			      yydebug = DSQL_debug;
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 19:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 20:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 25:
{ yyval = yyvsp[0]; }
break;
case 26:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 27:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 28:
{ yyval = make_list (yyvsp[0]); }
break;
case 30:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 31:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 32:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 33:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 34:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 36:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 37:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 38:
{ yyval = 0; }
break;
case 39:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 42:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 43:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 49:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 51:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 52:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = yyvsp[0];}
break;
case 70:
{ yyval = yyvsp[0]; }
break;
case 71:
{ yyval = yyvsp[0]; }
break;
case 72:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 74:
{ field->fld_dtype = dtype_blob; }
break;
case 75:
{ 
			field->fld_dtype = dtype_cstring; 
			field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 76:
{ yyval = (NOD) NULL; }
break;
case 78:
{ yyval = yyvsp[-1]; }
break;
case 80:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 84:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 85:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 86:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 87:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 88:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 89:
{ yyval = yyvsp[0]; }
break;
case 90:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 91:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 92:
{ yyval = yyvsp[0]; }
break;
case 93:
{ yyval = yyvsp[0]; }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = yyvsp[0]; }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 102:
{ yyval = NULL; }
break;
case 103:
{ yyval = make_list (yyvsp[0]); }
break;
case 105:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 106:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 107:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 108:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 109:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 110:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 111:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 112:
{ yyval = (NOD) 0;}
break;
case 113:
{ yyval = yyvsp[-1]; }
break;
case 114:
{ yyval = (NOD) NULL; }
break;
case 117:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 119:
{ yyval = NULL; }
break;
case 120:
{ yyval = NULL; }
break;
case 121:
{ yyval = yyvsp[0]; }
break;
case 122:
{ yyval = (NOD) NULL; }
break;
case 123:
{ yyval = (NOD) NULL; }
break;
case 126:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 127:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 130:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 131:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 132:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 133:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 134:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 137:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 138:
{yyval = (NOD) NULL;}
break;
case 141:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 142:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 144:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 145:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 146:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 147:
{yyval = (NOD) NULL;}
break;
case 150:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 155:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 159:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 160:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 161:
{ file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 162:
{ file->fil_flags |= LOG_serial;
			  if (file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 163:
{ file = make_file(); 
			  file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) file);}
break;
case 164:
{ file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) file); }
break;
case 166:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 167:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) file); }
break;
case 168:
{ file = make_file();
			  file->fil_name = (STR) yyvsp[0]; }
break;
case 171:
{ file->fil_length = (SLONG) yyvsp[0]; }
break;
case 172:
{ file  = make_file ();}
break;
case 177:
{ file->fil_start = (SLONG) yyvsp[0];}
break;
case 178:
{ file->fil_length = (SLONG) yyvsp[-1];}
break;
case 185:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 186:
{ yyval = yyvsp[0]; }
break;
case 187:
{ yyval = yyvsp[0]; }
break;
case 188:
{ yyval = (NOD) NULL; }
break;
case 190:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 193:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 194:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 195:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 196:
{ 
			field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 199:
{ yyval = NULL; }
break;
case 200:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 203:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 204:
{ field = make_field (yyvsp[0]);
				  yyval = (NOD) field; }
break;
case 205:
{ yyval = yyvsp[-1]; }
break;
case 206:
{ field = make_field (NULL);
			  yyval = (NOD) field; }
break;
case 207:
{ yyval = yyvsp[0]; }
break;
case 208:
{ yyval = (NOD) NULL; }
break;
case 209:
{ yyval = yyvsp[0]; }
break;
case 210:
{ yyval = make_node (nod_user_name, (int) 0, NULL); }
break;
case 211:
{ yyval = yyvsp[0]; }
break;
case 212:
{ yyval = yyvsp[0]; }
break;
case 213:
{ yyval = yyvsp[0]; }
break;
case 214:
{ yyval = (NOD) NULL; }
break;
case 217:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 218:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 219:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 220:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 222:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 223:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 224:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 225:
{ yyval = yyvsp[0]; }
break;
case 226:
{ yyval = NULL ;}
break;
case 231:
{ yyval = make_node (nod_unique, 1, yyvsp[0]); }
break;
case 232:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-4], yyvsp[-2], 
			         yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 235:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 236:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 237:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 238:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 239:
{ yyval = NULL;}
break;
case 240:
{ yyval = yyvsp[0];}
break;
case 241:
{ yyval = yyvsp[0];}
break;
case 242:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 243:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 244:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 245:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 246:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 247:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 248:
{ yyval = make_list (yyvsp[-1]); }
break;
case 249:
{ yyval = NULL; }
break;
case 250:
{ yyval = yyvsp[0]; }
break;
case 251:
{ yyval = NULL; }
break;
case 253:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 254:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 255:
{ yyval = make_list (yyvsp[0]); }
break;
case 256:
{ yyval = NULL; }
break;
case 258:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 259:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 262:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 263:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 264:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 266:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 269:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 275:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 279:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 280:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 281:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 282:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 283:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0]); }
break;
case 284:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 285:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 286:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 287:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 288:
{ yyval = make_list (yyvsp[0]); }
break;
case 289:
{ yyval = make_list (yyvsp[-1]); }
break;
case 290:
{ yyval = NULL; }
break;
case 291:
{ yyval = make_list (yyvsp[0]); }
break;
case 292:
{ yyval = make_list (yyvsp[-1]); }
break;
case 293:
{ yyval = NULL; }
break;
case 296:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 297:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 298:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 299:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 300:
{ yyval = NULL; }
break;
case 302:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 303:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 305:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 306:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 307:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 308:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 310:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 311:
{ yyval = make_list (yyvsp[0]); }
break;
case 312:
{ yyval = make_list (yyvsp[-1]); }
break;
case 313:
{ yyval = NULL; }
break;
case 317:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 318:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 319:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 320:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 321:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 322:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 323:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 324:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 325:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 326:
{ yyval = make_list (yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 332:
{ yyval = yyvsp[-1]; }
break;
case 333:
{ beginning = lex_position(); }
break;
case 334:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 335:
{ beginning = last_token; }
break;
case 336:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 337:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 338:
{ yyval = 0; }
break;
case 339:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 340:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 341:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 342:
{ yyval = NULL; }
break;
case 343:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 344:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 345:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 346:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 347:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 348:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 349:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 350:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 351:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 352:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 353:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 354:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 355:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 356:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 357:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 358:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 359:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 360:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 361:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 362:
{ yyval = NULL; }
break;
case 363:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 364:
{ yyval = yyvsp[0]; }
break;
case 365:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 366:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 367:
{ yyval = yyvsp[0]; }
break;
case 368:
{ yyval = yyvsp[0]; }
break;
case 369:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 370:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 371:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 373:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 374:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 375:
{ yyval = yyvsp[0]; }
break;
case 376:
{ yyval = yyvsp[0]; }
break;
case 377:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 378:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 379:
{ yyval = yyvsp[0]; }
break;
case 380:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 382:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 383:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 384:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 385:
{ yyval = yyvsp[0]; }
break;
case 386:
{ yyval = yyvsp[0]; }
break;
case 387:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 388:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 389:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 390:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 410:
{ yyval = NULL; }
break;
case 411:
{ yyval = NULL; }
break;
case 412:
{ yyval = NULL; }
break;
case 413:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 414:
{ field_name = yyvsp[0];
			  field = make_field (yyvsp[0]);
			  yyval = (NOD) field; }
break;
case 415:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 416:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 417:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 418:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 419:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 420:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 422:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 423:
{ yyval = yyvsp[0]; }
break;
case 424:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 425:
{ yyval = yyvsp[0]; }
break;
case 426:
{ yyval = yyvsp[0]; }
break;
case 428:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 429:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 431:
{ yyval = NULL; }
break;
case 433:
{ yyval = NULL; }
break;
case 434:
{ yyval = yyvsp[0]; }
break;
case 435:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 436:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 437:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 438:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 439:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 440:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 441:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 442:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 443:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 444:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 445:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 450:
{ field->fld_ranges = make_list (yyvsp[-1]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 451:
{ field->fld_ranges = make_list (yyvsp[-2]);
		      field->fld_dimensions = field->fld_ranges->nod_count / 2;
		      field->fld_element_dtype = field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 453:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 454:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 455:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 461:
{ 
			field->fld_dtype = dtype_int64; 
			field->fld_length = sizeof (SINT64); 
			}
break;
case 462:
{ 
			field->fld_dtype = dtype_long; 
			field->fld_length = sizeof (SLONG); 
			}
break;
case 463:
{ 
			field->fld_dtype = dtype_short; 
			field->fld_length = sizeof (SSHORT); 
			}
break;
case 464:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    field->fld_dtype = dtype_timestamp; 
			    field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    field->fld_dtype = dtype_sql_date; 
			    field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 465:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			field->fld_dtype = dtype_sql_time; 
			field->fld_length = sizeof (SLONG);
			}
break;
case 466:
{ 
			field->fld_dtype = dtype_timestamp; 
			field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 471:
{ 
			field->fld_dtype = dtype_blob; 
			}
break;
case 472:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-1];
			field->fld_sub_type = 0;
			}
break;
case 473:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = (USHORT) yyvsp[-3];
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 474:
{ 
			field->fld_dtype = dtype_blob; 
			field->fld_seg_length = 80;
			field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 475:
{
			field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 476:
{
			field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 477:
{
			field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 478:
{
			field->fld_sub_type_name = yyvsp[0];
			}
break;
case 479:
{
			field->fld_sub_type = (USHORT) 0;
			}
break;
case 480:
{
			field->fld_character_set = yyvsp[0];
			}
break;
case 482:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 483:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			field->fld_flags |= FLD_national;
			}
break;
case 484:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			field->fld_flags |= FLD_national;
			}
break;
case 485:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 486:
{ 
			field->fld_dtype = dtype_text; 
			field->fld_character_length = 1; 
			}
break;
case 487:
{ 
			field->fld_dtype = dtype_varying; 
			field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 496:
{ 
			  field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 497:
{  
			   field->fld_sub_type = dsc_num_type_decimal;
			   if (field->fld_dtype == dtype_short)
				{
				field->fld_dtype = dtype_long;
				field->fld_length = sizeof (SLONG);
				};
			}
break;
case 498:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 499:
{
			field->fld_dtype = dtype_long; 
		    	field->fld_length = sizeof (SLONG); 
			field->fld_precision = 9;
		    	}
break;
case 500:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 501:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				field->fld_dtype = dtype_double;
				field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				field->fld_dtype = dtype_int64;
				field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	field->fld_dtype = dtype_short; 
			    	field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	field->fld_dtype = dtype_long; 
			    	field->fld_length = sizeof (SLONG); 
			    	}
			    }
			field->fld_precision = (USHORT) yyvsp[-3];
			field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 504:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    field->fld_dtype = dtype_double;
			    field->fld_length = sizeof (double); 
			    }
			else
			    {
			    field->fld_dtype = dtype_real; 
			    field->fld_length = sizeof (float);
			    }
			}
break;
case 505:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 506:
{ 
			field->fld_dtype = dtype_real; 
			field->fld_length = sizeof (float); 
			}
break;
case 507:
{ 
			field->fld_dtype = dtype_double; 
			field->fld_length = sizeof (double); 
			}
break;
case 508:
{ yyval = yyvsp[-1]; }
break;
case 509:
{ yyval = 0; }
break;
case 513:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 514:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 515:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 516:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 517:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 520:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 521:
{ yyval = (NOD) NULL; }
break;
case 523:
{ yyval = (NOD) NULL; }
break;
case 524:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 526:
{ yyval = (NOD) NULL; }
break;
case 528:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 533:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 534:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 535:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 536:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 537:
{ yyval = yyvsp[0];}
break;
case 539:
{ yyval = yyvsp[0];}
break;
case 540:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 541:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 542:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 543:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 544:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 545:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 546:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 547:
{ yyval = 0; }
break;
case 548:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 549:
{ yyval = (NOD) NOD_SHARED; }
break;
case 550:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 551:
{ yyval = (NOD) 0; }
break;
case 552:
{ yyval = (NOD) NOD_READ; }
break;
case 553:
{ yyval = (NOD) NOD_WRITE; }
break;
case 555:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 556:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 557:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 558:
{ yyval = 0; }
break;
case 560:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 561:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 562:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 563:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 564:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 565:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 566:
{ yyval = make_list (yyvsp[0]); }
break;
case 567:
{ yyval = 0; }
break;
case 569:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 570:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 571:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 572:
{ yyval = 0; }
break;
case 573:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 574:
{ yyval = 0; }
break;
case 575:
{ yyval = yyvsp[0]; }
break;
case 576:
{ yyval = 0; }
break;
case 577:
{ yyval = yyvsp[0]; }
break;
case 578:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 579:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 580:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 581:
{ yyval = 0; }
break;
case 582:
{ yyval = make_list (yyvsp[0]); }
break;
case 583:
{ yyval = 0; }
break;
case 585:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 587:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 588:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 589:
{ yyval = make_list (yyvsp[0]); }
break;
case 591:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 594:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 595:
{ yyval = yyvsp[-1]; }
break;
case 596:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 597:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 598:
{ yyval = make_list (yyvsp[-1]); }
break;
case 599:
{ yyval = NULL; }
break;
case 601:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 607:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 608:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 609:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 610:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 611:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 612:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 613:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 614:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 615:
{ yyval = make_list (yyvsp[0]); }
break;
case 616:
{ yyval = 0; }
break;
case 618:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 621:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 622:
{ yyval = yyvsp[0]; }
break;
case 623:
{ yyval = 0; }
break;
case 624:
{ yyval = yyvsp[0]; }
break;
case 625:
{ yyval = 0; }
break;
case 626:
{ yyval = yyvsp[0]; }
break;
case 627:
{ yyval = 0;}
break;
case 628:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 629:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 630:
{ yyval = 0;}
break;
case 631:
{ yyval = yyvsp[0]; }
break;
case 632:
{ yyval = 0; }
break;
case 633:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 634:
{ yyval = 0; }
break;
case 635:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 636:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 637:
{ yyval = 0; }
break;
case 638:
{ yyval = 0; }
break;
case 640:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 641:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 644:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 645:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 646:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 647:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 649:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 650:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 651:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 653:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 656:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 657:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 658:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 661:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 662:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 664:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 665:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 668:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 669:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 670:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 671:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 675:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 676:
{ yyval = yyvsp[0]; }
break;
case 678:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 681:
{ yyval = NULL; }
break;
case 682:
{ yyval = make_list (yyvsp[-1]); }
break;
case 684:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 686:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 687:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 688:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 690:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 691:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 703:
{ yyval = yyvsp[-1]; }
break;
case 704:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 705:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 708:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 710:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 711:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 713:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 714:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 715:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 716:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 717:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 718:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 719:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 720:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 721:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 722:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 723:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 724:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 725:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 726:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 727:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 730:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 731:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 732:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 733:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 734:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 735:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 736:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 737:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 738:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 740:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 741:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 742:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 744:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 745:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 746:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 747:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 748:
{ yyval = make_list (yyvsp[-1]); }
break;
case 749:
{ yyval = yyvsp[-1]; }
break;
case 750:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 751:
{ yyval = make_node (nod_select_expr, e_sel_count, 
		 		yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 759:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 760:
{ yyval = yyvsp[0]; }
break;
case 761:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 762:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 763:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 764:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 765:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 766:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 767:
{ yyval = yyvsp[-1]; }
break;
case 768:
{ yyval = yyvsp[-1]; }
break;
case 769:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 770:
{ yyval = yyvsp[0]; }
break;
case 771:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 772:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 773:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 774:
{ yyval = yyvsp[0]; }
break;
case 775:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 776:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 777:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 778:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 780:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 782:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 783:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 784:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 785:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 786:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 787:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 789:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 790:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 791:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 792:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 797:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 798:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 799:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 800:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 801:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 802:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 803:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 804:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 805:
{ yyval = yyvsp[0]; }
break;
case 806:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 808:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 809:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 810:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 811:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 812:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 814:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 815:
{ yyval = yyvsp[0];}
break;
case 816:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 817:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 818:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 819:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 820:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 821:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 822:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 823:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 824:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 825:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 826:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 827:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 828:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 829:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
			      yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 830:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 831:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 832:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 833:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 834:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 835:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 836:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 837:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 838:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 839:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 840:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 843:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
