#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
#line 2 "../src/dsql/parse.y"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 * 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
 *                            exception handling in SPs/triggers,
 *                            implemented ROWS_AFFECTED system variable
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#line 156 "../src/dsql/dsql.tab.c"
#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define NULLS 503
#define LAST 504
#define ROWS_AFFECTED 505
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   76,   13,
   80,   80,   63,   63,   66,   66,   66,   74,   89,   89,
   89,   90,   90,   91,   91,   92,   92,   96,   96,   73,
   99,   99,  101,  101,  102,  102,  105,  105,  106,  107,
  107,  108,  109,   71,   75,   72,   93,   93,  112,  113,
  113,  115,  115,  116,  116,  116,  116,  116,  114,  114,
  117,  117,  118,  118,  118,  118,  120,  120,  120,  120,
  119,  119,  124,  124,  123,   97,  125,  125,  126,  129,
  130,  130,  131,  127,  128,  128,  132,  132,  133,  133,
  134,  134,  134,   95,   95,   95,   68,   78,  135,  135,
  135,  136,  136,  137,  137,  138,  138,  138,  144,   85,
   85,  140,  140,  103,  103,   98,  148,  149,   57,  141,
  141,  104,  104,  104,  104,  104,  104,  142,  142,  156,
  156,  157,  159,  159,  159,  159,  159,  139,  158,  158,
  163,  163,  163,  163,  165,  166,  167,  161,  161,  162,
  160,  160,  160,  160,  160,  168,  169,  170,  170,  170,
  170,   67,   77,   81,  175,  171,  171,  172,  172,  176,
  176,  177,  173,  173,  178,  178,  179,  180,  180,  181,
  181,  182,  182,  174,  184,  184,  184,  185,  185,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  188,  188,  189,  190,  191,
  192,  193,  193,  194,  200,  196,  196,  196,  197,  197,
  197,  198,  198,  198,  198,  195,  199,  199,  186,  186,
  205,  206,  206,  207,  207,  207,  207,   11,  209,  209,
  209,  210,  210,  210,  210,  210,  210,   70,   79,  215,
  216,  212,  217,  217,  217,  218,  222,  227,  227,  228,
  228,  229,  229,  146,  214,   86,   88,  213,  213,   69,
   82,  232,  232,  232,  233,  236,  236,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  234,  234,  235,    2,  239,  239,  239,  239,
  239,  239,  239,  247,  248,  245,  245,  249,  249,  249,
  249,  249,  249,  249,  240,  240,  250,  250,  250,  250,
  250,  250,  250,  244,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  252,  252,
  254,  254,  253,  251,  251,  251,  246,  246,  242,  243,
  243,  256,  256,  256,  256,  257,  257,  241,  258,  258,
  259,  259,    8,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  100,  100,  143,  143,  263,
  263,  266,  266,  268,  268,   52,   52,  265,  265,  265,
  265,  265,  265,  265,  265,  265,  273,  273,  264,  264,
  264,  264,  274,  274,   60,   60,   60,   54,   54,  270,
  270,  270,  267,  267,  267,  278,  278,  278,  277,  277,
  276,  276,  276,  271,  271,  281,  279,  279,  279,  280,
  280,  272,  272,  272,  272,  282,  282,   17,   17,   17,
  284,  284,  284,    4,   15,  286,  286,  287,  287,  288,
  288,  283,  289,  289,  290,  290,  291,  291,  291,  291,
  292,  292,  293,  293,  294,  294,  296,  296,  296,  297,
  297,  297,  298,  298,  298,  295,  300,  300,  300,  301,
  301,  299,  299,  302,  304,  304,  303,  303,  285,   16,
  305,  305,  305,  306,  306,  309,  309,  310,  310,   64,
   64,   64,  311,  311,  311,  307,  307,  312,  312,  308,
  220,  220,  221,  221,  315,  315,  316,  316,  316,  313,
  319,  319,  320,  320,  321,  321,  322,  322,  323,  323,
  202,  202,  325,  325,  230,  230,   30,  231,  231,  231,
  231,  231,  231,  231,  231,  326,  326,  326,  327,  327,
  327,  219,  219,  219,  219,  224,  224,  328,  328,  329,
  329,  329,  329,  329,  331,  331,  331,  225,  225,  223,
  223,  335,  335,  335,  226,  226,  336,  337,  337,  337,
  337,  337,  338,  338,  339,  339,  340,  340,  341,  341,
  341,  342,  342,   10,   10,  344,  344,    7,    7,  345,
  346,  347,   18,   18,  348,  349,  350,  350,  187,  317,
  317,    3,    3,  352,  352,  352,  354,  354,   60,  353,
  353,  355,  355,   33,   33,   84,   83,   83,  343,  343,
  356,  357,  357,  203,  203,  203,  145,  351,  351,  110,
  110,  110,  110,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  360,  360,  360,  360,  360,  360,
  360,  360,  365,  365,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  365,  365,  365,  365,  365,  371,  371,
  361,  361,  362,  362,  362,  362,  363,  363,  367,  367,
  368,  368,  368,  368,  366,  369,  364,  364,  372,  372,
  373,  370,  375,   87,   87,   87,   87,   87,   87,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
  155,  155,  155,  376,  374,  374,  150,  150,  381,  381,
  381,  381,  381,  378,  378,  378,  378,  378,  211,  151,
  151,  152,  153,  153,  380,  380,  380,   50,   50,   19,
   19,  238,  382,   53,  122,  269,  269,   94,  377,  377,
  377,  377,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  384,  332,  333,  333,  333,  330,  330,
  379,  334,  334,  386,  386,  387,  387,  388,  388,  391,
  391,  389,  389,  394,  394,  393,  390,  392,  385,  385,
  385,  385,  385,  385,  385,  385,  314,  314,  154,   47,
  275,  121,  147,  358,  164,  204,  262,   62,   59,  208,
  111,   65,  318,   34,   40,  324,  261,   38,   41,  201,
   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    2,    2,    1,    0,    1,    1,    6,    6,    1,    1,
    0,    0,    1,    0,    4,    0,    1,    1,    2,    8,
    1,    0,    3,    0,    0,    1,    1,    2,    1,    1,
    1,    2,    6,    1,    1,    3,    0,    1,    1,    0,
    1,    1,    2,    3,    4,    2,    2,    3,    0,    1,
    1,    2,    1,    1,    1,    4,    3,    3,    3,    3,
    1,    1,    6,    3,    1,    3,    1,    3,    2,    1,
    0,    2,    3,    1,    0,    1,    1,    2,    3,    4,
    0,    1,    2,    0,    1,    1,    5,    5,    3,    2,
    0,    1,    3,    1,    1,    6,    3,    2,    6,    2,
    1,    2,    2,    2,    0,    1,    1,    2,    0,    2,
    0,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    2,    2,    5,    1,    2,    3,    2,    2,    0,
    1,    1,    1,    1,    3,    4,    8,    4,    0,    6,
    1,    1,    2,    2,    0,    3,    3,    1,    2,    2,
    2,    8,    8,    8,    8,    3,    0,    2,    0,    1,
    3,    2,    1,    0,    1,    2,    6,    1,    0,    2,
    1,    1,    1,    3,    1,    2,    0,    1,    2,    2,
    2,    1,    1,    1,    1,    1,    1,    2,    3,    1,
    2,    1,    2,    2,    2,    3,    4,    2,    6,    4,
    7,    8,    6,    4,    2,    1,    3,    0,    2,    4,
    0,    1,    1,    3,    3,    6,    3,    0,    1,    2,
    4,    1,    3,    2,    2,    2,    1,    4,    1,    3,
    0,    1,    1,    1,    3,    3,    3,    7,    7,    7,
    7,    1,    1,    3,    4,    9,    2,    1,    3,    1,
    1,    6,    3,    0,    0,    0,    0,    3,    0,    9,
    9,    1,    1,    0,    2,    1,    1,    1,    1,    1,
    3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
    5,    5,    2,    0,    4,    2,    3,    3,    2,    2,
    3,    3,    2,    3,    6,    1,    2,    4,    3,    2,
    2,    2,    2,    3,    1,    3,    3,    3,    2,    2,
    4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    1,    1,    1,    0,    2,    2,    0,    1,
    2,    2,    2,    2,    2,    1,    3,    7,    1,    0,
    1,    0,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    2,    2,    2,    1,    1,    1,    1,    4,
    5,    1,    3,    1,    3,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
    6,    5,    3,    0,    2,    2,    0,    3,    0,    4,
    1,    5,    4,    1,    4,    1,    2,    2,    1,    1,
    1,    2,    2,    2,    2,    1,    0,    3,    5,    1,
    1,    2,    3,    1,    2,    3,    0,    1,    1,    1,
    5,    5,    6,    3,    2,    1,    0,    2,    0,    1,
    0,    3,    1,    0,    1,    2,    1,    1,    1,    1,
    2,    2,    1,    2,    3,    1,    1,    3,    3,    1,
    2,    3,    1,    2,    0,    2,    1,    1,    0,    1,
    1,    1,    3,    2,    3,    0,    1,    3,    4,    3,
    1,    3,    4,    3,    0,    1,    3,    4,    4,    1,
    1,    0,    2,    2,    0,    3,    0,    2,    0,    9,
    1,    1,    1,    1,    1,    3,    1,    2,    3,    2,
    1,    3,    1,    1,    6,    3,    3,    2,    3,    0,
    1,    3,    1,    1,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    0,    2,    4,    2,    2,    4,
    2,    2,    1,    1,    0,    3,    0,    1,    3,    1,
    1,    1,    1,    3,    1,    1,    1,    2,    0,    2,
    0,    3,    5,    0,    2,    0,    4,    1,    2,    1,
    1,    0,    1,    3,    2,    1,    1,    2,    1,    4,
    2,    1,    3,    8,    5,    1,    3,    1,    1,    4,
    4,    4,    1,    1,    5,    5,    1,    3,    3,    1,
    1,    7,    7,    5,    3,    0,    1,    1,    1,    2,
    0,    1,    1,    1,    0,    3,    1,    3,    1,    0,
    3,    1,    3,    1,    3,    3,    1,    1,    3,    1,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
    5,    6,    3,    4,    5,    6,    3,    4,    3,    4,
    3,    4,    4,    5,    4,    4,    3,    4,    1,    3,
    3,    9,    9,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    1,    1,    1,    3,    1,    1,
    1,    1,    1,    4,    1,    3,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    4,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    6,    6,    6,    8,    4,    4,    3,
    6,    1,    1,    6,    6,    1,    1,    4,    6,    4,
    5,    3,    5,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  548,  549,  550,    0,
  601,  708,  709,  713,  714,  459,    0,    0,    0,    0,
    0,    0,  396,  556,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  113,    0,    0,   94,    0,  872,
    0,   20,  870,    0,    0,   72,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  473,
    0,    0,   36,   33,   35,    0,   34,    0,  945,    0,
    0,    0,    0,   31,   67,   65,    0,    0,    0,    0,
    0,    0,    0,    0,  555,    0,    0,    0,    0,  664,
    0,    0,    0,  947,  645,    0,    0,    0,    0,    0,
  106,    2,    0,    0,    0,    0,  443,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  442,  444,  445,  446,  447,  448,
    0,  424,  938,    0,  942,    0,  403,  944,    0,  400,
    0,  647,  948,    0,  399,    0,  554,  868,    0,  149,
  102,    0,  934,  103,    0,  216,  747,    0,  941,  101,
  144,    0,    0,   97,    0,  104,  874,    0,   98,    0,
   99,  951,    0,  100,  145,  105,  610,  611,    0,  873,
  871,    0,  939,   73,    0,    0,  937,  481,  474,    0,
  480,  485,  475,  476,  483,  477,  478,  479,  484,    0,
   29,    0,   38,  734,   37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  878,
    0,  859,  656,  658,    0,  659,  661,  927,  621,    0,
  622,  662,    0,    0,    0,    0,    0,    0,    0,  573,
  562,    0,  565,  567,  568,  569,  570,  576,  577,    0,
  946,  646,    0,  107,    0,  108,    0,  109,    0,    0,
  602,    0,  600,    0,    0,    0,    0,  460,    0,    0,
  366,    0,  219,    0,  406,  397,  457,  458,    0,    0,
    0,    0,    0,    0,  415,    0,  372,  373,    0,  560,
  558,  869,    0,    0,    0,    0,    0,    0,    0,  152,
  131,    0,   95,    0,    0,  110,    0,  120,  119,    0,
    0,    0,    0,    0,    0,  930,   74,    0,    0,    0,
  710,  711,  482,    0,  929,  851,  850,  849,    0,    0,
  852,  853,    0,    0,  855,  343,  344,  338,    0,  342,
  847,  854,    0,  737,    0,    0,   26,    0,    0,  949,
    0,   70,   68,   66,   32,    0,    0,    0,  739,    0,
   51,    0,    0,    0,    0,    0,    0,    0,    0,  837,
  865,    0,    0,  839,    0,    0,  866,    0,  860,    0,
    0,  841,  842,  843,  861,  862,    0,  863,  864,    0,
    0,    0,  867,    0,    0,    0,    0,    0,    0,  744,
  833,  834,  835,  840,  819,    0,  818,    0,  822,  881,
  882,  821,  815,  816,  817,  820,  836,  879,  880,  902,
  903,  906,  907,    0,  624,    0,  721,    0,    0,  625,
    0,    0,  599,    0,  574,    0,  571,    0,  572,  597,
    0,  592,    0,    0,  566,    0,  748,  717,    0,    0,
    0,    0,    0,    0,  536,    0,    0,    0,  606,    0,
  603,    0,  184,    0,    0,  128,  465,  171,  172,    0,
  463,    0,    0,    0,    0,  466,    0,  461,    0,    0,
  410,  412,  411,    0,  413,    0,  407,  217,    0,    0,
  270,    0,    0,    0,    0,  419,  420,    0,  450,    0,
    0,    0,    0,    0,    0,    0,  377,  376,  469,    0,
    0,  148,    0,    0,  157,    0,  156,    0,  163,  146,
    0,  161,  164,  165,  153,    0,    0,  504,  540,  507,
    0,  541,    0,    0,  508,    0,    0,    0,  531,  544,
  503,  526,  505,  506,  501,  488,  366,  486,  487,  489,
    0,    0,  498,  499,  500,  502,    0,    0,    0,    0,
    0,  111,    0,  112,    0,  123,    0,    0,  200,    0,
    0,  364,    0,  219,    0,    0,   82,    0,    0,  729,
    0,    0,    0,    0,    0,    0,    0,    0,  750,  754,
  755,  756,  757,  758,  759,  760,  761,  762,  763,  856,
  857,  858,  848,    0,    0,    0,  736,   27,    0,    0,
   43,   71,    0,    0,   25,    0,  742,    0,    0,  705,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  950,  315,    0,    0,
    0,    0,    0,    0,    0,  657,    0,    0,  660,    0,
    0,    0,    0,  943,  628,  552,    0,  876,  551,    0,
  575,    0,  583,  579,  578,    0,    0,    0,  594,  582,
    0,    0,  715,  716,    0,    0,    0,  364,    0,    0,
    0,    0,    0,    0,  616,    0,    0,  129,    0,    0,
    0,    0,    0,    0,  366,  409,    0,  366,  367,  414,
  496,    0,  272,    0,  266,  268,  364,  935,  239,    0,
    0,  366,    0,    0,  208,  364,    0,    0,    0,    0,
  244,  238,  241,  242,  243,  418,  455,  454,  417,  416,
    0,    0,    0,    0,    0,    0,  375,    0,  366,    0,
  154,  158,    0,  162,    0,    0,  527,  528,  545,    0,
  542,    0,    0,  534,  532,  533,    0,    0,    0,    0,
  497,    0,    0,    0,    0,  535,    0,    0,  364,    0,
  199,    0,  202,  204,  205,    0,    0,    0,    0,    0,
  219,   77,    0,    0,   76,  931,  515,  516,    0,    0,
    0,  753,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  340,  346,  347,  345,  738,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   60,   62,    0,    0,
   69,    0,    0,    0,  741,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  919,  920,  921,  922,
  923,  924,  925,  926,    0,    0,    0,    0,    0,    0,
  912,    0,    0,    0,  643,    0,    0,  831,  832,  900,
    0,    0,  933,  827,    0,    0,    0,    0,    0,    0,
  838,  746,  745,    0,    0,    0,    0,  633,  634,    0,
    0,  626,  629,  553,  877,  584,  593,  588,  587,    0,
  598,  749,  718,  719,  364,    0,    0,  214,    0,    0,
  607,    0,  180,  174,  181,    0,  177,    0,    0,  176,
    0,  187,  168,  167,  875,  170,  169,  467,    0,    0,
    0,  408,  271,    0,  210,  366,  212,    0,  367,  207,
  213,    0,    0,    0,    0,  421,  422,  366,  364,  367,
    0,    0,    0,  393,    0,  195,  196,  155,    0,    0,
    0,    0,    0,    0,  543,    0,    0,  366,  367,    0,
  492,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  197,    0,    0,    0,    0,  353,
    0,   81,    0,    0,    0,    0,   86,   83,    0,    0,
    0,  936,  712,    0,    0,  764,    0,    0,    0,  790,
  789,    0,    0,    0,  797,  809,  807,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  752,    0,   64,
   56,   57,   63,   58,   59,    0,    0,   21,    0,    0,
    0,   41,    0,    0,    0,  723,  743,  706,    0,  722,
    0,    0,    0,    0,    0,    0,  219,    0,  883,    0,
    0,  898,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  908,    0,  918,    0,    0,    0,
    0,    0,    0,  899,  844,    0,    0,    0,    0,    0,
    0,  648,    0,    0,    0,    0,    0,  590,  591,  595,
    0,  198,    0,    0,  608,  609,    0,    0,    0,    0,
    0,    0,  188,    0,    0,  404,  222,  223,  224,  225,
  226,  227,    0,    0,    0,  275,    0,  220,    0,    0,
    0,    0,  245,    0,  451,  452,  423,    0,    0,    0,
    0,    0,    0,  366,  471,  367,  932,  166,    0,    0,
  510,    0,  509,  546,    0,  538,    0,    0,    0,  490,
    0,  518,    0,    0,  520,  523,  525,  364,    0,    0,
    0,  118,    0,  203,  366,    0,    0,  365,    0,   96,
    0,  116,    0,   92,    0,    0,    0,    0,   85,    0,
  805,  806,    0,    0,    0,    0,    0,    0,  808,    0,
    0,    0,    0,    0,    0,    0,  798,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,   61,   53,   54,   22,  727,  728,    0,
  725,  732,  733,  730,    0,  704,    0,    0,  889,  888,
    0,    0,  885,  884,    0,  893,  892,  891,  890,  887,
  886,    0,    0,  914,    0,    0,    0,  913,    0,    0,
    0,  641,    0,    0,  636,    0,  637,    0,  654,  650,
  652,    0,    0,    0,    0,    0,  365,  613,  614,    0,
  182,  178,    0,    0,  193,  189,    0,  367,  278,    0,
    0,  367,  276,    0,    0,    0,  230,    0,    0,  246,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  468,
  512,    0,  513,    0,  133,    0,    0,    0,  137,  139,
  140,  141,  493,  495,  491,  522,    0,    0,  367,    0,
    0,    0,    0,  348,    0,  354,  366,   87,    0,    0,
   89,    0,    0,    0,    0,    0,    0,  811,  810,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   39,    0,  707,
  218,  901,  894,  895,    0,  896,  910,  909,    0,  915,
  904,    0,  905,    0,  639,    0,    0,  671,    0,  668,
  672,  673,  675,  676,  677,    0,    0,  620,  367,  349,
    0,  173,  190,  367,  143,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  283,  288,  282,    0,    0,    0,  292,  293,  294,  295,
  296,  297,  300,  302,  265,    0,  206,  231,    0,    0,
    0,    0,  232,  235,    0,    0,  367,  391,  392,  388,
  387,  390,  389,    0,  511,  539,  142,  130,  138,    0,
  366,  262,  125,  367,    0,  368,  355,    0,    0,   90,
   91,   78,    0,  776,  784,    0,  777,  785,  780,  788,
    0,    0,  778,  786,  779,  787,  773,  781,  774,  782,
  775,  783,  724,    0,  911,  642,    0,    0,    0,    0,
  688,  690,    0,  685,    0,  263,  183,  405,    0,  308,
    0,    0,    0,  304,    0,    0,    0,  303,    0,  305,
  291,  298,    0,  301,  284,    0,  289,    0,  329,  290,
  209,  233,    0,    0,  236,    0,  248,  250,  395,  367,
    0,  370,    0,    0,    0,   75,   93,    0,  897,    0,
    0,  674,  669,  689,    0,    0,  281,    0,  306,    0,
    0,    0,    0,    0,  299,    0,    0,  322,  323,  337,
    0,    0,    0,    0,  332,  330,  237,    0,    0,    0,
    0,    0,  264,  367,    0,    0,    0,  360,  361,    0,
    0,    0,    0,    0,  696,    0,    0,    0,  280,  277,
  307,    0,    0,    0,  310,    0,    0,    0,  314,    0,
  336,  940,  335,  334,    0,    0,    0,    0,    0,  247,
    0,  254,    0,  253,  371,    0,    0,    0,    0,    0,
  117,    0,  813,  698,  687,    0,    0,  699,    0,  695,
    0,    0,    0,    0,    0,    0,    0,    0,  325,  324,
  331,  333,  234,    0,    0,  258,  257,  256,  363,    0,
    0,    0,    0,  694,    0,  701,  317,    0,    0,  309,
    0,    0,    0,  326,  261,  259,  260,    0,  356,    0,
    0,    0,    0,  327,  311,    0,    0,  812,    0,  700,
  320,  312,    0,  703,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1487,   26,   27, 1488,
   29,   30,   31,   32,   33, 1489,   35, 1490,  610,  100,
  376,  864, 1108,  101,  640,  865,  102,  381,  645,  125,
  103,  104,  233,  935,  114,  866,  867,  174,  203,  105,
  868,  106,  383,   76,  214,  347,  428,  605, 1045,  365,
  824,  576,  485,  801,  606,  607,  608, 1047,  215, 1298,
   68,  164,   69,  209, 1751, 1250,  194,  199,  201,  204,
  190,  181,  184,  196,  206,  131,  284,  286,  288,  336,
  592,  594,  373,  234,  751,  510,  617,  982,  340,  597,
 1033, 1242,  543,  698, 1008,  495,  496,  525,  332,  577,
 1019, 1387,  720, 1186, 1388, 1389, 1390, 1391, 1392,  618,
  191,  182,  328,  550,  329,  330,  551,  552,  553,  554,
 1218,  976,  498,  499,  966,  964,  500,  970,  965, 1177,
 1351,  971,  972, 1182,  342,  812,  813,  814,  815,  753,
  989, 1365,  578,  755,  430,  817,  924,  519, 1312, 1187,
  431,  432,  433,  915,  434, 1366, 1367,  528, 1513, 1650,
 1203,  761,  762,  749,  763,  764,  765, 1651, 1652, 1727,
  310,  523, 1194, 1491,  170,  520,  521, 1195, 1196, 1360,
 1628, 1492, 1493, 1494, 1495, 1598, 1496, 1497, 1498, 1499,
 1500, 1501, 1502, 1503, 1504, 1673, 1714, 1637, 1716,  435,
  678, 1331,  436, 1053, 1599, 1644, 1645, 1683,  368,  369,
  437, 1038, 1248, 1404,    0,    0, 1039, 1040,  118,  260,
  458, 1614,  351, 1167, 1345, 1468, 1656, 1657, 1658, 1659,
 1165,  319,  539,  779, 1215,  540,  777,  197,   53,  314,
  175,  136,  297,  161,  304,  167,  739,  736,  305,  315,
  769,  316,  536, 1000,  162,  298,  507,  541, 1216,   90,
  172,  218,  579,  580,  741, 1020,  742, 1021, 1022,  583,
  584,  585,  586, 1013,  828,  587,  588,  589,  794,  590,
  487,  791,   37,   38,   39,   55,  177,  321,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  704,  471,  950,
 1170,  472,  473,  709,   40,  135,  293,   41,  488,  489,
 1175,  725,  691,  261,  459,  460,  461,  695,  936,  937,
  938,  939, 1159,  438, 1147,  119,  120, 1459, 1460,  439,
 1462,  440,  441,  442,    0, 1665, 1575, 1666, 1667, 1668,
 1710, 1752,  388, 1119,   42,   43,  352,   44,   45,  480,
  481,  873, 1116, 1300, 1304,  389,  648,  187,  619,  620,
  621,  622,  623,  624,  625,  626,  627,  628,  629, 1267,
 1063, 1065, 1066,  922,  676,  443,  444,  445,  446,  447,
  372,  211,  448,  449,  905,  450,  451,  452,  453,  668,
  909, 1148, 1143,  669,
};
static short yysindex[] = {                                   4368,
 2452, -143, 3238,   70,  753,  437, 3115,  362, 2491,   47,
  508, 1091, -143, 1189,  466,  350,  -99,    0,  810,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -95,
    0,    0,    0,    0,    0,    0, 5292,  439,  469,  568,
  350,  588,    0,    0,  559,  876,  602,  439,  656,  911,
  568,  758,  350,  588,    0,  783,  821,    0,  735,    0,
  919,    0,    0,  955,  966,    0,  350,  986,  439, 1134,
  966,  656,  469,  568,  758,  350,  588,  783,  821,    0,
  568, 1065,    0,    0,    0, 1457,    0, 1457,    0, 1123,
 1140,  210, 1505,    0,    0,    0,  602,  350,  602, 1169,
 1187, 1201,  160, 1787,    0,   67,   76,  433, 1095,    0,
  656, 1290, 1020,    0,    0, 1216, 1207,  568,  350,  783,
    0,    0, 1414,  -65, 1354,  580,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  446,    0,    0,  876,    0,   28,    0,    0, 1653,    0,
 1108,    0,    0,   29,    0, 1276,    0,    0, 1264,    0,
    0, 1334,    0,    0, 1470,    0,    0,  876,    0,    0,
    0, 1084, 1653,    0,  596,    0,    0, 1424,    0, 1427,
    0,    0, 1457,    0,    0,    0,    0,    0, 1410,    0,
    0, 1289,    0,    0, 1426, 1316,    0,    0,    0, 1289,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1845,
    0,  602,    0,    0,    0,  744, 1370,  839,  821,  889,
 1442, 1751, 1472, 1476,  744, 1394,  839, 1431, 1436,    0,
 5692,    0,    0,    0, 5692,    0,    0,    0,    0, 3765,
    0,    0, 1384,  469, 1467, 1380,  856,  350, 1398,    0,
    0, 1020,    0,    0,    0,    0,    0,    0,    0, 1378,
    0,    0, 1653,    0, 1424,    0, 1457,    0, -150, 1433,
    0, 1406,    0,  996, 1495, 1186,  580,    0, 1570, 1168,
    0,  602,    0,  446,    0,    0,    0,    0,  602, 1462,
   -9, 1408,  418, 1838,    0, 5835,    0,    0,   57,    0,
    0,    0, 1822, 1822,  876, 1514,  876, 1355, 1334,    0,
    0, 6194,    0,  568,  588,    0, 1462,    0,    0, 1602,
  826, 1863,  350, 1633,  469,    0,    0, 1872,  194, 1649,
    0,    0,    0, 1466,    0,    0,    0,    0, 1473, 1475,
    0,    0, 1749, 2139,    0,    0,    0,    0, 1875,    0,
    0,    0, 1766,    0,  350, 1507,    0,  568, 1490,    0,
   87,    0,    0,    0,    0,  350, 1378,  665,    0,  350,
    0, 1639,  568, 1918,  744, 1564, 1934, 1935, 1940,    0,
    0, 1942, 1956,    0, 1973, 1975,    0, 1979,    0,    0,
 1982,    0,    0,    0,    0,    0, 1992,    0,    0, 4307,
 2000, 2002,    0, 5692, 5692, 4486, 1575, 2010, 1747,    0,
    0,    0,    0,    0,    0, 1906,    0, 1922,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1936,    0, 1192,    0, 1730, 2009,    0,
  394,   53,    0,  924,    0,  556,    0,  556,    0,    0,
 2017,    0,  140, 1625,    0,    0,    0,    0, 2016,  142,
 2003, 1462, 2025, 1802,    0, 1789, 1789, 2023,    0, 2024,
    0, 1689,    0,  141, 1724,    0,    0,    0,    0,  876,
    0, 1822, 1822, 1822, 1822,    0, 2031,    0, 1804, 1808,
    0,    0,    0, 1779,    0, 6194,    0,    0, 6194, 1816,
    0, 1653, 1828, 1626, 3498,    0,    0,  803,    0, 1626,
 1231, 1108,    0, 1698, 1657, 1627,    0,    0,    0,  590,
 1701,    0, 1643,  758,    0,  876,    0, 1829,    0,    0,
 1355,    0,    0,    0,    0,  138, 1668,    0,    0,    0,
 1669,    0, 1705, 2074,    0, 1768, 2080,   -5,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2032,  571,    0,    0,    0,    0,  180, 2088, 2089, 2080,
 1653,    0, 1820,    0, 1888,    0,  876,  876,    0,   -9,
   29,    0, 1771,    0, 1741, 2120,    0, 5099,  177,    0,
 1776, 1794, 2138, 2360, 2149, 1891, 4837,   21,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1823, 2139,  602,    0,    0, 1369, 1742,
    0,    0, 1725,  839,    0, 1864,    0, 1825, 2151,    0,
 1864, 1369, 1871, 1873,  568, 1075, 4550,  191,  656, 5692,
 1233, 1297, 1298, 2740, 5692, 2360, 1192, 1744,  425, 5692,
 4550,  151,  151, 1189, 1996, 2152,    0,    0, 4787, 1738,
 5692, 5692, 5692, 5692, 5692,    0, 5692,  137,    0,  131,
 1757, 4550, 1750,    0,    0,    0,  646,    0,    0,  -74,
    0, 1764,    0,    0,    0,  350, 1274,  350,    0,    0,
  602, 1378,    0,    0, 4550, 1953,   -9,    0, 1738,  735,
  735, -150,  145,  602,    0,  876,  876,    0,  -27, 1643,
 1643, 1755,  758, 1186,    0,    0, 2179,    0,    0,    0,
    0, 1947,    0,  602,    0,    0,    0,    0,    0, 1946,
 2188,    0, 1930, 1948,    0,    0, 1887, 1894, 1457, 1963,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  758,  602, 5627, 1853, 1855, 1858,    0,  758,    0, 1328,
    0,    0, 1831,    0,   58, 1836,    0,    0,    0,  758,
    0, 2074,   88,    0,    0,    0, 1955,   88, 1840,   88,
    0, 2204,  758,  758,  758,    0, 1462,  350,    0, 1903,
    0, 1827,    0,    0,    0,   57, 1843,  350, 1835,  105,
    0,    0, 2228, 1991,    0,    0,    0,    0,  194, 1819,
 1433,    0, 1433, 3500,  463, 5692, 5692, 2444, 2247,  968,
 2679, 5692, 2914,  844, 2996, 3149, 4870, 3231, 3466, 3701,
 2360, 2360,    0,    0,    0,    0,    0, 1490,  568,  588,
 1490,  783,  821,  120, 2239,    0,    0,    0, 1369, 1911,
    0,  -48, 1933, 1378,    0, 4550, 1933, 2266, 2239, 1369,
  516, 1990, 5692, 5692, 2048, 5692, 2274, 5692, 2272, 2118,
 5692, 5692, 5692, 5692, 5692, 5692,    0,    0,    0,    0,
    0,    0,    0,    0, 1997, 1220,  605, 5692,  812, 4550,
    0, 2360, 1799, 1192,    0, 2273,  433,    0,    0,    0,
 1192, 1857,    0,    0, 2041,  151,  151, 1121, 1121,  245,
    0,    0,    0,  131, 2284, 2285,  604,    0,    0, 2360,
 1999,    0,    0,    0,    0,    0,    0,    0,    0,  448,
    0,    0,    0,    0,    0, 1866, 1843,    0, 1830, 1830,
    0, 2292,    0,    0,    0, 1877,    0, 1822, 2071,    0,
  -27,    0,    0,    0,    0,    0,    0,    0, 2302, 2360,
 2529,    0,    0, 2044,    0,    0,    0, 2529,    0,    0,
    0, 1457, 1457, 1844, 2307,    0,    0,    0,    0,    0,
  -68,  -73, 1200,    0, 2084,    0,    0,    0, 1897,   70,
 1879, 1937, 1947, 2321,    0, 1643, 1883,    0,    0,  658,
    0, 2306, 1897,  730,  758, 2327, 2329, 2340, 2119,   29,
 2044, 1822, 1724,   -9,    0, 1701, 1189, 1931, 1944,    0,
  112,    0,  758, 1994, 2083, 5099,    0,    0,  758, 1901,
 2087,    0,    0, 2358, 2361,    0,  909, 1192, 2366,    0,
    0, 1192, 2367, 5050,    0,    0,    0, 2055, 2370, 1192,
 2372, 1082, 2373, 1192, 2374, 5692, 5692, 2247, 5692, 5132,
 2376, 1192, 2377, 2379, 1192, 2381, 5692, 1192, 2382, 1192,
 2384, 2391, 1192, 2392, 2393, 1192, 2394,    0, 2175,    0,
    0,    0,    0,    0,    0, 2114, 1369,    0, 1369,  120,
 2239,    0,  185,  185,  162,    0,    0,    0, 1909,    0,
 2266, 2239, 2402,  516, 2129, 2232,    0, 2298,    0, 2314,
 5692,    0, 2324, 2587, 2919, 2953, 3021, 3029, 5692,  758,
 4550, 1192, 2011, 4550,    0, 5692,    0, 2148,  706, 5692,
 4550, 5692, 5692,    0,    0,  604, 2418, 4550, 1207,  131,
 2073,    0, 2076, 2081, 2116, 2199, 2145,    0,    0,    0,
 2044,    0, 1931,  756,    0,    0, 2057,  876, 2091, 1643,
 2086, 1643,    0, 2360,  674,    0,    0,    0,    0,    0,
    0,    0, 2043, 2217, 2044,    0, 5692,    0, 2205, 2090,
 1844,  735,    0, 2360,    0,    0,    0, 2108, 2109, 2110,
 2113, 2117, 2121,    0,    0,    0,    0,    0, 2460,   70,
    0, 1755,    0,    0,   88,    0, 2529, 2130,   88,    0,
   88,    0, 1947, 2469,    0,    0,    0,    0,   57, 2217,
 1643,    0, 1724,    0,    0,  433, 2236,    0,  475,    0,
 2292,    0, 2480,    0, 2483,  876, -106, 2485,    0,  876,
    0,    0, 5692, 2103, 2103, 1189, 2486, 1915,    0, 2103,
 2103, 5692, 2103, 2103, 1485, 1192,    0, 1391, 5692, 1192,
 2103, 2103, 2103, 2103, 1192, 2103, 2103, 2103, 2103, 2103,
 2103, 2146,    0,    0,    0,    0,    0,    0,    0, 2094,
    0,    0,    0,    0, 4550,    0,  516, 2402,    0,    0,
 6194, 2494,    0,    0, 3044,    0,    0,    0,    0,    0,
    0, 3051,  124,    0, 4550, 2231, 2101,    0, 4550, 3069,
 1928,    0, 1769, 1192,    0, 1950,    0,  604,    0,    0,
    0,  131, 2697, 2360, 2144, 2217,    0,    0,    0, 1822,
    0,    0,  876, 1328,    0,    0,  691,    0,    0,  602,
 3604,    0,    0, 1192, 1789, 2205,    0, 1185,  350,    0,
 2207,  695, 2099, 2210, 2100, 2244, 2212, 2246, 2044,    0,
    0, 2512,    0, 2515,    0, 2214, 1789, 2130,    0,    0,
    0,    0,    0,    0,    0,    0, 2044, 1701,    0, 1328,
 2084, 3765, 2172,    0, 1843,    0,    0,    0, 2191,  393,
    0, 1947, 2196, 1192, 2519, 2530,  433,    0,    0, 2531,
 2532, 1192, 2534, 2536, 5692, 5692, 1192, 2538, 2540, 2541,
 2545, 2547, 2548, 2549, 2550, 2551, 2552,    0,  185,    0,
    0,    0,    0,    0,  758,    0,    0,    0, 4550,    0,
    0, 4550,    0, 1757,    0,  792, 2316,    0, 2561,    0,
    0,    0,    0,    0,    0,   21,  711,    0,    0,    0,
 1643,    0,    0,    0,    0, 6194,  104,  738, 2555, 1433,
 2566, 2267, 5692, 2556, 2567, 2558, 2559, 2560, 2270, 2564,
    0,    0,    0, 2315, 5379, 2572,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2592,    0,    0, 2282, 2295,
  350, 1844,    0,    0, 1457,  469,    0,    0,    0,    0,
    0,    0,    0, 2217,    0,    0,    0,    0,    0, 2217,
    0,    0,    0,    0, 2320,    0,    0, 5692,  876,    0,
    0,    0,  876,    0,    0, 5692,    0,    0,    0,    0,
 1192, 1192,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2601,    0,    0, 1999, 2360, 1738, 2697,
    0,    0, 2275,    0, 2606,    0,    0,    0,  114,    0,
 5367,  568, 5692,    0, 2308, 2360, 1579,    0, 2360,    0,
    0,    0,  161,    0,    0,   13,    0, 2195,    0,    0,
    0,    0, 1844, 1457,    0, 2264,    0,    0,    0,    0,
 2084,    0,  133, 1757, 1192,    0,    0, 1769,    0, 2145,
   21,    0,    0,    0,  707, 2529,    0, 2593,    0, 1943,
 5595, 2243,  161,  703,    0,  764,  762,    0,    0,    0,
  439, 2190,   70,  163,    0,    0,    0, 2264,  -32, 1844,
 2271, 2276,    0,    0,  133, 2610,  604,    0,    0, 1999,
 2617, 1757, 2144,  350,    0, 2618, 2619,  799,    0,    0,
    0, 3944, 2251, 2620,    0,  647, 2229, 2368,    0,  161,
    0,    0,    0,    0, 3604,   13, 1844,  -87,  -87,    0,
 2375,    0, 2233,    0,    0,  604, 2633,  133, 2338, 2145,
    0, 1999,    0,    0,    0,  707, 2643,    0,  469,    0,
 1996, 1957,  127, 2626, 2395, 2383, 3604, 3604,    0,    0,
    0,    0,    0, 2222,  536,    0,    0,    0,    0,  604,
  133, 2144, 2145,    0,  469,    0,    0,  161, 2657,    0,
 1819, 3604, 2404,    0,    0,    0,    0,  958,    0, 2144,
 2658, 2662, 1962,    0,    0, 3604, 2360,    0,  469,    0,
    0,    0,   21,    0,
};
static short yyrindex[] = {                                      0,
    0,  192, 1057,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  975, 1967,    0,    0,    0,    0, 2713,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  380,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1043,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2380,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2333,    0,    0,    0,  107,    0,  107,    0,    0,
    0,    0, 2339,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4008, 2209,    0,
    0,    0, 1197,    0,    0,    0,  817,    0,    0,    0,
    0,    0,    0,    0,  386,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   -6,    0,
    0,    0,    0,  649,    0, 1210,    0,    0,    0,    0,
    0, 1007,    0,    0, 6501,    0,    0,    0,    0,    0,
    0,    0,   -6,    0,  -49,    0,    0, 2685,    0,    0,
    0,    0, 2464,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1311,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1063,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  490,    0,
    0, 1358,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   -6,    0, 2685,    0, 2464,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1390,    0, 2451,    0,
    0,    0,    0, 1399,    0,    0,    0,    0,    0, 2466,
  766, 4164,    0, 1418,    0,    0,    0,    0,  639,    0,
    0,    0, 2277, 2277,    0,    0,    0, 1453, 1583,    0,
    0,    0,    0,    0,    0,    0, 2466,    0,    0, 1299,
    0,    0,    0,    0,    0,    0,    0, 4724, 2342,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1459,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1501,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1517,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6072,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6242,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  190,    0,    0, 2412,    0,
  203,    0,    0,    0,    0,  322,    0,  322,    0,    0,
  748,    0,  787,  997,    0,   64,    0,    0,    0, 1275,
    0, 2466,    0,    0,    0,   75,   75,  420,    0,    0,
    0,  701,    0, 2772,  206,    0,    0,    0,    0,    0,
    0, 2277, 2277, 2277, 2277,    0,  215,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2471,    0,    0,    0,    0,    0, 2451,    0,    0,
 1352,    0,  -81, 2278,    0,    0,    0,    0,    0,    0,
  724,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1536,    0,    0,    0,    0, 1521, 1013,    0,    0,    0,
 1103,    0,    0, 1188,    0,    0, 1268,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2237, 2475,    0,    0,    0,    0, 1444,  945,    0, 1268,
   -6,    0,    0,    0,    0,    0,    0,    0,    0,  766,
 1395,    0,    0,    0,    0, 2326,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  484,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
  135,    0,    0,    0,    0, 5774,    0, 5774,    0,    0,
 5774, 5774, 5774,    0,    0,    0, 2291,    0,    0,    0,
    0, 6856, 6993, 4243,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2162,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  879,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  766,    0,    0,   83,
   83,    0,    0,    0,    0,    0,    0,    0, 2924,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  648,    0,    0,    0,    0,    0,    0,    0, 2704,
    0,    0,  902, 1743,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  660,  664,  671,    0,    0,    0, 2420,
    0,    0,    0,    0,    0, 1547,    0,    0,    0,    0,
    0, 1188,    0,    0,    0,    0,  396,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2466,    0,    0,  318,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 8407,
    0,    0,    0,  240,    0,    0,    0,    0, 2435,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1544, 1551,    0,    0,    0,    0,    0,
    0,    0, 1554,    0,    0,    0, 1554, 1559, 1572,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  850,    0,    0, 5774,    0,    0,    0,
 1692,    0,    0,    0, 6379, 7163, 7300, 6549, 6686,    0,
    0,    0,    0,    0,  530, 1727, 1716,    0,    0,    0,
 1611,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  851,  851,
    0,  819,    0,    0,    0,    0,    0, 2277, 2287,    0,
 2950,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2477,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1284,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1581,    0,    0,    0,    0,    0,
    0,    0, 1592,    0,    0,    0,    0,    0,    0,    0,
    0,  840,    0,    0,    0,    0,    0,    0,    0, 1395,
 2477, 2277, 1584,  766,    0, 2488, 1967, 1615,  101,    0,
    0,    0,    0, 8407,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3755,    0,    0,
    0, 4867,    0,    0,    0,    0,    0,    0,    0, 5343,
    0, 7396,    0, 7459,    0,    0,    0,    0,    0,    0,
    0, 7539,    0,    0, 7623,    0,    0, 7657,    0, 7668,
    0,    0, 7767,    0,    0, 7857,    0,    0, 2225,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1544,
 1650,    0, 2317,  301,    0,    0,    0,    0,    0,    0,
 1666, 1672, 1679,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2323,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2413, 1422,    0, 1573,    0,
 2417,    0, 2422, 2429,    0,    0,  582,    0,    0,    0,
 2477,    0, 1615,    0,    0,    0, 2726,    0,    0,    0,
 2297,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2301,    0, 2493,    0,    0,    0, 1847,    0,
 1284, 2380,    0,    0,    0,    0,    0,  683,  686,  710,
  720,  750,  804,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  169,    0,    0,
    0,    0, 1796,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1681,    0,    0, 4008,    0,    0,    0,    0,
 1696,    0,    0,    0,    0,    0,  199,    0,    0,    0,
    0,    0,    0,    0,    0, 4243,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7863,    0, 7940,    0, 8026,
    0,    0,    0,    0, 8046,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1711,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1733,    0,    0,    0, 2142,    0,    0,
    0,    0,    0,    0,  907,    0,    0,    0,    0, 2277,
    0,    0,    0, 2528,    0,    0,    0,    0,    0,    0,
 2465,    0,    0, 2734, 1605, 2511,    0, 2451,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2477,    0,
    0,    0,    0,    0,    0,    0, 1717,  829,    0,    0,
    0,    0,    0,    0,    0,    0, 2477, 2488,    0,  345,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,    0, 8129,    0,    0, 5774,    0,    0,    0,
    0, 8174,    0,    0,    0,    0, 8261,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  301,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  346,    0, 2413, 1122,    0, 1326,    0,
    0,    0,    0,    0,    0,  371, 2739,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2472,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1616,    0,    0,   99,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8282, 8388,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
    0,    0, 2743,    0,    0,    0,    0,    0, 2721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2478,    0,    0,
    0,    0, 1616,  113,    0,   85,    0,    0,    0,    0,
    0,    0,    0,   90, 2734,    0,    0,    0,    0,  202,
 1759,    0,    0,    0, 2739,    0,    0,    0,    0,    0,
  262,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   77,    0, 1284,
  182,  474,    0,    0,    0,  325,  541,    0,    0,   91,
    0,  346, 2751, 1145,    0,    0, 2754,    0,    0,    0,
    0,    0, 2737,  274,    0, 2492,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1616,    0,    0,    0,
    0,    0,    0,    0,    0, 2413, 1970,    0,    0,   97,
    0,   96,    0,    0,    0, 2739,    0,    0,    0,    0,
 1918,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  987,
    0,   79,  202,    0,    0,    0,    0,    0, 2742,    0,
    0,    0, 4082,    0,    0,    0,    0, 2413,    0, 2751,
 2757,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1420,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2803,    0,    0, 2806,
    0,    0,    0,    0,    0,   10,    0, 2808,    1,  798,
   37, -566, 1699,  845, -213,  195, 2798, 2565,    0,  -36,
    0, 2573,  -91,  -44,    0,  599, -872,  -25,  -42,  -33,
 -158, 2578, 2180,    0,    0,    0, 1392,    0,    0,  -47,
 1780, -484,   -4, -808, 2223, 2007, -267, 1790, 2752, -281,
    0,  -54,    0, -626,  -46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -569, -593, 1795, -272,  -52, -897,    0,    0,
    0,    0, -291,  -85,-1057, 1805, -306,  -43,    0, -483,
    0,    0, -467, -939,    0, 1449,    0,    0, 2553, -588,
  -17,    0,    0,    0,    0, 2521,    0, 2289, 2568, -168,
 1846, -665,    0,    0,    0, -672,    0,    0,    0,    0,
    0,    0, 1882,    0, 2581, 2154, 1834, 2563, 2569,    0,
 1296,    0, -481, 2125,  -56, -647, -689,    0,    0,   31,
 -931, -929, -921, -217, -915,    0, 1497, -957,    0, 1236,
-1127, 1513,    0, 2359,    0,    0,    0, 1241, 1243, 1206,
   59, -223, -349, -273,    0,    0, 2153,    0, 1703,    0,
    0, -502,    0,    0,    0,    0, -184,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,-1331,    0, -661,
    0,-1104, -278, 1155, 1302,    0, 1215,    0,    0, 2544,
  -98, 1954, 1740, 1567,    0,    0,    0, -972, -611, -848,
 1516,    0, -464, -547, -434, -700,    0, -455, 1260,  271,
 -205, -514, -734, -888,-1165,    0,    0,   -2,    0,    0,
    0,    0,    0, 2604,    0,    0,    0,    0, 2632, 2389,
    0,    0,    0,    0,    0, 2625,    0,    0,    0,    0,
  -16,    0,    0,    0, -309, 2123, -308, 1708, -417,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2348,    0,
-1141, 2156,    0,    0,    0, 2938,    0,    0,    0,    0,
 2684,    0,    0,    0,    0, 2499,    0, 2497,    0,    0,
    0, 2261,    0,    0,    0,    0,    0,  -93,    0, 2248,
 2008,    0,-1180, 1637,    0, 2279, -609, 2281,    0, -733,
 2045,    0,    0, -119, -650,    0, 2859,    0, 1411,-1099,
    0,-1093,-1081,-1074,    0, 1515,    0, 1279,    0, 1322,
    0, 1221,    0,    0,    0,    0, 2510,    0,    0,    0,
 -311, 2346, 2122,-1003,    0,    0,    0, -388,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3055,
 1595, 1923,    0, -528,    0,    0,    0, -218,    0,    0,
 2630,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -967, 1856,    0,
};
#define YYTABLESIZE 8905
static short yytable[] = {                                     127,
  186,   73,  166,  188,   72,  169,  235,  282,  180,   34,
  486,  371,  367,  185,  171,  713,  193,  254,  257,  721,
  916,  549,  581,  582,  219,  832,  198,  835,  514,  958,
  253,  256,  544,  205,  740,  516,  223,  743,  200,  224,
  291,  752,  457,  754,  699,  228,  230,  885, 1198, 1188,
  241, 1189,  243, 1336,  967,  229, 1188,  195, 1189, 1190,
  127,  227,  917,  934,  222, 1192, 1190,  611, 1152,  226,
  957,  242, 1192, 1370,  215,  647,  255,  907,  686,  382,
  225, 1036,  612,  283,  255,  878,  816,  287,  382,  681,
  667, 1199,  285,  959,  960,  478,  679,  697,  735,  984,
  352, 1010, 1207,  263,  934,  954,  251,  934,  991,  946,
 1301,  344,  735,  595,   71,  255,  306,  255,  215, 1011,
  255, 1228,  934,  825,  934,  255,  612,  506,  255,  252,
  644,  370, 1016,  215,  726,  255,  667,  686,  252,  735,
  333,  612,  735,  255, 1044,  371,  367, 1245,  681,  667,
  735,  232, 1454,  735,  962,  679,  735,  735,  930,  352,
  479, 1031, 1580, 1107, 1446,  994, 1738, 1410,  135,  490,
  934,  735, 1655, 1324, 1626,  374, 1326,  785,  932,  653,
  727,  251,   71,  708,  427,  712,  932,  519,  728,  720,
  519,  557,  684,  726,  290,  484,  491,  685,  429,  377,
 1156, 1458,  454,  239, 1223,  462, 1686,  456,  377,  466,
  730,  731,  732,  733,  464,  581,  582,  463,  427,  803,
  642,   71,  251,  477,  252,  251,  941,  135, 1210,   71,
  720,  470,  887,  720, 1294, 1534, 1296,  121,   71,   88,
  251, 1368,  679, 1461,  549,  515,  627,  252,  720, 1463,
  557,  337,  518,  239,  186,  760,  531,  267,  716,  534,
  366, 1464, 1098, 1099,  462,  370, 1118,  479, 1465, 1688,
 1208,  795, 1113,  464,  786, 1640, 1406,  545,  524,  547,
   84,  392,  851,   84,  307,  317,  126, 1385, 1153,  591,
 1724,  998,  133,  599,  650, 1188, 1473, 1189,  603,  933,
  517, 1676, 1110,  128,  797, 1190,  601, 1171,   70,  593,
  476, 1192,   54, 1121, 1123,  537,  934,  124, 1380,  107,
  318,  585,  952, 1149,  357, 1641,  538,  934,  934,  968,
  477, 1725,  316,  641,  933,  129, 1642, 1155,  638,  215,
  796,  482, 1533,  934,  194,  134,   73,  216,  641,  646,
  130, 1206,   14,  651,  255,  443,  255, 1447,  377,  517,
 1411, 1450,  308,  318,  255,  468,  934,  667,  934, 1211,
  678,  672,  673,  675, 1209, 1017,  124,  215, 1726,  605,
  585, 1739,  934,  357, 1605,  617,  681,  108, 1114,  934,
  735, 1185,  735,  215,  366,  134,  750, 1402, 1200, 1201,
  735,  612,  969,  194,  934,  267, 1753,  852, 1368,  726,
 1689,  678,  121,  121,  988,  215,  371,  855,  681,  604,
  519,  681,  667,  612, 1395, 1246, 1338,  667, 1458,  678,
  680,  654, 1537,  931, 1294, 1563,  681, 1662,  605,  457,
 1643,  882, 1445,  486,  617, 1654,  366, 1252,  135, 1302,
  258,  183,  729,  720,  134,  255,  519,  780,  707,  251,
 1475,  251,  979,  462, 1505,  981, 1506, 1685,  756,  251,
 1461, 1251,  464,  252,  457, 1647, 1463,  255,  604,  987,
  247, 1565,  735,  680,  255,  382,  681,  667, 1464,  580,
  735,  735,  667,  679,  886, 1465,  735,  457,  782, 1043,
 1332, 1532,  726, 1056, 1398, 1352, 1005, 1332,   88, 1531,
  720,  250,  462,  735,  252, 1239,  975,  252,  255,  686,
  735,  464, 1690,  627,  680,  250, 1674,  953,   70,  640,
  681,  667,  252,  686,  250, 1268,  856,  679,  696,  781,
  358,  643,  680,  186,  681,  667,  250, 1051,  580,  810,
  811,  679, 1046,   73,  735,  352, 1383, 1308,  519, 1723,
  251,  825, 1117,  834,  163,  978,  934, 1712, 1546,  609,
  640, 1576,  183,  640, 1106, 1371, 1578,  215,  255,  857,
  746,  679,  251, 1029,  358,  612,  255,  476,  640,  251,
 1397,  168,  479,  124,  350, 1357,   70,  183,  679,  358,
  735,  557,  490, 1542,  456,  183,   73,  890, 1456,  827,
  641,  945,  906,  519,  735, 1372,  609,  913,  914, 1608,
  975,  476,  679,  251,  462,  609,  921,  802,  925,  926,
  927,  928,  929,  464,  921,   70, 1612,  826,  470,  456,
  679,  889,  720,   70,  973,  974,  238,  519,  374,  807,
  720,   84,   70,  357, 1417,  477,  357,  693,  457,  380,
  186,  800,  456,  378,  585,  854,  124,  374,  517,  470,
  379,  951,  318,  134,  681,  134, 1180,  681,  963,  963,
 1472, 1240,  385,  251,  316,  386, 1669,  518,  519,  678,
 1680,  519,  258,  194, 1188, 1440, 1189,  470,  605, 1100,
  619, 1229, 1103,  299, 1190,  530,  519,  374,  519,  382,
 1192,  678, 1653, 1197, 1358,  997,  999, 1661,  380,  381,
  605,  357,  378,  394,  851, 1205,  617,  585,  977,  379,
  585, 1474,  910,  911, 1405, 1517,  259, 1054,  604, 1055,
 1241,  385,  681, 1677,  386, 1227,  585,  586, 1540,  384,
 1230,  252,  300,  252,  479, 1466, 1695,   77,  678,  619,
  604,  252,  371, 1191,   91,  357,  996,  678,  382,  371,
 1191, 1030,  585, 1229,  134, 1004, 1046,  357,  381,  357,
  109, 1041,  394, 1057, 1058, 1062,  596, 1014, 1070, 1072,
 1074,  121, 1082, 1085, 1088, 1090, 1093, 1096, 1026, 1027,
 1028, 1566,  680,  383, 1678, 1680,  586, 1384,  384,  111,
  124,  678,  680, 1394, 1101,  680,  647,  477,  618, 1104,
 1679, 1346, 1233,  456,  680,  678,   73, 1441,  136, 1105,
 1125, 1126,  580, 1128, 1102, 1130, 1746,  294, 1133, 1134,
 1135, 1136, 1137, 1138,  858,  596,  879,  799,  640,  852,
  615,  640,  252, 1168,  694, 1142,  112,  914,  640, 1311,
  647,  640,  383,  338,  301,  640,  851,  580,  132,  358,
  640,  680,  358,  640,  252,  647,  912,  618,  183, 1622,
  680,  252,  302,  494,  655, 1541,  295,  136, 1747,  640,
  644,  774, 1037,  644,  615,  580,  122, 1507,  580,  163,
  679,  221,  470,  123, 1169,  519,  686,  374,  644,  615,
 1715,  248,  374,  640,  580,  252,  303,  640,  374, 1528,
 1362,  519,  679,  380,  680, 1161,  640,  378,  775,  165,
  945, 1638,  494,  702,  379,  851,  728,  358,  680, 1162,
  580, 1379,  221,  640,  524,  221,  385,  686,  519,  386,
  684,  682,  851,  683,  519,  685,  851,  519,  249,  861,
  221,  339, 1703, 1163,  851,  686, 1399,  851,  176,  679,
  640, 1638, 1401,  382,  557,  252,  380,  186,  679, 1621,
 1332,  358,  640,  381,  374,  524,  359,  394,  524, 1567,
  640,  852, 1597,  358, 1579,  358,  581, 1634,  296,  207,
 1636,  581,  582,  524,  703,  524,  150,   73,  371, 1191,
 1219,  921,  529,  384, 1299, 1299, 1303, 1164, 1719, 1620,
 1234, 1332,  679, 1275, 1276,  851, 1278, 1280,  168, 1524,
  359, 1749,  776,  557, 1285,  524,  470,  208, 1254, 1337,
 1141,  619,  559,  240, 1258,  359,  374, 1530,  173, 1758,
 1571, 1638,  529,  529, 1571,  581,  529,  380, 1471,  519,
  852,  378,  183, 1111, 1457,  150,  519,  383,  379,   74,
   75,  529, 1469,  529, 1122, 1572, 1638,  852, 1315, 1572,
  385,  852,   14,  386,  519,  240, 1322,  457,  914,  852,
  586,  914,  852, 1142, 1354,  760, 1356, 1330,  914, 1333,
 1334,  559,  530,  529,  250,  914,  366,  382,  136,  649,
   73,   73, 1700, 1161,  519, 1076,  189,  381,  519, 1144,
 1145,  670,  757,  684,  682,  586,  683, 1162,  685,  596,
  963,  944, 1077, 1573, 1538, 1323, 1707, 1573,  647,  466,
 1582, 1329,  530,  530, 1364,  647,  530,  384,  647, 1660,
  852, 1163,  647,  586, 1733, 1400,  586,  644,  644,  618,
  647,  530,  670,  530,  596,  670,  240,  124, 1763,  615,
 1263,  192,  586, 1708,  598, 1568,  647, 1078,  375,  221,
  670,  221, 1721, 1583,  457, 1663, 1709,  547,  680,  221,
   93,  615,  596,  530,  681,  596,  564, 1702,  586, 1696,
  647,  383,  524,  758,  124, 1164, 1079,  240, 1409,  561,
 1414,  596, 1413,  647, 1743, 1744,   70,   73,  524, 1422,
 1382,  524,  524,  490,  524,  686, 1427,   95,  547,  524,
  647,  547,  524,  684,  682,  647,  683,  596,  685, 1755,
  467,  479, 1730,  202,  759,  524,  547,  686,  547, 1348,
 1609,  524,  456, 1762,  524,  564, 1610,  647, 1611, 1349,
  644,  684,  682, 1146,  683, 1732,  685,  537,  561,  647,
  529,  647,  914, 1080,  681, 1748,  914,  212,  547, 1161,
  221,   99,  379,  249,  589,  150,  529,  178,  179,  529,
  529, 1457,  529, 1162,  686,  468,   96,  529, 1750,  380,
  529,  644,  221,  186,  477,  963,   97,  150,  537,  221,
  341,  537,  469,  529, 1639,  359, 1476, 1163,  359,  529,
 1067,  114,  529,  524,  249,  666,  537,  249,  537,  700,
  655,   98, 1515,  681,  258,  589,  150,  178,  179,  581,
 1299, 1757,  249,  221,  493,  524, 1068,  686,  269,  456,
   92,  456,  524,  494, 1639,  150,  524,  563,  537,  114,
  530,  680,  265,  524,  150,  311,  666,  681,  312,  341,
  150, 1164, 1551, 1552,  581,  479,  530,  210,  883,  530,
  530,  524,  530,  359,  666, 1577,  524,  530,  150,  401,
  530,  529,   93, 1272,  114,  456,  914,  266,  402,  914,
  680, 1720,  581,  530,   94,  581,  681,  371, 1191,  530,
  456,  524,  530,  529,  313,  524,  563,  398,  110,  362,
  529,  581, 1581, 1606,  529,  267,  213,  359,  268,   95,
 1587,  529,  684,  682, 1639,  683,   73,  685,  477,  359,
  670,  359, 1564,  521,  269,  547,  217,  581,  401,  529,
  490, 1699,  159,  670,  529,  512,  220,  402,  339, 1639,
  362,  547,  670,  362,  502,  547,  231,  547,  513, 1607,
  270,  680,  547,  490, 1604,  547,  398,  681,  362,  529,
  740,  530,  697,  529,  521, 1615,  334,  521,  547, 1585,
 1699, 1616,  258, 1618,  547, 1617,  232,  547,   96,  680,
   42, 1212,  521,  530,  521,  681,  236,  740,   97,  670,
  530,  159, 1648,  490,  530,  503,   50,  339,  670,  697,
  517,  530,  335,  237, 1699,  537,  684,  682, 1630,  683,
 1632,  685,  697,   98,  521,  160,  891, 1631, 1213,  530,
 1140,  537, 1699,   40,  530,  537,  514,  537,  240,  504,
   23,   99,  537,  731,  244,  537,  258,  258,   46,   42,
  490,  517,  670, 1509,  517,  479,  547,  505,  537,  530,
  245,   48,  638,  530,  537,   50,  670,  537,  914,  517,
  472,  517,  151,  126,  246, 1510, 1681,  514,  547,  117,
  514,  519, 1511,  490,  160,  547,  127,  479,  479,  547,
  893,  895,   40,  348,  215,  514,  547,  514, 1664,   23,
  667,  353,  731,  638,  369,  249,  638,   46,  490, 1711,
  684,  682,  479,  683,  547,  685, 1512,  264,  477,  547,
   48,  638,  519,  502,  280,  519,  479, 1635,  127,  472,
   73,  151,  126, 1684,  666,  215,  537, 1664,  215,   24,
  519,  667,  519,  374,  547,  548,  249,  666,  547,  249,
  477,  477, 1736,  215,  374,   47,  666,  281,  537,  667,
  680,   49,  292,  369,  249,  537,  681,  948,   44,  537,
  127,  127,  116,  117,  503,  477,  537,  289,  616, 1664,
  323,  424,  309,  425,  949,  115,  767,  858,  768,  477,
  320,  521, 1426,  493,  537, 1293,  427, 1295,   24,  537,
   45,  252,  494,  666,  127,  631,  215,  521,  504, 1006,
 1007,  521,  666,  521,   47,  322,  630,  324,  521,  325,
   49,  521,  845,  331,  537,  845,  505,   44,  537,  127,
  341,  362,  486,  633,  521,  343, 1425,  345,  362,  346,
  521,  362,  326,  521,  115,  362,  631,  633,  635,  631,
  122,  122,  349,  362,  680,  633,  666,  630,  350,   45,
  681,  859,  378,  846,  631,  215,  846,  327,  517,  362,
  666,  633,  386,  486,  845,  630,  486,  686,  684,  682,
  387,  683,  390,  685,  391,  519,  393,  517,  517,  635,
  517,  486,  635,  362,  514,  517,  637,  860,  517,  636,
  684,  682,  861,  683,  395,  685,  362,  635,  862,  396,
  462,  517,  521,  514,  514,  846,  514,  517,  464,  380,
  465,  514,  474,  362,  514,  633,  519,  863,  476,  519,
  684,  682, 1150,  683,  521,  685,  228,  514,  492,  519,
   14,  521,  501,  514,  519,  521,  745,  509,  680,  744,
  362,  151,  521,  853,  681,  875,  635, 1035,  874,  519,
 1034,  519,  362,  522,  362, 1042,  519,  529,  821,  519,
  521,  532,  542,  151,  364,  521,  546,  228,  596,  363,
  228,  638,  519,  249,  638,  249,  602, 1154,  519,  517,
 1153,  638,  600,  249,  638,  228, 1172,  252,  638, 1034,
  521,  604,  151,  638,  521,  397,  638, 1179,  635, 1221,
 1178,  517, 1220, 1226,  398,  514, 1225,  630,  517,  667,
  616,  151,  638,  424,  631,  425,  632,  517,  399,  517,
  151,  612,  667,  639,  354,  400,  151,  514,  427, 1306,
  380,  667, 1305,  252,  514, 1419,  638,  517, 1153,  652,
  638,  644,  517,  613,  151,  514,  655,  688, 1453,  638,
  519, 1452,  401,  656,  657,  402,  689,  684,  682,  658,
  683,  659,  685,  514,  684,  682,  638,  683,  514,  685,
 1455,  517,  519, 1452,  249,  660,  687, 1737,  667,  519,
 1452, 1671, 1761,  403,  404, 1680,  665,  667,  665,  665,
  519,  665,  661,  638,  662,  405,  249,  514,  663,  406,
  486,  664,  486,  249,  665,  638,  680,  614,  519,  665,
  486,  665,  681,  519,  631,  677,  918,  684,  682,  670,
  683,  671,  685,  486,  631,  630,   92,  631,  680,  679,
  690,  667,  692,  710,  681,  630,  631,  249,  630,  655,
  706,  711,  519,  715,  717,  718,  722,  630,  719,  723,
  615,  724,  493,  519,  734,  519,  407,  635,  680,  738,
  635,  735,  408,  519,  681,  737,  748,  635,   93,  690,
  635,  747,  409,  772,  635,  771,  519,  773,  778,  635,
   94,  250,  635,  631,  789,  783,  356,  357,  358,  410,
  178,  179,  631,  790,  630,  787,  788,  792,  635,  793,
  411,  486,  798,  630,  240,   95,  228,  804,  805,  359,
  360,  412,  413,  414,  361,  362,  415,  416,  808,  417,
  354,  632,  635,  486,  418,  419,  635,  420,  421,  422,
  486,  809,  820,  423,  818,  635,  631,  397, 1132,  684,
  682,  681,  683,  821,  685,  829,  398,  630,  631, 1309,
  684,  682,  635,  683,  519,  685,  830,  831,  869,  630,
  399,  872,  632,  363,  486,  632,  354,  400,  833,  870,
  876,  880,  919,  881,   96,  908,  519,  355,  923,  635,
  632,  252,  681,  519,   97,  613,  356,  357,  358,  940,
  694,  635,  946,  975,  401,  680,  955,  402,  980,  985,
  681,  681,  680,  799,  751,  240,  665,  986,  681,   98,
  988,  992,  750,  665,  361,  362,  496,  519,  993, 1001,
  995, 1002,  665, 1025, 1003,  403,  404,  240,  663, 1009,
  663,  663, 1012,  663,  240, 1018,  665,  405, 1023, 1032,
 1037,  406,  665,  665, 1050,  751,  663, 1049,  751,  614,
  665,  663, 1310,  684,  682,  680,  683,  496,  685, 1052,
  496,  681, 1109,  751,  684,  682, 1064,  683,  240,  685,
  665,  360,  884,  665,  888,  496, 1112,  892,  894,  896,
 1115, 1675,  356,  357,  358,  360,  178,  179,  674, 1107,
 1124, 1127,  615,  360, 1129, 1131, 1151, 1139,  407,  665,
  680,  665,  665, 1158,  408,  359,  360, 1166, 1160,  360,
  361,  362, 1174,  665,  409,  636, 1181,  665, 1313,  684,
  682, 1184,  683, 1193,  685, 1202, 1204, 1214,  356,  357,
  358,  410,  178,  179, 1314,  684,  682, 1217,  683, 1222,
  685, 1224,  411, 1231, 1316,  684,  682, 1235,  683, 1236,
  685,  359,  360,  412,  413,  414,  361,  362,  415,  416,
 1237,  417, 1238,  360, 1249, 1247,  418,  419, 1043,  420,
  421,  422, 1256, 1259,  665,  423, 1260,  680, 1261,  616,
  665, 1262,  424,  681,  425, 1264, 1265, 1269,  680, 1270,
  665, 1271, 1273, 1274,  681, 1281, 1282,  427, 1283,  194,
 1284, 1286,  252, 1287,  665,  665,  665,  665,  665,  665,
 1288, 1289, 1290, 1291,  354, 1071,  851, 1075,  665, 1083,
 1086, 1292, 1091, 1094, 1097, 1307, 1325,  665,  665,  665,
  665,  665,  665,  665,  665,  665, 1328,  665, 1335, 1342,
  632, 1339,  665,  665, 1340,  665,  665,  665,  663, 1341,
  632,  665, 1343,  632,  519,  663, 1344, 1355,  194, 1350,
  681, 1353,  632,  426,  663,  655,  424, 1361,  425, 1359,
  681,  355,  524,  681, 1373, 1374, 1375, 1369,  663, 1376,
 1381,  427,  681, 1377,  663,  663,  252, 1378, 1386, 1396,
  229,  680,  663, 1403,  496,  519,  496,  681,  519, 1407,
 1266,  496,  680, 1408,  496, 1412, 1418,  194,  681,  632,
 1439, 1438,  663,  519, 1442,  663, 1449,  496,  632, 1448,
 1467, 1518, 1520,  751, 1516, 1521,  751, 1523, 1519,  681,
 1522,  229, 1525,  751,  229, 1526,  751, 1536,  681, 1544,
  751,  663, 1539,  663,  663,  751, 1527, 1543,  751,  229,
 1545, 1547, 1548,  363, 1549,  663, 1550,  680, 1553,  663,
 1554, 1555,  632,  681,  751, 1556,  194, 1557, 1558, 1559,
 1560, 1561, 1562,  680,  632, 1569,  356,  357,  358,  681,
  178,  179,  681,  680, 1570, 1586, 1589,  108,  751,  681,
 1593,  751,  751, 1584, 1588,  496, 1590, 1591, 1592,  359,
  360,  751, 1594, 1595,  361,  362,  397, 1317,  684,  682,
 1600,  683, 1601,  685, 1602,  398,  663,  496,  751, 1603,
 1613, 1619,  663, 1624,  496, 1625, 1596, 1649, 1633,  399,
 1682, 1670,  663, 1698, 1691,  354,  400, 1701, 1705, 1693,
  751, 1713, 1706, 1452, 1717,  751,  663,  663,  663,  663,
  663,  663, 1718, 1729,  613, 1689, 1688,  751,  496,  751,
  663, 1731, 1735,  401, 1740, 1745,  402, 1742, 1741,  663,
  663,  663,  663,  663,  663,  663,  663,  663,  194,  663,
 1680, 1759, 1760, 1059,  663,  663, 1060,  663,  663,  663,
  397, 1756,    1,  663,  403,  404,   28,  612,  426,  398,
  194,  424,   30,  425,  201,  179,  405,  735,  366,  269,
  406,  517,  623,  399,  267,  147,  427,   80,  614,  354,
  400,  252,  917,  211,  517,  191,   46,  274,  453,  194,
   92,  394,  519,  517,  519,  192,  655,   47,  916,  519,
  653,  279,  519,  273,   48,  649,  179,  401,  194,  179,
  402,  175,  651,  287,  367,  519,  194,  194,  692,  221,
  285,  615,  691,  194,  179,  194,  286,  407,  240,   49,
  229,  686,   93,  408,  693,  321,  328,  702,  403,  404,
  319,  194,   25,  409,   94,   28,  194,   36, 1297,  113,
  405,  394,  385,  194,  406,  194,  384,  356,  357,  358,
  410,  178,  179,  871,  354, 1257,  819, 1048,  194,   95,
  175,  411,  221, 1255,  194, 1253, 1529, 1243,  194,  784,
  359,  360,  412,  413,  414,  361,  362,  415,  416,  555,
  417,  511, 1183,  519,   50,  418,  419,  194,  420,  421,
  422,  497, 1508,  194,  423,  483,  680, 1244, 1232, 1061,
  956,  407,  681,  526, 1627,  519,  194,  408,  990,  527,
 1514,  355,  519, 1687,  194,  194,   51,  409,  766,  240,
   52,  194, 1694, 1692, 1728, 1754,  983, 1363,   96, 1646,
 1722,  356,  357,  358,  410,  178,  179,  634,   97,  194,
 1173,  240, 1347, 1470, 1697,  411,  519, 1535,  240,  535,
  770,  508, 1024,  185,  359,  360,  412,  413,  414,  361,
  362,  415,  416,   98,  417,  517, 1393,  806, 1069,  418,
  419, 1060,  420,  421,  422,  397,  194, 1015,  423,  186,
  115,   99,  240,  426,  398,  475,  424,  194,  425, 1318,
  684,  682,  701,  683,  705,  685,  947, 1176,  399,  961,
  942,  427,  409,  943,  354,  400,  252,  262, 1157, 1764,
 1623, 1574,  185,  179, 1734, 1704,  356,  357,  358,  714,
  178,  179,  633, 1319,  684,  682,  877,  683, 1120,  685,
 1277, 1327,  401,    0,  179,  402,    0,    0,  186,  359,
  360,  412,  413,  414,  361,  362,  415,  416,    0,    0,
    0,    0,    0,    0,  418,  419,  179,    0,    0,  175,
    0,    0,  179,  403,  404,  426,    0,    0,  424,    0,
  425,    0,    0,    0,    0,  405,    0,    0,    0,  406,
  175,  403,    0,  427,    0,  179,    0,    0,  252,    0,
    0, 1320,  684,  682,    0,  683,    0,  685,    0, 1321,
  684,  682,  175,  683,  179,  685,    0,    0,  175,    0,
    0,    0,    0,  179, 1443,  684,  682,    0,  683,  179,
  685, 1444,  684,  682,    0,  683,    0,  685,    0,    0,
    0,  175,    0,    0, 1061,    0,  407,  179,    0, 1451,
  684,  682,  408,  683,    0,  685,    0,    0,    0,    0,
  175,    0,  409,    0,    0,    0,    0,    0,    0,  175,
    0,    0,    0,    0,    0,  175,  356,  357,  358,  410,
  178,  179,    0,    0,  179,    0,    0,    0,    0,    0,
  411,    0,    0,  175,    0,   70,    0,  410,    0,  359,
  360,  412,  413,  414,  361,  362,  415,  416,  411,  417,
    0,    0,    0, 1073,  418,  419, 1060,  420,  421,  422,
  397,  185,    0,  423,    0,    0,    0,  417,  426,  398,
  175,  424,    0,  425,    0,  420,  421,  422,  680,    0,
    0,    0,  185,  399,  681,    0,  427,  186,    0,  354,
  400,  252,  897,  898,  899,  900,  901,  902,  903,  904,
    0,    0,    0,    0,  185,    0,    0,    0,  186,    0,
  185,    0,  680,    0,    0,    0,    0,  401,  681,    0,
  402,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  186,    0,    0,  185,    0, 1081,  186,    0, 1060,    0,
    0,    0,  397,    0,    0,    0,    0,    0,  403,  404,
  426,  398,  185,  424,    0,  425,    0,    0,    0,  186,
  405,  185,    0,    0,  406,  399,    0,  185,  427,    0,
    0,  354,  400,  252,    0,    0,    0,    0,  186,    0,
  680,    0,    0,    0,    0,  185,  681,  186,  680,    0,
    0,    0,    0,  186,  681,    0,    0,    0,    0,  401,
    0,    0,  402,  680,    0,    0,    0,    0,    0,  681,
  680,  186,    0,    0,    0,    0,  681,    0,    0, 1061,
    0,  407,  185,    0,    0,    0,    0,  408,  680,    0,
  403,  404,    0,    0,  681,    0,    0,  409,    0,    0,
    0,    0,  405,    0,    0,    0,  406,    0,  186,    0,
    0,  356,  357,  358,  410,  178,  179,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,    0,    0,  359,  360,  412,  413,  414,  361,
  362,  415,  416,    0,  417,    0,    0,    0, 1084,  418,
  419, 1060,  420,  421,  422,  397,    0,    0,  423,    0,
   78, 1061,    0,  407,  398,    0,    0,   79,    0,  408,
    0,   80,   81,    0,    0,    0,    0,    0,  399,  409,
   82,    0,    0,    0,  354,  400,    0,    0,    0,    0,
    0,    0,   83,  356,  357,  358,  410,  178,  179,    0,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,  401,    0,    0,  402,  359,  360,  412,  413,
  414,  361,  362,  415,  416,    0,  417,    0,    0,    0,
 1089,  418,  419, 1060,  420,  421,  422,  397,    0,    0,
  423,    0,    0,  403,  404,  426,  398,    0,  424,    0,
  425,    0,    0,    0,    0,  405,    0,   84,    0,  406,
  399,    0,    0,  427,    0,    0,  354,  400,  252,    0,
    0,    0,   56,    0,   85,    0,    0,    0,    0,    0,
  918,  684,  682,   57,  683,    0,  685,    0,    0,   86,
   58,    0,    0,   87,  401,    0,    0,  402,    0,  849,
  848,  850,    0,   59,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1061,    0,  407,    0,    0,    0,
    0,    0,  408,   89,    0,  403,  404,    0,    0,    0,
    0,    0,  409,    0,    0,    0,    0,  405,    0,    0,
    0,  406,    0,    0,    0,    0,  356,  357,  358,  410,
  178,  179,    0,    0,    0,    0,    0,    0,    0,    0,
  411,    0,    0,    0,   60,    0,    0,    0,    0,  359,
  360,  412,  413,  414,  361,  362,  415,  416,    0,  417,
   61,    0,    0,    0,  418,  419,    0,  420,  421,  422,
    0,    0,    0,  423,    0,    0, 1061,   62,  407,    0,
    0,    0,    0,    0,  408,    0,    0,    0,    0,    0,
    0,    0,   63,    0,  409,    0,   64,    0,    0,   65,
    0,    0,    0,    0,    0,    0,    0,   66,  356,  357,
  358,  410,  178,  179,    0,    0,    0,    0,    0,    0,
    0,    0,  411,    0,    0,    0,   67,    0,    0,    0,
    0,  359,  360,  412,  413,  414,  361,  362,  415,  416,
    0,  417,    0,    0,    0, 1092,  418,  419, 1060,  420,
  421,  422,  397,    0,    0,  423,    0,    0,    0,    0,
  426,  398,    0,  424,    0,  425,    0,    0,    0,    0,
    0,    0,    0,    0,  799,  399,    0,    0,  427,    0,
    0,  354,  400,  252,    0,    0,    0,    0,    0,    0,
  556,  836,    0,    0,  557,    0,    0,    0,    0,  680,
    0,    0,  750,    0,    0,  681,    0,    0,  837,  401,
    0,    0,  402,  558,    0,  799,  559,    0,  799,    0,
    0,    0,    0,    0,  426,    0,  455,  424,    0,  425,
    0,    0,    0,  799,    0,    0,    0,    0,    0,    0,
  403,  404,  427,    0,  838,    0,    0,  252,    0,    0,
    0,    0,  405,  839,    0,    0,  406,  560,    0,    0,
    0,  840,    0,  561,  562,  563,    0,  564,  565,  566,
    0,  567,    0,    0,    0,    0,    0,    0,    0,    0,
  841,    0,  842,    0,    0,    0,    0,    0,    0,    0,
    0,  568,    0,  569, 1361,    0,  843,    0,  844,  845,
  846,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1061,    0,  407,    0,    0,    0,    0,    0,  408,
    0,    0,    0,    0,  570,    6,    0,    0,    0,  409,
    0,    0,    0,    0,    0,    0, 1477, 1478,    0, 1479,
    0,  571, 1480,  356,  357,  358,  410,  178,  179,  847,
    0,    0,    0,    0,    0,    0, 1481,  411,    0,    0,
    0,    0, 1482,  572,    0,    0,  359,  360,  412,  413,
  414,  361,  362,  415,  416,    0,  417,    0,  183,    0,
 1095,  418,  419, 1060,  420,  421,  422,  397,    0,    0,
  423,    0,    0,    0,    0,    0,  398,    0,  573,  574,
    0,    0,    0,  426,    0,    0,  424,    0,  425,    0,
  399,    0,    0,    0,    0,  575,  354,  400,    0,    0,
    0,  427, 1483,    0,    0,    0,  252,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  799,    0,    0,    0,
    0,   14,    0,    0,  401,    0,    0,  402,    0,    0,
    0,  397,    0,    0,    0,    0, 1484,    0,    0,    0,
  398,    0,    0,    0,    0,    0,   16,  928,    0,  928,
  928,    0,  928,    0,  399,  403,  404, 1485,    0,    0,
  354,  400,    0,    0,  476,  928,    0,  405,    0,    0,
  928,  406,    0,  799,    0,    0,  799,    0,    0,    0,
    0,    0,    0,  799,    0,    0,  799,    0,  401,    0,
  799,  402,    0, 1486,    0,  799,    0,    0,  799,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  799,    0,    0,  355,    0,  403,
  404,    0,    0,    0,    0,    0, 1061,    0,  407,    0,
    0,  405,    0,    0,  408,  406,    0,    0,  799,    0,
    0,  799,  799,    0,  409,    0,    0,    0,    0,    0,
    0,  799,    0,    0,    0,    0,    0,    0,  356,  357,
  358,  410,  178,  179,    0,    0,    0,    0,  799,    0,
    0,    0,  411,    0,    0,    0,    0,    0,    0,    0,
    0,  359,  360,  412,  413,  414,  361,  362,  415,  416,
  799,  417,  407,    0,    0,  799,  418,  419,  408,  420,
  421,  422,    0,    0,    0,  423,    0,  799,  409,  799,
  397,    0,    0,    0,    0,    0,    0,    0,    0,  398,
    0,    0,  356,  357,  358,  410,  178,  179,    0,    0,
    0,    0,    0,  399,    0,    0,  411,    0,    0,  354,
  400,    0,    0,    0,    0,  359,  360,  412,  413,  414,
  361,  362,  415,  416,    0,  417,    0,    0,    0,    0,
  418,  419,    0,  420,  421,  422,    0,  401,    0,  423,
  402,    0,    0,    0,  928,    0,    0,    0,    0,    0,
    0,    0,  665,  928,    0,  665,    0,  665,    0,    0,
    0,    0,    0,    0,    0,    0,  355,  928,  403,  404,
  665,    0,    0,  928,  928,  665,    0,    0,    0,    0,
  405,    0,    0,    0,  406,    0,    0,    0, 1415, 1416,
    0,    0,    0,    0, 1420, 1421,    0, 1423, 1424,    0,
    0,  928,    0,    0,  928, 1428, 1429, 1430, 1431,    0,
 1432, 1433, 1434, 1435, 1436, 1437,  426,    0,    0,  424,
    0,  425,  313,    0,    0,    0,    0,    0,    0,    0,
  928,  674,  928,  928,  427,    0,    0,    0,    0,  252,
    0,  407,    0,    0,  928,    0,    0,  408,  928,    0,
    0,    0,    0,  313,    0,    0,    0,  409,    0,    0,
  313,    0,    0,    0,  313,  313,    0,  313,    0,    0,
  313,  356,  357,  358,  410,  178,  179,    0,    0,    0,
    0,    0,    0,    0,  313,  411,    0,    0,    0,    0,
  313,    0,    0,    0,  359,  360,  412,  413,  414,  361,
  362,  415,  416,    0,  417,  928,    0,    0,    0,  418,
  419,  928,  420,  421,  422,    0,    0,    0,  423,    0,
    0,  928,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  928,  928,  928,  928,  928,
  928,    0,    0,    0,    0,    0,    0,    0,    0,  928,
  313,    0,    0,    0,    0,    0,    0,    0,  928,  928,
  928,  928,  928,  928,  928,  928,  928,    0,  928,  313,
    0,    0,  665,  928,  928,    0,  928,  928,  928,  665,
    0,    0,  928,    0,  313,    0,    0,    0,  665,    0,
    0,    0,    0,    0,  313,  426,    0,    0,  424,    0,
  425,    0,  665,  313,    0,  313,    0,    0,  665,  665,
    0,    0,  313,  427,    0,    0,  665,    0,  252,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  665,    0,    0,  665,
    0,  313,    0,  397,    0,    0,    0,    0,    0,    0,
    0,    0,  398,    0,    0,    0,    0,    0,    0,  426,
    0,    0,  424,    0,  425,    0,  399,  665,  665,    0,
    0,    0,  354,  400,    0,    0,    0,  427,    0,  665,
    0,    0,  252,  665,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  449,    0,    0,    0,    1,    0,
  401,    0,    0,  402,  449,  449,  449,  449,  449,  449,
  449,  449,  449,  449,  449,  449,  449,  449,  449,    0,
    2,  449,  449,  449,  449,    0,  449,    0,    3,  449,
  449,  403,  404,    0,    0,    4,    0,    5,    0,    6,
  665,    0,    0,  405,    7,    0,  665,  406,    0,    0,
    0,    8,    0,    0,    0,    0,  665,    0,    0,    0,
    0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
  665,  665,  665,  665,  665,  665,   10,    0,    0,    0,
    0,    0,    0,    0,  665,    0,    0,    0,    0,    0,
    0,    0,    0,  665,  665,  665,  665,  665,  665,  665,
  665,  665,    0,  665,  407,    0,    0,    0,  665,  665,
  408,  665,  665,  665,    0,    0,    0,  665,    0,    0,
  409,    0,  397,    0,    0,    0,    0,    0,  666,    0,
    0,  398,    0,    0,  356,  357,  358,  410,  178,  179,
    0,    0,    0,   11,    0,  399,    0,    0,  411,    0,
   12,  354,  400,   13,    0,   14,   15,  359,  360,  412,
  413,  414,  361,  362,  415,  416,    0,  417,    0,    0,
    0,    0,  418,  419,    0,  420,  421,  422,    0,  401,
   16,  423,  402,    0,    0,    0,  397,    0,    0,    0,
    0,    0,    0,    0,    0,  398,  426,  920,    0,  424,
    0,  425,    0,    0,    0,    0,    0,    0,    0,  399,
  403,  404,    0,    0,  427,  354,  400,    0,    0,  252,
    0,    0,  405,    0,    0,    0,  406,    0,    0,   17,
    0,    0,    0,    0,    0,    0,  768,    0,    0,    0,
    0,    0,    0,  401,    0,    0,  402,    0,  684,  682,
    0,  683,    0,  685,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  849,  848,  850,    0,
    0,    0,  355,  674,  403,  404,    0,  768,    0,  426,
  768,    0,  424,  407,  425,    0,  405,    0,    0,  408,
  406,    0,    0,    0,    0,  768,    0,  427,    0,  409,
    0,    0,  252,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,  357,  358,  410,  178,  179,    0,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,  359,  360,  412,  413,
  414,  361,  362,  415,  416,    0,  417,  407,    0,    0,
    0,  418,  419,  408,  420,  421,  422,    0,    0,    0,
  423,    0,    0,  409,    0,    0,  219,    0,    0,    0,
  219,    0,    0,    0,    0,    0,    0,  356,  357,  358,
  410,  178,  179,    0,    0,  219,    0,    0,    0,  219,
    0,  411,  219,    0,    0,    0,    0,    0,    0,    0,
  359,  360,  412,  413,  414,  361,  362,  415,  416,    0,
  417,    0,    0,    0,    0,  418,  419,    0,  420,  421,
  422,    0,    0,  397,  423,    0,    0,    0,    0,    0,
    0,    0,  398,  219,    0,    0,    0,    0,    0,  219,
  219,  219,    0,  219,  219,  219,  399,  219,    0,    0,
    0,    0,  354,  400,    0,    0,    0,    0,    0,  426,
    0,    0,  424,    0,  425,    0,    0,  219,    0,  219,
    0,    0,    0,    0,    0,    0,    0,  427,  836,    0,
  401,    0,  252,  402,    0,    0,  680,    0,    0,    0,
    0,    0,  681,    0,    0,  837,    0,    0,  768,    0,
  219,    0,    0,    0,    0,   79,  397,    0,    0,    0,
    0,  403,  404,    0,    0,  398,    0,  219,    0,    0,
    0,    0,    0,  405,    0,    0,    0,  406,    0,  399,
    0,  838,    0,    0,    0,  354,  400,    0,    0,  219,
  839,  426,    0,    0,  424,    0,  425,    0,  840,    0,
    0,    0,    0,    0,    0,  768,    0,    0,  768,  427,
    0,    0,    0,  401,  252,  768,  402,  841,  768,  842,
    0,    0,  768,    0,  219,  219,    0,  768,    0,    0,
  768,    0,    0,  843,  407,  844,  845,  846,    0,    0,
  408,  219,    0,    0,  403,  404,  768,    0,    0,    0,
  409,    0,    0,    0,    0,    0,  405,    0,    0,    0,
  406,    0,    0,    0,  356,  357,  358,  410,  178,  179,
  768,    0,    0,  768,  768,    0,    0,    0,  411,    0,
    0,    0,    0,  768,    0,    0,  847,  359,  360,  412,
  413,  414,  361,  362,  415,  416,    0,  417,    0,    0,
  768,    0,  418,  419,    0,  420,  421,  422,    0,    0,
    0,  423,    0,    0,    0,    0,    0,  407,    0,    0,
    0,    0,  768,  408,    0,    0,    0,  768,    0,    0,
    0,    0,    0,  409,    0,    0,  397,    0,    0,  768,
    0,  768,    0,    0, 1087,  398,    0,  356,  357,  358,
  410,  178,  179,    0,    0,    0,    0,    0,    0,  399,
    0,  411,  769,    0,    0,  354,  400,    0,    0,    0,
  359,  360,  412,  413,  414,  361,  362,  415,  416,    0,
  417,    0,    0,    0,    0,  418,  419,    0,  420,  421,
  422,  822,    0,  401,  423,  557,  402,    0,    0,    0,
    0,    0,    0,  769,    0,    0,  769,    0,    0,    0,
  823,    0,    0,    0,  558,    0,    0,  559,  397,    0,
    0,  769,    0,    0,  403,  404,  426,  398,    0,  424,
    0,  425,    0,    0,    0,    0,  405,    0,    0,    0,
  406,  399,    0,    0,  427, 1629,    0,  354,  400,  252,
    0,    0,    0,    0,    0,    0,    0,    0,  560,    0,
    0,    0,    0,    0,  561,  562,  563,    0,  564,  565,
  566,    0,  567,    0,    0,  401,    0,    0,  402,    0,
    0,    0,    0,    0,    0,    0,    0, 1266,    0,    0,
    0,    0,  568,    0,  569,    0,    0,  407,    0,    0,
    0,    0,    0,  408,    0,    0,  403,  404,    0,    0,
    0,    0,    0,  409,    0,    0,    0,    0,  405,    0,
    0,    0,  406,    0,    0,  570,    0,  356,  357,  358,
  410,  178,  179,    0,    0,    0,    0,    0,    0,    0,
    0,  411,  571,    0,    0,    0,    0,    0,    0,    0,
  359,  360,  412,  413,  414,  361,  362,  415,  416,    0,
  417,    0,    0,    0,  572,  418,  419,    0,  420,  421,
  422,    0,    0,    0,  423,    0,    0,    0,    0,  407,
    0,    0,    0,    0,    0,  408,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  409,    0,    0,    0,  573,
  574,    0,    0,    0,    0,    0, 1279,    0,    0,  356,
  357,  358,  410,  178,  179,    0,  575,    0,    0,    0,
    0,    0,    0,  411,  769,    0,    0,    0,    0,    0,
    0,    0,  359,  360,  412,  413,  414,  361,  362,  415,
  416,    0,  417,    0,    0,    0,    0,  418,  419,    0,
  420,  421,  422,  397, 1672,    0,  423,  424,    0,  425,
    0,    0,  398,    0,    0,    0,    0,    0,    0, 1361,
    0,    0,  427,    0,    0,    0,  399,  252,    0,    0,
    0,  769,  354,  400,  769,    0,    0,    0,    0,    0,
    0,  769,    0,    0,  769,    0,    0,    0,  769,    0,
    6,    0,    0,  769,    0,    0,  769,    0,    0,    0,
  401, 1477, 1478,  402, 1479,    0,    0, 1480,    0,    0,
    0,    0,  769,    0,    0,    0,    0,    0,    0,    0,
    0, 1481,    0,    0,    0,    0,    0, 1482,    0,    0,
    0,  403,  404,    0,    0,    0,  769,    0,    0,  769,
  769,  426,    0,  405,  424,    0,  425,  406,    0,  769,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  427,
    0,    0,  137,    0,  252,    0,  769,    0,    0,    0,
    0,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,  152,  153, 1483,  769,  154,
  155,  156,  157,  769,  158,    0,    0,  159,  160,    0,
    0,    0,    0,    0,  407,  769,   14,  769,    0,    0,
  408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409, 1484,    0,  928,    0,    0,  928,    0,  928,    0,
    0,   16,    0,    0,  356,  357,  358,  410,  178,  179,
 1596,  928, 1485,    0,    0,    0,  928,    0,  411,  476,
    0,    0,    0,    0,    0,    0,    0,  359,  360,  412,
  413,  414,  361,  362,  415,  416,    0,  417,    0,    0,
    0,  397,  418,  419,    0,  420,  421,  422, 1486,    0,
  398,  423,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  399,    0,    0,    0,    0,    0,
  354,  400,    0,    0,    0,    0,    0,    0,    0,  556,
    0,    0,    0,  557,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  401,    0,
    0,  402,  558,    0,    0,  559,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  355,    0,  403,
  404,    0,    0,    0,    0,    0,    0,    0,  397,    0,
    0,  405,    0,    0,    0,  406,  560,  398,    0,    0,
    0,    0,  561,  562,  563,    0,  564,  565,  566,    0,
  567,  399,    0,    0,    0,    0,    0,  354,  400,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  568,    0,  569,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  401,    0,    0,  402,    0,
    0,    0,  407,    0,    0,    0,    0,    0,  408,    0,
    0,    0,    0,  570,    0,    0,    0,    0,  409,    0,
  928,    0,    0,    0,    0,    0,  403,  404,    0,  928,
  571,    0,  356,  357,  358,  410,  178,  179,  405,    0,
    0,    0,  406,  928,    0,    0,  411,    0,    0,  928,
  928,  934,  572,    0,    0,  359,  360,  412,  413,  414,
  361,  362,  415,  416,    0,  417,    0,  183,    0,    0,
  418,  419,    0,  420,  421,  422,    0,  928,    0,  423,
  928,    0,    0,    0,    0,    0,    0,  573,  574,    0,
    0,  930,  934,  934,  934,  934,  934,  946,  934,  407,
    0,    0,    0,    0,  575,  408,    0,    0,  928,  928,
  934,  934,  934,  934,    0,  409,    0,    0,    0,    0,
  928,    0,    0,    0,  928,    0,    0,    0,    0,  356,
  357,  358,  410,  178,  179,    0,    0,    0,    0,    0,
    0,    0,  934,  411,  934,    0,    0,    0,    0,    0,
    0,    0,  359,  360,  412,  413,  414,  361,  362,  415,
  416,    0,  417,    0,    0,    0,    0,  418,  419,    0,
  420,  421,  422,    0,    0,    0,  423,    0,    0,    0,
    0,  928,    0,    0,    0,    0,    0,  928,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  928,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  928,  928,  928,  928,  928,  928,    0,    0,    0,
    0,  814,    0,    0,    0,  928,    0,    0,    0,    0,
    0,    0,    0,    0,  928,  928,  928,  928,  928,  928,
  928,  928,  928,    0,  928,    0,    0,    0,    0,  928,
  928,    0,  928,  928,  928,    0,    0,    0,  928,    0,
    0,    0,  814,  814,  814,  814,  814,    0,  814,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,    0,
  814,  814,  814,  814,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
    0,    0,  154,  155,  156,  157,    0,  158,    0,    0,
  159,  160,    0,  934,  814,  934,    0,    0,    0,    0,
    0,    0,    0,  934,    0,    0,    0,    0,    0,    0,
    0,  934,    0,    0,    0,    0,    0,  934,    0,    0,
  934,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  826,  934,
  934,    0,    0,  934,    0,    0,    0,    0,    0,    0,
  934,    0,  934,  934,    0,    0,  934,    0,    0,    0,
  934,    0,    0,  934,    0,  934,    0,  934,    0,    0,
    0,    0,  934,  934,    0,  934,    0,    0,    0,  826,
  826,  826,  826,  826,    0,  826,    0,    0,    0,    0,
    0,  934,  934,    0,  934,    0,    0,  826,  826,  826,
  826,    0,    0,    0,    0,    0,    0,    0,  934,    0,
  934,  934,  934,    0,    0,  934,    0,    0,  934,  934,
    0,    0,    0,    0,    0,    0,  556,    0,  934,    0,
  557,  826,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  934,    0,    0,  934,    0,    0,    0,  558,
    0,    0,  559,    0,    0,    0,    0,    0,    0,    0,
    0,  934,    0,  814,    0,  814,    0,  934,    0,    0,
    0,    0,  934,  814,    0,    0,    0,    0,    0,    0,
    0,  814,    0,  934,  934,    0,  934,  814,    0,    0,
  814,    0,  934,  560,    0,    0,    0,    0,    0,  561,
  562,  563,    0,  564,  565,  566,    0,  567,  829,  814,
  814,    0,    0,  814,    0,    0,    0,    0,    0,    0,
  814,    0,  814,  814,    0,    0,  814,  568,    0,  569,
  814,    0,    0,  814,    0,  814,    0,  814,    0,    0,
    0,    0,  814,  814,    0,  814,    0,    0,    0,  829,
  829,  829,  829,  829,    0,  829,    0,    0,    0,    0,
  570,  814,  814,    0,  814,    0,    0,  829,  829,  829,
  829,    0,    0,    0,    0,    0,    0,  571,  814,    0,
  814,  814,  814,    0,    0,  814,    0,    0,  814,  814,
    0,    0,    0,    0,    0,    0,    0,    0,  814,  572,
  826,  829,  826,    0,    0,    0,    0,    0,    0,    0,
  826,    0,  814,    0,    0,  814,    0,    0,    0,    0,
    0,    0,    0,    0,  826,    0,    0,  826,    0,    0,
    0,  814,    0,    0,  573,  574,    0,  814,    0,    0,
    0,    0,  814,    0,    0,  830,  826,  826,    0,    0,
  826,  575,    0,  814,  814,    0,  814,  826,    0,  826,
  826,    0,  814,  826,    0,    0,    0,  826,    0,    0,
  826,    0,  826,    0,  826,    0,    0,    0,    0,  826,
  826,    0,  826,    0,    0,    0,  830,  830,  830,  830,
  830,    0,  830,    0,    0,    0,    0,    0,  826,  826,
    0,  826,    0,    0,  830,  830,  830,  830,    0,    0,
    0,    0,    0,    0,    0,  826,    0,  826,  826,  826,
    0,    0,  826,    0,    0,  826,  826,    0,    0,    0,
    0,    0,    0,  132,    0,  826,    0,  132,  830,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  826,
    0,    0,  826,    0,    0,    0,  132,    0,    0,  132,
    0,    0,    0,    0,    0,    0,    0,    0,  826,    0,
  829,    0,  829,    0,  826,    0,    0,    0,    0,  826,
  829,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  826,  826,    0,  826,    0,    0,    0,  829,    0,  826,
  132,    0,    0,    0,    0,    0,  132,  132,  132,    0,
  132,  132,  132,    0,  132,  824,  829,  829,    0,    0,
  829,    0,    0,    0,    0,    0,    0,  829,    0,  829,
  829,    0,    0,  829,  132,    0,  132,  829,    0,    0,
  829,    0,  829,    0,  829,    0,    0,    0,    0,  829,
  829,    0,  829,    0,    0,    0,  824,    0,  824,  824,
  824,    0,    0,    0,    0,    0,    0,  132,  829,  829,
    0,  829,    0,    0,  824,  824,  824,  824,    0,    0,
    0,    0,    0,    0,  132,  829,    0,  829,  829,  829,
    0,    0,  829,    0,    0,  829,  829,    0,    0,    0,
    0,    0,    0,    0,    0,  829,  132,  830,  824,  830,
    0,    0,    0,    0,    0,    0,    0,  830,    0,  829,
    0,    0,  829,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  830,    0,    0,    0,  829,    0,
    0,  132,  132,    0,  829,    0,    0,    0,    0,  829,
    0,    0,  823,  830,  830,    0,    0,  830,  132,    0,
  829,  829,    0,  829,  830,    0,  830,  830,    0,  829,
  830,    0,    0,    0,  830,    0,    0,  830,    0,  830,
    0,  830,    0,    0,    0,    0,  830,  830,    0,  830,
    0,    0,    0,  823,    0,  823,  823,  823,    0,    0,
    0,    0,    0,    0,    0,  830,  830,    0,  830,    0,
    0,  823,  823,  823,  823,    0,    0,    0,    0,    0,
    0,    0,  830,    0,  830,  830,  830,    0,    0,  830,
    0,    0,  830,  830,    0,    0,    0,    0,    0,    0,
    0,    0,  830,    0,    0,  823,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  830,    0,    0,  830,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  830,    0,  824,    0,  824,
    0,  830,    0,    0,    0,    0,  830,  824,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  830,  830,    0,
  830,    0,    0,    0,  824,    0,  830,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  825,  824,  824,    0,    0,  824,    0,    0,
    0,    0,    0,    0,  824,    0,  824,  824,    0,    0,
  824,    0,    0,    0,  824,    0,    0,  824,    0,  824,
    0,  824,    0,    0,    0,    0,  824,  824,    0,  824,
    0,    0,    0,  825,    0,  825,  825,  825,    0,    0,
    0,    0,    0,    0,    0,  824,  824,    0,  824,    0,
    0,  825,  825,  825,  825,    0,    0,    0,    0,    0,
    0,    0,  824,    0,  824,  824,  824,    0,    0,  824,
    0,    0,  824,  824,    0,    0,    0,    0,    0,    0,
    0,    0,  824,    0,  823,  825,  823,    0,    0,    0,
    0,    0,    0,    0,  823,    0,  824,    0,    0,  824,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  823,    0,    0,    0,  824,    0,    0,    0,    0,
    0,  824,    0,    0,    0,    0,  824,    0,    0,  828,
  823,  823,    0,    0,  823,    0,    0,  824,  824,    0,
  824,  823,    0,  823,  823,    0,  824,  823,    0,    0,
    0,  823,    0,    0,  823,    0,  823,    0,  823,    0,
    0,    0,    0,  823,  823,    0,  823,    0,    0,    0,
  828,    0,  828,  828,  828,    0,    0,    0,    0,    0,
    0,    0,  823,  823,    0,  823,    0,    0,  828,  828,
  828,  828,    0,    0,    0,    0,    0,    0,    0,  823,
    0,  823,  823,  823,    0,    0,  823,    0,    0,  823,
  823,    0,    0,    0,    0,    0,    0,    0,    0,  823,
    0,    0,  828,    0,    0,  793,    0,    0,    0,    0,
    0,    0,    0,  823,    0,    0,  823,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  823,    0,  825,    0,  825,    0,  823,    0,
    0,    0,    0,  823,  825,    0,  793,    0,    0,  793,
    0,    0,    0,    0,  823,  823,    0,  823,    0,    0,
    0,  825,    0,  823,  793,    0,    0,    0,  772,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  825,  825,    0,    0,  825,    0,    0,    0,    0,    0,
    0,  825,    0,  825,  825,    0,    0,  825,    0,    0,
    0,  825,    0,    0,  825,    0,  825,    0,  825,  772,
    0,    0,  772,  825,  825,    0,  825,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  772,    0,    0,
    0,    0,  825,  825,    0,  825,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  770,  825,
    0,  825,  825,  825,    0,    0,  825,    0,    0,  825,
  825,    0,    0,    0,    0,    0,    0,    0,    0,  825,
    0,  828,    0,  828,    0,    0,    0,    0,    0,    0,
    0,  828,    0,  825,    0,    0,  825,    0,    0,  770,
    0,    0,  770,    0,    0,    0,    0,    0,  828,    0,
    0,    0,  825,    0,    0,    0,    0,  770,  825,    0,
    0,    0,    0,  825,    0,    0,    0,  828,  828,    0,
    0,  828,    0,    0,  825,  825,    0,  825,  828,    0,
  828,  828,  771,  825,  828,    0,    0,    0,  828,    0,
    0,  828,    0,  828,    0,  828,    0,    0,    0,    0,
  828,  828,    0,  828,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  801,  793,    0,  828,
  828,    0,  828,  771,    0,    0,  771,  765,    0,    0,
    0,    0,    0,    0,    0,    0,  828,    0,  828,  828,
  828,  771,    0,  828,    0,    0,  828,  828,    0,    0,
    0,    0,    0,    0,    0,    0,  828,  801,    0,    0,
  801,    0,    0,    0,    0,    0,    0,    0,  765,    0,
  828,  765,    0,  828,  793,  801,    0,  793,    0,    0,
  772,    0,    0,    0,  793,    0,  765,  793,    0,  828,
    0,  793,    0,    0,    0,  828,  793,    0,    0,  793,
  828,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  828,  828,    0,  828,  793,    0,    0,    0,    0,
  828,    0,    0,    0,    0,    0,  766,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  772,    0,  793,
  772,    0,  793,  793,    0,    0,    0,  772,    0,    0,
  772,    0,  793,    0,  772,    0,    0,    0,    0,  772,
  770,    0,  772,    0,    0,    0,    0,  766,    0,  793,
  766,    0,    0,    0,    0,    0,    0,    0,  772,    0,
    0,    0,    0,    0,    0,  766,    0,    0,    0,    0,
    0,  793,    0,    0,    0,    0,  793,    0,    0,    0,
    0,    0,  772,    0,    0,  772,  772,    0,  793,    0,
  793,    0,    0,    0,    0,  772,  767,  770,    0,    0,
  770,    0,  800,    0,    0,    0,    0,  770,    0,    0,
  770,    0,  772,    0,  770,    0,    0,    0,    0,  770,
    0,    0,  770,    0,  771,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  772,    0,    0,  767,  770,  772,
  767,    0,    0,  800,    0,    0,  800,    0,    0,    0,
    0,  772,    0,  772,    0,  767,    0,    0,  801,    0,
    0,  800,  770,    0,    0,  770,  770,    0,    0,  765,
    0,    0,    0,    0,    0,  770,    0,    0,    0,  794,
    0,  771,    0,    0,  771,    0,    0,    0,    0,    0,
    0,  771,  770,    0,  771,    0,    0,    0,  771,    0,
    0,    0,    0,  771,    0,    0,  771,    0,    0,    0,
    0,    0,    0,    0,  770,  801,    0,    0,  801,  770,
  794,    0,  771,  794,    0,  801,  765,    0,  801,  765,
    0,  770,  801,  770,    0,    0,  765,  801,  794,  765,
  801,    0,    0,  765,    0,    0,  771,    0,  765,  771,
  771,  765,    0,    0,    0,    0,  801,    0,    0,  771,
    0,    0,    0,    0,    0,  802,    0,  765,  766,    0,
    0,    0,    0,    0,    0,    0,  771,    0,    0,    0,
  801,    0,    0,  801,  801,  803,    0,    0,    0,    0,
    0,  765,    0,  801,  765,  765,    0,    0,  771,    0,
    0,    0,    0,  771,  765,    0,  802,    0,    0,  802,
  801,    0,    0,    0,    0,  771,    0,  771,    0,    0,
    0,  765,    0,    0,  802,  766,  803,    0,  766,  803,
    0,    0,  801,    0,    0,  766,    0,  801,  766,    0,
    0,    0,  766,  765,  803,    0,    0,  766,  765,  801,
  766,  801,    0,    0,    0,    0,    0,    0,  767,    0,
  765,    0,  765,    0,  800,    0,  766,    0,  791,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  766,    0,    0,  766,  766,    0,    0,    0,    0,    0,
    0,    0,    0,  766,    0,    0,    0,    0,    0,  791,
    0,    0,  791,  795,    0,  767,    0,    0,  767,    0,
  766,  800,    0,    0,  800,  767,    0,  791,  767,    0,
    0,  800,  767,    0,  800,    0,    0,  767,  800,    0,
  767,  794,  766,  800,    0,    0,  800,  766,    0,    0,
    0,    0,    0,    0,  795,    0,  767,  795,    0,  766,
    0,  766,  800,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  795,    0,    0,    0,    0,    0,    0,    0,
  767,    0,    0,  767,  767,    0,  800,    0,    0,  800,
  800,    0,    0,  767,    0,    0,    0,    0,  794,  800,
  804,  794,    0,    0,    0,    0,    0,    0,  794,    0,
  767,  794,    0,    0,    0,  794,  800,    0,    0,    0,
  794,  792,    0,  794,    0,    0,    0,  802,    0,    0,
    0,    0,  767,    0,    0,    0,    0,  767,  800,  794,
    0,  804,    0,  800,  804,    0,    0,  803,    0,  767,
    0,  767,    0,    0,    0,  800,    0,  800,    0,  804,
    0,    0,  792,  794,    0,  792,  794,  794,    0,    0,
    0,    0,    0,    0,    0,    0,  794,    0,    0,    0,
  792,    0,    0,    0,  802,    0,    0,  802,    0,    0,
    0,    0,    0,  794,  802,    0,    0,  802,    0,    0,
    0,  802,    0,    0,  803,    0,  802,  803,    0,  802,
    0,    0,    0,    0,  803,  794,    0,  803,    0,    0,
  794,  803,    0,    0,    0,  802,  803,  796,    0,  803,
  791,    0,  794,    0,  794,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  803,    0,    0,    0,  802,
    0,    0,  802,  802,    0,    0,    0,    0,    0,    0,
    0,    0,  802,    0,    0,    0,    0,    0,  796,  803,
    0,  796,  803,  803,    0,  795,    0,    0,    0,  802,
    0,    0,  803,    0,    0,    0,  796,  791,    0,    0,
  791,    0,    0,    0,    0,    0,    0,  791,    0,  803,
  791,  802,    0,    0,  791,    0,  802,    0,    0,  791,
    0,    0,  791,    0,    0,    0,    0,    0,  802,    0,
  802,  803,    0,    0,    0,    0,  803,    0,  791,    0,
    0,    0,  795,    0,    0,  795,    0,    0,  803,    0,
  803,    0,  795,    0,    0,  795,    0,    0,    0,  795,
    0,    0,  791,    0,  795,  791,  791,  795,    0,    0,
    0,    0,  804,    0,    0,  791,    0,    0,    0,    0,
    0,    0,    0,  795,    0,    0,    0,    0,    0,    0,
    0,    0,  791,  792,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  795,    0,    0,
  795,  795,    0,    0,  791,    0,    0,    0,    0,  791,
  795,    0,    0,    0,    0,    0,    0,    0,    0,  804,
    0,  791,  804,  791,    0,    0,    0,  795,    0,  804,
    0,    0,  804,    0,    0,    0,  804,    0,    0,    0,
  792,  804,    0,  792,  804,    0,    0,    0,    0,  795,
  792,    0,    0,  792,  795,    0,    0,  792,    0,    0,
  804,    0,  792,    0,    0,  792,  795,    0,  795,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  792,    0,    0,  804,    0,    0,  804,  804,  796,
    0,    0,    0,    0,    0,    0,    0,  804,    0,    0,
    0,    0,    0,    0,    0,  792,    0,    0,  792,  792,
    0,    0,    0,    0,  804,    0,    0,    0,  792,  219,
    0,    0,    0,  219,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  792,  804,    0,  219,    0,
    0,  804,  219,    0,    0,  219,  796,    0,    0,  796,
    0,    0,    0,  804,    0,  804,  796,  792,    0,  796,
    0,    0,  792,  796,    0,    0,    0,    0,  796,    0,
    0,  796,    0,    0,  792,    0,  792,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  219,  796,    0,    0,
    0,    0,  219,  219,  219,    0,  219,  219,  219,    0,
  219,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  796,    0,    0,  796,  796,    0,    0,    0,    0,
  219,    0,  219,    0,  796,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  796,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  219,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  796,    0,    0,    0,    0,  796,    0,
  219,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  796,    0,  796,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  219,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  219,  219,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  219,
};
static short yycheck[] = {                                      16,
   57,    4,   49,   58,    4,   50,   98,  127,   56,    0,
  289,  230,  230,   57,   51,  480,   61,  116,  117,  487,
  671,  328,  332,  332,   79,  614,   63,  616,  301,  719,
  116,  117,  324,   67,  516,  303,   83,  519,   64,   84,
  134,  525,  260,  525,  462,   88,   91,  657,  988,  981,
  107,  981,  109, 1158,  727,   89,  988,   62,  988,  981,
   77,   87,  674,    0,   82,  981,  988,  349,  917,   86,
  718,  108,  988, 1201,    0,  387,    0,  666,    0,  238,
   85,  816,    0,  128,    0,  652,  601,  130,  247,    0,
    0,  989,  129,  720,  721,  280,    0,   45,    0,  747,
    0,   44, 1000,  121,   41,  715,   40,   44,  756,   46,
 1114,  203,    0,  337,   45,   40,  164,   41,   44,  785,
   44, 1019,   59,  608,   61,   41,   44,  296,   44,   63,
   44,  230,   45,   59,    0,   59,   41,   59,   63,   41,
  188,   59,   44,   59,   40,  364,  364, 1036,   59,   59,
   44,   40, 1333,   41,  724,   59,   44,   59,  687,   59,
  280,  809,   59,   44,   41,  759,   40,  274,    0,  289,
   40,   59,   40, 1141,   61,  232, 1144,   40,   42,  393,
   40,    0,   45,   44,   58,   44,   42,   41,  495,    0,
   44,    0,   42,   59,  260,  287,  290,   47,  251,  236,
  934, 1343,  255,   44, 1013,    0,   44,  260,  245,  284,
  502,  503,  504,  505,    0,  525,  525,  264,   58,   40,
  379,   45,   41,  280,   63,   44,  691,   59,  302,   45,
   41,  268,   42,   44, 1107, 1401, 1109,  287,   45,   41,
   59, 1199,   41, 1343,  551,  302,   44,   63,   59, 1343,
   59,  193,  309,   44,  311,  528,  313,  264,  482,  316,
  230, 1343,  851,  852,   59,  364,  876,  387, 1343,  302,
  339,  277,  321,   59,  556,  263, 1249,  325,  288,  327,
   41,  245,  262,   44,  257,  257,   16, 1227,   44,  334,
  378,  773,  388,  341,  388, 1227, 1354, 1227,  345,  688,
    0, 1633,  869,  403,  577, 1227,  343,  955,  459,  335,
  461, 1227,  456,  880,  881,  259,  398,    0, 1216,  273,
   59,    0,  711,  912,    0,  313,  270,  264,  265,  357,
  387,  419,   59,  378,  723,  435,  324,   93,  375,  265,
  346,  283, 1400,  280,    0,  441,  349,   77,  393,  386,
  450,  999,  418,  390,  278,  437,  280, 1325,  395,   59,
  467, 1329,  335,  335,  288,  440,  303,  420,  305,  443,
    0,  424,  425,  426,  443,  793,   59,  303,  466,    0,
   59, 1713,  319,   59, 1512,    0,   41,  341,  437,  471,
  278,  980,  280,  319,  364,    0,  285, 1246,  992,  993,
  288,  319,  430,   59,  341,  412, 1738,  387, 1366,  269,
  443,   41,  462,  463,  301,  341,  635,  635,  329,    0,
  274,  332,  332,  341, 1233, 1037, 1160,  332, 1570,   59,
  280,  395, 1405,  297, 1307, 1439,  286, 1618,   59,  657,
  428,  655,  319,  722,   59, 1611,  278, 1041,  280, 1115,
  260,  461,  500,  264,   59,  379,  310,  543,  319,  278,
 1358,  280,  735,  258, 1362,  738, 1364,  305,  525,  288,
 1570, 1041,  258,    0,  692, 1603, 1570,  401,   59,  752,
  321, 1449,  384,    0,  408,  644,  397,  397, 1570,    0,
  384,  379,  397,  397,  304, 1570,  384,  715,  546,  395,
 1151, 1399,  368,   41, 1239, 1178,  779, 1158,  310, 1398,
  321,  459,  307,  401,   41, 1030,  459,   44,  442,  441,
  408,  307, 1650,  321,   41,  459, 1631,  712,  459,    0,
  441,  441,   59,  455,  459, 1064,  635,  441,  486,  544,
    0,  455,   59,  600,  455,  455,  459,  829,   59,  597,
  598,  455,  820,  556,  442,  455, 1222, 1124,  412, 1687,
  379, 1046,  874,  616,  461,  734,  503, 1672, 1417,  432,
   41, 1469,  461,   44,  455, 1202, 1474,  503,  502,  636,
  522,    0,  401,  807,   44,  503,  502,  461,   59,  408,
 1238,  461,  712,  461,  453, 1184,  459,  461,  397,   59,
  502,  410,  722, 1412,  657,  461,  609,  660, 1342,  609,
  655,  697,  665,  467,  502, 1204,  432,  670,  671, 1517,
  459,  461,   41,  442,  419,  432,  679,  448,  681,  682,
  683,  684,  685,  419,  687,  459, 1534,  461,    0,  692,
   59,  659,  453,  459,  730,  731,  437,    0,    0,  591,
  461,  412,  459,  329, 1266,  712,  332,  264,  876,    0,
  717,   91,  715,    0,  343,  635,  349,  724,  368,  706,
    0,  708,  411,  278,  329,  280,  968,  332,  726,  727,
 1353, 1031,    0,  502,  411,    0, 1626,  744,   41,  319,
   44,   44,  260,  349, 1626, 1305, 1626,   59,  319,  858,
    0,   44,  861,  258, 1626,  288,   59,   59,   61,    0,
 1626,  341, 1610,  986,   41,  772,  773, 1615,   59,    0,
  341,  397,   59,    0,  262,  998,  341,  406,  733,   59,
  409,   41,  308,  309,  260,   41,  304,  831,  319,  833,
 1032,   59,  397,   41,   59, 1018,  425,    0,  356,    0,
   93,  278,  307,  280,  874, 1344, 1654,  321,  388,   59,
  341,  288,  981,  981,  403,  441,  771,  397,   59,  988,
  988,  808,  451,   44,  379,  778, 1044,  453,   59,  455,
  273,  818,   59,  836,  837,  838,    0,  790,  841,  842,
  843,  326,  845,  846,  847,  848,  849,  850,  803,  804,
  805, 1452,  319,    0,   41,   44,   59, 1225,   59,   12,
  461,  441,  329, 1231,  859,  332,    0,  874,    0,  862,
   59, 1171,   93,  876,  341,  455,  829, 1311,    0,  863,
  883,  884,  343,  886,  860,  888,  301,  258,  891,  892,
  893,  894,  895,  896,  329,   59,  652,  277,  319,  387,
    0,  322,  379,  406,  461,  908,   12,  910,  329, 1127,
   44,  332,   59,  268,  419,  336,  262,  378,   59,  329,
  341,  388,  332,  344,  401,   59,  452,   59,  461, 1569,
  397,  408,  437,   44,  344,  493,  307,   59,  353,  360,
   41,  302,  418,   44,   44,  406,  431, 1365,  409,  461,
  319,    0,  264,  438,  457,  258,    0,  259,   59,   59,
  264,  114,  264,  384,  425,  442,  471,  388,  270, 1387,
 1194,  274,  341,  264,  441,  322,  397,  264,  339,  461,
 1016, 1593,   93,  378,  264,  262, 1243,  397,  455,  336,
  451, 1214,   41,  414,    0,   44,  264,   41,  301,  264,
   42,   43,  262,   45,  307,   47,  262,  310,  114,  444,
   59,  366, 1663,  360,  262,   59, 1240,  262,  410,  388,
  441, 1633, 1245,  264,    0,  502,  461, 1034,  397, 1568,
 1631,  441,  453,  264, 1041,   41,    0,  264,   44, 1454,
  461,  387, 1495,  453, 1476,  455,    0, 1586,  419,  265,
 1589, 1311, 1311,   59,  449,   61,    0, 1010, 1227, 1227,
 1010, 1064,    0,  264, 1113, 1114, 1115,  414, 1680, 1567,
 1025, 1672,  441, 1076, 1077,  262, 1079, 1080,  461, 1379,
   44, 1732,  443,   59, 1087,   91,  398,  303, 1043, 1159,
  436,  341,    0,  278, 1049,   59,  398, 1397,  461, 1750,
  344, 1713,   40,   41,  344,   59,   44,  398, 1350,  412,
  387,  398,  461,  869, 1343,   59,  419,  264,  398,  317,
  318,   59, 1346,   61,  880,  369, 1738,  387, 1131,  369,
  398,  387,  418,  398,  437,  320, 1139, 1305, 1141,  387,
  343, 1144,  387, 1146, 1180, 1368, 1182, 1150, 1151, 1152,
 1153,   59,    0,   91,  459, 1158,  278,  398,  280,  445,
 1113, 1114, 1660,  322,  467,  272,  461,  398,  471,  308,
  309,    0,  320,   42,   43,  378,   45,  336,   47,  343,
 1178,  486,  289,  427, 1407, 1140,  338,  427,  322,  284,
  403,  436,   40,   41, 1197,  329,   44,  398,  332, 1614,
  387,  360,  336,  406, 1702, 1241,  409,  308,  309,  341,
  344,   59,   41,   61,  378,   44,  401,  461, 1757,  319,
  262,  261,  425,  375,  349,  384,  360,  334,  435,  278,
   59,  280, 1685,  446, 1402, 1620,  388,    0,  280,  288,
  302,  341,  406,   91,  286,  409,    0, 1662,  451, 1655,
  384,  398,  258,  401,  461,  414,  363,  442, 1256,    0,
 1263,  425, 1260,  397, 1717, 1718,  459, 1220,  274, 1272,
 1220,  277,  278, 1343,  280,  319, 1279,  339,   41,  285,
  414,   44,  288,   42,   43,  419,   45,  451,   47, 1742,
  385, 1361, 1698,  461,  442,  301,   59,  341,   61,  494,
 1524,  307, 1305, 1756,  310,   59, 1530,  441, 1531,  504,
  411,   42,   43,  452,   45, 1700,   47,    0,   59,  453,
  258,  455, 1325,  430,    0, 1731, 1329,  323,   91,  322,
  379,  461,  444,    0,  406,  279,  274,  462,  463,  277,
  278, 1570,  280,  336,  388,  440,  408,  285, 1733,  461,
  288,  452,  401, 1360, 1361, 1353,  418,  301,   41,  408,
    0,   44,  457,  301, 1593,  329, 1360,  360,  332,  307,
  353,  265,  310,  379,   41,    0,   59,   44,   61,  406,
  344,  443, 1369,   59,  260,  457,  330,  462,  463,  343,
 1439,  384,   59,  442,  349,  401,  379,  441,  425, 1402,
  260,    0,  408,  358, 1633,  349,  412,    0,   91,  303,
  258,  280,  343,  419,  358,  258,   41,  286,  261,   59,
  364,  414, 1425, 1426,  378, 1495,  274,  459,  304,  277,
  278,  437,  280,  397,   59, 1471,  442,  285,  382,    0,
  288,  379,  302,  312,  338,   44, 1449,  378,    0, 1452,
  280, 1680,  406,  301,  314,  409,  286, 1626, 1626,  307,
   59,  467,  310,  401,  307,  471,   59,    0,  328,    0,
  408,  425, 1477, 1515,  412,  406,  461,  441,  409,  339,
 1483,  419,   42,   43, 1713,   45, 1439,   47, 1495,  453,
  319,  455, 1445,    0,  425,  258,  461,  451,   59,  437,
 1570, 1657,    0,  332,  442,  288,  323,   59,    0, 1738,
   41,  274,  341,   44,  279,  278,  402,  280,  301, 1516,
  451,  280,  285, 1593, 1511,  288,   59,  286,   59,  467,
  418,  379,  338,  471,   41, 1538,  403,   44,  301, 1480,
 1696, 1539,  260, 1546,  307, 1543,   40,  310,  408,  280,
    0,  302,   59,  401,   61,  286,  384,  445,  418,  388,
  408,   59, 1604, 1633,  412,  330,    0,   59,  397,  375,
    0,  419,  439,  384, 1730,  258,   42,   43, 1581,   45,
 1583,   47,  388,  443,   91,    0,  304, 1582,  339,  437,
  321,  274, 1748,    0,  442,  278,    0,  280,   44,  364,
    0,  461,  285,    0,  386,  288,  260,  260,    0,   59,
 1680,   41,  441,  379,   44, 1685,  379,  382,  301,  467,
  384,    0,    0,  471,  307,   59,  455,  310, 1631,   59,
    0,   61,    0,    0,  384,  401, 1641,   41,  401,  495,
   44,    0,  408, 1713,   59,  408, 1613, 1717, 1718,  412,
  304,  304,   59,  212,    0,   59,  419,   61, 1625,   59,
    0,  220,   59,   41,    0,    0,   44,   59, 1738, 1672,
   42,   43, 1742,   45,  437,   47,  442,  338, 1685,  442,
   59,   59,   41,  279,  419,   44, 1756,   59, 1655,   59,
 1643,   59,   59, 1643,  319,   41,  379, 1664,   44,    0,
   59,   41,   61,  259,  467,  301,   41,  332,  471,   44,
 1717, 1718, 1709,   59,  270,    0,  341,  461,  401,   59,
  280,    0,  319,   59,   59,  408,  286,  404,    0,  412,
    0, 1698,  494,  495,  330, 1742,  419,  274,   40, 1706,
  357,   43,   40,   45,  421,    0,  466,  329,  468, 1756,
  425,  258,  312,  349,  437, 1107,   58, 1109,   59,  442,
    0,   63,  358,  388, 1731,    0,    0,  274,  364,  392,
  393,  278,  397,  280,   59,  462,    0,  394,  285,  396,
   59,  288,   41,  264,  467,   44,  382,   59,  471,   59,
  317,  322,    0,  322,  301,  319,  262,  338,  329,  461,
  307,  332,  419,  310,   59,  336,   41,  336,    0,   44,
  462,  463,  337,  344,  280,  344,  441,   41,  453,   59,
  286,  403,  403,   41,   59,   59,   44,  444,  258,  360,
  455,  360,  341,   41,   93,   59,   44,   41,   42,   43,
   40,   45,  321,   47,  319,    0,  403,  277,  278,   41,
  280,   59,   44,  384,  258,  285,   41,  439,  288,   44,
   42,   43,  444,   45,  384,   47,  397,   59,  450,  384,
  437,  301,  379,  277,  278,   93,  280,  307,  362,  461,
  451,  285,  435,  414,  288,  414,   41,  469,  461,   44,
   42,   43,   44,   45,  401,   47,    0,  301,  443,  258,
  418,  408,  358,  307,   59,  412,   41,  288,  280,   44,
  441,  279,  419,   41,  286,   41,   44,   41,   44,  278,
   44,  280,  453,  412,  455,   41,  285,  470,   44,  288,
  437,   44,   61,  301,   40,  442,  373,   41,  287,   45,
   44,  319,  301,  278,  322,  280,  264,   41,  307,  379,
   44,  329,   40,  288,  332,   59,   41,   63,  336,   44,
  467,   40,  330,  341,  471,  267,  344,   41,   44,   41,
   44,  401,   44,   41,  276,  379,   44,  462,  408,  319,
   40,  349,  360,   43,  462,   45,  462,  417,  290,  419,
  358,  293,  332,  437,  296,  297,  364,  401,   58,   41,
  461,  341,   44,   63,  408,   41,  384,  437,   44,  321,
  388,   44,  442,  315,  382,  419,  403,   46,   41,  397,
  379,   44,  324,   40,   40,  327,   41,   42,   43,   40,
   45,   40,   47,  437,   42,   43,  414,   45,  442,   47,
   41,  471,  401,   44,  379,   40,   91,   41,  388,  408,
   44,   59,   41,  355,  356,   44,   40,  397,   42,   43,
  419,   45,   40,  441,   40,  367,  401,  471,   40,  371,
  278,   40,  280,  408,   58,  453,  280,  379,  437,   63,
  288,   40,  286,  442,  319,  461,   41,   42,   43,   40,
   45,   40,   47,  301,  329,  319,  260,  332,  280,   40,
  321,  441,   44,  429,  286,  329,  341,  442,  332,  344,
   44,   46,  471,   61,   40,  264,   44,  341,  280,   46,
  422,  383,  349,  278,   44,  280,  428,  319,  280,  301,
  322,  278,  434,  288,  286,  278,  461,  329,  302,  321,
  332,  264,  444,  437,  336,  398,  301,  471,  398,  341,
  314,  459,  344,  388,  400,  277,  458,  459,  460,  461,
  462,  463,  397,   40,  388,  448,  448,  350,  360,   40,
  472,  379,   91,  397,  278,  339,  280,   40,   40,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  319,  491,
  296,    0,  384,  401,  496,  497,  388,  499,  500,  501,
  408,  264,  412,  505,  384,  397,  441,  267,   41,   42,
   43,    0,   45,   44,   47,  390,  276,  441,  453,   41,
   42,   43,  414,   45,  379,   47,  383,   40,  437,  453,
  290,  318,   41,   45,  442,   44,  296,  297,   40,  465,
   40,  321,   41,  321,  408,  452,  401,  353,  461,  441,
   59,   63,   41,  408,  418,  315,  458,  459,  460,  453,
  461,  453,  449,  459,  324,  280,  264,  327,   40,  274,
   59,  286,  280,  277,    0,  379,  260,   40,  286,  443,
  301,  345,  285,  267,  486,  487,    0,  442,  345,  387,
  278,  387,  276,   40,  387,  355,  356,  401,   40,  419,
   42,   43,  417,   45,  408,  301,  290,  367,  419,  357,
  418,  371,  296,  297,  274,   41,   58,   40,   44,  379,
  304,   63,   41,   42,   43,  280,   45,   41,   47,  461,
   44,  286,   44,   59,   42,   43,   40,   45,  442,   47,
  324,  322,  656,  327,  658,   59,  386,  661,  662,  663,
  368,   59,  458,  459,  460,  336,  462,  463,  418,   44,
  321,  264,  422,  344,   41,   44,   44,  321,  428,  353,
  280,  355,  356,   40,  434,  481,  482,  329,   44,  360,
  486,  487,  503,  367,  444,   44,  266,  371,   41,   42,
   43,   40,   45,  300,   47,  502,   40,  264,  458,  459,
  460,  461,  462,  463,   41,   42,   43,  461,   45,  423,
   47,   41,  472,   58,   41,   42,   43,   41,   45,   41,
   47,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   41,  491,  264,  414,  441,  455,  496,  497,  395,  499,
  500,  501,  310,  493,  428,  505,  310,  280,   41,   40,
  434,   41,   43,  286,   45,   40,   40,  353,  280,   40,
  444,   40,   40,   40,  286,   40,   40,   58,   40,    0,
   40,   40,   63,   40,  458,  459,  460,  461,  462,  463,
   40,   40,   40,   40,  296,  841,  262,  843,  472,  845,
  846,  328,  848,  849,  850,   44,  436,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  309,  491,   41,  344,
  319,  389,  496,  497,  389,  499,  500,  501,  260,  389,
  329,  505,  274,  332,    0,  267,  332,  392,   59,  423,
  319,  391,  341,   40,  276,  344,   43,  271,   45,  447,
  329,  353,  288,  332,  387,  387,  387,  408,  290,  387,
   41,   58,  341,  387,  296,  297,   63,  387,  379,   41,
    0,  280,  304,  278,  278,   41,  280,  286,   44,   40,
  418,  285,  280,   41,  288,   41,   41,    0,  286,  388,
  437,  386,  324,   59,   41,  327,  436,  301,  397,  309,
  397,  443,  443,  319,  338,  302,  322,  302,  339,  388,
  339,   41,   41,  329,   44,   41,  332,  386,  397,   41,
  336,  353,  372,  355,  356,  341,  353,  372,  344,   59,
   41,   41,   41,   45,   41,  367,   41,  280,   41,  371,
   41,   41,  441,  286,  360,   41,   59,   41,   41,   41,
   41,   41,   41,  280,  453,  280,  458,  459,  460,  286,
  462,  463,  441,  280,   44,   40,   40,  341,  384,  286,
  341,  387,  388,   59,   59,  379,   59,   59,   59,  481,
  482,  397,   59,  309,  486,  487,  267,   41,   42,   43,
   59,   45,   41,   47,  353,  276,  428,  401,  414,  345,
  321,   41,  434,  369,  408,   40,  452,  384,  341,  290,
  461,   59,  444,   44,  384,  296,  297,   41,   41,  384,
  436,  411,   44,   44,  436,  441,  458,  459,  460,  461,
  462,  463,  305,   41,  315,  443,  302,  453,  442,  455,
  472,  344,   40,  324,   59,  464,  327,  305,  294,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  279,  491,
   44,   44,   41,  260,  496,  497,  263,  499,  500,  501,
  267,  308,    0,  505,  355,  356,  384,  338,   40,  276,
  301,   43,  384,   45,   40,    0,  367,  264,  278,  264,
  371,  390,  321,  290,  264,  459,   58,  412,  379,  296,
  297,   63,  452,   40,  310,  459,  295,  271,  471,  330,
  260,  264,  278,  437,  280,  459,  344,  306,  436,  285,
  344,  461,  288,  271,  313,  344,   41,  324,  349,   44,
  327,    0,  344,  309,   41,  301,  357,  358,   40,   59,
  309,  422,   40,  364,   59,  258,  309,  428,  278,  338,
  280,   41,  302,  434,   41,   59,  305,   41,  355,  356,
   59,  382,    0,  444,  314,    0,  279,    0, 1110,   12,
  367,  247,  240,  394,  371,  396,  239,  458,  459,  460,
  461,  462,  463,  644,  296, 1046,  604,  821,  301,  339,
   59,  472,   81, 1044,  307, 1041, 1388, 1033,  419,  551,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  329,
  491,  299,  971,  379,  403,  496,  497,  330,  499,  500,
  501,  294, 1366,  444,  505,  285,  280, 1034, 1023,  426,
  717,  428,  286,  311, 1579,  401,  349,  434,  754,  311,
 1368,  353,  408, 1648,  357,  358,  435,  444,  530,  379,
  439,  364, 1652, 1651, 1689, 1741,  744, 1195,  408, 1598,
 1686,  458,  459,  460,  461,  462,  463,  364,  418,  382,
  957,  401, 1173, 1347, 1655,  472,  442, 1402,  408,  316,
  532,  297,  800,    0,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  443,  491,  304, 1229,  590,  260,  496,
  497,  263,  499,  500,  501,  267,  419,  792,  505,    0,
   13,  461,  442,   40,  276,  272,   43,  430,   45,   41,
   42,   43,  464,   45,  468,   47,  706,  960,  290,  722,
  692,   58,  444,  693,  296,  297,   63,  119,  934, 1759,
 1570, 1467,   59,  258, 1706, 1664,  458,  459,  460,  480,
  462,  463,  363,   41,   42,   43,  651,   45,  877,   47,
 1078, 1146,  324,   -1,  279,  327,   -1,   -1,   59,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,   -1,
   -1,   -1,   -1,   -1,  496,  497,  301,   -1,   -1,  258,
   -1,   -1,  307,  355,  356,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
  279,  355,   -1,   58,   -1,  330,   -1,   -1,   63,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,   41,
   42,   43,  301,   45,  349,   47,   -1,   -1,  307,   -1,
   -1,   -1,   -1,  358,   41,   42,   43,   -1,   45,  364,
   47,   41,   42,   43,   -1,   45,   -1,   47,   -1,   -1,
   -1,  330,   -1,   -1,  426,   -1,  428,  382,   -1,   41,
   42,   43,  434,   45,   -1,   47,   -1,   -1,   -1,   -1,
  349,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,  364,  458,  459,  460,  461,
  462,  463,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,  382,   -1,  459,   -1,  461,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  472,  491,
   -1,   -1,   -1,  260,  496,  497,  263,  499,  500,  501,
  267,  258,   -1,  505,   -1,   -1,   -1,  491,   40,  276,
  419,   43,   -1,   45,   -1,  499,  500,  501,  280,   -1,
   -1,   -1,  279,  290,  286,   -1,   58,  258,   -1,  296,
  297,   63,  473,  474,  475,  476,  477,  478,  479,  480,
   -1,   -1,   -1,   -1,  301,   -1,   -1,   -1,  279,   -1,
  307,   -1,  280,   -1,   -1,   -1,   -1,  324,  286,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  301,   -1,   -1,  330,   -1,  260,  307,   -1,  263,   -1,
   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,  355,  356,
   40,  276,  349,   43,   -1,   45,   -1,   -1,   -1,  330,
  367,  358,   -1,   -1,  371,  290,   -1,  364,   58,   -1,
   -1,  296,  297,   63,   -1,   -1,   -1,   -1,  349,   -1,
  280,   -1,   -1,   -1,   -1,  382,  286,  358,  280,   -1,
   -1,   -1,   -1,  364,  286,   -1,   -1,   -1,   -1,  324,
   -1,   -1,  327,  280,   -1,   -1,   -1,   -1,   -1,  286,
  280,  382,   -1,   -1,   -1,   -1,  286,   -1,   -1,  426,
   -1,  428,  419,   -1,   -1,   -1,   -1,  434,  280,   -1,
  355,  356,   -1,   -1,  286,   -1,   -1,  444,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,  419,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,  496,
  497,  263,  499,  500,  501,  267,   -1,   -1,  505,   -1,
  306,  426,   -1,  428,  276,   -1,   -1,  313,   -1,  434,
   -1,  317,  318,   -1,   -1,   -1,   -1,   -1,  290,  444,
  326,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,  324,   -1,   -1,  327,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
  260,  496,  497,  263,  499,  500,  501,  267,   -1,   -1,
  505,   -1,   -1,  355,  356,   40,  276,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,  367,   -1,  403,   -1,  371,
  290,   -1,   -1,   58,   -1,   -1,  296,  297,   63,   -1,
   -1,   -1,  295,   -1,  420,   -1,   -1,   -1,   -1,   -1,
   41,   42,   43,  306,   45,   -1,   47,   -1,   -1,  435,
  313,   -1,   -1,  439,  324,   -1,   -1,  327,   -1,   60,
   61,   62,   -1,  326,  450,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  426,   -1,  428,   -1,   -1,   -1,
   -1,   -1,  434,  469,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,  387,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  403,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,   -1,   -1,  505,   -1,   -1,  426,  420,  428,   -1,
   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,  444,   -1,  439,   -1,   -1,  442,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  450,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,  469,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,  260,  496,  497,  263,  499,
  500,  501,  267,   -1,   -1,  505,   -1,   -1,   -1,   -1,
   40,  276,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  290,   -1,   -1,   58,   -1,
   -1,  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  273,  272,   -1,   -1,  277,   -1,   -1,   -1,   -1,  280,
   -1,   -1,  285,   -1,   -1,  286,   -1,   -1,  289,  324,
   -1,   -1,  327,  296,   -1,   41,  299,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   58,   -1,  325,   -1,   -1,   63,   -1,   -1,
   -1,   -1,  367,  334,   -1,   -1,  371,  340,   -1,   -1,
   -1,  342,   -1,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  361,   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,  271,   -1,  377,   -1,  379,  380,
  381,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  426,   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,  407,  302,   -1,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,   -1,  313,  314,   -1,  316,
   -1,  424,  319,  458,  459,  460,  461,  462,  463,  430,
   -1,   -1,   -1,   -1,   -1,   -1,  333,  472,   -1,   -1,
   -1,   -1,  339,  446,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  461,   -1,
  260,  496,  497,  263,  499,  500,  501,  267,   -1,   -1,
  505,   -1,   -1,   -1,   -1,   -1,  276,   -1,  481,  482,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
  290,   -1,   -1,   -1,   -1,  498,  296,  297,   -1,   -1,
   -1,   58,  399,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  418,   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
  276,   -1,   -1,   -1,   -1,   -1,  443,   40,   -1,   42,
   43,   -1,   45,   -1,  290,  355,  356,  454,   -1,   -1,
  296,  297,   -1,   -1,  461,   58,   -1,  367,   -1,   -1,
   63,  371,   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  324,   -1,
  336,  327,   -1,  490,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,  426,   -1,  428,   -1,
   -1,  367,   -1,   -1,  434,  371,   -1,   -1,  384,   -1,
   -1,  387,  388,   -1,  444,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,  414,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  436,  491,  428,   -1,   -1,  441,  496,  497,  434,  499,
  500,  501,   -1,   -1,   -1,  505,   -1,  453,  444,  455,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   -1,  472,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,  324,   -1,  505,
  327,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  276,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  353,  290,  355,  356,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1, 1264, 1265,
   -1,   -1,   -1,   -1, 1270, 1271,   -1, 1273, 1274,   -1,
   -1,  324,   -1,   -1,  327, 1281, 1282, 1283, 1284,   -1,
 1286, 1287, 1288, 1289, 1290, 1291,   40,   -1,   -1,   43,
   -1,   45,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,  418,  355,  356,   58,   -1,   -1,   -1,   -1,   63,
   -1,  428,   -1,   -1,  367,   -1,   -1,  434,  371,   -1,
   -1,   -1,   -1,  302,   -1,   -1,   -1,  444,   -1,   -1,
  309,   -1,   -1,   -1,  313,  314,   -1,  316,   -1,   -1,
  319,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,  472,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,  428,   -1,   -1,   -1,  496,
  497,  434,  499,  500,  501,   -1,   -1,   -1,  505,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,  418,
   -1,   -1,  260,  496,  497,   -1,  499,  500,  501,  267,
   -1,   -1,  505,   -1,  433,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,  443,   40,   -1,   -1,   43,   -1,
   45,   -1,  290,  452,   -1,  454,   -1,   -1,  296,  297,
   -1,   -1,  461,   58,   -1,   -1,  304,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,
   -1,  490,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,  290,  355,  356,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   58,   -1,  367,
   -1,   -1,   63,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,  261,   -1,
  324,   -1,   -1,  327,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,  483,  484,  485,   -1,
  283,  488,  489,  490,  491,   -1,  493,   -1,  291,  496,
  497,  355,  356,   -1,   -1,  298,   -1,  300,   -1,  302,
  428,   -1,   -1,  367,  307,   -1,  434,  371,   -1,   -1,
   -1,  314,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,  428,   -1,   -1,   -1,  496,  497,
  434,  499,  500,  501,   -1,   -1,   -1,  505,   -1,   -1,
  444,   -1,  267,   -1,   -1,   -1,   -1,   -1,  452,   -1,
   -1,  276,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,  406,   -1,  290,   -1,   -1,  472,   -1,
  413,  296,  297,  416,   -1,  418,  419,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,  324,
  443,  505,  327,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   40,   41,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
  355,  356,   -1,   -1,   58,  296,  297,   -1,   -1,   63,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,  492,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,  353,  418,  355,  356,   -1,   41,   -1,   40,
   44,   -1,   43,  428,   45,   -1,  367,   -1,   -1,  434,
  371,   -1,   -1,   -1,   -1,   59,   -1,   58,   -1,  444,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,  428,   -1,   -1,
   -1,  496,  497,  434,  499,  500,  501,   -1,   -1,   -1,
  505,   -1,   -1,  444,   -1,   -1,  273,   -1,   -1,   -1,
  277,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,  292,   -1,   -1,   -1,  296,
   -1,  472,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,  267,  505,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,  340,   -1,   -1,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,  290,  354,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,  374,   -1,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,  272,   -1,
  324,   -1,   63,  327,   -1,   -1,  280,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,  262,   -1,
  407,   -1,   -1,   -1,   -1,  412,  267,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,  276,   -1,  424,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,  290,
   -1,  325,   -1,   -1,   -1,  296,  297,   -1,   -1,  446,
  334,   40,   -1,   -1,   43,   -1,   45,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   58,
   -1,   -1,   -1,  324,   63,  329,  327,  361,  332,  363,
   -1,   -1,  336,   -1,  481,  482,   -1,  341,   -1,   -1,
  344,   -1,   -1,  377,  428,  379,  380,  381,   -1,   -1,
  434,  498,   -1,   -1,  355,  356,  360,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,  397,   -1,   -1,  430,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
  414,   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,
   -1,  505,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,
   -1,   -1,  436,  434,   -1,   -1,   -1,  441,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,  267,   -1,   -1,  453,
   -1,  455,   -1,   -1,  455,  276,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,  472,    0,   -1,   -1,  296,  297,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  273,   -1,  324,  505,  277,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
  292,   -1,   -1,   -1,  296,   -1,   -1,  299,  267,   -1,
   -1,   59,   -1,   -1,  355,  356,   40,  276,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,  290,   -1,   -1,   58,   59,   -1,  296,  297,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,
   -1,   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,   -1,   -1,  324,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,  407,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,  446,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,  505,   -1,   -1,   -1,   -1,  428,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,  481,
  482,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,  498,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  267,   40,   -1,  505,   43,   -1,   45,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   58,   -1,   -1,   -1,  290,   63,   -1,   -1,
   -1,  319,  296,  297,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,
  302,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
  324,  313,  314,  327,  316,   -1,   -1,  319,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  355,  356,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   40,   -1,  367,   43,   -1,   45,  371,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,  461,   -1,   63,   -1,  414,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,  399,  436,  488,
  489,  490,  491,  441,  493,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,   -1,  428,  453,  418,  455,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,  433,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,  443,   -1,   -1,  458,  459,  460,  461,  462,  463,
  452,   58,  454,   -1,   -1,   -1,   63,   -1,  472,  461,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,  267,  496,  497,   -1,  499,  500,  501,  490,   -1,
  276,  505,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,  327,  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,  367,   -1,   -1,   -1,  371,  340,  276,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,
   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,  444,   -1,
  267,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,  276,
  424,   -1,  458,  459,  460,  461,  462,  463,  367,   -1,
   -1,   -1,  371,  290,   -1,   -1,  472,   -1,   -1,  296,
  297,    0,  446,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,  461,   -1,   -1,
  496,  497,   -1,  499,  500,  501,   -1,  324,   -1,  505,
  327,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,  428,
   -1,   -1,   -1,   -1,  498,  434,   -1,   -1,  355,  356,
   59,   60,   61,   62,   -1,  444,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  472,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,   -1,   -1,   -1,  505,   -1,   -1,   -1,
   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,  505,   -1,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
   -1,   -1,  488,  489,  490,  491,   -1,  493,   -1,   -1,
  496,  497,   -1,  262,   93,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  308,
  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,  360,  361,   -1,  363,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  397,   -1,
  277,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  430,   -1,  262,   -1,  264,   -1,  436,   -1,   -1,
   -1,   -1,  441,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  452,  453,   -1,  455,  286,   -1,   -1,
  289,   -1,  461,  340,   -1,   -1,   -1,   -1,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,    0,  308,
  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,   -1,  325,  374,   -1,  376,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
  407,  360,  361,   -1,  363,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,  424,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,  446,
  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,  430,   -1,   -1,  481,  482,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,   -1,    0,  308,  309,   -1,   -1,
  312,  498,   -1,  452,  453,   -1,  455,  319,   -1,  321,
  322,   -1,  461,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,  273,   -1,  397,   -1,  277,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,   -1,
  262,   -1,  264,   -1,  436,   -1,   -1,   -1,   -1,  441,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,  453,   -1,  455,   -1,   -1,   -1,  289,   -1,  461,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,    0,  308,  309,   -1,   -1,
  312,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,
  322,   -1,   -1,  325,  374,   -1,  376,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   -1,   -1,   41,   -1,   43,   44,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  407,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  424,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,  446,  262,   93,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,  430,   -1,
   -1,  481,  482,   -1,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,    0,  308,  309,   -1,   -1,  312,  498,   -1,
  452,  453,   -1,  455,  319,   -1,  321,  322,   -1,  461,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  430,   -1,  262,   -1,  264,
   -1,  436,   -1,   -1,   -1,   -1,  441,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,
  455,   -1,   -1,   -1,  289,   -1,  461,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,  308,  309,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   -1,   -1,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,  262,   93,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  289,   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,    0,
  308,  309,   -1,   -1,  312,   -1,   -1,  452,  453,   -1,
  455,  319,   -1,  321,  322,   -1,  461,  325,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,
   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   93,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  430,   -1,  262,   -1,  264,   -1,  436,   -1,
   -1,   -1,   -1,  441,  272,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  452,  453,   -1,  455,   -1,   -1,
   -1,  289,   -1,  461,   59,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  308,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,   41,
   -1,   -1,   44,  341,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  377,
   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   -1,  262,   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,   -1,  411,   -1,   -1,  414,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  289,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   59,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,  308,  309,   -1,
   -1,  312,   -1,   -1,  452,  453,   -1,  455,  319,   -1,
  321,  322,    0,  461,  325,   -1,   -1,   -1,  329,   -1,
   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,
  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,  262,   -1,  360,
  361,   -1,  363,   41,   -1,   -1,   44,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,
  381,   59,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
  411,   44,   -1,  414,  319,   59,   -1,  322,   -1,   -1,
  262,   -1,   -1,   -1,  329,   -1,   59,  332,   -1,  430,
   -1,  336,   -1,   -1,   -1,  436,  341,   -1,   -1,  344,
  441,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  452,  453,   -1,  455,  360,   -1,   -1,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  384,
  322,   -1,  387,  388,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  397,   -1,  336,   -1,   -1,   -1,   -1,  341,
  262,   -1,  344,   -1,   -1,   -1,   -1,   41,   -1,  414,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,  397,    0,  319,   -1,   -1,
  322,   -1,    0,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  414,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   41,  360,  441,
   44,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   59,   -1,   -1,  262,   -1,
   -1,   59,  384,   -1,   -1,  387,  388,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,    0,
   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,  414,   -1,  332,   -1,   -1,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,  319,   -1,   -1,  322,  441,
   41,   -1,  360,   44,   -1,  329,  319,   -1,  332,  322,
   -1,  453,  336,  455,   -1,   -1,  329,  341,   59,  332,
  344,   -1,   -1,  336,   -1,   -1,  384,   -1,  341,  387,
  388,  344,   -1,   -1,   -1,   -1,  360,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  360,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,    0,   -1,   -1,   -1,   -1,
   -1,  384,   -1,  397,  387,  388,   -1,   -1,  436,   -1,
   -1,   -1,   -1,  441,  397,   -1,   41,   -1,   -1,   44,
  414,   -1,   -1,   -1,   -1,  453,   -1,  455,   -1,   -1,
   -1,  414,   -1,   -1,   59,  319,   41,   -1,  322,   44,
   -1,   -1,  436,   -1,   -1,  329,   -1,  441,  332,   -1,
   -1,   -1,  336,  436,   59,   -1,   -1,  341,  441,  453,
  344,  455,   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,
  453,   -1,  455,   -1,  262,   -1,  360,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,    0,   -1,  319,   -1,   -1,  322,   -1,
  414,  319,   -1,   -1,  322,  329,   -1,   59,  332,   -1,
   -1,  329,  336,   -1,  332,   -1,   -1,  341,  336,   -1,
  344,  262,  436,  341,   -1,   -1,  344,  441,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,  360,   44,   -1,  453,
   -1,  455,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,  397,   -1,   -1,   -1,   -1,  319,  397,
    0,  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  414,  332,   -1,   -1,   -1,  336,  414,   -1,   -1,   -1,
  341,    0,   -1,  344,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,  436,  360,
   -1,   41,   -1,  441,   44,   -1,   -1,  262,   -1,  453,
   -1,  455,   -1,   -1,   -1,  453,   -1,  455,   -1,   59,
   -1,   -1,   41,  384,   -1,   44,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,
   59,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  414,  329,   -1,   -1,  332,   -1,   -1,
   -1,  336,   -1,   -1,  319,   -1,  341,  322,   -1,  344,
   -1,   -1,   -1,   -1,  329,  436,   -1,  332,   -1,   -1,
  441,  336,   -1,   -1,   -1,  360,  341,    0,   -1,  344,
  262,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,   41,  384,
   -1,   44,  387,  388,   -1,  262,   -1,   -1,   -1,  414,
   -1,   -1,  397,   -1,   -1,   -1,   59,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  414,
  332,  436,   -1,   -1,  336,   -1,  441,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  453,   -1,
  455,  436,   -1,   -1,   -1,   -1,  441,   -1,  360,   -1,
   -1,   -1,  319,   -1,   -1,  322,   -1,   -1,  453,   -1,
  455,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,
   -1,   -1,  384,   -1,  341,  387,  388,  344,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  414,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,
   -1,  453,  322,  455,   -1,   -1,   -1,  414,   -1,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,
  319,  341,   -1,  322,  344,   -1,   -1,   -1,   -1,  436,
  329,   -1,   -1,  332,  441,   -1,   -1,  336,   -1,   -1,
  360,   -1,  341,   -1,   -1,  344,  453,   -1,  455,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,  384,   -1,   -1,  387,  388,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,  397,  273,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,  436,   -1,  292,   -1,
   -1,  441,  296,   -1,   -1,  299,  319,   -1,   -1,  322,
   -1,   -1,   -1,  453,   -1,  455,  329,  436,   -1,  332,
   -1,   -1,  441,  336,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,   -1,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  360,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,
  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  498,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 505
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING","NULLS","LAST","ROWS_AFFECTED",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : excp_statement",
"proc_statement : raise_statement",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"excp_statement : EXCEPTION symbol_exception_name ';'",
"excp_statement : EXCEPTION symbol_exception_name value ';'",
"raise_statement : EXCEPTION ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction nulls_placement",
"order_item : ordinal collate_clause order_direction nulls_placement",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : NULLS FIRST",
"nulls_placement : NULLS LAST",
"nulls_placement :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : proc_internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"proc_internal_info : GDSCODE",
"proc_internal_info : SQLCODE",
"proc_internal_info : ROWS_AFFECTED",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 3778 "../src/dsql/parse.y"


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = FB_NEW_RPT(*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = FB_NEW_RPT(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = FB_NEW(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = FB_NEW_RPT(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#line 5122 "../src/dsql/dsql.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 445 "../src/dsql/parse.y"
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
#line 447 "../src/dsql/parse.y"
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
#line 468 "../src/dsql/parse.y"
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
#line 477 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
#line 481 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
#line 485 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
#line 489 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
#line 492 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
#line 498 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 28:
#line 502 "../src/dsql/parse.y"
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
#line 504 "../src/dsql/parse.y"
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
#line 506 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
#line 511 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
#line 515 "../src/dsql/parse.y"
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
#line 519 "../src/dsql/parse.y"
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
#line 521 "../src/dsql/parse.y"
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
#line 523 "../src/dsql/parse.y"
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
#line 525 "../src/dsql/parse.y"
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
#line 527 "../src/dsql/parse.y"
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
#line 531 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
#line 533 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 41:
#line 537 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
#line 539 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 43:
#line 543 "../src/dsql/parse.y"
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
#line 551 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
#line 556 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
#line 561 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
#line 566 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
#line 571 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
#line 576 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
#line 580 "../src/dsql/parse.y"
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
#line 586 "../src/dsql/parse.y"
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
#line 591 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
#line 593 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
#line 595 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
#line 599 "../src/dsql/parse.y"
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
#line 601 "../src/dsql/parse.y"
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
#line 603 "../src/dsql/parse.y"
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
#line 605 "../src/dsql/parse.y"
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
#line 610 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
#line 617 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
#line 619 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
#line 621 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
#line 626 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
#line 630 "../src/dsql/parse.y"
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
#line 635 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
#line 639 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
#line 641 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
#line 648 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 73:
#line 652 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 74:
#line 654 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 75:
#line 660 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
#line 666 "../src/dsql/parse.y"
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
#line 668 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
#line 674 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 81:
#line 677 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 83:
#line 682 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
#line 688 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
#line 691 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
#line 698 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 88:
#line 701 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
#line 704 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
#line 708 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
#line 712 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
#line 715 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
#line 721 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
#line 729 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 95:
#line 733 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
#line 736 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
#line 739 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 98:
#line 741 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 99:
#line 743 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 100:
#line 745 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 101:
#line 747 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 102:
#line 749 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 103:
#line 751 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 104:
#line 753 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 105:
#line 755 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 106:
#line 760 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 107:
#line 764 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 108:
#line 766 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 109:
#line 768 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 110:
#line 778 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 111:
#line 782 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 112:
#line 784 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 113:
#line 795 "../src/dsql/parse.y"
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 114:
#line 797 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 115:
#line 801 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 117:
#line 804 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 118:
#line 811 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 119:
#line 816 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 120:
#line 818 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 121:
#line 820 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
#line 824 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
#line 826 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 124:
#line 830 "../src/dsql/parse.y"
{ yyval = (NOD) 0;}
break;
case 125:
#line 832 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 126:
#line 836 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 129:
#line 842 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 130:
#line 856 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 131:
#line 867 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 132:
#line 869 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 133:
#line 873 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 134:
#line 875 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 135:
#line 879 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 138:
#line 885 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 139:
#line 888 "../src/dsql/parse.y"
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 142:
#line 897 "../src/dsql/parse.y"
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 143:
#line 901 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 144:
#line 910 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 145:
#line 918 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 146:
#line 926 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 149:
#line 935 "../src/dsql/parse.y"
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 150:
#line 941 "../src/dsql/parse.y"
{yyval = (NOD) NULL;}
break;
case 153:
#line 947 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 154:
#line 951 "../src/dsql/parse.y"
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 155:
#line 953 "../src/dsql/parse.y"
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 156:
#line 955 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 157:
#line 957 "../src/dsql/parse.y"
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 158:
#line 959 "../src/dsql/parse.y"
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 159:
#line 963 "../src/dsql/parse.y"
{yyval = (NOD) NULL;}
break;
case 162:
#line 969 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 166:
#line 977 "../src/dsql/parse.y"
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 167:
#line 981 "../src/dsql/parse.y"
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 168:
#line 983 "../src/dsql/parse.y"
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 169:
#line 985 "../src/dsql/parse.y"
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 170:
#line 987 "../src/dsql/parse.y"
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 171:
#line 991 "../src/dsql/parse.y"
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 172:
#line 996 "../src/dsql/parse.y"
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
#line 1003 "../src/dsql/parse.y"
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 174:
#line 1009 "../src/dsql/parse.y"
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 175:
#line 1016 "../src/dsql/parse.y"
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 176:
#line 1023 "../src/dsql/parse.y"
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 178:
#line 1057 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 179:
#line 1060 "../src/dsql/parse.y"
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 180:
#line 1066 "../src/dsql/parse.y"
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 183:
#line 1074 "../src/dsql/parse.y"
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 184:
#line 1082 "../src/dsql/parse.y"
{ g_file  = make_file ();}
break;
case 189:
#line 1094 "../src/dsql/parse.y"
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 190:
#line 1096 "../src/dsql/parse.y"
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 197:
#line 1113 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 198:
#line 1118 "../src/dsql/parse.y"
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
#line 1123 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 200:
#line 1125 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 201:
#line 1127 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 203:
#line 1132 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 206:
#line 1145 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 207:
#line 1148 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 208:
#line 1152 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
#line 1161 "../src/dsql/parse.y"
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 212:
#line 1171 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 213:
#line 1173 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 214:
#line 1178 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 215:
#line 1180 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 216:
#line 1185 "../src/dsql/parse.y"
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 217:
#line 1191 "../src/dsql/parse.y"
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 218:
#line 1197 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 219:
#line 1200 "../src/dsql/parse.y"
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 220:
#line 1205 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 221:
#line 1207 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 225:
#line 1218 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 226:
#line 1220 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 227:
#line 1222 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 228:
#line 1226 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 231:
#line 1232 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 232:
#line 1236 "../src/dsql/parse.y"
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 233:
#line 1240 "../src/dsql/parse.y"
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 234:
#line 1243 "../src/dsql/parse.y"
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 236:
#line 1248 "../src/dsql/parse.y"
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 237:
#line 1250 "../src/dsql/parse.y"
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 238:
#line 1258 "../src/dsql/parse.y"
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 239:
#line 1262 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 240:
#line 1263 "../src/dsql/parse.y"
{ yyval = NULL ;}
break;
case 245:
#line 1273 "../src/dsql/parse.y"
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 246:
#line 1277 "../src/dsql/parse.y"
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 247:
#line 1283 "../src/dsql/parse.y"
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 248:
#line 1288 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 249:
#line 1295 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 250:
#line 1300 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 251:
#line 1307 "../src/dsql/parse.y"
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 252:
#line 1309 "../src/dsql/parse.y"
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 253:
#line 1311 "../src/dsql/parse.y"
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 254:
#line 1313 "../src/dsql/parse.y"
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 255:
#line 1315 "../src/dsql/parse.y"
{ yyval = NULL;}
break;
case 256:
#line 1319 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 257:
#line 1322 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 258:
#line 1326 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 259:
#line 1329 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 260:
#line 1332 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 261:
#line 1335 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 262:
#line 1349 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 263:
#line 1361 "../src/dsql/parse.y"
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
#line 1372 "../src/dsql/parse.y"
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
#line 1383 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
#line 1389 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 267:
#line 1391 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 268:
#line 1395 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 269:
#line 1397 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 271:
#line 1402 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 272:
#line 1406 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 273:
#line 1412 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 274:
#line 1414 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 276:
#line 1419 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 277:
#line 1423 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 278:
#line 1428 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 279:
#line 1430 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 280:
#line 1434 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 281:
#line 1436 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 284:
#line 1444 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 285:
#line 1448 "../src/dsql/parse.y"
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 286:
#line 1450 "../src/dsql/parse.y"
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 287:
#line 1452 "../src/dsql/parse.y"
{ yyval = make_node (nod_block, e_blk_count, NULL, NULL);}
break;
case 289:
#line 1457 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 299:
#line 1470 "../src/dsql/parse.y"
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 303:
#line 1475 "../src/dsql/parse.y"
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 304:
#line 1477 "../src/dsql/parse.y"
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 305:
#line 1479 "../src/dsql/parse.y"
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 306:
#line 1483 "../src/dsql/parse.y"
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-1], NULL); }
break;
case 307:
#line 1485 "../src/dsql/parse.y"
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-2], yyvsp[-1]); }
break;
case 308:
#line 1489 "../src/dsql/parse.y"
{ yyval = make_node (nod_exception_stmt, e_xcp_count, NULL, NULL); }
break;
case 309:
#line 1493 "../src/dsql/parse.y"
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 310:
#line 1498 "../src/dsql/parse.y"
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 311:
#line 1502 "../src/dsql/parse.y"
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 312:
#line 1507 "../src/dsql/parse.y"
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 313:
#line 1509 "../src/dsql/parse.y"
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 314:
#line 1513 "../src/dsql/parse.y"
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 315:
#line 1518 "../src/dsql/parse.y"
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 316:
#line 1523 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 317:
#line 1525 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 318:
#line 1527 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 319:
#line 1531 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 320:
#line 1533 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 321:
#line 1535 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 324:
#line 1541 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 325:
#line 1543 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 326:
#line 1547 "../src/dsql/parse.y"
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 327:
#line 1552 "../src/dsql/parse.y"
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 328:
#line 1554 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 330:
#line 1558 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 331:
#line 1562 "../src/dsql/parse.y"
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 333:
#line 1568 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 334:
#line 1572 "../src/dsql/parse.y"
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 335:
#line 1574 "../src/dsql/parse.y"
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 336:
#line 1576 "../src/dsql/parse.y"
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 337:
#line 1578 "../src/dsql/parse.y"
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 338:
#line 1585 "../src/dsql/parse.y"
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 339:
#line 1590 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 340:
#line 1592 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 341:
#line 1594 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 345:
#line 1601 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 346:
#line 1603 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 347:
#line 1605 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 348:
#line 1613 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 349:
#line 1620 "../src/dsql/parse.y"
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 350:
#line 1627 "../src/dsql/parse.y"
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 351:
#line 1633 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 352:
#line 1638 "../src/dsql/parse.y"
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 353:
#line 1642 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 354:
#line 1644 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 355:
#line 1646 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 356:
#line 1657 "../src/dsql/parse.y"
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 357:
#line 1662 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 359:
#line 1667 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 362:
#line 1675 "../src/dsql/parse.y"
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 363:
#line 1678 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 364:
#line 1684 "../src/dsql/parse.y"
{ beginning = lex_position(); }
break;
case 365:
#line 1688 "../src/dsql/parse.y"
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 366:
#line 1694 "../src/dsql/parse.y"
{ beginning = last_token; }
break;
case 367:
#line 1698 "../src/dsql/parse.y"
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 368:
#line 1704 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 369:
#line 1708 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 370:
#line 1722 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 371:
#line 1733 "../src/dsql/parse.y"
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 372:
#line 1738 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 373:
#line 1740 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 374:
#line 1742 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 375:
#line 1746 "../src/dsql/parse.y"
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 376:
#line 1750 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 377:
#line 1752 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 378:
#line 1756 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 379:
#line 1758 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 380:
#line 1760 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 381:
#line 1762 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 382:
#line 1764 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 383:
#line 1766 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 384:
#line 1768 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 385:
#line 1770 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 386:
#line 1772 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 387:
#line 1774 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 388:
#line 1776 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 389:
#line 1778 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 390:
#line 1780 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 391:
#line 1782 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 392:
#line 1784 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 393:
#line 1788 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 394:
#line 1790 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 395:
#line 1794 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 396:
#line 1800 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 397:
#line 1804 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 398:
#line 1807 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 399:
#line 1814 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 400:
#line 1816 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 401:
#line 1818 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 402:
#line 1821 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 403:
#line 1824 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 404:
#line 1829 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 405:
#line 1832 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 407:
#line 1839 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 408:
#line 1843 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 409:
#line 1852 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 410:
#line 1856 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 411:
#line 1858 "../src/dsql/parse.y"
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 412:
#line 1860 "../src/dsql/parse.y"
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 413:
#line 1862 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 414:
#line 1864 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 416:
#line 1869 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 417:
#line 1873 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 418:
#line 1875 "../src/dsql/parse.y"
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 419:
#line 1877 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 420:
#line 1879 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 421:
#line 1885 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 422:
#line 1888 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 423:
#line 1890 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 424:
#line 1894 "../src/dsql/parse.y"
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 449:
#line 1925 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 450:
#line 1927 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 451:
#line 1931 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 452:
#line 1933 "../src/dsql/parse.y"
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 453:
#line 1937 "../src/dsql/parse.y"
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 454:
#line 1942 "../src/dsql/parse.y"
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 455:
#line 1944 "../src/dsql/parse.y"
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 456:
#line 1946 "../src/dsql/parse.y"
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 457:
#line 1950 "../src/dsql/parse.y"
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 458:
#line 1952 "../src/dsql/parse.y"
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 459:
#line 1959 "../src/dsql/parse.y"
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 461:
#line 1966 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 462:
#line 1970 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 463:
#line 1978 "../src/dsql/parse.y"
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 464:
#line 1980 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 465:
#line 1982 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 467:
#line 1987 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 468:
#line 1999 "../src/dsql/parse.y"
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 470:
#line 2005 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 472:
#line 2010 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 473:
#line 2016 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 474:
#line 2020 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 475:
#line 2022 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 476:
#line 2024 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 477:
#line 2026 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 478:
#line 2028 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 479:
#line 2030 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 480:
#line 2032 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 481:
#line 2034 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 482:
#line 2036 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 483:
#line 2038 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 484:
#line 2040 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 485:
#line 2042 "../src/dsql/parse.y"
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 490:
#line 2058 "../src/dsql/parse.y"
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 491:
#line 2063 "../src/dsql/parse.y"
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 493:
#line 2071 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 494:
#line 2075 "../src/dsql/parse.y"
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 495:
#line 2084 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 501:
#line 2097 "../src/dsql/parse.y"
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 502:
#line 2114 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 503:
#line 2119 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 504:
#line 2124 "../src/dsql/parse.y"
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 505:
#line 2143 "../src/dsql/parse.y"
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 506:
#line 2160 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 509:
#line 2175 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 510:
#line 2179 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 511:
#line 2185 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 512:
#line 2191 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 513:
#line 2199 "../src/dsql/parse.y"
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 514:
#line 2203 "../src/dsql/parse.y"
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 515:
#line 2209 "../src/dsql/parse.y"
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 516:
#line 2213 "../src/dsql/parse.y"
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 517:
#line 2217 "../src/dsql/parse.y"
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 518:
#line 2223 "../src/dsql/parse.y"
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 520:
#line 2234 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 521:
#line 2240 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 522:
#line 2246 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 523:
#line 2254 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 524:
#line 2259 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 525:
#line 2264 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 534:
#line 2289 "../src/dsql/parse.y"
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 535:
#line 2293 "../src/dsql/parse.y"
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 536:
#line 2304 "../src/dsql/parse.y"
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 537:
#line 2311 "../src/dsql/parse.y"
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 538:
#line 2317 "../src/dsql/parse.y"
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 539:
#line 2371 "../src/dsql/parse.y"
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 542:
#line 2441 "../src/dsql/parse.y"
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 543:
#line 2454 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 544:
#line 2459 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 545:
#line 2464 "../src/dsql/parse.y"
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 546:
#line 2471 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 547:
#line 2473 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 551:
#line 2486 "../src/dsql/parse.y"
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 552:
#line 2491 "../src/dsql/parse.y"
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 553:
#line 2496 "../src/dsql/parse.y"
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 554:
#line 2507 "../src/dsql/parse.y"
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 555:
#line 2511 "../src/dsql/parse.y"
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 558:
#line 2519 "../src/dsql/parse.y"
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 559:
#line 2521 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 561:
#line 2526 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 562:
#line 2530 "../src/dsql/parse.y"
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 564:
#line 2535 "../src/dsql/parse.y"
{ yyval = (NOD) NULL; }
break;
case 566:
#line 2540 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 571:
#line 2550 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 572:
#line 2552 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 573:
#line 2556 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 574:
#line 2558 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 575:
#line 2562 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 577:
#line 2567 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 578:
#line 2569 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 579:
#line 2571 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 580:
#line 2575 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 581:
#line 2577 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 582:
#line 2579 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 583:
#line 2583 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 584:
#line 2585 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 585:
#line 2587 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 586:
#line 2591 "../src/dsql/parse.y"
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 587:
#line 2595 "../src/dsql/parse.y"
{ yyval = (NOD) NOD_SHARED; }
break;
case 588:
#line 2597 "../src/dsql/parse.y"
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 589:
#line 2599 "../src/dsql/parse.y"
{ yyval = (NOD) 0; }
break;
case 590:
#line 2603 "../src/dsql/parse.y"
{ yyval = (NOD) NOD_READ; }
break;
case 591:
#line 2605 "../src/dsql/parse.y"
{ yyval = (NOD) NOD_WRITE; }
break;
case 593:
#line 2610 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 594:
#line 2614 "../src/dsql/parse.y"
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 595:
#line 2618 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 596:
#line 2620 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 598:
#line 2625 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 599:
#line 2630 "../src/dsql/parse.y"
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 600:
#line 2637 "../src/dsql/parse.y"
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 601:
#line 2641 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 602:
#line 2643 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 603:
#line 2645 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 604:
#line 2649 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 605:
#line 2651 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 607:
#line 2656 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 608:
#line 2660 "../src/dsql/parse.y"
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 609:
#line 2662 "../src/dsql/parse.y"
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 610:
#line 2666 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 611:
#line 2668 "../src/dsql/parse.y"
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 612:
#line 2670 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 613:
#line 2674 "../src/dsql/parse.y"
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 614:
#line 2676 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 615:
#line 2678 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 616:
#line 2682 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 617:
#line 2684 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 618:
#line 2688 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 619:
#line 2690 "../src/dsql/parse.y"
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 620:
#line 2704 "../src/dsql/parse.y"
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 621:
#line 2710 "../src/dsql/parse.y"
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 622:
#line 2712 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 623:
#line 2716 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 624:
#line 2718 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 626:
#line 2723 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 628:
#line 2728 "../src/dsql/parse.y"
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 629:
#line 2730 "../src/dsql/parse.y"
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 630:
#line 2737 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 632:
#line 2745 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 635:
#line 2753 "../src/dsql/parse.y"
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 636:
#line 2755 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 637:
#line 2759 "../src/dsql/parse.y"
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 638:
#line 2762 "../src/dsql/parse.y"
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 639:
#line 2767 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 640:
#line 2769 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 642:
#line 2774 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 646:
#line 2783 "../src/dsql/parse.y"
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 647:
#line 2788 "../src/dsql/parse.y"
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 648:
#line 2793 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 649:
#line 2795 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 650:
#line 2797 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 651:
#line 2799 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 652:
#line 2801 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 653:
#line 2803 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 654:
#line 2805 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 655:
#line 2807 "../src/dsql/parse.y"
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 656:
#line 2813 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 657:
#line 2815 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 658:
#line 2817 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 659:
#line 2821 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 660:
#line 2823 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 661:
#line 2825 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 662:
#line 2829 "../src/dsql/parse.y"
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 663:
#line 2831 "../src/dsql/parse.y"
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 664:
#line 2833 "../src/dsql/parse.y"
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 665:
#line 2835 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 666:
#line 2839 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[0]); }
break;
case 667:
#line 2841 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 669:
#line 2846 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 674:
#line 2854 "../src/dsql/parse.y"
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 678:
#line 2863 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 679:
#line 2865 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 680:
#line 2869 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 681:
#line 2871 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 682:
#line 2875 "../src/dsql/parse.y"
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 683:
#line 2877 "../src/dsql/parse.y"
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 684:
#line 2879 "../src/dsql/parse.y"
{ yyval = 0;}
break;
case 685:
#line 2887 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 686:
#line 2889 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 687:
#line 2893 "../src/dsql/parse.y"
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 688:
#line 2897 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 689:
#line 2899 "../src/dsql/parse.y"
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 690:
#line 2901 "../src/dsql/parse.y"
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 691:
#line 2907 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 692:
#line 2909 "../src/dsql/parse.y"
{ yyval = 0; }
break;
case 694:
#line 2914 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 695:
#line 2918 "../src/dsql/parse.y"
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 698:
#line 2924 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 699:
#line 2928 "../src/dsql/parse.y"
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 700:
#line 2930 "../src/dsql/parse.y"
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 701:
#line 2932 "../src/dsql/parse.y"
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 703:
#line 2937 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 704:
#line 2945 "../src/dsql/parse.y"
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 705:
#line 2948 "../src/dsql/parse.y"
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 707:
#line 2953 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 710:
#line 2964 "../src/dsql/parse.y"
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 711:
#line 2968 "../src/dsql/parse.y"
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 712:
#line 2972 "../src/dsql/parse.y"
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 715:
#line 2983 "../src/dsql/parse.y"
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 716:
#line 2988 "../src/dsql/parse.y"
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 718:
#line 2994 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 719:
#line 2998 "../src/dsql/parse.y"
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 722:
#line 3009 "../src/dsql/parse.y"
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 723:
#line 3011 "../src/dsql/parse.y"
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 724:
#line 3015 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 725:
#line 3017 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 729:
#line 3026 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 730:
#line 3030 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 732:
#line 3035 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 735:
#line 3044 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 736:
#line 3048 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 738:
#line 3053 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 740:
#line 3059 "../src/dsql/parse.y"
{ yyval = NULL; }
break;
case 741:
#line 3063 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 743:
#line 3068 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 745:
#line 3074 "../src/dsql/parse.y"
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 746:
#line 3077 "../src/dsql/parse.y"
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 747:
#line 3082 "../src/dsql/parse.y"
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 749:
#line 3090 "../src/dsql/parse.y"
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 751:
#line 3098 "../src/dsql/parse.y"
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 752:
#line 3100 "../src/dsql/parse.y"
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 753:
#line 3102 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 764:
#line 3116 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 765:
#line 3123 "../src/dsql/parse.y"
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 766:
#line 3125 "../src/dsql/parse.y"
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
#line 3127 "../src/dsql/parse.y"
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 768:
#line 3129 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 769:
#line 3131 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
#line 3133 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 771:
#line 3135 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 772:
#line 3137 "../src/dsql/parse.y"
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 773:
#line 3144 "../src/dsql/parse.y"
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 774:
#line 3146 "../src/dsql/parse.y"
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 775:
#line 3148 "../src/dsql/parse.y"
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
#line 3150 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
#line 3152 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
#line 3154 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 779:
#line 3156 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 780:
#line 3158 "../src/dsql/parse.y"
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
#line 3160 "../src/dsql/parse.y"
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
#line 3162 "../src/dsql/parse.y"
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 783:
#line 3164 "../src/dsql/parse.y"
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 784:
#line 3166 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
#line 3168 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 786:
#line 3170 "../src/dsql/parse.y"
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 787:
#line 3172 "../src/dsql/parse.y"
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 788:
#line 3174 "../src/dsql/parse.y"
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 791:
#line 3185 "../src/dsql/parse.y"
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 792:
#line 3187 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 793:
#line 3192 "../src/dsql/parse.y"
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 794:
#line 3194 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 795:
#line 3196 "../src/dsql/parse.y"
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 796:
#line 3198 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 797:
#line 3203 "../src/dsql/parse.y"
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 798:
#line 3205 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 799:
#line 3209 "../src/dsql/parse.y"
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 800:
#line 3211 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 801:
#line 3215 "../src/dsql/parse.y"
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 802:
#line 3217 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 803:
#line 3219 "../src/dsql/parse.y"
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 804:
#line 3221 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 805:
#line 3225 "../src/dsql/parse.y"
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 806:
#line 3229 "../src/dsql/parse.y"
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 807:
#line 3233 "../src/dsql/parse.y"
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 808:
#line 3235 "../src/dsql/parse.y"
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 810:
#line 3243 "../src/dsql/parse.y"
{ yyval = make_list (yyvsp[-1]); }
break;
case 811:
#line 3247 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 812:
#line 3258 "../src/dsql/parse.y"
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 813:
#line 3270 "../src/dsql/parse.y"
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 823:
#line 3288 "../src/dsql/parse.y"
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 824:
#line 3290 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 825:
#line 3292 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 826:
#line 3299 "../src/dsql/parse.y"
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 827:
#line 3301 "../src/dsql/parse.y"
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 828:
#line 3303 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 829:
#line 3310 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 830:
#line 3317 "../src/dsql/parse.y"
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 831:
#line 3324 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 832:
#line 3326 "../src/dsql/parse.y"
{ yyval = yyvsp[-1]; }
break;
case 835:
#line 3334 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 836:
#line 3336 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 837:
#line 3338 "../src/dsql/parse.y"
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 838:
#line 3340 "../src/dsql/parse.y"
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 839:
#line 3342 "../src/dsql/parse.y"
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 840:
#line 3346 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 841:
#line 3351 "../src/dsql/parse.y"
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 842:
#line 3367 "../src/dsql/parse.y"
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 843:
#line 3383 "../src/dsql/parse.y"
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 844:
#line 3387 "../src/dsql/parse.y"
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 846:
#line 3392 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 848:
#line 3397 "../src/dsql/parse.y"
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 849:
#line 3401 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 850:
#line 3403 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 851:
#line 3405 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 852:
#line 3407 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 853:
#line 3409 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 855:
#line 3414 "../src/dsql/parse.y"
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 856:
#line 3416 "../src/dsql/parse.y"
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 857:
#line 3432 "../src/dsql/parse.y"
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 858:
#line 3448 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 859:
#line 3452 "../src/dsql/parse.y"
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 860:
#line 3456 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 861:
#line 3458 "../src/dsql/parse.y"
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 862:
#line 3462 "../src/dsql/parse.y"
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 863:
#line 3466 "../src/dsql/parse.y"
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_connection_id, CONSTANT_SLONG)); }
break;
case 864:
#line 3469 "../src/dsql/parse.y"
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 865:
#line 3474 "../src/dsql/parse.y"
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_gdscode, CONSTANT_SLONG)); }
break;
case 866:
#line 3477 "../src/dsql/parse.y"
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 867:
#line 3480 "../src/dsql/parse.y"
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 868:
#line 3485 "../src/dsql/parse.y"
{ yyval = yyvsp[0]; }
break;
case 869:
#line 3487 "../src/dsql/parse.y"
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 871:
#line 3493 "../src/dsql/parse.y"
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 872:
#line 3497 "../src/dsql/parse.y"
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 873:
#line 3504 "../src/dsql/parse.y"
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 874:
#line 3511 "../src/dsql/parse.y"
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 875:
#line 3518 "../src/dsql/parse.y"
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 877:
#line 3526 "../src/dsql/parse.y"
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 878:
#line 3530 "../src/dsql/parse.y"
{ yyval = yyvsp[0];}
break;
case 883:
#line 3542 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 884:
#line 3544 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 885:
#line 3546 "../src/dsql/parse.y"
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 886:
#line 3549 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 887:
#line 3556 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 888:
#line 3565 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 889:
#line 3572 "../src/dsql/parse.y"
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 890:
#line 3581 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 891:
#line 3583 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 892:
#line 3585 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 893:
#line 3587 "../src/dsql/parse.y"
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 894:
#line 3593 "../src/dsql/parse.y"
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 895:
#line 3602 "../src/dsql/parse.y"
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 896:
#line 3609 "../src/dsql/parse.y"
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 897:
#line 3613 "../src/dsql/parse.y"
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 898:
#line 3617 "../src/dsql/parse.y"
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 899:
#line 3621 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 900:
#line 3623 "../src/dsql/parse.y"
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 901:
#line 3627 "../src/dsql/parse.y"
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 904:
#line 3637 "../src/dsql/parse.y"
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 905:
#line 3641 "../src/dsql/parse.y"
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 908:
#line 3649 "../src/dsql/parse.y"
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 909:
#line 3651 "../src/dsql/parse.y"
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 910:
#line 3655 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 911:
#line 3657 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 912:
#line 3661 "../src/dsql/parse.y"
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 913:
#line 3663 "../src/dsql/parse.y"
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 914:
#line 3667 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 915:
#line 3669 "../src/dsql/parse.y"
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 919:
#line 3682 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 920:
#line 3684 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 921:
#line 3686 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 922:
#line 3688 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 923:
#line 3690 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 924:
#line 3692 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 925:
#line 3694 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 926:
#line 3696 "../src/dsql/parse.y"
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 929:
#line 3704 "../src/dsql/parse.y"
{ yyval = make_node (nod_null, 0, NULL); }
break;
#line 8532 "../src/dsql/dsql.tab.c"
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
