#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   76,   13,
   80,   80,   80,   63,   63,   66,   66,   66,   74,   90,
   90,   90,   91,   91,   92,   92,   93,   93,   97,   97,
   73,  100,  100,  102,  102,  103,  103,  106,  106,  107,
  108,  108,  109,  110,   71,   75,   72,   94,   94,  113,
  114,  114,  116,  116,  117,  117,  117,  117,  117,  115,
  115,  118,  118,  119,  119,  119,  119,  121,  121,  121,
  121,  120,  120,  125,  125,  124,   98,  126,  126,  127,
  130,  131,  131,  132,  128,  129,  129,  133,  133,  134,
  134,  135,  135,  135,   96,   96,   96,   68,   78,  136,
  136,  136,  137,  137,  138,  138,  139,  139,  139,  145,
   86,   86,  141,  141,  104,  104,   99,  149,  150,   57,
  142,  142,  105,  105,  105,  105,  105,  105,  143,  143,
  157,  157,  158,  160,  160,  160,  160,  160,  140,  159,
  159,  163,  163,  163,  163,  165,  166,  167,  168,  168,
  162,  161,  161,  161,  161,  161,  169,  170,  171,  171,
  171,  171,   67,   77,   81,  176,  172,  172,  173,  173,
  177,  177,  178,  174,  174,  179,  179,  180,  181,  181,
  182,  182,  183,  183,  175,  175,  175,  185,  185,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  188,  189,  190,  191,  191,  192,
  198,  194,  194,  194,  195,  195,  195,  196,  196,  196,
  196,  193,  197,  197,  186,  186,  203,  204,  204,  205,
  205,  205,  205,   11,  207,  207,  207,  208,  208,  208,
  208,  208,  208,   70,   79,   83,  213,  210,  214,  214,
  214,  215,  219,  224,  224,  225,  225,  226,  226,  147,
  212,   87,   89,  211,  211,   69,   82,  229,  229,  229,
  230,  233,  233,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  231,  231,
  232,    2,  236,  236,  236,  236,  236,  236,  236,  236,
  244,  245,  242,  242,  246,  246,  246,  246,  246,  246,
  246,  237,  237,  247,  247,  247,  247,  247,  247,  247,
  241,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  249,  249,  251,  251,  250,
  248,  248,  248,  243,  243,  239,  240,  240,  253,  253,
  253,  253,  254,  254,  238,  255,  255,  256,  256,    8,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  101,  101,  144,  144,  260,  260,  263,  263,
  265,  265,   52,   52,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  270,  270,  261,  261,  261,  261,  271,
  271,   60,   60,   60,   54,   54,  267,  267,  267,  264,
  264,  264,  275,  275,  275,  274,  274,  273,  273,  273,
  268,  268,  278,  276,  276,  276,  277,  277,  269,  269,
  269,  269,  279,  279,   17,   17,   17,  281,  281,  281,
    4,   15,  283,  283,  284,  284,  285,  285,  280,  286,
  286,  287,  287,  288,  288,  288,  288,  289,  289,  290,
  290,  291,  291,  293,  293,  293,  294,  294,  294,  295,
  295,  295,  292,  297,  297,  297,  298,  298,  296,  296,
  299,  301,  301,  300,  300,  282,   16,  302,  302,  302,
  303,  303,  306,  306,  307,  307,   64,   64,   64,  304,
  304,  308,  308,  305,  217,  217,  218,  218,  311,  311,
  312,  312,  312,  309,  315,  315,  316,  316,  317,  317,
  318,  318,  319,  319,  200,  200,  321,  321,  227,  227,
   30,  228,  228,  228,  228,  228,  228,  228,  228,  322,
  322,  322,  323,  323,  323,  216,  216,  216,  216,  221,
  221,  324,  324,  325,  325,  325,  325,  325,  327,  327,
  327,  222,  222,  220,  220,  331,  331,  331,  223,  223,
  332,  333,  333,  333,  333,  333,  334,  334,  335,  335,
  336,  336,  337,  337,  337,  338,  338,   10,   10,  340,
  340,    7,    7,  341,  342,  343,   18,   18,  344,  345,
  346,  346,  187,  313,  313,    3,    3,  348,  348,  348,
  350,  350,   60,  349,  349,  351,  351,   33,   33,   85,
   84,   84,  339,  339,  352,  353,  353,  201,  201,  201,
  146,  347,  347,  111,  111,  111,  111,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
  356,  356,  356,  356,  356,  356,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  367,  367,  357,  357,  358,  358,  358,  358,
  359,  359,  363,  363,  364,  364,  364,  364,  362,  365,
  360,  360,  368,  368,  369,  366,  371,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,  156,  156,  156,  372,  370,  370,  151,
  151,  376,  376,  376,  376,  376,  374,  374,  374,  374,
  374,  377,  377,  377,  377,  377,  377,  377,  377,  377,
  377,  209,  152,  152,  153,  154,  154,   50,   50,   19,
   19,  235,  378,   53,  123,  266,  266,   95,  373,  373,
  373,  373,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,  380,  328,  329,  329,  329,  326,  326,
  375,  330,  330,  382,  382,  383,  383,  384,  384,  387,
  387,  385,  385,  390,  390,  389,  386,  388,  381,  381,
  381,  381,  381,  381,  381,  381,  310,  310,  155,   47,
  272,  122,  148,  354,  164,  202,  259,   62,   59,  206,
  112,   65,  314,   34,   40,  320,  258,   38,   41,  199,
   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    2,    2,    2,    1,    0,    1,    1,    6,    6,    1,
    1,    0,    0,    1,    0,    4,    0,    1,    1,    2,
    8,    1,    0,    3,    0,    0,    1,    1,    2,    1,
    1,    1,    2,    6,    1,    1,    3,    0,    1,    1,
    0,    1,    1,    2,    3,    4,    2,    2,    3,    0,
    1,    1,    2,    1,    1,    1,    4,    3,    3,    3,
    3,    1,    1,    6,    3,    1,    3,    1,    3,    2,
    1,    0,    2,    3,    1,    0,    1,    1,    2,    3,
    4,    0,    1,    2,    0,    1,    1,    5,    5,    3,
    2,    0,    1,    3,    1,    1,    6,    3,    2,    6,
    2,    1,    2,    2,    2,    0,    1,    1,    2,    0,
    2,    0,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    2,    2,    4,    1,    1,    2,    2,    2,
    0,    1,    1,    1,    1,    3,    4,    8,    2,    0,
    6,    1,    1,    2,    2,    0,    3,    3,    1,    2,
    2,    2,    8,    8,    8,    8,    3,    0,    2,    0,
    1,    3,    2,    1,    0,    1,    2,    6,    1,    0,
    2,    1,    1,    1,    2,    3,    4,    1,    2,    2,
    2,    3,    1,    1,    1,    1,    2,    3,    1,    2,
    1,    2,    2,    2,    6,    4,    7,    8,    6,    4,
    2,    1,    3,    0,    2,    4,    0,    1,    1,    3,
    3,    6,    3,    0,    1,    2,    4,    1,    3,    2,
    2,    2,    1,    4,    1,    3,    0,    1,    1,    1,
    3,    3,    3,    7,    7,    7,    7,    1,    1,    3,
    4,    9,    2,    1,    3,    1,    1,    6,    3,    0,
    0,    0,    0,    3,    0,    9,    9,    1,    1,    0,
    2,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    5,    5,    5,    5,    5,    5,    2,    0,
    4,    2,    3,    3,    2,    2,    2,    3,    3,    2,
    3,    6,    1,    2,    4,    3,    2,    2,    2,    2,
    3,    1,    3,    3,    3,    2,    2,    4,    4,    5,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    1,    0,    2,    2,    0,    1,    2,    2,    2,
    2,    2,    1,    3,    7,    1,    0,    1,    0,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
    2,    2,    1,    1,    1,    1,    4,    5,    1,    3,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    4,    4,    6,    5,    3,
    0,    2,    2,    0,    3,    0,    4,    1,    5,    4,
    1,    4,    1,    2,    2,    1,    1,    1,    2,    2,
    2,    2,    1,    0,    3,    5,    1,    1,    2,    3,
    1,    2,    3,    0,    1,    1,    1,    5,    5,    6,
    3,    2,    1,    0,    2,    0,    1,    0,    3,    1,
    0,    1,    2,    1,    1,    1,    1,    2,    2,    1,
    2,    3,    1,    1,    3,    3,    1,    2,    3,    1,
    2,    0,    2,    1,    1,    0,    1,    1,    1,    3,
    2,    3,    0,    1,    3,    4,    3,    1,    3,    4,
    3,    0,    1,    3,    3,    3,    1,    1,    0,    3,
    0,    2,    0,    9,    1,    1,    1,    1,    1,    3,
    1,    2,    3,    2,    1,    3,    1,    1,    6,    3,
    3,    2,    3,    0,    1,    3,    1,    1,    1,    2,
    1,    1,    1,    2,    1,    2,    1,    2,    0,    2,
    4,    2,    2,    4,    2,    2,    1,    1,    0,    3,
    0,    1,    3,    1,    1,    1,    1,    3,    1,    1,
    1,    2,    0,    2,    0,    3,    5,    0,    2,    0,
    4,    1,    2,    1,    1,    0,    1,    3,    2,    1,
    1,    2,    1,    4,    2,    1,    3,    8,    5,    1,
    3,    1,    1,    4,    4,    4,    1,    1,    5,    5,
    1,    3,    3,    1,    1,    7,    7,    5,    3,    0,
    1,    1,    1,    2,    0,    1,    1,    1,    0,    3,
    1,    3,    1,    0,    3,    1,    3,    1,    3,    3,
    1,    1,    3,    1,    3,    3,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    1,    1,    5,    6,    3,    4,    5,    6,
    3,    4,    3,    4,    3,    4,    4,    5,    4,    4,
    3,    4,    1,    3,    3,    9,    9,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
    3,    1,    1,    1,    1,    1,    4,    1,    3,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    4,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    6,    6,    6,    8,    4,    4,    3,
    6,    1,    1,    6,    6,    1,    1,    4,    6,    4,
    5,    3,    5,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  545,  546,  547,    0,
  598,  702,  703,  707,  708,  456,    0,    0,    0,    0,
    0,    0,    0,  392,  553,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,    0,   94,    0,
  872,    0,   20,  870,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  470,    0,    0,   36,   33,   35,    0,   34,    0,  945,
    0,    0,    0,    0,   31,   67,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,
  658,    0,    0,    0,  947,  639,    0,    0,    0,    0,
    0,  106,    2,    0,    0,    0,    0,  440,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  441,  442,  443,  444,
  445,    0,  421,  938,    0,  942,    0,  400,  944,    0,
  397,    0,  641,  948,    0,  396,  951,    0,  395,    0,
  551,  868,    0,  150,  102,    0,  934,  103,    0,  217,
  741,    0,  941,  101,  145,    0,    0,   97,    0,  104,
  874,    0,   98,    0,   99,    0,  100,  146,  105,  607,
  608,    0,  873,  871,    0,  939,   73,    0,    0,  937,
  478,  471,    0,  477,  482,  472,  473,  480,  474,  475,
  476,  481,    0,   29,    0,   38,  728,   37,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  878,    0,  862,  650,  652,    0,  653,  655,
  927,  615,    0,  616,  656,    0,    0,    0,    0,    0,
    0,    0,  570,  559,    0,  562,  564,  565,  566,  567,
  573,  574,    0,  946,  640,    0,  107,    0,  108,    0,
  109,    0,    0,  599,    0,  597,    0,    0,    0,    0,
  457,    0,    0,  362,    0,  220,    0,  403,  393,  454,
  455,    0,    0,    0,    0,    0,    0,  412,    0,  368,
  369,    0,    0,  557,  555,  869,    0,    0,    0,    0,
    0,    0,    0,  153,  132,    0,   95,    0,    0,    0,
  110,    0,  121,  120,    0,    0,    0,    0,    0,    0,
  930,   74,    0,    0,    0,  704,  705,  479,    0,  929,
  844,  843,  842,    0,    0,  845,  846,    0,    0,  848,
  339,  340,  334,    0,  338,  840,  847,    0,  731,    0,
    0,   26,    0,    0,  949,    0,   70,   68,   66,   32,
    0,    0,    0,  733,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,  830,    0,    0,  832,    0,    0,
    0,  863,    0,    0,  834,  835,  836,  864,  865,    0,
  866,  867,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  738,  827,  828,  829,  833,  813,    0,  812,    0,
  816,  881,  882,  815,  809,  810,  811,  814,  879,  880,
  902,  903,  906,  907,    0,  618,    0,  715,    0,    0,
  619,    0,    0,  596,    0,  571,    0,  568,    0,  569,
  594,    0,  589,    0,    0,  563,    0,  742,  711,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,  603,
    0,  600,    0,  185,    0,    0,  129,  462,  172,  173,
    0,  460,    0,    0,    0,    0,  463,    0,  458,    0,
    0,  407,  409,  408,    0,  410,    0,  404,  218,    0,
    0,  271,    0,    0,    0,    0,  416,  417,    0,  447,
    0,    0,    0,    0,    0,    0,    0,  373,  372,  466,
    0,    0,  360,  149,    0,    0,  158,    0,  157,    0,
  164,  147,    0,  162,  165,  166,  154,    0,    0,  501,
  537,  504,    0,  538,    0,    0,  505,    0,    0,    0,
  528,  541,  500,  523,  502,  503,  498,  485,  362,  483,
  484,  486,    0,    0,  495,  496,  497,  499,    0,    0,
    0,    0,    0,  111,    0,  112,    0,  113,    0,  124,
    0,    0,  201,    0,    0,  360,    0,  220,    0,    0,
   82,    0,    0,  723,    0,    0,    0,    0,    0,    0,
    0,    0,  744,  748,  749,  750,  751,  752,  753,  754,
  755,  756,  757,  849,  850,  851,  841,    0,    0,    0,
  730,   27,    0,    0,   43,   71,    0,    0,   25,    0,
  736,    0,    0,  699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  950,  311,    0,    0,    0,    0,    0,    0,    0,  651,
    0,    0,  654,    0,    0,    0,    0,  943,  622,  549,
    0,  876,  548,    0,  572,    0,  580,  576,  575,    0,
    0,    0,  591,  579,    0,    0,  709,  710,    0,    0,
    0,  360,    0,    0,    0,    0,    0,    0,  610,    0,
    0,  130,    0,    0,    0,    0,    0,    0,  362,  406,
    0,  362,  363,  411,  493,    0,  273,    0,  267,  269,
  360,  935,  240,    0,    0,  362,    0,    0,  209,  360,
    0,    0,    0,    0,  245,  239,  242,  243,  244,  415,
  452,  451,  414,  413,    0,    0,    0,    0,    0,    0,
  371,    0,  362,    0,    0,  155,  159,    0,  163,    0,
    0,  524,  525,  542,    0,  539,    0,    0,  531,  529,
  530,    0,    0,    0,    0,  494,    0,    0,    0,    0,
  532,    0,    0,    0,  360,    0,  200,    0,  203,  205,
  206,    0,    0,    0,    0,    0,  220,   77,    0,    0,
   76,  931,  512,  513,    0,    0,    0,  747,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  336,  342,
  343,  341,  732,    0,    0,    0,    0,    0,    0,    0,
    0,   52,   60,   62,    0,    0,   69,    0,    0,    0,
  735,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  919,  920,  921,  922,  923,  924,  925,  926,
    0,    0,    0,    0,    0,    0,  912,    0,    0,    0,
  637,    0,    0,  825,  826,  900,    0,    0,  933,  821,
    0,    0,    0,    0,    0,    0,  831,  740,  739,    0,
    0,    0,    0,  627,  628,    0,    0,  620,  623,  550,
  877,  581,  590,  585,  584,    0,  595,  743,  712,  713,
  360,    0,    0,  215,  605,  606,  604,    0,  181,  175,
  182,    0,  178,    0,    0,  177,    0,  188,  169,  168,
  875,  171,  170,  464,    0,    0,    0,  405,  272,    0,
  211,  362,  213,    0,  363,  208,  214,    0,    0,    0,
    0,  418,  419,  362,  360,  363,    0,    0,    0,  389,
    0,    0,    0,    0,  349,  196,  197,  156,    0,    0,
    0,    0,    0,    0,  540,    0,    0,  362,  363,    0,
  489,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,    0,    0,    0,  198,    0,    0,    0,   81,
    0,    0,    0,    0,   86,   83,    0,    0,    0,  936,
  706,    0,    0,  758,    0,    0,    0,  784,  783,    0,
    0,    0,  791,  803,  801,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  746,    0,   64,   56,   57,
   63,   58,   59,    0,    0,   21,    0,    0,    0,   41,
    0,    0,    0,  717,  737,  700,    0,  716,    0,    0,
    0,    0,    0,    0,  220,    0,  883,    0,    0,  898,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  908,    0,  918,    0,    0,    0,    0,    0,
    0,  899,  837,    0,    0,    0,    0,    0,    0,  642,
    0,    0,    0,    0,    0,  587,  588,  592,    0,  199,
    0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
  401,  223,  224,  225,  226,  227,  228,    0,    0,    0,
  276,    0,  221,    0,    0,    0,    0,  246,    0,  448,
  449,  420,    0,    0,    0,    0,    0,    0,  362,  468,
  363,    0,    0,  361,    0,  932,  167,    0,    0,  507,
    0,  506,  543,    0,  535,    0,    0,    0,  487,    0,
  515,    0,    0,  517,  520,  522,  360,    0,    0,    0,
    0,  119,    0,  204,  362,  361,   96,    0,  117,    0,
   92,    0,    0,    0,    0,   85,    0,  799,  800,    0,
    0,    0,    0,    0,    0,  802,    0,    0,    0,    0,
    0,    0,    0,  792,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
   61,   53,   54,   22,  721,  722,    0,  719,  726,  727,
  724,    0,  698,    0,    0,  889,  888,    0,    0,  885,
  884,    0,  893,  892,  891,  890,  887,  886,    0,    0,
  914,    0,    0,    0,  913,    0,    0,    0,  635,    0,
    0,  630,    0,  631,    0,  648,  644,  646,    0,    0,
    0,    0,    0,  361,    0,  183,  179,    0,    0,  194,
  190,    0,  363,  279,    0,    0,  363,  277,    0,    0,
    0,  231,    0,    0,  247,  249,    0,    0,    0,    0,
    0,    0,    0,    0,  465,    0,    0,  347,    0,  350,
  509,    0,  510,    0,  134,    0,    0,    0,  138,  140,
  141,  142,  490,  492,  488,  519,    0,    0,    0,  363,
    0,    0,  344,  362,   87,    0,    0,   89,    0,    0,
    0,    0,    0,    0,  805,  804,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   39,    0,  701,  219,  901,  894,
  895,    0,  896,  910,  909,    0,  915,  904,    0,  905,
    0,  633,    0,    0,  665,    0,  662,  666,  667,  669,
  670,  671,    0,    0,  614,  363,  345,    0,  174,  191,
  363,  144,    0,  285,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  284,  288,
  283,    0,    0,  293,  294,  295,  296,  299,  301,  266,
    0,  207,  232,    0,    0,    0,  237,  233,  236,    0,
  363,  387,  388,  384,  383,  386,  385,    0,    0,  364,
  351,  508,  536,  143,  131,  139,    0,  362,  361,  263,
  126,  363,    0,    0,   90,   91,   78,    0,  770,  778,
    0,  771,  779,  774,  782,    0,    0,  772,  780,  773,
  781,  767,  775,  768,  776,  769,  777,  718,    0,  911,
  636,    0,    0,    0,    0,  682,  684,    0,  679,    0,
  264,  184,  402,    0,    0,    0,    0,  303,    0,    0,
    0,  302,    0,  304,  291,  297,    0,  300,  286,    0,
  289,    0,  325,  290,  210,  234,  238,    0,    0,  251,
  391,    0,    0,  363,    0,  346,  366,    0,   75,   93,
    0,  897,    0,    0,  668,  663,  683,    0,    0,  282,
    0,  292,    0,    0,    0,    0,  298,    0,    0,  318,
  319,  333,    0,    0,    0,    0,  328,  287,  326,    0,
    0,    0,    0,    0,    0,    0,    0,  356,  357,    0,
  265,  363,    0,    0,    0,    0,  690,    0,    0,    0,
  281,  278,    0,    0,    0,  306,    0,    0,    0,  310,
    0,  332,  940,  331,  330,    0,    0,  235,    0,    0,
  248,    0,  255,    0,  254,    0,    0,    0,    0,    0,
  367,  118,    0,  807,  692,  681,    0,    0,  693,    0,
  689,    0,    0,    0,    0,    0,    0,    0,    0,  321,
  320,  327,  329,    0,    0,  259,  258,  257,  359,    0,
    0,    0,    0,  688,    0,  695,  313,    0,    0,  305,
    0,    0,    0,  322,  262,  260,  261,    0,  352,    0,
    0,    0,    0,  323,  307,    0,    0,  806,    0,  694,
  316,  308,    0,  697,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1495,   26,   27, 1496,
   29,   30,   31,   32,   33, 1497,   35, 1498,  614,  101,
  381,  870, 1116,  102,  644,  871,  103,  386,  649,  126,
  104,  105,  236,  941,  115,  872,  873,  175,  178,  106,
  874,  107,  388,   77,  217,  352,  430,  609, 1053,  370,
  830,  578,  486,  806,  610,  611,  612, 1055,  218, 1305,
   69,  165,   70,  212, 1751, 1257,  198,  203,  205,  207,
  194,  185,  188,  200,  209,  132,  287,  289,  291,  341,
  594,  596,  598,  378,  237,  755,  511,  621,  988,  345,
  601, 1044, 1252,  545,  702, 1018,  496,  497,  526,  336,
  579, 1029, 1397,  724, 1191, 1398, 1399, 1400, 1401, 1402,
  622,  195,  186,  332,  552,  333,  334,  553,  554,  555,
  556, 1227,  982,  499,  500,  972,  970,  501,  976,  971,
 1182, 1356,  977,  978, 1187,  347,  818,  819,  820,  821,
  757,  995, 1370,  580,  759,  432,  784,  930,  520, 1319,
 1192,  433,  434,  435,  921,  436, 1371, 1372,  529, 1518,
 1652,  765,  766,  753,  767,  768,  769, 1208, 1653, 1654,
 1727,  313,  524, 1199, 1499,  171,  521,  522, 1200, 1201,
 1365, 1631, 1500, 1501, 1502, 1602, 1503, 1504, 1505, 1506,
 1507, 1508, 1509, 1674, 1715, 1639, 1717,  437,  682, 1338,
  438, 1061, 1603, 1646, 1647, 1684,  373,  374,  439, 1013,
 1224, 1388,  179, 1014, 1015,  119,  263,  459, 1613,  356,
 1175, 1352, 1475, 1656, 1657, 1658, 1659, 1173,  322,  540,
  783, 1220,  541,  781,  201,   54,  317,  176,  137,  300,
  162,  307,  168,  743,  740,  308,  318,  773,  319,  537,
 1006,  163,  301,  508,  542, 1221,   91,  173,  221,  581,
  582,  745, 1030,  746, 1031, 1032,  585,  586,  587,  588,
 1023,  834,  589,  590,  591,  799,  592,  488,  796,   37,
   38,   39,   56,  181,  325,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  708,  472,  956, 1178,  473,  474,
  713,   40,  136,  296,   41,  489,  490,  729,  695,  264,
  460,  461,  462,  699,  942,  943,  944,  945, 1167,  440,
 1155,  120,  121, 1466, 1467,  441, 1469,  442,  443,  444,
    0, 1667, 1580, 1668, 1669, 1670, 1711, 1752,  393, 1127,
   42,   43,  357,   44,   45,  481,  482,  879, 1124, 1307,
 1311,  394,  652,  191,  623,  624,  625,  626,  627,  628,
  629,  630,  631,  632,  633, 1274, 1071, 1073, 1074,  928,
  680,  445,  446,  447,  448,  377,    0,  214,  449,  450,
  911,  451,  452,  453,  454,  672,  915, 1156, 1151,  673,
};
static short yysindex[] = {                                   4234,
 1373, -185, 2635,  129,  423,  -41, 3010,  241, 1388,  -63,
  434, 1085, -185,  874,  723,    2,  972,    0,  749,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -118,
    0,    0,    0,    0,    0,    0, 4411,  367,  376,  422,
    2,  439,  454,    0,    0,  510, 1366,  587,  367,  639,
  700,  422,  689,    2,  439,    0,  454,  697,    0,  405,
    0,  784,    0,    0,  883,  868,    0,    2,  873,  367,
  968,  868,  639,  376,  422,  689,    2,  439,  454,  697,
    0,  422,  956,    0,    0,    0, 1381,    0, 1381,    0,
 1022, 1042,  144, 1395,    0,    0,    0,  587,    2,  587,
 1058, 1083, 1094,   89, 1012,    0,  117,  160,  466,  987,
    0,  639, 1178, 1327,    0,    0, 1088, 1062,  422,    2,
  454,    0,    0, 1261,  -59, 1235,  507,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  850,    0,    0, 1366,    0,   28,    0,    0, 1524,
    0, 1201,    0,    0,   32,    0,    0, 1381,    0, 1148,
    0,    0, 1123,    0,    0, 1031,    0,    0, 1345,    0,
    0, 1366,    0,    0,    0, 1461, 1524,    0,  389,    0,
    0, 1302,    0, 1315,    0, 1381,    0,    0,    0,    0,
    0, 1309,    0,    0, 1179,    0,    0, 1317, 1216,    0,
    0,    0, 1179,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  603,    0,  587,    0,    0,    0,  747, 1274,
 -170,  697, 1213, 1347, 1658, 1386, 1446,  747, 1336, -170,
 1389, 1396,    0, 6594,    0,    0,    0, 6594,    0,    0,
    0,    0, 4962,    0,    0, 1360,  376, 1452, 1371,  547,
    2, 1415,    0,    0, 1327,    0,    0,    0,    0,    0,
    0,    0, 1398,    0,    0, 1524,    0, 1302,    0, 1381,
    0, 1249, 1451,    0, 1435,    0,  974, 1543, 1106,  507,
    0, 1642, 1316,    0,  587,    0,  850,    0,    0,    0,
    0,  587, 1529, -117, 1440,  -66, 1921,    0, 7967,    0,
    0,  909, 1705,    0,    0,    0, 1919, 1919, 1366, 1611,
 1366, 1018, 1031,    0,    0, 5873,    0,  422,  439,  454,
    0, 1529,    0,    0, 1716,  789, 1965,    2, 1746,  376,
    0,    0, 1966,   61, 3302,    0,    0,    0, 1545,    0,
    0,    0,    0, 1550, 1554,    0,    0, 1528,  884,    0,
    0,    0,    0, 1976,    0,    0,    0, 1556,    0,    2,
 1584,    0,  422, 1561,    0,   60,    0,    0,    0,    0,
    2, 1398,  738,    0,    2,    0, 1702,  422, 1981,  747,
 1623, 1989, 1991, 1992,    0, 2002, 2003,    0, 2005, 2006,
 2007,    0,    0, 2008,    0,    0,    0,    0,    0, 2014,
    0,    0, 5506, 2016, 2028, 6594, 6594, 5552, 1608, 2031,
  907,    0,    0,    0,    0,    0,    0, 1983,    0, 2026,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1442,    0, 2740,    0, 1754, 2032,
    0,  -62,   37,    0,  479,    0,  -88,    0,  -88,    0,
    0, 2039,    0,  322, 1656,    0,    0,    0,    0, 2040,
   54, 2027, 1529, 2049, 1827,    0, 1813, 1813, 2051,    0,
 2052,    0, 1714,    0,  121, 1751,    0,    0,    0,    0,
 1366,    0, 1919, 1919, 1919, 1919,    0, 2055,    0, 1823,
 1826,    0,    0,    0, 1802,    0, 5873,    0,    0, 5873,
 1679,    0, 1524, 1849, 1654, 4769,    0,    0,  543,    0,
 1654, 1420, 1201,    0, 1718, 1675, 1646,    0,    0,    0,
  803, 1720,    0,    0, 1660,  689,    0, 1366,    0, 1843,
    0,    0, 1018,    0,    0,    0,    0,  193, 1676,    0,
    0,    0, 1678,    0, 1730, 2098,    0, 1791, 2099,  661,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2053,   57,    0,    0,    0,    0,  126, 2113,
 2114, 2099, 1524,    0, 1837,    0, 1381,    0, 1893,    0,
 1366, 1366,    0, -117,   32,    0, 1775,    0, 1748, 2117,
    0, 5057,  118,    0, 1772, 1780, 2128, 3648, 2136, 3399,
 7974,  -18,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1691,  884,  587,
    0,    0, 1137, 1733,    0,    0, 1715, -170,    0, 1860,
    0, 1749, 2139,    0, 1860, 1137, 1861, 1862,  422,  760,
 5778,  127,  639, 6594, 1045, 1093, 1138, 2104, 6594, 3648,
 2740, 1729,  771, 6594, 5778,  936,  936,  874, 1633, 2144,
    0,    0, 5824, 1725, 6594, 6594, 6594, 6594, 6594,    0,
 6594,  147,    0,   44, 1736, 5778, 1734,    0,    0,    0,
  687,    0,    0,  -56,    0, 1745,    0,    0,    0,    2,
  667,    2,    0,    0,  587, 1398,    0,    0, 5778, 1927,
 -117,    0, 1725,  405,  405, 1249,  125,  587,    0, 1366,
 1366,    0,  -78, 1660, 1660, 1737,  689, 1106,    0,    0,
 2157,    0,    0,    0,    0, 1922,    0,  587,    0,    0,
    0,    0,    0, 1931, 2164,    0, 1905, 1924,    0,    0,
 1866, 1867, 1381, 1937,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  689,  587, 5329, 1820, 1829, 1831,
    0,  689,    0, 1801, 1444,    0,    0, 1805,    0,   92,
 1806,    0,    0,    0,  689,    0, 2098,  140,    0,    0,
    0, 1926,  140, 1809,  140,    0, 2194,  689,  689,  689,
    0, 1529,    2, 1972,    0, 1882,    0, 1797,    0,    0,
    0,  909, 1801,    2, 1822,   78,    0,    0, 2202, 1970,
    0,    0,    0,    0,   61, 1784, 1451,    0, 1451, 7871,
  372, 6594, 6594, 3883, 2206, 1160, 4022, 6594, 4131,  862,
 4200, 4379, 6050, 4488, 4667, 4736, 3648, 3648,    0,    0,
    0,    0,    0, 1561,  422,  439, 1561,  454,  697,   77,
 2207,    0,    0,    0, 1137, 1868,    0,  -34, 1884, 1398,
    0, 5778, 1884, 2209, 2207, 1137,  550, 1936, 6594, 6594,
 1994, 6594, 2214, 6594, 2215, 1810, 6594, 6594, 6594, 6594,
 6594, 6594,    0,    0,    0,    0,    0,    0,    0,    0,
 1946, 1257,  461, 6594,  801, 5778,    0, 3648, 1934, 2740,
    0, 2230,  466,    0,    0,    0, 2740, 1830,    0,    0,
 1996,  936,  936,  695,  695,  933,    0,    0,    0,   44,
 2232, 2233,  902,    0,    0, 3648, 1954,    0,    0,    0,
    0,    0,    0,    0,    0,  -69,    0,    0,    0,    0,
    0, 1855, 1801,    0,    0,    0,    0, 2240,    0,    0,
    0, 1874,    0, 1919, 2019,    0,  -78,    0,    0,    0,
    0,    0,    0,    0, 2246, 3648, 2813,    0,    0, 1993,
    0,    0,    0, 2813,    0,    0,    0, 1381, 1381, 1956,
 2252,    0,    0,    0,    0,    0,  -85,   -7,  378,    0,
 2037,  874, 1847, 1864,    0,    0,    0,    0, 1842,  129,
 1876, 1887, 1922, 2272,    0, 1660, 1880,    0,    0,  946,
    0, 2258, 1842, 1128,  689, 2273, 2277, 2278, 2057,   32,
    0, 1993, 1919, 1751, -117,    0, 1720, 1847,   48,    0,
  689, 1933, 2015, 5057,    0,    0,  689, 1838, 2022,    0,
    0, 2292, 2294,    0, 1674, 2740, 2301,    0,    0, 2740,
 2302, 6096,    0,    0,    0, 1995, 2304, 2740, 2309, 1467,
 2311, 2740, 2313, 6594, 6594, 2206, 6594, 6322, 2315, 2740,
 2316, 2317, 2740, 2318, 6594, 2740, 2323, 2740, 2324, 2325,
 2740, 2326, 2328, 2740, 2331,    0, 2110,    0,    0,    0,
    0,    0,    0, 2045, 1137,    0, 1137,   77, 2207,    0,
  279,  279,  152,    0,    0,    0, 1888,    0, 2209, 2207,
 2330,  550, 1957, 2090,    0, 2130,    0, 2219, 6594,    0,
 2589, 2605, 2694, 2782, 2802, 3076, 6594,  689, 5778, 2740,
 1939, 5778,    0, 6594,    0, 2071,  500, 6594, 5778, 6594,
 6594,    0,    0,  902, 2341, 5778, 1062,   44, 1998,    0,
 1999, 2000, 2048, 2109, 2061,    0,    0,    0, 1993,    0,
 1847, 1973, 1366, 2010, 1660, 2012, 1660,    0, 3648,  608,
    0,    0,    0,    0,    0,    0,    0, 1960, 2132, 1993,
    0, 6594,    0, 2120, 2001, 1956,  376,    0, 3648,    0,
    0,    0, 2024, 2033, 2034, 2036, 2038, 2041,    0,    0,
    0,  466, 2140,    0,  -54,    0,    0, 2392,  129,    0,
 1737,    0,    0,  140,    0, 2813, 2056,  140,    0,  140,
    0, 1922, 2395,    0,    0,    0,    0,  909, 1801, 2132,
 1660,    0, 1751,    0,    0,    0,    0, 2240,    0, 2398,
    0, 2399, 1366, -129, 2401,    0, 1366,    0,    0, 6594,
 2025, 2025,  874, 2403, 1894,    0, 2025, 2025, 6594, 2025,
 2025, 1848, 2740,    0, 1568, 6594, 2740, 2025, 2025, 2025,
 2025, 2740, 2025, 2025, 2025, 2025, 2025, 2025, 2059,    0,
    0,    0,    0,    0,    0,    0, 2020,    0,    0,    0,
    0, 5778,    0,  550, 2330,    0,    0, 5873, 2410,    0,
    0, 3092,    0,    0,    0,    0,    0,    0, 3157,  109,
    0, 5778, 2146, 2042,    0, 5778, 3175, 1911,    0, 1372,
 2740,    0, 1915,    0,  902,    0,    0,    0,   44, 1102,
 3648, 2064, 2132,    0, 1919,    0,    0, 1366, 1444,    0,
    0,  615,    0,    0,  587, 7972,    0,    0, 2740, 1813,
 2120,    0, 1241,    2,    0,    0,  646, 2013, 2119, 2021,
 2161, 2137, 2165, 1993,    0, 4962, 2083,    0, 1801,    0,
    0, 2439,    0, 2440,    0, 2134, 1813, 2056,    0,    0,
    0,    0,    0,    0,    0,    0, 1993, 1720, 1847,    0,
 1444, 2037,    0,    0,    0, 2111, -121,    0, 1922, 2116,
 2740, 2450, 2453,  466,    0,    0, 2454, 2457, 2740, 2460,
 2463, 6594, 6594, 2740, 2470, 2471, 2474, 2477, 2482, 2484,
 2486, 2487, 2490, 2496,    0,  279,    0,    0,    0,    0,
    0,  689,    0,    0,    0, 5778,    0,    0, 5778,    0,
 1736,    0, 1169, 2259,    0, 2494,    0,    0,    0,    0,
    0,    0,  -18,  929,    0,    0,    0, 1660,    0,    0,
    0,    0, 5873,    0,  367,  774, 2481, 1451, 2503, 2211,
 6594, 2488, 2510, 2495, 2500, 2502, 2212, 2505,    0,    0,
    0, 4870, 2512,    0,    0,    0,    0,    0,    0,    0,
 2514,    0,    0, 2220, 2229,    2,    0,    0,    0, 1381,
    0,    0,    0,    0,    0,    0,    0, 2132, 2270,    0,
    0,    0,    0,    0,    0,    0, 2132,    0,    0,    0,
    0,    0, 6594, 1366,    0,    0,    0, 1366,    0,    0,
 6594,    0,    0,    0,    0, 2740, 2740,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2554,    0,
    0, 1954, 3648, 1725, 1102,    0,    0, 2227,    0, 2557,
    0,    0,    0,   93, 2541,  422, 6594,    0, 2262, 3648,
 1904,    0, 3648,    0,    0,    0,  139,    0,    0,  865,
    0,  345,    0,    0,    0,    0,    0, 1381, 2225,    0,
    0,   73, 1736,    0, 2037,    0,    0, 2740,    0,    0,
 1372,    0, 2061,  -18,    0,    0,    0, 1099, 2813,    0,
 2551,    0, 6368, 2228,  139,  659,    0,  671,  704,    0,
    0,    0,  367, 2151,  129,   91,    0,    0,    0, 2225,
  432, 1956, 2241, 2242,   73, 2569,  902,    0,    0, 1954,
    0,    0, 2573, 1736, 2064,    2,    0, 2575, 2583, 1156,
    0,    0, 5008, 2231, 2600,    0,  107, 2181, 2340,    0,
  139,    0,    0,    0,    0, 4929,  865,    0,  835,  835,
    0, 2352,    0, 2218,    0,  902, 2621,   73, 2321, 2061,
    0,    0, 1954,    0,    0,    0, 1099, 2626,    0,  376,
    0, 1633, 1929,   52, 2609, 2380, 2372, 4929, 4929,    0,
    0,    0,    0, 2216,  602,    0,    0,    0,    0,  902,
   73, 2064, 2061,    0,  376,    0,    0,  139, 2634,    0,
 1784, 4929, 2371,    0,    0,    0,    0, 1459,    0, 2064,
 2637, 2641, 1930,    0,    0, 4929, 3648,    0,  376,    0,
    0,    0,  -18,    0,
};
static short yyrindex[] = {                                      0,
    0,  165,   12,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  892, 2266,    0,    0,    0,    0, 2683,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  326,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  898,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2346,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2307,    0,    0,    0,   70,    0,   70,    0,
    0,    0,    0, 2308,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5234, 3551,
    0,    0,    0,  966,    0,    0,    0,  435,    0,    0,
    0,    0,    0,    0,    0,  272,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
    0,    0,    0,    0,  637,    0,    0, 2421,    0, 1096,
    0,    0,    0,    0,    0,  930,    0,    0, 6145,    0,
    0,    0,    0,    0,    0,    0,   22,    0,  -71,    0,
    0, 2646,    0,    0,    0, 2421,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1140,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1313,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  433,    0,    0, 1320,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   22,    0, 2646,    0, 2421,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1404,
    0, 2416,    0,    0,    0,    0, 1474,    0,    0,    0,
    0,    0, 2432,  961, 7998,    0, 1477,    0,    0,    0,
    0,  173,    0,    0,    0,    0, 2236, 2236,    0,    0,
    0, 1605, 1082,    0,    0,    0,    0,    0,    0,    0,
    0, 2432,    0,    0, 1383,    0,    0,    0,    0,    0,
    0,    0, 7794, 2312,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1622,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1625,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1637,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2018,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  111,    0,    0, 2376,
    0,   90,    0,    0,    0,    0,  650,    0,  650,    0,
    0,  455,    0,  761,  855,    0, 2081,    0,    0,    0,
 1140,    0, 2432,    0,    0,    0,  834,  834,  693,    0,
    0,    0,  282,    0, 3911,  122,    0,    0,    0,    0,
    0,    0, 2236, 2236, 2236, 2236,    0,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2435,    0,    0,    0,    0,    0, 2416,    0,
    0, 1067,    0,  765, 2234,    0,    0,    0,    0,    0,
    0,  186,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1655,    0,    0,    0,    0, 1665, 1053,    0,
    0,    0, 1350,    0,    0, 1497,    0,    0, 1525,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1191, 2011,    0,    0,    0,    0, 1582, 1460,
    0, 1525,   22,    0,    0,    0, 2421,    0,    0,    0,
    0,    0,    0,  961,  975,    0,    0,    0,    0, 2289,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   83,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
    0,    0,    0,    0,  120,    0,    0,    0,    0, 6640,
    0, 6640,    0,    0, 6640, 6640, 6640,    0,    0,    0,
 2251,    0,    0,    0,    0, 2715, 2852, 5280,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1248,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  489,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  961,    0,    0, 1077, 1077,    0,    0,    0,    0,    0,
    0,    0, 3912,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   99,    0,    0,    0,    0,
    0,    0,    0, 2664,    0,    0, 3493, 2973,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  362,  638,  647,
    0,    0,    0,    0, 1844,    0,    0,    0,    0,    0,
 1750,    0,    0,    0,    0,    0, 1497,    0,    0,    0,
    0,  662,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2432,    0,    0,    0,  269,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5601,    0,    0,    0,   75,
    0,    0,    0,    0, 2396,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1666,
 1671,    0,    0,    0,    0,    0,    0,    0, 1672,    0,
    0,    0, 1672, 1687, 1700,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0, 6640,    0,    0,    0, 1651,    0,    0,    0,
 2188, 3087, 3224, 2545, 2628,    0,    0,    0,    0,    0,
  521,  788,  728,    0,    0,    0,  690,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  735,    0,    0,
    0,    0,    0, 2236, 2248,    0, 3919,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2437,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1086,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1701, 2266, 1704,  105,    0,    0,    0,    0,    0,    0,
    0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
    0, 1203,    0,    0,    0,    0,    0,    0,    0,  975,
    0, 2437, 2236, 1741,  961,    0, 2448, 1704,    0,    0,
    0, 5601,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  830,    0,    0,    0, 1881,
    0,    0,    0,    0,    0,    0,    0, 4373,    0, 6834,
    0, 6845,    0,    0,    0,    0,    0,    0,    0, 6922,
    0,    0, 6928,    0,    0, 7005,    0, 7089,    0,    0,
 7152,    0,    0, 7202,    0,    0, 7789,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1666, 1742,    0,
 2276,  237,    0,    0,    0,    0,    0,    0, 1743, 1756,
 1768,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2280,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2370, 1498,    0, 2279,    0, 2373,    0,
 2374, 2378,    0,    0,  425,    0,    0,    0, 2437,    0,
 1704, 3446,    0,    0,    0, 2264,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2269,    0, 2469,
    0,    0,    0, 1506,    0, 1086,    0,    0,    0,    0,
    0,    0,  786,  809,  851,  860,  869,  886,    0,    0,
    0, 5234,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  917,    0,    0,    0,
    0, 3113,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1788,    0,    0,    0,    0, 1816,    0,    0,
    0,    0,    0,  106,    0,    0,    0,    0,    0,    0,
    0,    0, 5280,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7235,    0, 7329,    0, 7350,    0,    0,    0,
    0, 7379,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1818,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1789,    0,    0,    0,  996,    0,    0,    0,    0,    0,
    0,  162,    0,    0, 2236,    0,    0,    0, 3572,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2690, 1364,
 1713,    0, 2416,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2437,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1825,  979,    0,    0,
    0,    0,    0,    0,    0,    0, 2437, 2448, 1704,    0,
  284,    0,    0,    0,    0,    0,    0,    0,  198,    0,
 7413,    0,    0, 6640,    0,    0,    0,    0, 7509,    0,
    0,    0,    0, 7559,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  237,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   88,    0, 2370,  288,    0,  263,    0,    0,    0,    0,
    0,    0,  327, 2693,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1054,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7636, 7778,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  342,    0,    0,    0,    0,    0, 2702,    0,    0,
    0,    0,    0, 2675,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2431,  872,    0,
    0,    0,  261,    0,    0,    0,    0, 2690,    0,    0,
    0,    0,   86, 2462,    0,    0,    0, 2693,    0,    0,
    0,    0,   71,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3586,
    0, 1086, 1486, 2256,    0,  187,  132,    0,    0,  418,
    0,    0,    0,   88, 2703, 1180,    0,    0, 2704,    0,
    0,    0,    0, 2684,   87,    0, 2441,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2370, 1673,    0,    0,  258,
    0,    0,  342,    0,    0,    0, 2693,    0,    0,    0,
    0, 2717,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  292,
    0,   94,   86,    0,    0,    0,    0,    0, 2705,    0,
    0,    0, 7964,    0,    0,    0,    0, 2370,    0, 2703,
 2727,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1653,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2769,    0,    0, 2770,
    0,    0,    0,    0,    0,   10,    0, 2771,   -1,  215,
   19, -575, 1661,  231, -221, -191, 2760, 2523,    0,  -35,
    0, 2535,  -91,  -44,    0,  791, -390,  -25,  -24,  -23,
 -186, 2538, 2138,    0,    0,    0, 1356,    0,    0,  -48,
 1735, -542,   17, -841, 2180, 1963, -268, 1740, 2711, -298,
    0,  -52,    0, 1233,  -47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -590, -622, 1747, -282,  116, -920,    0,
    0,    0,    0, -311, -104, -425, 1753, -300,  -43,    0,
 -480,    0,    0, -458, -960,    0, 1397,    0,    0, 2497,
 -593,  -10,    0,    0,    0,    0, 2467,    0, 2249, 2504,
 -198, 1771, -701,    0,    0,    0, -679,    0,    0,    0,
    0,    0,    0, 1828,    0, 2524, 2092, 1766, 2506, 2507,
    0, 1230,    0, -484, 2058,  -57, -510, -692,    0,    0,
  -50, -937, -928, -926, -194, -915,    0, 1447, -931,    0,
 1176, 1455,    0, 2288,    0,    0,    0,-1130, 1177, 1182,
 1143,  112, -264, -790, -148,    0,    0, 2082,    0, 1636,
    0,    0, -383,    0,    0,    0, -183,    0,    0,    0,
    0,    0,    0,    0,    0, -258,    0, -357,    0,-1106,
 -280, 1097, 1238,    0, 1150,    0,    0, 2472,  -94, -697,
 -951,-1125,    0,    0,-1041, -634, -869, 1456,    0, -470,
-1354, -806, -809,    0, -925, 1193,  224, -805, -514, -720,
 -922,-1275,    0,    0,    1,    0,    0,    0,    0,    0,
 2532,    0,    0,    0,    0, 2548, 2327,    0,    0,    0,
    0,    0, 2556,    0,    0,    0,    0,  -16,    0,    0,
    0, -317, 2060, -315, 1624, -416,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2271,    0,-1178, 2074,    0,
    0,    0, 2848,    0,    0,    0,    0, 2593,    0,    0,
    0,    0, 2407,    0, 2409,    0,    0,    0, 2170,    0,
    0,    0,    0,    0,  -86,    0, 2156,    0,-1217, 1374,
    0, 2187, -626, 2191,    0, -850, 1944,    0,    0, -124,
 -649,    0, 2774,    0, 1323,-1145,    0,-1136,-1133, -969,
    0, 1425,    0, 1194,    0, 1236,    0, 1145,    0,    0,
    0,    0, 2426,    0,    0,    0, -334, 2254, 2035, -994,
    0,    0,    0,  807,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2662, 1804, 1824,    0, -583,
    0,    0,    0, -213,    0, 2552,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -46, 1762,    0,
};
#define YYTABLESIZE 8495
static short yytable[] = {                                     128,
  190,  167,   73,  285,   74,  170,  192,  238,  184,   34,
  717,  487,  256,  259,  189,  172,  546,  197,  583,  376,
  584,  515,  257,  260,  838,  922,  841,  222,  202,  725,
  964,  551,  744, 1203,  891,  747,  226,  517,  372,  204,
  227,  758,  206,  923,  208,  756,  703,  233,  294, 1193,
  244,  973,  246, 1160,  387,  615, 1193,  651, 1194, 1343,
 1195,  128,  230,  387,  231, 1194,  232, 1195,  458,  831,
  229, 1197,  225,  245, 1204, 1375,  913,  599, 1197,  199,
  884,  701,  674,  940,  286, 1212,  323,  235, 1021, 1164,
  822, 1738,  960,  680,  288,  823, 1256,  716,  516,  479,
  507, 1047,  228,  648,  348,   72,  290,  936, 1237,  429,
  714,  266, 1655,  729,  349,   84,  309, 1052,   84,  720,
 1115,  459, 1461,  674, 1255, 1048,  673, 1308,  675,  314,
 1413,  354,  242,  621, 1687, 1020, 1542,  968,  375,  516,
 1000,  674,  516,  337, 1417,  312,   88,  805,  461, 1453,
 1681,  714,  680, 1629,  714,  376,  254,  516,  480,  516,
  731,  680,   72,  348,  554,  808,  938,  491,  893,  714,
  525, 1465,  467,   72,  372,  354,  657,  379,  720,  255,
  459, 1232,  371, 1390, 1026,  390,  353,  242,  938,  516,
  354,  734,  735,  736,  737,  732,  429,  646,  485,  258,
  293,  697,  680,  382, 1468, 1389,  492,  461,  583,  108,
  584,  963,  382, 1470,  255,  122, 1471, 1623,  720,  464,
  680,  531,  255,  554,  947,  478,  112,  467, 1477, 1354,
  516,  467,  790,  516, 1545,  471,  514,   72,  516,  127,
  990,  516,  113,  857,  390,  353,  764,  516,  516,  997,
  516, 1250,  551, 1213,  519, 1126,  190,  673,  532,  791,
  675,  535,  660, 1106, 1107, 1181,  397,  480,  125,  134,
   55,  611, 1373,  384,  375, 1395,  115,  109,  974,   78,
  547,  613,  549,  195,  310,  268, 1121,  664,  320,  706,
  385,  355, 1004,  593, 1215,  514,  802,  603, 1193, 1118,
 1385,  219,  607,  660, 1042, 1700,  654, 1194,  342, 1195,
 1129, 1131,  605,  595,  115,  597,  673, 1345,  371,  675,
 1197,  660,  135,   72, 1157,  602,  672,  125,  664,  251,
  611,  664,  754,  804,  478,  355, 1176, 1418,  645, 1662,
  613,  255,  195,  187,  642,  252,  664, 1531, 1733,  115,
  355,  975, 1386,  645,   74,  650,  516, 1214,   14,  655,
  707,  376,  311, 1012,  382,  712,  321,  672,  858,  431,
 1716, 1546,  516,  455,  714, 1205, 1206, 1222,  457,  459,
 1472, 1027,  661,  469,  602,  672,  261, 1177, 1353,  730,
  122,  122, 1190,  994,  187, 1686, 1465,  483,  698,  516,
 1405,  674, 1122, 1664,  638,  516,  461,  638,  516,  250,
  621,  674, 1064, 1616,  674,   88,  675,  661,  658,  675,
  376, 1309,  638,  674,  673,  376, 1259, 1452,  459, 1468,
  892,  714,  577,  268,  641, 1216,  467,  888, 1470, 1373,
  785, 1471, 1482,  937,  861,  487, 1510,  516, 1511,  390,
 1179, 1568,  733,  729,  583,  461,  985, 1539, 1258,  987,
  354,  387,  125,  354,  885,  673,  458,  516,  760,  516,
  674,  516, 1051,  993,  516,  649,  661,  516,  641,  674,
  680,  314,  673,  673,  675, 1538,   84,  720, 1275, 1540,
  516,  577,  613,  641, 1211,  253,  516,  312, 1463,  787,
 1011,  458,  680, 1357,  169,  814,  355,  516,  187, 1339,
  516,  831,  477,  583,  647,  353, 1339,  516,  353,   71,
  634, 1691,  700,  674,  458, 1248, 1675, 1408,  354, 1393,
 1249, 1114,  959,  125,  680,  516, 1059,  674,  671,  984,
  459,  676,  677,  679,  862, 1125,  190, 1039,  680,  680,
  981, 1409,  816,  817, 1551, 1581, 1315, 1054,   74,  348,
 1583,  634,  786,  714,  634,  516, 1713,  461,  516,  516,
  467,  714,  354,  807,  554,  253,   71, 1547,  832,  634,
  241,  660,  863,  353,  354,  187,  354,   71,  860,  675,
  516,  480,  675, 1528,  660, 1362,  951,  516,  253,  477,
 1610,  491,  680,  660,  514, 1472,  664,  187,  516,  516,
  981,  833,  611,   74,  645, 1377, 1537,  125,  253,  664,
  355, 1617,  613,  355,  613,  376,  516,  353,  664,  979,
  980,  516,  195,  857,  750,  649,  370,  374, 1424,  353,
  711,  353,  369,   92,  602,  672,  375,  368, 1363,  582,
  660,   71,  895, 1648,  673, 1481,  343,  675,  478,  660,
  516,  135, 1185,  190,  516,  255,  602,  672, 1671,  210,
  379,  638,  638,  661,  471,  664,  957, 1108, 1479, 1217,
 1111,  969,  969, 1119,  664, 1447, 1521,  458,  355,  661,
  519, 1193,  601, 1661, 1130,  370,  374, 1663,  673, 1678,
 1194,  675, 1195,  660,  812,  375,  110,  211,  582, 1202,
  613, 1679,  673, 1197,  672,  675, 1218,  660, 1003, 1005,
  135, 1210,  857,  672, 1301,  261, 1303,  625,  664, 1696,
  661, 1251,  355, 1689,  612,  840, 1407,   71,  661,   75,
   76, 1701,  664,  673,  355, 1236,  355, 1681,  661,  661,
 1062,  601, 1063,  983,  344,  480,  641, 1473,  858,  376,
  593,  857, 1680,  641,  297,  673,  641,  672,  625,  262,
  641,  625, 1730,  376,  638,  577,  457, 1040,  641,  896,
  376,  672, 1010, 1054,  912,  381,  625,  624, 1049,  919,
  920, 1002, 1196,  612,  641, 1024, 1600,  583,  927, 1196,
  931,  932,  933,  934,  935, 1748,  927,  133,  382, 1571,
  577,  457,  673,  298,  661,  638, 1665, 1394,  641,  593,
 1109,  673,  478, 1404, 1036, 1037, 1038,  164,  624,  793,
  467,  641,  583,  216,  457,   74,  166, 1448,  577,  634,
 1110,  577,  634, 1112,  381, 1113,  624,  858,  641,  634,
  378, 1699,  634,  641,  578, 1704,  634,  577,  661,  377,
  583,  634,  761,  583,  634,  673, 1318,  382,  380,  857,
  793,  256,  661,  793, 1690,  641,  857,  216,  864,  583,
  634, 1625,  169,  577,  704,  379,  858,  641,  793,  641,
 1699,  554,  216, 1732,  586,  370, 1149,  556,  359,  174,
  370,  374, 1746,  272,  634,  583,  370,  857,  634,  378,
  375, 1512,  256,  578,  177,  256,  136,  634,  377,  180,
  857,  951, 1749, 1301, 1699,  299, 1750,  380,  368,  151,
  256,  468,  857, 1480,  634, 1336, 1384,  800, 1535,  135,
 1758,  135, 1699,  762,  379,  586,  255,  690,  688,  686,
  554,  687,  732,  689, 1747,  360,  556, 1065, 1066, 1070,
  196,  634, 1078, 1080, 1082,  561, 1090, 1093, 1096, 1098,
 1101, 1104, 1412,  634,  684,  136, 1161,  688,  137, 1624,
  685,  634,  689, 1339,  763, 1541,  469,  190,  151, 1238,
 1572,  379,  582,  867,  858,  626, 1636,  457, 1584, 1638,
  583,  858,  584,  470, 1133, 1134,  801, 1136,  661, 1138,
  385,  601, 1141, 1142, 1143, 1144, 1145, 1146, 1228,  261,
   74,  661,  376, 1339,  561, 1163, 1306, 1306, 1310, 1150,
  661,  920,  858,  601,  370,  374,  626,  137, 1239,  626,
  135, 1196, 1344, 1478,  375,  858,  625,  187,  122,  381,
 1367, 1243,  526,  729,  626,  582,  625,  858,  582,  625,
  361,  362,  363,  889,  182,  183,  453, 1261,  625, 1464,
  954,  649,  382, 1265,  582,  612,  609,  661,  916,  917,
 1359,  152, 1361,  364,  365,  250,  661,  955,  366,  367,
  764,  793,  526,  526,  729,  558,  526,  729,  216,  193,
  582, 1410, 1331,  593,  778, 1333,  624,  302, 1152, 1153,
  453,  526,  729,  526,  378,  625,  624,  458, 1601,  624,
  609,   74,   74,  377,  625,  453,  250, 1642,  624,  250,
  661, 1543,  380, 1084,  969,  609,  216,  602,  593,  675,
  152,  779, 1660,  526,  250,  253, 1411,   71,  793,  379,
 1085,  793,  216,  123,  558,   14,  303,  100,  793, 1376,
  124,  793,  934, 1763, 1330,  793,  593,  538,  625,  593,
  793, 1238,  950,  793,  216,  624, 1586, 1643,  539,  359,
  625,  380,  653,  381,  624,  593,  684,  927, 1644,  793,
  493,  458,  685, 1703,  362, 1086,  136,  578,  675, 1282,
 1283,  440, 1285, 1287, 1476,  215,  382,  125,  151,  256,
 1292,  593, 1724,  793, 1416,  684,  793,  793, 1420, 1587,
 1242,  685,  918, 1169, 1087,  491,  793, 1392,  624,   74,
  151,  493,  578,  370,  493,  934,  360, 1170,  241, 1640,
  624,  480,  213,  793,  370,  780,  491,  675,  378,  493,
  182,  183, 1154, 1725, 1322, 1615,  362,  377,  137,  151,
  578, 1171, 1329,  578,  920,  793,  380,  920,  304, 1150,
  793,   93, 1576, 1337,  920, 1340, 1341, 1640,  151,  578,
  241,  920,  793,  379,  793, 1454,  305,  151,  675, 1457,
  223, 1088, 1645,  151, 1464,  491,  503, 1577,  688,  686,
 1726,  687, 1722,  689,  261,  578,  675,  190,  478,  969,
  526,  151,  337,   94,  626, 1172, 1641, 1369,  550,  560,
  306, 1483,  494, 1720,  626,   95,  526,  626,  216,  526,
  526,  495,  526,  220, 1743, 1744,  626,  526, 1520,  649,
  526,  361,  362,  363,   93,  182,  183,  504,  897,  527,
   96, 1306,  261,  526, 1641, 1578, 1640,  234, 1755,  526,
  152,  241,  526,  216,  364,  365,  494,  117,  118,  366,
  367,  337, 1762, 1582,  129,  495, 1677,  480,  560, 1611,
 1640,  505,  152,  626,  503, 1421,   94,  327, 1614,  527,
  527,  729,  626,  527, 1429,  609,  899,  261,   95,  506,
 1721, 1434,  241,  398,  216,  239,  130,  216,  527, 1570,
  527,  152,  111,  688,  686,  376,  687,  609,  689,   97,
  235,  131,  216,   96,  328,  240,  329,  457, 1609,   98,
  152,  526, 1585, 1641, 1196,  504,  626,  729,  243,  152,
  527,  901, 1576,  247,  478,  152,   74,  920,  626,  330,
  491,  920, 1569,  526,   99, 1739,  407, 1641,  314,  521,
  526,  315,  398,  152,  526,  864,  248, 1577,  493,  505,
  493,  526,  491,  399,  331,  493,  394,  249,  493, 1753,
 1608,  118,  693,  688,  686,  252,  687,  506,  689,  526,
 1169,  493,   97, 1708,  526, 1619,  544, 1589,  939, 1620,
  521,  457,   98,  521, 1170,  229,  283,  316,  688,  686,
  491,  687, 1075,  689,   94,  267, 1650,  691,  521,  526,
  521,  958,  284,  526,  534, 1578,  252,   99, 1171,  252,
 1709,  734,  399,  939,  292,  394,  684,  544, 1076,  865,
  544, 1633,  685, 1710,  252,  100,  229, 1556, 1557,  229,
  521,   96, 1573,  295,  691,  544,  491,  544,  734,  125,
   71,  480,  413,  312,  229,  534,  675,  691,  534,  493,
  353,  920,  324,  414,  920,  866,  675, 1148,  358,  675,
  867,  518, 1172,  534,  326,  534,  868,  544,  675,  491,
 1682,  493,  420,  480,  480,  128,  641,  385,  493,  640,
  423,  424,  425,  513,  160,  869, 1591,  527,  335,  688,
  686, 1666,  687,  491,  689,  534,  514,  480,  346, 1514,
   97,  335,  518,  527,   42,  518,  527,  527,  478,  527,
   98,  480,  493,  348,  527,  675,   50,  527,  128,  351,
  518, 1515,  518, 1685,  675,   74,  350,   93, 1516, 1666,
  527,  684,  358,  354,  161,   99,  527,  685, 1618,  527,
  478,  478, 1736,  160,  514,   40, 1621,   46,  355,  268,
   23,  725,  518,  924,  688,  686,  383,  687,   47,  689,
  335,  128, 1517,   42,  478,   48,   46,  391,  675,   94,
 1666,  838,  694,  358,  838,   50,  358,  392,  478,   48,
  469,   95, 1634,  365,  269,  514,  395,   71,  514,  477,
   49,  358,  230,  161,  128,  688,  686,  521,  687,  749,
  689,  684,  748,  514,   40,  514,   96,  685,  527,   23,
  725,  859,  270,  521,  639,  271,  521,  521,  398,  521,
  127,   24,   47,  838,  521,   46,  684,  521,  920,  511,
  527,  272,  685,  230,  544,   49,  230,  527,   48,  469,
  521,  527,  365,  252,  396,  252,  521,   44,  527,  521,
  544,  230,  400,  252,  544,   50,  544,  273, 1279,  401,
 1169,  544,  534,  241,  544,  229,  527,  128, 1712,  881,
  511,  527,  880,  511, 1170,   97,  463,  544,  534,  127,
   24,   47,  534,  544,  534,   98,  544,   51,  511,  534,
  511,   52,  534,  465,   49,  116,  527,   45, 1171,  627,
  527,  466,   53,  252,  216,  534,   44,  182,  183,  839,
   99,  534,  839,  627,  534, 1016, 1017, 1046,  521,  518,
 1045,  627, 1757,  195,  123,  123,  128,  684,  100,  475,
 1140,  688,  686,  685,  687,  518,  689,  627,  477,  518,
  521,  518, 1050,  338,  252,  827,  518,  521,   14,  518,
 1162,  521, 1172, 1161,  116,  544,   45,  493,  521, 1433,
  762,  839,  518,  216,  241,  771,  252,  772,  518,  688,
  686,  518,  687,  252,  689, 1180,  521,  544, 1045,  339,
  502,  521,  195,  534,  544, 1300,  241, 1302,  544,  530,
  340,  627,  684,  241, 1184,  544, 1230, 1183,  685, 1229,
 1235,  762,  514, 1234,  762,  534,  521,  252, 1313,  510,
  521, 1312,  534,  544, 1426, 1270,  534, 1161,  544,  762,
  523,  514,  514,  534,  514,  688,  686,  241,  687,  514,
  689, 1460,  514,  684, 1459, 1462,  965,  966, 1459,  685,
  518,  534, 1637,  544,  533,  514,  534,  544,  543, 1737,
 1761,  514, 1459, 1681,  358,  688,  686, 1158,  687,  544,
  689,  358,  518,  548,  358,  361,  362,  363,  358,  518,
  241,  534,  230,  518,  356,  534,  358, 1316,  688,  686,
  518,  687,  600,  689,  604,  608,  634,  511,  356,  606,
  516,  635,  358,  366,  367,  636,  356,  934,  518,  639,
  643,  385,  656,  518,  648,  659,  511,  511,  660,  511,
  661,  662,  356,  890,  511,  894,  358,  511,  898,  900,
  902,  663,  664,  514,  665,  666,  667,  668,  518,  358,
  511,  516,  518,  669,  516,  674,  511,  930,  934,  934,
  934,  934,  934,  946,  934,  514,  358,  675,  681,  516,
  683,  692,  514,  691,  694,  696,  934,  934,  934,  934,
  934,  514,  710,  514,  714,  715,  356,  719,  721,  684,
  722,  241,  723,  358,  726,  685,  728,  727,  738,  494,
  739,  514,  742,  741,  808,  358,  514,  358,  934, 1432,
  934,  776,  751,  241,  752,  775,  777,  782,  253,  788,
  241,  934,  195,  792,  934,  793,  946,  684,  511,  794,
 1317,  688,  686,  685,  687,  514,  689,  795,  798,  934,
  797,  934,  762,  803,  195,  808,  808,  808,  808,  808,
  511,  808,  809,  810,  241,  813,  815,  511,  824,  826,
  827,  835,  836,  808,  808,  808,  808,  837,  511,  875,
 1320,  688,  686,  195,  687,  839,  689,  878,  882,  876,
  914,  886,  887,  684,  925,  929,  511,  820,  946,  685,
  961,  511,  195,  952,  698,  981,  986,  808,  804,  762,
  195,  195,  762,  992,  991,  994, 1007,  195,  754,  762,
  998,  999,  762,  684, 1001, 1008,  762, 1009, 1012,  685,
  511,  762, 1022, 1019,  762,  195, 1028, 1033,  820,  820,
  820,  820,  820, 1035,  820, 1041,  684,  195, 1043,  195,
  762, 1057,  685, 1058, 1060, 1072,  820,  820,  820,  820,
 1117, 1123, 1115, 1120, 1137,  253, 1132, 1135, 1139, 1321,
  688,  686,  195,  687,  762,  689, 1147,  762,  762,  688,
  686, 1166,  687, 1159,  689,  684, 1168,  762,  632,  934,
  820,  934, 1174,  640, 1186, 1189, 1676,  195,  516,  934,
  516, 1209, 1198, 1207,  762,  516,  253,  934,  516,  253,
 1219, 1223, 1226,  934, 1225,  659,  934,  659,  659, 1231,
  659,  516, 1233, 1244,  253, 1240,  762, 1245, 1246,  632,
 1247,  762,  632,  659, 1263,  934,  934, 1051,  659,  934,
 1266, 1267, 1268,  762, 1269,  762,  934,  632,  934,  934,
 1271, 1272,  934, 1277,  934,  934,  934, 1276, 1278,  934,
 1280,  934, 1281,  934, 1288, 1289, 1290, 1291,  934,  934,
  934,  934, 1293, 1294, 1295, 1296,  808, 1297,  808,  684,
 1298,  857, 1299, 1314, 1332,  685,  808,  934,  934, 1335,
  934, 1342, 1350,  934,  808,  934, 1346, 1347, 1348,  516,
  808, 1349, 1351,  808,  934, 1355,  934,  934,  934,  934,
 1358,  934, 1366, 1360,  934,  934, 1364,  525, 1374,  684,
 1378,  516,  808,  808,  934,  685,  808, 1387,  516, 1379,
 1380,  934, 1381,  808, 1382,  808,  808, 1383,  934,  808,
  729,  934, 1391,  808, 1396, 1406,  808, 1414,  808, 1415,
  808, 1419, 1273, 1425, 1445,  808,  808,  934,  808,  820,
 1449,  820,  516,  934, 1455, 1522, 1446, 1523,  934,  820,
 1474,  629, 1525, 1524,  808,  808, 1527,  808, 1530,  934,
  934,  729,  934,  820,  729, 1526,  820, 1456,  934, 1532,
 1533,  808, 1544,  808,  808,  808, 1534, 1548,  808,  729,
 1549,  808,  808, 1550, 1552,  820,  820, 1553,  684,  820,
 1554,  808,  629, 1555,  685,  629,  820,  684,  820,  820,
 1558, 1559,  820,  685, 1560,  808,  820, 1561,  808,  820,
  629,  820, 1562,  820, 1563,  659, 1564, 1565,  820,  820,
 1566,  820,  659,  253,  808,  253, 1567, 1575, 1574, 1588,
  808,  659, 1590,  253,  823,  808, 1592,  820,  820, 1593,
  820,  109, 1597, 1594, 1605,  659,  808,  808, 1595,  808,
 1596,  659,  659, 1598,  820,  808,  820,  820,  820,  659,
 1604,  820, 1606, 1607,  820,  820,  903,  904,  905,  906,
  907,  908,  909,  910,  820,  823,  823,  823,  823,  823,
 1612,  823,  659,  253, 1622, 1627, 1628,  632,  820, 1632,
  632,  820, 1635,  823,  823,  823,  823,  632, 1651, 1672,
  632, 1683, 1698, 1702,  632, 1706, 1718,  820,  659,  632,
  659,  659,  632,  820, 1692, 1694, 1707,  824,  820, 1323,
  688,  686,  659,  687,  253,  689,  659,  823,  632,  820,
  820, 1714,  820, 1459, 1719, 1324,  688,  686,  820,  687,
 1079,  689, 1083, 1689, 1091, 1094,  253, 1099, 1102, 1105,
 1690, 1729,  632,  253, 1731, 1735,  632, 1740,  824,  824,
  824,  824,  824, 1741,  824,  632, 1742, 1681, 1756, 1745,
 1759, 1760,    1,  609,  729,  202,  824,  824,  824,  824,
   28,   30,  632,  362,  148,  270,  617,  253,  268,  659,
   80,  514,  917,  212,  450,  514,  192,  275,  729,  659,
  729,  390,  514,  649,  818,  916,  647,  643,  729,  632,
  824,  645,  193,  659,  659,  659,  659,  659,  659,  280,
  363,  632,  686,  222, 1325,  688,  686,  659,  687,  274,
  689,  685,  317,  680,  687,  324,  659,  659,  659,  659,
  659,  659,  659,  659,  659,  818,  659,  818,  818,  818,
  638,  659,  659,  315,  659,  659,  659,  696,   25,   28,
   36,  114,  399,  818,  818,  818,  818,  390, 1304,  389,
  629,  688,  686,  629,  687,  877,  689,  825, 1264, 1056,
  629, 1262,  224,  629, 1536, 1260, 1253,  629,  512,  557,
  498,  789,  629, 1241, 1188,  629,  823,  818,  823,  729,
 1254,  484,  962, 1630,  729,  996,  823, 1513,  770,  527,
  528,  629, 1326,  688,  686, 1688,  687, 1519,  689,  989,
 1695,  729, 1728,  823, 1693, 1368, 1723, 1754,  729, 1649,
  638, 1529, 1327,  688,  686,  629,  687, 1697,  689,  629,
  536,  817,  823,  823,  518,  509,  823,  368,  629,  774,
  116, 1403,  811,  823, 1034,  823,  823,  476,  684,  823,
 1025,  705,  729,  823,  685,  629,  823,  709,  823,  953,
  823,  967,  948, 1165,  684,  823,  823,  949,  823,  824,
  685,  824,  817,  265,  817,  817,  817, 1626, 1579,  824,
 1734, 1705,  629, 1764,  823,  823,  718,  823,  883, 1284,
  817,  817,  817,  817,  629, 1334,  824, 1128,    0,  637,
    0,  823,    0,  823,  823,  823,    0,    0,  823,   57,
    0,  823,  823,    0,    0,  824,  824,    0,    0,  824,
   58,  823,    0,    0,  817,    0,  824,   59,  824,  824,
    0,    0,  824,    0,    0,  823,  824,    0,  823,  824,
   60,  824,    0,  824,    0,    0,    0,    0,  824,  824,
    0,  824,  483,  684,  823,    0,  818,    0,  818,  685,
  823,    0,    0,    0,    0,  823,  818,  824,  824,    0,
  824,    0,    0,    0,    0,    0,  823,  823,    0,  823,
    0,    0,    0,  818,  824,  823,  824,  824,  824,    0,
    0,  824,    0,  483,  824,  824,  483,    0,    0,  684,
    0,   61,  818,  818,  824,  685,  818,    0,    0,    0,
    0,  483,    0,  818,    0,  818,  818,   62,  824,  818,
    0,  824,    0,  818,    0,    0,  818,    0,  818,    0,
  818,    0,    0,    0,   63,  818,  818,  824,  818,    0,
    0,  684,    0,  824,    0,    0,    0,  685,  824,   64,
    0,    0,    0,   65,  818,  818,   66,  818,    0,  824,
  824,  684,  824,    0,   67,    0,  819,  685,  824,    0,
    0,  818,    0,  818,  818,  818,    0,    0,  818,    0,
    0,  818,  818,   68,    0,    0,    0,    0,  359,    0,
    0,  818,  516,  817,    0,  817, 1328,  688,  686,    0,
  687,    0,  689,  817,    0,  818,    0,  819,  818,  819,
  819,  819, 1450,  688,  686,    0,  687,    0,  689,    0,
  817,    0,    0,    0,  818,  819,  819,  819,  819,    0,
  818,    0,    0,  516,    0,  818,  516,    0,    0,  817,
  817,    0,    0,  817,    0,  360,  818,  818,    0,  818,
  817,  516,  817,  817,    0,  818,  817,    0,    0,  819,
  817,    0,    0,  817,    0,  817,    0,  817,    0,    0,
    0,    0,  817,  817,    0,  817,    0, 1451,  688,  686,
    0,  687,    0,  689,    0,    0,    0,    0,    0,    0,
    0,  817,  817,    0,  817, 1458,  688,  686,    0,  687,
    0,  689,    0,  822,    0,    0,    0,    0,  817,    0,
  817,  817,  817,    0,    0,  817,    0,    0,  817,  817,
    0,    0,    0,    0,    0,    0,    0,    0,  817,    0,
  483,    0,  483,    0,    0,    0,  412,    0,    0,    0,
  483,    0,  817,    0,  822,  817,  822,  822,  822,    0,
  361,  362,  363,  483,  182,  183,    0,    0,    0,    0,
    0,  817,  822,  822,  822,  822,    0,  817,    0,    0,
    0,    0,  817,  364,  365,  415,  416,  417,  366,  367,
  418,  419,    0,  817,  817,    0,  817,    0,  421,  422,
    0,    0,  817,    0,    0,   79,  822,    0,    0,    0,
    0,    0,   80,    0,    0,    0,   81,   82,    0,    0,
    0,    0,    0,    0,    0,   83,    0,    0,    0,    0,
    0,  620,    0,    0,  426,    0,  427,   84,  819,    0,
  819,  483,    0,    0,    0,  684,    0,    0,  819,  429,
    0,  685,    0,    0,  255,    0,    0,    0,    0,    0,
    0,  684,    0,  483,    0,  819,    0,  685,    0,    0,
  483,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  516,    0,  516,    0,  819,  819,    0,    0,  819,    0,
  516,    0,    0,    0,    0,  819,    0,  819,  819,    0,
    0,  819,   85,  516,  483,  819,    0,    0,  819,    0,
  819,    0,  819,    0,    0,    0,    0,  819,  819,   86,
  819,    0,    0,    0,    0,    0,  684,    0,  620,    0,
    0,  426,  685,  427,   87,  180,  819,  819,   88,  819,
    0,    0,    0,    0,  684,    0,  429,    0,    0,   89,
  685,  255,    0,  819,    0,  819,  819,  819,    0,    0,
  819,    0,    0,  819,  819,    0,    0,    0,   90,    0,
    0,    0,    0,  819,    0,  822,  180,  822,    0,  180,
    0,  516,  222,    0,    0,  822,    0,  819,    0,    0,
  819,    0,    0,    0,  180,    0,    0,    0,    0,    0,
    0,    0,  822,  516,    0,    0,  819,    0,    0,    0,
  516,    0,  819,    0,    0,    0,    0,  819,    0,    0,
    0,  822,  822,  222,    0,  822,  222,    0,  819,  819,
    0,  819,  822,    0,  822,  822,    0,  819,  822,    0,
    0,  222,  822,    0,  516,  822,    0,  822,    0,  822,
    0,    0,    0,    0,  822,  822,    0,  822,  402,    0,
    0,  195,    0,    0,    0,    0,    0,  403,    0,    0,
    0,    0,    0,  822,  822,  256,  822,    0,    0,    0,
  657,  404,  657,  657,  616,  657,    0,  359,  405,    0,
  822,    0,  822,  822,  822,    0,    0,  822,  657,    0,
  822,  822,    0,  657,    0,    0,  617,    0,    0,    0,
  822,    0,    0,    0,    0,    0,  256,    0,  406,  256,
  195,    0,    0,    0,  822,    0,    0,  822,    0,    0,
    0,    0,    0,    0,  256,    0,    0,    0,    0,    0,
    0,    0,    0,  822,    0,    0,  407,  408,    0,  822,
    0,    0,    0,    0,  822,  402,    0,    0,  409,    0,
    0,    0,  410,    0,  403,  822,  822,    0,  822,    0,
  618,    0,    0,    0,  822,    0,    0,  620,  404,    0,
  426,    0,  427,    0,  359,  405,    0,    0,    0,    0,
    0,    0,    0,  180,    0,  429,    0,    0,    0,    0,
  255,    0,    0,  617,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  619,  180,  406,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  412,  180,    0,    0,    0,
    0,    0,  180,  407,  408,    0,    0,    0,    0,  361,
  362,  363,  413,  182,  183,  409,    0,    0,    0,  410,
  222,    0,  222,  414,    0,  180,    0,  618,    0,    0,
  222,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,  180,    0,    0,  421,  422,    0,
  423,  424,  425,  180,    0,    0,    0,    0,    0,  180,
  657,    0,    0,    0,    0,    0,  678,  657,    0,    0,
  619,    0,    0,    0,    0,    0,  657,  180,    0,  195,
    0,    0,  411,    0,    0,    0,    0,    0,    0,    0,
  657,    0,  412,    0,    0,    0,  657,  657,    0,    0,
  195,    0,    0,    0,  657,    0,  361,  362,  363,  413,
  182,  183,    0,  256,  180,  256,    0,    0,    0,    0,
  414,  222,  195,  256,    0,    0,    0,  657,  195,  364,
  365,  415,  416,  417,  366,  367,  418,  419,    0,  420,
    0,    0,    0,  222,  421,  422,    0,  423,  424,  425,
  222,  195,    0,  657,    0,  657,  657,    0,    0,    0,
  176,  186,    0,    0,  402,    0,    0,  657,  187,    0,
  195,  657,  428,  403,    0,  426,    0,  427,  195,  195,
    0,    0, 1422, 1423,  222,  195,    0,  404, 1427, 1428,
  429, 1430, 1431,  359,  405,  255,    0,    0,    0, 1435,
 1436, 1437, 1438,  195, 1439, 1440, 1441, 1442, 1443, 1444,
    0,    0,  617,    0,  256,    0,    0,    0,    0,  176,
  186,    0,    0,    0,  406,    0,    0,  187,    0,    0,
    0,    0,    0,    0,  657,    0,  256,    0,    0,    0,
  195,    0,    0,  256,  657,    0,    0,    0,    0,    0,
    0,  195,  407,  408,    0,    0,    0,    0,  657,  657,
  657,  657,  657,  657,  409,    0,    0,    0,  410,    0,
    0,    0,  657,    0,    0,    0,  618,  256,    0,    0,
    0,  657,  657,  657,  657,  657,  657,  657,  657,  657,
    0,  657,    0,    0,    0,    0,  657,  657,    0,  657,
  657,  657,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  428,    0,    0,  426,    0,  427,    0,    0,  619,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  429,
    0,  411,    0,    0,  255,    0,    0,    0,    0,    0,
    0,  412,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,    0,    0,    0,  414,
    0,    0,    0,    0,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
    0,    0, 1067,  421,  422, 1068,  423,  424,  425,  402,
    0,    0,    0,    0,    0,    0,    0,    0,  403,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  176,  186,
  428,    0,  404,  426,    0,  427,  187,    0,  359,  405,
    0,    0,    0,    0,    0,    0,    0,    0,  429,  176,
  186,    0,    0,  255,    0,    0,    0,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  406,
    0,  176,  186,    0,    0,    0,    0,  176,  186,  187,
    0,    0,    0,    0,    0,  187,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  407,  408,  428,
  176,  186,  426,    0,  427,    0,    0,    0,  187,  409,
    0,    0,    0,  410,    0,    0,    0,  429,    0,  176,
  186,    0,  255,    0,    0,    0,    0,  187,  176,  186,
    0,    0,    0,    0,  176,  186,  187,    0,    0,    0,
    0, 1077,  187,    0, 1068,    0,    0,    0,  402,    0,
    0,    0,  176,  186,    0,    0,    0,  403,    0,    0,
  187,    0,    0,    0,    0,    0,    0,    0, 1069,    0,
    0,  404,    0,    0,    0,    0,  411,  359,  405,    0,
    0,    0,    0,    0,    0,    0,  412,    0,    0,  176,
  186,    0,    0,    0,    0,    0,    0,  187,    0,    0,
  361,  362,  363,  413,  182,  183,    0,    0,  406,    0,
    0,    0,    0,    0,  414,    0,    0,    0,    0,    0,
    0,    0,    0,  364,  365,  415,  416,  417,  366,  367,
  418,  419,  763,  420,    0,    0,  407,  408,  421,  422,
    0,  423,  424,  425,    0,    0,    0,    0,  409,    0,
 1081,    0,  410, 1068,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,    0,    0,  403,    0,    0,    0,
    0,    0,    0,  763,    0,    0,  763,    0,  428,    0,
  404,  426,    0,  427,    0,    0,  359,  405,    0,    0,
    0,  763,    0,    0,    0,    0,  429,    0,    0,    0,
    0,  255,    0,    0,    0,    0,    0, 1069,    0,    0,
    0,    0,    0,    0,    0,  411,    0,  406,    0, 1089,
    0,    0, 1068,    0,    0,  412,  402,    0,    0,    0,
    0,    0,    0,    0,    0,  403,    0,    0,    0,  361,
  362,  363,  413,  182,  183,  407,  408,    0,    0,  404,
    0,    0,    0,  414,    1,  359,  405,  409,    0,    0,
    0,  410,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,    0,    0,    2,  421,  422,    0,
  423,  424,  425,    0,    3,    0,  406,  428,    0,    0,
  426,    4,  427,    5,    0,    6,    0,    0,    0,    0,
    7,    0,    0,    0,    0,  429,    0,    8,    0,    0,
  255,    0,    0,    0,  407,  408, 1069,    0,    0,    0,
    0,    9,    0,    0,  411,    0,  409,    0,    0,    0,
  410,    0,   10,    0,  412,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  361,  362,
  363,  413,  182,  183,    0,    0,    0,    0,    0,    0,
    0,    0,  414,    0,    0,    0,    0,    0,    0,    0,
    0,  364,  365,  415,  416,  417,  366,  367,  418,  419,
    0,  420,    0,    0,    0, 1069,  421,  422,    0,  423,
  424,  425,    0,  411,  763,    0,    0,    0, 1092,   11,
    0, 1068,    0,  412,    0,  402,   12,    0,    0,   13,
    0,   14,   15,    0,  403,    0,    0,  361,  362,  363,
  413,  182,  183,    0,    0,    0,    0,    0,  404,    0,
    0,  414,    0,    0,  359,  405,   16,    0,    0,    0,
  364,  365,  415,  416,  417,  366,  367,  418,  419,    0,
  420,  763,    0,    0,  763,  421,  422,    0,  423,  424,
  425,  763,    0,    0,  763,  406,  428,    0,  763,  426,
    0,  427,    0,  763,    0,    0,  763,    0,    0,    0,
    0,    0,    0,    0,  429,   17,    0,    0,    0,  255,
    0,    0,  763,  407,  408,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  409,    0, 1097,    0,  410,
 1068,    0,    0,    0,  402,    0,  763,    0,    0,  763,
  763,    0,    0,  403,    0,    0,    0,    0,    0,  763,
    0,    0,    0,    0,    0,  428,    0,  404,  426,    0,
  427,    0,    0,  359,  405,    0,  763,    0,    0,    0,
    0,    0,    0,  429,    0,    0,    0,    0,  255,    0,
    0,    0,    0,    0, 1069,    0,    0,    0,  763,    0,
    0,    0,  411,  763,  406,    0,    0,    0,    0,    0,
    0,    0,  412,    0,    0,  763,    0,  763,    0,    0,
    0,    0,    0,    0,    0,    0,  361,  362,  363,  413,
  182,  183,  407,  408,    0,    0,    0,    0,    0,    0,
  414,    0,    0,    0,  409,    0,    0,    0,  410,  364,
  365,  415,  416,  417,  366,  367,  418,  419,    0,  420,
    0,  138,    0,    0,  421,  422,    0,  423,  424,  425,
  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
  149,  150,  151,  152,  153,  154,    0,    0,  155,  156,
  157,  158,    0,  159,    0,    0,  160,  161,    0,    0,
    0,    0,    0, 1069,    0,    0,    0,    0,    0,    0,
    0,  411,    0,    0,    0,    0, 1100,    0,    0, 1068,
    0,  412,    0,  402,    0,    0,    0,    0,    0,    0,
    0,    0,  403,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,  404,    0,    0,  414,
    0,    0,  359,  405,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425,    0,
    0,    0,    0,  406,    0, 1103,    0,    0, 1068,    0,
    0,  428,  402,  456,  426,    0,  427,    0,    0,    0,
    0,  403,    0,    0,    0,    0,    0,    0,    0,  429,
    0,  407,  408,    0,  255,  404,    0,    0,    0,    0,
    0,  359,  405,  409,    0,    0,    0,  410,    0,    0,
    0,  558,    0,    0,    0,  559,    0,  428,    0,    0,
  426,    0,  427,  754,    0,    0,    0,    0,    0,    0,
    0,    0,  406,    0,  560,  429,    0,  561,    0,    0,
  255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  407,  408, 1069,    0,    0,    0,    0,    0,    0,    0,
  411,    0,  409,    0,    0,    0,  410,    0,  562,    0,
  412,    0,    0,    0,  563,  564,  565,    0,  566,  567,
  568,    0,  569,    0,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,    0,    0,    0,  414,    0,
 1366,    0,  570,    0,  571,    0,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,    0,
    0, 1069,  421,  422,    0,  423,  424,  425,    0,  411,
    0,    6,    0,    0,    0,  572,    0,    0, 1599,  412,
    0,    0, 1485, 1486,    0, 1487,    0,    0, 1488,    0,
    0,    0,  573,  361,  362,  363,  413,  182,  183, 1366,
    0,    0, 1489,    0,    0,    0,    0,  414, 1490,    0,
    0,    0,    0,    0,  574,    0,  364,  365,  415,  416,
  417,  366,  367,  418,  419,    0,  420,    0,  402,  187,
    6,  421,  422,    0,  423,  424,  425,  403,    0,    0,
    0, 1485, 1486,    0, 1487,    0,    0, 1488,    0,  575,
  576,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0, 1489,    0,    0,    0,    0,  577, 1490, 1491,    0,
    0,    0,    0,  928,  402,  928,  928,    0,  928,    0,
    0,    0,    0,  403,    0,    0,    0,   14,  406,    0,
    0,  928,    0,    0,    0,    0,  928,  404,    0,    0,
    0,    0, 1492,  359,  405,    0,    0,    0,    0,    0,
    0,    0,   16,    0,  360,    0,  407,  408,    0,  659,
    0, 1600,  659, 1493,  659,    0,    0, 1491,  409,  828,
  477,    0,  410,  559,  406,    0,    0,  659,    0,    0,
    0,    0,  659,    0,    0,    0,   14,    0,  829,    0,
    0,    0,  560,    0,    0,  561,    0,    0,    0, 1494,
  360, 1492,  407,  408,    0,    0,    0,    0,    0,    0,
    0,   16,    0,    0,  409,    0,    0,    0,  410,    0,
    0,    0, 1493,    0,    0,    0,    0,    0,    0,  477,
    0,    0,    0,    0,    0,  411,  562,    0,    0,    0,
    0,    0,  563,  564,  565,  412,  566,  567,  568,    0,
  569,    0,    0,    0,    0,    0,    0,    0, 1494,  361,
  362,  363,  413,  182,  183,  678,    0,    0,    0,    0,
  570,    0,  571,  414,    0,    0,    0,    0,    0,    0,
    0,  411,  364,  365,  415,  416,  417,  366,  367,  418,
  419,  412,  420,    0,    0,    0,    0,  421,  422,    0,
  423,  424,  425,  572,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,    0,    0,    0,  414,
  573,    0,    0,    0,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
  928,    0,  574,  421,  422,    0,  423,  424,  425,  928,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  928,    0,    0,    0,    0,    0,  928,
  928,    0,    0,    0,    0,    0,    0,  575,  576,  659,
    0,    0,    0,    0,    0,  428,  659,    0,  426,    0,
  427,    0,    0,    0,  577,  659,    0,    0,    0,    0,
  928,    0,    0,  429,    0,    0,    0,    0,  255,  659,
    0,    0,    0,    0,    0,  659,  659,    0,    0,    0,
    0,    0,    0,  659,    0,    0,  928,    0,  928,  928,
    0,  428,    0,    0,  426,    0,  427,    0,    0,    0,
  928,  558,    0,    0,  928,  559,  659,    0,    0,  429,
    0,    0,    0,    0,  255,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  560,    0,    0,  561,    0,    0,
    0,    0,    0,    0,  659,  659,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  659,    0,    0,    0,
  659,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  928,  562,    0,
    0,    0,    0,    0,  563,  564,  565,  928,  566,  567,
  568,    0,  569,    0,    0,    0,    0,    0,    0,    0,
    0,  928,  928,  928,  928,  928,  928,    0,    0,    0,
    0,    0,  570,    0,  571,  928,    0,    0,    0,    0,
    0,    0,    0,  659,  928,  928,  928,  928,  928,  928,
  928,  928,  928,  659,  928,    0,    0,    0,    0,  928,
  928,    0,  928,  928,  928,  572,    0,  659,  659,  659,
  659,  659,  659,    0,    0,    0,    0,    0,    0,    0,
    0,  659,  573,    0,    0,    0,    0,    0,    0,    0,
  659,  659,  659,  659,  659,  659,  659,  659,  659,    0,
  659,    0,  402,    0,  574,  659,  659,    0,  659,  659,
  659,  403,    0,    0,    0,    0,    0,    0,    0,  187,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
    0,  359,  405,    0,    0,    0,    0,    0,    0,  575,
  576,    0,    0,    0,    0,    0,    0,  428,  402,    0,
  426,    0,  427,    0,    0,    0,  577,  403,    0,    0,
    0,    0,  406,    0,    0,  429,    0,    0,    0,    0,
  255,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  407,  408,    0,  428,  926,    0,  426,    0,  427,    0,
    0,    0,  409,  220,    0,    0,  410,  220,  406,    0,
    0,  429,    0,    0,    0,    0,  255,    0,    0,    0,
    0,    0,  220,    0,    0,    0,  220,    0,    0,  220,
    0,    0,    0,    0,    0,    0,  407,  408,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  409,    0,
    0,    0,  410,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  411,
  220,    0,    0,    0,    0,    0,  220,  220,  220,  412,
  220,  220,  220,    0,  220,    0,    0,  670,    0,    0,
    0,    0,    0,  361,  362,  363,  413,  182,  183,  678,
    0,    0,    0,    0,  220,    0,  220,  414,    0,    0,
    0,    0,    0,    0,    0,  411,  364,  365,  415,  416,
  417,  366,  367,  418,  419,  412,  420,    0,    0,    0,
    0,  421,  422,    0,  423,  424,  425,  220,    0,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,    0,
    0,    0,    0,  414,  220,    0,    0,    0,    0,    0,
    0,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,  402,    0,  220,  421,  422,    0,
  423,  424,  425,  403,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,
    0,    0,    0,  359,  405,    0,    0,    0,    0,    0,
    0,  220,  220,    0,    0,    0,    0,    0,    0,  428,
  402,    0,  426,    0,  427,    0,    0,    0,  220,  403,
    0,    0,    0,    0,  406,    0,    0,  429,    0,    0,
    0,    0,  255,  404,    0,    0,    0,    0,    0,  359,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,  407,  408,    0,  428,    0,    0,  426,    0,
  427,    0,    0,    0,  409,  558,    0,    0,  410,  559,
  406,    0,    0,  429,    0,    0,    0,    0,  255,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  560,    0,
    0,  561,    0,    0,    0,    0,    0,    0,  407,  408,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409,    0,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  411,  562,    0,    0,    0,    0,    0,  563,  564,
  565,  412,  566,  567,  568,    0,  569,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,  570,    0,  571,  414,
    0,    0,    0,    0,    0,    0,    0,  411,  364,  365,
  415,  416,  417,  366,  367,  418,  419,  412,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425,  572,
    0,  361,  362,  363,  413,  182,  183,    0,    0,    0,
    0,    0,    0,    0,    0,  414,  573,    0,    0,    0,
    0,    0,    0,    0,  364,  365,  415,  416,  417,  366,
  367,  418,  419,    0,  420,    0,  402,    0,  574,  421,
  422,    0,  423,  424,  425,  403,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  404,
    0,    0,    0,    0,    0,  359,  405,    0,    0,    0,
    0,    0,    0,  575,  576,    0,    0,    0,    0,    0,
    0,  428,  402,    0,  426,    0,  427,    0,    0,    0,
  577,  403,    0,    0,    0,    0,  406,    0,    0,  429,
    0,    0,    0,    0,  255,  404,    0,    0,    0,    0,
    0,  359,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  407,  408,    0, 1673,    0,    0,
  426,    0,  427,    0,    0,    0,  409,  133,    0,    0,
  410,  133,  406,    0,    0,  429,    0,    0,    0,    0,
  255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  133,    0,    0,  133,    0,    0,    0,    0,    0,    0,
  407,  408,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  409,    0,    0,    0,  410,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  411,  133,    0,    0,    0,    0,    0,
  133,  133,  133,  412,  133,  133,  133,    0,  133,    0,
    0,    0,    0,    0, 1095,    0,    0,  361,  362,  363,
  413,  182,  183, 1273,    0,    0,    0,    0,  133,    0,
  133,  414,    0,    0,    0,    0,    0,    0,    0,  411,
  364,  365,  415,  416,  417,  366,  367,  418,  419,  412,
  420,    0,    0,    0,    0,  421,  422,    0,  423,  424,
  425,  133,    0,  361,  362,  363,  413,  182,  183,    0,
    0,    0,    0,    0,    0,    0,    0,  414,  133,    0,
    0,    0,    0,    0,    0,    0,  364,  365,  415,  416,
  417,  366,  367,  418,  419,    0,  420,    0,  402,    0,
  133,  421,  422,    0,  423,  424,  425,  403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0,    0,    0,    0,    0,  133,  133,    0,    0,    0,
    0,    0,    0,  428,  402,    0,  426,    0,  427,    0,
    0,    0,  133,  403,    0,    0,    0,    0,  406,    0,
    0,  429,    0,    0,    0,    0,  255,  404,    0,    0,
    0,    0,    0,  359,  405,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  407,  408,    0,  928,
    0,    0,  928,    0,  928,    0,    0,    0,  409,    0,
    0,    0,  410,    0,  406,    0,    0,  928,    0,    0,
    0,    0,  928,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,  407,  408,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  409,    0,    0,    0,  410,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  412,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1286,    0,    0,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,    0,
    0,    0,    0,  414,    0,    0,    0,    0,    0,    0,
    0,  411,  364,  365,  415,  416,  417,  366,  367,  418,
  419,  412,  420,    0,    0,    0,    0,  421,  422,    0,
  423,  424,  425,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,  787,    0,    0,    0,    0,    0,  414,
    0,    0,    0,    0,  766,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
  402,    0,    0,  421,  422,    0,  423,  424,  425,  403,
    0,    0,    0,    0,  787,    0,    0,  787,    0,    0,
    0,    0,    0,  404,    0,  766,    0,    0,  766,  359,
  405,    0,  787,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  766,    0,    0,  928,    0,    0,    0,
    0,    0,    0,    0,    0,  928,    0,    0,    0,    0,
  406,  764,    0,    0,    0,    0,    0,  765,    0,  928,
    0,    0,    0,    0,    0,  928,  928,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  407,  408,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409,    0,  764,    0,  410,  764,  928,    0,  765,    0,
    0,  765,    0,    0,    0,    0,    0,    0,    0,    0,
  764,    0,    0,    0,    0,    0,  765,    0,    0,    0,
    0,    0,    0,    0,  928,  928,    0,    0,    0,    0,
    0,    0,    0,    0,  795,    0,  928,    0,    0,    0,
  928,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  412,    0,    0,
    0,    0,    0,    0,    0,  795,    0,    0,  795,    0,
    0,  361,  362,  363,  413,  182,  183,    0,    0,    0,
    0,    0,    0,  795,    0,  414,    0,    0,    0,    0,
    0,    0,    0,  928,  364,  365,  415,  416,  417,  366,
  367,  418,  419,  928,  420,    0,    0,    0,  759,  421,
  422,    0,  423,  424,  425,  787,    0,  928,  928,  928,
  928,  928,  928,    0,    0,    0,  766,    0,    0,    0,
    0,  928,    0,    0,    0,    0,    0,    0,    0,    0,
  928,  928,  928,  928,  928,  928,  928,  928,  928,  759,
  928,    0,  759,    0,    0,  928,  928,    0,  928,  928,
  928,    0,    0,    0,    0,    0,    0,  759,    0,    0,
    0,  760,  787,    0,    0,  787,    0,    0,    0,    0,
    0,    0,  787,  766,    0,  787,  766,    0,    0,  787,
    0,    0,    0,  766,  787,    0,  766,  787,    0,    0,
  766,    0,    0,  764,    0,  766,    0,    0,  766,  765,
    0,    0,  760,  787,    0,  760,    0,    0,    0,    0,
    0,  761,    0,    0,  766,    0,    0,    0,    0,    0,
  760,    0,    0,    0,    0,    0,    0,  787,    0,    0,
  787,  787,    0,    0,    0,    0,    0,    0,  766,    0,
  787,  766,  766,    0,  794,    0,    0,    0,    0,    0,
  764,  766,  761,  764,    0,  761,  765,  787,    0,  765,
  764,    0,    0,  764,    0,    0,  765,  764,  766,  765,
  761,    0,  764,  765,    0,  764,  795,    0,  765,  787,
    0,  765,    0,    0,  787,  794,    0,    0,  794,    0,
  766,  764,    0,    0,    0,  766,  787,  765,  787,    0,
    0,    0,    0,  794,    0,    0,    0,  766,    0,  766,
    0,    0,    0,    0,    0,  764,    0,    0,  764,  764,
    0,  765,    0,    0,  765,  765,    0,    0,  764,    0,
    0,    0,    0,  795,  765,    0,  795,    0,  788,    0,
    0,    0,    0,  795,    0,  764,  795,    0,    0,    0,
  795,  765,    0,    0,    0,  795,    0,    0,  795,  796,
  759,    0,    0,    0,    0,    0,    0,  764,    0,    0,
    0,    0,  764,  765,  795,    0,    0,    0,  765,  788,
    0,    0,  788,    0,  764,    0,  764,    0,  797,    0,
  765,    0,  765,    0,    0,    0,    0,  788,  795,    0,
  796,  795,  795,  796,    0,    0,    0,    0,    0,    0,
    0,  795,    0,    0,    0,    0,    0,  759,  796,    0,
  759,    0,  785,  760,    0,    0,    0,  759,  795,  797,
  759,    0,  797,    0,  759,    0,    0,    0,    0,  759,
    0,    0,  759,    0,    0,    0,    0,  797,    0,    0,
  795,    0,    0,    0,    0,  795,    0,    0,  759,    0,
    0,    0,    0,  785,    0,    0,  785,  795,    0,  795,
    0,    0,    0,  761,    0,    0,    0,    0,    0,    0,
  760,  785,  759,  760,    0,  759,  759,    0,    0,    0,
  760,    0,    0,  760,    0,  759,    0,  760,    0,    0,
    0,    0,  760,    0,    0,  760,  794,    0,    0,    0,
    0,    0,  759,    0,    0,    0,    0,    0,  789,    0,
    0,  760,    0,    0,    0,    0,    0,    0,    0,    0,
  761,    0,    0,  761,  759,    0,    0,    0,    0,  759,
  761,    0,    0,  761,    0,  760,    0,  761,  760,  760,
    0,  759,  761,  759,    0,  761,    0,    0,  760,  789,
    0,    0,  789,  794,    0,    0,  794,    0,  798,    0,
    0,  761,    0,  794,    0,  760,  794,  789,    0,    0,
  794,    0,    0,    0,    0,  794,    0,    0,  794,    0,
    0,    0,    0,    0,    0,  761,    0,  760,  761,  761,
  788,    0,  760,    0,  794,    0,    0,    0,  761,  798,
    0,    0,  798,    0,  760,    0,  760,    0,    0,    0,
    0,  796,    0,    0,    0,  761,    0,  798,  794,    0,
    0,  794,  794,    0,    0,    0,    0,    0,    0,    0,
    0,  794,    0,    0,    0,  786,    0,  761,    0,    0,
  797,    0,  761,    0,    0,    0,    0,  788,  794,    0,
  788,    0,    0,    0,  761,    0,  761,  788,    0,    0,
  788,    0,    0,    0,  788,    0,    0,    0,  796,  788,
  794,  796,  788,    0,  785,  794,  786,    0,  796,  786,
    0,  796,    0,    0,    0,  796,    0,  794,  788,  794,
  796,    0,    0,  796,  786,    0,    0,  797,    0,    0,
  797,    0,    0,    0,    0,    0,    0,  797,    0,  796,
  797,    0,  788,    0,  797,  788,  788,    0,    0,  797,
    0,    0,  797,    0,    0,  788,    0,    0,    0,    0,
    0,  785,    0,  796,  785,    0,  796,  796,  797,    0,
    0,  785,  788,    0,  785,    0,  796,    0,  785,    0,
    0,    0,    0,  785,    0,    0,  785,    0,    0,    0,
    0,    0,  797,  796,  788,  797,  797,    0,    0,  788,
  789,    0,  785,    0,    0,  797,    0,  790,    0,    0,
    0,  788,    0,  788,    0,  796,    0,    0,  745,    0,
  796,    0,  797,    0,    0,    0,  785,    0,    0,  785,
  785,    0,  796,    0,  796,    0,    0,    0,    0,  785,
    0,    0,    0,    0,  797,    0,    0,    0,  790,  797,
  798,  790,    0,    0,    0,    0,  785,  789,    0,  745,
  789,  797,  745,  797,    0,    0,  790,  789,    0,    0,
  789,    0,    0,    0,  789,    0,    0,  745,  785,  789,
    0,    0,  789,  785,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  785,    0,  785,  789,    0,
    0,    0,    0,    0,    0,    0,    0,  798,    0,    0,
  798,    0,    0,    0,    0,    0,    0,  798,    0,    0,
  798,    0,  789,    0,  798,  789,  789,  786,    0,  798,
    0,    0,  798,    0,    0,  789,    0,    0,    0,    0,
    0,  924,  688,  686,    0,  687,    0,  689,  798,    0,
    0,    0,  789,    0,    0,    0,    0,    0,    0,    0,
  855,  854,  856,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  798,    0,  789,  798,  798,    0,    0,  789,
    0,    0,    0,    0,  786,  798,    0,  786,    0,    0,
    0,  789,    0,  789,  786,    0,    0,  786,    0,    0,
    0,  786,  798,    0,    0,    0,  786,    0,    0,  786,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  798,  786,    0,    0,    0,  798,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  798,    0,  798,    0,  688,  686,    0,  687,  786,
  689,    0,  786,  786,    0,    0,    0,    0,    0,    0,
    0,    0,  786,  855,  854,  856,    0,    0,    0,  790,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  786,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  220,    0,    0,    0,
  220,  786,    0,    0,    0,    0,  786,    0,    0,    0,
    0,    0,    0,    0,    0,  220,    0,    0,  786,  220,
  786,    0,  220,    0,    0,    0,  790,    0,    0,  790,
    0,    0,    0,    0,    0,    0,  790,  745,    0,  790,
  745,    0,    0,  790,    0,    0,    0,  745,  790,    0,
  745,  790,    0,    0,  745,    0,    0,    0,    0,  745,
    0,    0,  745,  220,    0,    0,    0,  790,    0,  220,
  220,  220,  842,  220,  220,  220,    0,  220,  745,    0,
  684,    0,    0,    0,    0,    0,  685,    0,    0,  843,
    0,  790,    0,    0,  790,  790,    0,  220,    0,  220,
    0,    0,  745,    0,  790,  745,  745,    0,    0,    0,
    0,    0,    0,    0,    0,  745,    0,    0,    0,    0,
    0,  790,    0,    0,    0,  844,    0,    0,    0,    0,
  220,    0,  745,    0,  845,   79,    0,    0,    0,    0,
    0,    0,  846,  790,    0,    0,    0,  220,  790,    0,
    0,    0,    0,    0,  745,    0,    0,    0,    0,  745,
  790,  847,  790,  848,  309,    0,    0,    0,    0,  220,
    0,  745, 1366,  745,    0,  842,    0,  849,    0,  850,
  851,  852,    0,  684,    0,    0,    0,    0,    0,  685,
    0,    0,  843,    0,    0,  309,    0,    0,    0,    0,
    0,    0,  309,    6,  220,  220,  309,  309,    0,  309,
 1484,    0,  309,    0, 1485, 1486,    0, 1487,    0,    0,
 1488,  220,    0,    0,    0,    0,  309,    0,  844,    0,
  853,    0,  309,    0, 1489,    0,    0,  845,    0,    0,
 1490,    0,    0,    0,    0,  846,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  847,    0,  848,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  849,    0,  850,  851,  852,    0,    0,    0,    0,    0,
    0,    0,  309,    0,    0,    0,    0,    0,    0,    0,
 1491,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  309,    0,    0,    0,    0,    0,    0,    0,   14,
    0,    0,    0,    0,    0,    0,  309,    0,    0,    0,
    0,    0,    0,  853, 1492,    0,  309,    0,    0,    0,
    0,    0,    0,    0,   16,  309,    0,  309,    0,    0,
    0,    0,    0,    0,  309, 1493,    0,  534,    0,    0,
    0,    0,  477,    0,    0,    0,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,    0,  309,  155,  156,  157,  158,  446,  159,
    0, 1494,  160,  161,    0,    0,    0,    0,  446,  446,
  446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
  446,  446,  446,    0,    0,  446,  446,  446,  446,    0,
  446,    0,    0,  446,  446,
};
static short yycheck[] = {                                      16,
   58,   49,    4,  128,    4,   50,   59,   99,   57,    0,
  481,  292,  117,  118,   58,   51,  328,   62,  336,  233,
  336,  304,  117,  118,  618,  675,  620,   80,   64,  488,
  723,  332,  517,  994,  661,  520,   84,  306,  233,   65,
   85,  526,   67,  678,   68,  526,  463,   92,  135,  987,
  108,  731,  110,  923,  241,  354,  994,  392,  987, 1166,
  987,   78,   88,  250,   89,  994,   90,  994,  263,  612,
   87,  987,   83,  109,  995, 1206,  670,  342,  994,   63,
  656,   45,    0,   40,  129, 1006,  178,   40,  790,  940,
  605,   40,  719,    0,  130,  606, 1048,   44,    0,  283,
  299,  822,   86,   44,    0,   45,  131,  691, 1029,   58,
    0,  122,   40,   44,  206,   41,  165,   40,   44,    0,
   44,    0, 1340,   41, 1047,  823,   41, 1122,   41,   59,
 1256,    0,   44,   44,   44,   44, 1412,  728,  233,   41,
  763,   59,   44,  192,  274,   59,   41,   91,    0,   41,
   44,   41,   59,   61,   44,  369,   40,   59,  283,   61,
   40,    0,   45,   59,    0,   40,   42,  292,   42,   59,
  288, 1350,    0,   45,  369,   44,  398,  235,   59,   63,
   59, 1023,  233, 1225,   45,    0,    0,   44,   42,    0,
   59,  503,  504,  505,  506,  496,   58,  384,  290,   40,
  260,  264,   41,  239, 1350,  260,  293,   59,  526,  273,
  526,  722,  248, 1350,   63,  287, 1350, 1572,  483,  267,
   59,  288,   63,   59,  695,  283,   12,  284, 1354, 1181,
   41,   59,   40,   44,  356,  271,    0,   45,   41,   16,
  751,   44,   12,  262,   59,   59,  529,  305,   59,  760,
   61, 1042,  553,  339,  312,  882,  314,    0,  316,  558,
    0,  319,    0,  857,  858,  963,  248,  392,    0,  388,
  456,    0, 1204,  444,  369, 1236,  265,  341,  357,  321,
  329,    0,  331,    0,  257,  264,  321,    0,  257,  378,
  461,    0,  777,  338,  302,   59,  579,  346, 1236,  875,
 1221,   78,  350,   41,  815, 1660,  393, 1236,  197, 1236,
  886,  887,  348,  339,  303,  340,   59, 1168,  369,   59,
 1236,   59,  441,   45,  918,    0,    0,   59,   41,  115,
   59,   44,  285,  277,  392,   44,  406,  467,  383, 1615,
   59,   63,   59,  461,  380,  115,   59, 1389, 1703,  338,
   59,  430, 1222,  398,  354,  391,  258,  443,  418,  395,
  449,    0,  335,  418,  400,   44,  335,   41,  387,  254,
  264,  493,  274,  258,  264,  998,  999, 1012,  263,  258,
 1350,  798,   41,  440,   59,   59,  260,  457, 1179,  269,
  462,  463,  986,  301,  461,  305, 1575,  286,  461,  301,
 1242,  319,  437, 1621,   41,  307,  258,   44,  310,  321,
  321,  329,   41, 1539,  332,  310,  329,    0,  400,  332,
   59, 1123,   59,  341,    0,  639, 1049,  319,  307, 1575,
  304,  321,    0,  412,    0,  443,  264,  659, 1575, 1371,
  545, 1575, 1363,  297,  639,  726, 1367,  258, 1369,  264,
  961, 1446,  501,  384,    0,  307,  739, 1409, 1049,  742,
  329,  648,  461,  332,  656,   41,  661,  278,  526,  280,
  388,  274,  395,  756,  285,  344,   59,  288,   44,  397,
  319,  411,  397,   59,  397, 1408,  412,  368, 1072, 1410,
  301,   59,  432,   59, 1005,  459,  307,  411, 1349,  548,
  783,  696,  341, 1183,  461,  597,  453,  310,  461, 1159,
  412, 1054,  461,   59,  455,  329, 1166,  419,  332,  459,
    0, 1652,  486,  441,  719, 1040, 1633, 1248,  397, 1231,
 1041,  455,  716,  461,  441,  437,  835,  455,  423,  738,
  419,  426,  427,  428,  639,  880,  604,  812,  455,  388,
  459, 1249,  601,  602, 1424, 1476, 1132,  826,  558,  455,
 1481,   41,  546,  453,   44,  467, 1673,  419,  379,  471,
  398,  461,  441,  448,  410,  459,  459, 1419,  461,   59,
  437,  319,  640,  397,  453,  461,  455,  459,  639,  329,
  401,  716,  332, 1384,  332, 1189,  701,  408,  459,  461,
 1521,  726,  441,  341,  368, 1575,  319,  461,  419,  412,
  459,  613,  341,  613,  659, 1209, 1407,  349,  459,  332,
  329, 1542,  341,  332,  432,  264,  437,  441,  341,  734,
  735,  442,  349,  262,  523,  344,    0,    0, 1273,  453,
  319,  455,   40,  403,  319,  319,    0,   45,   41,    0,
  388,  459,  663,  309,  397,   41,  268,  397,  716,  397,
  471,    0,  974,  721,  467,   63,  341,  341, 1629,  265,
  728,  308,  309,  332,  710,  388,  712,  864, 1358,  302,
  867,  730,  731,  875,  397, 1312,   41,  882,  397,    0,
  748, 1629,    0, 1614,  886,   59,   59, 1618,  441,   41,
 1629,  441, 1629,  441,  593,   59,  273,  303,   59,  992,
  432,   41,  455, 1629,  388,  455,  339,  455,  776,  777,
   59, 1004,  262,  397, 1115,  260, 1117,    0,  441, 1655,
   41, 1043,  441,  302,    0,  620, 1247,  459,  397,  317,
  318, 1662,  455,  319,  453, 1028,  455,   44,   59,  332,
  837,   59,  839,  737,  366,  880,  322, 1351,  387,  398,
    0,  262,   59,  329,  258,  341,  332,  441,   41,  304,
  336,   44, 1698,  987,  411,  343,  661,  813,  344,  664,
  994,  455,  782, 1052,  669,    0,   59,    0,  824,  674,
  675,  775,  987,   59,  360,  795,  452,  343,  683,  994,
  685,  686,  687,  688,  689, 1731,  691,   59,    0, 1459,
  378,  696,  388,  307,  397,  452, 1623, 1234,  384,   59,
  865,  397,  880, 1240,  808,  809,  810,  461,   41,    0,
  284,  397,  378,    0,  719,  835,  461, 1318,  406,  319,
  866,  409,  322,  868,   59,  869,   59,  387,  414,  329,
    0, 1657,  332,  419,    0, 1665,  336,  425,  441,    0,
  406,  341,  320,  409,  344,  441, 1135,   59,    0,  262,
   41,    0,  455,   44,  443,  441,  262,   44,  329,  425,
  360, 1574,  461,  451,  406,    0,  387,  453,   59,  455,
 1696,    0,   59, 1700,  406,  259,  436,    0,  296,  461,
  264,  264,  301,  425,  384,  451,  270,  262,  388,   59,
  264, 1370,   41,   59,  461,   44,    0,  397,   59,  410,
  262, 1026, 1732, 1314, 1730,  419, 1733,   59,   45,    0,
   59,  385,  262, 1359,  414,  436, 1219,  277, 1397,  278,
 1750,  280, 1748,  401,   59,  457,   63,   41,   42,   43,
   59,   45, 1253,   47,  353,  353,   59,  842,  843,  844,
  261,  441,  847,  848,  849,    0,  851,  852,  853,  854,
  855,  856, 1255,  453,  280,   59,   44,   42,    0, 1573,
  286,  461,   47, 1633,  442, 1411,  440, 1045,   59,   44,
 1461, 1049,  343,  444,  387,    0, 1590,  882, 1483, 1593,
 1318,  387, 1318,  457,  889,  890,  346,  892,  319,  894,
  461,  319,  897,  898,  899,  900,  901,  902, 1020,  260,
 1020,  332, 1236, 1673,   59,   93, 1121, 1122, 1123,  914,
  341,  916,  387,  341,  398,  398,   41,   59,   93,   44,
  379, 1236, 1167, 1355,  398,  387,  319,  461,  326,  264,
 1199, 1035,    0,    0,   59,  406,  329,  387,  409,  332,
  458,  459,  460,  304,  462,  463,    0, 1051,  341, 1350,
  404,  344,  264, 1057,  425,  341,    0,  388,  308,  309,
 1185,    0, 1187,  481,  482,    0,  397,  421,  486,  487,
 1373,  262,   40,   41,   41,    0,   44,   44,  265,  461,
  451, 1250, 1149,  343,  302, 1152,  319,  258,  308,  309,
   44,   59,   59,   61,  264,  388,  329, 1312, 1502,  332,
   44, 1121, 1122,  264,  397,   59,   41,  263,  341,   44,
  441, 1414,  264,  272, 1183,   59,  303,  349,  378,    0,
   59,  339, 1613,   91,   59,  459, 1251,  459,  319,  264,
  289,  322,  319,  431,   59,  418,  307,  461,  329, 1207,
  438,  332,  398, 1757, 1148,  336,  406,  259,  441,  409,
  341,   44,  486,  344,  341,  388,  403,  313,  270,  296,
  453,  435,  445,  398,  397,  425,  280, 1072,  324,  360,
    0, 1386,  286, 1664,  278,  334,  280,  343,   59, 1084,
 1085,  437, 1087, 1088, 1353,  323,  398,  461,  279,  338,
 1095,  451,  378,  384, 1263,  280,  387,  388, 1267,  446,
   93,  286,  452,  322,  363, 1350,  397, 1229,  441, 1229,
  301,   41,  378,  259,   44,  471,  353,  336,  278, 1597,
  453, 1366,  459,  414,  270,  443,   44,    0,  398,   59,
  462,  463,  452,  419, 1139, 1538,  278,  398,  280,  330,
  406,  360, 1147,  409, 1149,  436,  398, 1152,  419, 1154,
  441,  260,  344, 1158, 1159, 1160, 1161, 1635,  349,  425,
  320, 1166,  453,  398,  455, 1332,  437,  358,   41, 1336,
  323,  430,  428,  364, 1575,   93,  279,  369,   42,   43,
  466,   45, 1686,   47,  260,  451,   59, 1365, 1366, 1358,
  258,  382,    0,  302,  319,  414, 1597, 1202,  301,    0,
  471, 1365,  349, 1681,  329,  314,  274,  332,  461,  277,
  278,  358,  280,  461, 1718, 1719,  341,  285, 1374,  344,
  288,  458,  459,  460,  260,  462,  463,  330,  304,    0,
  339, 1446,  260,  301, 1635,  427, 1714,  402, 1742,  307,
  279,  401,  310,    0,  481,  482,  349,  494,  495,  486,
  487,   59, 1756, 1478,  403,  358, 1635, 1502,   59, 1528,
 1738,  364,  301,  388,  279, 1270,  302,  357, 1537,   40,
   41,  338,  397,   44, 1279,  319,  304,  260,  314,  382,
 1681, 1286,  442,    0,   41,  384,  435,   44,   59, 1456,
   61,  330,  328,   42,   43, 1629,   45,  341,   47,  408,
   40,  450,   59,  339,  394,  384,  396, 1312, 1520,  418,
  349,  379, 1485, 1714, 1629,  330,  441,  384,   44,  358,
   91,  304,  344,  386, 1502,  364, 1446, 1332,  453,  419,
 1575, 1336, 1452,  401,  443, 1714,  355, 1738,  258,    0,
  408,  261,   59,  382,  412,  329,  384,  369,  278,  364,
  280,  419, 1597,    0,  444,  285,    0,  384,  288, 1738,
 1516,  495,   41,   42,   43,    0,   45,  382,   47,  437,
  322,  301,  408,  338,  442, 1544,    0, 1488,  692, 1548,
   41, 1386,  418,   44,  336,    0,  419,  307,   42,   43,
 1635,   45,  353,   47,  302,  338, 1608,  338,   59,  467,
   61,  715,  461,  471,    0,  427,   41,  443,  360,   44,
  375,  418,   59,  727,  274,   59,  280,   41,  379,  403,
   44, 1586,  286,  388,   59,  461,   41, 1432, 1433,   44,
   91,  339,  384,  319,  375,   59, 1681,   61,  445,  461,
  459, 1686,  461,   40,   59,   41,  319,  388,   44,  379,
  215, 1456,  425,  472, 1459,  439,  329,  321,  223,  332,
  444,    0,  414,   59,  462,   61,  450,   91,  341, 1714,
 1643,  401,  491, 1718, 1719, 1612,   41,  461,  408,   44,
  499,  500,  501,  288,    0,  469, 1491,  258,  264,   42,
   43, 1628,   45, 1738,   47,   91,  301, 1742,  317,  379,
  408,    0,   41,  274,    0,   44,  277,  278, 1686,  280,
  418, 1756,  442,  319,  285,  388,    0,  288, 1655,  461,
   59,  401,   61, 1645,  397, 1645,  338,  260,  408, 1666,
  301,  280,    0,  337,    0,  443,  307,  286, 1543,  310,
 1718, 1719, 1710,   59,    0,    0, 1551,  295,  453,  343,
    0,    0,   91,   41,   42,   43,  403,   45,  306,   47,
   59, 1698,  442,   59, 1742,  313,    0,  341,  441,  302,
 1707,   41,  321,   41,   44,   59,   44,   40, 1756,    0,
    0,  314, 1587,    0,  378,   41,  321,  459,   44,  461,
  338,   59,    0,   59, 1731,   42,   43,  258,   45,   41,
   47,  280,   44,   59,   59,   61,  339,  286,  379,   59,
   59,   41,  406,  274,   44,  409,  277,  278,  403,  280,
    0,    0,    0,   93,  285,   59,  280,  288, 1633,    0,
  401,  425,  286,   41,  258,    0,   44,  408,   59,   59,
  301,  412,   59,  278,  319,  280,  307,    0,  419,  310,
  274,   59,  384,  288,  278,  403,  280,  451,  312,  384,
  322,  285,  258,  278,  288,  280,  437,    0, 1673,   41,
   41,  442,   44,   44,  336,  408,  437,  301,  274,   59,
   59,   59,  278,  307,  280,  418,  310,  435,   59,  285,
   61,  439,  288,  362,   59,    0,  467,    0,  360,  322,
  471,  451,  450,  338,    0,  301,   59,  462,  463,   41,
  443,  307,   44,  336,  310,  392,  393,   41,  379,  258,
   44,  344,  384,    0,  462,  463,   59,  280,  461,  435,
   41,   42,   43,  286,   45,  274,   47,  360,  461,  278,
  401,  280,   41,  403,  379,   44,  285,  408,  418,  288,
   41,  412,  414,   44,   59,  379,   59,  443,  419,  312,
    0,   93,  301,   59,  379,  466,  401,  468,  307,   42,
   43,  310,   45,  408,   47,   41,  437,  401,   44,  439,
  358,  442,   59,  379,  408, 1115,  401, 1117,  412,  470,
  450,  414,  280,  408,   41,  419,   41,   44,  286,   44,
   41,   41,  258,   44,   44,  401,  467,  442,   41,  288,
  471,   44,  408,  437,   41,  262,  412,   44,  442,   59,
  412,  277,  278,  419,  280,   42,   43,  442,   45,  285,
   47,   41,  288,  280,   44,   41,  724,  725,   44,  286,
  379,  437,   59,  467,   44,  301,  442,  471,  264,   41,
   41,  307,   44,   44,  322,   42,   43,   44,   45,   61,
   47,  329,  401,  373,  332,  458,  459,  460,  336,  408,
  278,  467,  280,  412,  322,  471,  344,   41,   42,   43,
  419,   45,  287,   47,   40,   40,  462,  258,  336,  264,
    0,  462,  360,  486,  487,  462,  344,    0,  437,   44,
  437,  461,  321,  442,   44,  403,  277,  278,   40,  280,
   40,   40,  360,  660,  285,  662,  384,  288,  665,  666,
  667,   40,   40,  379,   40,   40,   40,   40,  467,  397,
  301,   41,  471,   40,   44,   40,  307,   40,   41,   42,
   43,   44,   45,   46,   47,  401,  414,   40,  461,   59,
   40,   46,  408,   91,  321,   44,   59,   60,   61,   62,
    0,  417,   44,  419,  429,   46,  414,   61,   40,  280,
  264,  379,  280,  441,   44,  286,  383,   46,   44,  349,
  278,  437,  301,  278,    0,  453,  442,  455,   91,  262,
   93,  437,  264,  401,  461,  398,  471,  398,  459,  277,
  408,   41,  279,  448,   44,  448,   46,  280,  379,  400,
   41,   42,   43,  286,   45,  471,   47,   40,   40,   59,
  350,   61,  262,   91,  301,   41,   42,   43,   44,   45,
  401,   47,   40,   40,  442,  319,  264,  408,  384,  412,
   44,  390,  383,   59,   60,   61,   62,   40,  419,  437,
   41,   42,   43,  330,   45,   40,   47,  318,   40,  465,
  452,  321,  321,  280,   41,  461,  437,    0,  453,  286,
  264,  442,  349,  449,  461,  459,   40,   93,  277,  319,
  357,  358,  322,   40,  274,  301,  387,  364,  285,  329,
  345,  345,  332,  280,  278,  387,  336,  387,  418,  286,
  471,  341,  417,  419,  344,  382,  301,  419,   41,   42,
   43,   44,   45,   40,   47,  264,  280,  394,  357,  396,
  360,   40,  286,  274,  461,   40,   59,   60,   61,   62,
   44,  368,   44,  386,   41,    0,  321,  264,   44,   41,
   42,   43,  419,   45,  384,   47,  321,  387,  388,   42,
   43,   40,   45,   44,   47,  280,   44,  397,    0,  262,
   93,  264,  329,   44,  266,   40,   59,  444,  278,  272,
  280,   40,  300,  338,  414,  285,   41,  280,  288,   44,
  264,  455,  461,  286,  441,   40,  289,   42,   43,  423,
   45,  301,   41,   41,   59,   58,  436,   41,   41,   41,
  264,  441,   44,   58,  310,  308,  309,  395,   63,  312,
  493,  310,   41,  453,   41,  455,  319,   59,  321,  322,
   40,   40,  325,   40,  264,  265,  329,  353,   40,  332,
   40,  334,   40,  336,   40,   40,   40,   40,  341,  342,
  280,  344,   40,   40,   40,   40,  262,   40,  264,  280,
   40,  262,  328,   44,  436,  286,  272,  360,  361,  309,
  363,   41,  274,  303,  280,  305,  389,  389,  389,  379,
  286,  344,  332,  289,  377,  423,  379,  380,  381,  319,
  391,  384,  271,  392,  387,  388,  447,  288,  408,  280,
  387,  401,  308,  309,  397,  286,  312,  278,  408,  387,
  387,  341,  387,  319,  387,  321,  322,  387,  411,  325,
    0,  414,   41,  329,  379,   41,  332,   40,  334,   41,
  336,   41,  418,   41,  386,  341,  342,  430,  344,  262,
   41,  264,  442,  436,  309,  443,  437,  339,  441,  272,
  397,    0,  302,  443,  360,  361,  302,  363,  386,  452,
  453,   41,  455,  286,   44,  339,  289,  436,  461,   41,
   41,  377,  372,  379,  380,  381,  353,  372,  384,   59,
   41,  387,  388,   41,   41,  308,  309,   41,  280,  312,
   41,  397,   41,   41,  286,   44,  319,  280,  321,  322,
   41,   41,  325,  286,   41,  411,  329,   41,  414,  332,
   59,  334,   41,  336,   41,  260,   41,   41,  341,  342,
   41,  344,  267,  278,  430,  280,   41,   44,  280,   59,
  436,  276,   40,  288,    0,  441,   59,  360,  361,   40,
  363,  341,  341,   59,   41,  290,  452,  453,   59,  455,
   59,  296,  297,   59,  377,  461,  379,  380,  381,  304,
   59,  384,  353,  345,  387,  388,  473,  474,  475,  476,
  477,  478,  479,  480,  397,   41,   42,   43,   44,   45,
  321,   47,  327,  338,   41,  369,   40,  319,  411,   59,
  322,  414,  341,   59,   60,   61,   62,  329,  384,   59,
  332,  461,   44,   41,  336,   41,  436,  430,  353,  341,
  355,  356,  344,  436,  384,  384,   44,    0,  441,   41,
   42,   43,  367,   45,  379,   47,  371,   93,  360,  452,
  453,  411,  455,   44,  305,   41,   42,   43,  461,   45,
  847,   47,  849,  302,  851,  852,  401,  854,  855,  856,
  443,   41,  384,  408,  344,   40,  388,   59,   41,   42,
   43,   44,   45,  294,   47,  397,  305,   44,  308,  464,
   44,   41,    0,  338,  264,   40,   59,   60,   61,   62,
  384,  384,  414,  278,  459,  264,  321,  442,  264,  434,
  412,  390,  452,   40,  471,  310,  459,  271,  278,  444,
  280,  264,  437,  344,    0,  436,  344,  344,  288,  441,
   93,  344,  459,  458,  459,  460,  461,  462,  463,  461,
   41,  453,   40,   59,   41,   42,   43,  472,   45,  271,
   47,   40,   59,   41,   41,  305,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   41,  491,   43,   44,   45,
   44,  496,  497,   59,  499,  500,  501,   41,    0,    0,
    0,   12,  250,   59,   60,   61,   62,  243, 1118,  242,
  319,   42,   43,  322,   45,  648,   47,  608, 1054,  827,
  329, 1052,   82,  332, 1398, 1049, 1044,  336,  302,  333,
  297,  553,  341, 1033,  977,  344,  262,   93,  264,  379,
 1045,  288,  721, 1584,  384,  758,  272, 1371,  531,  314,
  314,  360,   41,   42,   43, 1650,   45, 1373,   47,  748,
 1654,  401, 1690,  289, 1653, 1200, 1687, 1741,  408, 1602,
  369, 1386,   41,   42,   43,  384,   45, 1655,   47,  388,
  319,    0,  308,  309,  307,  300,  312,   45,  397,  533,
   13, 1238,  592,  319,  805,  321,  322,  275,  280,  325,
  797,  465,  442,  329,  286,  414,  332,  469,  334,  710,
  336,  726,  696,  940,  280,  341,  342,  697,  344,  262,
  286,  264,   41,  120,   43,   44,   45, 1575, 1474,  272,
 1707, 1666,  441, 1759,  360,  361,  481,  363,  655, 1086,
   59,   60,   61,   62,  453, 1154,  289,  883,   -1,  368,
   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,  295,
   -1,  387,  388,   -1,   -1,  308,  309,   -1,   -1,  312,
  306,  397,   -1,   -1,   93,   -1,  319,  313,  321,  322,
   -1,   -1,  325,   -1,   -1,  411,  329,   -1,  414,  332,
  326,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,
   -1,  344,    0,  280,  430,   -1,  262,   -1,  264,  286,
  436,   -1,   -1,   -1,   -1,  441,  272,  360,  361,   -1,
  363,   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,  455,
   -1,   -1,   -1,  289,  377,  461,  379,  380,  381,   -1,
   -1,  384,   -1,   41,  387,  388,   44,   -1,   -1,  280,
   -1,  387,  308,  309,  397,  286,  312,   -1,   -1,   -1,
   -1,   59,   -1,  319,   -1,  321,  322,  403,  411,  325,
   -1,  414,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,
  336,   -1,   -1,   -1,  420,  341,  342,  430,  344,   -1,
   -1,  280,   -1,  436,   -1,   -1,   -1,  286,  441,  435,
   -1,   -1,   -1,  439,  360,  361,  442,  363,   -1,  452,
  453,  280,  455,   -1,  450,   -1,    0,  286,  461,   -1,
   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,
   -1,  387,  388,  469,   -1,   -1,   -1,   -1,  296,   -1,
   -1,  397,    0,  262,   -1,  264,   41,   42,   43,   -1,
   45,   -1,   47,  272,   -1,  411,   -1,   41,  414,   43,
   44,   45,   41,   42,   43,   -1,   45,   -1,   47,   -1,
  289,   -1,   -1,   -1,  430,   59,   60,   61,   62,   -1,
  436,   -1,   -1,   41,   -1,  441,   44,   -1,   -1,  308,
  309,   -1,   -1,  312,   -1,  353,  452,  453,   -1,  455,
  319,   59,  321,  322,   -1,  461,  325,   -1,   -1,   93,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   41,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,   -1,  363,   41,   42,   43,   -1,   45,
   -1,   47,   -1,    0,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,
  278,   -1,  280,   -1,   -1,   -1,  444,   -1,   -1,   -1,
  288,   -1,  411,   -1,   41,  414,   43,   44,   45,   -1,
  458,  459,  460,  301,  462,  463,   -1,   -1,   -1,   -1,
   -1,  430,   59,   60,   61,   62,   -1,  436,   -1,   -1,
   -1,   -1,  441,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  452,  453,   -1,  455,   -1,  496,  497,
   -1,   -1,  461,   -1,   -1,  306,   93,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,  338,  262,   -1,
  264,  379,   -1,   -1,   -1,  280,   -1,   -1,  272,   58,
   -1,  286,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  401,   -1,  289,   -1,  286,   -1,   -1,
  408,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,   -1,  308,  309,   -1,   -1,  312,   -1,
  288,   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,
   -1,  325,  403,  301,  442,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,  420,
  344,   -1,   -1,   -1,   -1,   -1,  280,   -1,   40,   -1,
   -1,   43,  286,   45,  435,    0,  360,  361,  439,  363,
   -1,   -1,   -1,   -1,  280,   -1,   58,   -1,   -1,  450,
  286,   63,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,  469,   -1,
   -1,   -1,   -1,  397,   -1,  262,   41,  264,   -1,   44,
   -1,  379,    0,   -1,   -1,  272,   -1,  411,   -1,   -1,
  414,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  401,   -1,   -1,  430,   -1,   -1,   -1,
  408,   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,
   -1,  308,  309,   41,   -1,  312,   44,   -1,  452,  453,
   -1,  455,  319,   -1,  321,  322,   -1,  461,  325,   -1,
   -1,   59,  329,   -1,  442,  332,   -1,  334,   -1,  336,
   -1,   -1,   -1,   -1,  341,  342,   -1,  344,  267,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,  360,  361,    0,  363,   -1,   -1,   -1,
   40,  290,   42,   43,  293,   45,   -1,  296,  297,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,  384,   58,   -1,
  387,  388,   -1,   63,   -1,   -1,  315,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   -1,   -1,   41,   -1,  327,   44,
   59,   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  430,   -1,   -1,  355,  356,   -1,  436,
   -1,   -1,   -1,   -1,  441,  267,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,  276,  452,  453,   -1,  455,   -1,
  379,   -1,   -1,   -1,  461,   -1,   -1,   40,  290,   -1,
   43,   -1,   45,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  422,  279,  327,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,  301,   -1,   -1,   -1,
   -1,   -1,  307,  355,  356,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,  367,   -1,   -1,   -1,  371,
  278,   -1,  280,  472,   -1,  330,   -1,  379,   -1,   -1,
  288,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,  349,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  358,   -1,   -1,   -1,   -1,   -1,  364,
  260,   -1,   -1,   -1,   -1,   -1,  418,  267,   -1,   -1,
  422,   -1,   -1,   -1,   -1,   -1,  276,  382,   -1,  258,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,  444,   -1,   -1,   -1,  296,  297,   -1,   -1,
  279,   -1,   -1,   -1,  304,   -1,  458,  459,  460,  461,
  462,  463,   -1,  278,  419,  280,   -1,   -1,   -1,   -1,
  472,  379,  301,  288,   -1,   -1,   -1,  327,  307,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,  401,  496,  497,   -1,  499,  500,  501,
  408,  330,   -1,  353,   -1,  355,  356,   -1,   -1,   -1,
    0,    0,   -1,   -1,  267,   -1,   -1,  367,    0,   -1,
  349,  371,   40,  276,   -1,   43,   -1,   45,  357,  358,
   -1,   -1, 1271, 1272,  442,  364,   -1,  290, 1277, 1278,
   58, 1280, 1281,  296,  297,   63,   -1,   -1,   -1, 1288,
 1289, 1290, 1291,  382, 1293, 1294, 1295, 1296, 1297, 1298,
   -1,   -1,  315,   -1,  379,   -1,   -1,   -1,   -1,   59,
   59,   -1,   -1,   -1,  327,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,  434,   -1,  401,   -1,   -1,   -1,
  419,   -1,   -1,  408,  444,   -1,   -1,   -1,   -1,   -1,
   -1,  430,  355,  356,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  472,   -1,   -1,   -1,  379,  442,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,
  500,  501,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  422,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,  434,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,  260,  496,  497,  263,  499,  500,  501,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  258,
   40,   -1,  290,   43,   -1,   45,  258,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,  279,
  279,   -1,   -1,   63,   -1,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  301,  301,   -1,   -1,   -1,   -1,  307,  307,  301,
   -1,   -1,   -1,   -1,   -1,  307,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   40,
  330,  330,   43,   -1,   45,   -1,   -1,   -1,  330,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   58,   -1,  349,
  349,   -1,   63,   -1,   -1,   -1,   -1,  349,  358,  358,
   -1,   -1,   -1,   -1,  364,  364,  358,   -1,   -1,   -1,
   -1,  260,  364,   -1,  263,   -1,   -1,   -1,  267,   -1,
   -1,   -1,  382,  382,   -1,   -1,   -1,  276,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,   -1,
   -1,  290,   -1,   -1,   -1,   -1,  434,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,  419,
  419,   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,    0,  491,   -1,   -1,  355,  356,  496,  497,
   -1,  499,  500,  501,   -1,   -1,   -1,   -1,  367,   -1,
  260,   -1,  371,  263,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   40,   -1,
  290,   43,   -1,   45,   -1,   -1,  296,  297,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,  327,   -1,  260,
   -1,   -1,  263,   -1,   -1,  444,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,  355,  356,   -1,   -1,  290,
   -1,   -1,   -1,  472,  261,  296,  297,  367,   -1,   -1,
   -1,  371,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,  283,  496,  497,   -1,
  499,  500,  501,   -1,  291,   -1,  327,   40,   -1,   -1,
   43,  298,   45,  300,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,   -1,   -1,   -1,   58,   -1,  314,   -1,   -1,
   63,   -1,   -1,   -1,  355,  356,  426,   -1,   -1,   -1,
   -1,  328,   -1,   -1,  434,   -1,  367,   -1,   -1,   -1,
  371,   -1,  339,   -1,  444,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,  426,  496,  497,   -1,  499,
  500,  501,   -1,  434,  262,   -1,   -1,   -1,  260,  406,
   -1,  263,   -1,  444,   -1,  267,  413,   -1,   -1,  416,
   -1,  418,  419,   -1,  276,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,  472,   -1,   -1,  296,  297,  443,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,  319,   -1,   -1,  322,  496,  497,   -1,  499,  500,
  501,  329,   -1,   -1,  332,  327,   40,   -1,  336,   43,
   -1,   45,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,  492,   -1,   -1,   -1,   63,
   -1,   -1,  360,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,  260,   -1,  371,
  263,   -1,   -1,   -1,  267,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   40,   -1,  290,   43,   -1,
   45,   -1,   -1,  296,  297,   -1,  414,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,  426,   -1,   -1,   -1,  436,   -1,
   -1,   -1,  434,  441,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,  453,   -1,  455,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  461,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,  483,  484,  485,   -1,   -1,  488,  489,
  490,  491,   -1,  493,   -1,   -1,  496,  497,   -1,   -1,
   -1,   -1,   -1,  426,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,
   -1,  444,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,  472,
   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,
   -1,   -1,   -1,  327,   -1,  260,   -1,   -1,  263,   -1,
   -1,   40,  267,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,  355,  356,   -1,   63,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  273,   -1,   -1,   -1,  277,   -1,   40,   -1,   -1,
   43,   -1,   45,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  296,   58,   -1,  299,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,  426,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,  367,   -1,   -1,   -1,  371,   -1,  340,   -1,
  444,   -1,   -1,   -1,  346,  347,  348,   -1,  350,  351,
  352,   -1,  354,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
  271,   -1,  374,   -1,  376,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,  426,  496,  497,   -1,  499,  500,  501,   -1,  434,
   -1,  302,   -1,   -1,   -1,  407,   -1,   -1,  309,  444,
   -1,   -1,  313,  314,   -1,  316,   -1,   -1,  319,   -1,
   -1,   -1,  424,  458,  459,  460,  461,  462,  463,  271,
   -1,   -1,  333,   -1,   -1,   -1,   -1,  472,  339,   -1,
   -1,   -1,   -1,   -1,  446,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  267,  461,
  302,  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,
   -1,  313,  314,   -1,  316,   -1,   -1,  319,   -1,  481,
  482,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,  333,   -1,   -1,   -1,   -1,  498,  339,  399,   -1,
   -1,   -1,   -1,   40,  267,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,  276,   -1,   -1,   -1,  418,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,
   -1,   -1,  433,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  443,   -1,  353,   -1,  355,  356,   -1,   40,
   -1,  452,   43,  454,   45,   -1,   -1,  399,  367,  273,
  461,   -1,  371,  277,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,  418,   -1,  292,   -1,
   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,  490,
  353,  433,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  454,   -1,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,  434,  340,   -1,   -1,   -1,
   -1,   -1,  346,  347,  348,  444,  350,  351,  352,   -1,
  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  490,  458,
  459,  460,  461,  462,  463,  418,   -1,   -1,   -1,   -1,
  374,   -1,  376,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  407,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
  267,   -1,  446,  496,  497,   -1,  499,  500,  501,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  260,
   -1,   -1,   -1,   -1,   -1,   40,  267,   -1,   43,   -1,
   45,   -1,   -1,   -1,  498,  276,   -1,   -1,   -1,   -1,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,  353,   -1,  355,  356,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  367,  273,   -1,   -1,  371,  277,  327,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  340,   -1,
   -1,   -1,   -1,   -1,  346,  347,  348,  444,  350,  351,
  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,  407,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  267,   -1,  446,  496,  497,   -1,  499,  500,
  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,   -1,   -1,   -1,   -1,   -1,   40,  267,   -1,
   43,   -1,   45,   -1,   -1,   -1,  498,  276,   -1,   -1,
   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   40,   41,   -1,   43,   -1,   45,   -1,
   -1,   -1,  367,  273,   -1,   -1,  371,  277,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  444,
  350,  351,  352,   -1,  354,   -1,   -1,  452,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,  418,
   -1,   -1,   -1,   -1,  374,   -1,  376,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  407,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,  267,   -1,  446,  496,  497,   -1,
  499,  500,  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  267,   -1,   43,   -1,   45,   -1,   -1,   -1,  498,  276,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,  367,  273,   -1,   -1,  371,  277,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,
  348,  444,  350,  351,  352,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  444,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  407,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,  267,   -1,  446,  496,
  497,   -1,  499,  500,  501,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  267,   -1,   43,   -1,   45,   -1,   -1,   -1,
  498,  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,  367,  273,   -1,   -1,
  371,  277,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,
  346,  347,  348,  444,  350,  351,  352,   -1,  354,   -1,
   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,  459,  460,
  461,  462,  463,  418,   -1,   -1,   -1,   -1,  374,   -1,
  376,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  444,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  407,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  267,   -1,
  446,  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,   -1,
   -1,   -1,  498,  276,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
  267,   -1,   -1,  496,  497,   -1,  499,  500,  501,  276,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   41,   -1,   -1,   44,  296,
  297,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,
  327,    0,   -1,   -1,   -1,   -1,   -1,    0,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   41,   -1,  371,   44,  327,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,    0,  496,
  497,   -1,  499,  500,  501,  262,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   41,
  491,   -1,   44,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,    0,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  319,   -1,  332,  322,   -1,   -1,  336,
   -1,   -1,   -1,  329,  341,   -1,  332,  344,   -1,   -1,
  336,   -1,   -1,  262,   -1,  341,   -1,   -1,  344,  262,
   -1,   -1,   41,  360,   -1,   44,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  397,  387,  388,   -1,    0,   -1,   -1,   -1,   -1,   -1,
  319,  397,   41,  322,   -1,   44,  319,  414,   -1,  322,
  329,   -1,   -1,  332,   -1,   -1,  329,  336,  414,  332,
   59,   -1,  341,  336,   -1,  344,  262,   -1,  341,  436,
   -1,  344,   -1,   -1,  441,   41,   -1,   -1,   44,   -1,
  436,  360,   -1,   -1,   -1,  441,  453,  360,  455,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  397,   -1,
   -1,   -1,   -1,  319,  397,   -1,  322,   -1,    0,   -1,
   -1,   -1,   -1,  329,   -1,  414,  332,   -1,   -1,   -1,
  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,    0,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,  436,  360,   -1,   -1,   -1,  441,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,    0,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,   59,  384,   -1,
   41,  387,  388,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,   59,   -1,
  322,   -1,    0,  262,   -1,   -1,   -1,  329,  414,   41,
  332,   -1,   44,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,  360,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,  453,   -1,  455,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   59,  384,  322,   -1,  387,  388,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  262,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,  436,   -1,   -1,   -1,   -1,  441,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
   -1,  453,  341,  455,   -1,  344,   -1,   -1,  397,   41,
   -1,   -1,   44,  319,   -1,   -1,  322,   -1,    0,   -1,
   -1,  360,   -1,  329,   -1,  414,  332,   59,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  436,  387,  388,
  262,   -1,  441,   -1,  360,   -1,   -1,   -1,  397,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  414,   -1,   59,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,    0,   -1,  436,   -1,   -1,
  262,   -1,  441,   -1,   -1,   -1,   -1,  319,  414,   -1,
  322,   -1,   -1,   -1,  453,   -1,  455,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,  319,  341,
  436,  322,  344,   -1,  262,  441,   41,   -1,  329,   44,
   -1,  332,   -1,   -1,   -1,  336,   -1,  453,  360,  455,
  341,   -1,   -1,  344,   59,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  360,
  332,   -1,  384,   -1,  336,  387,  388,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  384,  322,   -1,  387,  388,  360,   -1,
   -1,  329,  414,   -1,  332,   -1,  397,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  384,  414,  436,  387,  388,   -1,   -1,  441,
  262,   -1,  360,   -1,   -1,  397,   -1,    0,   -1,   -1,
   -1,  453,   -1,  455,   -1,  436,   -1,   -1,    0,   -1,
  441,   -1,  414,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   41,  441,
  262,   44,   -1,   -1,   -1,   -1,  414,  319,   -1,   41,
  322,  453,   44,  455,   -1,   -1,   59,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   59,  436,  341,
   -1,   -1,  344,  441,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  384,   -1,  336,  387,  388,  262,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,  360,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  384,   -1,  436,  387,  388,   -1,   -1,  441,
   -1,   -1,   -1,   -1,  319,  397,   -1,  322,   -1,   -1,
   -1,  453,   -1,  455,  329,   -1,   -1,  332,   -1,   -1,
   -1,  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,  360,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   42,   43,   -1,   45,  384,
   47,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   60,   61,   62,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
  277,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  453,  296,
  455,   -1,  299,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,  319,   -1,  332,
  322,   -1,   -1,  336,   -1,   -1,   -1,  329,  341,   -1,
  332,  344,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  340,   -1,   -1,   -1,  360,   -1,  346,
  347,  348,  272,  350,  351,  352,   -1,  354,  360,   -1,
  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,  384,   -1,   -1,  387,  388,   -1,  374,   -1,  376,
   -1,   -1,  384,   -1,  397,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  414,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
  407,   -1,  414,   -1,  334,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  342,  436,   -1,   -1,   -1,  424,  441,   -1,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,
  453,  361,  455,  363,  271,   -1,   -1,   -1,   -1,  446,
   -1,  453,  271,  455,   -1,  272,   -1,  377,   -1,  379,
  380,  381,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,  309,  302,  481,  482,  313,  314,   -1,  316,
  309,   -1,  319,   -1,  313,  314,   -1,  316,   -1,   -1,
  319,  498,   -1,   -1,   -1,   -1,  333,   -1,  325,   -1,
  430,   -1,  339,   -1,  333,   -1,   -1,  334,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,
   -1,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,  430,  433,   -1,  443,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  443,  452,   -1,  454,   -1,   -1,
   -1,   -1,   -1,   -1,  461,  454,   -1,  461,   -1,   -1,
   -1,   -1,  461,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
  484,  485,   -1,  490,  488,  489,  490,  491,  461,  493,
   -1,  490,  496,  497,   -1,   -1,   -1,   -1,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
  483,  484,  485,   -1,   -1,  488,  489,  490,  491,   -1,
  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 501
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : VIEW replace_view_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action",
"column_constraint : check_constraint",
"column_constraint : UNIQUE",
"column_constraint : PRIMARY KEY",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_name_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_name_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_name_opt",
"constraint_index_name_opt : INDEX symbol_index_name",
"constraint_index_name_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction",
"order_item : ordinal collate_clause order_direction",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
{ yyval = yyvsp[0]; }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
{ yyval = yyvsp[0];}
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = yyvsp[0]; }
break;
case 75:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
{ yyval = (NOD) NULL; }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
{ yyval = yyvsp[-1]; }
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 115:
{ yyval = NULL; }
break;
case 116:
{ yyval = make_list (yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 119:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 120:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 125:
{ yyval = (NOD) 0;}
break;
case 126:
{ yyval = yyvsp[-1]; }
break;
case 127:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 131:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 132:
{ yyval = NULL; }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = yyvsp[0]; }
break;
case 135:
{ yyval = (NOD) NULL; }
break;
case 136:
{ yyval = (NOD) NULL; }
break;
case 139:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 144:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 146:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 150:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 151:
{yyval = (NOD) NULL;}
break;
case 154:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 155:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 157:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 160:
{yyval = (NOD) NULL;}
break;
case 163:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 167:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 168:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 172:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 175:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 176:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 177:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 179:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 180:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 181:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 184:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 185:
{ g_file  = make_file ();}
break;
case 190:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 191:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 198:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = yyvsp[0]; }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 204:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 207:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 213:
{ yyval = NULL; }
break;
case 214:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 217:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 218:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 219:
{ yyval = yyvsp[-1]; }
break;
case 220:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = yyvsp[0]; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = (NOD) NULL; }
break;
case 232:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 235:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 237:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 238:
{ yyval = make_node (nod_primary, (int) 0, NULL); }
break;
case 239:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 240:
{ yyval = yyvsp[0]; }
break;
case 241:
{ yyval = NULL ;}
break;
case 246:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 247:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = yyvsp[0]; }
break;
case 250:
{ yyval = NULL; }
break;
case 251:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 256:
{ yyval = NULL;}
break;
case 257:
{ yyval = yyvsp[0];}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_list (yyvsp[-1]); }
break;
case 268:
{ yyval = NULL; }
break;
case 269:
{ yyval = yyvsp[0]; }
break;
case 270:
{ yyval = NULL; }
break;
case 272:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 273:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 274:
{ yyval = make_list (yyvsp[0]); }
break;
case 275:
{ yyval = NULL; }
break;
case 277:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 278:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 279:
{ yyval = NULL; }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = yyvsp[0]; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 285:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 286:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 289:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 292:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 298:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 302:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 303:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 304:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 305:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 306:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 307:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 308:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 311:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 312:
{ yyval = make_list (yyvsp[0]); }
break;
case 313:
{ yyval = make_list (yyvsp[-1]); }
break;
case 314:
{ yyval = NULL; }
break;
case 315:
{ yyval = make_list (yyvsp[0]); }
break;
case 316:
{ yyval = make_list (yyvsp[-1]); }
break;
case 317:
{ yyval = NULL; }
break;
case 320:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 321:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 322:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 323:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 324:
{ yyval = NULL; }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 334:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 335:
{ yyval = make_list (yyvsp[0]); }
break;
case 336:
{ yyval = make_list (yyvsp[-1]); }
break;
case 337:
{ yyval = NULL; }
break;
case 341:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 344:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 345:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 346:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 347:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 349:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 351:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 353:
{ yyval = make_list (yyvsp[0]); }
break;
case 355:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 358:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 359:
{ yyval = yyvsp[-1]; }
break;
case 360:
{ beginning = lex_position(); }
break;
case 361:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 362:
{ beginning = last_token; }
break;
case 363:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 364:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 365:
{ yyval = 0; }
break;
case 366:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 367:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 368:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 370:
{ yyval = NULL; }
break;
case 371:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 372:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 373:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 376:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 377:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 378:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 390:
{ yyval = NULL; }
break;
case 391:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 394:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 395:
{ yyval = yyvsp[0]; }
break;
case 396:
{ yyval = yyvsp[0]; }
break;
case 397:
{ yyval = yyvsp[0]; }
break;
case 398:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 399:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 400:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 404:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 405:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = yyvsp[0]; }
break;
case 408:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 409:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 410:
{ yyval = yyvsp[0]; }
break;
case 411:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 413:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 414:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 415:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 416:
{ yyval = yyvsp[0]; }
break;
case 417:
{ yyval = yyvsp[0]; }
break;
case 418:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 419:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 421:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 446:
{ yyval = NULL; }
break;
case 447:
{ yyval = NULL; }
break;
case 448:
{ yyval = NULL; }
break;
case 449:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 450:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 451:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 452:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 453:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 454:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 455:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 456:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 458:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 459:
{ yyval = yyvsp[0]; }
break;
case 460:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 461:
{ yyval = yyvsp[0]; }
break;
case 462:
{ yyval = yyvsp[0]; }
break;
case 464:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 465:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 467:
{ yyval = NULL; }
break;
case 469:
{ yyval = NULL; }
break;
case 470:
{ yyval = yyvsp[0]; }
break;
case 471:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 472:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 473:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 474:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 475:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 476:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 487:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 488:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 490:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 491:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 492:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 498:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 499:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 500:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 501:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 502:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 507:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 509:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 510:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 511:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 512:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 513:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 514:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 515:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 517:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 518:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 519:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 520:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 521:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 531:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 532:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 533:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 534:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 535:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 536:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 539:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 540:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 541:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 542:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 543:
{ yyval = yyvsp[-1]; }
break;
case 544:
{ yyval = 0; }
break;
case 548:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 549:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 550:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 551:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 552:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 555:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 556:
{ yyval = (NOD) NULL; }
break;
case 558:
{ yyval = (NOD) NULL; }
break;
case 559:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 561:
{ yyval = (NOD) NULL; }
break;
case 563:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 568:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 569:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 570:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 571:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 572:
{ yyval = yyvsp[0];}
break;
case 574:
{ yyval = yyvsp[0];}
break;
case 575:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 577:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 578:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 579:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 580:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 581:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 582:
{ yyval = 0; }
break;
case 583:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 584:
{ yyval = (NOD) NOD_SHARED; }
break;
case 585:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 586:
{ yyval = (NOD) 0; }
break;
case 587:
{ yyval = (NOD) NOD_READ; }
break;
case 588:
{ yyval = (NOD) NOD_WRITE; }
break;
case 590:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 591:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 592:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 595:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 597:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 598:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 599:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 600:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 606:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 607:
{ yyval = 0; }
break;
case 608:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 609:
{ yyval = 0; }
break;
case 610:
{ yyval = yyvsp[0]; }
break;
case 611:
{ yyval = 0; }
break;
case 612:
{ yyval = yyvsp[0]; }
break;
case 613:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 614:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 615:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 616:
{ yyval = 0; }
break;
case 617:
{ yyval = make_list (yyvsp[0]); }
break;
case 618:
{ yyval = 0; }
break;
case 620:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 622:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 623:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 624:
{ yyval = make_list (yyvsp[0]); }
break;
case 626:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 629:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 630:
{ yyval = yyvsp[-1]; }
break;
case 631:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 632:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 633:
{ yyval = make_list (yyvsp[-1]); }
break;
case 634:
{ yyval = NULL; }
break;
case 636:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 640:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 641:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 642:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 643:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 644:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 645:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 646:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 647:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 648:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 649:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 650:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 651:
{ yyval = yyvsp[-1]; }
break;
case 652:
{ yyval = yyvsp[0]; }
break;
case 653:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 654:
{ yyval = yyvsp[-1]; }
break;
case 655:
{ yyval = yyvsp[0]; }
break;
case 656:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 657:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 658:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 659:
{ yyval = 0; }
break;
case 660:
{ yyval = make_list (yyvsp[0]); }
break;
case 661:
{ yyval = 0; }
break;
case 663:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 668:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 672:
{ yyval = yyvsp[0]; }
break;
case 673:
{ yyval = 0; }
break;
case 674:
{ yyval = yyvsp[0]; }
break;
case 675:
{ yyval = 0; }
break;
case 676:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 677:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 678:
{ yyval = 0;}
break;
case 679:
{ yyval = yyvsp[0]; }
break;
case 680:
{ yyval = 0; }
break;
case 681:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 682:
{ yyval = 0; }
break;
case 683:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 684:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 685:
{ yyval = 0; }
break;
case 686:
{ yyval = 0; }
break;
case 688:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 689:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 693:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 694:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 695:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 697:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 698:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 699:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 704:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 705:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 709:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 710:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 713:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 716:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 717:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 718:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 719:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 723:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 724:
{ yyval = yyvsp[0]; }
break;
case 726:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 729:
{ yyval = NULL; }
break;
case 730:
{ yyval = make_list (yyvsp[-1]); }
break;
case 732:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 734:
{ yyval = NULL; }
break;
case 735:
{ yyval = make_list (yyvsp[-1]); }
break;
case 737:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 739:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 740:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 741:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 745:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 747:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 758:
{ yyval = yyvsp[-1]; }
break;
case 759:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 761:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 763:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 764:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 765:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 766:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 768:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 769:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 770:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 771:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 772:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 773:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 774:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 775:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 779:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 780:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 786:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 787:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 788:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 789:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 790:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 791:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 792:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 793:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 794:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 795:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 796:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 797:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 798:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 799:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 800:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 801:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 802:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 804:
{ yyval = make_list (yyvsp[-1]); }
break;
case 805:
{ yyval = yyvsp[-1]; }
break;
case 806:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 807:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 817:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 818:
{ yyval = yyvsp[0]; }
break;
case 819:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 820:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 821:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 822:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 823:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 824:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 825:
{ yyval = yyvsp[-1]; }
break;
case 826:
{ yyval = yyvsp[-1]; }
break;
case 829:
{ yyval = yyvsp[0]; }
break;
case 830:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 831:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 832:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 833:
{ yyval = yyvsp[0]; }
break;
case 834:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 835:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 836:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 837:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 839:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 841:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 842:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 843:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 844:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 845:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 846:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 848:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 849:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 850:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 851:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 857:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 858:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 859:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 860:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 861:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 862:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 863:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 864:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 865:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 866:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 867:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 868:
{ yyval = yyvsp[0]; }
break;
case 869:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 871:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 872:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 873:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 874:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 875:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 877:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 878:
{ yyval = yyvsp[0];}
break;
case 883:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 884:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 885:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 886:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 887:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 888:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 889:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 890:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 891:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 892:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 893:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 894:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 895:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 896:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 897:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 898:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 899:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 900:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 901:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 904:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 905:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 908:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 909:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 910:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 911:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 912:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 913:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 914:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 915:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 919:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 920:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 921:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 922:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 923:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 924:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 925:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 926:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 929:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
