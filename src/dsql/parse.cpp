#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 * 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
 *                            exception handling in SPs/triggers,
 *                            implemented ROWS_AFFECTED system variable
 * 2002.10.21 Nickolay Samofatov: Added support for explicit pessimistic locks
 * 2002.10.29 Nickolay Samofatov: Added support for savepoints
 */

#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		DSQL_NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
DSQL_NOD		DSQL_parse;
#else
extern DSQL_NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static DSQL_NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define NULLS 503
#define LAST 504
#define ROWS_AFFECTED 505
#define LOCK 506
#define SAVEPOINT 507
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    9,    9,    9,    9,    9,   23,   23,   22,
   22,   22,   33,   33,   26,   34,   34,   34,   34,   34,
   25,   25,   31,   31,   27,   14,   14,   14,   14,   14,
   14,   14,   37,   28,   28,   28,   28,   38,   38,   38,
   38,   24,   24,   39,   39,   39,   29,   29,   44,   30,
   30,   45,   45,    6,   46,   46,   48,   53,   53,   53,
   50,   50,   50,   57,   57,   58,   58,   51,   51,   60,
   60,   60,   60,   60,   47,    5,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   12,   78,   78,
   78,   13,   82,   82,   65,   65,   68,   68,   68,   76,
   91,   91,   91,   92,   92,   93,   93,   94,   94,   98,
   98,   75,  101,  101,  103,  103,  104,  104,  107,  107,
  108,  109,  109,  110,  111,   73,   77,   74,   95,   95,
  114,  115,  115,  117,  117,  118,  118,  118,  118,  118,
  116,  116,  119,  119,  120,  120,  120,  120,  122,  122,
  122,  122,  121,  121,  126,  126,  125,   99,  127,  127,
  128,  131,  132,  132,  133,  129,  130,  130,  134,  134,
  135,  135,  136,  136,  136,   97,   97,   97,   70,   80,
  137,  137,  137,  138,  138,  139,  139,  140,  140,  140,
  146,   87,   87,  142,  142,  105,  105,  100,  150,  151,
   59,  143,  143,  106,  106,  106,  106,  106,  106,  144,
  144,  158,  158,  159,  161,  161,  161,  161,  161,  141,
  160,  160,  165,  165,  165,  165,  167,  168,  169,  163,
  163,  164,  162,  162,  162,  162,  162,  170,  171,  172,
  172,  172,  172,   69,   79,   83,  177,  173,  173,  174,
  174,  178,  178,  179,  175,  175,  180,  180,  181,  182,
  182,  183,  183,  184,  184,  176,  186,  186,  186,  187,
  187,  185,  185,  185,  185,  185,  185,  185,  185,  185,
  185,  185,  185,  185,  185,  185,  185,  190,  190,  191,
  192,  193,  194,  195,  195,  196,  202,  198,  198,  198,
  199,  199,  199,  200,  200,  200,  200,  197,  201,  201,
  188,  188,  207,  208,  208,  209,  209,  209,  209,   11,
  211,  211,  211,  212,  212,  212,  212,  212,  212,   72,
   81,  217,  218,  214,  219,  219,  219,  220,  224,  229,
  229,  230,  230,  231,  231,  148,  216,   88,   90,  215,
  215,   71,   84,  234,  234,  234,  235,  238,  238,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  236,  236,  237,    2,  241,  241,
  241,  241,  241,  241,  241,  249,  250,  247,  247,  251,
  251,  251,  251,  251,  251,  251,  242,  242,  252,  252,
  252,  252,  252,  252,  252,  246,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  254,  254,  256,  256,  255,  253,  253,  253,  248,  248,
  244,  245,  245,  258,  258,  258,  258,  259,  259,  243,
  260,  260,  261,  261,    8,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  102,  102,  145,
  145,  265,  265,  268,  268,  270,  270,   54,   54,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  275,  275,
  266,  266,  266,  266,  276,  276,   62,   62,   62,   56,
   56,  272,  272,  272,  269,  269,  269,  280,  280,  280,
  279,  279,  278,  278,  278,  273,  273,  283,  281,  281,
  281,  282,  282,  274,  274,  274,  274,  284,  284,   19,
   19,   19,  286,  286,  286,   16,   17,  290,  290,    4,
   15,  289,  289,  291,  291,  292,  292,  285,  293,  293,
  294,  294,  295,  295,  295,  295,  296,  296,  297,  297,
  298,  298,  300,  300,  300,  301,  301,  301,  302,  302,
  302,  299,  304,  304,  304,  305,  305,  303,  303,  306,
  308,  308,  307,  307,  287,   18,  309,  309,  309,  310,
  310,  313,  313,  314,  314,   66,   66,   66,  315,  315,
  315,  311,  311,  316,  316,  317,  317,  312,  221,  221,
  221,  221,  319,  319,  319,  320,  320,  320,  222,  222,
  223,  223,  322,  322,  323,  323,  323,  318,  326,  326,
  327,  327,  328,  328,  329,  329,  330,  330,  204,  204,
  332,  332,  232,  232,   32,  233,  233,  233,  233,  233,
  233,  233,  233,  226,  226,  333,  333,  334,  334,  334,
  334,  334,  336,  336,  336,  227,  227,  225,  225,  340,
  340,  340,  228,  228,  341,  342,  342,  342,  342,  342,
  343,  343,  344,  344,  345,  345,  346,  346,  346,  347,
  347,   10,   10,  349,  349,    7,    7,  350,  351,  352,
   20,   20,  353,  354,  355,  355,  189,  324,  324,    3,
    3,  357,  357,  357,  359,  359,   62,  358,  358,  360,
  360,   35,   35,   86,   85,   85,  348,  348,  361,  362,
  362,  205,  205,  205,  147,  356,  356,  112,  112,  112,
  112,  364,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  365,  365,  365,  365,  365,  365,  365,  365,
  370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
  370,  370,  370,  370,  370,  370,  376,  376,  366,  366,
  367,  367,  367,  367,  368,  368,  372,  372,  373,  373,
  373,  373,  371,  374,  369,  369,  377,  377,  378,  375,
  380,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,  157,  157,
  157,  381,  379,  379,  152,  152,  386,  386,  386,  386,
  386,  383,  383,  383,  383,  383,  213,  153,  153,  154,
  155,  155,  385,  385,  385,   52,   52,   21,   21,  240,
  387,   55,  124,  271,  271,   96,  382,  382,  382,  382,
  388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
  388,  389,  337,  338,  338,  338,  335,  335,  384,  339,
  339,  391,  391,  392,  392,  393,  393,  396,  396,  394,
  394,  399,  399,  398,  395,  397,  390,  390,  390,  390,
  390,  390,  390,  390,  321,  321,  156,   49,  277,  123,
  149,  363,  166,  206,  264,   64,   61,  210,  113,   67,
  325,   36,   42,  331,  263,   40,   43,  203,   41,  288,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    7,    8,    6,    7,    5,    1,    2,    1,
    2,    1,    1,    3,    1,    1,    1,    1,    2,    2,
    3,    0,    3,    0,    1,    7,    8,    6,    7,    6,
    7,    4,    3,    1,    3,    3,    3,    2,    2,    2,
    2,    1,    3,    1,    2,    2,    1,    3,    1,    1,
    3,    1,    2,    2,    2,    3,    8,    1,    1,    5,
    0,    1,    3,    1,    3,    2,    4,    1,    3,    2,
    3,    4,    4,    2,    9,    2,    3,    7,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    4,    2,    2,    1,    0,    1,    1,    6,    6,
    1,    1,    0,    0,    1,    0,    4,    0,    1,    1,
    2,    8,    1,    0,    3,    0,    0,    1,    1,    2,
    1,    1,    1,    2,    6,    1,    1,    3,    0,    1,
    1,    0,    1,    1,    2,    3,    4,    2,    2,    3,
    0,    1,    1,    2,    1,    1,    1,    4,    3,    3,
    3,    3,    1,    1,    6,    3,    1,    3,    1,    3,
    2,    1,    0,    2,    3,    1,    0,    1,    1,    2,
    3,    4,    0,    1,    2,    0,    1,    1,    5,    5,
    3,    2,    0,    1,    3,    1,    1,    6,    3,    2,
    6,    2,    1,    2,    2,    2,    0,    1,    1,    2,
    0,    2,    0,    1,    1,    1,    1,    1,    1,    0,
    1,    1,    2,    2,    2,    5,    1,    2,    3,    2,
    2,    0,    1,    1,    1,    1,    3,    4,    8,    4,
    0,    6,    1,    1,    2,    2,    0,    3,    3,    1,
    2,    2,    2,    8,    8,    8,    8,    3,    0,    2,
    0,    1,    3,    2,    1,    0,    1,    2,    6,    1,
    0,    2,    1,    1,    1,    3,    1,    2,    0,    1,
    2,    2,    2,    1,    1,    1,    1,    1,    1,    2,
    3,    1,    2,    1,    2,    2,    2,    3,    4,    2,
    6,    4,    7,    8,    6,    4,    2,    1,    3,    0,
    2,    4,    0,    1,    1,    3,    3,    6,    3,    0,
    1,    2,    4,    1,    3,    2,    2,    2,    1,    4,
    1,    3,    0,    1,    1,    1,    3,    3,    3,    7,
    7,    7,    7,    1,    1,    3,    4,    9,    2,    1,
    3,    1,    1,    6,    3,    0,    0,    0,    0,    3,
    0,    9,    9,    1,    1,    0,    2,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    5,    5,
    5,    5,    5,    5,    2,    0,    4,    2,    3,    3,
    2,    2,    3,    3,    2,    3,    6,    1,    2,    4,
    3,    2,    2,    2,    2,    3,    1,    3,    3,    3,
    2,    2,    4,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    0,    2,    2,
    0,    1,    2,    2,    2,    2,    2,    1,    3,    7,
    1,    0,    1,    0,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    2,    2,    2,    1,    1,    1,
    1,    4,    5,    1,    3,    1,    3,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    4,    6,    5,    3,    0,    2,    2,    0,    3,
    0,    4,    1,    5,    4,    1,    4,    1,    2,    2,
    1,    1,    1,    2,    2,    2,    2,    1,    0,    3,
    5,    1,    1,    2,    3,    1,    2,    3,    0,    1,
    1,    1,    5,    5,    6,    2,    5,    1,    0,    3,
    2,    1,    0,    2,    0,    1,    0,    3,    1,    0,
    1,    2,    1,    1,    1,    1,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    1,    2,    3,    1,    2,
    0,    2,    1,    1,    0,    1,    1,    1,    3,    2,
    3,    0,    1,    3,    4,    3,    1,    3,    4,    3,
    0,    1,    3,    4,    4,    1,    1,    0,    2,    2,
    0,    4,    0,    2,    0,    2,    0,    9,    2,    1,
    1,    0,    2,    4,    2,    2,    4,    2,    1,    1,
    1,    1,    1,    3,    1,    2,    3,    2,    1,    3,
    1,    1,    6,    3,    3,    2,    3,    0,    1,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    2,    0,    3,    0,    1,    3,    1,    1,    1,
    1,    3,    1,    1,    1,    2,    0,    2,    0,    3,
    5,    0,    2,    0,    4,    1,    2,    1,    1,    0,
    1,    3,    2,    1,    1,    2,    1,    4,    2,    1,
    3,    8,    5,    1,    3,    1,    1,    4,    4,    4,
    1,    1,    5,    5,    1,    3,    3,    1,    1,    7,
    7,    5,    3,    0,    1,    1,    1,    2,    0,    1,
    1,    1,    0,    3,    1,    3,    1,    0,    3,    1,
    3,    1,    3,    3,    1,    1,    3,    1,    3,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    1,    1,    5,    6,
    3,    4,    5,    6,    3,    4,    3,    4,    3,    4,
    4,    5,    4,    4,    3,    4,    1,    3,    3,    9,
    9,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    1,    1,    1,    1,    3,    1,    1,    1,    1,
    1,    4,    1,    3,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    6,    6,    6,    8,    4,    4,    3,    6,    1,
    1,    6,    6,    1,    1,    4,    6,    4,    5,    3,
    5,    4,    5,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,  550,
  551,  552,    0,  607,  716,  717,  721,  722,  461,    0,
    0,    0,    0,    0,    0,  398,  562,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
   96,    0,  880,    0,   22,  878,    0,    0,   74,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,    0,   38,   35,   37,    0,   36,
    0,  953,    0,    0,    0,    0,   33,   69,   67,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  631,    0,    0,    0,  955,  663,    0,    0,
    0,    0,    0,  108,  960,  556,    2,    0,    0,    0,
    0,  445,  427,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  446,  447,  448,  449,  450,    0,  426,  946,    0,  950,
    0,  405,  952,    0,  402,    0,  665,  956,    0,  401,
    0,  560,  876,    0,  151,  104,    0,  942,  105,    0,
  218,  755,    0,  949,  103,  146,    0,    0,   99,    0,
  106,  882,    0,  100,    0,  101,  959,    0,  102,  147,
  107,  616,  617,    0,  881,  879,    0,  947,   75,    0,
    0,  945,  483,  476,    0,  482,  487,  477,  478,  485,
  479,  480,  481,  486,    0,   31,    0,   40,  742,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  886,    0,  867,  633,  635,
    0,  636,  638,  935,  639,    0,  640,  629,    0,    0,
    0,    0,    0,    0,    0,  579,  568,    0,  571,  573,
  574,  575,  576,  582,  583,    0,  954,  664,    0,  109,
    0,  110,    0,  111,    0,    0,  608,    0,  606,    0,
    0,    0,    0,  462,    0,    0,  368,    0,  221,    0,
  408,  399,  459,  460,    0,    0,    0,    0,    0,    0,
  417,    0,  374,  375,    0,  566,  564,  877,    0,    0,
    0,    0,    0,    0,    0,  154,  133,    0,   97,    0,
    0,  112,    0,  122,  121,    0,    0,    0,    0,    0,
    0,  938,   76,    0,    0,    0,  718,  719,  484,    0,
  937,  859,  858,  857,    0,    0,  860,  861,    0,    0,
  863,  345,  346,  340,    0,  344,  855,  862,    0,  745,
    0,    0,   28,    0,    0,  957,    0,   72,   70,   68,
   34,    0,    0,    0,  747,    0,   53,    0,    0,    0,
    0,    0,  558,    0,    0,    0,    0,  845,  873,    0,
    0,  847,    0,    0,  874,    0,  868,    0,    0,  849,
  850,  851,  869,  870,    0,  871,  872,    0,    0,    0,
  875,    0,    0,    0,    0,    0,    0,  752,  841,  842,
  843,  848,  827,    0,  826,    0,  830,  889,  890,  829,
  823,  824,  825,  828,  844,  887,  888,  910,  911,  914,
  915,    0,  642,    0,  729,    0,    0,  643,    0,    0,
  605,    0,  580,    0,  577,    0,  578,  603,    0,  598,
    0,    0,  572,    0,  756,  725,    0,    0,    0,    0,
    0,    0,  538,    0,    0,    0,  612,    0,  609,    0,
  186,    0,    0,  130,  467,  173,  174,    0,  465,    0,
    0,    0,    0,  468,    0,  463,    0,    0,  412,  414,
  413,    0,  415,    0,  409,  219,    0,    0,  272,    0,
    0,    0,    0,  421,  422,    0,  452,    0,    0,    0,
    0,    0,    0,    0,  379,  378,  471,    0,    0,  150,
    0,    0,  159,    0,  158,    0,  165,  148,    0,  163,
  166,  167,  155,    0,    0,  506,  542,  509,    0,  543,
    0,    0,  510,    0,    0,    0,  533,  546,  505,  528,
  507,  508,  503,  490,  368,  488,  489,  491,    0,    0,
  500,  501,  502,  504,    0,    0,    0,    0,    0,  113,
    0,  114,    0,  125,    0,    0,  202,    0,    0,  366,
    0,  221,    0,    0,   84,    0,    0,  737,    0,    0,
    0,    0,    0,    0,    0,    0,  758,  762,  763,  764,
  765,  766,  767,  768,  769,  770,  771,  864,  865,  866,
  856,    0,    0,    0,  744,   29,    0,    0,   45,   73,
    0,    0,   27,    0,  750,    0,    0,  713,    0,    0,
    0,    0,    0,  557,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  958,  317,    0,    0,    0,
    0,    0,    0,    0,  634,    0,    0,  637,    0,    0,
    0,    0,  951,  646,  554,    0,  884,  553,    0,  581,
    0,  589,  585,  584,    0,    0,    0,  600,  588,    0,
    0,  723,  724,    0,    0,    0,  366,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
    0,    0,    0,  368,  411,    0,  368,  369,  416,  498,
    0,  274,    0,  268,  270,  366,  943,  241,    0,    0,
  368,    0,    0,  210,  366,    0,    0,    0,    0,  246,
  240,  243,  244,  245,  420,  457,  456,  419,  418,    0,
    0,    0,    0,    0,    0,  377,    0,  368,    0,  156,
  160,    0,  164,    0,    0,  529,  530,  547,    0,  544,
    0,    0,  536,  534,  535,    0,    0,    0,    0,  499,
    0,    0,    0,    0,  537,    0,    0,  366,    0,  201,
    0,  204,  206,  207,    0,    0,    0,    0,    0,  221,
   79,    0,    0,   78,  939,  517,  518,    0,    0,    0,
  761,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  342,  348,  349,  347,  746,    0,    0,    0,    0,
    0,    0,    0,    0,   54,   62,   64,    0,    0,   71,
    0,    0,    0,  749,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  927,  928,  929,  930,  931,
  932,  933,  934,    0,    0,    0,    0,    0,    0,  920,
    0,    0,    0,  661,    0,    0,  839,  840,  908,    0,
    0,  941,  835,    0,    0,    0,    0,    0,    0,  846,
  754,  753,    0,    0,    0,    0,  651,  652,    0,    0,
  644,  647,  555,  885,  590,  599,  594,  593,    0,  604,
  757,  726,  727,  366,    0,    0,  216,    0,    0,  613,
    0,    0,  622,  182,  176,  183,    0,  179,    0,    0,
  178,    0,  189,  170,  169,  883,  172,  171,  469,    0,
    0,    0,  410,  273,    0,  212,  368,  214,    0,  369,
  209,  215,    0,    0,    0,    0,  423,  424,  368,  366,
  369,    0,    0,    0,  395,    0,  197,  198,  157,    0,
    0,    0,    0,    0,    0,  545,    0,    0,  368,  369,
    0,  494,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  199,    0,    0,    0,    0,
  355,    0,   83,    0,    0,    0,    0,   88,   85,    0,
    0,    0,  944,  720,    0,    0,  772,    0,    0,    0,
  798,  797,    0,    0,    0,  805,  817,  815,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  760,    0,
   66,   58,   59,   65,   60,   61,    0,    0,   23,    0,
    0,    0,   43,    0,    0,    0,  731,  751,  714,    0,
  730,    0,    0,    0,    0,    0,    0,  221,    0,  891,
    0,    0,  906,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  916,    0,  926,    0,    0,
    0,    0,    0,    0,  907,  852,    0,    0,    0,    0,
    0,    0,  666,    0,    0,    0,    0,    0,  596,  597,
  601,    0,  200,    0,    0,  614,  615,  626,    0,    0,
    0,    0,    0,    0,  190,    0,    0,  406,  224,  225,
  226,  227,  228,  229,    0,    0,    0,  277,    0,  222,
    0,    0,    0,    0,  247,    0,  453,  454,  425,    0,
    0,    0,    0,    0,    0,  368,  473,  369,  940,  168,
    0,    0,  512,    0,  511,  548,    0,  540,    0,    0,
    0,  492,    0,  520,    0,    0,  522,  525,  527,  366,
    0,    0,    0,  120,    0,  205,  368,    0,    0,  367,
    0,   98,    0,  118,    0,   94,    0,    0,    0,    0,
   87,    0,  813,  814,    0,    0,    0,    0,    0,    0,
  816,    0,    0,    0,    0,    0,    0,    0,  806,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   57,   63,   55,   56,   24,  735,
  736,    0,  733,  740,  741,  738,    0,  712,    0,    0,
  897,  896,    0,    0,  893,  892,    0,  901,  900,  899,
  898,  895,  894,    0,    0,  922,    0,    0,    0,  921,
    0,    0,    0,  659,    0,    0,  654,    0,  655,    0,
  672,  668,  670,    0,    0,    0,    0,    0,  367,  619,
  620,    0,  184,  180,    0,    0,  195,  191,    0,  369,
  280,    0,    0,  369,  278,    0,    0,    0,  232,    0,
    0,  248,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  470,  514,    0,  515,    0,  135,    0,    0,    0,
  139,  141,  142,  143,  495,  497,  493,  524,    0,    0,
  369,    0,    0,    0,    0,  350,    0,  356,  368,   89,
    0,    0,   91,    0,    0,    0,    0,    0,    0,  819,
  818,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
    0,  715,  220,  909,  902,  903,    0,  904,  918,  917,
    0,  923,  912,    0,  913,    0,  657,    0,    0,  679,
    0,  676,  680,  681,  683,  684,  685,    0,    0,  628,
  369,  351,    0,  175,  192,  369,  145,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  285,  290,  284,    0,    0,    0,  294,  295,
  296,  297,  298,  299,  302,  304,  267,    0,  208,  233,
    0,    0,    0,    0,  234,  237,    0,    0,  369,  393,
  394,  390,  389,  392,  391,    0,  513,  541,  144,  132,
  140,    0,  368,  264,  127,  369,    0,  370,  357,    0,
    0,   92,   93,   80,    0,  784,  792,    0,  785,  793,
  788,  796,    0,    0,  786,  794,  787,  795,  781,  789,
  782,  790,  783,  791,  732,    0,  919,  660,    0,    0,
    0,    0,  696,  698,    0,  693,    0,  265,  185,  407,
    0,  310,    0,    0,    0,  306,    0,    0,    0,  305,
    0,  307,  293,  300,    0,  303,  286,    0,  291,    0,
  331,  292,  211,  235,    0,    0,  238,    0,  250,  252,
  397,  369,    0,  372,    0,    0,    0,   77,   95,    0,
  905,    0,    0,  682,  677,  697,    0,    0,  283,    0,
  308,    0,    0,    0,    0,    0,  301,    0,    0,  324,
  325,  339,    0,    0,    0,    0,  334,  332,  239,    0,
    0,    0,    0,    0,  266,  369,    0,    0,    0,  362,
  363,    0,    0,    0,    0,    0,  704,    0,    0,    0,
  282,  279,  309,    0,    0,    0,  312,    0,    0,    0,
  316,    0,  338,  948,  337,  336,    0,    0,    0,    0,
    0,  249,    0,  256,    0,  255,  373,    0,    0,    0,
    0,    0,  119,    0,  821,  706,  695,    0,    0,  707,
    0,  703,    0,    0,    0,    0,    0,    0,    0,    0,
  327,  326,  333,  335,  236,    0,    0,  260,  259,  258,
  365,    0,    0,    0,    0,  702,    0,  709,  319,    0,
    0,  311,    0,    0,    0,  328,  263,  261,  262,    0,
  358,    0,    0,    0,    0,  329,  313,    0,    0,  820,
    0,  708,  322,  314,    0,  711,
};
static short yydgoto[] = {                                      19,
   20,   21,   22,   23,   24,   25, 1499,   27,   28, 1500,
   30,   31,   32,   33,   34,   35,   36, 1501,   38, 1502,
  618,  103,  382,  873, 1119,  104,  648,  874,  105,  387,
  653,  128,  106,  107,  238,  944,  117,  875,  876,  179,
  208,  108,  877,  109,  389,   79,  219,  353,  436,  613,
 1056,  371,  833,  584,  493,  810,  614,  615,  616, 1058,
  220, 1310,   71,  169,   72,  214, 1763, 1262,  199,  204,
  206,  209,  195,  186,  189,  201,  211,  134,  290,  292,
  294,  342,  600,  602,  379,  239,  760,  518,  625,  993,
  346,  605, 1044, 1254,  551,  707, 1019,  503,  504,  533,
  338,  585, 1030, 1399,  729, 1198, 1400, 1401, 1402, 1403,
 1404,  626,  196,  187,  334,  558,  335,  336,  559,  560,
  561,  562, 1230,  987,  506,  507,  977,  975,  508,  981,
  976, 1189, 1363,  982,  983, 1194,  348,  821,  822,  823,
  824,  762, 1000, 1377,  586,  764,  438,  826,  933,  527,
 1324, 1199,  439,  440,  441,  924,  442, 1378, 1379,  536,
 1525, 1662, 1215,  770,  771,  758,  772,  773,  774, 1663,
 1664, 1739,  316,  531, 1206, 1503,  175,  528,  529, 1207,
 1208, 1372, 1640, 1504, 1505, 1506, 1507, 1610, 1508, 1509,
 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1685, 1726, 1649,
 1728,  443,  687, 1343,  444, 1064, 1611, 1656, 1657, 1695,
  374,  375,  445, 1049, 1260, 1416,    0,    0, 1050, 1051,
  121,  266,  466, 1626,  357, 1178, 1357, 1480, 1668, 1669,
 1670, 1671, 1176,  325,  547,  788, 1227,  548,  786,  202,
   56,  320,  180,  141,  303,  166,  310,  172,  748,  745,
  311,  321,  778,  322,  544, 1011,  167,  304,  515,  549,
 1228,   93,  177,  223,  587,  588,  750, 1031,  751, 1032,
 1033,  591,  592,  593,  594, 1024,  837,  595,  596,  597,
  803,  598,  495,  800,   40,   41,   42,  136,   58,  404,
  182,  327,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  713,  479,  959, 1181,  480,  481,  718,   43,  140,
  299,   44,  496,  497, 1186,  734,  973,  700,  122,  123,
  267,  467,  468,  469,  704,  945,  946,  947,  948, 1170,
  446, 1158, 1471, 1472,  447, 1474,  448,  449,  450,    0,
 1677, 1587, 1678, 1679, 1680, 1722, 1764,  394, 1130,   45,
   46,  358,   47,   48,  488,  489,  882, 1127, 1312, 1316,
  395,  656,  192,  627,  628,  629,  630,  631,  632,  633,
  634,  635,  636,  637, 1279, 1074, 1076, 1077,  931,  685,
  451,  452,  453,  454,  455,  378,  216,  456,  457,  914,
  458,  459,  460,  461,  677,  918, 1159, 1154,  678,
};
static short yysindex[] = {                                   2689,
 1351,   -3, 3009,   72, 1206,  428, 2856,  -71, 1427,   49,
  506, 1609,   -3,  962,  662,  334, 1256,  342,    0,  706,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  301,    0,    0,    0,    0,    0,    0, 8654,
  485,  518,  538,  334,  618,    0,    0,  694, 1076,  648,
  485,  726,  919,  538,  749,  334,  618,    0,  763,  791,
    0,   51,    0,  831,    0,    0,  949,  845,    0,  334,
  905,  485, 1055,  845,  726,  518,  538,  749,  334,  618,
  763,  791,    0,  538,  988,    0,    0,    0, 1356,    0,
 1356,    0, 1021, 1078,   64, 1422,    0,    0,    0,  648,
  334,  648, 1087, 1102, 1119,  143, 1671, 1077,  149,  157,
  471, 1070,    0,  726, 1213, 1044,    0,    0, 1150, 1120,
  538,  334,  763,    0,    0,    0,    0, 1318,  -14, 1312,
  -25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1026,    0,    0, 1076,    0,
  487,    0,    0, 1603,    0, 1124,    0,    0,  578,    0,
 1227,    0,    0, 1224,    0,    0, 1041,    0,    0, 1428,
    0,    0, 1076,    0,    0,    0,  453, 1603,    0,  563,
    0,    0, 1388,    0, 1393,    0,    0, 1356,    0,    0,
    0,    0,    0, 1376,    0,    0, 1255,    0,    0, 1394,
 1272,    0,    0,    0, 1255,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1050,    0,  648,    0,    0,    0,
  973, 1341,  750,  791,  766, 1419, 1725, 1456, 1462,  973,
 1385,  750, 1412, 1433, 1305,    0, 5813,    0,    0,    0,
 5813,    0,    0,    0,    0, 3912,    0,    0, 1386,  518,
 1477, 1373,  612,  334, 1406,    0,    0, 1044,    0,    0,
    0,    0,    0,    0,    0, 1405,    0,    0, 1603,    0,
 1388,    0, 1356,    0, -134, 1436,    0, 1424,    0,  705,
 1522, 1022,  -25,    0, 1589,   35,    0,  648,    0, 1026,
    0,    0,    0,    0,  648, 1469,  -43, 1414,  -29, 1838,
    0, 8693,    0,    0,  605,    0,    0,    0, 1822, 1822,
 1076, 1514, 1076, 2302, 1041,    0,    0, 5747,    0,  538,
  618,    0, 1469,    0,    0, 1606,  432, 1858,  334, 1637,
  518,    0,    0, 1864,  202, 1816,    0,    0,    0, 1444,
    0,    0,    0,    0, 1445, 1446,    0,    0, 1413,  719,
    0,    0,    0,    0, 1868,    0,    0,    0,  937,    0,
  334, 1478,    0,  538, 1455,    0,  132,    0,    0,    0,
    0,  334, 1405,  887,    0,  334,    0, 1592,  538, 1873,
  973, 1516,    0,  342, 1885, 1889, 1890,    0,    0, 1895,
 1898,    0, 1901, 1903,    0, 1904,    0,    0, 1907,    0,
    0,    0,    0,    0, 1910,    0,    0, 4466, 1916, 1918,
    0, 5813, 5813, 4694, 1500, 1924, 1791,    0,    0,    0,
    0,    0,    0, 1874,    0, 1925,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1927,    0, 2993,    0, 1655, 1933,    0,  -11,   48,
    0,  558,    0,  491,    0,  491,    0,    0, 1936,    0,
  156, 1559,    0,    0,    0,    0, 1948,   58, 1930, 1469,
 1952, 1739,    0, 1726, 1726, 1963,    0, 1965,    0, 1626,
    0,  341, 1665,    0,    0,    0,    0, 1076,    0, 1822,
 1822, 1822, 1822,    0, 1972,    0, 1741, 1746,    0,    0,
    0, 1731,    0, 5747,    0,    0, 5747, 1625,    0, 1603,
 1762, 1572, 4425,    0,    0,  -58,    0, 1572, 1207, 1124,
    0, 1640, 1602, 1569,    0,    0,    0,  -64, 1643,    0,
 1587,  749,    0, 1076,    0, 1771,    0,    0, 2302,    0,
    0,    0,    0,  177, 1607,    0,    0,    0, 1608,    0,
 1651, 2017,    0, 1710, 2021,   27,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1971,  145,
    0,    0,    0,    0,   54, 2023, 2026, 2021, 1603,    0,
 1749,    0, 1809,    0, 1076, 1076,    0,  -43,  578,    0,
 1690,    0, 1664, 2034,    0, 5835,  169,    0, 1691, 1697,
 2045, 2420, 2046, 1939, 4502,   -5,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1639,  719,  648,    0,    0, 1801, 1650,    0,    0,
 1629,  750,    0, 1772,    0, 1663, 2051,    0, 1772, 1801,
 1774, 1775,  538,    0,  650, 4780,  603,  726, 5813,  713,
  752,  884, 2348, 5813, 2420, 2993, 1645,  492, 5813, 4780,
  981,  981,  962, 2092, 2058,    0,    0, 4959, 1642, 5813,
 5813, 5813, 5813, 5813,    0, 5813,  138,    0,  133, 1647,
 4780, 1649,    0,    0,    0,  895,    0,    0,  368,    0,
 1652,    0,    0,    0,  334,  917,  334,    0,    0,  648,
 1405,    0,    0, 4780, 1844,  -43,    0, 1642,   51,   51,
 -134,  119,  648, 1666, 1076, 1076,    0,  397, 1587, 1587,
 1659,  749, 1022,    0,    0, 2079,    0,    0,    0,    0,
 1846,    0,  648,    0,    0,    0,    0,    0, 1850, 2087,
    0, 1827, 1853,    0,    0, 1796, 1797, 1356, 1869,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  749,
  648, 6775, 1761, 1776, 1777,    0,  749,    0,  732,    0,
    0, 1727,    0,   89, 1732,    0,    0,    0,  749,    0,
 2017,   92,    0,    0,    0, 1860,   92, 1740,   92,    0,
 2126,  749,  749,  749,    0, 1469,  334,    0, 1810,    0,
 1682,    0,    0,    0,  605, 1750,  334, 1695,   88,    0,
    0, 2134, 1905,    0,    0,    0,    0,  202, 1708, 1436,
    0, 1436, 3003,  189, 5813, 5813, 2571, 2135, 1125, 2655,
 5813, 2890,  627, 3125, 3207, 5023, 3360, 3442, 3677, 2420,
 2420,    0,    0,    0,    0,    0, 1455,  538,  618, 1455,
  763,  791,  135, 2133,    0,    0,    0, 1801, 1792,    0,
  441, 1813, 1405,    0, 4780, 1813, 2138, 2133, 1801,  459,
 1863, 5813, 5813, 1922, 5813, 2148, 5813, 2146, 2214, 5813,
 5813, 5813, 5813, 5813, 5813,    0,    0,    0,    0,    0,
    0,    0,    0, 1870, 1369,   25, 5813,  660, 4780,    0,
 2420, 2110, 2993,    0, 2149,  471,    0,    0,    0, 2993,
 1729,    0,    0, 1912,  981,  981, 1056, 1056,  717,    0,
    0,    0,  133, 2156, 2153,  893,    0,    0, 2420, 1871,
    0,    0,    0,    0,    0,    0,    0,    0,  -98,    0,
    0,    0,    0,    0, 1730, 1750,    0, 1698, 1698,    0,
 2154, 1696,    0,    0,    0,    0, 1751,    0, 1822, 1937,
    0,  397,    0,    0,    0,    0,    0,    0,    0, 2168,
 2420, 2160,    0,    0, 1909,    0,    0,    0, 2160,    0,
    0,    0, 1356, 1356, 1709, 2170,    0,    0,    0,    0,
    0,  -66,  -41,   11,    0, 1953,    0,    0,    0, 1755,
   72, 1759, 1789, 1846, 2177,    0, 1587, 1770,    0,    0,
  950,    0, 2161, 1755,  956,  749, 2179, 2180, 2181, 1968,
  578, 1909, 1822, 1665,  -43,    0, 1643,  962, 1782, 1798,
    0,   61,    0,  749, 1847, 1931, 5835,    0,    0,  749,
 1756, 1938,    0,    0, 2202, 2211,    0, 1677, 2993, 2213,
    0,    0, 2993, 2218, 5249,    0,    0,    0, 1919, 2233,
 2993, 2240, 1399, 2241, 2993, 2242, 5813, 5813, 2135, 5813,
 5313, 2243, 2993, 2244, 2245, 2993, 2247, 5813, 2993, 2249,
 2993, 2250, 2251, 2993, 2253, 2256, 2993, 2268,    0, 2049,
    0,    0,    0,    0,    0,    0, 1991, 1801,    0, 1801,
  135, 2133,    0,  209,  209,  179,    0,    0,    0, 1784,
    0, 2138, 2133, 2276,  459, 2285, 2400,    0, 2408,    0,
 2444, 5813,    0, 2456, 2488, 2533, 2555, 2660, 2808, 5813,
  749, 4780, 2993, 1887, 4780,    0, 5813,    0, 2022,  521,
 5813, 4780, 5813, 5813,    0,    0,  893, 2292, 4780, 1120,
  133, 1947,    0, 1955, 1956, 1990, 2061, 2009,    0,    0,
    0, 1909,    0, 1782,  535,    0,    0,    0, 1926, 1076,
 1957, 1587, 1958, 1587,    0, 2420,  418,    0,    0,    0,
    0,    0,    0,    0, 1917, 2080, 1909,    0, 5813,    0,
 2068, 1961, 1709,   51,    0, 2420,    0,    0,    0, 1976,
 1978, 1987, 1988, 1989, 1992,    0,    0,    0,    0,    0,
 2339,   72,    0, 1659,    0,    0,   92,    0, 2160, 2002,
   92,    0,   92,    0, 1846, 2341,    0,    0,    0,    0,
  605, 2080, 1587,    0, 1665,    0,    0,  471, 2106,    0,
   18,    0, 2154,    0, 2345,    0, 2350, 1076,  -56, 2351,
    0, 1076,    0,    0, 5813, 1975, 1975,  962, 2353, 1799,
    0, 1975, 1975, 5813, 1975, 1975, 2222, 2993,    0, 1654,
 5813, 2993, 1975, 1975, 1975, 1975, 2993, 1975, 1975, 1975,
 1975, 1975, 1975, 2018,    0,    0,    0,    0,    0,    0,
    0, 1966,    0,    0,    0,    0, 4780,    0,  459, 2276,
    0,    0, 5747, 2364,    0,    0, 2843,    0,    0,    0,
    0,    0,    0, 2919,  144,    0, 4780, 2097, 1974,    0,
 4780, 2943, 1805,    0, 1382, 2993,    0, 1806,    0,  893,
    0,    0,    0,  133, 1016, 2420, 2011, 2080,    0,    0,
    0, 1822,    0,    0, 1076,  732,    0,    0,  617,    0,
    0,  648, 3901,    0,    0, 2993, 1726, 2068,    0,  -68,
  334,    0, 2074,  640, 1973, 2075, 1994, 2117, 2095, 2144,
 1909,    0,    0, 2390,    0, 2411,    0, 2101, 1726, 2002,
    0,    0,    0,    0,    0,    0,    0,    0, 1909, 1643,
    0,  732, 1953, 3912, 2073,    0, 1750,    0,    0,    0,
 2090,  356,    0, 1846, 2094, 2993, 2423, 2426,  471,    0,
    0, 2427, 2428, 2993, 2430, 2433, 5813, 5813, 2993, 2434,
 2435, 2436, 2438, 2439, 2440, 2441, 2447, 2451, 2452,    0,
  209,    0,    0,    0,    0,    0,  749,    0,    0,    0,
 4780,    0,    0, 4780,    0, 1647,    0, 1170, 2215,    0,
 2465,    0,    0,    0,    0,    0,    0,   -5,  594,    0,
    0,    0, 1587,    0,    0,    0,    0, 5747,  139,  691,
 2445, 1436, 2470, 2171, 5813, 2455, 2471, 2457, 2459, 2468,
 2178, 2473,    0,    0,    0, 2228, 4583, 2477,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2497,    0,    0,
 2186, 2195,  334, 1709,    0,    0, 1356,  518,    0,    0,
    0,    0,    0,    0,    0, 2080,    0,    0,    0,    0,
    0, 2080,    0,    0,    0,    0, 2220,    0,    0, 5813,
 1076,    0,    0,    0, 1076,    0,    0, 5813,    0,    0,
    0,    0, 2993, 2993,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2501,    0,    0, 1871, 2420,
 1642, 1016,    0,    0, 2183,    0, 2514,    0,    0,    0,
  148,    0, 5493,  538, 5813,    0, 2219, 2420, 1763,    0,
 2420,    0,    0,    0,  161,    0,    0,   13,    0, 2103,
    0,    0,    0,    0, 1709, 1356,    0, 2172,    0,    0,
    0,    0, 1953,    0,  137, 1647, 2993,    0,    0, 1382,
    0, 2009,   -5,    0,    0,    0,  557, 2160,    0, 2507,
    0, 2761, 5578, 3037,  161,  700,    0,  714,  286,    0,
    0,    0,  485, 2107,   72,  171,    0,    0,    0, 2172,
  389, 1709, 2185, 2188,    0,    0,  137, 2535,  893,    0,
    0, 1871, 2536, 1647, 2011,  334,    0, 2542, 2540, 1220,
    0,    0,    0, 3996, 2174, 2545,    0,  386, 2150, 2286,
    0,  161,    0,    0,    0,    0, 3901,   13, 1709,  466,
  466,    0, 2288,    0, 2152,    0,    0,  893, 2551,  137,
 2255, 2009,    0, 1871,    0,    0,    0,  557, 2565,    0,
  518,    0, 2092, 1814,  125, 2548, 2314, 2304, 3901, 3901,
    0,    0,    0,    0,    0, 2151,  654,    0,    0,    0,
    0,  893,  137, 2011, 2009,    0,  518,    0,    0,  161,
 2568,    0, 1708, 3901, 2305,    0,    0,    0,    0, 1204,
    0, 2011, 2573, 2584, 1821,    0,    0, 3901, 2420,    0,
  518,    0,    0,    0,   -5,    0,
};
static short yyrindex[] = {                                      0,
    0,  167,  961,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  129, 2062,    0,    0,    0,    0,    0, 2626,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  740,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  329,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2246,    0,    0,    0,  304,    0,
  304,    0,    0,    0,    0, 2252,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  952,    0,    0,
 4149, 2297,    0,    0,    0, 1061,    0,    0,    0, 1158,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  136,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  446,    0,    0,    0,    0,  821,    0,
 1097,    0,    0,    0,    0,    0, 1768,    0,    0, 8734,
    0,    0,    0,    0,    0,    0,    0,  446,    0,  456,
    0,    0, 2591,    0,    0,    0,    0, 2369,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1139,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  943,    0,    0,    0,
    0,    0,    0,    0, 2176,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  321,    0,    0, 1161,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  446,    0,
 2591,    0, 2369,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1186,    0, 2360,    0,    0,    0,    0, 1191,
    0,    0,    0,    0,    0, 2376,  957, 5350,    0, 1214,
    0,    0,    0,    0,  193,    0,    0,    0, 2196, 2196,
    0,    0,    0, 1236, 2309,    0,    0,    0,    0,    0,
    0,    0, 2376,    0,    0, 1185,    0,    0,    0,    0,
    0,    0,    0, 6418, 2264,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1300,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1304,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1335,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 6117,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6282,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  122,    0,    0, 2338,    0,  158,    0,
    0,    0,    0,  409,    0,  409,    0,    0,  508,    0,
  708,  807,    0,   98,    0,    0,    0, 1111,    0, 2376,
    0,    0,    0,   66,   66,  828,    0,    0,    0,   87,
    0, 2914,  240,    0,    0,    0,    0,    0,    0, 2196,
 2196, 2196, 2196,    0,  375,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2397,
    0,    0,    0,    0,    0, 2360,    0,    0, 1395,    0,
  947, 2191,    0,    0,    0,    0,    0,    0,  745,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1347,    0,
    0,    0,    0, 1743, 1001,    0,    0,    0, 1309,    0,
    0,  665,    0,    0, 1541,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1945, 1946,
    0,    0,    0,    0, 1617, 1484,    0, 1541,  446,    0,
    0,    0,    0,    0,    0,    0,    0,  957, 1151,    0,
    0,    0,    0, 2269,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  123,    0,    0,    0,    0,  123,    0,
    0,    0,    0,    0, 5877,    0, 5877,    0,    0, 5877,
 5877, 5877,    0,    0,    0, 2224,    0,    0,    0,    0,
 6969, 7136, 4231,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  915,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  957,    0,    0,   86,   86,
    0,    0,    0,  285,    0,    0,    0, 2983,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  809,    0,    0,    0,    0,    0,    0,    0, 2623,    0,
    0,  324, 1452,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  774,  814,  825,    0,    0,    0, 2013,    0,
    0,    0,    0,    0, 1757,    0,    0,    0,    0,    0,
  665,    0,    0,    0,    0,  770,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2376,    0,    0,  355,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8531,    0,
    0,    0,  230,    0,    0,    0,    0, 2355,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1430, 1461,    0,    0,    0,    0,    0,    0,
    0, 1470,    0,    0,    0, 1470, 1474, 1476,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  619,    0,    0, 5877,    0,    0,    0, 1241,
    0,    0,    0, 6474, 7274, 7441, 6639, 6831,    0,    0,
    0,    0,    0, 3495,  802, 1296,    0,    0,    0,  951,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  734,  734,    0,
  113,    0,    0,    0,    0,    0,    0,    0, 2196, 2223,
    0, 3161,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2412,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1734,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1491,    0,    0,    0,    0,
    0,    0,    0, 1674,    0,    0,    0,    0,    0,    0,
    0,    0, 1181,    0,    0,    0,    0,    0,    0,    0,
 1151, 2412, 2196, 1498,  957,    0, 2421, 2062, 1519,  127,
    0,    0,    0,    0, 8531,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5013,    0,
    0,    0, 7543,    0,    0,    0,    0,    0,    0,    0,
 7579,    0, 7585,    0, 7673,    0,    0,    0,    0,    0,
    0,    0, 7756,    0,    0, 7767,    0,    0, 7869,    0,
 7905,    0,    0, 8006,    0,    0, 8035,    0,    0, 8664,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1430, 1534,    0, 2260,  279,    0,    0,    0,    0,    0,
    0, 1544, 1548, 1553,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2254,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2349, 1057,    0, 3734,
    0, 2362,    0, 2365, 2367,    0,    0, 1257,    0,    0,
    0, 2412,    0, 1519,    0,    0,    0,    0, 2900,    0,
    0,    0, 2230,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2238,    0, 2437,    0,    0,    0,
  657,    0, 1734, 2289,    0,    0,    0,    0,    0,  839,
  862,  865,  871,  889,  890,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  192,
    0,    0,    0,    0, 2227,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1561,    0,    0, 4149,    0,    0,
    0,    0, 1580,    0,    0,    0,    0,    0,  190,    0,
    0,    0,    0,    0,    0,    0,    0, 4231,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8119,    0, 8218,
    0, 8247,    0,    0,    0,    0, 8333,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1591,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1250,    0,    0,    0, 2129,
    0,    0,    0,    0,    0,    0,  852,    0,    0,    0,
    0, 2196,    0,    0,    0, 2413,    0,    0,    0,    0,
    0,    0, 2395,    0,    0, 2671, 1738,  796,    0, 2360,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2412,    0,    0,    0,    0,    0,    0,    0, 1623,  596,
    0,    0,    0,    0,    0,    0,    0,    0, 2412, 2421,
    0,  372,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  573,    0, 8365,    0,    0, 5877,    0,
    0,    0,    0, 8453,    0,    0,    0,    0, 8473,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  279,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  638,    0, 2349,  184,    0,
  351,    0,    0,    0,    0,    0,    0,  196, 2675,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2410,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1148,    0,    0,  109,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8581, 8601,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   74,    0,
    0,    0,    0,    0, 2681,    0,    0,    0,    0,    0,
 2663,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2414,
    0,    0,    0,    0, 1148,  111,    0,   90,    0,    0,
    0,    0,    0,    0,    0,  116, 2671,    0,    0,    0,
    0,   91, 3969,    0,    0,    0, 2675,    0,    0,    0,
    0,    0,   81,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  248,
    0, 1734,  440,  480,    0,    0,    0,  191,  786,    0,
    0,  232,    0,  638, 2685, 1325,    0,    0, 2686,    0,
    0,    0,    0,    0, 2669,  237,    0, 2424,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1148,    0,
    0,    0,    0,    0,    0,    0,    0, 2349, 1508,    0,
    0,  164,    0,   74,    0,    0,    0, 2675,    0,    0,
    0,    0, 2688,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  813,    0,   99,   91,    0,    0,    0,    0,    0,
 2674,    0,    0,    0, 3663,    0,    0,    0,    0, 2349,
    0, 2685, 2693,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1423,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2737,    0,    0, 2738,
    0,    0,    0,    0,    0,    0,    0,    8,    0, 2739,
    1,  254,  445, -572, 1619,  327,  -39,   47, 2733, 2494,
    0,  -40,    0, 2503,  -94,  -42,    0,  630, -832,  -31,
  -48,  -30, -174, 2505, 2098,    0,    0,    0, 1349,    0,
    0,  -50, 1694, -516,  -23, -789, 2140, 1923, -271, 1699,
 2677, -264,    0,  -57,    0, -649,  -49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -579,   30, 1711, -292,  472, -951,
    0,    0,    0,    0, -307,  -86,-1019, 1720, -295,  -47,
    0, -503,    0,    0, -468, -927,    0, 1365,    0,    0,
 2461, -593,  -28,    0,    0,    0,    0, 2432,    0, 2231,
 2472, -199, 1758, -689,    0,    0,    0, -681,    0,    0,
    0,    0,    0,    0, 1807,    0, 2482, 2081, 1760, 2483,
 2484,    0, 1218,    0, -492, 2047,  -59, -644, -704,    0,
    0, -129, -938, -936, -925, -219, -924,    0, 1434, -916,
    0, 1154,-1129, 1431,    0, 2277,    0,    0,    0, 1152,
 1155, 1116,  217, -266, -411, -294,    0,    0, 2076,    0,
 1630,    0,    0,  160,    0,    0,    0,    0, -162,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -748,
    0, -146,    0,-1111, -285, 1080, 1226,    0, 1132,    0,
    0, 2469, -100, 1878, 1656, 1486,    0,    0,    0, -526,
 -635, -850, 1432,    0, -471, -725,-1348,-1395,    0, -696,
 1189,  278, -398, -514, -705, -921,-1223,    0,    0,   -2,
    0,    0,    0,    0,    0, 2530,    0,    0,    0,    0,
 2547, 2318,    0,    0,    0,    0,    0, 2556,    0,    0,
    0,    0,  -16,    0,    0,    0, -320, 2053, -317, 1622,
 -426,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2262,    0,-1195, 2064,    0,    0,    0, 2462, 2857,    0,
    0,    0,    0,    0, 2593,    0,    0,    0,    0, 2401,
    0, 2393,    0,    0,    0, 2157,    0,    0,    0,    0,
    0,  -89,    0, 2143, 1906,    0,    0,-1197,    0, 2754,
 1328,    0, 2190, -620, 2175,    0, -836, 1944,    0,    0,
 -124, -652,    0, 1307,-1186,    0,-1161,-1116, -913,    0,
 1415,    0, 1175,    0, 1221,    0, 1128,    0,    0,    0,
    0, 2422,    0,    0,    0, -323, 2237, 2027, -984,    0,
    0,    0,  945,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2460, 1820, 1823,    0, -578,    0,
    0,    0, -223,    0,    0, 2554,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  110, 1767,    0,
};
#define YYTABLESIZE 9232
static short yytable[] = {                                     130,
  191,   76,  171,  193,   75,  288,  240,   37,  185,  494,
  174,  377,  190,  176,  522,  373,  722,  589,  260,  263,
  590,  198,  552,  967,  224,  203,  730,  925,  841,  761,
  844,  749,  259,  262,  752,  205,  228,  524,  557,  210,
  763,  200,  233,  708,  229,  894,  465,  926, 1211,  297,
  246,  235,  248, 1200,  978, 1201,  227, 1348,  232, 1219,
 1200,  234, 1201,  130,  230,  217, 1202, 1204,  388,  655,
  247, 1210,  231, 1202, 1204, 1163,  603,  388, 1240,  968,
  969,  916,  966, 1382,  293,  618,  625,  887,  289,  257,
  619,  291,  706,  812,  825,  269,  688,  942,  694,  834,
  237,  721,  514,  963, 1022,  372, 1167,  244,  743,  217,
  743,  995,  624,  350,  675,  689,   74,  939,  312, 1047,
 1002,  728,  734,  486,  217, 1257,  354, 1055,  563,  618,
  257,  687, 1021,  257,  376,  623, 1027,  688,  942,  320,
 1313,  942,  339,  954,  618,  625,  377, 1466,  257,  743,
  373,  743,  743,  971,  743,  688,  942,  694,  942, 1470,
  941,  487,  728,  687, 1750,  728,  563,  743, 1473,  743,
  498,  624,  943, 1042,  689,  652, 1667,  380, 1118,  941,
  728,  734,  435,  678, 1458,  354,  244,  563,  257, 1546,
  359,  137,  472, 1475,  623,  686,  261, 1592,  492,  717,
  383,  645,  739,  740,  741,  742,  499,  737, 1638,  383,
  650,  258,  589,   74, 1698,  590,  794, 1422,  435,  258,
  471,   74,  687,  725,  678,  563,  485,  678,  950, 1067,
   90,  675,  300,  478, 1235,  809,  686,  783, 1476,  464,
  372,  258,  678,  769,  532,  296,   74,  257,  523,  359,
  137,  472,  702,   74,  686,  526,  860,  191,  538,  539,
 1222,  766,  542,  557, 1129,  114, 1109, 1110,  487,  376,
   86,  258, 1220,   86,  784, 1652, 1392, 1417,  519, 1715,
  553,  301,  555, 1675,  627, 1306,  860, 1308,  257, 1009,
  675,  257,  806,  129, 1380,  318,  607,  599,  464,  795,
 1200,  611, 1201,  804,  658, 1121,  257, 1179,  609,  601,
 1521, 1397, 1224, 1202, 1204,  212, 1132, 1134,  595, 1182,
  586,  110,  520,  223,   73, 1653,  484, 1160,  565, 1692,
  217,   94, 1522,  485, 1350,  521, 1654,  519,  115, 1523,
  646,  649,  767,  627, 1691,  759, 1485,  743, 1761, 1225,
  674,  654,   76,  213,  126,  659,  649,  221, 1180,  661,
  383,  942,  942, 1744,  223, 1218, 1770,  223,  217,  595,
  253,  196,  805, 1524,  466, 1028, 1221,  942,  785,  586,
  736,  861,  223,  768,  217,  728, 1470,  565,  743,  111,
  743,  674, 1545,  302, 1617, 1473, 1762, 1197,  743, 1666,
  942, 1223,  942,   14,  618,  675,  217, 1414,  591,  674,
 1423,  861, 1258,  126,  343,  688,  942,  188, 1487,  377,
 1475,  808, 1517,  864, 1518,  688,  618,  625,  688, 1692,
  196,  188, 1674,  466,  940, 1048, 1314,  688,  942,  253,
 1655, 1477,  728,  254,  689,  494,  465,  689,  999,  703,
  860,  990,   57,  624,  992, 1407,  472,  738, 1370, 1544,
 1152, 1380, 1457,  252,  789, 1476, 1575,  591,  998,  368,
  675,  137, 1263,  765,  716, 1697,  623,  388,  645,  254,
  253,  465, 1054,  253,  688, 1659, 1306,  687, 1543,  743,
  734,  320,  743,  688,  743, 1016, 1280,  464,  253,   90,
  243,  811,  678,  791,  465,  490,  256,  592, 1364, 1344,
  356,  743,  689,  863,  686,  678, 1344, 1468,  743,  359,
  254,  188,  359,  254,  678,  257, 1251,  257,  790, 1588,
   73, 1686, 1702,  705, 1590,  257,  686,  688,  254,  694,
  834,  625,  865,  989, 1395, 1410,  464,  986,  191, 1040,
  256,  688,  743,  694,  819,  820,  689, 1057,  962, 1128,
  687,   76, 1320,  675, 1383,  563,  592,  624,  217, 1735,
  689,  678, 1724, 1062,  728,  861,  563, 1620, 1558,  188,
  678,  354,  728,  686,  866,  484,  651,  359,  618, 1117,
  472,  257,  686,  173, 1624,  138,  487,  127,  188,  168,
  942,  223, 1369,  223,  687, 1409,  498,  256,  617,  735,
  743,  223,  743,  521,   76,  256,  521,  836,  687,  954,
  649,  484, 1384,  891,  678,  627,  257,   73,  675,  835,
 1252,  359,  466,  617, 1554,   73,  686,  986,  678,  898,
  617,   86, 1429,  359,  896,  359,  519,  318,  257, 1727,
  686,  474,  984,  985,  138,  257,  230, 1486,  464,  662,
   73,  485,  662,  586,  549,  465,  191,   73, 1477,  674,
 1665, 1192,  675,  380,  478, 1673,  960,  662,  689,  860,
 1529,  466,  674, 1484,  974,  974,  675,  743,  138,  257,
 1700,  674, 1111,  526,  398, 1114, 1452,  230,  586, 1200,
  230, 1201,  223,  126, 1209,  549,  888,  602,  549,  269,
 1681, 1552, 1202, 1204, 1707,  230, 1217,  253,  988,  253,
  196, 1008, 1010,  549,  223,  549,  586,  253,  437,  586,
  264,  223,  462,  621, 1418, 1253, 1239,  464,  674,  611,
 1689,  139,  123,  313,  396,  586,  755,  674,   80,  257,
 1065,  591, 1066,  979, 1690,  549, 1007,  254,  487,  254,
 1164, 1124, 1478,  369,  137,  223,  602,  254,  377,  136,
 1358,  586, 1203,  382,  265,  377, 1041,  621,  112, 1203,
  606,  258,  860, 1057, 1015,  360, 1052,  867, 1037, 1038,
 1039,  674,  621,  466,  127,  231, 1025, 1005,  611,  919,
  920,  648,  135,  396,  861,  674,  587,  476,  521, 1166,
 1396, 1578,  361,  380,  591,  816, 1406,  591,  253, 1453,
  376,  314, 1115,  485,  381, 1112,  980,  610,  136,  360,
  344, 1701,  382,  591,  323,   76,  231, 1113,  387,  231,
  253, 1116,  648, 1736,  360,  662,  521,  253, 1553,  521,
  592,  694,  521, 1632,  231,  340,  361,  269,  254,  591,
  648,  388,  264,  545,  384,  587, 1323,  521,  711,  521,
  383,  361,  380,  368,  546,  138, 1634, 1125,  860,  376,
  254,  253,  521,  381, 1737,  592,  610,  254,  386,  385,
 1549,  341,  694,  183,  184,  474, 1688,  387, 1087,  676,
 1583,  860,  870,  681,  682,  684,  895,  861, 1519,  264,
  694, 1374,  324,  592,  689, 1088,  592,  123,  123,  386,
  388,  254,  549,  384, 1122, 1584,  662,  662,  345,  383,
 1540, 1738,  592, 1391,  242, 1133,  230, 1583,  549,  712,
  954,  253,  549,  921,  549,  168, 1712,  386,  385,  549,
  675,  561,  549,  892, 1758,  689, 1341, 1411,  592,  737,
 1089,  860, 1584,  709, 1413,  549,  689, 1155, 1156,  689,
 1708,  549,  264,  689,  549,  860, 1751,  645,  170, 1536,
  644,  254,  275, 1585,  521,  191, 1633,  124, 1745, 1090,
 1344,  675,  380, 1241, 1579, 1591,  475, 1542,  173, 1241,
  531, 1765,  589,  861, 1646,  590, 1759, 1648,  396,  675,
  561,  264, 1246, 1742,  360,  377,  900,  127,   76, 1203,
 1585, 1231,  693, 1311, 1311, 1315,  861,  694, 1360,  662,
 1266, 1344, 1212, 1213,  689,  242, 1270,  382, 1361,  521,
  531,  531, 1242,  549,  531, 1349, 1760,  136, 1245,  136,
  602,  476,  621,  501, 1483,  902, 1091,  242,  611,  531,
  570,  531,  502, 1481,  242,  549,  521,   96,  477, 1469,
  662,  361,  549,  242,  621,  231,  549,  380,  178,  376,
  611, 1264,  521,  549,  376,  602,  861,  769,  381,  370,
  376,  531,  125, 1594,  369,  843,  567,  465,  242,  126,
  861,  549,  387,  181,   98, 1366,  549, 1368,  188,  521,
  689, 1157,  258,  602,  360,  521,  602,  360,  521,  570,
  648,   76,   76, 1017, 1018,  388, 1550, 1335,  384,  673,
  648,  549,  602,  648,  383,  549, 1595,  464,  343,  974,
  899,  361,  648,  264,  361,  915,  610,  251,  136,  587,
  922,  923,  386,  385, 1672,  567,  673,  665,  602,  930,
  569,  934,  935,  936,  937,  938, 1412,  930,  610,  689,
  694,  382,  464,   99,  242, 1775,  362,  363,  364,  197,
  183,  184,  360,  100,  587,  403,  194,  904,  251,  648,
  404,  251,  694,  385,  465,  464,  242,  343,  648,  365,
  366,  665, 1714,  242,  367,  368,  251,   73,  101,  361,
  386,  380,  587,  400, 1172,  587,  665, 1421,  376,  569,
  521, 1425,  381,  207,  496,  116,  360,  521, 1173,   76,
  498,  587, 1394,  689,  242,  161,  387,  242,  360,  694,
  360, 1621,  648,  689,  403,  521,  689, 1622,  487,  404,
 1623,  102, 1174,  361,  648,  689,  687,  587,  531,  388,
  689, 1336,  384,  116, 1338,  361,  690,  361,  383,  675,
 1711,  217,  400,  496,  531,  521,  242,  531,  531,  521,
  531,  853,  675,  305,  853,  531,  386,  385,  531,  215,
  854,  675,  694,  854,  161,  649, 1469,  687,  116,  341,
  510,  531,  689,   44,   14,  218, 1175,  531,  532, 1711,
  531,  689,  191,  485,  974,  687, 1068, 1069, 1073, 1651,
  957, 1081, 1083, 1085, 1488, 1093, 1096, 1099, 1101, 1104,
 1107,  657,  306,  853,   52,  689,  649,  958,  675,  649,
 1527,  690,  854, 1711,  942,  360,  162,  675,  532,  532,
 1311,  511,  532,  256,  649,  689,  464,  242,  341, 1651,
  748, 1711,   44, 1136, 1137,  222, 1139,  532, 1141,  532,
  411, 1144, 1145, 1146, 1147, 1148, 1149,  225,  651,  531,
  953,  317,  487,  445,  318,  512,  271,  748, 1153,  236,
  923,  675,  651,   52,  458,  237, 1589,  329,  242,  532,
  651,  531,  361,  513,  241,  162, 1732,  381,  531,  376,
  693,  691,  531,  692,  377,  694,  651,  942, 1203,  531,
  376,  272,  364,  693,  691,  251,  692,  251,  694,   42,
  319, 1593, 1618,  127,  330,  251,  331,  531,  458, 1651,
  693,  691,  531,  692,  307,  694, 1459,  485,   76,  273,
 1462,  488,  274,  458, 1576,  119,  120,  498, 1650,  332,
   25,  242,  308,  364, 1651,  245,  364,  531,  275,  739,
  651,  531,  249,   48,   73,   50,  418, 1078, 1619,  665,
  498,  364, 1616,  526,  333,  250,  665,  419,   42,  665,
  474, 1172,  488,  665,  276,  488,  309,  128, 1650, 1597,
 1628,  665,  251, 1079, 1629, 1173,  425,  362,  363,  364,
  488,  183,  184,  255,  428,  429,  430,  665,  371,   25,
  498, 1660,   77,   78,  526, 1172,  251,  526,  739, 1174,
  365,  366,   48,   26,   50,  367,  368,  183,  184, 1173,
  539,  665,  526,   49,  526, 1731,  930,   51,  251,  474,
  270, 1643,   46, 1580,  665,  251,  128, 1719, 1287, 1288,
  129, 1290, 1292, 1174,  120,  354,  532,  498,  286, 1297,
 1577,  665,  487,  359,  526,  687,  665,  371, 1650,  117,
  287,  539,  532, 1175,  539,  532,  532, 1769,  532,  251,
   47,  295,   26,  532, 1720, 1693,  532,  687,  665,  539,
  498,  539,   49, 1650,  487,  487,   51, 1721,  130,  532,
  665,   46,  665, 1327,  649,  532,  523, 1175,  532,  129,
 1676, 1334,  217,  923,  649,  498,  923,  649, 1153,  487,
  298,  539, 1342,  923, 1345, 1346,  649,  485,  117,  673,
  923,  942,  315,  487,  687,   49,  124,  124,  689,   47,
  130,  326,   76,  687,  690, 1696,   50,  523,  131, 1676,
  523,  689,  705,   51,  961,  754, 1609,  690,  753,  485,
  485, 1748,  776,  521,  777,  523,  942,  523,  689,  862,
 1376,  217,  643,  649,  690,  328,   95,  532,   52, 1151,
  132,  337,  649,  130,  485,  693,  691,  687,  692,  705,
  694, 1676,  699,  884,  347,  133,  883,  523,  485,  532,
 1284,  349,  705,  351,  521,  352,  532,  521,  693,  691,
  532,  692, 1046,  694,  356, 1045,  130,  532,   96,  488,
  355,  488,  521,  251,  521, 1053,  649,  217,  830,  488,
   97,  526,  519,  384,  364,  532, 1426, 1305,  649, 1307,
  532,  364,  488,   53,  364, 1434,  516,  526,  364,  392,
  526,  526, 1439,  526,  393,   98,  364,  152,  526, 1165,
 1183,  526, 1164, 1045,  251,  532,  396,  251,  217,  532,
  397,  217,  364,  519,  526,   54,  519,  399,  464,   55,
  526, 1191,  251,  526, 1190,  401,  217,  516,  539, 1233,
  516,  519, 1232,  519,  693,  691,  364,  692,  923,  694,
 1238,  403,  923, 1237,  539,  516,  402,  516,  539,  364,
  539, 1647,  470,  473, 1318,  539,  152, 1317,  539,  362,
  488,  695,  693,  691,   99,  692,  364,  694,  472, 1431,
  482,  539, 1164,  362,  100, 1465, 1467,  539, 1464, 1464,
  539,  362,  488,   14, 1749,  624, 1733, 1464,  432,  488,
  433, 1773,  526,  364, 1692,  484,  500,  362,   95,  101,
  362,  363,  364,  435,  523,  364,  517,  364,  258,  509,
  530,  540,  550,  537,  526,  464,  554,  102, 1755, 1756,
  523,  526,  604,  488,  523,  526,  523,  608,  367,  368,
  610,  523,  526,  612,  523,  638,  639,  640, 1563, 1564,
   96,  643,  660, 1767,  647,  386,  652,  523,  663,  539,
  526,  362,   97,  523,  665,  526,  523, 1774,  666,  667,
   95,  521,  923,  689,  668,  923,  113,  669, 1275,  690,
  670,  539,  671,  672,  498,  521,  673,   98,  539,  674,
  526,  521,  539,  521,  526,  679,  689,  680,  521,  539,
  686,  521,  690,  688,  696, 1438, 1599,  698,  693,  691,
  697,  692,   96,  694,  521,  699,  701,  539,  624,  715,
  521,  432,  539,  433,   97,  498,  521,  719,  498,  521,
  724,  726,  893,  720,  897,  523,  435,  901,  903,  905,
  519,  258,  727,  498,  521,  728,  731,  539,  733,   98,
  732,  539,  196,  501,  516,  743,   99,  523,  744,  519,
  519, 1627,  519,  746,  523,  756,  100,  519,  523, 1630,
  519,  747,  757,  516,  516,  523,  516,  780,  781,  782,
  787,  516,  689,  519,  516,  256,  152,  792,  690,  519,
  798,  101,  521,  523,  796,  797,  799,  516,  523,  801,
  802,  807,  813,  516, 1642,  814, 1644,  817,  152,  102,
  689,  196,  818,  827,  521,  829,  690,  830,   99,  839,
  838,  521,  405,  523,  840,  842,  878,  523,  100,  881,
  885,  406,  521,  879,  889,  890,  917,  152,  928,  949,
  955,  632,  932,  632,  632,  407,  632,  964,  620,  703,
  521,  360,  408,  101,  923,  521,  152,  986,  991,  632,
  972,  519,  808,  996,  632,  152,  997,  999,  650,  867,
  621,  152,  927,  693,  691,  516,  692,  759,  694,  409,
 1003, 1004,  410,  519,  521, 1020, 1006, 1012, 1023,  152,
  519,  693,  691, 1161,  692, 1723,  694,  516, 1034,  519,
 1029,  519, 1013, 1014,  516, 1036, 1043, 1048, 1063,  650,
  411,  412,  650, 1060, 1075,  516, 1120, 1123, 1061,  519,
 1126, 1118,  413, 1135,  519, 1138,  414,  650, 1140, 1142,
 1150,  689, 1162,  516,  622, 1169, 1171,  644,  516, 1177,
 1185, 1188, 1193,  868,  369,  405,  689, 1196, 1205, 1216,
 1214, 1234,  690,  519,  406, 1229, 1226, 1236, 1243, 1247,
 1248, 1249,  498,  521,  498,  521,  521,  516,  407,  498,
  521, 1250,  498,  521,  360,  408, 1259,  623, 1261,  869,
 1268, 1054, 1273,  415,  870,  498,  521, 1272, 1271,  416,
  871, 1274, 1276,  621, 1143,  693,  691, 1277,  692,  417,
  694,  386,  409,  693,  691,  410,  692,  521,  694,  872,
  521, 1281, 1282,  362,  363,  364,  418,  183,  184, 1283,
 1285, 1286, 1293, 1294, 1295,  521, 1296,  419, 1298, 1299,
 1300,  196, 1301,  411,  412, 1302,  365,  366,  420,  421,
  422,  367,  368,  423,  424,  413,  425, 1303,  153,  414,
  860,  426,  427,  196,  428,  429,  430,  622, 1304, 1319,
  431,  632, 1337,  498,  521, 1321,  693,  691,  632,  692,
 1340,  694, 1347, 1354, 1355, 1351,  630,  632,  630,  630,
 1356,  630,  196, 1352, 1353,  498,  521, 1365, 1362, 1367,
 1373,  632,  498,  521,  630,  532,  683,  632,  632,  630,
  623,  196, 1385, 1371, 1386,  632,  415,  153, 1381,  196,
  196,  689,  416, 1387, 1388, 1389,  196,  690, 1390, 1393,
 1398, 1408,  417, 1415, 1419,  632,  498,  521,  632,  689,
 1420, 1424, 1278, 1430,  196,  690,  362,  363,  364,  418,
  183,  184, 1451, 1450, 1454, 1460,  196, 1479,  196, 1461,
  419, 1528,  196, 1531,  632, 1530,  632,  632, 1533,  365,
  366,  420,  421,  422,  367,  368,  423,  424,  632,  425,
 1537,  196,  632, 1534,  426,  427, 1532,  428,  429,  430,
 1322,  693,  691,  431,  692, 1535,  694,  650, 1325,  693,
  691, 1538,  692, 1539,  694,  360,  196,  650, 1548,  624,
  650, 1551,  432, 1556,  433, 1555, 1557, 1559, 1560,  650,
 1561,  196,  673, 1562, 1565, 1566, 1567,  435, 1568, 1569,
 1570, 1571,  258, 1437, 1326,  693,  691, 1572,  692,  632,
  694, 1573, 1574,  689, 1581,  632, 1328,  693,  691,  690,
  692,  689,  694, 1596,  521,  632,  521,  690, 1582, 1598,
 1601,  111,  361, 1600,  521, 1602,  650, 1603, 1605,  632,
  632,  632,  632,  632,  632,  650, 1604,  521, 1329,  693,
  691, 1606,  692,  632,  694, 1612, 1607, 1613, 1614, 1615,
 1625, 1631,  632,  632,  632,  632,  632,  632,  632,  632,
  632, 1636,  632, 1637, 1608, 1661,  630,  632,  632, 1645,
  632,  632,  632,  630,  689, 1682,  632, 1694, 1703,  650,
  690, 1705,  630, 1330,  693,  691, 1713,  692, 1710,  694,
  510,  650, 1717, 1718, 1725, 1729,  630,  153, 1464, 1700,
 1730, 1741,  630,  630, 1701, 1331,  693,  691, 1743,  692,
  630,  694,  556,  417, 1747,  521, 1752, 1753, 1754,  153,
  434, 1692, 1768,  432, 1757,  433, 1771,  362,  363,  364,
  630,  183,  184,  630, 1772,    1,  618,  521,  435,   30,
  203,  511,  743,  258,  521,   32,  559,  368,  153,  271,
  365,  366,  420,  421,  422,  367,  368,  423,  424,  630,
  501,  630,  630,  519,  149,  426,  427,  153,  641,  502,
  269,  455,  213,  630,  519,  512,  153,  630,  521, 1082,
  196, 1086,  153, 1094, 1097,  925, 1102, 1105, 1108,  689,
   82,  193,  276,  513,  396,  690,  405,  689,  194,  924,
  153,  196,  673,  690,  434,  406,  519,  432,  281,  433,
 1332,  693,  691,  289,  692,  671,  694,  275,  667,  407,
  669,  369,  435,  196,  700,  360,  408,  258,  287,  196,
  699,  223,  288,  689,  630,  694,  701,  323,  330,  690,
  630,  662,  321,  710,  621,  689,   26,   29,   39, 1309,
  630,  690,  196,  409,  116,  400,  410,  391,  390,  880,
 1269,  828, 1059, 1267,  630,  630,  630,  630,  630,  630,
  226,  196, 1265, 1255, 1541,  519,  563,  689,  630,  196,
  196,  505,  491,  690,  411,  412,  196,  630,  630,  630,
  630,  630,  630,  630,  630,  630,  413,  630, 1195,  793,
  414, 1244,  630,  630,  196,  630,  630,  630,  622,  534,
  535,  630,  693,  691, 1256,  692,  965,  694, 1639, 1001,
 1526, 1520,  689, 1699,  775, 1706, 1740, 1704,  690, 1683,
  906,  907,  908,  909,  910,  911,  912,  913,  994, 1734,
 1070,  196, 1766, 1071,  689, 1658, 1375,  405,  642, 1359,
  690,  623,  196, 1184, 1482, 1547,  406,  415, 1333,  693,
  691,  543,  692,  416,  694, 1709,  525,  779,  516,  815,
  407, 1035, 1405,  417, 1026,  664,  360,  408,  714,  118,
  483,  956,  710,  970, 1187,  268,  952,  362,  363,  364,
  418,  183,  184, 1455,  693,  691, 1168,  692, 1635,  694,
  951,  419, 1746, 1586,  409,  886, 1716,  410, 1776,  181,
  365,  366,  420,  421,  422,  367,  368,  423,  424,  723,
  425, 1289, 1131,  177, 1080,  426,  427, 1071,  428,  429,
  430,  405,  641, 1339,  431,  411,  412,    0,    0,  434,
  406,    0,  432,    0,  433,    0,    0,  413,    0,  689,
  181,  414,    0,  181,  407,  690,    0,  435,    0,    1,
  360,  408,  258,    0,    0,    0,    0,    0,  181, 1456,
  693,  691,    0,  692,    0,  694,    0,    0,    0,    0,
    0,    2,  177,    0,    0,    0,    0,    0,  409,    3,
    0,  410,  187, 1463,  693,  691,    4,  692,    5,  694,
    6,    0,    0,    0,    0,    7, 1072,    0,  415,    0,
    0,    0,    8,    0,  416,    0,    0,    0,    0,  411,
  412,    0,    0,    0,  417,    0,    9,    0,    0,    0,
    0,  413,    0,    0,    0,  414,    0,   10,  362,  363,
  364,  418,  183,  184,  693,  691,    0,  692,    0,  694,
  689,  187,  419,  927,  693,  691,  690,  692,    0,  694,
    0,  365,  366,  420,  421,  422,  367,  368,  423,  424,
    0,  425,  858,  857,  859,    0,  426,  427,    0,  428,
  429,  430,    0,    0,    0,  431,    0,    0,  693,  691,
 1072,  692,  415,  694,    0,    0,    0,  689,  416,    0,
    0,    0,    0,  690,   11, 1687,    0,    0,  417,    0,
    0,   12,    0,    0,   13,    0,   14,   15,    0,    0,
    0,    0,  362,  363,  364,  418,  183,  184,    0,    0,
    0,    0,  689,    0,    0,    0,  419,    0,  690,    0,
    0,   16,    0,    0,    0,  365,  366,  420,  421,  422,
  367,  368,  423,  424,    0,  425,    0,    0,    0, 1084,
  426,  427, 1071,  428,  429,  430,  405,  181,    0,  431,
  188,   81,    0,    0,  434,  406,    0,  432,   82,  433,
    0,  177,   83,   84,    0,    0,    0,    0,  181,  407,
   17,   85,  435,    0,    0,  360,  408,  258,    0,    0,
    0,    0,  177,   86,    0,   18,    0,    0,  689,    0,
  181,    0,    0,    0,  690,    0,  181,    0,    0,    0,
    0,    0,    0,  409,  177,    0,  410,    0,    0,  188,
  177,    0,  689,    0,    0,    0,    0,    0,  690,  181,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  187,    0,    0,  177,  411,  412,  434,    0,  181,  432,
    0,  433,    0,    0,    0,    0,  413,  181,   87,    0,
  414,  187,  177,  181,  435,    0,    0,    0,    0,  258,
    0,  177,  689,    0,  845,   88,    0,  177,  690,    0,
    0,  181,  689,  187,    0,    0,    0,    0,  690,  187,
   89,  846,    0,    0,   90,  177,    0,    0,    0,    0,
    0,    0,    0,   59,    0,   91,    0,    0,    0,    0,
    0,    0,  187,    0,   60, 1072,  689,  415,  181,    0,
    0,   61,  690,  416,   92,    0,    0,  847,    0,    0,
    0,  187,  177,  417,   62,    0,  848,    0,    0,    0,
  187,    0,    0,    0,  849,    0,  187,  362,  363,  364,
  418,  183,  184,    0,    0,    0,    0,    0,    0,    0,
    0,  419,    0,  850,  187,  851,    0,    0,    0,    0,
  365,  366,  420,  421,  422,  367,  368,  423,  424,  852,
  425,  853,  854,  855, 1092,  426,  427, 1071,  428,  429,
  430,  405,    0,    0,  431,   63,    0,    0,    0,  434,
  406,  187,  432,    0,  433,    0,    0,    0,    0,    0,
    0,   64,    0,    0,  407,    0,    0,  435,  188,    0,
  360,  408,  258,    0,    0,    0,    0,    0,   65,    0,
    0,    0,  856,    0,    0,    0,    0,    0,    0,  188,
    0,    0,    0,   66,    0,    0,    0,   67,  409,    0,
   68,  410,    0,    0,    0,    0,    0,    0,   69,    0,
    0,  188,    0,    0,    0,    0, 1095,  188,    0, 1071,
    0,    0,    0,  405,    0,    0,    0,   70,    0,  411,
  412,  434,  406,    0,  432,    0,  433,    0,    0,    0,
  188,  413,    0,    0,  658,  414,  407,    0,    0,  435,
    0,    0,  360,  408,  258,    0,    0,    0,    0,  188,
    0,    0,    0,    0,    0,    0,    0,    0,  188,    0,
    0,    0,    0,    0,  188,    0,    0,    0,    0,    0,
  409,    0,    0,  410,    0,  658,    0,    0,  658,    0,
    0,    0,  188,    0,    0,    0,    0,    0,    0,    0,
 1072,    0,  415,  658,    0,    0,    0,    0,  416,    0,
    0,  411,  412,    0,    0,    0,    0,    0,  417,    0,
    0,    0,    0,  413,    0,    0,    0,  414,    0,  188,
    0,    0,  362,  363,  364,  418,  183,  184,    0,    0,
    0,    0,    0,    0,    0,    0,  419,    0,    0,    0,
    0,    0,    0,    0,    0,  365,  366,  420,  421,  422,
  367,  368,  423,  424,    0,  425,    0,    0,    0, 1100,
  426,  427, 1071,  428,  429,  430,  405,    0,    0,  431,
    0,    0, 1072,    0,  415,  406,    0,    0,    0,    0,
  416,    0,    0,    0,    0,    0,    0,    0,    0,  407,
  417,    0,    0,    0,    0,  360,  408,    0,    0,    0,
    0,    0,    0,    0,  362,  363,  364,  418,  183,  184,
    0,    0,    0,    0,    0,    0,    0,    0,  419,    0,
    0,    0,    0,  409,    0,    0,  410,  365,  366,  420,
  421,  422,  367,  368,  423,  424,    0,  425,    0,    0,
    0, 1103,  426,  427, 1071,  428,  429,  430,  405,    0,
    0,  431,    0,    0,  411,  412,  434,  406,    0,  432,
    0,  433,    0,    0,    0,    0,  413,    0,    0,    0,
  414,  407,    0,  656,  435, 1427, 1428,  360,  408,  258,
    0, 1432, 1433,    0, 1435, 1436,    0,    0,    0,    0,
    0,    0, 1440, 1441, 1442, 1443,    0, 1444, 1445, 1446,
 1447, 1448, 1449,    0,    0,  409,    0,    0,  410,    0,
    0,    0,    0,    0,  656,    0,    0,  656,    0,    0,
    0,    0,    0,    0,    0, 1072,    0,  415,    0,    0,
    0,    0,  656,  416,    0,    0,  411,  412,    0,    0,
    0,    0,    0,  417,    0,    0,    0,    0,  413,    0,
    0,    0,  414,  658,    0,    0,  658,  362,  363,  364,
  418,  183,  184,  658,    0,    0,  658,    0,    0,    0,
  658,  419,    0,    0,    0,  658,    0,    0,  658,    0,
  365,  366,  420,  421,  422,  367,  368,  423,  424,    0,
  425,    0,    0,    0,  658,  426,  427,    0,  428,  429,
  430,    0,    0,    0,  431,    0,    0, 1072,    0,  415,
    0,    0,    0,    0,    0,  416,    0,    0,  658,    0,
    0,    0,  658,    0,    0,  417,    0,    0,    0,    0,
    0,  658,    0,    0,    0,    0,    0,    0,    0,  362,
  363,  364,  418,  183,  184,    0,    0,    0,  658,    0,
    0,    0,    0,  419,    0,    0,    0,    0,    0,    0,
    0,    0,  365,  366,  420,  421,  422,  367,  368,  423,
  424,    0,  425,  315,    0,  658, 1106,  426,  427, 1071,
  428,  429,  430,  405,    0,    0,  431,  658,    0,    0,
    0,  434,  406,  463,  432,  658,  433,    0,    0,    0,
    0,    0,    0,    0,  315,    0,  407,    0,  653,  435,
    0,  315,  360,  408,  258,  315,  315,    0,  315,    0,
    0,  315,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  315,    0,    0,    0,    0,
  409,  315,    0,  410,    0,    0,    0,    0,    0,  653,
    0,    0,  653,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  653,    0,    0,
    0,  411,  412,    0,    0,  434,    0,    0,  432,    0,
  433,    0,    0,  413,    0,    0,    0,  414,    0,    0,
    0,    0,  656,  435,    0,  656,    0,    0,  258,    0,
    0,  315,  656,    0,    0,  656,    0,    0,    0,  656,
    0,    0,    0,    0,  656,    0,    0,  656,    0,    0,
  315,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  656,    0,  315,    0,    0,    0,    0,
    0,    0, 1072,    0,  415,  315,    0,    0,    0,    0,
  416,    0,    0,    0,  315,    0,  315,  656,    0,    0,
  417,  656,    0,  315,    0,    0,    0,    0,    0,    0,
  656,    0,    0,    0,  362,  363,  364,  418,  183,  184,
    0,    0,    0,    0,    0,    0,    0,  656,  419,    0,
    0,    0,  315,    0,    0,    0,    0,  365,  366,  420,
  421,  422,  367,  368,  423,  424,    0,  425,    0,    0,
    0, 1373,  426,  427,  656,  428,  429,  430,  405,    0,
    0,  431,    0,    0,    0,    0,  656,  406,  936,    0,
  936,  936,    0,  936,    0,    0,    0,    0,    0,    0,
    0,  407,    6,    0,    0,    0,  936,  360,  408,    0,
    0,  936,    0, 1489, 1490,    0, 1491,    0,    0, 1492,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1493,    0,  409,    0,    0,  410, 1494,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  405,    0,  361,    0,  411,  412,    0,    0,
  632,  406,    0,  632,    0,  632,    0,    0,  413,    0,
    0,    0,  414,    0,    0,  407,    0,  653,  632,    0,
  653,  360,  408,  632,    0,    0,    0,  653,    0, 1495,
  653,    0,    0,    0,  653,    0,    0,    0,    0,  653,
    0,    0,  653,    0,    0,    0,    0,    0,   14,  409,
    0,    0,  410,    0,    0,    0,    0,    0,  653,    0,
    0,    0,    0, 1496,    0,    0,    0,    0,    0,  415,
    0,    0,    0,   16,    0,  416,    0,    0,  361,    0,
  411,  412,  653,    0, 1497,  417,  653,    0,    0,    0,
    0,  484,  413,    0,    0,  653,  414,    0,    0,  362,
  363,  364,  418,  183,  184,    0,    0,    0,    0,    0,
    0,    0,  653,  419,    0,    0,    0,    0,    0,    0,
 1498,    0,  365,  366,  420,  421,  422,  367,  368,  423,
  424,    0,  425,    0,    0,    0,    0,  426,  427,  653,
  428,  429,  430,  683,    0,  936,  431,    0,    0,    0,
    0,  653,    0,  415,  936,    0,    0,    0,    0,  416,
    0,    0,    0,    0,    0,    0,    0,    0,  936,  417,
    0,    0,    0,    0,  936,  936,    0,    0,    0,    0,
    0,    0,    0,  362,  363,  364,  418,  183,  184,    0,
    0,    0,    0,    0,    0,    0,    0,  419,    0,    0,
    0,    0,  936,    0,    0,  936,  365,  366,  420,  421,
  422,  367,  368,  423,  424,    0,  425,    0,    0,    0,
  632,  426,  427,    0,  428,  429,  430,  632,    0,    0,
  431,  936,    0,  936,  936,  434,  632,    0,  432,    0,
  433,    0,    0,    0,    0,  936,    0,    0,    0,  936,
  632,    0,    0,  435,    0,    0,  632,  632,  258,    0,
    0,    0,    0,    0,  632,    0,    0,    0,    0,    0,
    0,    0,    0,  693,  691,    0,  692,    0,  694,    0,
    0,    0,    0,    0,  632,    0,    0,  632,    0,    0,
    0,  858,  857,  859,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  936,    0,    0,    0,
    0,    0,  936,    0,    0,  632,  632,    0,    0,    0,
    0,    0,  936,    0,    0,    0,    0,  632,    0,    0,
    0,  632,    0,    0,    0,    0,  936,  936,  936,  936,
  936,  936,    0,    0,    0,    0,    0,    0,    0,    0,
  936,    0,    0,    0,    0,    0,    0,    0,    0,  936,
  936,  936,  936,  936,  936,  936,  936,  936,    0,  936,
    0,    0,    0,    0,  936,  936,    0,  936,  936,  936,
    0,    0,    0,  936,    0,    0,    0,    0,  632,    0,
    0,    0,    0,    0,  632,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  632,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  632,  632,
  632,  632,  632,  632,    0,    0,    0,  564,    0,    0,
    0,  565,  632,    0,    0,    0,    0,    0,    0,  759,
    0,  632,  632,  632,  632,  632,  632,  632,  632,  632,
  566,  632,    0,  567,    0,    0,  632,  632,    0,  632,
  632,  632,  405,  434,    0,  632,  432,    0,  433,    0,
    0,  406,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  435,    0,    0,    0,  407,  258,    0,    0,    0,
    0,  360,  408,    0,  568,    0,    0,    0,    0,    0,
  569,  570,  571,  845,  572,  573,  574,    0,  575,    0,
    0,  689,    0,    0,    0,    0,    0,  690,    0,  409,
  846,    0,  410,    0,    0,    0,    0,    0,  576,    0,
  577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  434,
  411,  412,  432,    0,  433,    0,  847,    0,    0,    0,
    0,  578,  413,    0,    0,  848,  414,  435,    0,    0,
    0,    0,  258,  849,    0,    0,    0,    0,  579,    0,
    0,    0,    0, 1373,    0,    0,    0,    0,    0,    0,
    0,    0,  850,    0,  851,    0,    0,    0,    0,    0,
  580,    0,    0,    0,    0,    0,    0,    0,  852,    0,
  853,  854,  855,    0,    6,  188,    0,    0,    0,    0,
    0,    0,    0,  415,    0, 1489, 1490,    0, 1491,  416,
    0, 1492,    0,    0,    0,  581,  582,    0,    0,  417,
    0,    0,    0,    0,    0, 1493,    0,  675,    0,    0,
    0, 1494,  583,  362,  363,  364,  418,  183,  184,    0,
    0,  856,    0,    0,    0,    0,    0,  419,    0,    0,
    0,    0,    0,    0,    0,    0,  365,  366,  420,  421,
  422,  367,  368,  423,  424,    0,  425,    0,    0,    0,
  405,  426,  427,    0,  428,  429,  430,    0,    0,  406,
  431,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1495,    0,  407,    0,    0,    0,    0,    0,  360,
  408,    0,    0,    0,    0,    0,    0,    0,  434,  929,
   14,  432,    0,  433,    0,    0,    0,    0,    0,    0,
    0,    0,  807,    0,    0, 1496,  435,  409,    0,    0,
  410,  258,    0,    0,    0,   16,    0,    0,    0,    0,
    0,    0,    0,    0, 1608,    0, 1497,    0,    0,    0,
    0,    0,    0,  484,    0,    0,  405,    0,  411,  412,
    0,    0,    0,  807,    0,  406,  807,    0,    0,    0,
  413,    0,  434,    0,  414,  432,    0,  433,    0,  407,
    0,  807, 1498,    0,    0,  360,  408,    0,    0,    0,
  435,    0,    0,    0,    0,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  409,    0,    0,  410,    0,    0,    0,
    0,  683,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  415,    0,    0,    0,    0,    0,  416,    0,    0,
    0,    0,  361,    0,  411,  412,    0,  417,    0,    0,
    0,    0,    0,    0,    0,    0,  413,    0,    0,    0,
  414,  362,  363,  364,  418,  183,  184,    0,    0,    0,
    0,    0,    0,    0,    0,  419,    0,    0,    0,    0,
    0,    0,    0,    0,  365,  366,  420,  421,  422,  367,
  368,  423,  424,    0,  425,    0,    0,    0,    0,  426,
  427,    0,  428,  429,  430,    0,    0,    0,  431,    0,
    0,    0,    0,    0,    0,    0,    0,  415,    0,    0,
    0,    0,    0,  416,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  417,    0,  405,    0,    0,    0,    0,
    0,    0,    0,    0,  406,    0,    0,  362,  363,  364,
  418,  183,  184,    0,    0,    0,    0,    0,  407,    0,
    0,  419,    0,    0,  360,  408,    0,    0,    0,    0,
  365,  366,  420,  421,  422,  367,  368,  423,  424,    0,
  425,    0,    0,    0,  807,  426,  427,    0,  428,  429,
  430,    0,  409,    0,  431,  410,    0,    0,  434,  405,
    0,  432,    0,  433,    0,    0,    0,    0,  406,    0,
    0,    0,    0,    0,    0,    0,  435,    0,    0,    0,
    0,  258,  407,  411,  412,    0,    0,    0,  360,  408,
    0,    0,    0,    0,    0,  413,    0,    0,    0,  414,
    0,  807,    0,    0,  807,    0,    0,    0,    0,    0,
    0,  807,    0,    0,  807,    0,  409,    0,  807,  410,
    0,    0,  434,  807,    0,  432,  807,  433,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  435,    0,  807,    0,    0,  258,    0,  411,  412,    0,
    0,    0,    0,    0,    0,    0,  415,    0,    0,  413,
    0,    0,  416,  414,    0,    0,  807,    0,    0,  807,
  807,    0,  417,    0,    0,    0,    0,    0,    0,  807,
    0,    0,    0,    0,    0,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,  807,    0,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,  807,  425,
  415,    0,    0,  807,  426,  427,  416,  428,  429,  430,
    0,    0,    0,  431,    0,  807,  417,  807,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1098,    0,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,    0,    0,
    0,    0,    0,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,    0,  405,    0,    0,  426,  427,
    0,  428,  429,  430,  406,    0,    0,  431,    0,    0,
    0,    0,  434,    0,    0,  432,    0,  433,  407,    0,
    0,    0,    0,    0,  360,  408,    0,    0,    0,    0,
  435, 1641,    0,    0,    0,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  409,    0,    0,  410,    0,    0,    0,  405,
    0,    0,    0,    0,    0,    0,    0,    0,  406,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  407,  411,  412,    0,    0,    0,  360,  408,
    0,    0,    0,    0,    0,  413,    0, 1684,    0,  414,
  432,    0,  433,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  435,  409,    0,    0,  410,
  258,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1278,  411,  412,    0,
    0,    0,    0,    0,    0,    0,  415,    0,    0,  413,
    0,    0,  416,  414,    0,    0,    0,    0,    0,    0,
    0,    0,  417,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  362,  363,  364,  418,
  183,  184,    0,    0,    0,    0,    0,    0,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  366,  420,  421,  422,  367,  368,  423,  424,    0,  425,
  415,    0,    0,    0,  426,  427,  416,  428,  429,  430,
    0,    0,    0,  431,    0,    0,  417,    0,    0,  405,
    0,    0,    0,    0,    0,    0,    0, 1291,  406,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
    0,    0,  407,    0,  419,    0,    0,    0,  360,  408,
    0,    0,    0,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,    0,    0,    0,    0,  426,  427,
  451,  428,  429,  430,    0,    0,  409,  431,    0,  410,
  451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
  451,  451,  451,  451,  451,    0,    0,  451,  451,  451,
  451,    0,  451,    0,  405,  451,  451,  411,  412,    0,
    0,    0,  434,  406,    0,  432,    0,  433,    0,  413,
    0,    0,    0,  414,    0,    0,    0,  407,    0,    0,
  435,    0,    0,  360,  408,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  409,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  936,    0,    0,  936,
  415,  936,    0,    0,    0,    0,  416,    0,    0,    0,
  361,    0,  411,  412,  936,    0,  417,    0,    0,  936,
    0,    0,    0,    0,  413,    0,    0,    0,  414,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,    0,    0,
    0,    0,    0,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,    0,    0,    0,    0,  426,  427,
    0,  428,  429,  430,    0,    0,    0,  431,    0,    0,
    0,    0,    0,    0,    0,  415,    0,    0,    0,    0,
    0,  416,    0,    0,    0,    0,    0,    0,    0,  564,
    0,  417,    0,  565,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  362,  363,  364,  418,  183,
  184,    0,  566,    0,    0,  567,    0,    0,    0,  419,
    0,    0,    0,    0,    0,    0,    0,    0,  365,  366,
  420,  421,  422,  367,  368,  423,  424,    0,  425,    0,
    0,    0,    0,  426,  427,    0,  428,  429,  430,  405,
    0,    0,  431,    0,    0,    0,  568,    0,  406,    0,
    0,    0,  569,  570,  571,    0,  572,  573,  574,    0,
  575,    0,  407,    0,    0,    0,    0,  831,  360,  408,
    0,  565,    0,    0,    0,    0,  942,    0,    0,    0,
  576,    0,  577,    0,    0,    0,  832,    0,    0,    0,
  566,    0,    0,  567,    0,    0,  409,    0,    0,  410,
    0,    0,    0,  936,    0,    0,    0,    0,    0,    0,
    0,    0,  936,  578,    0,    0,  938,  942,  942,  942,
  942,  942,  954,  942,    0,    0,  936,  411,  412,    0,
  579,    0,  936,  936,  568,  942,  942,  942,  942,  413,
  569,  570,  571,  414,  572,  573,  574,    0,  575,    0,
    0,    0,  580,    0,    0,    0,    0,    0,    0,    0,
  936,    0,    0,  936,    0,    0,    0,  942,  576,  942,
  577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  581,  582,    0,
    0,  936,  936,    0,    0,    0,    0,    0,    0,    0,
  415,  578,    0,  936,  583,    0,  416,  936,    0,    0,
    0,    0,    0,    0,    0,    0,  417,    0,  579,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  362,  363,  364,  418,  183,  184,    0,    0,    0,    0,
  580,  822,    0,    0,  419,    0,    0,    0,    0,    0,
    0,    0,    0,  365,  366,  420,  421,  422,  367,  368,
  423,  424,    0,  425,  936,    0,    0,    0,  426,  427,
  936,  428,  429,  430,    0,  581,  582,  431,    0,    0,
  936,    0,  822,  822,  822,  822,  822,    0,  822,    0,
    0,    0,  583,    0,  936,  936,  936,  936,  936,  936,
  822,  822,  822,  822,    0,    0,    0,    0,  936,    0,
    0,    0,    0,    0,    0,    0,    0,  936,  936,  936,
  936,  936,  936,  936,  936,  936,    0,  936,    0,    0,
    0,    0,  936,  936,  822,  936,  936,  936,  942,    0,
  942,  936,    0,    0,    0,    0,    0,    0,  942,    0,
    0,    0,    0,    0,    0,    0,  942,    0,    0,    0,
    0,    0,  942,    0,    0,  942,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  942,  942,    0,    0,  942,    0,
    0,    0,    0,    0,    0,  942,    0,  942,  942,    0,
    0,  942,    0,    0,    0,  942,    0,    0,  942,    0,
  942,    0,  942,    0,    0,    0,    0,  942,  942,    0,
  942,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  834,    0,    0,  942,  942,    0,  942,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  942,    0,  942,  942,  942,    0,    0,
  942,    0,    0,  942,  942,    0,    0,    0,    0,    0,
    0,    0,    0,  942,  834,  834,  834,  834,  834,    0,
  834,    0,    0,    0,    0,    0,    0,  942,    0,    0,
  942,    0,  834,  834,  834,  834,    0,    0,    0,    0,
    0,    0,    0,  822,    0,  822,  942,    0,    0,    0,
    0,    0,  942,  822,    0,    0,    0,  942,    0,    0,
    0,  822,    0,    0,    0,    0,  834,  822,  942,  942,
  822,  942,    0,    0,    0,    0,    0,  942,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  822,
  822,    0,    0,  822,    0,    0,    0,    0,    0,    0,
  822,    0,  822,  822,    0,    0,  822,    0,    0,    0,
  822,    0,    0,  822,    0,  822,    0,  822,    0,    0,
    0,    0,  822,  822,    0,  822,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  837,    0,
    0,  822,  822,    0,  822,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  822,    0,
  822,  822,  822,    0,    0,  822,    0,    0,  822,  822,
    0,    0,    0,    0,    0,    0,    0,    0,  822,  837,
  837,  837,  837,  837,    0,  837,    0,    0,    0,    0,
  221,    0,  822,    0,  221,  822,    0,  837,  837,  837,
  837,    0,    0,    0,    0,    0,    0,    0,    0,  221,
    0,  822,    0,  221,    0,    0,  221,  822,    0,    0,
    0,    0,  822,    0,    0,    0,    0,    0,    0,    0,
    0,  837,    0,  822,  822,  834,  822,  834,    0,    0,
    0,    0,  822,    0,    0,  834,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  221,    0,  834,
    0,    0,  834,  221,  221,  221,    0,  221,  221,  221,
    0,  221,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  834,  834,    0,    0,  834,    0,    0,    0,    0,
    0,  221,  834,  221,  834,  834,    0,    0,  834,    0,
    0,    0,  834,    0,    0,  834,    0,  834,    0,  834,
    0,    0,    0,    0,  834,  834,    0,  834,    0,    0,
    0,    0,    0,    0,  221,    0,    0,    0,    0,   81,
  838,    0,    0,  834,  834,    0,  834,    0,    0,    0,
    0,  221,    0,    0,    0,    0,    0,    0,    0,    0,
  834,    0,  834,  834,  834,    0,    0,  834,    0,    0,
  834,  834,    0,  221,    0,    0,    0,    0,    0,    0,
  834,  838,  838,  838,  838,  838,    0,  838,    0,    0,
    0,    0,    0,    0,  834,    0,    0,  834,    0,  838,
  838,  838,  838,    0,    0,    0,    0,    0,  221,  221,
  837,    0,  837,  834,    0,    0,    0,    0,    0,  834,
  837,    0,    0,    0,  834,  221,    0,    0,    0,    0,
    0,    0,    0,  838,    0,  834,  834,  837,  834,    0,
    0,    0,    0,    0,  834,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  837,  837,    0,    0,
  837,    0,    0,    0,    0,    0,    0,  837,    0,  837,
  837,    0,    0,  837,    0,    0,    0,  837,  832,    0,
  837,    0,  837,    0,  837,    0,    0,    0,    0,  837,
  837,    0,  837,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  837,  837,
    0,  837,    0,    0,    0,    0,    0,    0,    0,  832,
    0,  832,  832,  832,    0,  837,    0,  837,  837,  837,
    0,    0,  837,    0,    0,  837,  837,  832,  832,  832,
  832,    0,    0,    0,    0,  837,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  564,    0,  837,
    0,  565,  837,    0,    0,    0,    0,    0,    0,    0,
    0,  832,    0,    0,    0,    0,    0,    0,  837,    0,
  566,    0,    0,  567,  837,    0,    0,    0,    0,  837,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  837,  837,  838,  837,  838,    0,    0,    0,    0,  837,
    0,    0,  838,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  568,    0,    0,    0,    0,  838,
  569,  570,  571,    0,  572,  573,  574,    0,  575,    0,
    0,    0,    0,    0,    0,  831,    0,    0,  838,  838,
    0,    0,  838,    0,    0,    0,    0,    0,  576,  838,
  577,  838,  838,    0,    0,  838,    0,    0,    0,  838,
    0,    0,  838,    0,  838,    0,  838,    0,    0,    0,
    0,  838,  838,    0,  838,    0,  831,    0,  831,  831,
  831,  578,    0,    0,    0,    0,    0,    0,    0,    0,
  838,  838,    0,  838,  831,  831,  831,  831,  579,    0,
    0,    0,    0,    0,    0,    0,    0,  838,    0,  838,
  838,  838,    0,    0,  838,    0,    0,  838,  838,    0,
  580,    0,    0,    0,    0,    0,    0,  838,  831,    0,
  832,    0,  832,    0,    0,  188,    0,    0,    0,    0,
  832,  838,    0,    0,  838,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  581,  582,  832,    0,    0,
  838,    0,    0,    0,    0,    0,  838,    0,    0,    0,
    0,  838,  583,  833,    0,    0,  832,  832,    0,    0,
  832,    0,  838,  838,    0,  838,    0,  832,    0,  832,
  832,  838,    0,  832,    0,    0,    0,  832,    0,    0,
  832,    0,  832,    0,  832,    0,    0,    0,    0,  832,
  832,    0,  832,    0,  833,    0,  833,  833,  833,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  832,  832,
    0,  832,  833,  833,  833,  833,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  832,    0,  832,  832,  832,
    0,    0,  832,    0,    0,  832,  832,    0,    0,    0,
    0,    0,    0,    0,    0,  832,  833,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  832,
    0,    0,  832,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  831,  832,  831,
    0,    0,    0,    0,  832,    0,    0,  831,    0,  832,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  832,  832,    0,  832,  831,    0,    0,    0,    0,  832,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  836,    0,    0,  831,  831,    0,    0,  831,    0,    0,
    0,    0,    0,    0,  831,    0,  831,  831,    0,    0,
  831,    0,    0,    0,  831,    0,    0,  831,    0,  831,
    0,  831,    0,    0,    0,    0,  831,  831,    0,  831,
    0,  836,    0,  836,  836,  836,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  831,  831,    0,  831,  836,
  836,  836,  836,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  831,    0,  831,  831,  831,    0,    0,  831,
    0,    0,  831,  831,    0,    0,    0,    0,    0,    0,
    0,    0,  831,  836,    0,  833,    0,  833,    0,    0,
    0,    0,  776,    0,    0,  833,  831,    0,    0,  831,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  833,    0,    0,  831,    0,    0,    0,    0,
    0,  831,    0,    0,    0,    0,  831,    0,  777,    0,
    0,  833,  833,  776,  801,  833,  776,  831,  831,    0,
  831,    0,  833,    0,  833,  833,  831,    0,  833,    0,
    0,  776,  833,    0,    0,  833,    0,  833,    0,  833,
    0,    0,    0,    0,  833,  833,    0,  833,    0,  777,
    0,    0,  777,    0,    0,  801,    0,    0,  801,    0,
    0,    0,    0,  833,  833,    0,  833,  777,    0,    0,
    0,    0,    0,  801,    0,    0,    0,    0,    0,    0,
  833,    0,  833,  833,  833,    0,    0,  833,    0,    0,
  833,  833,    0,    0,    0,    0,    0,    0,    0,    0,
  833,    0,  780,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  833,    0,    0,  833,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  836,  833,  836,    0,    0,    0,    0,  833,
    0,    0,  836,  780,  833,    0,  780,    0,    0,    0,
    0,    0,    0,    0,    0,  833,  833,    0,  833,  836,
    0,  780,    0,    0,  833,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  836,  836,
    0,    0,  836,    0,    0,  778,    0,    0,    0,  836,
    0,  836,  836,    0,    0,  836,  779,    0,    0,  836,
    0,    0,  836,    0,  836,    0,  836,    0,    0,    0,
    0,  836,  836,    0,  836,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  778,    0,    0,  778,
  836,  836,    0,  836,  776,    0,    0,  779,    0,    0,
  779,    0,    0,    0,  778,    0,    0,  836,    0,  836,
  836,  836,    0,    0,  836,  779,    0,  836,  836,    0,
    0,    0,    0,    0,    0,    0,    0,  836,    0,    0,
  777,    0,    0,    0,    0,    0,  801,    0,    0,    0,
    0,  836,    0,    0,  836,    0,    0,    0,    0,    0,
    0,  776,    0,    0,  776,    0,    0,    0,  809,    0,
  836,  776,    0,    0,  776,    0,  836,    0,  776,    0,
    0,  836,    0,  776,    0,    0,  776,    0,    0,    0,
    0,    0,  836,  836,    0,  836,    0,  777,    0,    0,
  777,  836,  776,  801,  773,    0,  801,  777,    0,  809,
  777,    0,  809,  801,  777,    0,  801,    0,    0,  777,
  801,    0,  777,    0,    0,  801,  776,  809,  801,  776,
  776,    0,    0,    0,  780,    0,    0,    0,  777,  776,
    0,    0,    0,    0,  801,  773,    0,    0,  773,    0,
    0,    0,    0,    0,    0,    0,  776,    0,    0,    0,
    0,    0,  777,  773,    0,  777,  777,    0,  801,    0,
    0,  801,  801,    0,    0,  777,    0,    0,  776,    0,
    0,  801,    0,  776,    0,    0,    0,    0,    0,    0,
    0,  780,  777,    0,  780,  776,    0,  776,  801,    0,
    0,  780,    0,    0,  780,  774,    0,    0,  780,    0,
    0,    0,    0,  780,  777,    0,  780,  778,    0,  777,
  801,    0,    0,    0,    0,  801,    0,    0,  779,    0,
    0,  777,  780,  777,  775,    0,    0,  801,    0,  801,
    0,    0,    0,    0,    0,    0,  774,    0,    0,  774,
    0,    0,    0,    0,    0,    0,  780,    0,    0,  780,
  780,    0,    0,    0,  774,    0,    0,    0,    0,  780,
    0,    0,    0,    0,  778,  775,    0,  778,  775,    0,
    0,    0,    0,    0,  778,  779,  780,  778,  779,    0,
    0,  778,    0,  775,    0,  779,  778,    0,  779,  778,
    0,    0,  779,    0,    0,    0,    0,  779,  780,    0,
  779,    0,    0,  780,    0,  778,    0,    0,  808,    0,
    0,    0,    0,    0,    0,  780,  779,  780,    0,    0,
  809,    0,    0,    0,    0,    0,    0,    0,    0,  778,
    0,    0,  778,  778,    0,    0,    0,    0,    0,    0,
  779,    0,  778,  779,  779,    0,    0,    0,    0,  808,
    0,    0,  808,  779,    0,    0,  773,    0,    0,  778,
    0,    0,    0,    0,    0,    0,    0,  808,    0,    0,
  779,    0,    0,    0,    0,    0,    0,  809,    0,    0,
  809,  778,    0,    0,    0,    0,  778,  809,    0,    0,
  809,    0,  779,    0,  809,    0,    0,  779,  778,  809,
  778,    0,  809,    0,    0,    0,    0,  802,    0,  779,
    0,  779,    0,  773,    0,    0,  773,    0,  809,    0,
    0,    0,    0,  773,    0,    0,  773,    0,    0,    0,
  773,    0,    0,    0,    0,  773,  810,    0,  773,    0,
    0,    0,  809,    0,    0,  809,  809,    0,  802,    0,
    0,  802,    0,    0,  773,  809,    0,  774,    0,    0,
    0,    0,    0,    0,    0,    0,  802,    0,    0,    0,
    0,    0,  809,    0,    0,    0,    0,  810,  773,    0,
  810,  773,  773,    0,    0,    0,  775,    0,    0,    0,
    0,  773,    0,    0,  809,  810,    0,    0,    0,  809,
    0,    0,    0,    0,    0,    0,    0,    0,  773,    0,
    0,  809,    0,  809,  774,    0,    0,  774,    0,    0,
    0,    0,  811,    0,  774,    0,    0,  774,    0,    0,
  773,  774,    0,    0,    0,  773,  774,    0,    0,  774,
    0,    0,    0,  775,    0,    0,  775,  773,    0,  773,
    0,    0,    0,  775,  799,  774,  775,    0,    0,    0,
  775,    0,    0,  811,    0,  775,  811,    0,  775,    0,
  808,    0,    0,    0,    0,    0,    0,    0,    0,  774,
    0,  811,  774,  774,  775,    0,    0,    0,    0,    0,
    0,    0,  774,    0,    0,  799,    0,    0,  799,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  775,  774,
    0,  775,  775,  799,    0,    0,    0,    0,    0,    0,
    0,  775,    0,    0,    0,    0,    0,  808,    0,    0,
  808,  774,    0,    0,    0,    0,  774,  808,  775,    0,
  808,    0,  803,    0,  808,    0,    0,    0,  774,  808,
  774,    0,  808,    0,    0,    0,    0,    0,    0,    0,
  775,    0,  812,    0,    0,  775,    0,    0,  808,  802,
    0,    0,    0,    0,    0,    0,    0,  775,    0,  775,
    0,    0,    0,  803,    0,    0,  803,    0,    0,    0,
    0,    0,  808,    0,    0,  808,  808,    0,  810,    0,
    0,  803,    0,  812,    0,  808,  812,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  812,  808,    0,    0,    0,  802,    0,    0,  802,
    0,    0,    0,    0,    0,    0,  802,    0,    0,  802,
    0,    0,    0,  802,  808,    0,    0,    0,  802,  808,
    0,  802,    0,    0,    0,  810,    0,    0,  810,    0,
    0,  808,    0,  808,    0,  810,    0,  802,  810,    0,
  800,    0,  810,    0,    0,    0,    0,  810,    0,    0,
  810,    0,    0,    0,  811,    0,    0,    0,    0,    0,
  804,  802,    0,    0,  802,  802,  810,    0,    0,    0,
    0,    0,    0,    0,  802,    0,    0,    0,    0,    0,
    0,  800,    0,    0,  800,    0,  799,    0,    0,    0,
  810,  802,    0,  810,  810,    0,    0,    0,    0,  800,
    0,  804,    0,  810,  804,    0,    0,    0,    0,    0,
    0,  811,    0,  802,  811,    0,    0,    0,  802,  804,
  810,  811,    0,  759,  811,    0,    0,    0,  811,    0,
  802,    0,  802,  811,    0,    0,  811,    0,    0,    0,
    0,    0,  810,  799,    0,    0,  799,  810,    0,    0,
    0,    0,  811,  799,    0,    0,  799,    0,    0,  810,
  799,  810,    0,    0,  759,  799,    0,  759,  799,    0,
    0,    0,    0,    0,  803,    0,  811,    0,    0,  811,
  811,    0,  759,    0,  799,    0,    0,    0,    0,  811,
    0,    0,    0,    0,  812,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  811,    0,  799,    0,
    0,  799,  799,    0,    0,    0,    0,    0,    0,    0,
    0,  799,    0,    0,    0,    0,    0,    0,  811,    0,
    0,  803,    0,  811,  803,    0,    0,    0,  799,    0,
    0,  803,    0,    0,  803,  811,    0,  811,  803,    0,
    0,  812,    0,  803,  812,    0,  803,    0,    0,    0,
  799,  812,    0,  221,  812,  799,    0,  221,  812,    0,
    0,    0,  803,  812,    0,    0,  812,  799,    0,  799,
    0,    0,  221,    0,    0,    0,  221,    0,    0,  221,
    0,    0,  812,    0,    0,    0,  803,    0,    0,  803,
  803,    0,  800,    0,    0,    0,    0,    0,    0,  803,
    0,    0,    0,    0,    0,    0,  812,    0,    0,  812,
  812,    0,  804,    0,    0,    0,  803,    0,    0,  812,
  221,    0,    0,    0,    0,    0,  221,  221,  221,    0,
  221,  221,  221,    0,  221,    0,  812,    0,  803,    0,
    0,    0,    0,  803,    0,    0,    0,    0,    0,  800,
    0,    0,  800,    0,  221,  803,  221,  803,  812,  800,
    0,    0,  800,  812,    0,    0,  800,    0,    0,  804,
    0,  800,  804,    0,  800,  812,    0,  812,    0,  804,
    0,    0,  804,    0,    0,    0,  804,  221,    0,    0,
  800,  804,    0,    0,  804,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  221,    0,    0,    0,    0,    0,
  804,    0,    0,    0,  800,    0,    0,  800,  800,    0,
    0,    0,    0,    0,    0,    0,  221,  800,    0,    0,
    0,    0,  759,    0,  804,  759,    0,  804,  804,    0,
    0,    0,  759,    0,  800,  759,    0,  804,    0,  759,
    0,    0,    0,    0,  759,    0,  134,  759,    0,    0,
  134,  221,  221,    0,  804,    0,  800,    0,    0,    0,
    0,  800,    0,  759,    0,    0,    0,    0,  221,  134,
    0,    0,  134,  800,    0,  800,  804,    0,    0,    0,
    0,  804,    0,    0,    0,    0,    0,  759,    0,    0,
  759,  759,    0,  804,    0,  804,    0,    0,    0,    0,
  759,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  134,    0,    0,    0,  759,    0,  134,
  134,  134,    0,  134,  134,  134,    0,  134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  759,
    0,    0,    0,    0,  759,    0,    0,  134,    0,  134,
    0,    0,    0,    0,  142,    0,  759,    0,  759,    0,
    0,    0,    0,  143,  144,  145,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,    0,
  134,  159,  160,  161,  162,    0,  163,    0,    0,  164,
  165,    0,    0,  541,    0,    0,    0,  134,    0,    0,
    0,    0,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,  155,  156,  157,  158,    0,  134,
  159,  160,  161,  162,    0,  163,    0,    0,  164,  165,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  134,  134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  134,
};
static short yycheck[] = {                                      16,
   60,    4,   52,   61,    4,  130,  101,    0,   59,  295,
   53,  235,   60,   54,  307,  235,  488,  338,  119,  120,
  338,   64,  330,  728,   82,   66,  495,  680,  622,  533,
  624,  524,  119,  120,  527,   67,   86,  309,  334,   70,
  533,   65,   91,  470,   87,  666,  266,  683, 1000,  139,
  110,   94,  112,  992,  736,  992,   85, 1169,   90, 1011,
  999,   92,  999,   80,   88,    0,  992,  992,  243,  393,
  111,  999,   89,  999,  999,  926,  343,  252, 1030,  729,
  730,  675,  727, 1213,  133,    0,    0,  660,  131,    0,
  355,  132,   45,   40,  609,  124,    0,    0,    0,  616,
   40,   44,  302,  724,  794,  235,  943,   44,    0,   44,
    0,  756,    0,  208,   41,    0,   45,  696,  169,  825,
  765,    0,    0,  286,   59, 1047,    0,   40,    0,   44,
   41,   41,   44,   44,  235,    0,   45,   41,   41,   59,
 1125,   44,  193,   46,   59,   59,  370, 1345,   59,   41,
  370,   41,   44,  733,   44,   59,   59,   59,   61, 1355,
   42,  286,   41,    0,   40,   44,    0,   59, 1355,   59,
  295,   59,   40,  818,   59,   44,   40,  237,   44,   42,
   59,   59,   58,    0,   41,   59,   44,   59,   40, 1413,
    0,    0,    0, 1355,   59,    0,   40,   59,  293,   44,
  241,   44,  510,  511,  512,  513,  296,  503,   61,  250,
  385,   63,  533,   45,   44,  533,   40,  274,   58,   63,
  270,   45,   59,  490,   41,   59,  286,   44,  700,   41,
   41,    0,  258,  274, 1024,   91,   41,  302, 1355,    0,
  370,   63,   59,  536,  288,  260,   45,    0,  308,   59,
   59,   59,  264,   45,   59,  315,  262,  317,  288,  319,
  302,  320,  322,  559,  885,   12,  860,  861,  393,  370,
   41,   63,  339,   44,  339,  263, 1228,  260,    0, 1675,
  331,  307,  333, 1632,    0, 1118,  262, 1120,   41,  782,
   59,   44,  585,   16, 1211,   59,  347,  340,   59,  564,
 1239,  351, 1239,  277,  394,  878,   59,  406,  349,  341,
  379, 1239,  302, 1239, 1239,  265,  889,  890,  406,  964,
    0,  273,  288,    0,  459,  313,  461,  921,    0,   44,
  265,  403,  401,  393, 1171,  301,  324,   59,   12,  408,
  381,  384,  401,   59,   59,  285, 1366,   44, 1744,  339,
    0,  392,  355,  303,    0,  396,  399,   80,  457,  399,
  401,  264,  265, 1712,   41, 1010, 1762,   44,  303,  457,
  117,    0,  346,  442,    0,  802,  443,  280,  443,   59,
   40,  387,   59,  442,  319,  264, 1582,   59,  278,  341,
  280,   41, 1412,  419, 1524, 1582, 1745,  991,  288, 1623,
  303,  443,  305,  418,  319,  332,  341, 1258,    0,   59,
  467,  387, 1048,   59,  198,  319,  319,  461, 1370,  643,
 1582,  277, 1374,  643, 1376,  329,  341,  341,  332,   44,
   59,  461, 1630,   59,  297,  418, 1126,  341,  341,    0,
  428, 1355,  321,  117,  329,  731,  666,  332,  301,  461,
  262,  744,  456,  341,  747, 1245,  264,  508,   41, 1411,
  436, 1378,  319,  321,  551, 1582, 1451,   59,  761,  278,
  397,  280, 1052,  533,  319,  305,  341,  652,  321,    0,
   41,  701,  395,   44,  388, 1615, 1319,  397, 1410,  379,
  368,  411,  384,  397,  384,  788, 1075,  258,   59,  310,
  437,  448,  319,  554,  724,  289,  459,    0, 1190, 1162,
  453,  401,  397,  643,  319,  332, 1169, 1354,  408,  329,
   41,  461,  332,   44,  341,  278, 1041,  280,  552, 1481,
  459, 1643, 1662,  486, 1486,  288,  341,  441,   59,  441,
 1057,  455,  643,  743, 1234, 1251,  307,  459,  608,  816,
  459,  455,  442,  455,  605,  606,  441,  829,  721,  883,
  397,  564, 1135,  332, 1214,  437,   59,  455,  503, 1699,
  455,  388, 1684,  838,  453,  387,  410, 1529, 1429,  461,
  397,  455,  461,  388,  644,  461,  455,  397,  503,  455,
  398,  502,  397,  461, 1546,    0,  721,  461,  461,  461,
  503,  278, 1196,  280,  441, 1250,  731,  459,  432,  269,
  502,  288,  502,   41,  617,  459,   44,  617,  455,  706,
  663,  461, 1216,  663,  441,  341,  379,  459,  397,  461,
 1042,  441,  258,  432, 1424,  459,  441,  459,  455,  668,
  432,  412, 1278,  453,   42,  455,  368,  411,  401,  264,
  455,  284,  739,  740,   59,  408,    0,   41,  419,   41,
  459,  721,   44,  343,    0,  885,  726,  459, 1582,  319,
 1622,  979,  441,  733,  715, 1627,  717,   59,   41,  262,
   41,  307,  332, 1365,  735,  736,  455,  384,  388,  442,
  302,  341,  867,  753,  250,  870, 1317,   41,  378, 1638,
   44, 1638,  379,  349,  997,   41,  660,    0,   44,  264,
 1638,  356, 1638, 1638, 1666,   59, 1009,  278,  742,  280,
  349,  781,  782,   59,  401,   61,  406,  288,  257,  409,
  260,  408,  261,    0, 1261, 1043, 1029,  266,  388,    0,
   41,  441,  287,  257,    0,  425,  530,  397,  321,  502,
  840,  343,  842,  357,   41,   91,  780,  278,  883,  280,
   44,  321, 1356,   45,   59,  442,   59,  288,  992,    0,
 1182,  451,  992,    0,  304,  999,  817,   44,  273,  999,
  349,   63,  262, 1055,  787,    0,  827,  329,  812,  813,
  814,  441,   59,  419,  461,    0,  799,  768,   59,  308,
  309,    0,  461,   59,  387,  455,    0,  440,    0,   93,
 1237, 1464,    0,    0,  406,  599, 1243,  409,  379, 1323,
    0,  335,  871,  883,    0,  868,  430,    0,   59,   44,
  268,  443,   59,  425,  257,  838,   41,  869,    0,   44,
  401,  872,   41,  378,   59,  401,  274,  408,  493,   41,
  343,    0,   44, 1579,   59,  403,   44,  412,  379,  451,
   59,    0,  260,  259,    0,   59, 1138,   59,  378,   61,
    0,   59,   59,  278,  270,  280, 1581,  437,  262,   59,
  401,  442,  310,   59,  419,  378,   59,  408,    0,    0,
 1417,  439,   41,  462,  463,  284, 1645,   59,  272,  428,
  344,  262,  444,  432,  433,  434,  304,  387, 1377,  260,
   59, 1206,  335,  406,    0,  289,  409,  462,  463,  461,
   59,  442,  258,   59,  878,  369,  308,  309,  366,   59,
 1399,  466,  425, 1226,  278,  889,  280,  344,  274,  449,
 1027,  502,  278,  452,  280,  461, 1672,   59,   59,  285,
    0,    0,  288,  304,  301,   41,  436, 1252,  451, 1255,
  334,  262,  369,  406, 1257,  301,  329,  308,  309,  332,
 1667,  307,  260,   59,  310,  262, 1725,   41,  461, 1391,
   44,  502,  425,  427,  412, 1045, 1580,  326, 1714,  363,
 1643,   41, 1052,   44, 1466, 1488,  385, 1409,  461,   44,
    0, 1750, 1323,  387, 1598, 1323,  353, 1601,  264,   59,
   59,  260, 1036, 1710,  296, 1239,  304,  461, 1021, 1239,
  427, 1021,   42, 1124, 1125, 1126,  387,   47,  494,  411,
 1054, 1684, 1003, 1004,  397,  379, 1060,  264,  504,  467,
   40,   41,   93,  379,   44, 1170, 1743,  278,   93,  280,
  343,  440,  319,  349, 1362,  304,  430,  401,  319,   59,
    0,   61,  358, 1358,  408,  401,  258,  302,  457, 1355,
  452,  353,  408,  278,  341,  280,  412,  264,  461,  259,
  341, 1052,  274,  419,  264,  378,  387, 1380,  264,   40,
  270,   91,  431,  403,   45,  624,    0, 1317,  442,  438,
  387,  437,  264,  410,  339, 1192,  442, 1194,  461,  301,
    0,  452,   63,  406,  329,  307,  409,  332,  310,   59,
  319, 1124, 1125,  392,  393,  264, 1419, 1151,  264,  344,
  329,  467,  425,  332,  264,  471,  446,  666,    0, 1190,
  669,  329,  341,  260,  332,  674,  319,    0,  379,  343,
  679,  680,  264,  264, 1626,   59,  344,    0,  451,  688,
    0,  690,  691,  692,  693,  694, 1253,  696,  341,   59,
  319,  398,  701,  408,  379, 1769,  458,  459,  460,  261,
  462,  463,  397,  418,  378,    0,  461,  304,   41,  388,
    0,   44,  341,  444, 1414,  724,  401,   59,  397,  481,
  482,   44, 1674,  408,  486,  487,   59,  459,  443,  397,
  461,  398,  406,    0,  322,  409,   59, 1268,  398,   59,
  412, 1272,  398,  461,   44,  265,  441,  419,  336, 1232,
 1355,  425, 1232,  319,  278,    0,  398,  442,  453,  388,
  455, 1536,  441,  329,   59,  437,  332, 1542, 1373,   59,
 1543,  461,  360,  441,  453,  341,    0,  451,  258,  398,
  280, 1152,  398,  303, 1155,  453,  286,  455,  398,  319,
 1669,  323,   59,   93,  274,  467,  320,  277,  278,  471,
  280,   41,  332,  258,   44,  285,  398,  398,  288,  459,
   41,  341,  441,   44,   59,    0, 1582,   41,  338,    0,
  279,  301,  388,    0,  418,  461,  414,  307,    0, 1708,
  310,  397, 1372, 1373, 1365,   59,  845,  846,  847, 1605,
  404,  850,  851,  852, 1372,  854,  855,  856,  857,  858,
  859,  445,  307,   93,    0,  280,   41,  421,  388,   44,
 1381,  286,   93, 1742,  398,  296,    0,  397,   40,   41,
 1451,  330,   44,  459,   59,  441,  885,  401,   59, 1645,
  418, 1760,   59,  892,  893,  461,  895,   59,  897,   61,
  355,  900,  901,  902,  903,  904,  905,  323,  322,  379,
  486,  258, 1507,  437,  261,  364,  343,  445,  917,  402,
  919,  441,  336,   59,    0,   40, 1483,  357,  442,   91,
  344,  401,  353,  382,  384,   59, 1692,  435,  408,  259,
   42,   43,  412,   45, 1638,   47,  360,  471, 1638,  419,
  270,  378,    0,   42,   43,  278,   45,  280,   47,    0,
  307, 1489, 1527,  461,  394,  288,  396,  437,   44, 1725,
   42,   43,  442,   45,  419,   47, 1337, 1507, 1451,  406,
 1341,    0,  409,   59, 1457,  494,  495, 1582, 1605,  419,
    0,  384,  437,   41, 1750,   44,   44,  467,  425,    0,
  414,  471,  386,    0,  459,    0,  461,  353, 1528,  322,
 1605,   59, 1523,    0,  444,  384,  329,  472,   59,  332,
    0,  322,   41,  336,  451,   44,  471,    0, 1645, 1492,
 1551,  344,  384,  379, 1555,  336,  491,  458,  459,  460,
   59,  462,  463,  437,  499,  500,  501,  360,    0,   59,
 1645, 1616,  317,  318,   41,  322,  379,   44,   59,  360,
  481,  482,   59,    0,   59,  486,  487,  462,  463,  336,
    0,  384,   59,    0,   61, 1692, 1075,    0,  401,   59,
  338, 1594,    0,  384,  397,  408,   59,  338, 1087, 1088,
    0, 1090, 1091,  360,  495,  217,  258, 1692,  419, 1098,
 1461,  414, 1697,  225,   91,  319,  419,   59, 1725,    0,
  461,   41,  274,  414,   44,  277,  278,  384,  280,  442,
    0,  274,   59,  285,  375, 1653,  288,  341,  441,   59,
 1725,   61,   59, 1750, 1729, 1730,   59,  388, 1625,  301,
  453,   59,  455, 1142,  319,  307,    0,  414,  310,   59,
 1637, 1150,    0, 1152,  329, 1750, 1155,  332, 1157, 1754,
  319,   91, 1161, 1162, 1163, 1164,  341, 1697,   59,  344,
 1169,  697,   40, 1768,  388,  295,  462,  463,  280,   59,
 1667,  425, 1655,  397,  286, 1655,  306,   41,  403, 1676,
   44,  280,  338,  313,  720,   41, 1507,  286,   44, 1729,
 1730, 1721,  466,    0,  468,   59,  732,   61,  280,   41,
 1209,   59,   44,  388,  286,  462,  260,  379,  338,  321,
  435,  264,  397, 1710, 1754,   42,   43,  441,   45,  375,
   47, 1718,  321,   41,  317,  450,   44,   91, 1768,  401,
  312,  319,  388,  338,   41,  461,  408,   44,   42,   43,
  412,   45,   41,   47,  453,   44, 1743,  419,  302,  278,
  337,  280,   59,    0,   61,   41,  441,    0,   44,  288,
  314,  258,    0,  403,  322,  437, 1275, 1118,  453, 1120,
  442,  329,  301,  403,  332, 1284,    0,  274,  336,  341,
  277,  278, 1291,  280,   40,  339,  344,    0,  285,   41,
   41,  288,   44,   44,   41,  467,  321,   44,   41,  471,
  319,   44,  360,   41,  301,  435,   44,  403, 1317,  439,
  307,   41,   59,  310,   44,  384,   59,   41,  258,   41,
   44,   59,   44,   61,   42,   43,  384,   45, 1337,   47,
   41,  507, 1341,   44,  274,   59,  384,   61,  278,  397,
  280,   59,  437,  451,   41,  285,   59,   44,  288,  322,
  379,   41,   42,   43,  408,   45,  414,   47,  362,   41,
  435,  301,   44,  336,  418,   41,   41,  307,   44,   44,
  310,  344,  401,  418,   41,   40, 1697,   44,   43,  408,
   45,   41,  379,  441,   44,  461,  443,  360,  260,  443,
  458,  459,  460,   58,  258,  453,  288,  455,   63,  358,
  412,   44,   61,  470,  401, 1414,  373,  461, 1729, 1730,
  274,  408,  287,  442,  278,  412,  280,   40,  486,  487,
  264,  285,  419,   40,  288,  462,  462,  462, 1437, 1438,
  302,   44,  321, 1754,  437,  461,   44,  301,  403,  379,
  437,  414,  314,  307,   40,  442,  310, 1768,   40,   40,
  260,  258, 1461,  280,   40, 1464,  328,   40,  262,  286,
   40,  401,   40,   40,    0,    0,   40,  339,  408,   40,
  467,  278,  412,  280,  471,   40,  280,   40,  285,  419,
  461,  288,  286,   40,   91,  312, 1495,   41,   42,   43,
   46,   45,  302,   47,  301,  321,   44,  437,   40,   44,
  307,   43,  442,   45,  314,   41,   41,  429,   44,   44,
   61,   40,  665,   46,  667,  379,   58,  670,  671,  672,
  258,   63,  264,   59,   59,  280,   44,  467,  383,  339,
   46,  471,    0,  349,  258,   44,  408,  401,  278,  277,
  278, 1550,  280,  278,  408,  264,  418,  285,  412, 1558,
  288,  301,  461,  277,  278,  419,  280,  398,  437,  471,
  398,  285,  280,  301,  288,  459,  279,  277,  286,  307,
  400,  443,  379,  437,  448,  448,   40,  301,  442,  350,
   40,   91,   40,  307, 1593,   40, 1595,  319,  301,  461,
  280,   59,  264,  384,  401,  412,  286,   44,  408,  383,
  390,  408,  267,  467,   40,   40,  437,  471,  418,  318,
   40,  276,  419,  465,  321,  321,  452,  330,   41,  453,
  449,   40,  461,   42,   43,  290,   45,  264,  293,  461,
  437,  296,  297,  443, 1643,  442,  349,  459,   40,   58,
  455,  379,  277,  274,   63,  358,   40,  301,    0,  329,
  315,  364,   41,   42,   43,  379,   45,  285,   47,  324,
  345,  345,  327,  401,  471,  419,  278,  387,  417,  382,
  408,   42,   43,   44,   45, 1684,   47,  401,  419,  417,
  301,  419,  387,  387,  408,   40,  357,  418,  461,   41,
  355,  356,   44,   40,   40,  419,   44,  386,  274,  437,
  368,   44,  367,  321,  442,  264,  371,   59,   41,   44,
  321,  280,   44,  437,  379,   40,   44,   44,  442,  329,
  503,  506,  266,  403,   45,  267,  280,   40,  300,   40,
  502,  423,  286,  471,  276,  461,  264,   41,   58,   41,
   41,   41,  278,  278,  280,  280,    0,  471,  290,  285,
  285,  264,  288,  288,  296,  297,  455,  422,  441,  439,
  310,  395,   41,  428,  444,  301,  301,  310,  493,  434,
  450,   41,   40,  315,   41,   42,   43,   40,   45,  444,
   47,  461,  324,   42,   43,  327,   45,   41,   47,  469,
   44,  353,   40,  458,  459,  460,  461,  462,  463,   40,
   40,   40,   40,   40,   40,   59,   40,  472,   40,   40,
   40,  279,   40,  355,  356,   40,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  367,  491,   40,    0,  371,
  262,  496,  497,  301,  499,  500,  501,  379,  328,   44,
  505,  260,  436,  379,  379,   41,   42,   43,  267,   45,
  309,   47,   41,  344,  274,  389,   40,  276,   42,   43,
  332,   45,  330,  389,  389,  401,  401,  391,  423,  392,
  271,  290,  408,  408,   58,  288,  418,  296,  297,   63,
  422,  349,  387,  447,  387,  304,  428,   59,  408,  357,
  358,  280,  434,  387,  387,  387,  364,  286,  387,   41,
  379,   41,  444,  278,   40,  324,  442,  442,  327,  280,
   41,   41,  418,   41,  382,  286,  458,  459,  460,  461,
  462,  463,  437,  386,   41,  309,  394,  397,  396,  436,
  472,  338,    0,  339,  353,  443,  355,  356,  302,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  367,  491,
   41,  419,  371,  339,  496,  497,  443,  499,  500,  501,
   41,   42,   43,  505,   45,  302,   47,  319,   41,   42,
   43,   41,   45,  353,   47,  296,  444,  329,  386,   40,
  332,  372,   43,   41,   45,  372,   41,   41,   41,  341,
   41,   59,  344,   41,   41,   41,   41,   58,   41,   41,
   41,   41,   63,  262,   41,   42,   43,   41,   45,  428,
   47,   41,   41,  280,  280,  434,   41,   42,   43,  286,
   45,  280,   47,   59,  278,  444,  280,  286,   44,   40,
   40,  341,  353,   59,  288,   59,  388,   59,  341,  458,
  459,  460,  461,  462,  463,  397,   59,  301,   41,   42,
   43,   59,   45,  472,   47,   59,  309,   41,  353,  345,
  321,   41,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  369,  491,   40,  452,  384,  260,  496,  497,  341,
  499,  500,  501,  267,  280,   59,  505,  461,  384,  441,
  286,  384,  276,   41,   42,   43,   41,   45,   44,   47,
  279,  453,   41,   44,  411,  436,  290,  279,   44,  302,
  305,   41,  296,  297,  443,   41,   42,   43,  344,   45,
  304,   47,  301,  444,   40,  379,   59,  294,  305,  301,
   40,   44,  308,   43,  464,   45,   44,  458,  459,  460,
  324,  462,  463,  327,   41,    0,  338,  401,   58,  384,
   40,  330,  264,   63,  408,  384,  461,  278,  330,  264,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  353,
  349,  355,  356,  390,  459,  496,  497,  349,  321,  358,
  264,  471,   40,  367,  310,  364,  358,  371,  442,  850,
  258,  852,  364,  854,  855,  452,  857,  858,  859,  280,
  412,  459,  271,  382,  264,  286,  267,  280,  459,  436,
  382,  279,  344,  286,   40,  276,  437,   43,  461,   45,
   41,   42,   43,  309,   45,  344,   47,  271,  344,  290,
  344,   41,   58,  301,   40,  296,  297,   63,  309,  307,
   40,   59,  309,  280,  428,   41,   41,   59,  305,  286,
  434,   44,   59,   41,  315,  280,    0,    0,    0, 1121,
  444,  286,  330,  324,   12,  252,  327,  245,  244,  652,
 1057,  612,  830, 1055,  458,  459,  460,  461,  462,  463,
   84,  349, 1052, 1044, 1400,  305,  335,  280,  472,  357,
  358,  300,  291,  286,  355,  356,  364,  481,  482,  483,
  484,  485,  486,  487,  488,  489,  367,  491,  982,  559,
  371, 1034,  496,  497,  382,  499,  500,  501,  379,  317,
  317,  505,   42,   43, 1045,   45,  726,   47, 1591,  763,
 1380, 1378,  280, 1660,  538, 1664, 1701, 1663,  286,   59,
  473,  474,  475,  476,  477,  478,  479,  480,  753, 1698,
  260,  419, 1753,  263,  280, 1610, 1207,  267,  370, 1184,
  286,  422,  430,  966, 1359, 1414,  276,  428,   41,   42,
   43,  322,   45,  434,   47, 1667,  310,  540,  303,  598,
  290,  809, 1241,  444,  801,  404,  296,  297,  476,   13,
  278,  715,  472,  731,  969,  122,  702,  458,  459,  460,
  461,  462,  463,   41,   42,   43,  943,   45, 1582,   47,
  701,  472, 1718, 1479,  324,  659, 1676,  327, 1771,    0,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  488,
  491, 1089,  886,    0,  260,  496,  497,  263,  499,  500,
  501,  267,  369, 1157,  505,  355,  356,   -1,   -1,   40,
  276,   -1,   43,   -1,   45,   -1,   -1,  367,   -1,  280,
   41,  371,   -1,   44,  290,  286,   -1,   58,   -1,  261,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,   59,   41,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,  283,   59,   -1,   -1,   -1,   -1,   -1,  324,  291,
   -1,  327,    0,   41,   42,   43,  298,   45,  300,   47,
  302,   -1,   -1,   -1,   -1,  307,  426,   -1,  428,   -1,
   -1,   -1,  314,   -1,  434,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,   -1,  444,   -1,  328,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,  339,  458,  459,
  460,  461,  462,  463,   42,   43,   -1,   45,   -1,   47,
  280,   59,  472,   41,   42,   43,  286,   45,   -1,   47,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   60,   61,   62,   -1,  496,  497,   -1,  499,
  500,  501,   -1,   -1,   -1,  505,   -1,   -1,   42,   43,
  426,   45,  428,   47,   -1,   -1,   -1,  280,  434,   -1,
   -1,   -1,   -1,  286,  406,   59,   -1,   -1,  444,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,  419,   -1,   -1,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   -1,  472,   -1,  286,   -1,
   -1,  443,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,
  496,  497,  263,  499,  500,  501,  267,  258,   -1,  505,
    0,  306,   -1,   -1,   40,  276,   -1,   43,  313,   45,
   -1,  258,  317,  318,   -1,   -1,   -1,   -1,  279,  290,
  492,  326,   58,   -1,   -1,  296,  297,   63,   -1,   -1,
   -1,   -1,  279,  338,   -1,  507,   -1,   -1,  280,   -1,
  301,   -1,   -1,   -1,  286,   -1,  307,   -1,   -1,   -1,
   -1,   -1,   -1,  324,  301,   -1,  327,   -1,   -1,   59,
  307,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,  330,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  258,   -1,   -1,  330,  355,  356,   40,   -1,  349,   43,
   -1,   45,   -1,   -1,   -1,   -1,  367,  358,  403,   -1,
  371,  279,  349,  364,   58,   -1,   -1,   -1,   -1,   63,
   -1,  358,  280,   -1,  272,  420,   -1,  364,  286,   -1,
   -1,  382,  280,  301,   -1,   -1,   -1,   -1,  286,  307,
  435,  289,   -1,   -1,  439,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  450,   -1,   -1,   -1,   -1,
   -1,   -1,  330,   -1,  306,  426,  280,  428,  419,   -1,
   -1,  313,  286,  434,  469,   -1,   -1,  325,   -1,   -1,
   -1,  349,  419,  444,  326,   -1,  334,   -1,   -1,   -1,
  358,   -1,   -1,   -1,  342,   -1,  364,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,  361,  382,  363,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  377,
  491,  379,  380,  381,  260,  496,  497,  263,  499,  500,
  501,  267,   -1,   -1,  505,  387,   -1,   -1,   -1,   40,
  276,  419,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  403,   -1,   -1,  290,   -1,   -1,   58,  258,   -1,
  296,  297,   63,   -1,   -1,   -1,   -1,   -1,  420,   -1,
   -1,   -1,  430,   -1,   -1,   -1,   -1,   -1,   -1,  279,
   -1,   -1,   -1,  435,   -1,   -1,   -1,  439,  324,   -1,
  442,  327,   -1,   -1,   -1,   -1,   -1,   -1,  450,   -1,
   -1,  301,   -1,   -1,   -1,   -1,  260,  307,   -1,  263,
   -1,   -1,   -1,  267,   -1,   -1,   -1,  469,   -1,  355,
  356,   40,  276,   -1,   43,   -1,   45,   -1,   -1,   -1,
  330,  367,   -1,   -1,    0,  371,  290,   -1,   -1,   58,
   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,  349,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,  327,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  426,   -1,  428,   59,   -1,   -1,   -1,   -1,  434,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,  419,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,
  496,  497,  263,  499,  500,  501,  267,   -1,   -1,  505,
   -1,   -1,  426,   -1,  428,  276,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
  444,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,  324,   -1,   -1,  327,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,  260,  496,  497,  263,  499,  500,  501,  267,   -1,
   -1,  505,   -1,   -1,  355,  356,   40,  276,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,  290,   -1,    0,   58, 1276, 1277,  296,  297,   63,
   -1, 1282, 1283,   -1, 1285, 1286,   -1,   -1,   -1,   -1,
   -1,   -1, 1293, 1294, 1295, 1296,   -1, 1298, 1299, 1300,
 1301, 1302, 1303,   -1,   -1,  324,   -1,   -1,  327,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  426,   -1,  428,   -1,   -1,
   -1,   -1,   59,  434,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,  319,   -1,   -1,  322,  458,  459,  460,
  461,  462,  463,  329,   -1,   -1,  332,   -1,   -1,   -1,
  336,  472,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,  360,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,  505,   -1,   -1,  426,   -1,  428,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,  384,   -1,
   -1,   -1,  388,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,  414,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,  271,   -1,  441,  260,  496,  497,  263,
  499,  500,  501,  267,   -1,   -1,  505,  453,   -1,   -1,
   -1,   40,  276,   42,   43,  461,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,   -1,  290,   -1,    0,   58,
   -1,  309,  296,  297,   63,  313,  314,   -1,  316,   -1,
   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,   -1,   -1,
  324,  339,   -1,  327,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,  355,  356,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  319,   58,   -1,  322,   -1,   -1,   63,   -1,
   -1,  399,  329,   -1,   -1,  332,   -1,   -1,   -1,  336,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,
  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,  433,   -1,   -1,   -1,   -1,
   -1,   -1,  426,   -1,  428,  443,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,  452,   -1,  454,  384,   -1,   -1,
  444,  388,   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  472,   -1,
   -1,   -1,  490,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,  271,  496,  497,  441,  499,  500,  501,  267,   -1,
   -1,  505,   -1,   -1,   -1,   -1,  453,  276,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  302,   -1,   -1,   -1,   58,  296,  297,   -1,
   -1,   63,   -1,  313,  314,   -1,  316,   -1,   -1,  319,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,  324,   -1,   -1,  327,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  353,   -1,  355,  356,   -1,   -1,
   40,  276,   -1,   43,   -1,   45,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,  290,   -1,  319,   58,   -1,
  322,  296,  297,   63,   -1,   -1,   -1,  329,   -1,  399,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  418,  324,
   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,  428,
   -1,   -1,   -1,  443,   -1,  434,   -1,   -1,  353,   -1,
  355,  356,  384,   -1,  454,  444,  388,   -1,   -1,   -1,
   -1,  461,  367,   -1,   -1,  397,  371,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  414,  472,   -1,   -1,   -1,   -1,   -1,   -1,
  490,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,  441,
  499,  500,  501,  418,   -1,  267,  505,   -1,   -1,   -1,
   -1,  453,   -1,  428,  276,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  444,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,  324,   -1,   -1,  327,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
  260,  496,  497,   -1,  499,  500,  501,  267,   -1,   -1,
  505,  353,   -1,  355,  356,   40,  276,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
  290,   -1,   -1,   58,   -1,   -1,  296,  297,   63,   -1,
   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,  355,  356,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
   -1,   -1,   -1,  505,   -1,   -1,   -1,   -1,  428,   -1,
   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,  273,   -1,   -1,
   -1,  277,  472,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
  296,  491,   -1,  299,   -1,   -1,  496,  497,   -1,  499,
  500,  501,  267,   40,   -1,  505,   43,   -1,   45,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,   -1,  290,   63,   -1,   -1,   -1,
   -1,  296,  297,   -1,  340,   -1,   -1,   -1,   -1,   -1,
  346,  347,  348,  272,  350,  351,  352,   -1,  354,   -1,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,  324,
  289,   -1,  327,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  355,  356,   43,   -1,   45,   -1,  325,   -1,   -1,   -1,
   -1,  407,  367,   -1,   -1,  334,  371,   58,   -1,   -1,
   -1,   -1,   63,  342,   -1,   -1,   -1,   -1,  424,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  361,   -1,  363,   -1,   -1,   -1,   -1,   -1,
  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,  302,  461,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  428,   -1,  313,  314,   -1,  316,  434,
   -1,  319,   -1,   -1,   -1,  481,  482,   -1,   -1,  444,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  452,   -1,   -1,
   -1,  339,  498,  458,  459,  460,  461,  462,  463,   -1,
   -1,  430,   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,   -1,
  267,  496,  497,   -1,  499,  500,  501,   -1,   -1,  276,
  505,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  399,   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
  418,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  433,   58,  324,   -1,   -1,
  327,   63,   -1,   -1,   -1,  443,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  452,   -1,  454,   -1,   -1,   -1,
   -1,   -1,   -1,  461,   -1,   -1,  267,   -1,  355,  356,
   -1,   -1,   -1,   41,   -1,  276,   44,   -1,   -1,   -1,
  367,   -1,   40,   -1,  371,   43,   -1,   45,   -1,  290,
   -1,   59,  490,   -1,   -1,  296,  297,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,
   -1,  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  428,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,  353,   -1,  355,  356,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,  505,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  444,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,  290,   -1,
   -1,  472,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,   -1,   -1,  262,  496,  497,   -1,  499,  500,
  501,   -1,  324,   -1,  505,  327,   -1,   -1,   40,  267,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,  290,  355,  356,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,   -1,  332,   -1,  324,   -1,  336,  327,
   -1,   -1,   40,  341,   -1,   43,  344,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,  360,   -1,   -1,   63,   -1,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,  367,
   -1,   -1,  434,  371,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,  436,  491,
  428,   -1,   -1,  441,  496,  497,  434,  499,  500,  501,
   -1,   -1,   -1,  505,   -1,  453,  444,  455,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,  267,   -1,   -1,  496,  497,
   -1,  499,  500,  501,  276,   -1,   -1,  505,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,  290,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  355,  356,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   40,   -1,  371,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,  324,   -1,   -1,  327,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  418,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,  367,
   -1,   -1,  434,  371,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  428,   -1,   -1,   -1,  496,  497,  434,  499,  500,  501,
   -1,   -1,   -1,  505,   -1,   -1,  444,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,  276,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  290,   -1,  472,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,
  461,  499,  500,  501,   -1,   -1,  324,  505,   -1,  327,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,  483,  484,  485,   -1,   -1,  488,  489,  490,
  491,   -1,  493,   -1,  267,  496,  497,  355,  356,   -1,
   -1,   -1,   40,  276,   -1,   43,   -1,   45,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  290,   -1,   -1,
   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,
  428,   45,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
  353,   -1,  355,  356,   58,   -1,  444,   -1,   -1,   63,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,
   -1,  499,  500,  501,   -1,   -1,   -1,  505,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,
   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,  444,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,  296,   -1,   -1,  299,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  267,
   -1,   -1,  505,   -1,   -1,   -1,  340,   -1,  276,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,  290,   -1,   -1,   -1,   -1,  273,  296,  297,
   -1,  277,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
  374,   -1,  376,   -1,   -1,   -1,  292,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,  324,   -1,   -1,  327,
   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  276,  407,   -1,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,  290,  355,  356,   -1,
  424,   -1,  296,  297,  340,   59,   60,   61,   62,  367,
  346,  347,  348,  371,  350,  351,  352,   -1,  354,   -1,
   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,  327,   -1,   -1,   -1,   91,  374,   93,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  428,  407,   -1,  367,  498,   -1,  434,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,
  446,    0,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,  428,   -1,   -1,   -1,  496,  497,
  434,  499,  500,  501,   -1,  481,  482,  505,   -1,   -1,
  444,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,  498,   -1,  458,  459,  460,  461,  462,  463,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   93,  499,  500,  501,  262,   -1,
  264,  505,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,
   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,
  334,   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,  360,  361,   -1,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,
  384,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,
  414,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,   -1,  264,  430,   -1,   -1,   -1,
   -1,   -1,  436,  272,   -1,   -1,   -1,  441,   -1,   -1,
   -1,  280,   -1,   -1,   -1,   -1,   93,  286,  452,  453,
  289,  455,   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  308,
  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,  360,  361,   -1,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
  273,   -1,  411,   -1,  277,  414,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
   -1,  430,   -1,  296,   -1,   -1,  299,  436,   -1,   -1,
   -1,   -1,  441,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,  452,  453,  262,  455,  264,   -1,   -1,
   -1,   -1,  461,   -1,   -1,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,  286,
   -1,   -1,  289,  346,  347,  348,   -1,  350,  351,  352,
   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  308,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,
   -1,  374,  319,  376,  321,  322,   -1,   -1,  325,   -1,
   -1,   -1,  329,   -1,   -1,  332,   -1,  334,   -1,  336,
   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,  412,
    0,   -1,   -1,  360,  361,   -1,  363,   -1,   -1,   -1,
   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  481,  482,
  262,   -1,  264,  430,   -1,   -1,   -1,   -1,   -1,  436,
  272,   -1,   -1,   -1,  441,  498,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,  452,  453,  289,  455,   -1,
   -1,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,
  312,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  321,
  322,   -1,   -1,  325,   -1,   -1,   -1,  329,    0,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   43,   44,   45,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  411,
   -1,  277,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,  430,   -1,
  296,   -1,   -1,  299,  436,   -1,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,  453,  262,  455,  264,   -1,   -1,   -1,   -1,  461,
   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,   -1,  289,
  346,  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,  308,  309,
   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,  374,  319,
  376,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,
   -1,  341,  342,   -1,  344,   -1,   41,   -1,   43,   44,
   45,  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,   -1,  363,   59,   60,   61,   62,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,
  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
  446,   -1,   -1,   -1,   -1,   -1,   -1,  397,   93,   -1,
  262,   -1,  264,   -1,   -1,  461,   -1,   -1,   -1,   -1,
  272,  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  289,   -1,   -1,
  430,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,
   -1,  441,  498,    0,   -1,   -1,  308,  309,   -1,   -1,
  312,   -1,  452,  453,   -1,  455,   -1,  319,   -1,  321,
  322,  461,   -1,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
   -1,  363,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,  430,  264,
   -1,   -1,   -1,   -1,  436,   -1,   -1,  272,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,  453,   -1,  455,  289,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,  308,  309,   -1,   -1,  312,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,   -1,   -1,  341,  342,   -1,  344,
   -1,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,   -1,  363,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   93,   -1,  262,   -1,  264,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  272,  411,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,   -1,   -1,  430,   -1,   -1,   -1,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,    0,   -1,
   -1,  308,  309,   41,    0,  312,   44,  452,  453,   -1,
  455,   -1,  319,   -1,  321,  322,  461,   -1,  325,   -1,
   -1,   59,  329,   -1,   -1,  332,   -1,  334,   -1,  336,
   -1,   -1,   -1,   -1,  341,  342,   -1,  344,   -1,   41,
   -1,   -1,   44,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,  360,  361,   -1,  363,   59,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,  379,  380,  381,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,   -1,   -1,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,  430,  264,   -1,   -1,   -1,   -1,  436,
   -1,   -1,  272,   41,  441,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  452,  453,   -1,  455,  289,
   -1,   59,   -1,   -1,  461,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  308,  309,
   -1,   -1,  312,   -1,   -1,    0,   -1,   -1,   -1,  319,
   -1,  321,  322,   -1,   -1,  325,    0,   -1,   -1,  329,
   -1,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,   -1,
   -1,  341,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  360,  361,   -1,  363,  262,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   59,   -1,   -1,  377,   -1,  379,
  380,  381,   -1,   -1,  384,   59,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  411,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,   -1,  322,   -1,   -1,   -1,    0,   -1,
  430,  329,   -1,   -1,  332,   -1,  436,   -1,  336,   -1,
   -1,  441,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  452,  453,   -1,  455,   -1,  319,   -1,   -1,
  322,  461,  360,  319,    0,   -1,  322,  329,   -1,   41,
  332,   -1,   44,  329,  336,   -1,  332,   -1,   -1,  341,
  336,   -1,  344,   -1,   -1,  341,  384,   59,  344,  387,
  388,   -1,   -1,   -1,  262,   -1,   -1,   -1,  360,  397,
   -1,   -1,   -1,   -1,  360,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,
   -1,   -1,  384,   59,   -1,  387,  388,   -1,  384,   -1,
   -1,  387,  388,   -1,   -1,  397,   -1,   -1,  436,   -1,
   -1,  397,   -1,  441,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  319,  414,   -1,  322,  453,   -1,  455,  414,   -1,
   -1,  329,   -1,   -1,  332,    0,   -1,   -1,  336,   -1,
   -1,   -1,   -1,  341,  436,   -1,  344,  262,   -1,  441,
  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,  262,   -1,
   -1,  453,  360,  455,    0,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  319,   41,   -1,  322,   44,   -1,
   -1,   -1,   -1,   -1,  329,  319,  414,  332,  322,   -1,
   -1,  336,   -1,   59,   -1,  329,  341,   -1,  332,  344,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  341,  436,   -1,
  344,   -1,   -1,  441,   -1,  360,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,  453,  360,  455,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
  384,   -1,  397,  387,  388,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,  397,   -1,   -1,  262,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  414,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,  436,   -1,   -1,   -1,   -1,  441,  329,   -1,   -1,
  332,   -1,  436,   -1,  336,   -1,   -1,  441,  453,  341,
  455,   -1,  344,   -1,   -1,   -1,   -1,    0,   -1,  453,
   -1,  455,   -1,  319,   -1,   -1,  322,   -1,  360,   -1,
   -1,   -1,   -1,  329,   -1,   -1,  332,   -1,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,    0,   -1,  344,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   41,   -1,
   -1,   44,   -1,   -1,  360,  397,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   41,  384,   -1,
   44,  387,  388,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  397,   -1,   -1,  436,   59,   -1,   -1,   -1,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,
   -1,  453,   -1,  455,  319,   -1,   -1,  322,   -1,   -1,
   -1,   -1,    0,   -1,  329,   -1,   -1,  332,   -1,   -1,
  436,  336,   -1,   -1,   -1,  441,  341,   -1,   -1,  344,
   -1,   -1,   -1,  319,   -1,   -1,  322,  453,   -1,  455,
   -1,   -1,   -1,  329,    0,  360,  332,   -1,   -1,   -1,
  336,   -1,   -1,   41,   -1,  341,   44,   -1,  344,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   59,  387,  388,  360,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  414,
   -1,  387,  388,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,  436,   -1,   -1,   -1,   -1,  441,  329,  414,   -1,
  332,   -1,    0,   -1,  336,   -1,   -1,   -1,  453,  341,
  455,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  436,   -1,    0,   -1,   -1,  441,   -1,   -1,  360,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,  262,   -1,
   -1,   59,   -1,   41,   -1,  397,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  414,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,
   -1,   -1,   -1,  336,  436,   -1,   -1,   -1,  341,  441,
   -1,  344,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,
   -1,  453,   -1,  455,   -1,  329,   -1,  360,  332,   -1,
    0,   -1,  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
    0,  384,   -1,   -1,  387,  388,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,  262,   -1,   -1,   -1,
  384,  414,   -1,  387,  388,   -1,   -1,   -1,   -1,   59,
   -1,   41,   -1,  397,   44,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  436,  322,   -1,   -1,   -1,  441,   59,
  414,  329,   -1,    0,  332,   -1,   -1,   -1,  336,   -1,
  453,   -1,  455,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  436,  319,   -1,   -1,  322,  441,   -1,   -1,
   -1,   -1,  360,  329,   -1,   -1,  332,   -1,   -1,  453,
  336,  455,   -1,   -1,   41,  341,   -1,   44,  344,   -1,
   -1,   -1,   -1,   -1,  262,   -1,  384,   -1,   -1,  387,
  388,   -1,   59,   -1,  360,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,
   -1,  319,   -1,  441,  322,   -1,   -1,   -1,  414,   -1,
   -1,  329,   -1,   -1,  332,  453,   -1,  455,  336,   -1,
   -1,  319,   -1,  341,  322,   -1,  344,   -1,   -1,   -1,
  436,  329,   -1,  273,  332,  441,   -1,  277,  336,   -1,
   -1,   -1,  360,  341,   -1,   -1,  344,  453,   -1,  455,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,  360,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  262,   -1,   -1,   -1,  414,   -1,   -1,  397,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,   -1,
  350,  351,  352,   -1,  354,   -1,  414,   -1,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,   -1,  319,
   -1,   -1,  322,   -1,  374,  453,  376,  455,  436,  329,
   -1,   -1,  332,  441,   -1,   -1,  336,   -1,   -1,  319,
   -1,  341,  322,   -1,  344,  453,   -1,  455,   -1,  329,
   -1,   -1,  332,   -1,   -1,   -1,  336,  407,   -1,   -1,
  360,  341,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  446,  397,   -1,   -1,
   -1,   -1,  319,   -1,  384,  322,   -1,  387,  388,   -1,
   -1,   -1,  329,   -1,  414,  332,   -1,  397,   -1,  336,
   -1,   -1,   -1,   -1,  341,   -1,  273,  344,   -1,   -1,
  277,  481,  482,   -1,  414,   -1,  436,   -1,   -1,   -1,
   -1,  441,   -1,  360,   -1,   -1,   -1,   -1,  498,  296,
   -1,   -1,  299,  453,   -1,  455,  436,   -1,   -1,   -1,
   -1,  441,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,   -1,   -1,   -1,  414,   -1,  346,
  347,  348,   -1,  350,  351,  352,   -1,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  436,
   -1,   -1,   -1,   -1,  441,   -1,   -1,  374,   -1,  376,
   -1,   -1,   -1,   -1,  461,   -1,  453,   -1,  455,   -1,
   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,  483,  484,  485,   -1,
  407,  488,  489,  490,  491,   -1,  493,   -1,   -1,  496,
  497,   -1,   -1,  461,   -1,   -1,   -1,  424,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,   -1,  446,
  488,  489,  490,  491,   -1,  493,   -1,   -1,  496,  497,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  498,
};
#define YYFINAL 19
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 507
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING","NULLS","LAST","ROWS_AFFECTED",
"LOCK","SAVEPOINT",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : user_savepoint",
"statement : undo_savepoint",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : excp_statement",
"proc_statement : raise_statement",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"excp_statement : EXCEPTION symbol_exception_name ';'",
"excp_statement : EXCEPTION symbol_exception_name value ';'",
"raise_statement : EXCEPTION ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"user_savepoint : SAVEPOINT symbol_savepoint_name",
"undo_savepoint : ROLLBACK optional_work TO optional_savepoint symbol_savepoint_name",
"optional_savepoint : SAVEPOINT",
"optional_savepoint :",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction nulls_placement",
"order_item : ordinal collate_clause order_direction nulls_placement",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : NULLS FIRST",
"nulls_placement : NULLS LAST",
"nulls_placement :",
"for_update_clause : FOR UPDATE for_update_list lock_clause",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"lock_clause : WITH LOCK",
"lock_clause :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : proc_internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"proc_internal_info : GDSCODE",
"proc_internal_info : SQLCODE",
"proc_internal_info : ROWS_AFFECTED",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
"symbol_savepoint_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (DSQL_NOD, SLONG *);
static FLD	make_field (DSQL_NOD);
static FIL	make_file (void);
static DSQL_NOD	make_list (DSQL_NOD);
static DSQL_NOD	make_node (NOD_TYPE, int, ...);
static DSQL_NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (DSQL_NOD, SLONG *, SSHORT);
static void	stack_nodes (DSQL_NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    DSQL_NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    DSQL_NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = FB_NEW_RPT(*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = FB_NEW_RPT(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = FB_NEW(*tdsql->tsql_default) fil;

return temp_file;
}


static DSQL_NOD make_list (
    DSQL_NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
DSQL_NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
DSQL_NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = FB_NEW_RPT(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (DSQL_NOD) LLS_POP (&stack);

return node;
}


static DSQL_NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
DSQL_NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, DSQL_NOD);

return node;
}


static DSQL_NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
DSQL_NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = FB_NEW_RPT(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, DSQL_NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 100)
        *yydeb = level - 100;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    DSQL_NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    DSQL_NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
DSQL_NOD	*ptr, *end;
DSQL_NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (DSQL_NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (DSQL_NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (DSQL_NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (DSQL_NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (DSQL_NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (DSQL_NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (DSQL_NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (DSQL_NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (DSQL_NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 22:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 26:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 27:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 29:
{ yyval = yyvsp[0]; }
break;
case 30:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 31:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 32:
{ yyval = make_list (yyvsp[0]); }
break;
case 34:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 35:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 36:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 38:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 39:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 40:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 41:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 44:
{ yyval = 0; }
break;
case 45:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 51:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 52:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 53:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 60:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 65:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 66:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 68:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 72:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 73:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 74:
{ yyval = yyvsp[0];}
break;
case 75:
{ yyval = yyvsp[0]; }
break;
case 76:
{ yyval = yyvsp[0]; }
break;
case 77:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 79:
{ g_field->fld_dtype = dtype_blob; }
break;
case 80:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 81:
{ yyval = (DSQL_NOD) NULL; }
break;
case 83:
{ yyval = yyvsp[-1]; }
break;
case 85:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 86:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 87:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 89:
{ yyval = yyvsp[-1]; }
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 94:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(DSQL_NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 95:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 96:
{ yyval = yyvsp[0]; }
break;
case 97:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 98:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = yyvsp[0]; }
break;
case 115:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 116:
{ yyval = NULL; }
break;
case 117:
{ yyval = make_list (yyvsp[0]); }
break;
case 119:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 120:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 125:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 126:
{ yyval = (DSQL_NOD) 0;}
break;
case 127:
{ yyval = yyvsp[-1]; }
break;
case 128:
{ yyval = (DSQL_NOD) NULL; }
break;
case 131:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 132:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = NULL; }
break;
case 135:
{ yyval = yyvsp[0]; }
break;
case 136:
{ yyval = (DSQL_NOD) NULL; }
break;
case 137:
{ yyval = (DSQL_NOD) NULL; }
break;
case 140:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 141:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 144:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 146:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 148:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 151:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (DSQL_NOD) yyvsp[0]; }
break;
case 152:
{yyval = (DSQL_NOD) NULL;}
break;
case 155:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 156:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 157:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 158:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 160:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 161:
{yyval = (DSQL_NOD) NULL;}
break;
case 164:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 168:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 172:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 175:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 176:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 177:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(DSQL_NOD) g_file);}
break;
case 178:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (DSQL_NOD) make_node (nod_file_desc, (int) 1,
						(DSQL_NOD) g_file); }
break;
case 180:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 181:
{ 
		         check_log_file_attrs(); 
			 yyval = (DSQL_NOD) make_node (nod_log_file_desc, (int) 1,
                                                (DSQL_NOD) g_file); }
break;
case 182:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 185:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 186:
{ g_file  = make_file ();}
break;
case 191:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 192:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 199:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = yyvsp[0]; }
break;
case 203:
{ yyval = (DSQL_NOD) NULL; }
break;
case 205:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 211:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 214:
{ yyval = NULL; }
break;
case 215:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 216:
{ yyval = yyvsp[0]; }
break;
case 217:
{ yyval = (DSQL_NOD) NULL; }
break;
case 218:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (DSQL_NOD) g_field; }
break;
case 219:
{ g_field = make_field (yyvsp[0]);
				  yyval = (DSQL_NOD) g_field; }
break;
case 220:
{ yyval = yyvsp[-1]; }
break;
case 221:
{ g_field = make_field (NULL);
			  yyval = (DSQL_NOD) g_field; }
break;
case 222:
{ yyval = yyvsp[0]; }
break;
case 223:
{ yyval = (DSQL_NOD) NULL; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = yyvsp[0]; }
break;
case 230:
{ yyval = (DSQL_NOD) NULL; }
break;
case 233:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 234:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 235:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 236:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 238:
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 239:
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 240:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 241:
{ yyval = yyvsp[0]; }
break;
case 242:
{ yyval = NULL ;}
break;
case 247:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 250:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 251:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 256:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 257:
{ yyval = NULL;}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = yyvsp[0];}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 264:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 268:
{ yyval = make_list (yyvsp[-1]); }
break;
case 269:
{ yyval = NULL; }
break;
case 270:
{ yyval = yyvsp[0]; }
break;
case 271:
{ yyval = NULL; }
break;
case 273:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 274:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 275:
{ yyval = make_list (yyvsp[0]); }
break;
case 276:
{ yyval = NULL; }
break;
case 278:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 279:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = NULL; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 283:
{ yyval = yyvsp[0]; }
break;
case 286:
{ yyval = yyvsp[-1]; }
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 288:
{ yyval = make_node (nod_block, e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 289:
{ yyval = make_node (nod_block, e_blk_count, NULL, NULL);}
break;
case 291:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 301:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 305:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 306:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 307:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 308:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-1], NULL); }
break;
case 309:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, yyvsp[-2], yyvsp[-1]); }
break;
case 310:
{ yyval = make_node (nod_exception_stmt, e_xcp_count, NULL, NULL); }
break;
case 311:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 312:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 313:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 314:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 315:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 316:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 317:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 318:
{ yyval = make_list (yyvsp[0]); }
break;
case 319:
{ yyval = make_list (yyvsp[-1]); }
break;
case 320:
{ yyval = NULL; }
break;
case 321:
{ yyval = make_list (yyvsp[0]); }
break;
case 322:
{ yyval = make_list (yyvsp[-1]); }
break;
case 323:
{ yyval = NULL; }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 328:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 329:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 330:
{ yyval = NULL; }
break;
case 332:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 335:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 336:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 337:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 338:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 339:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 340:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 341:
{ yyval = make_list (yyvsp[0]); }
break;
case 342:
{ yyval = make_list (yyvsp[-1]); }
break;
case 343:
{ yyval = NULL; }
break;
case 347:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 349:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 351:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 353:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 354:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 355:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 356:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 357:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 358:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 359:
{ yyval = make_list (yyvsp[0]); }
break;
case 361:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 364:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 365:
{ yyval = yyvsp[-1]; }
break;
case 366:
{ beginning = lex_position(); }
break;
case 367:
{ yyval = (DSQL_NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 368:
{ beginning = last_token; }
break;
case 369:
{ yyval = (DSQL_NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 370:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 371:
{ yyval = 0; }
break;
case 372:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 373:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 374:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 376:
{ yyval = NULL; }
break;
case 377:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 378:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 390:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 391:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 392:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 393:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 394:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 395:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 396:
{ yyval = NULL; }
break;
case 397:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 398:
{ yyval = yyvsp[0]; }
break;
case 399:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 400:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = yyvsp[0]; }
break;
case 403:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 404:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 405:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 409:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 410:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 411:
{ yyval = yyvsp[0]; }
break;
case 412:
{ yyval = yyvsp[0]; }
break;
case 413:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 414:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 415:
{ yyval = yyvsp[0]; }
break;
case 416:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 418:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 419:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 421:
{ yyval = yyvsp[0]; }
break;
case 422:
{ yyval = yyvsp[0]; }
break;
case 423:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 424:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 425:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 426:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 451:
{ yyval = NULL; }
break;
case 452:
{ yyval = NULL; }
break;
case 453:
{ yyval = NULL; }
break;
case 454:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 455:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (DSQL_NOD) g_field; }
break;
case 456:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 457:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 458:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 459:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 460:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 461:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (DSQL_NOD) NULL; }
break;
case 463:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 464:
{ yyval = yyvsp[0]; }
break;
case 465:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 466:
{ yyval = yyvsp[0]; }
break;
case 467:
{ yyval = yyvsp[0]; }
break;
case 469:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 470:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 472:
{ yyval = NULL; }
break;
case 474:
{ yyval = NULL; }
break;
case 475:
{ yyval = yyvsp[0]; }
break;
case 476:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 483:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 484:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 485:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 486:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 487:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 492:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 493:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 495:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 496:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 497:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 503:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 504:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 505:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 506:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 507:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 511:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 512:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 513:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 514:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 515:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 516:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 517:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 518:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 519:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 520:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 523:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 524:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 525:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 526:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 527:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 536:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 537:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 538:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 539:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 540:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 541:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 544:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 545:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 546:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 547:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 548:
{ yyval = yyvsp[-1]; }
break;
case 549:
{ yyval = 0; }
break;
case 553:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 554:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 555:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 556:
{ yyval = make_node (nod_user_savepoint, 1, yyvsp[0]); }
break;
case 557:
{ yyval = make_node (nod_undo_savepoint, 1, yyvsp[0]); }
break;
case 560:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 561:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 564:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 565:
{ yyval = (DSQL_NOD) NULL; }
break;
case 567:
{ yyval = (DSQL_NOD) NULL; }
break;
case 568:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 570:
{ yyval = (DSQL_NOD) NULL; }
break;
case 572:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 577:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 578:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 579:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 580:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 581:
{ yyval = yyvsp[0];}
break;
case 583:
{ yyval = yyvsp[0];}
break;
case 584:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 585:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 586:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 587:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 588:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 589:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 590:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 591:
{ yyval = 0; }
break;
case 592:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 593:
{ yyval = (DSQL_NOD) NOD_SHARED; }
break;
case 594:
{ yyval = (DSQL_NOD) NOD_PROTECTED ; }
break;
case 595:
{ yyval = (DSQL_NOD) 0; }
break;
case 596:
{ yyval = (DSQL_NOD) NOD_READ; }
break;
case 597:
{ yyval = (DSQL_NOD) NOD_WRITE; }
break;
case 599:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 600:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 601:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 607:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 608:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 609:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 610:
{ yyval = make_list (yyvsp[0]); }
break;
case 611:
{ yyval = 0; }
break;
case 613:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 614:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 615:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 616:
{ yyval = 0; }
break;
case 617:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 618:
{ yyval = 0; }
break;
case 619:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 620:
{ yyval = 0; }
break;
case 621:
{ yyval = 0; }
break;
case 622:
{ yyval = make_node (nod_for_update, 2, yyvsp[-1], yyvsp[0]); }
break;
case 623:
{ yyval = 0; }
break;
case 624:
{ yyval = yyvsp[0]; }
break;
case 625:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 626:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 627:
{ yyval = 0; }
break;
case 628:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 629:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 630:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 631:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 632:
{ yyval = 0; }
break;
case 633:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 634:
{ yyval = yyvsp[-1]; }
break;
case 635:
{ yyval = yyvsp[0]; }
break;
case 636:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 637:
{ yyval = yyvsp[-1]; }
break;
case 638:
{ yyval = yyvsp[0]; }
break;
case 639:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 640:
{ yyval = 0; }
break;
case 641:
{ yyval = make_list (yyvsp[0]); }
break;
case 642:
{ yyval = 0; }
break;
case 644:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 646:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 647:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 648:
{ yyval = make_list (yyvsp[0]); }
break;
case 650:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 653:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 654:
{ yyval = yyvsp[-1]; }
break;
case 655:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 656:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 657:
{ yyval = make_list (yyvsp[-1]); }
break;
case 658:
{ yyval = NULL; }
break;
case 660:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 664:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 665:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 666:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 667:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 668:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 669:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 670:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 671:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 672:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 673:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 674:
{ yyval = make_list (yyvsp[0]); }
break;
case 675:
{ yyval = 0; }
break;
case 677:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 682:
{ yyval = make_node (nod_collate, e_coll_count, (DSQL_NOD) yyvsp[0], yyvsp[-2]); }
break;
case 686:
{ yyval = yyvsp[0]; }
break;
case 687:
{ yyval = 0; }
break;
case 688:
{ yyval = yyvsp[0]; }
break;
case 689:
{ yyval = 0; }
break;
case 690:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 691:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 692:
{ yyval = 0;}
break;
case 693:
{ yyval = yyvsp[0]; }
break;
case 694:
{ yyval = 0; }
break;
case 695:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 696:
{ yyval = 0; }
break;
case 697:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 698:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 699:
{ yyval = 0; }
break;
case 700:
{ yyval = 0; }
break;
case 702:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 703:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 706:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 708:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 709:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 711:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 712:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 713:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 718:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 719:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 720:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 723:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 724:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 726:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 727:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 730:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 731:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 732:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 733:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 737:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 738:
{ yyval = yyvsp[0]; }
break;
case 740:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 743:
{ yyval = NULL; }
break;
case 744:
{ yyval = make_list (yyvsp[-1]); }
break;
case 746:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = NULL; }
break;
case 749:
{ yyval = make_list (yyvsp[-1]); }
break;
case 751:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 753:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 754:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 755:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 757:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 759:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 760:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 761:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 772:
{ yyval = yyvsp[-1]; }
break;
case 773:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 774:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 775:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 776:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 777:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 778:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 779:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 780:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 781:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 783:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 784:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 786:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 787:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 788:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 789:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 790:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 791:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 792:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 793:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 794:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 795:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 796:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 799:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 800:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 801:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 802:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 803:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 804:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 805:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 806:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 807:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 808:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 809:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 810:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 811:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 812:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 813:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 814:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 815:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 816:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 818:
{ yyval = make_list (yyvsp[-1]); }
break;
case 819:
{ yyval = yyvsp[-1]; }
break;
case 820:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 821:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 831:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 832:
{ yyval = yyvsp[0]; }
break;
case 833:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 834:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 835:
{ yyval = make_node (nod_collate, e_coll_count, (DSQL_NOD) yyvsp[0], yyvsp[-2]); }
break;
case 836:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 837:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 838:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 839:
{ yyval = yyvsp[-1]; }
break;
case 840:
{ yyval = yyvsp[-1]; }
break;
case 843:
{ yyval = yyvsp[0]; }
break;
case 844:
{ yyval = yyvsp[0]; }
break;
case 845:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 846:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 847:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 848:
{ yyval = yyvsp[0]; }
break;
case 849:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 850:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 851:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 852:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 854:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 856:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 857:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 858:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 859:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 860:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 861:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 863:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 864:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 865:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 866:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 867:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 868:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 869:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 870:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 871:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_connection_id, CONSTANT_SLONG)); }
break;
case 872:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 873:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_gdscode, CONSTANT_SLONG)); }
break;
case 874:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 875:
{ yyval = make_node (nod_proc_internal_info, e_internal_info_count,
						MAKE_constant ((STR) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 876:
{ yyval = yyvsp[0]; }
break;
case 877:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 879:
{ yyval = (DSQL_NOD) - (SLONG) yyvsp[0]; }
break;
case 880:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 881:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 882:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 883:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 885:
{ yyval = (DSQL_NOD) - (SLONG) yyvsp[0]; }
break;
case 886:
{ yyval = yyvsp[0];}
break;
case 891:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 892:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 893:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 894:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 895:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 896:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 897:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 898:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 899:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 900:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 901:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 902:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 903:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 904:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 905:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 906:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 907:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 908:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 909:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 912:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 913:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 916:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 917:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 918:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 919:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 920:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 921:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 922:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 923:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 927:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 928:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 929:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 930:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 931:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 932:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 933:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 934:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 937:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
