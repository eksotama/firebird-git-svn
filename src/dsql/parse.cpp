
//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
// Parser skeleton modified for use in the Firebird project by Nickolay Samofatov
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dsql.tab.h"

#define YYERROR_DETAILED

typedef int Yshort;

/* 
*	PROGRAM:	Dynamic SQL runtime support
*	MODULE:		parse.y
*	DESCRIPTION:	Dynamic SQL parser
*
* The contents of this file are subject to the Interbase Public
* License Version 1.0 (the "License"); you may not use this file
* except in compliance with the License. You may obtain a copy
* of the License at http://www.Inprise.com/IPL.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
* or implied. See the License for the specific language governing
* rights and limitations under the License.
*
* The Original Code was created by Inprise Corporation
* and its predecessors. Portions created by Inprise Corporation are
* Copyright (C) Inprise Corporation.
*
* All Rights Reserved.
* Contributor(s): ______________________________________.
*
* 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
* 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
* 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
*   different node types so DDL can tell which is which.
* 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
* 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
* 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
* 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
* 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
* 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
*   in rdb$*_source fields when altering domains plus one unexpected null pointer.
* 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
*   and not in gen.c; this closes Bug #450301.
* 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
* 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
* 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
*			clashes with normal DEBUG macro.
* 2002.07.30 Arno Brinkman:  
* 2002.07.30 	Let IN predicate handle value_expressions
* 2002.07.30 	tokens CASE, NULLIF, COALESCE added
* 2002.07.30 	See block < CASE expression > what is added to value as case_expression
* 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
* 2002.07.30 	new group_by_function and added to grp_column_elem
* 2002.07.30 	cast removed from function and added as cast_specification to value
* 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
* 2002.08.04 Dmitry Yemanov: ALTER VIEW
* 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
* 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
* 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
* 2002.09.01 Dmitry Yemanov: RECREATE VIEW
* 2002.09.28 Dmitry Yemanov: Reworked internal_info stuff, enhanced
*							exception handling in SPs/triggers,
*							implemented ROWS_AFFECTED system variable
* 2002.10.21 Nickolay Samofatov: Added support for explicit pessimistic locks
* 2002.10.29 Nickolay Samofatov: Added support for savepoints
* 2002.12.03 Dmitry Yemanov: Implemented ORDER BY clause in subqueries.
* 2002.12.18 Dmitry Yemanov: Added support for SQL-compliant labels and LEAVE statement
* 2002.12.28 Dmitry Yemanov: Added support for parametrized events.
* 2003.01.14 Dmitry Yemanov: Fixed bug with cursors in triggers.
* 2003.01.15 Dmitry Yemanov: Added support for runtime trigger action checks.
* 2003.02.10 Mike Nordell  : Undefined Microsoft introduced macros to get a clean compile.
* 2003.05.24 Nickolay Samofatov: Make SKIP and FIRST non-reserved keywords
* 2003.06.13 Nickolay Samofatov: Make INSERTING/UPDATING/DELETING non-reserved keywords
* 2003.07.01 Blas Rodriguez Somoza: Change DEBUG and IN to avoid conflicts in win32 build/bison
* 2003.08.11 Arno Brinkman: Changed GROUP BY to support all expressions and added "AS" support
*						   with table alias. Also removed group_by_function and ordinal.
* 2003.08.14 Arno Brinkman: Added support for derived tables.
* 2003.10.05 Dmitry Yemanov: Added support for explicit cursors in PSQL.
* 2004.01.16 Vlad Horsun: added support for default parameters and 
*   EXECUTE BLOCK statement
*/

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../jrd/ibase.h"
#include "../jrd/flags.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/keywords.h"
#include "../dsql/misc_func.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd.h"
#include "../jrd/err_proto.h"
#include "../jrd/intlobj_new.h"

/* since UNIX isn't standard, we have to define
  stuff which is in <limits.h> (which isn't available
  on all UNIXes... */

const long SHRT_POS_MAX			= 32767;
const long SHRT_UNSIGNED_MAX	= 65535;
const long SHRT_NEG_MAX			= 32768;
const long LONG_POS_MAX			= 2147483647;
const int POSITIVE	= 0;
const int NEGATIVE	= 1;
const int UNSIGNED	= 2;

/*const int MIN_CACHE_BUFFERS	= 250;*/
/*const int DEF_CACHE_BUFFERS	= 1000;*/

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE	2048
#define YYMAXDEPTH	2048

/* Make bison allocate static stack */
#define YYINITDEPTH 2048

/* Using this option causes build problems on Win32 with bison 1.28*/
/*#define YYSTACK_USE_ALLOCA 1*/

typedef dsql_nod* YYSTYPE;
#define YYSTYPE YYSTYPE
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

#define YYMALLOC gds__alloc
#define YYFREE gds__free

static const char INTERNAL_FIELD_NAME[] = "DSQL internal"; /* NTX: placeholder */
static const char NULL_STRING[] = "";

inline SLONG trigger_type_suffix(const int slot1, const int slot2, const int slot3)
{
	return ((slot1 << 1) | (slot2 << 3) | (slot3 << 5));
}


dsql_nod* DSQL_parse;


#define YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous

#include "../dsql/chars.h"

const int MAX_TOKEN_LEN = 256;

static const TEXT* lex_position();
#ifdef NOT_USED_OR_REPLACED
static bool		long_int(dsql_nod*, SLONG*);
#endif
static dsql_fld*	make_field (dsql_nod*);
static dsql_fil*	make_file();
static dsql_nod*	make_list (dsql_nod*);
static dsql_nod*	make_node (NOD_TYPE, int, ...);
static dsql_nod*	make_parameter (void);
static dsql_nod*	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
#ifdef NOT_USED_OR_REPLACED
static bool	short_int(dsql_nod*, SLONG*, SSHORT);
#endif
static void	stack_nodes (dsql_nod*, DsqlNodStack&);
inline static int	yylex (USHORT, USHORT, USHORT, bool*);

static void	yyerror(const TEXT*);
static void	yyabandon (SLONG, ISC_STATUS);

inline void check_bound(const char* const to, const char* const string)
{
	if ((to - string) >= MAX_TOKEN_LEN)
		yyabandon (-104, isc_token_too_long);
}

inline void check_copy_incr(char*& to, const char ch, const char* const string)
{
	check_bound(to, string); 
	*to++ = ch;
}

struct LexerState {
	/* This is, in fact, parser state. Not used in lexer itself */
	dsql_fld* g_field;
	dsql_fil* g_file;
	dsql_nod* g_field_name;
	int dsql_debug;
	
	/* Actual lexer state begins from here */
	const TEXT* beginning;
	const TEXT* ptr;
	const TEXT* end;
	const TEXT* last_token;
	const TEXT* line_start;
	const TEXT* last_token_bk;
	const TEXT* line_start_bk;
	SSHORT	lines, att_charset;
	SSHORT	lines_bk;
	int  prev_keyword;
	USHORT	param_number;
	
	int yylex (
		USHORT	client_dialect,
		USHORT	db_dialect,
		USHORT	parser_version,
		bool* stmt_ambiguous);
};

/* Get ready for thread-safety. Move this to BISON object pointer when we 
  switch to generating "pure" reenterant parser. */
static LexerState lex;

static int yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   10,   10,   10,   24,   24,   23,   23,
   23,   33,   33,   28,   34,   34,   34,   34,   34,   27,
   27,   32,   32,   29,   16,   16,   16,   37,   37,   38,
   38,   26,   26,   39,   39,   39,   39,   41,   41,   41,
   41,   40,   40,   42,   42,   42,   30,   30,   47,   31,
   31,   48,   48,    7,   49,   49,   51,   56,   56,   56,
   53,   53,   53,   60,   60,   61,   63,   63,   63,   63,
   54,   54,   64,   64,   65,   65,   65,   65,   65,   50,
   67,   67,    6,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   14,   85,   85,   85,
   85,   85,   15,   91,   91,   91,   70,   90,   94,   96,
   71,   71,   74,   74,   74,   83,  103,  103,  103,  104,
  104,  105,  105,  106,  106,  110,  110,   82,  113,  113,
  119,  115,  115,  117,  117,  121,  121,  122,  123,  123,
  124,  125,   80,   84,   81,  107,  107,  128,  129,  129,
  131,  131,  132,  132,  132,  132,  132,  130,  130,  133,
  133,  134,  134,  134,  111,  136,  137,  137,  138,  138,
  139,  139,  140,  140,  140,  109,  109,  109,   76,   87,
   77,   77,   77,  141,  141,  141,  142,  142,  143,  143,
  144,  144,  144,  149,   99,   99,  146,  146,  118,  118,
  112,  153,  154,   62,  120,  120,  120,  120,  120,  120,
  147,  147,  161,  161,  162,  164,  164,  164,  164,  164,
  145,  163,  163,  167,  167,  167,  167,  169,  170,  171,
  166,  166,  165,  165,  165,  165,  165,  172,  173,  174,
  174,  174,  174,   75,   86,   92,  179,  175,  175,  176,
  176,  180,  180,  182,  181,  181,  184,  183,  183,  183,
  177,  177,  185,  185,  186,  188,  188,  189,  187,  187,
  191,  191,  191,  190,  193,  193,  178,  195,  195,  195,
  196,  196,  194,  194,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  199,  199,  199,  199,  205,  205,  206,  202,  212,  213,
  203,  210,  210,  207,  217,  201,  218,  215,  215,  215,
  215,  211,  214,  214,  209,  209,  209,  216,  216,  197,
  197,  222,  223,  223,  224,  224,  224,  224,  208,  208,
  208,  226,  228,  227,  229,   12,  230,  230,  230,  231,
  231,  231,   13,  233,  233,  234,  234,  235,   79,   88,
  151,  100,  102,  116,  238,  238,   78,   89,   93,  239,
  239,  239,  240,  243,  243,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  241,  241,  242,    2,  246,  246,  246,  246,  246,  246,
  246,  246,  246,  252,  252,  256,  256,  256,  256,  256,
  256,  256,  247,  247,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  251,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  259,  259,  261,  261,  260,
  258,  258,  258,  253,  253,  254,  254,  254,  255,  265,
  265,  266,  266,  249,  250,  250,  267,  267,  267,  267,
  267,  248,  268,  268,  269,  269,    9,  270,  270,  270,
  270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
  114,  114,  148,  148,  273,  273,  276,  276,  278,  278,
   57,   57,  275,  275,  275,  275,  275,  275,  275,  275,
  275,  282,  282,  274,  274,  274,  274,  284,  284,  283,
  283,  283,   59,   59,  279,  279,  279,  277,  277,  277,
  288,  288,  288,  287,  287,  286,  286,  286,  280,  280,
  289,  289,  289,  290,  290,  281,  281,  281,  281,  291,
  291,   20,   20,   20,  293,  293,  293,   18,   18,   18,
  295,  296,  299,  299,  297,  301,  301,    5,   17,  300,
  300,  302,  302,  303,  303,  292,  304,  304,  305,  305,
  306,  306,  306,  306,  306,  306,  307,  307,  308,  308,
  309,  309,  313,  313,  313,  314,  314,  314,  315,  315,
  315,  310,  310,  310,  311,  312,  317,  317,  317,  318,
  318,  316,  316,  319,  321,  321,  320,  320,  294,    4,
    4,    4,  322,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  326,  326,  327,
  323,  323,   19,  328,  328,  330,  330,  329,  329,  237,
  334,  335,  331,  331,  331,  336,  338,  339,  339,  339,
  339,  347,  347,  347,  348,  348,  348,  340,  340,  341,
  341,  350,  350,  351,  351,  352,  352,  342,  354,  354,
  355,  355,  357,  357,  357,  359,  360,  360,  361,  361,
  363,  363,  356,  356,  356,  364,  365,  366,  368,  368,
  369,  370,  358,  358,  371,  371,  372,  372,   25,  367,
  367,  367,  367,  367,  373,  373,  344,  344,  374,  374,
  375,  345,  345,  343,  343,  346,  346,  376,  377,  377,
  377,  377,  377,  378,  378,  379,  379,  380,  380,  381,
  381,  381,  382,  382,  383,  383,  332,  332,  384,  384,
  385,   72,   72,   72,  387,  387,  386,  386,  333,  333,
  333,   11,   11,    8,    8,  390,  391,   21,   21,  393,
  394,  389,  389,  389,  392,  395,  395,  200,  204,    3,
    3,  398,  398,  398,  400,  400,  401,  399,  399,  402,
  402,   35,   35,   98,   97,   97,  388,  388,  403,  404,
  404,  220,  220,  220,  150,  396,  396,  126,  126,  126,
  126,  406,  406,  406,  406,  406,  406,  406,  406,  406,
  406,  406,  406,  406,  407,  407,  407,  407,  407,  407,
  407,  407,  413,  413,  413,  413,  413,  413,  413,  413,
  413,  413,  413,  413,  413,  413,  413,  413,  419,  419,
  408,  408,  409,  409,  410,  410,  410,  410,  411,  411,
  415,  415,  416,  416,  416,  416,  414,  417,  412,  412,
  418,  418,  418,  420,  420,  421,  101,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  160,  160,  160,  428,  428,  422,
  232,  232,  155,  155,  429,  429,  429,  429,  429,  424,
  424,  424,  424,  424,  236,  156,  156,  157,  158,  158,
  158,  158,  158,   55,   55,   22,   22,  245,  430,   58,
  285,  264,  264,  108,  423,  423,  423,  431,  431,  431,
  431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
  434,  434,  435,  435,  435,  432,  432,  436,  437,  437,
  437,  439,  440,  440,  441,  433,  433,  433,  433,  442,
  444,  444,  443,  443,  443,  443,  445,  445,  445,  397,
  397,  425,  426,  426,  446,  446,  446,  447,  447,  448,
  448,  451,  451,  449,  449,  454,  454,  453,  450,  452,
  427,  427,  438,  438,  438,  438,  438,  438,  438,  438,
  349,  349,  337,  337,  159,   52,   68,  135,  152,  405,
  168,  192,  272,   95,   66,  225,  127,   73,  353,  221,
  325,   36,   45,  362,  271,   43,   46,  219,   44,  298,
  263,  263,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,
};
static int yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    8,    8,    5,    1,    0,    1,    2,
    1,    1,    3,    1,    1,    1,    1,    2,    2,    3,
    0,    3,    0,    1,    8,    8,    5,    3,    0,    3,
    0,    1,    1,    1,    3,    3,    3,    2,    2,    2,
    2,    1,    3,    1,    2,    2,    1,    3,    1,    1,
    3,    1,    2,    2,    2,    3,    8,    1,    1,    5,
    0,    1,    3,    1,    3,    3,    0,    2,    2,    1,
    1,    3,    3,    2,    0,    2,    2,    1,    3,    9,
    1,    1,    2,    2,    7,    2,    2,    4,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    4,    2,    2,    2,    2,    2,    2,    2,
    1,    0,    1,    1,    6,    6,    1,    1,    0,    0,
    1,    0,    4,    0,    1,    1,    2,    8,    1,    0,
    3,    1,    0,    1,    0,    1,    2,    1,    1,    1,
    2,    6,    1,    1,    3,    0,    1,    1,    0,    1,
    1,    2,    3,    4,    2,    2,    3,    0,    1,    1,
    2,    1,    4,    3,    3,    1,    0,    1,    1,    2,
    3,    4,    0,    1,    2,    0,    1,    1,    5,    5,
    4,    8,    8,    3,    2,    0,    1,    3,    1,    1,
    6,    3,    2,    6,    2,    1,    2,    2,    2,    0,
    1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
    0,    1,    1,    2,    2,    1,    1,    5,    2,    3,
    2,    2,    0,    1,    1,    1,    1,    3,    4,    8,
    4,    0,    1,    1,    2,    2,    0,    3,    3,    1,
    2,    2,    2,    8,    8,    8,    8,    3,    0,    4,
    0,    1,    3,    5,    1,    3,    2,    3,    3,    0,
    1,    0,    1,    2,    4,    1,    1,    3,    1,    0,
    2,    2,    0,    6,    1,    1,    3,    1,    2,    0,
    1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    3,    1,    3,    8,    9,
    5,    8,    6,    3,    0,    3,    2,    1,    1,    3,
    3,    7,    2,    0,    1,    1,    2,    3,    0,    1,
    2,    4,    1,    3,    2,    2,    2,    1,    1,    1,
    1,    2,    2,    5,    0,    5,    1,    3,    0,    2,
    4,    0,    7,    3,    0,    1,    3,    3,    7,    7,
    0,    0,    0,    0,    3,    0,    8,    8,    8,    1,
    1,    0,    2,    1,    1,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
    2,    0,    4,    2,    2,    3,    2,    2,    3,    3,
    2,    2,    3,    1,    2,    3,    3,    2,    2,    2,
    2,    3,    1,    3,    3,    3,    2,    2,    4,    4,
    4,    5,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    0,    2,    2,    4,    4,    5,    3,    2,
    0,    2,    0,    0,    1,    2,    2,    4,    3,    2,
    2,    7,    1,    0,    1,    0,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
    1,    1,    1,    1,    4,    5,    1,    3,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    4,    4,    6,    5,    3,    0,    2,
    2,    0,    3,    0,    4,    1,    5,    4,    1,    4,
    1,    2,    2,    1,    1,    1,    2,    2,    2,    2,
    0,    3,    5,    1,    1,    2,    3,    1,    2,    3,
    0,    1,    1,    1,    5,    5,    6,    1,    1,    1,
    2,    4,    1,    0,    5,    1,    0,    3,    3,    1,
    0,    2,    0,    1,    0,    3,    1,    0,    1,    2,
    1,    1,    1,    1,    1,    1,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    1,    2,    3,    1,    2,
    0,    3,    2,    2,    3,    2,    1,    1,    0,    1,
    1,    1,    3,    2,    3,    0,    1,    3,    4,    5,
    6,    7,    1,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    2,    1,    1,    1,    2,
    1,    1,    3,    3,    0,    2,    0,    2,    0,    3,
    3,    3,    1,    4,    4,    1,    9,    2,    1,    1,
    0,    2,    4,    2,    2,    4,    2,    1,    1,    1,
    1,    1,    3,    1,    3,    1,    0,    2,    1,    3,
    1,    1,    1,    1,    3,    6,    1,    0,    3,    0,
    1,    3,    1,    1,    1,    4,    5,    5,    1,    1,
    2,    4,    4,    2,    3,    0,    1,    2,    1,    1,
    2,    2,    2,    0,    1,    0,    3,    0,    1,    3,
    1,    2,    0,    2,    0,    2,    0,    4,    1,    2,
    1,    1,    0,    1,    3,    2,    1,    1,    2,    1,
    4,    3,    1,    3,    4,    0,    3,    0,    1,    3,
    3,    1,    1,    0,    1,    1,    2,    0,    2,    4,
    0,    9,    5,    1,    1,    7,    4,    1,    1,    8,
    5,    2,    4,    0,    4,    1,    3,    3,    1,    7,
    7,    5,    3,    0,    1,    1,    1,    2,    0,    1,
    1,    1,    0,    3,    1,    3,    1,    0,    3,    1,
    3,    1,    3,    3,    1,    1,    3,    1,    3,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
    5,    6,    5,    6,    3,    4,    5,    6,    3,    4,
    3,    4,    3,    4,    4,    5,    4,    4,    3,    4,
    1,    1,    1,    1,    3,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
    3,    1,    1,    1,    1,    2,    2,    3,    0,    4,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    4,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
    2,    0,    1,    1,    1,    1,    1,    6,    1,    1,
    1,    4,    4,    4,    4,    1,    1,    4,    4,    7,
    2,    0,    7,    6,    6,    4,    1,    1,    1,    4,
    3,    6,    1,    1,    6,    8,    6,    1,    1,    4,
    6,    4,    5,    3,    5,    4,    5,    1,    1,    1,
    4,    6,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    1,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,
};
static int yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,   22,    0,  592,  593,  594,  598,  599,  600,    0,
  693,  696,  804,  805,  808,  809,  504,    0,    0,    0,
    0,    0,    0,    0,    0,  414,  610,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
    0,    0,  103,    0,  978,    0,   23,  976,    0,    0,
   74,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  517,    0,    0,    0,   37,
   34,   36,    0,   35,    0, 1091, 1093, 1094, 1095, 1096,
 1097, 1098, 1119, 1120, 1099, 1101, 1100, 1112, 1113, 1106,
 1102, 1107, 1103, 1105, 1108, 1104, 1109, 1110, 1111, 1115,
 1116, 1114, 1117, 1118, 1122, 1121, 1123, 1124, 1125, 1126,
 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,    0,    0,
    0,    0,   32,   69,   67, 1083, 1092,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  700,
    0,    0,    0,  747, 1085,    0,    0,    0,    0,    0,
    0,    0,  117, 1090,  601,    0,    0,    2,    0,    0,
    0,    0,    0,    0,  446,  447,  448,  449,  450,  451,
  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  474,  468,  469,  467,  470,
  471,  472,  473,  475,  477,  480,  476,  478,  479,  481,
  482,  483,  484,  485,    0,  444,  445,    0,  415, 1074,
    0,    0,  421, 1078,    0,  418, 1082,    0,  749,    0,
  417, 1086,    0,  422, 1077,    0,  608,  974,    0,  168,
  113,    0,  114,    0,  221, 1070,  845,  104,    0,  111,
  163,    0,    0,  106,    0,  115,  980,    0,  107,    0,
  109,    0,  110, 1089,  164,  116,  112,    0,  792,  793,
    0,  979,  977,    0,   75,    0, 1075,    0, 1073,  525,
  518,    0,  524,  529,  519,  520,  527,  521,  522,  523,
  528,  530,    0,    0,    0,   30,    0,   39,  832,   38,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  609,  984,    0,  965,  702,  704,
    0,  705,  707, 1061,  708,    0,  709,  698,    0,    0,
    0,    0,    0,    0,    0,  629,    0,    0,    0,  616,
    0,  619,  621,  622,  623,  624,  625,  626,  632,  633,
 1084,  748,    0,  122,    0,    0,  118,    0,  119,    0,
  121,    0,  120,    0,    0,  663,  664,  671,    0,  670,
  672,  674,  679,  667,  665,  668,  666,  675,  678,  673,
  677,    0,    0,    0,    0,    0,  683,    0,    0, 1063,
    0,    0,  690,    0,    0,    0,    0,    0,  505,    0,
    0,    0,    0,  224,    0,  424,  130, 1066,    0,  423,
  494,  495,    0,    0,    0,    0,    0,    0,  433,    0,
  390,  391,    0,    0,  614,  612,  975,    0,    0,    0,
    0,    0,    0,    0,  171,  149,    0,  127,    0,    0,
    0,  123,    0,  138,  137,    0,    0,    0,    0,    0,
    0,    0,   76,    0,    0,    0,    0,  807,  526,    0,
    0,    0,    0,  940,  971,    0, 1065,    0,  942,    0,
    0,  972,    0,  966,  957,  956,  955,    0,    0,    0,
    0,  945,    0,    0,  958,  959,  967,  968,    0,  969,
  970,    0,    0,    0,  973,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  961,
    0,  842,  937,  938,  939,  944,  943,  922,    0,    0,
    0,  921,    0,    0,  926,  918,  919,  920,  923,  924,
  925,  960,  985,  986,  987, 1006, 1007, 1009, 1010, 1011,
 1016, 1017, 1033, 1034, 1038, 1039,  222,    0,    0,    0,
  376,    0,    0,    0,  835,   27,    0,    0,    0,    0,
   72,   70, 1087,   68,   33,    0,    0,    0,  837,    0,
   48,   50,    0,    0,    0,  606,    0,    0,    0,    0,
  711,    0,    0,    0,  712,    0,  659,    0,    0,  630,
    0,  627,    0,  628,  657,    0,  652,    0,    0,    0,
  644,  643,  620,  846,  816,    0,    0,    0,  128,    0,
    0,    0,    0,  603,  602,  676,  669,    0, 1081,    0,
    0,    0,  684,  688,    0,    0,  789,  695,  694,    0,
  186,    0,    0,  146,    0,  510,    0,  511,  506,  382,
    0,  428,  430,  429,  382,  383,  431,    0,  425,    0,
    0,    0,    0,  272,    0,    0,    0,  437,  438,    0,
  487,    0,    0,    0,    0,    0,    0,    0,  395,  394,
  513,    0,    0,    0,  167,    0,    0,  176,    0,  175,
    0,    0,  182,  165,    0,  180,  172,    0,    0,  549,
  584,  552,    0,  585,    0,    0,  553,    0,    0,    0,
  576,  588,  548,  571,  550,  551,  546,  533,  382,  531,
  532,  534,    0,    0,  543,  544,  545,  547,    0,    0,
    0,    0,  126,    0,    0,  124,    0,  125,    0,  141,
    0,    0,  205,    0,    0,  381,    0,  108,    0,  224,
    0,    0,   84,    0,  102,    0,  101, 1067,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  848,  852,
  853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
  863,    0,    0,    0,    0,    0,  962,    0,    0,    0,
    0,    0,    0,  963,  964,    0,  946,  947,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  337, 1088,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  366,    0,    0,  277,  541,    0,    0,    0,  374,
    0,    0,    0,  834,    0,    0,   44,   73,    0,    0,
   26,    0,  840,    0,    0,  803,    0,    0,    0,    0,
  605,    0,  703,  706,  716,    0,    0,    0,    0,  596,
    0,  982,  595,    0,  631,  642,    0,  639,  635,  634,
    0,    0,    0,  654,  638,  645,    0,    0,    0,  811,
    0,    0,    0,    0,  381,  682,  681,  660,    0,    0,
    0,    0,    0,    0,    0,    0,  147,    0,  509,    0,
  427,    0,  426,  432,  500,    0,  499,  382,    0,  268,
  381,  242, 1071,    0,    0,  382,    0,    0,  213,  381,
    0,    0,    0,  247,  241,  244,  245,  246,  436,  492,
  491,  435,  434,    0,    0,    0,    0,    0,    0,    0,
    0,  393,    0,  382,  497,    0,  496,    0,  173,  177,
    0,    0,  181,    0,    0,    0,  572,  573,  589,    0,
  586,    0,    0,  579,  577,  578,    0,    0,    0,    0,
  542,    0,    0,    0,    0,  580,  129,    0,    0,  381,
    0,  204,    0,  207,  209,  210,    0,    0,    0,    0,
    0,    0,  224,   79,    0,    0,   78,    0,    0,    0,
  851,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  769,  771,    0,  766,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,    0,
    0,    0,    0,    0,    0,    0, 1044,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1027, 1029, 1028,
    0,    0,    0,    0,  935,  368,    0,  936, 1031,    0,
  931, 1069,    0,    0,    0,    0,    0,    0,    0,    0,
  338,  339,    0,    0,  941,  844,  843,  378,  377,    0,
  275,    0,    0,    0,  283,  836,    0,    0,    0,   71,
    0,    0,    0,  839,    0,    0,    0,    0, 1079,  715,
    0,    0,    0,    0,  721,  722,  723,  724,  733,  734,
  735,    0,    0,  713,  597,  983,  640,  653,  648,  647,
    0,  658,  847,  817,    0,    0,  381,    0,    0,    0,
  661,  680,    0,    0,  791,  790,    0,  508,    0,    0,
  185,    0,  189,    0,    0,  151,  225,  226,  227,  228,
  229,  230,  953,  502,    0,  273,    0,  215,  382,  217,
  384,  152,  212,  218,    0,    0,    0,  439,  440,  443,
  383,  488,  489,  441,    0,    0,    0,  411,    0,  498,
  197,  198,  174,    0,  184,  560,  561,  981,    0,    0,
    0,    0,    0,  587,    0,    0,  384,    0,    0,  537,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  199,    0,    0,    0,    0,   83,    0,    0,
    0,    0,   91,   85,    0,    0,   90,   86,    0,  815,
 1072,    0,    0,  864,    0,    0,    0,  890,  889,    0,
    0,    0,  899,  914,    0,  909,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  850,    0,  770,    0,
  806,    0,    0,  224,    0,  988,    0,    0, 1018,    0,
    0,    0,    0,    0,    0,    0,  948,    0,    0,    0,
    0,    0, 1040,    0,    0,    0,    0,    0,    0,    0,
 1051, 1012, 1013, 1014, 1019, 1015,    0, 1026,    0,    0,
    0,    0,  692, 1030,  950,    0,    0,    0,    0,  270,
  289,    0,    0,  373,  284,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   54,   62,   64,    0,   42,    0,
    0,    0,  821,  841,    0,  820,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  750,    0,    0,    0,    0,
    0,    0,    0,  650,  651,  655,    0,    0,  200,    0,
    0,  662,  795,  796,  797,    0,    0,    0,  190,    0,
  954,  382,  382,  384,    0,    0,    0,    0,    0,    0,
  248,  442,    0,    0,    0,    0,    0,    0,  382,  515,
  383,  183, 1068,    0,    0,  555,    0,  554,  590,    0,
  582,    0,    0,    0,  535,  563,    0,    0,  565,  568,
  570,  381,    0,    0,    0,  136,    0,  208,    0,    0,
  383,    0,  105,    0,  134,    0,   94,    0,    0,    0,
    0,   88,   89,    0,  907,  908,    0,    0,    0,    0,
    0,    0,    0,    0,  910,    0,    0,    0,    0,    0,
    0,    0,  900,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  777,    0,
    0,    0,  994,  993,    0,    0,  990,  989,    0,  998,
  997,  996,  995,  992,  991,    0,    0, 1046,    0,    0,
    0, 1045,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  371,  341,  340,  276,    0,    0,  286,  287,
    0,    0,    0,    0,  320,    0,    0,    0,  319,    0,
    0,    0,    0,  365,  308,  306,  310,    0,  307,  296,
  301,  295,    0,    0,    0,  304,  305,  309,  311,  312,
  313,  314,  315,  316,  317,  318,  321,  322,  323,  324,
    0,    0,  359,  360,  361,    0,  819,   66,   58,   59,
   65,   60,   61,    0,   24,    0,    0,   25,  827,  826,
    0,  825,  823,  831,  830,  828,    0,   45,   46,    0,
  725,    0,    0,    0,  755,  753,  751,    0,  752,    0,
    0,    0,    0,    0,  810,    0,    0,  383,    0,  195,
  191,  383,    0,    0,  274,  383,    0,    0,    0,  233,
    0,    0,  249,    0,    0,    0,    0,    0,    0,    0,
    0,  512,  557,    0,  558,    0,    0,    0,    0,  156,
  158,  159,  160,  540,  538,  536,  567,    0,    0,  383,
    0,  383,    0,  379,    0,  382,   92,    0,    0,   98,
   93,    0,    0,    0,    0,    0,  915,    0,  916,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  779,
  768,    0,    0,  780,    0,  776,  223, 1032, 1052, 1008,
    0,    0, 1042, 1041,    0, 1047, 1035, 1037,    0, 1024,
 1025,    0, 1003, 1005, 1004, 1001, 1000,  999,    0,  285,
    0,    0,    0,    0,    0,  347, 1080,  362,  363,    0,
    0,  297,    0,  302,    0,  350,  303,    0,    0,  343,
    0,   55,   56,   57,   63,    0,    0,  802,    0,  745,
  743,    0,  736,    0,    0,    0,  759,    0,  697,  383,
  383,  380,  192,  162,  278,  279,  267,    0,    0,  211,
  234,    0,    0,    0,  236,  237,  235,    0,    0,  409,
  410,  406,  405,  408,  407,    0,  556,  583,  161,  148,
  157,    0,    0,  264,  143,  387,  385,    0,    0,    0,
   96,    0,   80,    0,  876,  884,  691,    0,  877,  885,
  880,  888,    0,    0,  878,  886,  879,  887,  873,  881,
  874,  882,  875,  883,  775,    0,    0,    0, 1020, 1043,
    0, 1023,    0,    0,  288,    0,    0,    0,    0,  334,
    0,    0,  358,    0,    0,    0,    0,  353,  351,    0,
    0,    0,   40,  822,    0,    0,  727,  737,    0,    0,
  738,  739,  740,    0,  265,  388,  214,  219,    0,    0,
  239,    0,  251,  413,  383,  383,    0,    0,    0,   77,
   99,  100,    0,    0,    0,  782, 1036,  291,  292,    0,
    0,    0,    0,  357,  356, 1076,  355,    0,    0,    0,
    0,    0,    0,    0,  726,    0,    0,  760,  240,    0,
    0,    0,    0,    0,  266,  389,  203,  202,    0,    0,
  781,    0,    0,    0,    0,    0,  352,  354,    0,    0,
    0,    0,  731,    0,    0,    0,    0,    0,  250,    0,
  256,    0,  255,  135,  784,    0,  294,    0,    0,    0,
    0,    0,    0,  729,  742,  238,    0,    0,  260,  259,
  258,  785,    0,    0,    0,    0,  342,  732,  263,  261,
  262,  332,    0,  348,  329,  330,
};
static int yydgoto[] = {                                      21,
   22,   23,   24,   25,   26,   27,   28, 1595,   30,   31,
 1596, 1597,   34,   35,   36,   37,   38,   39, 1598,   41,
 1599, 1639,  159,  587,  184, 1392, 1635,  160,  866,  161,
  590,  871,  162,  163,  328, 1152,  173,  174, 1393, 1394,
 1395, 1396,  260,  292,  164, 1397,  165,  592,   91,  305,
  483,  539,  771, 1271,  540, 1026,  738,  285, 1001,  772,
  773,  774, 1278, 1273, 1721,  306,  776,  777,   83,  278,
   84,  301, 1943, 1493,  284,  289,  768,  291,  293,  280,
  271,  273,  286,  296,  193,  387,  389,  393,  391,  384,
  472,  756,  758,  753,  248,  249,  584,  329,  945,  930,
  787,  933,  476,  761, 1261, 1486,  706,  892, 1233,  663,
  664,  687,  467,  739, 1211, 1447, 1698, 1830, 1212, 1196,
 1699, 1700, 1701, 1702, 1703,  788,  281,  272,  463,  714,
  464,  465,  715,  716, 1462,  665, 1191, 1192, 1193, 1438,
  478, 1013, 1014, 1015, 1016,  947, 1678,  740,  949,  542,
 1018, 1111,  578, 1546, 1197,  543,  544,  545,  546,  547,
 1679, 1680,  690, 1837, 1972, 1451,  955,  942,  956,  957,
  958, 1973, 1974, 2020,  444,  583, 1133, 1600,  256,  683,
 1130,  684, 1444,  579, 1134, 1135, 1382, 1578, 1579, 1580,
 1895, 1280, 1601, 1602, 1603, 1604, 1795, 1605, 1606, 1607,
 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
 1618, 1619, 1620, 1621, 1120, 2011, 1900,  548,  841,  549,
 1622, 1796, 1907, 1908, 1955, 1623, 1624, 1625, 1790,  550,
  852,  551,  325,  580,  581,  552,   43, 1491,  453,  701,
  974, 1460,  702,  972,   88,   66,  448,  261,  204,  428,
  245,  435,  253,  264,  440,  436,  449,  962,  450,  697,
 1224,  246,  553, 1248,  681,  937,  429,  703, 1461,  106,
  259,  310,  741,  742,  856, 1249,  857, 1250,  745,  746,
  747,  748,  986, 1242, 1240,  749,  750,  751,  994,  752,
  991,   44,   45,   46,   47,   48,   49,  195,  645,   68,
  607,  267,  456,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,  899,  626, 1171, 1426,  627,  628,
  904,  412,  918,  413,  650,  414,  921,  200,  417,  653,
   50,  203,  423, 1512,  840,   51,  421,   52,  178,  356,
  613,  888,  487, 1423, 1664,  803,  179,  180,  357,  614,
  615,  886, 1150, 1153, 1154, 1155, 1156, 1157, 1158, 1916,
 1965,  554, 1994, 1159, 1160, 1161, 1421, 1921, 1922, 1923,
 1413,  187, 1656, 1816, 1817, 1539, 1056, 1540, 1541, 1542,
 1756, 1944, 1946,  656,  657, 1185, 1435,  598, 1808,   53,
   54,  488,   55,   56,  637,  638,  555, 1142, 1403, 1641,
 1642, 1646,  599,  874,  277,  789,  790,  791,  792,  793,
  794,  795,  796,  797,  798,  799,  800,  801, 1291, 1293,
 1294,  556,  557,  558,  559,  560,  561,  817,  562,  303,
  563,  564,  565, 1571, 1776,  566,  567, 1080,  568,  569,
  570,  571,  572, 1762, 1102,  573,  574,  575,  576,  822,
 1085, 1356, 1351,  823,  167,
};
static int yysindex[] = {                                  18240,
  999,  -72, 2488,  122,  478,   39, 3548,  -26,17599,  489,
  437,  381,  -72,    0,  901,19382, 1311,19382,  192,  395,
    0,  828,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  591,    0,    0,    0,    0,    0,    0,  492,
    0,    0,    0,    0,    0,    0,    0,19208,19382,  615,
19382,19382,19382,19382,19382,    0,    0,  589,  818,19382,
19382,19382,  773,19382,  602,19382,19382,    0,19382,19382,
19382,  528,    0,   74,    0,  681,    0,    0,  819,19382,
    0,19382,19382,19382,  826,19382,19382,19382,19382,  602,
19382,19382,19382,19382,19382,    0,19382, 1175,  833,    0,
    0,    0, 1210,    0, 1210,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  913,  939,
   91, 1250,    0,    0,    0,    0,    0,19382,19382,19382,
  932,  958, 1198,19382,  -70,  108,  138,   85,    0,    0,
19382, 1029, 3337,    0,    0,19382,  974,19382,19382,19382,
19382,19382,    0,    0,    0,19382, 9109,    0, 1010,  922,
 1176,  468,  971, 1392,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  792,    0,    0,  818,    0,    0,
 1066,   64,    0,    0, 1520,    0,    0, 1405,    0,  102,
    0,    0, 1063,    0,    0, 1172,    0,    0, 1141,    0,
    0, 1213,    0, 1341,    0,    0,    0,    0,  818,    0,
    0,  648, 1520,    0,   41,    0,    0, 1300,    0, 1309,
    0, 1210,    0,    0,    0,    0,    0, 1204,    0,    0,
 1348,    0,    0, 1066,    0, 1305,    0, 1254,    0,    0,
    0, 1066,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,16178,19382, 1296,    0,19382,    0,    0,    0,
 1279, 1320,19121,19382,  993, 1381, 1694, 1421, 1424, 1452,
 1406, 1414,  140, 1274,    0,    0,16450,    0,    0,    0,
16450,    0,    0,    0,    0,13722,    0,    0, 1373,19382,
 1455,  276,  455,19382, 1384,    0, 1278, 1290, 1303,    0,
 3337,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,19382,    0,  818, 1520,    0, 1300,    0, 1524,
    0, 1210,    0, 1461, 1434,    0,    0,    0, 1530,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1518,19382,19382, 1479, 1359,    0,16450, 1464,    0,
 1464,16450,    0,  -91, 1378, 1372, 1388, 1392,    0, 1163,
  629, 1567,19382,    0,  792,    0,    0,    0, 1583,    0,
    0,    0,19382, 1296,18655, 1437,18745, 1853,    0,19208,
    0,    0,   95, 1469,    0,    0,    0, 1855, 1855,  818,
 1551,  818,   -3, 1213,    0,    0, 6351,    0,19382,19382,
19382,    0, 1296,    0,    0, 1635,  640, 1880,19382, 1657,
19382,19382,    0, 1883,17352,10123, 1536,    0,    0, 1892,
 1893, 1895, 1484,    0,    0, 1900,    0, 1902,    0, 1905,
 1910,    0, 1912,    0,    0,    0,    0,    0, 1914, 1503,
 1506,    0, 1921, 1921,    0,    0,    0,    0, 1923,    0,
    0,13994, 1925, 1926,    0, 1929, 1621, 1934, 1935, 1941,
 1943, 1944, 1949, 1960,16450,16450,14266,19382, 1962,    0,
 2548,    0,    0,    0,    0,    0,    0,    0, 1917, 1607,
 1966,    0,    0, 1965,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 6351, 1951, 1523,
    0, 1975, 1756, 1601,    0,    0,19382,19382,19382,   80,
    0,    0,    0,    0,    0,19382,19382,  622,    0,19382,
    0,    0, 1279, 1627,19121,    0,19382,14266, 1512, 1954,
    0, 2290, 1708, 1982,    0,  100,    0,  -45, 1495,    0,
 1588,    0, 1588,    0,    0, 1985,    0, 1715, 1626,  602,
    0,    0,    0,    0,    0, 1995,   99, 1986,    0, 1296,
 2003,19382, 1784,    0,    0,    0,    0,  802,    0, 1719,
 2014,19382,    0,    0, 1020, 2017,    0,    0,    0, 1133,
    0, 1714, 1721,    0,  818,    0, 1722,    0,    0,    0,
 1793,    0,    0,    0,    0,    0,    0, 6351,    0,  818,
 1705, 6351, 1623,    0, 1810,19382,18364,    0,    0,  846,
    0,19382, 1085, 1405, 1686, 1649,  576,    0,    0,    0,
    0,  -12, 1688,  223,    0, 1629,  602,    0,  818,    0,
 1805, 1739,    0,    0,   -3,    0,    0,  114, 1646,    0,
    0,    0, 1647,    0, 1706, 2059,    0, 1759, 2061,  477,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2015,  144,    0,    0,    0,    0,  212, 2065,
 2070, 2061,    0,  818, 1520,    0, 1796,    0, 1848,    0,
  818,  818,    0,18655,  102,    0, 2073,    0, 1738,    0,
 1730, 2071,    0,13521,    0, 1742,    0,    0, 1744, 2095,
10667, 2097,    0,    0,    0,10395, 7465,    9,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  761, 1761,  742,16450,  224,    0,19382,16450, 1040,
 1112, 1268, 2501,    0,    0,  602,    0,    0,16450,10667,
 2548, 1717,  472,16450,16450,10667, 1831,16450,16450,16450,
16450,16450,10939, 1336,  797,  797, 2548, 1638,  492, 2116,
    0,    0,14538,19382,16450,16450,16450,16450,16450,16450,
 2374,    0,16450,17082,    0,    0, 1894, 2107,19382,    0,
19382, 1875,19382,    0, 1746, 1749,    0,    0, 1723,19121,
    0, 1861,    0, 1644, 2150,    0, 1861,19382,19382, 2148,
    0, 1997,    0,    0,    0,19382,16995, 1752,16450,    0,
  837,    0,    0,   15,    0,    0, 1762,    0,    0,    0,
19382,  -34,19382,    0,    0,    0,19382,19382, 1536,    0,
16450, 1937,18655,  102,    0,    0,    0,    0,  802,19382,
 1862, 2154, 1711,16450,16450,  818,    0,  388,    0, 2167,
    0,10874,    0,    0,    0,  818,    0,    0,19382,    0,
    0,    0,    0, 1940, 2168,    0, 1567, 1936,    0,    0,
 1878, 1879, 1210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  602,19382, 1924, 1567,18568, 1844, 1845,
 1854,    0,  602,    0,    0,  868,    0, 1106,    0,    0,
 1817,  818,    0,17352,   86, 1827,    0,    0,    0,  602,
    0, 2059,  131,    0,    0,    0, 1567,  131, 1832,  131,
    0, 2197,  602,  602,  602,    0,    0, 1296,19382,    0,
 1886,    0, 1650,    0,    0,    0,   95, 1464,18655,19382,
 1663,  176,    0,    0, 2201,   87,    0,17352,19382, 1464,
    0, 1464, 7234,  128,16450,16450,11218, 2214,  863,11497,
16450,11776,  918,12055,12334,14810,12613,12892,13171,10667,
10667,    0,    0, 1881,    0, 2215,  971,16450,16450, 2357,
16450, 2216,16450, 2212, 2012,16450,16450,16450,16450,16450,
16450,    0,    0,    0,    0,    0,    0,    0,    0, 1942,
 2219, 1790,  601,16450,  501,16450,    0,10667, 2111, 2400,
  481,19382, 2046, 2121, 2146, 2169, 2187,    0,    0,    0,
 1671,15082,16450,16450,    0,    0,  971,    0,    0, 1680,
    0,    0, 1989,  797,  797,  791,  791,  894,17444, 2224,
    0,    0, 2223, 2548,    0,    0,    0,    0,    0, 1689,
    0, 1833, 2000, 1875,    0,    0,18945,18945, 1898,    0,
  -15, 1916,19382,    0,16450, 1916, 1956, 1961,    0,    0,
16811, 2241, 2238, 1777,    0,    0,    0,    0,    0,    0,
    0,10667, 1963,    0,    0,    0,    0,    0,    0,    0,
  348,    0,    0,    0, 1761, 2548,    0, 1712,   95, 1464,
    0,    0,  802, -109,    0,    0, 2548,    0, 1855, 2019,
    0,  388,    0,10667, 1430,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  189,    0, 1875,    0,    0,    0,
    0,    0,    0,    0, 1210, 1210, 1794,    0,    0,    0,
    0,    0,    0,    0,   32,    6,  835,    0, 2022,    0,
    0,    0,    0,19382,    0,    0,    0,    0,  122, 1733,
 1876, 1894, 2251,    0, 1629, 1735,    0, 2235,  925,    0,
19382,  934,  602, 2260, 2266, 2268, 2048,  102, 1875, 1855,
 1721,18655,    0, 1688, 1864, 1747,16908,    0,  602, 1927,
 2010,13521,    0,    0,  602,  725,    0,    0, 2016,    0,
    0, 2277, 2279,    0, 3382, 2548, 2284,    0,    0, 2548,
 2285,14266,    0,    0, 2013,    0,  836, 2294, 2548, 2296,
 1896, 2298, 2548, 2299,16450,16450, 2214,16450,15355, 2300,
 2548, 2301, 2302, 2548, 2303,16450, 2548, 2306, 2548, 2311,
 2313, 2548, 2315, 2316, 2548, 2317,    0, 2105,    0,19034,
    0, 2307, 2333,    0, 2449,    0, 2503,16450,    0, 2521,
 2682, 2703, 2718, 2883, 2890,16450,    0,16450,16450, 2548,
 1932,16450,    0,16450, 2548, 2063,  745,16450,16450,16450,
    0,    0,    0,    0,    0,    0,16450,    0,16450, 1815,
 3364, 3364,    0,    0,    0, 1764,17444,17169,19382,    0,
    0,19382,18097,    0,    0,19382,19382,19382,19382,19382,
19382, 1931, 2327, 2328,    0,    0,    0, 1931,    0,   78,
   78,  211,    0,    0, 1781,    0,18945,18945, 2340, 1777,
 2341,16450, 2119,16995, 2004,    0, 2004, 1013, 2004, 2045,
 2052, 2123, 2067,    0,    0,    0,  971, 1875,    0, 1688,
 1864,    0,    0,    0,    0, 1629, 2008, 1629,    0,  234,
    0,    0,    0,    0, 2000,16450, 2117, 2006, 1794,   74,
    0,    0, 2027, 2028, 2029, 2030, 2031, 2033,    0,    0,
    0,    0,    0, 2372,  122,    0, 1968,    0,    0,  131,
    0,   27,  131,  131,    0,    0, 1894, 2375,    0,    0,
    0,    0,   95, 2000, 1629,    0, 1721,    0, 2022, 2139,
    0, 2044,    0, 2154,    0, 2381,    0, 2383,  818,  -13,
 2384,    0,    0,  818,    0,    0,16450, 1464, 1464, 1822,
  492, 2385,16450, 2114,    0, 1464, 1464,16450, 1464, 1464,
 3432, 2548,    0, 1976,16450, 2548, 1464, 1464, 1464, 1464,
 2548, 1464, 1464, 1464, 1464, 1464, 1464,19382,    0, 2396,
 2394, 1143,    0,    0, 6351, 2408,    0,    0, 2908,    0,
    0,    0,    0,    0,    0, 2956, 1716,    0,16450, 2147,
 2026,    0,16450, 3067, 1824, 3441, 3082, 3212,16450,  305,
 2413, 2414,    0,    0,    0,    0, 6351, 2397,    0,    0,
 2170,    0,19382,  -83,    0, 2419, 2126,16450,    0,    0,
19382,19382,19382,    0,    0,    0,    0, 2127,    0,    0,
    0,    0, 2161,17962, 2411,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -56, 2415,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2151,    0,18945,18945,    0,    0,    0,
 2043,    0,    0,    0,    0,    0, 1947,    0,    0, 2119,
    0, 1828,19382, 1777,    0,    0,    0, 2133,    0,16995,
16995,16450,10667, 1536,    0, 2000, 2022,    0, 1106,    0,
    0,    0,10874,10874,    0,    0, 2548, 2200, 2117,    0,
  771,19382,    0, 2145, 2047, 2152, 2050, 2184, 2155, 2199,
 1875,    0,    0, 2454,    0, 2457, 2153, 2200,   27,    0,
    0,    0,    0,    0,    0,    0,    0, 1875, 1688,    0,
 1106,    0, 2125,    0, 2220,    0,    0, 2140,  -21,    0,
    0, 1894, 2144, 2548, 2469, 2471,    0,  971,    0, 2548,
16450, 2472, 2473, 2548, 2476, 2478,16450,16450, 2548, 2481,
 2484, 2485, 2490, 2492, 2494, 2496, 2497, 2500, 2502,    0,
    0,19034, 2489,    0,19382,    0,    0,    0,    0,    0,
16450, 2506,    0,    0,16450,    0,    0,    0,16450,    0,
    0, 3280,    0,    0,    0,    0,    0,    0,  460,    0,
 2234,16450,16450,10667, 2548,    0,    0,    0,    0,19382,
17444,    0,  461,    0, 2108,    0,    0,  456, 2512,    0,
 2177,    0,    0,    0,    0,   78,16450,    0,19382,    0,
    0,16995,    0, 2446, 2548, 2515,    0,    9,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2520,19382,    0,
    0, 2225,19382, 1794,    0,    0,    0, 1210,19382,    0,
    0,    0,    0,    0,    0, 2000,    0,    0,    0,    0,
    0, 2000, 2022,    0,    0,    0,    0,  -49,16450,  818,
    0, 2098,    0,  818,    0,    0,    0, 2548,    0,    0,
    0,    0, 2548, 2548,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,19382, 2236, 2548,    0,    0,
 3335,    0,10874,10874,    0, 2530, 2548, 1174,  464,    0,
 2242, 2224,    0,19382,19382,  122,  232,    0,    0, 2081,
 2249,10667,    0,    0,  178, 2546,    0,    0,10667, 2547,
    0,    0,    0,16450,    0,    0,    0,    0, 1794, 1210,
    0, 2221,    0,    0,    0,    0, 2088, 2090, 2548,    0,
    0,    0, 2557, 2562, 2564,    0,    0,    0,    0, 1464,
17444, 2180,17444,    0,    0,    0,    0,18097,  461,16450,
17444,  633,17444,19382,    0,    9,19382,    0,    0, 2221,
   16, 1794, 2233, 2240,    0,    0,    0,    0, 2571,19382,
    0,19382, 2576, 2224,18097, 2224,    0,    0, 1264,  207,
 2318, 2224,    0, 1830, 1843, 1794,  -61,  -61,    0, 2320,
    0, 2186,    0,    0,    0, 2581,    0, 2319,17444, 2335,
 2325,18097,19382,    0,    0,    0, 2172,   45,    0,    0,
    0,    0,18097,  269,19382,18097,    0,    0,    0,    0,
    0,    0,18097,    0,    0,    0,
};
static int yyrindex[] = {                                      0,
    0,  134, 1090,    0,    0,    0,    0,    0,    0,    0,
    0,17708,  306,15634,    0,    0,    0,    0,    0,    0,
    0, 2628,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  357,    0,    0,    0,    0,    0,    0,  153,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  328,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2304,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62, 2253,    0,
    0,    0,  304,    0,  304,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2257,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  328,    0,    0,15906,13450,    0,
    0,    0,  917,    0,    0,  237,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  333,
    0, 2232,  418,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   71,    0,    0,    0,    0,  817,
    0,    0,    0,    0,    0, 1053,    0,    0,    0,    0,
    0,  147,    0, 6640,    0,    0,    0,    0,    0,    0,
    0,    0,   71,    0,  -52,    0,    0, 2602,    0,    0,
    0, 2379,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  152,    0, 2387,    0,    0,    0,    0,    0,
19469,    0,    0,    0,    0,    0, 1058,    0,    0,    0,
    0,    0,    0,19556,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  111,    0,    0,    0,    0,    0,
 1059,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   71,    0, 2602,    0,    0,
    0, 2379,    0, 1159,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1233,    0,    0,
    0,    0,    0,    0, 1246,    0,    0,    0,  196,    0,
    0,    0,    0, 2387,  910,19295,    0, 1283,    0,    0,
    0,    0,  458,    0,    0,    0,    0, 2195, 2195,    0,
    0,    0, 1326,  213,    0,    0,    0,    0,    0,    0,
    0,    0, 2387,    0,    0, 1193,    0,    0,    0,    0,
    0,    0,    0,15630,    0,    0,  129,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2711,    0,    0,
    0,    0, 2203, 2203,    0,    0,    0,    0, 3311,    0,
    0,    0, 3611, 3911,    0, 4211, 4511,    0,    0,    0,
    0,    0,    0, 4811,    0,    0,    0,    0,    0,    0,
 1236,    0,    0,    0,    0,    0,    0,    0, 5111, 1358,
  287,    0, 3011,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1361,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,19469,    0,    0,    0,    0,    0,    0,    0,
    0,17263,    0, 2331,    0,    0,    0,    0,    0,    0,
  332,    0,  332,    0,    0,  174,    0,  185,  500,    0,
    0,    0,    0,    0,    0,    0,  220,    0,    0, 2387,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  166,  479,    0,    0,    0, 1023,
    0,    0, 1282,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1371,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1387,    0,  644,    0,    0, 1050,    0,    0,
    0,    0,  242,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1383,    0,    0, 1787,11224,    0,
    0,    0,11503,    0,    0,12061,    0,    0,12340,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2902, 3302,    0,    0,    0,    0,12619,11782,
    0,12340,    0,    0,   71,    0,    0,    0,    0,    0,
    0,    0,    0,  910,  786,    0,    0,    0,    0,    0,
    0, 2250,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1304, 1990, 8192,    0,    0, 1099,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2612,  109,16722,    0,16722,    0,    0,    0,16722,
16722,16722,    0,    0,    0,    0,    0,    0,    0,    0,
 2211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,16722, 6300, 6589, 2613,    0,   73,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1903,    0,    0,    0,
    0, 2386,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  338,    0,    0,    0,    0,  338,    0,    0, 1393,
    0,    0,    0,    0,    0,    0,    0, 1222,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  385,    0,    0,    0,    0,    0,    0,  129,    0,
    0,    0,  910,  786,    0,    0,    0,    0,    0,    0,
    0,  475,  226,    0,    0,    0,    0,  150,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2619,    0,    0,  697, 2239,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  694,  808,
  823,    0,    0,    0,    0,    0,    0,  822,    0,    0,
    0,    0,    0,    0,    0, 3002,    0,    0,    0,    0,
    0,12061,    0,    0,    0,    0,  739,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2387,    0,    0,
  198,    0,    0,    0,    0,    0,    0,    0,  910,    0,
    0,18996,    0,    0,    0,  173,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2624,    0,    0, 1396,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2625,    0,    0,    0,
    0,    0, 5411, 6878, 7167, 5711, 6011,    0,    0, 1400,
    0,    0,    0, 1457,    0,    0,    0,    0,    0,    0,
    0,19643,    0, 2398,    0,    0,    0,    0,    0,    0,
    0, 1407,    0,    0,    0, 1407,    0,    0,    0,    0,
    0, 7399, 1061,  721,    0,    0,    0,    0,    0,    0,
    0,    0, 1360,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  109,  204,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1075,    0, 2195, 2217,
    0,  851,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1850,    0, 2386,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1229,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1409,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1710,    0,    0,    0,    0,    0,  951,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  786, 2386, 2195,
 1433,  910,    0, 2406, 1436,    0,    0,    0,    0,18996,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1146,    0,    0,    0, 8172,
    0,    0,    0,    0,    0,    0,    0,    0, 8271,    0,
 8407,    0, 8435,    0,    0,    0,    0,    0,    0,    0,
 8576,    0,    0, 8648,    0,    0, 8708,    0, 8806,    0,
    0, 8852,    0,    0, 8947,    0,    0, 9723,    0, 2612,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2244,
    0,    0,    0,    0,  709,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2634, 2634,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  635,    0,    0,    0,    0,    0,    0,    0,
  221, 1438,  219,  238,    0,    0,    0, 1438,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2337,
  583,    0, 7879,    0, 2339,    0, 2339, 2337, 2339,    0,
    0,    0,  603,    0,    0,    0, 1396, 2386,    0, 2406,
 1436,    0,    0,    0,    0,    0, 2229,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1703,    0, 1229, 2304,
    0,    0,  824,  834,  896,  909,  966, 1032,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  175,    0,    0,    0,    0, 2747,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1445,    0,    0,    0,
    0, 1454,    0, 1475,    0,    0,    0,    0,    0,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9007,    0, 9067,    0, 9148,    0,    0,    0,    0,
 9247,    0,    0,    0,    0,    0,    0, 1230,    0,    0,
 2639,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2640,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6062, 2627,    0,    0,    0,    0,    0,    0, 1737,
 1758,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  662,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1345,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1480,    0,    0, 7647,
    0,    0,    0, 1147,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  380,    0,    0,    0,    0,  649,    0,
    0,    0,    0,    0,    0,    0, 2642, 1465, 2181,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2386,    0,    0,    0,    0,    0,    0, 1517,  218,    0,
    0,    0,    0,    0,    0,    0,    0, 2386, 2406,    0,
  203,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  723,    0, 9280,    0,    0,    0, 2625,    0, 9424,
    0,    0,    0, 9444,    0,    0,    0,    0, 9523,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2612,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2631,    0,
    0, 2632,    0,    0, 2633,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2388,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 9907,    0,
    0,    0,    0, 2337,  186, 1375,    0,  605,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2857,    0,    0,    0,  164,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  161,    0,    0,    0,    0,    0, 9646,    0,    0,
    0,    0, 9743, 9822,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1858, 2658,    0,    0,
    0,    0,    0,    0,    0,    0, 2643, 2651,    0,    0,
    0, 2653,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1556, 9940,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2857, 1293,
    0,  195,    0,    0,    0,    0,    0,    0, 2642,    0,
    0,    0, 2660,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0, 9986,    0,    0,    0, 1443,
    0, 1229, 1489, 1701,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2662,   35, 2669,    0,    0,    0, 2429,
    0, 1562,    0,    0,    0, 2857,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,17843,    0,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   35,    0,    0,   35,    0,    0,    0,    0,
    0,    0,   35,    0,    0,    0,
};
static int yycindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2256,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2378,    0, 2391,    0,    0,    0,    0, 2722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2726, 2727, 2733,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2734,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
static int yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0, 2776,    0,    0,
 2778, 2781,    0,    0,    0,    0,    0,    0,    1,    0,
 2782,   -2, 2610, 2183,  -48, -909, 1386, 2614, 1913, 2615,
 2188,    0,    0, 2459, -103,  -33,    0,    0,    0,    0,
   34,   92,  -64,  -92,  -58, -297, 2461, 1938,    0,    0,
    0,  562,    0,    0,  -51, 1527, -657,  -76,-1116, 2035,
 1773, -386,    0, 1531,    0, 2713, 1779, 1829,    0,    0,
    0, -591,  -55,    0,    0,    0,    0,    0,    0, 2730,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -63,    0, -647, -530, 1548, -602,
 1081,-1108,    0,    0,    0,    0, -402, -160, -897, 1555,
 -431,  -60,    0, -654, 1820,-1074,    0, 1122, -329, -923,
    0, 1124,    0, 1140, -407, -751,   11,    0,    0,    0,
    0, 2360,    0, 2112, 1577,    0,    0,    0, 1643,    0,
 2450, -590, 1575, 2395, 2402,    0,    0, -538, 1891,  -66,
 -795, 1012, -285,    0,    0, -895, -890, -888, -885, -872,
    0, 1164,-1223,    0,  878,-1337,    0, 2157,    0,    0,
    0,  879,  881,  854, -145, -358,-1016,-1042,    0,    0,
    0, 1922,    0, -754,    0, 1728,    0,    0,    0,    0,
    0,-1302, -841,    0,    0,    0,    0,    0,    0, -278,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,-1018,    0,    0, -826,    0, -812,
 1281, 1078,    0,  911,    0,    0,    0,    0,    0,    0,
    0, -523,    0,    0, 2023, -157, -540, 1450, -603, -860,
-1142,-1338,    0,    0,  -41,    0,    0,    0,    0,    0,
 2434,    0,    0,    0,    0, 2460, 2198,    0,    0,    0,
    0,    0,   -9, -565,    0,    0, 2466,    0,    0,    0,
    5,    0,    0,    0, -441, 1897, -440, 1422,    0,    0,
    0,    0,    0,    0, -660,    0,    0,    0, 2163,    0,
 1908,    0,    0,    0,    0,    0,    0,  -77,    0, 2900,
    0, 2742,    0,    0,    0, 2549,    0,    0,    0,    0,
    0,    0, 2305,    0, 2321,    0,    0,    0, 2018,    0,
    0,    0, -679,    0, -283,    0,    0,    0,    0,    0,
 -268, -721, -979, 2370,    0, 1185,    0,    0,    0,    0,
    0,    0, -356,    0,    0, -864,    0, 2743, 1041,    0,
 2038,-1157, -856,    0,-1019, 1783,-1387,    0,    0,    0,
    0, -183,    0,    0,    0,    0, 1529,    0,    0,    0,
    0, 2844,  236,    0, 1014, 2143,    0, 1189,    0, 1404,
    0, -368,    0,    0, 2032,    0,    0,    0,    0,    0,
    0, 2326,    0,    0,    0, -498,-1306, 2075, 1808,-1211,
    0,    0,    0,    0, -744,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1255, 1651,
    0,    0,    0, -853,    0,    0,    0, 2443, 1767,    0,
    0,    0,    0, 1602,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,-1216, 1624,    0,    0,
};
#define YYTABLESIZE 20181
static int yytable[] = {                                     166,
   40,   87,  382,  275,  922,  252,  185,  279,  194,  274,
  320,  330,  290,  838,  258,  349,  352,  270,  350,  353,
  186,  295,  672,  317, 1121,  743,  744,  288,  255, 1031,
  311,  713,  946,  287, 1034,  591, 1198,  319, 1122,  855,
  283, 1199,  315, 1200, 1175,  321, 1201,  678,  247,  250,
  893,  254,  257,  185,  262,  265,  707,  876,  287, 1202,
  276,  250,  265,  923,  257,  316,  185,  262, 1083,  294,
  166,  265,  932,  323, 1091,  263, 1627, 1331, 1203, 1581,
  307, 1057,  185,  309,  250,  685,  307,  265,  254,  257,
 1384,  185,  262,  294,  166,  265,  186,  257,  873,  392,
 1376,  336,  676,  338,  635,  318, 1131,  314,  788, 1127,
  636, 1683, 1452,  788,  759,  322, 1027, 1107,  394, 1180,
  337, 1489,   86,  870,  385, 1468,  390, 1373,  767, 1239,
  651, 1410, 1558,  611,  334, 1560,  997,  473,  977,  934,
  348,  388,  908,  938,  891, 1207,  169,  347,  948,  187,
 1712,  369,  788,  985, 1214,  386, 1264,  682,  276,  185,
  276, 1017, 1173,  833,  166,  794,   86,  788, 1284,  636,
  348,  265, 1472,  646,  155, 1245,  381,  351,  250,  257,
  185,  262,  294,  334,  656,  761,  194,  767,  480, 1643,
 1445,  359,  611,  788,  257,  501,  437,  142,   95,  636,
  348,   97,  196,  818,  833,  169,  794,  833,  187,  794,
  369,  788,  170,   87, 1259, 1270,   87,  154,   52,  765,
 1097,  853,  833, 1681,  794,  798,  761,  468, 1398,  761,
  139,  927,  646,  155, 1000,  257,  749,   53,  257, 1181,
  640,  412, 1484,  656,  761,  743,  744,  818, 1937, 1443,
 1377, 1003,  661,  257,  501, 1653,  142,  577, 1798, 1719,
  585,  196,  818,  931, 1097, 1062,  798,  976,  839,  798,
 1050,  170, 1813,  348, 1672, 1959,  154,   52,  765, 1097,
  909,  912,  954,  713,  798,  969,  367, 1667,  643, 1788,
 1789,  868, 1121,  711,  621,  749,   53, 1627, 1327, 1328,
  412, 1400,  670, 1455,  617,  611, 1122,  591,  474, 2017,
 1179,  107, 1377, 1997,  276,  625,  634,  276, 1430, 1110,
  441,  970, 1178,  593,  166,  375, 1118,  613, 1821, 1861,
  266,  641,  689,  639,  269, 1205, 1357,  824,  299,  839,
  661, 2030, 1763, 1210,  354,  367, 1766,  833, 2018,  344,
  254,  894, 1692,  699,  185,   92,  685,  344,  451, 1276,
 1706, 1169,  538,  700,  611, 1453,  677,  348,  107, 1675,
  365, 1229,  300,  689,   67, 1433,  577, 1170,  275,  767,
  693, 1428, 1714,  695,  355, 1434,  613, 1051, 1799, 1050,
  641,  689, 2031,  442, 1654, 2019,  824,  685, 1697,  475,
  139,  139, 1676,  649,  649,  754,  757,  187,  708,  687,
  710, 1666, 1401,  636,  662,  685, 1783,  801,  999,  187,
  767,  971, 1217,  276, 1918,  763,  769, 1246, 1266, 1222,
  765,  452,  767,  276, 1277,  276,  755,  276,  767, 1456,
  698, 1710, 1440,  169, 1720,  623,  187, 1665,  636, 1998,
  687,  155,  187, 1427,  187, 1681,  605,  514,  801,  250,
  257,  262, 1862,   95,  375, 1454,   97,  788,  687,  185,
 2010,  185,  254,  269,  686,  778,  801, 1265,  787,  344,
  794,  636,  775,  354,  108, 1442, 1938, 1901,  788, 1282,
  169, 1283, 1809,  187,  154, 1050, 1931, 1648, 1649,  637,
  761,  794,  712, 1432, 1952,  412, 1051,  636,  767,  170,
  636,  646,  761, 1963, 1936,  686,  514,  839,  333,  787,
 1894,  761,  656, 1061, 1360,  869,  636,   85,  842,  881,
  634, 1163, 1958,  686,  611, 1238,  984,  787,  865,  833,
  798,  142,  486,  619,  646,  978,  196,  872, 1890,  346,
 1574,  877,  636,  369,  867,  656,  170,  346,  637, 1822,
  501,  798, 1269, 1824, 1575,  761, 1853, 1827, 1828, 2033,
  646,   85,  591,  646,  761,   87,  890,  185,  257,  593,
  346,  656,  788,  818,  656,  585,  185,  346,  906,  646,
  185, 1969,  818,  914, 1914,  593,  917,  194,  788,  765,
  656, 1854,  763, 1856,  762, 1863, 1446,  636,  765, 1008,
 1409,  794, 1051,  928, 1027,  646,  749,  761,  788, 1494,
  950, 1405, 1709, 1820, 1576,  749,  656,  636,  935, 1174,
  979,  761,  185, 1127, 1999, 1272, 1182, 1221,  767, 1431,
  636, 1814,  276,  763, 1404,  762,  749,  818,  196, 1257,
 1002, 1627,  169,  682, 1483,  187,  833,  980, 2016,  794,
 1238,  763,  788,  762,   52,  287, 1097, 1123,  689,  641,
  646,  798,  346, 1991, 1846,  794,  943,  276, 1627,  833,
  749,  656,  943,   53, 1448, 1449, 1708,  257,  367,  196,
  646, 1852,  685,  398,  767,  761,  153,  275,  824,  975,
 1128,  656, 1007,  646,  171, 1627,  611,  196,  170, 1011,
 1012, 1925, 1926,  818,  656,  767, 1627,  620,  170, 1627,
  719,  514, 2034, 1903,  636, 1050, 1627,  419,  641,  765,
 1166,  641,  801,  611,  621,  798, 1495,  153,  153, 1189,
  153, 1645, 1050, 1774, 1424,  687,  749,  641, 1867, 1825,
 1826,  995,  398,  801,  276,  153, 1893,  268,  269,  767,
  168,  719, 1794,  564,  719, 1910,  564,  420, 1510, 1904,
  197, 1823, 1902,  641, 1081, 1086, 1087, 1198, 1198,  719,
 1905,  649, 1199, 1199, 1200, 1200, 1436, 1201, 1201, 1728,
   89,   90,  577,  787,  577, 1425, 1136,  153,  265, 1819,
 1202, 1202,  685, 1934, 1352, 1353, 1695,  396, 1190, 1935,
  686,  767,  439, 1855,  787, 1166,  392,  996, 1064, 1203,
 1203,  196,  397,  403,  169,  767, 1975, 1976,  641, 1147,
 1979,  622,  649,  404, 1112, 1565,  172,  637,  848, 1673,
 1674,  634, 1051,  849,  276,  867,  275,  514,  641,  276,
  188,  276,  625,  276, 1172,  687, 1691, 1485, 1684, 1051,
  593,  641, 1050,  801,   14,  484,  396,  917,  185,  257,
  637,  201,  577,  489, 1188,  392, 1149,  257,  966, 1906,
  196,  397,  403, 1272, 1204,  623,  198, 1218, 1652,  767,
 1757,  185,  404,  185, 1050,  400,  637,  276, 1219,  637,
  721, 1223,  624,  276, 1696,  199,  196, 1704,  399,  188,
  649, 1818,  673,  721, 1088,  637,  618,  763,  196,  762,
  686,  721,  287,  202,  787,  674, 1254, 1255, 1256,  276,
 1235, 1228, 1984,  251, 1986, 1123,  721,  853,  763,  300,
  762,  637, 1990, 1354, 1992,  196,  490, 1545, 1243,  344,
  721,  196,  275,  196,  400,  276,  469,  398,  276,  636,
 1258,  287,  287,  287, 1121,  402,  298,  399, 1474, 1948,
 1949, 1267,  153,  153,  778,  618,  344, 1474, 1122, 1051,
  153, 1236,  763,  762,  762,  967, 1375,  721,  787,  266,
 2024,  763,  196,  762,  539,  564,  637, 1198, 1198,  185,
  196,  354, 1199, 1199, 1200, 1200, 1050, 1201, 1201,  276,
  185, 1051, 1050, 1050,  153,  153,  637, 1475,  778, 1281,
 1202, 1202,  799, 1511,  402,  775, 1477, 1349,  564,  637,
   14,  401, 1899,  282,  763,  719,  762,  968, 1779, 1203,
 1203, 1058,  470,  539,  392,  719,  670,  719,  763,  430,
  762,   85,  615,  490,  392,  927,  719,  875,  617,  754,
  718,  848,  846,  799,  847,  298,  849,  844,  153,  196,
  564,  396,  845,  844,  800,  392,  634,  471,  845,  344,
  392,  799,  265,  398, 1166,  392,  397,  403, 1628,  153,
  401, 1631,  268,  269,  431,  153,  721,  404,  764, 1052,
  719,  718, 1361,  743,  744,  490,  344, 1993,  188,  719,
  153,  615,  763, 1859,  762,  800, 1987,  617,  196,  718,
  188,  670, 1053, 1051, 1121,  564, 1121,  593,  593,  153,
  302,  917, 1457,  800, 1121, 1514, 1121,  304, 1122,  764,
 1122,  257, 1697, 2008,  312,  901,  720,  188, 1122,  916,
 1122, 1050,  719,  188,  196,  188, 2028,  764,  604,  400,
 1962,  951, 1295, 1832,  719,  196,  719, 1966, 1458, 1833,
 2027, 1563,  399,  196,  848,  846, 1478,  847, 1054,  849,
  564, 2032, 1121, 1515, 2035,  243,  901,  720, 1305,  901,
  720, 2036, 1497, 1123,  188,  275, 1122,  396, 1501,  636,
  585,  432, 1306, 1834,  901,  720,  392,  196, 1502,  196,
 1296,  287,  397,  403,  324,  848,  846,  604,  847,  433,
  849,  765,  181,  404, 1463,  243,  326,  287,  252,  402,
  719,  196,  419,  287, 1297,  951, 1464, 1503,  952, 1511,
 1511, 1463, 1640, 1640, 1644,  420, 1307, 1511, 1511,  327,
 1511, 1511,  276,  434,  268,  269,  196,  276, 1511, 1511,
 1511, 1511,  765, 1511, 1511, 1511, 1511, 1511, 1511,  252,
  268,  269,  252, 1836, 1308, 1669,  951, 1671,  953,  951,
  765,  507,  416, 1915,  299,  400,  346,  252,  331,   57,
  110,  419,  833,  335,  951,  401,  844, 1632,  399,  354,
   58,  845,  243,  911,  420,  848,  846,   59,  847,  339,
  849,   60,  577, 1165,  332,  275,  634,  346,  300, 1995,
  185, 1577,  182, 1630, 1711,  178,  112,  196,  951,  183,
 1415,   61, 1633,  833, 1538,  340,  833,  799, 1309, 1066,
  507,  416,  243, 1416, 1230, 1109, 1109,  911, 1109, 1109,
 1109,  833, 1070, 1629,  132,  402,  188,  372,  799,  758,
   43,  360,  911, 1109, 1109, 1109, 1417,  416,  276,  276,
  503,  354, 1582, 1626,  757,  718,  593,  257,  262,  593,
  294,  166,  179,  383,  178,  718,  493,  718,  132,  800,
 1084,  113,   47,   62, 1109,  801,  718,  593,  593,  370,
  758,  114, 1080,  541,  257, 1070,  829,  901,  516,  844,
  800, 1068, 1775,  764,  845,  757,  372, 1419,  758,   43,
  636,  401,  132,  764,   63,  764,  115,  609,   64,  503,
  493,  610,  144,  757,  764,  386,  612,   41,  670, 1070,
  718,  179,  257,  415,  145,  493,  671, 1718,  418,  718,
  844,   47, 1723,  201,  801,  845,  952,  109,  370, 1070,
  901,  720, 1694,  901,  220,  829,  838,  516,  799, 1811,
  901,  720,  901,  720,  133, 1753,  901,  445,  764,  814,
  422,  901,  720,  257,  901,  754,  257,  764,  253, 1231,
 1232,  144,  718,  838,  386,  110,   41,  952,  655,  901,
  952,  257,  660,  145,  718,  220,  718,  111,  220, 1951,
 1754, 1070,  201,  901,   65,  952,  220,  438, 1773, 1782,
  800,  901, 1755,  220,  901,  901,  720,  354,  185,  253,
  764,  112,  253,  133,  901,  720,  765,  634,  814,  507,
  844,  960, 1538,  961,  764,  845,  765,  253,  765,  952,
  901,  507,  883,  848,  846,  812,  847,  765,  849,  443,
  925,  813,  778,  860,  458,  911,  859, 1070,  833,  833,
  718,  951,  901,  250, 1109,  220,  833,  901,  720,  454,
 1109, 1787, 1281, 1281,  507, 1109,  507,  455, 1109,  901,
  720,  901,  720,  457, 1626,  354,  113,  778,  459, 2009,
  460,  765,  821,  658,  466,  659,  114, 1123,  764,  778,
  765, 2005,  477, 2006,  812,  835,  836,  837,  911,  188,
  813,  911,  461,  479, 1109, 1917,  593,  593,  911,  481,
  911,  115, 1109, 1838,  911, 1103,  485,  951,  901,  911,
 1109,  864,  911,  381,  863,  140,  140,  462, 1640,  424,
  257,  257, 1657,  765, 1659,  901,  720,  911, 1109,  901,
 1109,  425,  445,  940,  833,  446,  939,  765,  833, 1802,
 1804,  911,  185, 1109,  758, 1109, 1109, 1109, 1106,  911,
  482,  853,  911,  911, 1144,  833,  758, 1143,  882,  757,
 1263,  833,  911, 1262,  426,  758,  427,  486,  582, 1887,
  254,  757,  231, 1268,  586,  189, 1023,  447,  911,  564,
  757, 1368,  848,  846,  588,  847,  596,  849,  257,  257,
 1374,    0,    3,  853, 1109,  833,  257, 1803, 1805, 1380,
  911,  765, 1379,  597, 1932,  911,  190,  600,  601,  758,
  191,  254,  185,  231,  254,  254,  231,  911,  758,  911,
  564,  192, 1429,  564,  757, 1262, 1538,  848,  846,  254,
  847,  231,  849,  757,  253,  253,  602, 1123,  564, 1123,
  564,  606,  253, 1466,  636, 1471, 1465, 1123, 1470, 1123,
 1281,  603, 1099, 1933, 1930,  833,  562, 1492,  844,  604,
 1262,  758,  952,  845, 1099,  345,  911, 1099, 1911,  381,
  616,  636,  257, 1104, 1573,  758,  757, 1377, 1940,  629,
  618,  630, 1942,  911,  257, 1104,  346,  911, 1104, 1112,
  757, 1647,  631,  185,  853, 1123, 1970,  562,  636,  254,
  562,  848,  846,  632,  847,  257,  849,  644,  642,  636,
 1954,  257,  636,  646, 1059,  562, 1063,  562,  647,  636,
 1067, 1069, 1071,  652,  648,  654,  848,  846,  952,  847,
  253,  849, 1727,  675, 1768,  853, 1033,  853, 1810,  758,
 2014,  853,   14, 2013, 1104,  257,  254,  667,  505,  506,
  507,  253,  666, 2015,  757, 1060,  863,  253,  680, 1065,
  280,  634,  668,  280,  250, 1956,  694,  691,  786, 1082,
  585,  786,  564, 1957, 1089, 1090,  515,  516, 1093, 1094,
 1095, 1096, 1097, 1101,  704,  705,  709,  760,  634,  764,
  766,  253,  770,  541,  802, 1113, 1114, 1115, 1116, 1117,
  541,  804,  805, 1124,  806,  257,  807,  848,  846,  808,
  847,  809,  849,  564,  810,  634,  564,  844, 1626,  811,
 1983,  812,  845,  813, 1149,  814,  634,  276,  815,  634,
  816,  564,  819,  564,  824,  825,  634,  564,  826,  612,
  254,  827,  254,  828,  829, 1626,  254,  254,  243,  231,
  830,  253,  831,  832,  254,  564,  564, 1367,  833,  912,
  564, 1176,  844,  564,  884,  848,  846,  845,  847,  834,
  849,  843, 1626, 1149,  655, 1187,  564,  850,  851,  853,
  854,  858,  564, 1626,  861, 1281, 1626,  848,  846,  862,
  847,  879,  849, 1626,  887,  889,  896,  898,  901,  902,
 1761, 1110, 1110,  912, 1110, 1110, 1110, 1105,  848,  846,
  907,  847,  913,  849,  562,  905,  911,  915,  912, 1110,
 1110, 1110, 1339,  848,  846,  919,  847,  926,  849,  920,
  924,  562,  562,  562,  661,  929,  844,  562,  670,  936,
  562,  845,  254,  941,  243,  964,  965,  973,  346,  981,
 1110,  564,  982,  562,  987,  988, 1362,  848,  846,  562,
  847,  844,  849,  254, 1415,  243,  845,  989,  990,  254,
  993,  243,  564,  992, 1004,  998, 1348, 1416,  564, 1005,
 1009, 1010, 1019, 1020, 1023, 1285, 1286, 1290, 1029,  564,
 1299, 1301, 1303, 1028, 1311, 1314, 1317, 1319, 1322, 1325,
 1417, 1569, 1022,  254, 1030,  243, 1032,  564, 1332, 1333,
  201, 1335,  564, 1337, 1418, 1092, 1340, 1341, 1342, 1343,
 1344, 1345,  848,  846, 1358,  847, 1108,  849,  562, 1084,
  564, 1363,  848,  846, 1350,  847, 1355,  849,  999,  348,
 1132,  564,  844, 1137, 1141,  564, 1138,  845, 1139,  562,
  232, 1419, 1370, 1371, 1372,  562, 1364,  848,  846, 1145,
  847,  870,  849,  254,  562, 1162,  562,  863, 1183,  564,
 1177, 1167,  949, 1518, 1184,  564, 1194, 1209,  564, 1365,
  848,  846, 1208,  847,  562,  849,  944, 1215, 1216,  562,
 1220,  232, 1225, 1226,  232,  541, 1234, 1366,  848,  846,
  844,  847, 1227,  849, 1241,  845, 1253, 1260,  531,  232,
 1275, 1251, 1329,  949,  949,  949,  949,  949,  562,  949,
  564,  912,  844, 1292, 1330, 1338, 1336,  845, 1346, 1347,
 1110,  949,  949,  949,  949,  844, 1110, 1377, 1378, 1383,
 1381, 1110, 1407,  844, 1110, 1399, 1402, 1408,  845,  531,
 1412, 1414,  531, 1738, 1437, 1459, 1450, 1422,  844, 1467,
 1420, 1469, 1473,  845, 1300,  949, 1304,  531, 1312, 1315,
 1479, 1320, 1323, 1326,  912,  564, 1480,  912, 1481, 1490,
 1110, 1482,  564, 1269,  912, 1499,  912, 1505, 1110, 1506,
  912, 1504,  844, 1508, 1509,  912, 1110,  845,  912, 1513,
  564,  848,  846, 1516,  847, 1517,  849, 1519, 1520, 1527,
 1528, 1529, 1530,  912, 1110, 1532, 1110, 1543,  848,  846,
 1533,  847, 1534,  849, 1535, 1536, 1537,  912, 1559, 1110,
  564, 1110, 1110, 1110,  564,  912, 1050, 1562,  912,  912,
 1636, 1637,  541, 1544,  848,  846, 1634,  847,  912,  849,
 1650, 1651,  885, 1660, 1655, 1521, 1522,  844, 1524, 1526,
 1661, 1670,  845, 1663,  912, 1662, 1531,  844,  848,  846,
  686,  847,  845,  849, 1682, 1685, 1686, 1687, 1688, 1689,
 1110, 1690, 1693, 1119, 1713, 1707,  912, 1238, 1549, 1715,
 1716,  912,  844, 1717, 1722, 1729, 1556,  845, 1557, 1355,
 1731,  538, 1355,  912, 1350,  912, 1751, 1752, 1564,  541,
 1566,  848,  846, 1359,  847,  844,  849, 1567, 1758, 1568,
  845, 1764, 1765, 1777, 1778, 1780,  243,  232, 1784, 1781,
  949,  169, 1791,  844,  949, 1792,  949,  949,  845, 1797,
 1806, 1812, 1800,  949, 1801, 1807, 1829, 1839,  949,  949,
 1840, 1843,  912, 1842,  949, 1841,  949,  949, 1844, 1547,
  848,  846,  541,  847, 1847,  849, 1845, 1848, 1858,  912,
 1849,  949, 1857,  912, 1860,  949,  949,  949, 1864, 1865,
  949, 1866, 1869, 1870,  531,  531, 1871,  949, 1872,  949,
  949, 1875,  531,  949, 1876, 1877, 1677,  949, 1886,  949,
 1878,  949, 1879,  949, 1880,  531, 1881, 1882,  949,  949,
 1883,  949, 1884, 1548,  848,  846, 1889,  847, 1896,  849,
 1793, 1912,  243,  885, 1913, 1941,  949,  949, 1924,  949,
 1927, 1550,  848,  846, 1929,  847,  844,  849, 1945, 1950,
  949,  845,  949,  243,  949,  949,  949, 1953,  949,  243,
 1960,  949,  949,  844, 1961, 1964, 1967, 1724,  845,  848,
  846,  949,  847, 1730,  849,  949, 1971, 1977, 1734, 1978,
 1980,  949, 1981, 1982,  949, 1739, 1985,  949, 2000,  844,
  531, 2004,  949,  243,  845, 2002, 2007, 1997, 2012, 1998,
 1334, 2022, 2023,  949, 2025, 2026, 2029,    1,   29,  949,
  949,  531,   31,  844,  949,  949,  794,  531,  845, 1355,
 1064,  206,  833, 1355,  166,  949,  949,  710,  949, 1772,
  271,  773,   82, 1049,  949,  282,  951,  949,  216,  949,
  949,  949,  949,  772,  949,  801,  193,  281, 1785,  412,
 1048,  531,  949,  949, 1002,  754,  844,  756,  194,  774,
 1022,  845,  383,  949,  949,  327,  949,  949,  949,  293,
  325,  335,  299,  949,  949,  949,  949,  949, 1021,  949,
  783,  326,  949,  949,  949,  949,  949,  949,  949,  328,
 1091,  336,  949,  949,  949,  949,  949,  949,  949,  949,
  331,  949, 1551,  848,  846,  844,  847,  364,  849,  349,
  845,  949,  949,  949,  949,  949,  949,  949,  949,  949,
  949,    6, 1815, 1552,  848,  846,  564,  847,    9,  849,
 1066, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1553,  848,
  846,    9,  847, 1415,  849,   12,   14,   17, 1091, 1091,
 1091, 1091, 1091,   20,   24,   29, 1416,   32,   69,  844,
   33,   42,  341, 1638,  845,  878,  342,  564,  343,   70,
  564, 1148,  880,  595,  594, 1274,   71,  844, 1500, 1417,
 1498, 1091,  845, 1091, 1021,  564, 1279, 1140,  313,   72,
  297, 1868, 1237, 1418, 1496, 1487, 1247, 1873, 1874, 1850,
 1835, 1919, 1851,  717,  844,  116,  983, 1476,  117,  845,
  118,  119,  120,  121, 1439,  122, 1488,  641, 1213,  688,
 1928, 1888, 1831,  123,  124, 1355,  689, 1996,  959, 1891,
 1419, 2021, 2003, 2001,  125,  126,  252,  127,  128,  129,
 1206, 1385, 1897, 1898,  130,  131,   73,  132,  133, 1988,
  134, 1786, 1909,  135,  136,  137,  138,  139,  140,  141,
 1668, 1129,   74,  696,  142,  143,  144,  541,  145,  146,
  147,  963,  148,  669,  679, 1705, 1252,  252,   75, 1244,
  252,  541,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,  175,   76, 1006,  252,  345,   77, 1168,  633,
   78,  358,  895, 1554,  848,  846, 1164,  847,   79,  849,
 1555,  848,  846, 1411,  847,  308,  849, 1968, 1920, 1939,
 1885, 1750,  541,  900, 1055,  541, 1658,   80, 1759,  848,
  846, 1146,  847, 1406,  849, 1186,  818, 1523,  844, 1420,
  541, 1441,  910,  845, 1072, 1073, 1074, 1075, 1076, 1077,
 1078, 1079, 1091, 1572, 1091, 1091,    0, 1561,    0,  844,
    0, 1091,    0,    0,  845,    0,    0, 1091,    0,    0,
    0,    0, 1091,    0,  844, 1091, 1760,  848,  846,  845,
  847,  559,  849,   81, 1815,    0,    0,    0,    0, 1091,
 1070,    0,    0,    0, 1091, 1091,    0,    0, 1091,    0,
    0,    0,  564,  564,   82, 1091,    0, 1091, 1091,    0,
  564, 1091,    0,    0,    0, 1091,    0, 1091,    0, 1091,
 1989, 1091,  559,  564,    0,  559, 1091, 1091,    0, 1091,
    0, 1070, 1070, 1070, 1070, 1070, 1084, 1070,    0,    0,
  559,    0,  559,    0, 1091, 1091,    0, 1091,    0, 1070,
 1070, 1070, 1070,    0,    0,    0,    0,    0, 1091,    0,
 1091,    0, 1091, 1091, 1091,    0, 1091,    0,    0, 1091,
 1091,    0,    0,    0,    0,    0,    0,    0,    0, 1091,
    0, 1070,    0, 1070,    0,    0,    0, 1767,  848,  846,
    0,  847, 1091,  849,    0, 1091,    0,    0,  564,    0,
    0,    0, 1770,  848,  846,    0,  847,    0,  849,    0,
    0, 1091,  252,  252,    0,    0,    0, 1091, 1091,  564,
  252,    0, 1091,    0,    0,  564,    0,    0,    0,    0,
    0,    0,    0, 1091, 1091,    0, 1091,    0,    0,  844,
    0,    0, 1091,    0,  845, 1091,  844, 1091, 1091, 1091,
 1091,  845, 1091,    0,    0,    0,    0,  541,  541,  564,
 1091, 1091,  541,    0,  844,  541,    0,    0,    0,  845,
    0, 1091, 1091,    0, 1091, 1091, 1091,    0,  541,    0,
    0, 1091, 1091, 1091, 1091, 1091,    0, 1091,    0,    0,
 1091, 1091, 1091, 1091, 1091, 1091, 1091,    0,    0,    0,
 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,  252, 1091,
    0,    0,  844,    0,    0,    0,    0,  845,    0, 1091,
 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,  252,
    0,    0, 1771,  848,  846,  252,  847,    0,  849,  559,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1070,  541, 1070, 1070,  559,  559,  559,    0,
    0, 1070,  559,    0,    0,  559,    0, 1070,    0,  252,
    0,    0, 1070,    0,  541, 1070,    0,    0,  559,    0,
  541,  564,    0,    0,  559,    0,    0,    0,    0, 1070,
 1101, 1070,    0,    0, 1070, 1070,    0,    0, 1070,    0,
 1892,  848,  846,    0,  847, 1070,  849, 1070, 1070,    0,
    0, 1070,    0,    0,  541, 1070,    0, 1070,    0, 1070,
    0, 1070,  564,  844,    0,  564, 1070, 1070,  845, 1070,
    0, 1101, 1101, 1101, 1101, 1101, 1101, 1101,  844,    0,
  564,    0,    0,  845, 1070, 1070,    0, 1070,    0, 1101,
 1101, 1101, 1101,  559,    0, 1947,  848,  846, 1070,  847,
 1070,  849, 1070, 1070, 1070,    0, 1070,    0,    0, 1070,
 1070,    0,    0,    0,  559,    0,    0,    0,    0, 1070,
  559, 1101,    0, 1101,    0,  848,  846, 1570,  847,    0,
  849,  559, 1070,    0,    0, 1070,    0,    0,    0,    0,
    0,    0,    0,  848,  846,    0,  847,    0,  849,  559,
    0, 1070,    0,    0,  559,    0,    0, 1070, 1070,    0,
    0,    0, 1070,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1070, 1070,    0, 1070,    0,    0,    0,
    0,    0, 1070,  559,    0, 1070,    0, 1070, 1070, 1070,
 1070,    0, 1070,  848,  846,    0,  847,    0,  849,    0,
 1070, 1070,  848,  846, 1769,  847,    0,  849,  844,    0,
    0, 1070, 1070,  845, 1070, 1070, 1070,    0,    0,    0,
    0, 1070, 1070, 1070, 1070, 1070,    0, 1070,    0,    0,
 1070, 1070, 1070, 1070, 1070, 1070, 1070,    0,    0,    0,
 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,    0, 1070,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1070,
 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,    0,
    0,    0,    0,    0,    0,    0,  844,    0,    0,    0,
    0,  845,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1101,    0, 1101, 1101,    0,  564,  564,    0,
    0, 1101,  564,    0,    0,  564,    0, 1101,    0,    0,
    0,    0, 1101,    0,    0, 1101,    0,    0,  564,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1101,
 1106,  844,    0,    0, 1101, 1101,  845,    0, 1101,    0,
    0,    0,    0,    0,    0, 1101,    0, 1101, 1101,    0,
    0, 1101,    0,    0,    0, 1101,    0, 1101,    0, 1101,
  844, 1101,    0, 1507,    0,  845, 1101, 1101,    0, 1101,
    0, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  844,    0,
    0,    0,    0,  845, 1101, 1101,    0, 1101,    0, 1106,
 1106, 1106, 1106,  564,  361,    0,    0,    0, 1101,    0,
 1101,    0, 1101, 1101, 1101,    0, 1101,    0,    0, 1101,
 1101,    0,    0, 1737,  564,    0,    0,    0,    0, 1101,
  564, 1106,    0, 1106,    0,    0,    0,  362,  844,    0,
    0,    0, 1101,  845,    0, 1101,    0,  844,    0,    0,
    0,    0,  845,    0,    0,    0,    0,    0,    0,    0,
    0, 1101,    0,  363,  564,    0,  364, 1101, 1101,    0,
    0,    0, 1101,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  365, 1101, 1101,    0, 1101,    0,    0,    0,
    0,    0, 1101,    0,    0, 1101,    0, 1101, 1101, 1101,
 1101,    0, 1101,    0,    0,    0,    0,    0,  366,    0,
 1101, 1101,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1101, 1101,    0, 1101, 1101, 1101,    0,    0,    0,
    0, 1101, 1101, 1101, 1101, 1101,    0, 1101,    0,    0,
 1101, 1101, 1101, 1101, 1101, 1101, 1101,    0,    0,    0,
 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,    0, 1101,
    0,    0,    0,  367,    0,    0,    0,    0,    0, 1101,
 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,   93,
    0,    0,    0,  368,    0,    0,   94,    0,    0,    0,
   95,   96,    0,    0,    0,    0,  369,    0,    0,   97,
    0,    0, 1106,    0, 1106, 1106,    0, 1725, 1726,    0,
   98, 1106,    0,    0,    0, 1732, 1733, 1106, 1735, 1736,
    0,    0, 1106,    0,    0, 1106, 1740, 1741, 1742, 1743,
    0, 1744, 1745, 1746, 1747, 1748, 1749,    0,    0, 1106,
 1102,    0,    0,    0, 1106, 1106,    0,    0, 1106,    0,
    0,    0,    0,    0,    0, 1106,    0, 1106, 1106,    0,
    0, 1106,    0,    0,    0, 1106,    0, 1106,    0, 1106,
    0, 1106,   99,    0,    0,    0, 1106, 1106,    0, 1106,
    0, 1102, 1102, 1102, 1102, 1102, 1102, 1102,  100,    0,
    0,    0,    0,    0, 1106, 1106,    0, 1106,    0, 1102,
 1102, 1102, 1102,  101,    0,    0,    0,  102, 1106,    0,
 1106,    0, 1106, 1106, 1106,    0, 1106,    0,  103, 1106,
 1106,    0,    0,    0,    0,    0,    0,    0,    0, 1106,
    0, 1102,    0, 1102,    0,    0,    0,  104,    0,    0,
    0,    0, 1106,    0,    0, 1106,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1106,    0,    0,    0,    0,    0, 1106, 1106,    0,
    0,    0, 1106,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1106, 1106,    0, 1106,    0,    0,    0,
    0,    0, 1106,  105,    0, 1106,    0, 1106, 1106, 1106,
 1106,    0, 1106,    0,    0,    0,    0,    0,    0,    0,
 1106, 1106,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1106, 1106,    0, 1106, 1106, 1106,    0,    0,    0,
    0, 1106, 1106, 1106, 1106, 1106,    0, 1106,    0,    0,
 1106, 1106, 1106, 1106, 1106, 1106, 1106,    0,    0,    0,
 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,    0, 1106,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1106,
 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1102,    0, 1102, 1102,    0,    0,    0,    0,
    0, 1102,    0,    0,    0,    0,    0, 1102,    0,    0,
    0,    0, 1102,    0,    0, 1102,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1102,
 1117,    0,    0,    0, 1102, 1102,    0,    0, 1102,    0,
    0,    0,    0,    0,    0, 1102,    0, 1102, 1102,    0,
    0, 1102,    0,    0,    0, 1102,    0, 1102,    0, 1102,
    0, 1102,    0,    0,    0,    0, 1102, 1102,    0, 1102,
    0, 1117, 1117, 1117, 1117, 1117, 1117, 1117,    0,    0,
    0,    0,    0,    0, 1102, 1102,    0, 1102,    0, 1117,
 1117, 1117, 1117,    0,    0,    0,    0,    0, 1102,    0,
 1102,    0, 1102, 1102, 1102,    0, 1102,    0,    0, 1102,
 1102,    0,    0,    0,    0,    0,    0,    0,    0, 1102,
    0, 1117,    0, 1117,    0,    0,    0,    0,    0,    0,
    0,    0, 1102,    0,    0, 1102,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1102,    0,    0,    0,    0,    0, 1102, 1102,    0,
    0,    0, 1102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1102, 1102,    0, 1102,    0,    0,    0,
    0,    0, 1102,    0,    0, 1102,    0, 1102, 1102, 1102,
 1102,    0, 1102,    0,    0,    0,    0,    0,    0,    0,
 1102, 1102,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1102, 1102,    0, 1102, 1102, 1102,    0,    0,    0,
    0, 1102, 1102, 1102, 1102, 1102,    0, 1102,    0,    0,
 1102, 1102, 1102, 1102, 1102, 1102, 1102,    0,    0,    0,
 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,    0, 1102,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1102,
 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1117,    0, 1117, 1117,    0,    0,    0,    0,
    0, 1117,    0,    0,    0,    0,    0, 1117,    0,    0,
    0,    0, 1117,    0,    0, 1117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1117,
 1122,    0,    0,    0, 1117, 1117,    0,    0, 1117,    0,
    0,    0,    0,    0,    0, 1117,    0, 1117, 1117,    0,
    0, 1117,    0,    0,    0, 1117,    0, 1117,    0, 1117,
    0, 1117,    0,    0,    0,    0, 1117, 1117,    0, 1117,
    0, 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0,    0,
    0,    0,    0,    0, 1117, 1117,    0, 1117,    0, 1122,
 1122, 1122, 1122,    0,    0,    0,    0,    0, 1117,    0,
 1117,    0, 1117, 1117, 1117,    0, 1117,    0,    0, 1117,
 1117,    0,    0,    0,    0,    0,    0,    0,    0, 1117,
    0, 1122,    0, 1122,    0,    0,    0,    0,    0,    0,
    0,    0, 1117,    0,    0, 1117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1117,    0,    0,    0,    0,    0, 1117, 1117,    0,
    0,    0, 1117,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1117, 1117,    0, 1117,    0,    0,    0,
    0,    0, 1117,    0,    0, 1117,    0, 1117, 1117, 1117,
 1117,    0, 1117,    0,    0,    0,    0,    0,    0,    0,
 1117, 1117,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1117, 1117,    0, 1117, 1117, 1117,    0,    0,    0,
    0, 1117, 1117, 1117, 1117, 1117,    0, 1117,    0,    0,
 1117, 1117, 1117, 1117, 1117, 1117, 1117,    0,    0,    0,
 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,    0, 1117,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1117,
 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1122,    0, 1122, 1122,    0,    0,    0,    0,
    0, 1122,    0,    0,    0,    0,    0, 1122,    0,    0,
    0,    0, 1122,    0,    0, 1122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1122,
 1131,    0,    0,    0, 1122, 1122,    0,    0, 1122,    0,
    0,    0,    0,    0,    0, 1122,    0, 1122, 1122,    0,
    0, 1122,    0,    0,    0, 1122,    0, 1122,    0, 1122,
    0, 1122,    0,    0,    0,    0, 1122, 1122,    0, 1122,
    0, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0,    0,
    0,    0,    0,    0, 1122, 1122,    0, 1122,    0, 1131,
 1131, 1131, 1131,    0,    0,    0,    0,    0, 1122,    0,
 1122,    0, 1122, 1122, 1122,    0, 1122,    0,    0, 1122,
 1122,    0,    0,    0,    0,    0,    0,    0,    0, 1122,
    0, 1131,    0, 1131,    0,    0,    0,    0,    0,    0,
    0,    0, 1122,    0,    0, 1122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1122,    0,    0,    0,    0,    0, 1122, 1122,    0,
    0,    0, 1122,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1122, 1122,    0, 1122,    0,    0,    0,
    0,    0, 1122,    0,    0, 1122,    0, 1122, 1122, 1122,
 1122,    0, 1122,    0,    0,    0,    0,    0,    0,    0,
 1122, 1122,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1122, 1122,    0, 1122, 1122, 1122,    0,    0,    0,
    0, 1122, 1122, 1122, 1122, 1122,    0, 1122,    0,    0,
 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0,    0,    0,
 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0, 1122,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1122,
 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1131,    0, 1131, 1131,    0,    0,    0,    0,
    0, 1131,    0,    0,    0,    0,    0, 1131,    0,    0,
    0,    0, 1131,    0,    0, 1131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1131,
  917,    0,    0,    0, 1131, 1131,    0,    0, 1131,    0,
    0,    0,    0,    0,    0, 1131,    0, 1131, 1131,    0,
    0, 1131,    0,    0,    0, 1131,    0, 1131,    0, 1131,
    0, 1131,    0,    0,    0,    0, 1131, 1131,    0, 1131,
    0,  917,  917,  917,  917,  917,    0,  917,    0,    0,
    0,    0,    0,    0, 1131, 1131,    0, 1131,    0,  917,
  917,  917,  917,    0,    0,    0,    0,    0, 1131,    0,
 1131,    0, 1131, 1131, 1131,    0, 1131,    0,    0, 1131,
 1131,    0,    0,    0,    0,    0,    0,    0,    0, 1131,
    0,    0,    0,  917,    0,    0,    0,    0,    0,    0,
    0,    0, 1131,    0,    0, 1131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1131,    0,    0,    0,    0,    0, 1131, 1131,    0,
    0,    0, 1131,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1131, 1131,    0, 1131,    0,    0,    0,
    0,    0, 1131,    0,    0, 1131,    0, 1131, 1131, 1131,
 1131,    0, 1131,    0,    0,    0,    0,    0,    0,    0,
 1131, 1131,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1131, 1131,    0, 1131, 1131, 1131,    0,    0,    0,
    0, 1131, 1131, 1131, 1131, 1131,    0, 1131,    0,    0,
 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0,    0,    0,
 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0, 1131,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1131,
 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  917,    0,  917,  917,    0,    0,    0,    0,
    0,  917,    0,    0,    0,    0,    0,  917,    0,    0,
    0,    0,  917,    0,    0,  917,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  917,
  930,    0,    0,    0,  917,  917,    0,    0,  917,    0,
    0,    0,    0,    0,    0,  917,    0,  917,  917,    0,
    0,  917,    0,    0,    0,  917,    0,  917,    0,  917,
    0,  917,    0,    0,    0,    0,  917,  917,    0,  917,
    0,  930,  930,  930,  930,  930,    0,  930,    0,    0,
    0,    0,    0,    0,  917,  917,    0,  917,    0,  930,
  930,  930,  930,    0,    0,    0,    0,    0,  917,    0,
  917,    0,  917,  917,  917,    0,  917,    0,    0,  917,
  917,    0,    0,    0,    0,    0,    0,    0,    0,  917,
    0,    0,    0,  930,    0,    0,    0,    0,    0,    0,
    0,    0,  917,    0,    0,  917,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  917,    0,    0,    0,    0,    0,  917,  917,    0,
    0,    0,  917,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  917,  917,    0,  917,    0,    0,    0,
    0,    0,  917,    0,    0,  917,    0,  917,  917,  917,
  917,    0,  917,    0,    0,    0,    0,    0,    0,    0,
  917,  917,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  917,  917,    0,  917,  917,  917,    0,    0,    0,
    0,  917,  917,  917,  917,  917,    0,  917,    0,    0,
  917,  917,  917,  917,  917,  917,  917,    0,    0,    0,
  917,  917,  917,  917,  917,  917,  917,  917,    0,  917,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  917,
  917,  917,  917,  917,  917,  917,  917,  917,  917,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  930,    0,  930,  930,    0,    0,    0,    0,
    0,  930,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  930,    0,    0,  930,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  930,
  933,    0,    0,    0,  930,  930,    0,    0,  930,    0,
    0,    0,    0,    0,    0,  930,    0,  930,  930,    0,
    0,  930,    0,    0,    0,  930,    0,  930,    0,  930,
    0,  930,    0,    0,    0,    0,  930,  930,    0,  930,
    0,  933,  933,  933,  933,  933,    0,  933,    0,    0,
    0,    0,    0,    0,  930,  930,    0,  930,    0,  933,
  933,  933,  933,    0,    0,    0,    0,    0,  930,    0,
  930,    0,  930,  930,  930,    0,  930,    0,    0,  930,
  930,    0,    0,    0,    0,    0,    0,    0,    0,  930,
    0,    0,    0,  933,    0,    0,    0,    0,    0,    0,
    0,    0,  930,    0,    0,  930,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  930,    0,    0,    0,    0,    0,  930,  930,    0,
    0,    0,  930,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  930,  930,    0,  930,    0,    0,    0,
    0,    0,  930,    0,    0,  930,    0,  930,  930,  930,
  930,    0,  930,    0,    0,    0,    0,    0,    0,    0,
  930,  930,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  930,  930,    0,  930,  930,  930,    0,    0,    0,
    0,  930,  930,  930,  930,  930,    0,  930,    0,    0,
  930,  930,  930,  930,  930,  930,  930,    0,    0,    0,
  930,  930,  930,  930,  930,  930,  930,  930,    0,  930,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  930,
  930,  930,  930,  930,  930,  930,  930,  930,  930,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  933,    0,  933,  933,    0,    0,    0,    0,
    0,  933,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  933,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  933,
  934,    0,    0,    0,  933,  933,    0,    0,  933,    0,
    0,    0,    0,    0,    0,  933,    0,  933,  933,    0,
    0,  933,    0,    0,    0,  933,    0,  933,    0,  933,
    0,  933,    0,    0,    0,    0,  933,  933,    0,  933,
    0,  934,  934,  934,  934,  934,    0,  934,    0,    0,
    0,    0,    0,    0,  933,  933,    0,  933,    0,  934,
  934,  934,  934,    0,    0,    0,    0,    0,  933,    0,
  933,    0,  933,  933,  933,    0,  933,    0,    0,  933,
  933,    0,    0,    0,    0,    0,    0,    0,    0,  933,
    0,    0,    0,  934,    0,    0,    0,    0,    0,    0,
    0,    0,  933,    0,    0,  933,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  933,    0,    0,    0,    0,    0,  933,  933,    0,
    0,    0,  933,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  933,  933,    0,  933,    0,    0,    0,
    0,    0,  933,    0,    0,  933,    0,  933,  933,  933,
  933,    0,  933,    0,    0,    0,    0,    0,    0,    0,
  933,  933,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  933,  933,    0,  933,  933,  933,    0,    0,    0,
    0,  933,  933,  933,  933,  933,    0,  933,    0,    0,
  933,  933,  933,  933,  933,  933,  933,    0,    0,    0,
  933,  933,  933,  933,  933,  933,  933,  933,    0,  933,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  933,
  933,  933,  933,  933,  933,  933,  933,  933,  933,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  934,    0,  934,  934,    0,    0,    0,    0,
    0,  934,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  934,    0,    0,    0,  928,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  934,
    0,    0,    0,    0,  934,  934,    0,    0,  934,    0,
    0,    0,    0,    0,    0,  934,    0,  934,  934,    0,
    0,  934,    0, 1070,    0,  934, 1070,  934,    0,  934,
  928,  934,  928,  928,  928,    0,  934,  934,    0,  934,
    0, 1072,    0, 1070,    0,    0, 1070,    0,  928,  928,
  928,  928,    0,    0,  934,  934,    0,  934,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  934,    0,
  934,    0,  934,  934,  934,    0,  934,    0,    0,  934,
  934,    0,  928,    0,    0,    0, 1070,    0,    0,  934,
    0,    0, 1070, 1070, 1070,    0, 1070, 1070, 1070,    0,
 1070,    0,  934,    0,    0,  934,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1070,    0,
 1070,  934,    0,    0,    0,    0,    0,  934,  934,    0,
    0,    0,  934,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  934,  934,    0,  934,    0,    0, 1070,
    0,    0,  934,    0,    0,  934,    0,  934,  934,  934,
  934,    0,  934,    0,    0,    0, 1070,    0,    0,    0,
  934,  934,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  934,  934,    0,  934,  934,  934,    0, 1070,    0,
    0,  934,  934,  934,  934,  934,    0,  934,    0,    0,
  934,  934,  934,  934,  934,  934,  934,    0,    0,    0,
  934,  934,  934,  934,  934,  934,  934,  934,    0,  934,
    0,    0,    0, 1070, 1070,    0,    0,    0,    0,  934,
  934,  934,  934,  934,  934,  934,  934,  934,  934,    0,
 1070,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  928,    0,  928,  928,    0,    0,    0,    0,    0,
  928,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  928,    0,    0,    0,  927,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  928,    0,
    0,    0,    0,  928,  928,    0,    0,  928,    0,    0,
    0,    0,    0,    0,  928,    0,  928,  928,    0,    0,
  928,    0,  718,    0,  928,  719,  928,    0,  928,  927,
  928,  927,  927,  927,    0,  928,  928,    0,  928,    0,
    0,    0,  720,    0,    0,  721,    0,  927,  927,  927,
  927,    0,    0,  928,  928,    0,  928,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  928,    0,  928,
    0,  928,  928,  928,    0,  928,    0,    0,  928,  928,
    0,  927,    0,    0,    0,  722,    0,    0,  928,    0,
    0,  723,  724,  725,    0,  726,  727,  728,    0,  729,
    0,  928,    0,    0,  928,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  730,    0,  731,
  928,    0,    0,    0,    0,    0,  928,  928,    0,    0,
    0,  928,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  928,  928,    0,  928,    0,    0,  732,    0,
    0,  928,    0,    0,  928,    0,  928,  928,  928,  928,
    0,  928,    0,    0,    0,  733,    0,    0,    0,  928,
  928,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  928,  928,    0,  928,  928,  928,    0,  734,    0,    0,
  928,  928,  928,  928,  928,    0,  928,    0,    0,  928,
  928,  928,  928,  928,  928,  928,    0,    0,    0,  928,
  928,  928,  928,  928,  928,  928,  928,    0,  928,    0,
    0,    0,  735,  736,    0,    0,    0,    0,  928,  928,
  928,  928,  928,  928,  928,  928,  928,  928,    0,  737,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  927,    0,  927,  927,    0,    0,    0,    0,    0,  927,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  927,    0,    0,    0,  929,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  927,    0,    0,
    0,    0,  927,  927,    0,    0,  927,    0,    0,    0,
    0,    0,    0,  927,    0,  927,  927,    0,    0,  927,
    0,  150,    0,  927,  150,  927,    0,  927,  929,  927,
  929,  929,  929,    0,  927,  927,    0,  927,    0,    0,
    0,  150,    0,    0,  150,    0,  929,  929,  929,  929,
    0,    0,  927,  927,    0,  927,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  927,    0,  927,    0,
  927,  927,  927,    0,  927,    0,    0,  927,  927,    0,
  929,    0,    0,    0,  150,    0,    0,  927,    0,    0,
  150,  150,  150,    0,  150,  150,  150,    0,  150,    0,
  927,    0,    0,  927,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,    0,  150,  927,
    0,    0,    0,    0,    0,  927,  927,    0,    0,    0,
  927,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  927,  927,    0,  927,    0,    0,  150,    0,    0,
  927,    0,    0,  927,    0,  927,  927,  927,  927,    0,
  927,    0,    0,    0,  150,    0,    0,    0,  927,  927,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  927,
  927,    0,  927,  927,  927,    0,  150,    0,    0,  927,
  927,  927,  927,  927,    0,  927,    0,    0,  927,  927,
  927,  927,  927,  927,  927,    0,    0,    0,  927,  927,
  927,  927,  927,  927,  927,  927,    0,  927,    0,    0,
    0,  150,  150,    0,    0,    0,    0,  927,  927,  927,
  927,  927,  927,  927,  927,  927,  927,    0,  150,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  929,
    0,  929,  929,    0,    0,    0,    0,    0,  929,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  929,    0,    0,    0,  932,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  929,    0,    0,    0,
    0,  929,  929,    0,    0,  929,    0,    0,    0,    0,
    0,    0,  929,    0,  929,  929,    0,    0,  929,    0,
    0,    0,  929,    0,  929,    0,  929,  932,  929,  932,
  932,  932,    0,  929,  929,    0,  929,    0,    0,    0,
    0,    0,    0,    0,    0,  932,  932,  932,  932,    0,
    0,  929,  929,    0,  929,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  929,    0,  929,    0,  929,
  929,  929,    0,  929,    0,    0,  929,  929,    0,  932,
    0,    0,    0,    0,    0,    0,  929,    0,    0,    0,
    0,    0,    0,    0, 1105,  848,  846,    0,  847,  929,
  849,    0,  929,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1048, 1047, 1049,    0,    0,  929,    0,
    0,    0,    0,    0,  929,  929,    0,    0,    0,  929,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  929,  929,    0,  929,    0,    0,    0,    0,    0,  929,
    0,    0,  929,    0,  929,  929,  929,  929,    0,  929,
    0,    0,    0,    0,    0,    0,    0,  929,  929,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  929,  929,
    0,  929,  929,  929,    0,    0,    0,    0,  929,  929,
  929,  929,  929,    0,  929,    0,    0,  929,  929,  929,
  929,  929,  929,  929,    0,    0,    0,  929,  929,  929,
  929,  929,  929,  929,  929,    0,  929,    0,  746,    0,
    0,    0,    0,    0,    0,    0,  929,  929,  929,  929,
  929,  929,  929,  929,  929,  929,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  932,    0,
  932,  932,    0,    0,    0,    0,    0,  932,    0,  746,
    0,    0,  746,    0,    0,    0,    0,    0,    0,    0,
    0,  932,    0,    0,    0,    0,    0,  746,    0,    0,
    0,    0,    0,    0,    0,  932,    0,    0,    0,    0,
  932,  932,    0,    0,  932,    0,    0,    0,    0,    0,
    0,  932,    0,  932,  932,    0,    0,  932,    0,    0,
    0,  932,    0,  932,    0,  932,    0,  932,    0,    0,
    0,    0,  932,  932, 1035,  932,  848,  846,    0,  847,
  844,  849,    0,    0,    0,  845,    0,    0, 1036,    0,
  932,  932,    0,  932, 1048, 1047, 1049,    0,    0,    0,
    0,    0,    0,    0,  932,    0,  932,    0,  932,  932,
  932,    0,  932,    0,    0,  932,  932,    0,    0,    0,
    0,    0,    0,    0, 1037,  932,    0,    0,    0,    0,
    0,    0, 1038,    0,    0,    0,    0,    0,  932,    0,
 1039,  932,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  932, 1040,    0,
 1041,    0,    0,  932,  932,    0,    0,    0,  932,    0,
    0,    0,    0, 1042,    0, 1043, 1044, 1045,    0,  932,
  932,    0,  932,    0,    0,    0,    0,    0,  932,    0,
    0,  932,    0,  932,  932,  932,  932,    0,  932,    0,
    0,    0,    0,    0,    0,    0,  932,  932,    0,    0,
    0,    0,    0,    0,    0,    0,  717,  932,  932,    0,
  932,  932,  932,    0, 1046,    0,    0,  932,  932,  932,
  932,  932,  746,  932,    0,    0,  932,  932,  932,  932,
  932,  932,  932,    0,    0,    0,  932,  932,  932,  932,
  932,  932,  932,  932,    0,  932,  717,  717,    0,    0,
  717,    0,    0,    0,    0,  932,  932,  932,  932,  932,
  932,  932,  932,  932,  932,  717,    0,    0,    0,    0,
    0,    0,    0,  746,    0,    0,  746,    0,    0,    0,
    0,    0,    0,  746,    0,  746,    0,    0,    0,  746,
    0,    0,    0,    0,  746, 1035,    0,  746,    0,    0,
    0,  844,    0,    0,    0,    0,  845,    0,    0, 1036,
    0,    0,  746,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  746,    0,    0,    0,
    0,    0,    0,    0,  746,    0,    0,    0,  746,    0,
    0,    0,    0,    0,    0, 1037,    0,  746,    0,    0,
    0,    0,    0, 1038,    0,    0,    0,    0,    0,    0,
    0, 1039,    0,  746,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1040,
    0, 1041,    0,    0,    0,    0,    0,    0,    0,    0,
  746,    0,    0,    0, 1042,    0, 1043, 1044, 1045,    0,
    0,    0,  746,    0,  746,    0,    0,    0,    0,    0,
  746,    0,    0,  746,    0,  746,  746,  746,  746,    0,
  746,    0,    0,    0,    0,    0,    0,    0,  746,  746,
    0,    0,    0,    0,    0,    0,    0,    0,  744,  746,
  746,    0,  746,  746,  746, 1046,    0,    0,    0,  746,
  746,  746,  746,  746,    0,  746,    0,    0,  746,  746,
  746,  746,  746,  746,  746,    0,    0,    0,  746,  746,
  746,  746,  746,  746,  746,  746,    0,  746,    0,  744,
    0,    0,  744,    0,    0,    0,    0,  746,  746,  746,
  746,  746,  746,  746,  746,  746,  746,  744,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  717,    0,    0,  717,    0,    0,    0,    0,    0,
    0,  717,    0,  717,    0,    0,    0,  717,    0,    0,
    0,    0,  717,    0,    0,  717,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  717,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  717,    0,    0,    0,    0,    0,
    0,    0,  717,    0,    0,    0,  717,    0,    0,    0,
    0,    0,    0,    0,    0,  717,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  717,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  717,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  717,    0,  717,    0,    0,    0,    0,    0,  717,    0,
    0,  717,    0,  717,  717,  717,  717,    0,  717,    0,
    0,    0,    0,    0,    0,    0,  717,  717,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  717,  717,    0,
  717,  717,  717,    0,    0,    0,    0,  717,  717,  717,
  717,  717,    0,  717,    0,    0,  717,  717,  717,  717,
  717,  717,  717,    0,    0,    0,  717,  717,  717,  717,
  717,  717,  717,  717,    0,  717,    0,    0,    0,    0,
    0,  868,    0,    0,    0,  717,  717,  717,  717,  717,
  717,  717,  717,  717,  717,    0,    0,    0,    0,    0,
    0,  913,    0,  744,    0,    0,  744,    0,    0,    0,
    0,    0,    0,  744,    0,  744,    0,    0,    0,  744,
    0,    0,  868,    0,  744,  868,    0,  744,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  868,    0,  744, 1111, 1111,  913, 1111, 1111, 1111,    0,
    0,    0,    0,    0,    0,    0,  744,    0,    0,    0,
  913, 1111, 1111, 1111,  744,    0,    0,    0,  744,    0,
    0,    0,    0,    0,    0,    0,    0,  744,    0,    0,
  869,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1111,  744,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  744,  869,    0,    0,  869,    0,    0,    0,    0,    0,
    0,    0,  744,    0,  744,    0,    0,    0,    0,  869,
  717,    0,    0,  717,    0,  717,  717,  717,  717,    0,
  717,    0,    0,    0,    0,    0,    0,    0,  717,  717,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  717,
  717,    0,  717,  717,  717,    0,    0,    0,    0,  717,
  717,  744,  717,  717,    0,  717,    0,    0,  717,  717,
  717,  717,  717,  717,  717,    0,    0,    0,  744,  717,
  717,  717,  744,  717,  717,  717,    0,  717,    0,    0,
    0,    0,    0,    0,    0,    0,  895,  717,  717,  717,
  717,  717,  717,  717,  717,  717,  717,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  868,  872,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  895,    0,    0,
  895,    0,    0,  913,    0,    0,    0,    0,    0,    0,
    0,    0, 1111,    0,    0,  895,    0,    0, 1111,    0,
    0,    0,    0, 1111,    0,  872, 1111,    0,  872,    0,
    0,    0,    0,    0,    0,    0,  868,    0,    0,  868,
    0,    0,    0,  872,    0,    0,  868,    0,  868,    0,
    0,    0,  868,    0,    0,    0,  913,  868,    0,  913,
  868,    0, 1111,    0,    0,    0,  913,    0,  913,    0,
 1111,    0,  913,    0,    0,  868,    0,  913, 1111,    0,
  913,    0,  869,    0,    0,    0,    0,    0,    0,  868,
    0,    0,    0,    0,    0,  913, 1111,  868, 1111,    0,
  868,  868,    0,    0,    0,    0,    0,    0,    0,  913,
  868, 1111,    0, 1111, 1111, 1111,    0,  913,    0,    0,
  913,  913,    0,    0,    0,  870,  868,    0,    0,    0,
  913,    0,    0,    0,    0,  869,    0,    0,  869,    0,
    0,    0,    0,    0,    0,  869,  913,  869,  868,    0,
    0,  869,    0,  868,    0,    0,  869,    0,    0,  869,
    0,    0, 1111,    0,    0,  868,  870,  868,  913,  870,
    0,    0,    0,  913,  869,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  870,  913,    0,  913,  869,    0,
    0,    0,    0,    0,    0,    0,  869,  871,    0,  869,
  869,    0,    0,    0,    0,    0,    0,    0,    0,  869,
    0,    0,    0,    0,  868,    0,    0,    0,  895,    0,
    0,    0,    0,    0,    0,  869,    0,    0,    0,    0,
    0,  868,    0,    0,  913,  868,    0,    0,  871,    0,
    0,  871,    0,    0,    0,    0,  872,  869,    0,    0,
    0,  913,  869,    0,    0,  913,  871,  903,    0,    0,
    0,    0,    0,    0,  869,    0,  869,    0,    0,    0,
    0,  895,    0,    0,  895,    0,    0,    0,    0,    0,
    0,  895,    0,  895,    0,    0,    0,  895,    0,    0,
    0,    0,  895,    0,    0,  895,    0,    0,  903,  872,
    0,  903,  872,    0,    0,    0,    0,    0,    0,  872,
  895,  872,    0,  869,    0,  872,  903,    0,    0,    0,
  872,    0,    0,  872,  895,    0,    0,    0,    0,    0,
  869,    0,  895,    0,  869,  895,  895,    0,  872,    0,
    0,    0,    0,    0,    0,  895,    0,    0,    0,    0,
    0,    0,  872,    0,    0,  865,    0,    0,    0,    0,
  872,  895,    0,  872,  872,    0,    0,    0,    0,    0,
    0,    0,    0,  872,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  895,    0,    0,    0,  870,  895,  872,
    0,    0,    0,    0,    0,    0,  865,    0,    0,  865,
  895,  866,  895,    0,    0,    0,    0,    0,    0,    0,
    0,  872,    0,    0,  865,    0,  872,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  872,    0,
  872,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  870,    0,  866,  870,    0,  866,    0,    0,    0,  895,
  870,    0,  870,    0,    0,    0,  870,    0,    0,  871,
  866,  870,    0,    0,  870,    0,  895,    0,    0,    0,
  895,    0,    0,    0,    0,    0,    0,  872,    0,  870,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  870,  872,    0,  867,    0,  872,    0,
    0,  870,    0,    0,  870,  870,    0,    0,    0,    0,
    0,    0,  871,    0,  870,  871,    0,    0,    0,  903,
    0,    0,  871,    0,  871,    0,    0,    0,  871,    0,
  870,    0,    0,  871,    0,    0,  871,  867,    0,    0,
  867,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  871,  870,    0,    0,  867,  902,  870,    0,    0,
    0,    0,    0,    0,    0,  871,    0,    0,    0,  870,
    0,  870,  903,  871,    0,  903,  871,  871,    0,    0,
    0,    0,  903,    0,  903,    0,  871,    0,  903,    0,
    0,    0,    0,  903,    0,    0,  903,  902,    0,    0,
  902,    0,  871,    0,    0,    0,    0,    0,    0,    0,
    0,  903,    0,    0,    0,  902,  896,  865,  870,    0,
    0,    0,    0,    0,  871,  903,    0,    0,    0,  871,
    0,    0,    0,  903,    0,  870,  903,  903,    0,  870,
    0,  871,    0,  871,    0,    0,  903,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  896,    0,    0,
  896,    0,  903,  866,    0,    0,    0,    0,    0,    0,
  865,    0,    0,  865,    0,  896,    0,    0,    0,    0,
  865,    0,  865,    0,  903,    0,  865,    0,    0,  903,
  871,  865,    0,    0,  865,    0,    0,  904,    0,    0,
    0,  903,    0,  903,    0,    0,    0,  871,    0,  865,
    0,  871,    0,    0,    0,    0,  866,    0,    0,  866,
    0,    0,    0,  865,    0,    0,  866,    0,  866,    0,
    0,  865,  866,    0,  865,  865,    0,  866,  904,    0,
  866,  904,    0,    0,  865,    0,    0,    0,    0,    0,
  903,    0,    0,    0,    0,  866,  904,    0,  867,    0,
  865,    0,    0,    0,    0,    0,    0,  903,    0,  866,
    0,  903,    0,    0,    0,    0,    0,  866,    0,    0,
  866,  866,  865,    0,    0,    0,    0,  865,    0,    0,
  866,    0,    0,    0,    0,    0,  905,    0,    0,  865,
    0,  865,    0,    0,    0,    0,  866,    0,    0,    0,
    0,  867,    0,    0,  867,    0,    0,    0,  902,    0,
    0,  867,    0,  867,    0,    0,    0,  867,  866,  893,
    0,    0,  867,  866,    0,  867,    0,  905,    0,    0,
  905,    0,    0,    0,    0,  866,    0,  866,  865,    0,
  867,    0,    0,    0,    0,  905,    0,    0,    0,    0,
    0,    0,    0,    0,  867,  865,    0,    0,    0,  865,
  893,  902,  867,  893,  902,  867,  867,    0,  896,    0,
    0,  902,    0,  902,    0,  867,    0,  902,  893,    0,
    0,    0,  902,    0,  866,  902,    0,    0,    0,    0,
    0,  867,    0,    0,    0,    0,    0,    0,    0,    0,
  902,  866,    0,    0,    0,  866,    0,    0,    0,    0,
    0,    0,    0,  867,  902,    0,    0,    0,  867,    0,
    0,  896,  902,  395,  896,  902,  902,    0,    0,    0,
  867,  896,  867,  896,    0,  902,    0,  896,    0,  396,
    0,    0,  896,    0,    0,  896,    0,    0,    0,  904,
  397,  902,    0,    0,    0,    0,    0,  398,    0,    0,
  896,  399,  400,  891,    0,    0,    0,    0,    0,    0,
  401,    0,    0,  902,  896,    0,    0,    0,  902,  867,
    0,  402,  896,  897,    0,  896,  896,    0,    0,    0,
  902,    0,  902,    0,    0,  896,  867,    0,    0,    0,
  867,    0,  904,    0,  891,  904,    0,  891,    0,    0,
    0,  896,  904,    0,  904,    0,    0,    0,  904,    0,
    0,    0,  891,  904,  897,    0,  904,  897,    0,    0,
    0,    0,    0,  896,    0,  403,    0,    0,  896,  902,
    0,  904,  897,  404,    0,    0,    0,    0,  905,    0,
  896,    0,  896,    0,    0,  904,  902,    0,    0,    0,
  902,    0,  906,  904,    0,    0,  904,  904,    0,    0,
    0,    0,    0,    0,  405,    0,  904,    0,  406,    0,
    0,  893,    0,    0,    0,    0,    0,    0,    0,  407,
    0,    0,  904,    0,    0,    0,    0,    0,    0,  896,
    0,  905,    0,  906,  905,    0,  906,    0,  408,  409,
    0,  905,    0,  905,  904,    0,  896,  905,    0,  904,
  896,  906,  905,    0,    0,  905,    0,    0,    0,    0,
    0,  904,    0,  904,  893,    0,    0,  893,    0,    0,
  905,    0,    0,    0,  893,    0,  893,    0,    0,    0,
  893,    0,    0,    0,  905,  893,    0,    0,  893,    0,
    0,    0,  905,    0,  410,  905,  905,  411,    0,    0,
    0,    0,    0,  893,    0,  905,    0,    0,    0,    0,
  904,    0,    0,    0,    0,  892,    0,  893,    0,    0,
    0,  905,    0,    0,    0,  893,    0,  904,  893,  893,
    0,  904,    0,    0,    0,    0,    0,    0,  893,    0,
    0,    0,    0,  905,    0,    0,    0,    0,  905,    0,
    0,    0,    0,    0,  893,  891,  892,    0,    0,  892,
  905,    0,  905,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  892,  897,  893,    0,    0,    0,
    0,  893,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  849,  893,    0,  893,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  891,  905,
    0,  891,  894,    0,    0,    0,    0,    0,  891,    0,
  891,    0,    0,    0,  891,    0,  905,    0,  897,  891,
  905,  897,  891,  849,    0,    0,  849,    0,  897,    0,
  897,    0,  893,    0,  897,    0,    0,  891,    0,  897,
    0,  849,  897,  894,  906,    0,  894,    0,    0,  893,
    0,  891,    0,  893,    0,    0,    0,  897,    0,  891,
    0,  894,  891,  891,    0,    0,    0,    0,    0,    0,
    0,  897,  891,    0,    0,    0,    0,    0,    0,  897,
    0,  898,  897,  897,    0,    0,    0,    0,  891,    0,
    0,    0,  897,    0,    0,    0,    0,  906,    0,    0,
  906,    0,    0,    0,    0,    0,    0,  906,  897,  906,
  891,    0,    0,  906,    0,  891,    0,    0,  906,    0,
    0,  906,  898,    0,    0,  898,    0,  891,    0,  891,
  897,    0,    0,    0,    0,  897,  906,    0,    0,    0,
  898,    0,    0,    0,    0,    0,    0,  897,    0,  897,
  906,    0,    0,    0,    0,    0,    0,    0,  906,    0,
    0,  906,  906,    0,    0,    0,  728,  892,    0,    0,
    0,  906,    0,    0,    0,    0,  891,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  906,    0,    0,
    0,    0,    0,  891,    0,    0,  897,  891,    0,  730,
    0,    0,    0,    0,    0,    0,  728,  728,    0,  906,
  728,    0,    0,  897,  906,    0,    0,  897,    0,    0,
  892,    0,    0,  892,    0,  728,  906,    0,  906,    0,
  892,    0,  892,    0,    0,    0,  892,    0,    0,    0,
  730,  892,    0,  730,  892,  741,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  730,  892,
    0,    0,    0,    0,  894,    0,    0,    0,    0,    0,
    0,    0,    0,  892,    0,  906,    0,    0,    0,    0,
    0,  892,    0,    0,  892,  892,  741,    0,    0,  741,
    0,    0,  906,    0,  892,    0,  906,  849,    0,    0,
  849,    0,    0,    0,  741,    0,    0,  849,    0,  849,
  892,    0,    0,  849,    0,    0,    0,  894,  849,    0,
  894,  849,    0,    0,    0,    0,    0,  894,    0,  894,
    0,    0,  892,  894,    0,    0,  849,  892,  894,    0,
    0,  894,    0,  898,    0,    0,    0,    0,    0,  892,
  849,  892,    0,    0,    0,    0,  894,    0,  849,    0,
    0,  849,  849,    0,    0,    0,    0,    0,    0,    0,
  894,  849,    0,    0,    0,    0,    0,    0,  894,    0,
    0,  894,  894,    0,    0,    0,    0,  849,    0,    0,
    0,  894,    0,    0,    0,    0,  898,    0,  892,  898,
    0,    0,    0,    0,    0,    0,  898,  894,  898,  849,
    0,    0,  898,    0,  849,  892,    0,  898,    0,  892,
  898,    0,  786,    0,    0,  535,  849,  536,  849,  894,
    0,    0,    0,    0,  894,  898,    0,    0,    0,    0,
  538,    0,    0,    0,    0,  348,  894,    0,  894,  898,
    0,    0,    0,    0,    0,    0,    0,  898,    0,    0,
  898,  898,    0,    0,    0,    0,    0,    0,    0,    0,
  898,    0,    0,    0,    0,  849,    0,    0,    0,    0,
    0,  728,    0,    0,  728,    0,  898,    0,    0,    0,
    0,  728,  849,  728,    0,  894,  849,  728,    0,    0,
    0,    0,  728,    0,    0,  728,    0,    0,  898,    0,
    0,    0,  894,  898,  730,    0,  894,  730,    0,    0,
  728,    0,    0,    0,  730,  898,  730,  898,    0,    0,
  730,    0,    0,    0,  728,  730,    0,    0,  730,    0,
    0,    0,  728,    0,    0,    0,  728,    0,    0,    0,
    0,    0,    0,  730,    0,  728,    0,    0,    0,    0,
  741,    0,    0,  741,    0,    0,    0,  730,    0,    0,
  741,  728,  741,    0,  898,  730,  741,    0,    0,  730,
    0,  741,    0,    0,  741,    0,    0,    0,  730,    0,
    0,  898,    0,    0,    0,  898,    0,    0,  728,  741,
    0,    0,    0,    0,  730,    0,    0,    0,    0,    0,
  728,    0,  728,  741,    0,    0,    0,    0,    0,    0,
    0,  741,    0,    0,    0,  741,    0,    0,    0,    0,
    0,  730,    0,    0,  741,    0,    0,    0,    0,    0,
    0,    0,    0,  730,    0,  730,    0,    0,    0,  490,
  741,    0,    0,    0,    0,    0,  491,    0,    0,  728,
    0,    0,    0,    0,    0,    0,    0,    0,  492,    0,
    0,  779,    0,    0,  493,  494,  728,  741,    0,    0,
  728,    0,    0,    0,    0,    0,    0,    0,    0,  741,
    0,  741,  730,  780,  786,    0,    0,  535,    0,  536,
    0,    0,  495,    0,    0,  496,    0,    0,    0,  730,
    0,    0,  538,  730,    0,    0,    0,  348,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  497,    0,  498,  499,    0,    0,    0,    0,  741,    0,
    0,    0,  500,    0,    0,    0,  501,    0,    0,    0,
    0,    0,    0,    0,  781,  741,    0,    0,    0,  741,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  782,    0,    0,    0,    0,
    0,  502,    0,    0,    0,    0,    0,  503,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  504,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  505,  506,  507,  508,  268,  269,  117,    0,  118,
  119,  120,  121,    0,  122,  509,    0,    0,    0,    0,
    0,    0,  123,  124,  510,  511,  512,  513,  514,  515,
  516,  517,  518,  125,  519,    0,  127,  128,  129,  520,
  521,    0,  522,  523,  524,    0,  132,  133,  525,  134,
    0,    0,  135,  136,  783,  784,  785,  140,  141,    0,
    0,    0,    0,  142,  526,  144,    0,  527,  146,  147,
    0,  148,    0,  528,  529,  530,    0,  531,  532,    0,
  533,  149,  150,  151,  152,  153,  154,  534,  156,  157,
  158,  490,    0,    0,    0,    0,    0,    0,  491,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  492,    0,    0,    0,    0,    0,  493,  494,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  780,  786,    0,    0,  535,
    0,  536,    0,    0,  495,    0,    0,  496,    0,    0,
    0,    0,    0,    0,  538,    0,    0,    0,    0,  348,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  497,    0,  498,  499,    0,    0,    0,    0,
    0,    0,    0,    0,  500,    0,    0,    0,  501,    0,
    0,    0,    0,    0,    0,    0,  781,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   14,    0,    0,    0,  782,    0,    0,
    0,    0,    0,  502,    0,    0,    0,    0,    0,  503,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  504,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  505,  506,  507,  508,  268,  269,  117,
    0,  118,  119,  120,  121,    0,  122,  509,    0,    0,
    0,    0,    0,    0,  123,  124,  510,  511,  512,  513,
  514,  515,  516,  517,  518,  125,  519,    0,  127,  128,
  129,  520,  521,    0,  522,  523,  524,    0,  132,  133,
  525,  134,    0,    0,  135,  136,  783,  784,  785,  140,
  141,    0,    0,    0,    0,  142,  526,  144,    0,  527,
  146,  147,    0,  148,    0,  528,  529,  530, 1195,  531,
  532,    0,  533,  149,  150,  151,  152,  153,  154,  534,
  156,  157,  158,  490,    0,    0,    0,    0,    0,    0,
  491,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  492,    0,    0,    0,    0,    0,  493,  494,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  780,  608,    0,
    0,  535,    0,  536,    0,    0,  495,    0,    0,  496,
    0,    0,    0,    0,    0,    0,  538,    0,    0,    0,
    0,  348,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  497,    0,  498,  499,    0,    0,
    0,    0,    0,    0,    0,    0,  500,    0,    0,    0,
  501,    0,    0,    0,    0,    0,    0,    0,  781,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  782,
    0,    0,    0,    0,    0,  502,    0,    0,    0,    0,
    0,  503,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  504,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  505,  506,  507,  508,  268,
  269,  117,    0,  118,  119,  120,  121,    0,  122,  509,
    0,    0,    0,    0,    0,    0,  123,  124,  510,  511,
  512,  513,  514,  515,  516,  517,  518,  125,  519,    0,
  127,  128,  129,  520,  521,    0,  522,  523,  524,    0,
  132,  133,  525,  134,    0,  493,  135,  136,  783,  784,
  785,  140,  141,    0,    0,    0,    0,  142,  526,  144,
    0,  527,  146,  147,    0,  148,    0,  528,  529,  530,
    0,  531,  532,  495,  533,  149,  150,  151,  152,  153,
  154,  534,  156,  157,  158,  490,    0,    0,    0,    0,
    0,    0,  491,    0,    0,    0,    0,    0,    0,    0,
    0,  497,    0,  574,  492,    0,    0,    0,    0,    0,
  493,  494,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  608,  495,    0,
  535,  496,  536,  574,  574,    0,    0,  574,    0,    0,
    0,    0,    0,    0,    0,  538,    0,    0,    0,    0,
  348,    0,  574,    0,  574,    0,  497,    0,  498,  499,
    0,    0,  502,    0,    0,    0,    0,    0,  500,    0,
    0,    0,  501,    0,    0,    0,    0,    0,  504,    0,
    0,    0,    0,    0,  574,    0,    0,    0,    0,    0,
    0,    0,  505,  506,  507,    0,  268,  269,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  510,  511,  512,  513,  514,
  515,  516,  517,  518,    0,    0,    0,  502,    0,    0,
  520,  521,    0,  503,    0,    0,    0,    0,    0,  525,
    0,    0,    0,  504,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  505,  506,  507,
  508,  268,  269,  117,    0,  118,  119,  120,  121,    0,
  122,  509,    0,    0,    0,    0,    0,    0,  123,  124,
  510,  511,  512,  513,  514,  515,  516,  517,  518,  125,
  519,    0,  127,  128,  129,  520,  521,    0,  522,  523,
  524,    0,  132,  133,  525,  134,    0,    0,  135,  136,
  137,  138,  139,  140,  141,    0,    0,    0,    0,  142,
  526,  144,    0,  527,  146,  147, 1098,  148,    0,  528,
  529,  530, 1099,  531,  532, 1100,  533,  149,  150,  151,
  152,  153,  154,  534,  156,  157,  158, 1287,    0,    0,
 1288,  574,    0,    0,  490,    0,    0,    0,    0,    0,
    0,  491,    0,    0,    0,    0,  574,    0,  574,  574,
  574,    0,  575,  492,  574,    0,    0,  574,    0,  493,
  494,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  574,    0,    0,    0,    0,    0,  574,    0,    0,  574,
    0,    0,    0,    0,    0,    0,  608,  495,    0,  535,
  496,  536,  575,  575,    0,    0,  575,    0,    0,    0,
    0,    0,    0,    0,  538,    0,    0,    0,    0,  348,
    0,  575,    0,  575,    0,  497,    0,  498,  499,    0,
    0,  574,    0,    0,    0,    0,    0,  500,    0,    0,
    0,  501,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  575,    0,  574,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
    0,    0,  574,    0,    0,    0,  574,    0,    0,    0,
    0,    0,    0,  574, 1289,    0,  502,    0,    0,    0,
    0,    0,  503,    0,    0,    0,    0,    0,    0,    0,
    0,  574,  504,    0,    0,    0,  574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  505,  506,  507,  508,
  268,  269,  117,    0,  118,  119,  120,  121,    0,  122,
  509,  574,    0,    0,    0,  574,    0,  123,  124,  510,
  511,  512,  513,  514,  515,  516,  517,  518,  125,  519,
    0,  127,  128,  129,  520,  521,    0,  522,  523,  524,
    0,  132,  133,  525,  134,    0,    0,  135,  136,  137,
  138,  139,  140,  141,    0,    0,    0,    0,  142,  526,
  144,    0,  527,  146,  147,    0,  148,    0,  528,  529,
  530,    0,  531,  532,    0,  533,  149,  150,  151,  152,
  153,  154,  534,  156,  157,  158, 1298,    0,    0, 1288,
  575,    0,    0,  490,    0,    0,    0,    0,    0,    0,
  491,    0,    0,    0,    0,  575,    0,  575,  575,  575,
    0,  569,  492,  575,    0,    0,  575,    0,  493,  494,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  575,
    0,    0,    0,    0,    0,  575,    0,    0,  575,    0,
    0,    0,    0,    0,    0,  608,  495,    0,  535,  496,
  536,    0,  569,    0,    0,  569,    0,    0,    0,    0,
    0,    0,    0,  538,    0,    0,    0,    0,  348,    0,
  569,    0,  569,    0,  497,    0,  498,  499,    0,    0,
  575,    0,    0,    0,    0,    0,  500,    0,    0,    0,
  501,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  569,    0,  575,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  575,    0,    0,    0,    0,
    0,  575,    0,    0,    0,  575,    0,    0,    0,    0,
    0,    0,  575, 1289,    0,  502,    0,    0,    0,    0,
    0,  503,    0,    0,    0,    0,    0,    0,    0,    0,
  575,  504,    0,    0,    0,  575,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  505,  506,  507,  508,  268,
  269,  117,    0,  118,  119,  120,  121,    0,  122,  509,
  575,    0,    0,    0,  575,    0,  123,  124,  510,  511,
  512,  513,  514,  515,  516,  517,  518,  125,  519,    0,
  127,  128,  129,  520,  521,    0,  522,  523,  524,    0,
  132,  133,  525,  134,    0,    0,  135,  136,  137,  138,
  139,  140,  141,    0,    0,    0,    0,  142,  526,  144,
    0,  527,  146,  147,    0,  148,    0,  528,  529,  530,
    0,  531,  532,    0,  533,  149,  150,  151,  152,  153,
  154,  534,  156,  157,  158, 1302,    0,    0, 1288,  569,
    0,    0,  490,    0,    0,    0,    0,    0,    0,  491,
    0,    0,    0,    0,  569,    0,  569,  569,  569,    0,
  591,  492,  569,    0,    0,  569,    0,  493,  494,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  569,    0,
    0,    0,    0,    0,  569,    0,    0,  569,    0,    0,
    0,    0,    0,    0,  608,  495,    0,  535,  496,  536,
    0,  591,    0,    0,  591,    0,    0,    0,    0,    0,
    0,    0,  538,    0,    0,    0,    0,  348,    0,  591,
    0,  591,    0,  497,    0,  498,  499,    0,    0,  569,
    0,    0,    0,    0,    0,  500,    0,    0,    0,  501,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  591,    0,  569,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  569,    0,    0,    0,    0,    0,
  569,    0,    0,    0,  569,    0,    0,    0,    0,    0,
    0,  569, 1289,    0,  502,    0,    0,    0,    0,    0,
  503,    0,    0,    0,    0,    0,    0,    0,    0,  569,
  504,    0,    0,    0,  569,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  505,  506,  507,  508,  268,  269,
  117,    0,  118,  119,  120,  121,    0,  122,  509,  569,
    0,    0,    0,  569,    0,  123,  124,  510,  511,  512,
  513,  514,  515,  516,  517,  518,  125,  519,    0,  127,
  128,  129,  520,  521,    0,  522,  523,  524,    0,  132,
  133,  525,  134,    0,    0,  135,  136,  137,  138,  139,
  140,  141,    0,    0,    0,    0,  142,  526,  144,    0,
  527,  146,  147,    0,  148,    0,  528,  529,  530,    0,
  531,  532,    0,  533,  149,  150,  151,  152,  153,  154,
  534,  156,  157,  158, 1310,    0,    0, 1288,  591,    0,
    0,  490,    0,    0,    0,    0,    0,    0,  491,    0,
    0,    0,    0,  591,    0,    0,  591,  591,    0,  581,
  492,  591,    0,    0,  591,    0,  493,  494,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  591,    0,    0,
    0,    0,    0,  591,    0,    0,  591,    0,    0,    0,
    0,    0,    0,  608,  495,    0,  535,  496,  536,    0,
  581,    0,    0,  581,    0,    0,    0,    0,    0,    0,
    0,  538,    0,    0,    0,    0,  348,    0,  581,    0,
  581,    0,  497,    0,  498,  499,    0,    0,  591,    0,
    0,    0,    0,    0,  500,    0,    0,    0,  501,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  581,    0,  591,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  591,    0,    0,    0,    0,    0,  591,
    0,    0,    0,  591,    0,    0,    0,    0,    0,    0,
  591, 1289,    0,  502,    0,    0,    0,    0,    0,  503,
    0,    0,    0,    0,    0,    0,    0,    0,  591,  504,
    0,    0,    0,  591,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  505,  506,  507,  508,  268,  269,  117,
    0,  118,  119,  120,  121,    0,  122,  509,  591,    0,
    0,    0,  591,    0,  123,  124,  510,  511,  512,  513,
  514,  515,  516,  517,  518,  125,  519,    0,  127,  128,
  129,  520,  521,    0,  522,  523,  524,    0,  132,  133,
  525,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141,    0,    0,    0,    0,  142,  526,  144,    0,  527,
  146,  147,    0,  148,    0,  528,  529,  530,    0,  531,
  532,    0,  533,  149,  150,  151,  152,  153,  154,  534,
  156,  157,  158, 1313,    0,    0, 1288,  581,    0,    0,
  490,    0,    0,    0,    0,    0,    0,  491,    0,    0,
    0,    0,  581,    0,    0,  581,  581,    0,  566,  492,
  581,    0,    0,  581,    0,  493,  494,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  581,    0,    0,    0,
    0,    0,  581,    0,    0,  581,    0,    0,    0,    0,
    0,    0,  608,  495,    0,  535,  496,  536,    0,  566,
    0,    0,  566,    0,    0,    0,    0,    0,    0,    0,
  538,    0,    0,    0,    0,  348,    0,  566,    0,  566,
    0,  497,    0,  498,  499,    0,    0,  581,    0,    0,
    0,    0,    0,  500,    0,    0,    0,  501,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  566,
    0,  581,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  581,    0,    0,    0,    0,    0,  581,    0,
    0,    0,  581,    0,    0,    0,    0,    0,    0,  581,
 1289,    0,  502,    0,    0,    0,    0,    0,  503,    0,
    0,    0,    0,    0,    0,    0,    0,  581,  504,    0,
    0,    0,  581,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  505,  506,  507,  508,  268,  269,  117,    0,
  118,  119,  120,  121,    0,  122,  509,  581,    0,    0,
    0,  581,    0,  123,  124,  510,  511,  512,  513,  514,
  515,  516,  517,  518,  125,  519,    0,  127,  128,  129,
  520,  521,    0,  522,  523,  524,    0,  132,  133,  525,
  134,    0,    0,  135,  136,  137,  138,  139,  140,  141,
    0,    0,    0,    0,  142,  526,  144,    0,  527,  146,
  147,    0,  148,    0,  528,  529,  530,    0,  531,  532,
    0,  533,  149,  150,  151,  152,  153,  154,  534,  156,
  157,  158, 1318,    0,    0, 1288,  566,    0,    0,  490,
    0,    0,    0,    0,    0,    0,  491,    0,    0,    0,
    0,  566,    0,    0,  566,  566,    0,    0,  492,  566,
    0,    0,  566,    0,  493,  494,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,    0,    0,    0,    0,
    0,  566,    0,    0,  566,    0,    0,    0,    0,    0,
    0,  608,  495,    0,  535,  496,  536,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,    0,  348,    0,    0,    0,    0,    0,
  497,    0,  498,  499,    0,    0,  566,    0,    0,    0,
    0,    0,  500,    0,    0,    0,  501,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  566,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  566,    0,    0,    0,    0,    0,  566,    0,    0,
    0,  566,    0,    0,    0,    0,    0,    0,  566, 1289,
    0,  502,    0,    0,    0,    0,    0,  503,    0,    0,
    0,    0,    0,    0,    0,    0,  566,  504,    0,    0,
    0,  566,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  505,  506,  507,  508,  268,  269,  117,    0,  118,
  119,  120,  121,    0,  122,  509,  566,    0,    0,    0,
  566,    0,  123,  124,  510,  511,  512,  513,  514,  515,
  516,  517,  518,  125,  519,    0,  127,  128,  129,  520,
  521,    0,  522,  523,  524,    0,  132,  133,  525,  134,
    0,    0,  135,  136,  137,  138,  139,  140,  141,    0,
    0,    0,    0,  142,  526,  144,    0,  527,  146,  147,
    0,  148,    0,  528,  529,  530,    0,  531,  532,    0,
  533,  149,  150,  151,  152,  153,  154,  534,  156,  157,
  158, 1321,    0,    0, 1288,    0,    0,    0,  490,    0,
    0,    0,    0,    0,    0,  491,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  492,    0,    0,
    0,    0,    0,  493,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  608,  495,    0,  535,  496,  536,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  538,    0,
    0,    0,    0,  348,    0,    0,    0,    0,    0,  497,
    0,  498,  499,    0,    0,    0,    0,    0,    0,    0,
    0,  500,    0,    0,    0,  501,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1289,    0,
  502,    0,    0,    0,    0,    0,  503,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  504,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  505,  506,  507,  508,  268,  269,  117,    0,  118,  119,
  120,  121,    0,  122,  509,    0,    0,    0,    0,    0,
    0,  123,  124,  510,  511,  512,  513,  514,  515,  516,
  517,  518,  125,  519,    0,  127,  128,  129,  520,  521,
    0,  522,  523,  524,    0,  132,  133,  525,  134,    0,
    0,  135,  136,  137,  138,  139,  140,  141,    0,    0,
    0,    0,  142,  526,  144,    0,  527,  146,  147,    0,
  148,    0,  528,  529,  530,    0,  531,  532,    0,  533,
  149,  150,  151,  152,  153,  154,  534,  156,  157,  158,
 1324,    0,    0, 1288,    0,    0,    0,  490,    0,    0,
    0,    0,    0,    0,  491,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  492,    0,    0,    0,
    0,    0,  493,  494,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  699,
  495,  699,  699,  496,  699,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  699,    0,    0,
    0,    0,  699,    0,    0,    0,    0,    0,  497,    0,
  498,  499,    0,    0,    0,    0,    0,    0,    0,    0,
  500,    0,    0,    0,  501,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1289,    0,  502,
    0,    0,    0,    0,    0,  503,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  504,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  505,
  506,  507,  508,  268,  269,  117,    0,  118,  119,  120,
  121,    0,  122,  509,    0,    0,    0,    0,    0,    0,
  123,  124,  510,  511,  512,  513,  514,  515,  516,  517,
  518,  125,  519,    0,  127,  128,  129,  520,  521,    0,
  522,  523,  524,    0,  132,  133,  525,  134,    0,    0,
  135,  136,  137,  138,  139,  140,  141,    0,    0,    0,
    0,  142,  526,  144,    0,  527,  146,  147,    0,  148,
    0,  528,  529,  530,    0,  531,  532,    0,  533,  149,
  150,  151,  152,  153,  154,  534,  156,  157,  158,  699,
    0,    0,    0,    0,    0,    0,  699,    0,    0,    0,
    0,    0,    0,  699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  699,    0,    0,    0,    0,
    0,  699,  699,    0,    0,    0,    0,    0,    0,  699,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  608,    0,  611,  535,    0,  536,    0,    0,  699,
    0,    0,  699,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,    0,  348,    0,    0,    0,    0,    0,
    0,    0, 1024,    0,    0,  719,    0,  699,    0,  699,
  699,    0,    0,    0,    0,    0,    0,    0, 1025,  699,
    0,    0,  720,  699,    0,  721,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  722,    0,    0,    0,    0,
    0,  723,  724,  725,    0,  726,  727,  728,  699,  729,
    0,    0,    0,    0,  699,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  699,    0,    0,  730,    0,  731,
    0,    0,    0,    0,    0,    0,    0,    0,  699,  699,
  699,  699,  699,  699,  699,    0,  699,  699,  699,  699,
    0,  699,  699,    0,    0,    0,    0,    0,  732,  699,
  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
  699,  699,    0,  699,  699,  733,  699,  699,    0,  699,
  699,  699,    0,  699,  699,  699,  699,    0,    0,  699,
  699,  699,  699,  699,  699,  699,    0,  734,    0,    0,
  699,  699,  699,    0,  699,  699,  699,    0,  699,    0,
  699,  699,  699,    0,  699,  699,    0,  699,  699,  699,
  699,  699,  699,  699,  699,  699,  699,  699,  490,    0,
    0,    0,  735,  736,    0,  491,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  492,    0,  737,
    0,    0,    0,  493,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  608,    0,    0,  535,    0,  536,    0,
    0,  495,    0,    0,  496,    0,    0,    0,    0,    0,
    0,  538,    0,    0,    0,    0,  348,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  497,
    0,  498,  499,    0,    0,    0,    0,    0,    0,    0,
    0,  500,    0,    0,    0,  501,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  502,    0,    0,    0,    0,    0,  503,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  504,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  505,  506,  507,  508,  268,  269,  117,    0,  118,  119,
  120,  121,    0,  122,  509,    0,    0,    0,    0,    0,
    0,  123,  124,  510,  511,  512,  513,  514,  515,  516,
  517,  518,  125,  519,    0,  127,  128,  129,  520,  521,
    0,  522,  523,  524,    0,  132,  133,  525,  134,    0,
    0,  135,  136,  137,  138,  139,  140,  141,    0,    0,
    0,    0,  142,  526,  144,    0,  527,  146,  147,    0,
  148,    0,  528,  529,  530,    0,  531,  532,    0,  533,
  149,  150,  151,  152,  153,  154,  534,  156,  157,  158,
  490,    0,    0,    0,    0,    0,    0,  491,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  492,
    0,    0,    0,    0,    0,  493,  494,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  608,    0,    0,  535,    0,
  536,    0,    0,  495,    0,    0,  496,    0,    0,    0,
    0,    0,    0,  538,    0,    0,    0,    0,  348,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  497,    0,  498,  499,    0,    0,    0,    0,    0,
    0,    0,    0,  500,    0,    0,    0,  501,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  502,    0,    0,    0,    0,    0,  503,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  504,    0,
    0,    0,    0,    0,    0,    0,  820,    0,    0,    0,
    0,    0,  505,  506,  507,  508,  268,  269,  117,    0,
  118,  119,  120,  121,    0,  122,  509,    0,    0,    0,
    0,    0,    0,  123,  124,  510,  511,  512,  513,  514,
  515,  516,  517,  518,  125,  519,    0,  127,  128,  129,
  520,  521,    0,  522,  523,  524,    0,  132,  133,  525,
  134,    0,    0,  135,  136,  137,  138,  139,  140,  141,
    0,    0,    0,    0,  142,  526,  144,    0,  527,  146,
  147,    0,  148,    0,  528,  529,  530,    0,  531,  532,
    0,  533,  149,  150,  151,  152,  153,  154,  534,  156,
  157,  158,  490,    0,    0,    0,    0,    0,    0,  491,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  492,    0,    0,    0,    0,    0,  493,  494,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  608, 1109,    0,
  535,    0,  536,    0,    0,  495,    0,    0,  496,    0,
    0,    0,    0,    0,    0,  538,    0,    0,    0,    0,
  348,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  497,    0,  498,  499,    0,    0,    0,
    0,    0,    0,    0,    0,  500,    0,    0,    0,  501,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  502,    0,    0,    0,    0,    0,
  503,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  504,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  505,  506,  507,  508,  268,  269,
  117,    0,  118,  119,  120,  121,    0,  122,  509,    0,
    0,    0,    0,    0,    0,  123,  124,  510,  511,  512,
  513,  514,  515,  516,  517,  518,  125,  519,    0,  127,
  128,  129,  520,  521,    0,  522,  523,  524,    0,  132,
  133,  525,  134,    0,    0,  135,  136,  137,  138,  139,
  140,  141,    0,    0,    0,    0,  142,  526,  144,    0,
  527,  146,  147,    0,  148,    0,  528,  529,  530,    0,
  531,  532,    0,  533,  149,  150,  151,  152,  153,  154,
  534,  156,  157,  158,  490,    0,    0,    0,    0,    0,
    0,  491,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  492,    0,    0,    0,    0,    0,  493,
  494,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  608,
    0,    0,  535,    0,  536,    0,    0,  495,    0,    0,
  496,    0,    0,    0,    0,    0,    0,  538,    0,    0,
    0,    0,  348,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  497,    0,  498,  499,    0,
    0,    0,    0,    0,    0,    0,    0,  500,    0,    0,
    0,  501,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  502,    0,    0,    0,
    0,    0,  503,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  504,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  505,  506,  507,  508,
  268,  269,  117,    0,  118,  119,  120,  121,    0,  122,
  509,    0,    0,    0,    0,    0,    0,  123,  124,  510,
  511,  512,  513,  514,  515,  516,  517,  518,  125,  519,
    0,  127,  128,  129,  520,  521,    0,  522,  523,  524,
    0,  132,  133,  525,  134,    0,    0,  135,  136,  137,
  138,  139,  140,  141,    0,    0,    0,    0,  142,  526,
  144,    0,  527,  146,  147,    0,  148,    0,  528,  529,
  530,    0,  531,  532,    0,  533,  149,  150,  151,  152,
  153,  154,  534,  156,  157,  158,  490,    0,    0,    0,
    0,    0,    0,  491,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  492,    0,    0,    0,    0,
    0,  493,  494,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  608,    0,    0,  535,    0,  536,    0,    0,  495,
    0,    0,  496,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,    0,  348,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,  498,
  499,    0,    0,    0,    0,    0,    0,    0,    0,  500,
    0,    0,    0,  501,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  502,    0,
    0,    0,    0,    0,  503,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  504,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1316,    0,    0,  505,  506,
  507,  508,  268,  269,  117,    0,  118,  119,  120,  121,
    0,  122,  509,    0,    0,    0,    0,    0,    0,  123,
  124,  510,  511,  512,  513,  514,  515,  516,  517,  518,
  125,  519,    0,  127,  128,  129,  520,  521,    0,  522,
  523,  524,    0,  132,  133,  525,  134,    0,    0,  135,
  136,  137,  138,  139,  140,  141,    0,    0,    0,    0,
  142,  526,  144,    0,  527,  146,  147,    0,  148,    0,
  528,  529,  530,    0,  531,  532,    0,  533,  149,  150,
  151,  152,  153,  154,  534,  156,  157,  158,  490,    0,
    0,    0,    0,    0,    0,  491,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  492,    0,    0,
    0,    0,    0,  493,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  608,    0,    0,  535, 1369,  536,
    0,  495,    0,    0,  496,    0,    0,    0,    0,    0,
    0,    0,  538,    0,    0,    0,    0,  348,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  497,
    0,  498,  499,    0,    0,    0,    0,    0,    0,    0,
    0,  500,    0,    0,    0,  501,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  502,    0,    0,    0,    0,    0,  503,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  504,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  505,  506,  507,  508,  268,  269,  117,    0,  118,  119,
  120,  121,    0,  122,  509,    0,    0,    0,    0,    0,
    0,  123,  124,  510,  511,  512,  513,  514,  515,  516,
  517,  518,  125,  519,    0,  127,  128,  129,  520,  521,
    0,  522,  523,  524,    0,  132,  133,  525,  134,    0,
    0,  135,  136,  137,  138,  139,  140,  141,    0,    0,
    0,    0,  142,  526,  144,    0,  527,  146,  147,    0,
  148,    0,  528,  529,  530,    0,  531,  532,    0,  533,
  149,  150,  151,  152,  153,  154,  534,  156,  157,  158,
    0,  490,    0,    0,    0,    0,    0,    0,  491,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  492,    0,    0,    0,    0,    0,  493,  494,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  701,  495,  701,  701,  496,  701,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  701,    0,    0,    0,    0,  701,    0,    0,    0,
    0,    0,  497,    0,  498,  499,    0,    0,    0,    0,
    0,    0,    0,    0,  500,    0,    0,    0,  501,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  502,    0,    0,    0,    0,    0,  503,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  504,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1525,    0,    0,  505,  506,  507,  508,  268,  269,  117,
    0,  118,  119,  120,  121,    0,  122,  509,    0,    0,
    0,    0,    0,    0,  123,  124,  510,  511,  512,  513,
  514,  515,  516,  517,  518,  125,  519,    0,  127,  128,
  129,  520,  521,    0,  522,  523,  524,    0,  132,  133,
  525,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141,    0,    0,    0,    0,  142,  526,  144,    0,  527,
  146,  147,    0,  148,    0,  528,  529,  530,    0,  531,
  532,    0,  533,  149,  150,  151,  152,  153,  154,  534,
  156,  157,  158,  701,    0,    0,    0,    0,    0,    0,
  701,  224,    0,    0,  224,    0,    0,  701,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  224,    0,  701,
    0,  224,    0,    0,  224,  701,  701,    0,    0,    0,
    0,    0,    0,  701,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1062,    0, 1062, 1062,    0,
 1062,    0,    0,  701,    0,    0,  701,    0,    0,    0,
    0,    0,    0, 1062,  224,    0,    0,    0, 1062,    0,
  224,  224,  224,    0,  224,  224,  224,    0,  224,    0,
    0,  701,    0,  701,  701,    0,    0,    0,    0,    0,
    0,    0,    0,  701,    0,    0,  224,  701,  224,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  224,    0,    0,
    0,    0,   81,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  224,    0,    0,    0,    0,    0,
    0,    0,  701,    0,    0,    0,    0,    0,  701,    0,
    0,    0,    0,    0,    0,    0,  224,    0,  701,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  701,  701,  701,  701,  701,  701,  701,    0,
  701,  701,  701,  701,    0,  701,  701,    0,    0,    0,
    0,  224,  224,  701,  701,  701,  701,  701,  701,  701,
  701,  701,  701,  701,  701,  701,    0,  701,  224,    0,
  701,  701,    0,  701,  701,  701,    0,  701,  701,  701,
  701,    0,    0,  701,  701,  701,  701,  701,  701,  701,
    0,    0,    0,    0,  701,  701,  701,    0,  701,  701,
  701,    0,  701,    0,  701,  701,  701,    0,  701,  701,
    0,  701,  701,  701,  701,  701,  701,  701,  701,  701,
  701,  701, 1062,    0,    0,    0,    0,    0,    0, 1062,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1062,    0,    0,    0,    0,    0, 1062, 1062,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  537,    0,    0,
  535,    0,  536,    0,    0, 1062,    0,    0, 1062,    0,
    0,    0,    0,    0,    0,  538,    0,    0,    0,    0,
  348,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1062,    0, 1062, 1062,    0,    0,    0,
    0,    0,    0,    0,    0, 1062,    0,    0,    0, 1062,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1062,    0,    0,    0,    0,    0,
 1062,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1062,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1062, 1062, 1062, 1062, 1062, 1062,
 1062,    0, 1062, 1062, 1062, 1062,    0, 1062, 1062,    0,
    0,    0,    0,    0,    0, 1062, 1062, 1062, 1062, 1062,
 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,    0, 1062,
 1062, 1062, 1062, 1062,    0, 1062, 1062, 1062,    0, 1062,
 1062, 1062, 1062,    0,    0, 1062, 1062, 1062, 1062, 1062,
 1062, 1062,    0,    0,    0,    0, 1062, 1062, 1062,    0,
 1062, 1062, 1062,    0, 1062,    0, 1062, 1062, 1062,    0,
 1062, 1062,    0, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
 1062, 1062, 1062, 1062,  490,    0,    0,    0,    0,    0,
    0,  491,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  492,    0,    0,    0,    0,    0,  493,
  494,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  608,
    0,    0,  535,    0,  536,    0,    0,  495,    0,    0,
  496,    0,    0,    0,    0,    0,    0,  538,    0,    0,
    0,    0,  348,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  497,    0,  498,  499,    0,
    0,    0,    0,    0,    0,    0,    0,  500,    0,    0,
    0,  501,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  502,    0,    0,    0,
    0,    0,  503,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  504,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  505,  506,  507,  508,
  268,  269,  117,    0,  118,  119,  120,  121,    0,  122,
  509,    0,    0,    0,    0,    0,    0,  123,  124,  510,
  511,  512,  513,  514,  515,  516,  517,  518,  125,  519,
    0,  127,  128,  129,  520,  521,    0,  522,  523,  524,
    0,  132,  133,  525,  134,    0,    0,  135,  136,  137,
  138,  139,  140,  141,    0,    0,    0,    0,  142,  526,
  144,    0,  527,  146,  147,    0,  148,    0,  528,  529,
  530,    0,  531,  532,    0,  533,  149,  150,  151,  152,
  153,  154,  534,  156,  157,  158,  490,    0,    0,    0,
    0,    0,    0,  491,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  492,    0,    0,    0,    0,
    0,  493,  494,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1062,    0,    0, 1062,    0, 1062,    0,    0,  495,
    0,    0,  496,    0,    0,    0,    0,    0,    0, 1062,
    0,    0,    0,    0, 1062,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,  498,
  499,    0,    0,    0,    0,    0,    0,    0,    0,  500,
    0,    0,    0,  501,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1151,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  502,    0,
    0,    0,    0,    0,  503,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  504,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  505,  506,
  507,  508,  268,  269,  117,    0,  118,  119,  120,  121,
    0,  122,  509,    0,    0,    0,    0,    0,    0,  123,
  124,  510,  511,  512,  513,  514,  515,  516,  517,  518,
  125,  519,    0,  127,  128,  129,  520,  521,    0,  522,
  523,  524,    0,  132,  133,  525,  134,  327,    0,  135,
  136,  137,  138,  139,  140,  141,    0,    0,    0,    0,
  142,  526,  144,    0,  527,  146,  147,    0,  148,    0,
  528,  529,  530,    0,  531,  532,    0,  533,  149,  150,
  151,  152,  153,  154,  534,  156,  157,  158, 1062,    0,
    0,    0,    0,    0,    0, 1062,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1062,    0,    0,
    0,    0,    0, 1062, 1062,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1151,    0,    0,    0,    0,    0,
    0, 1062,    0,    0, 1062,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1062,
    0, 1062, 1062,    0,    0,    0,    0,    0,    0,    0,
    0, 1062,    0,    0,    0, 1062,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1126,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1062,    0,    0,    0,    0,    0, 1062,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1062,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1062, 1062, 1062, 1062, 1062, 1062, 1062,    0, 1062, 1062,
 1062, 1062,    0, 1062, 1062,    0,    0,    0,  944,    0,
    0, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
 1062, 1062, 1062, 1062,    0, 1062, 1062, 1062, 1062, 1062,
 1126, 1062, 1062, 1062,    0, 1062, 1062, 1062, 1062,   14,
    0, 1062, 1062, 1062, 1062, 1062, 1062, 1062,    0,    0,
    0,    0, 1062, 1062, 1062,    0, 1062, 1062, 1062,    0,
 1062,    0, 1062, 1062, 1062,    0, 1062, 1062,    0, 1062,
 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
    0,    0,  116,    0,    0,  117,    0,  118,  119,  120,
  121,    0,  122,    0,    0,    0,    0,    0,    0,    0,
  123,  124,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  125,  126,    0,  127,  128,  129,    0,    0,    0,
    0,  130,  131,    0,  132,  133,  714,  134,    0,    0,
  135,  136,  137,  138,  139,  140,  141,    0,    0,    0,
    0,  142,  143,  144,    0,  145,  146,  147,    0,  148,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  116,
    0,    0,  117,    0,  118,  119,  120,  121,    0,  122,
    0,    0,    0,    0, 1125,    0,    0,  123,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  125,  126,
    0,  127,  128,  129,    0,    0,   86,    0,  130,  131,
    0,  132,  133,    0,  134,    0,    0,  135,  136,  137,
  138,  139,  140,  141,    0,    0,    0,    0,  142,  143,
  144,    0,  145,  146,  147,    0,  148,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  116,    0,    0,  117,
    0,  118,  119,  120,  121,    0,  122,    0,    0,    0,
    0,    0,    0,    0,  123,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,  126,    0,  127,  128,
  129,    0,    0,    0,    0,  130,  131,    0,  132,  133,
    0,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141,  538,    0,    0,    0,  142,  143,  144,    0,  145,
  146,  147,    0,  148,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,  116,    0,    0,  117,    0,  118,  119,
  120,  121,    0,  122,    0,    0,    0,    0,    0,    0,
    0,  123,  124,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  125,  126,    0,  127,  128,  129,    0,    0,
    0,    0,  130,  131,    0,  132,  133,    0,  134,  714,
    0,  135,  136,  137,  138,  139,  140,  141,    0,    0,
    0,    0,  142,  143,  144,    0,  145,  146,  147,    0,
  148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
  116,    0,    0,  117,    0,  118,  119,  120,  121,    0,
  122,    0,    0,    0,    0,    0,    0,    0,  123,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
  126,    0,  127,  128,  129,    0,    0,    0,    0,  130,
  131,    0,  132,  133,    0,  134,    0,    0,  135,  136,
  137,  138,  139,  140,  141,    0,    0,    0,    0,  142,
  143,  144,    0,  145,  146,  147,    0,  148,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,    0,    0,    0,
    0,    0,    0,    0,  717,    0,    0,  717,    0,  717,
  717,  717,  717,    0,  717,    0,    0,    0,    0,    0,
    0,    0,  717,  717,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  717,  717,    0,  717,  717,  717,    0,
    0,    0,    0,  717,  717,    0,  717,  717,    0,  717,
    0,    0,  717,  717,  717,  717,  717,  717,  717,    0,
    0,    0,    0,  717,  717,  717,    0,  717,  717,  717,
    0,  717,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  717,  717,  717,  717,  717,  717,  717,  717,  717,
  717,   85,    0,  116,    0,    0,  117,    0,  118,  119,
  120,  121,    0,  122,    0,    0,    0,    0,    0,    0,
    0,  123,  124,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  125,  126,    0,  127,  128,  129,    0,    0,
    0,    0,  130,  131,    0,  132,  133,    0,  134,    0,
    0,  135,  136,  137,  138,  139,  140,  141,  109,    0,
    0,    0,  142,  143,  144,    0,  145,  146,  147,    0,
  148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
    0,    0,    0,    0,    0,  116,  110,    0,  117,    0,
  118,  119,  120,  121,    0,  122,    0,    0,  111,    0,
    0,    0,    0,  123,  124,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,  126,    0,  127,  128,  129,
    0,    0,  112,    0,  130,  131,    0,  132,  133,    0,
  134,    0,    0,  135,  136,  137,  138,  139,  140,  141,
    0,    0,    0,    0,  142,  143,  144,    0,  145,  146,
  147,    0,  148,    0,    0,    0,    0,   49,    0,    0,
    0,    0,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,    0,    0,   49,    0,  114,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  115,    0,    0,    0,    0,    0,    0,    0,
    0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
  116,    0,    0,  117,    0,  118,  119,  120,  121,    0,
  122,    0,    0,    0,    0,    0,    0,    0,  123,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
  126,    0,  127,  128,  129,    0,    0,    0,    0,  130,
  131,    0,  132,  133,    0,  134,    0,    0,  135,  136,
  137,  138,  139,  140,  141,    0,   49,    0,    0,  142,
  143,  144,  333,  145,  146,  147,   49,  148,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,    0,    0,    0,
  333,   49,    0,    0,    0,    0,    0,  333,    0,    0,
    0,  333,  333,    0,  333,    0,    0,  333,    0,   51,
    0,    0,   51,    0,   51,   51,   51,   51,    0,   51,
  333,    0,    0,    0,    0,    0,  333,   51,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   51,   51,
    0,   51,   51,   51,    0,    0,    0,    0,   51,   51,
    0,   51,   51,    0,   51,    0,    0,   51,   51,   51,
   51,   51,   51,   51,    0,    0,    0,    0,   51,   51,
   51,    0,   51,   51,   51,    0,   51,    0,    0,    0,
    0, 1383,    0,  333,    0,    0,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,    0,    0,    0,    0,
    0,  333,    0,    0,    0,    0,    0,    0,    0,    6,
    0,    0,    0,    0,    0,    0,  333,    0,    0,    0,
 1583, 1584,    0, 1585,    0,    0,  333,    0,    0,    0,
    0,    0,    0,    0,    0,  333,    0,  333,    0, 1586,
    0,    0,    0,    0,  333, 1587,    0,  333,    0,  333,
  333,  333,  333,    0,  333,    0,    0,    0,    0,    0,
    0,    0,  333,  333,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  333,  333,    0,  333,  333,  333,    0,
    0,    0,    0,  333,  333,    0,  333,  333,    0,  333,
    0,    0,  333,  333,  333,  333,  333,  333,  333,  333,
  333,  333, 1588,  333,  333,  333,    0,  333,  333,  333,
    0,  333,    0,    0,    0,    0, 1383,    0,    0,    0,
   14,  333,  333,  333,  333,  333,  333,  333,  333,  333,
  333,    0,    0,    0,    0, 1589,    0,    0,    0,    0,
    0,    0,    0,    0,    6,   16,    0,    0,    0,    0,
    0,    0,    0,    0, 1793, 1583, 1584,    0, 1585,    0,
    0,    0,    0,  508,    0,    0,  117,    0,  118,  119,
  120,  121,    0,  122, 1586,    0,    0,    0,    0,    0,
 1587,  123,  124,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1590,  126,    0,  127,  128,  129,    0,    0,
    0,    0,  130,  131,    0,  132,  133,    0,  134,    0,
    0,  135, 1591,  137,  138,  139,  140,  141, 1592, 1593,
 1594,    0,  142,  143,  144,    0,  145,  146,  147,    0,
  148,    0,    0,    0,    0,    0,    0, 1588,    0,    0,
  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
    1,    0,    0,    0,    0,   14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
 1589,    0,    0,    0,    0,    0,    3,    0,    0,    0,
   16,    0,    0,    4,    0,    5,    0,    6,    0,    0,
    0,    0,    7,    0,    0,    0,    0,    0,  508,    8,
    0,  117,    0,  118,  119,  120,  121,    0,  122,    0,
    0,    0,    0,    9,    0,    0,  123,  124,    0,    0,
    0,    0,    0,   10,    0,    0,    0, 1590,  126,    0,
  127,  128,  129,    0,    0,    0,    0,  130,  131,    0,
  132,  133,    0,  134,    0,    0,  135, 1591,  137,  138,
  139,  140,  141, 1592, 1593, 1594,    0,  142,  143,  144,
    0,  145,  146,  147,    0,  148,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  158,  718,   11,    0,  719,    0,
    0,    0,    0,   12,  944,    0,   13,    0,   14,   15,
    0,    0,    0,    0,    0,  720,    0,    0,  721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   16,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  722,    0,
    0,    0,    0,    0,  723,  724,  725,    0,  726,  727,
  728,    0,  729,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
  730,    0,  731,    0,    0,    0,    0,   18,   19,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
    0,  732,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  733,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  734,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,  117,    0,
  118,  119,  120,  121,    0,  122,    0,    0,    0,    0,
    0,    0,    0,  123,  124,  735,  736,    0,    0,  718,
    0,    0,  719,    0,  125,  126,    0,  127,  128,  129,
    0,    0,  737,    0,  130,  131,    0,  132,  133,  720,
  134,    0,  721,  135,  136,  137,  138,  139,  140,  141,
    0,    0,    0,    0,  142,  143,  144,    0,  145,  146,
  147,    0,  148,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,  722,    0,    0,    0,    0,    0,  723,  724,
  725,    0,  726,  727,  728,    0,  729,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  730,    0,  731,    0,  686,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  732,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  733,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  734,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  116,
    0,    0,  117,    0,  118,  119,  120,  121,  692,  122,
    0,    0,    0,    0,    0,    0,    0,  123,  124,  735,
  736,    0,    0,    0,    0,    0,    0,    0,  125,  126,
    0,  127,  128,  129,    0,    0,  737,    0,  130,  131,
    0,  132,  133,    0,  134,    0,    0,  135,  136,  137,
  138,  139,  140,  141,    0,    0,    0,    0,  142,  143,
  144,    0,  145,  146,  147,    0,  148,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  116,    0,    0,  117,
    0,  118,  119,  120,  121,    0,  122,    0,    0,    0,
    0,    0,    0,    0,  123,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,  126,    0,  127,  128,
  129,    0,    0,    0,    0,  130,  131,    0,  132,  133,
    0,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141,    0,    0,    0,    0,  142,  143,  144,    0,  145,
  146,  147,    0,  148,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,    0,    0,    0,  116,    0,    0,  117,
    0,  118,  119,  120,  121,    0,  122,    0,    0,    0,
    0,    0,    0,    0,  123,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,  126,    0,  127,  128,
  129,    0,    0,    0,    0,  130,  131,    0,  132,  133,
    0,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141,    0,    0,    0,    0,  142,  143,  144,    0,  145,
  146,  147,    0,  148,    0,    0,    0,  224,    0, 1386,
  224,    0,    0,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,  224,    0,    0,    0,  224,    0,    0,
  224,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  224,    0,    0,    0,    0,    0,  224,  224,  224, 1387,
  224,  224,  224,    0,  224,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  224,    0,  224,    0,    0,    0,    0,    0,
    0,    0, 1052,    0, 1388,    0,    0,    0,    0, 1389,
    0,    0,    0,    0,    0, 1390,    0,    0,    0,    0,
    0,    0,    0,  224,    0, 1053,  116,    0,    0,  117,
    0,  118,  119,  120, 1391,    0,  122,    0,    0,    0,
  224,    0,    0,    0,  123,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,  126,    0,  127,  128,
  129,    0,  224,    0,    0,  130,  131,    0,  132,  133,
    0,  134,    0,    0,  135,  136,  137,  138,  139,  140,
  141, 1054,    0,    0,    0,  142,  143,  144,    0,  145,
  146,  147,    0,  148,    0,    0,    0,  224,  224,    0,
    0,    0,    0,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,    0,  224,  116,    0,    0,  117,    0,
  118,  119,  120,  121,    0,  122,    0,    0,    0,    0,
    0,    0,    0,  123,  124,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,  126,    0,  127,  128,  129,
    0,    0,    0,    0,  130,  131,    0,  132,  133,    0,
  134,    0,    0,  135,  136,  137,  138,  139,  140,  141,
    0,    0,    0,    0,  142,  143,  144,    0,  145,  146,
  147,    0,  148,    0,    0,  589,    0,    0,    0,    0,
    0,    0,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,  116,    0,    0,  117,    0,  118,  119,  120,
  121,    0,  122,    0,    0,    0,    0,    0,    0,    0,
  123,  124,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  125,  126,    0,  127,  128,  129,    0,    0,    0,
    0,  130,  131,    0,  132,  133,    0,  134,    0,    0,
  135,  136,  137,  138,  139,  140,  141,    0,    0,    0,
    0,  142,  143,  144,    0,  145,  146,  147,    0,  148,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,  116,
    0,    0,  117,  205,  118,  119,  120,  121,  206,  122,
  207,  208,  209,  210,  211,  212,  213,  123,  124,  214,
  215,  216,  217,  218,    0,    0,  219,  220,  125,  126,
  221,  127,  128,  129,  222,  223,  224,  225,  130,  131,
  226,  132,  133,  227,  134,  228,  229,  135,  136,  137,
  138,  139,  140,  141,  230,  231,  232,  233,  142,  143,
  144,  234,  145,  146,  147,  235,  148,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  486,    0,    0,  486,
  486,  486,  486,  486,  486,    0,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,    0,    0,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  116,    0,    0,  117,    0,  118,  119,
  120,  121,    0,  122,    0,    0,    0,    0,    0,    0,
    0,  123,  124,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  125,  126,    0,  127,  128,  129,    0,    0,
    0,    0,  130,  131,    0,  132,  133,    0,  134,    0,
    0,  135,  136,  137,  138,  139,  140,  141,    0,    0,
    0,    0,  142,  143,  144,    0,  145,  146,  147,    0,
  148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
   28,    0,    0,   28,    0,   28,   28,   28,   28,    0,
   28,    0,    0,    0,    0,    0,    0,    0,   28,   28,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
   28,    0,   28,   28,   28,    0,    0,    0,    0,   28,
   28,    0,   28,   28,    0,   28,    0,    0,   28,   28,
   28,   28,   28,   28,   28,    0,    0,    0,    0,   28,
   28,   28,    0,   28,   28,   28,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,  607,    0,    0,
  607,    0,  607,  607,  607,  607,    0,  607,    0,    0,
    0,    0,    0,    0,    0,  607,  607,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  607,  607,    0,  607,
  607,  607,    0,    0,    0,    0,  607,  607,    0,  607,
  607,    0,  607,    0,    0,  607,  607,  607,  607,  607,
  607,  607,    0,    0,    0,    0,  607,  607,  607,    0,
  607,  607,  607,    0,  607,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  607,  607,  607,  607,  607,  607,
  607,  607,  607,  607,  290,    0,    0,  290,    0,  290,
  290,  290,  290,    0,  290,    0,    0,    0,    0,    0,
    0,    0,  290,  290,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  290,  290,    0,  290,  290,  290,    0,
    0,    0,    0,  290,  290,    0,  290,  290,    0,  290,
    0,    0,  290,  290,  290,  290,  290,  290,  290,    0,
    0,    0,    0,  290,  290,  290,    0,  290,  290,  290,
    0,  290,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  290,  290,  290,  290,  290,  290,  290,  290,  290,
  290,
};
static int yycheck[] = {                                       9,
    0,    4,  186,   70,  652,   61,   16,   71,   18,   70,
  103,  115,   77,  537,   63,  176,  177,   69,  176,  177,
   16,   80,  430,  100,  851,  467,  467,   76,   62,  781,
   94,  463,  687,   75,  786,  333,  932,  102,  851,  578,
   74,  932,   98,  932,  909,  104,  932,  434,   58,   59,
  616,   61,   62,   63,   64,   65,  459,  598,  100,  932,
   70,   71,   72,  655,   74,   99,   76,   77,  820,   79,
   80,   81,  675,  107,  826,   65, 1383, 1057,  932, 1382,
   90,  803,   92,   93,   94,  444,   96,   97,   98,   99,
 1133,  101,  102,  103,  104,  105,   92,  107,  597,  192,
 1119,  168,  432,  170,  383,  101,  861,   97,    0,  854,
    0, 1449, 1221,   41,  473,  105,  774,  839,  196,  915,
  169, 1264,   45,   44,  188, 1242,  191, 1107,    0,   44,
  414, 1151, 1349,    0,   44, 1352,  739,  283,  704,  678,
   63,  190,   44,  682,   45,  941,    0,   40,  687,    0,
 1489,    0,    0,   40,  950,  189, 1017,  443,  168,  169,
  170,  765,  907,    0,  174,    0,   45,   59,   41,   59,
   63,  181, 1247,    0,    0,   45,  186,   40,  188,  189,
  190,  191,  192,   44,    0,    0,  196,   59,  292, 1401,
 1207,  181,   59,   41,    0,    0,  248,    0,   41,  383,
   63,   41,    0,    0,   41,   59,   41,   44,   59,   44,
   59,   59,    0,   41, 1010,   40,   44,    0,    0,    0,
    0,   44,   59, 1447,   59,    0,   41,  279, 1138,   44,
  283,  663,   59,   59,   91,   41,    0,    0,   44,  919,
  386,    0, 1259,   59,   59,  687,  687,   44,  298,   61,
   44,   40,  344,   59,   59, 1413,   59,  324,  315,  273,
  327,   59,   59,  671,   44,   42,   41,   45,  537,   44,
  262,   59, 1660,   63,   41,   44,   59,   59,   59,   59,
  637,  640,  690,  715,   59,  298,    0, 1430,  392, 1592,
 1593,  589, 1119,  297,  280,   59,   59, 1604, 1050, 1051,
   59,  317,  276,  298,  360,    0, 1119,  605,  268,  371,
  914,  395,   44,  298,  324,  364,  383,  327, 1179,  843,
  257,  334,  913,  333,  334,  264,  850,    0, 1667,  351,
  401,    0,    0,  385,  264,  938, 1088,    0,  265,  608,
  344,  297, 1559,  946,  260,   59, 1563,   44,  410,  315,
  360,  397, 1461,  259,  364,  317,    0,  428,  257,  273,
 1477,  396,   58,  269,   59,  334,  433,   63,  395, 1444,
  416,  974,  299,   41,  447,  485,  443,  412,  445,    0,
  447, 1177, 1491,  450,  300,  495,   59,  379,  445,  262,
   59,   59,  348,  330, 1414,  457,   59,   41,  372,  359,
  453,  454, 1445,  413,  414,  469,  471,  258,  460,    0,
  462, 1428,  428,  597,  506,   59,  500,    0,  275,  270,
   41,  434,  953,  433, 1812,  477,  482,  993, 1019,  968,
  479,  330,  481,  443,  348,  445,  470,  447,   59,  434,
  450, 1484, 1194,  297,  458,  431,  297, 1427,  338,  434,
   41,  277,  303, 1175,  305, 1679,  317,    0,   41,  469,
  470,  471,  484,  306,  403,  434,  306,  315,   59,  479,
  264,  481,  482,  403,    0,  485,   59, 1018,    0,  445,
  315,  371,  485,  260,  511,  297,  536, 1790,  336, 1030,
  344, 1032, 1650,  344,  277,  262, 1834, 1407, 1408,    0,
  315,  336,  506, 1183,   41,  264,  379,  397,  380,  297,
  400,  338,  327,  336, 1853,   41,   59,  786,  428,   41,
   61,  336,  338,  300,   44,  446,  416,  450,  538,  607,
  597,  888,  301,   59,  401,  450,  423,   59,  587,  376,
  315,  344,  444,  268,  371,  706,  344,  596, 1765,  450,
 1377,  600,  442,  402,  588,  371,  344,  450,   59, 1668,
  365,  336,  387, 1672, 1377,  380, 1709, 1676, 1677,  301,
  397,  450,  870,  400,  389,  403,  477,  587,  588,  589,
  450,  397,  510,  380,  400,  652,  596,  450,  630,  416,
  600, 1929,  389,  642, 1806,  605,  648,  607,  446,  380,
  416, 1710,    0, 1712,    0, 1722, 1209,  497,  389,  755,
 1151,  446,  379,  665, 1272,  442,  380,  432,  510, 1267,
  687, 1145, 1483, 1666, 1379,  389,  442,  517,  680,  908,
  707,  446,  642, 1378, 1972, 1022,  920,  967,  510, 1180,
  530, 1661,  652,   41, 1143,   41,  410,  444,    0, 1008,
  439, 1958,  506,  939, 1258,  506,  493,  709, 1996,  494,
  450,   59,  510,   59,  446,  707,  446,  851,  336,  338,
  497,  446,  450,   41, 1691,  510,  686,  687, 1985,  376,
  444,  497,  692,  446, 1215, 1216, 1482,  493,  402,  498,
  517, 1708,  336,    0,  315,  510,    0,  764,  361,  477,
  858,  517,  754,  530,  324, 2012,  401,   59,  272,  761,
  762, 1820, 1821,  510,  530,  336, 2023,  442,  506, 2026,
    0,  264, 2025,  263,  908,  262, 2033,  260,  397,  510,
  891,  400,  315,  428,  280,  510, 1267,   41,    0,  352,
   44, 1402,  262, 1570,  397,  336,  510,  416, 1728, 1673,
 1674,  275,   59,  336,  764,   59,  297,  453,  454,  380,
  272,   41, 1604,   41,   44,  310,   44,  300, 1292,  309,
  376, 1669, 1791,  442,  816,  304,  305, 1673, 1674,   59,
  320,  397, 1673, 1674, 1673, 1674, 1189, 1673, 1674, 1511,
  313,  314,  859,  315,  861,  448,  863,   59,  808, 1664,
 1673, 1674,  446, 1846,  304,  305, 1467,    0,  421, 1852,
  336,  432,  251, 1711,  336,  976,    0,  341,  808, 1673,
 1674,    0,    0,    0,  336,  446, 1935, 1936,  497,  878,
 1939,  377,  448,    0,  844, 1359,  456,  338,   42, 1442,
 1443,  908,  379,   47,  854,  879,  913,  390,  517,  859,
    0,  861,  901,  863,  903,  446, 1459, 1260, 1450,  379,
  870,  530,  262,  446,  409,  304,   59,  919,  878,  879,
  371,  380,  939,  312,  926,   59,  886,  887,  303,  419,
   59,   59,   59, 1270,  936,  431,   59,  964, 1412,  510,
 1545,  901,   59,  903,  262,    0,  397,  907,  965,  400,
  318,  968,  448,  913, 1470,  315,  258, 1473,    0,   59,
  920, 1663,  284,  331,  443,  416,    0,  315,  270,  315,
  446,  339,  964,  432,  446,  297, 1003, 1004, 1005,  939,
  982,  973, 1951,  319, 1953, 1119,  354,   44,  336,  305,
  336,  442, 1961,  443, 1963,  297,  303, 1334,  990,  315,
  368,  303, 1019,  305,   59,  965,  309,  264,  968, 1143,
 1009, 1003, 1004, 1005, 1791,    0,  305,   59,   44, 1893,
 1894, 1020,  276,  277,  984,   59,  315,   44, 1791,  379,
  284,  984,  380,  344,  380,  410,   93,  405,  510,  401,
 2009,  389,  344,  389,   44,  273,  497, 1893, 1894, 1009,
  352,  260, 1893, 1894, 1893, 1894,  262, 1893, 1894, 1019,
 1020,  379,  304,  305,  276,  277,  517,   93, 1028, 1029,
 1893, 1894,    0, 1292,   59, 1028,   93,  427,  306,  530,
  409,    0, 1784,  261,  432,  315,  432,  462, 1577, 1893,
 1894,  300,  395,   93,  259,  325,  276,  327,  446,  258,
  446,  450,    0,  410,  269, 1487,  336,  436,    0,  339,
    0,   42,   43,   41,   45,  538,   47,  277,  372,  421,
  348,  264,  282,  277,    0,  259, 1143,  430,  282,  445,
  264,   59, 1092,  390, 1245,  269,  264,  264, 1386,  393,
   59, 1389,  453,  454,  303,  399,  514,  264,    0,  339,
  380,   41, 1092, 1545, 1545,  462,  445, 1964,  258,  389,
  372,   59,  510, 1716,  510,   41, 1958,   59,  297,   59,
  270,  276,  362,  379, 1951,  403, 1953, 1137, 1138,  433,
  450, 1183,  298,   59, 1961,  300, 1963,  319, 1951,   41,
 1953, 1151,  372, 1985,  319,    0,    0,  297, 1961,  348,
 1963,  443,  432,  303,  506,  305, 2013,   59,    0,  264,
 1912,  316,  300,  393,  444,  344,  446, 1919,  334,  399,
 2012,  427,  264,  352,   42,   43, 1253,   45,  418,   47,
  458, 2023, 2009,  348, 2026,  276,   41,   41,  271,   44,
   44, 2033, 1269, 1377,  344, 1262, 2009,  390, 1275, 1383,
 1267,  410,  285,  433,   59,   59,  390,  386,  484,  388,
  348, 1253,  390,  390,   40,   42,   43,   59,   45,  428,
   47,    0,  322,  390, 1234,  316,  394, 1269,    0,  264,
  510,  410,    0, 1275,  372,    0, 1239,  513,  393, 1508,
 1509, 1251, 1400, 1401, 1402,    0,  329, 1516, 1517,   40,
 1519, 1520, 1262,  462,  453,  454,  435, 1267, 1527, 1528,
 1529, 1530,   41, 1532, 1533, 1534, 1535, 1536, 1537,   41,
  453,  454,   44, 1681,  357, 1436,   41, 1438,  433,   44,
   59,    0,    0, 1807,  265,  390,  450,   59,  376,  291,
  298,   59,    0,   44,   59,  264,  277, 1390,  390,  260,
  302,  282,  393,    0,   59,   42,   43,  309,   45,  378,
   47,  313, 1379,  477,  376, 1382, 1383,  450,  299, 1967,
 1330, 1382,  422, 1388, 1485,    0,  334,  506,   93,  429,
  318,  333, 1391,   41, 1330,  378,   44,  315,  421,  300,
   59,   59,  433,  331,  477,   42,   43,   44,   45,   46,
   47,   59,  303, 1387,  265,  390,  506,    0,  336,    0,
    0,  333,   59,   60,   61,   62,  354,  446, 1378, 1379,
    0,  260, 1382, 1383,    0,  315, 1386, 1387, 1388, 1389,
 1390, 1391,    0,  410,   59,  325,    0,  327,  299,  315,
   46,  399,    0,  395,   91,    0,  336, 1407, 1408,    0,
   41,  409,   58,  323, 1414,   61,    0,  262,    0,  277,
  336,  300, 1570,  315,  282,   41,   59,  405,   59,   59,
 1604,  390,  333,  325,  426,  327,  434,  347,  430,   59,
   44,  351,    0,   59,  336,    0,  356,    0,  276,  390,
  380,   59,    0,  434,    0,   59,  284, 1499,  273,  389,
  277,   59, 1504,    0,   59,  282,    0,  260,   59,  410,
  315,  315, 1465,  318,    0,   59,  409,   59,  446, 1653,
  325,  325,  327,  327,    0,  333,  331,  428,  380,    0,
  510,  336,  336,   41,  339,  339,   44,  389,    0,  384,
  385,   59,  432,  436,   59,  298,   59,   41,  418,  354,
   44,   59,  422,   59,  444,   41,  446,  310,   44,  336,
  368,  462,   59,  368,  516,   59,    0,  452, 1570, 1583,
  446,  376,  380,   59,  379,  380,  380,  260, 1538,   41,
  432,  334,   44,   59,  389,  389,  315, 1604,   59,  258,
  277,  457, 1538,  459,  446,  282,  325,   59,  327,   93,
  405,  270,   41,   42,   43,    0,   45,  336,   47,   40,
  428,    0,  333,   41,  352,  262,   44,  300,  276,  277,
  510,  336,  427, 1583,  271,   59,  284,  432,  432,  517,
  277, 1591, 1592, 1593,  303,  282,  305,  416,  285,  444,
  444,  446,  446,  453, 1604,  260,  399,  368,  386,  336,
  388,  380,  522,  419,  264,  421,  409, 1791,  510,  380,
  389, 1980,  313, 1982,   59,  535,  536,  537,  315,  309,
   59,  318,  410,  315,  321, 1809, 1636, 1637,  325,  426,
  327,  434,  329, 1682,  331,  300,  332,  402,  493,  336,
  337,   41,  339, 1653,   44,  453,  454,  435, 1806,  258,
 1660, 1661, 1417,  432, 1419,  510,  510,  354,  355,  514,
  357,  270,  258,   41,  372,  261,   44,  446,  376, 1636,
 1637,  368, 1682,  370,  315,  372,  373,  374,   41,  376,
  333,   44,  379,  380,   41,  393,  327,   44,  608,  315,
   41,  399,  389,   44,  303,  336,  305,  444,  403, 1755,
    0,  327,    0,   41,  426,  395,   44,  303,  405,    0,
  336,   41,   42,   43,  395,   45,  336,   47,  276,  277,
   41,  485,  486,   44,  421,  433,  284, 1636, 1637,   41,
  427,  510,   44,   40, 1838,  432,  426,  317,  315,  380,
  430,   41, 1752,   41,   44, 1755,   44,  444,  389,  446,
   41,  441,   41,   44,  380,   44, 1752,   42,   43,   59,
   45,   59,   47,  389,  276,  277,  315, 1951,   59, 1953,
   61,  498,  284,   41, 1958,   41,   44, 1961,   44, 1963,
 1790,  376,   46, 1839, 1833,  493,    0,   41,  277,  376,
   44,  432,  336,  282,   58,   59,  493,   61, 1798, 1809,
  428, 1985, 1812,   46,   41,  446,  432,   44, 1860,  426,
  356,  534, 1864,  510,  372,   58,   59,  514,   61, 1829,
  446,   41,  533, 1833,   44, 2009, 1930,   41, 2012, 1839,
   44,   42,   43,  531,   45,  393,   47,  377,  315, 2023,
 1904,  399, 2026,  410,  804,   59,  806,   61,  319, 2033,
  810,  811,  812,  375,  337,  497,   42,   43,  402,   45,
  372,   47,   41,  297,   41,   44,  786,   44,   41,  510,
   41,   44,  409,   44,  834,  433, 1886,  506,  449,  450,
  451,  393,  505,   41,  510,  805,   44,  399,  306,  809,
   41, 1958,  505,   44, 1904, 1905,   44,  461,   41,  819,
 1967,   44,    0, 1906,  824,  825,  477,  478,  828,  829,
  830,  831,  832,  833,  446,   61,  366,  283, 1985,   40,
  264,  433,   40,  843,  389,  845,  846,  847,  848,  849,
  850,   40,   40,  853,   40,  493,  453,   42,   43,   40,
   45,   40,   47,   41,   40, 2012,   44,  277, 1958,   40,
 1950,   40,  282,   40, 1964,  453, 2023, 1967,  453, 2026,
   40,   59,   40,   61,   40,   40, 2033,  258,   40,  889,
 1980,  351, 1982,   40,   40, 1985,  276,  277,  276,  277,
   40,  493,   40,   40,  284,  276,  277,  317,   40,    0,
  281,  911,  277,  284,   41,   42,   43,  282,   45,   40,
   47,   40, 2012, 2013,  924,  925,  297,   91,  402,   44,
   46,   61,  303, 2023,   40, 2025, 2026,   42,   43,  264,
   45,  395,   47, 2033,  317,   44,  532,  440,   44,  315,
  315,   42,   43,   44,   45,   46,   47,   41,   42,   43,
   46,   45,   40,   47,  258,  420,   61,  264,   59,   60,
   61,   62,   41,   42,   43,  337,   45,  344,   47,   46,
   44,  275,  276,  277,  344,  344,  277,  281,  276,  365,
  284,  282,  372,  264,  372,  390,  428,  390,  450,  275,
   91,  372,  344,  297,  439,  439,   41,   42,   43,  303,
   45,  277,   47,  393,  318,  393,  282,  392,   40,  399,
   40,  399,  393,  345,   40,   91,  317,  331,  399,   40,
  315,  264,   40,  376,   44, 1035, 1036, 1037,  375,  410,
 1040, 1041, 1042,  382, 1044, 1045, 1046, 1047, 1048, 1049,
  354,  317,  403,  433,   40,  433,   40,  428, 1058, 1059,
  380, 1061,  433, 1063,  368,  315, 1066, 1067, 1068, 1069,
 1070, 1071,   42,   43,   44,   45,   41,   47,  372,  443,
  258,   41,   42,   43, 1084,   45, 1086,   47,  275,   63,
  296,  462,  277,  428,  314,  273,  428,  282,  456,  393,
    0,  405, 1102, 1103, 1104,  399,   41,   42,   43,   40,
   45,   44,   47,  493,  408,  444,  410,   44,  337,  297,
  264,  440,    0,  308,  494,  303,   40,   40,  306,   41,
   42,   43,  273,   45,  428,   47,  281,  340,  340,  433,
  297,   41,  379,  379,   44, 1145,  410,   41,   42,   43,
  277,   45,  379,   47,  408,  282,   40,  352,    0,   59,
   40,  410,  362,   41,   42,   43,   44,   45,  462,   47,
  348,  262,  277,   40,   40,   44,   41,  282,  317,   41,
  271,   59,   60,   61,   62,  277,  277,   44,   46,  270,
  438,  282,  317,  277,  285,  378,  361,  317,  282,   41,
   40,   44,   44,  308,  266,  264,  493,  325,  277,  414,
  514,   41,   58,  282, 1040,   93, 1042,   59, 1044, 1045,
   41, 1047, 1048, 1049,  315,  403,   41,  318,   41,  446,
  321,  264,  410,  387,  325,  306,  327,   41,  329,   41,
  331,  306,  277,   40,   40,  336,  337,  282,  339,  317,
  428,   42,   43,   40,   45,   40,   47,   40,   40,   40,
   40,   40,   40,  354,  355,   40,  357,   41,   42,   43,
   40,   45,   40,   47,   40,   40,   40,  368,  427,  370,
  458,  372,  373,  374,  462,  376,  262,  305,  379,  380,
   44,   44, 1292,   41,   42,   43,  446,   45,  389,   47,
   41,   41,  264,  339,  381, 1305, 1306,  277, 1308, 1309,
  339,  384,  282,  327,  405,  273, 1316,  277,   42,   43,
  284,   45,  282,   47,  399,  379,  379,  379,  379,  379,
  421,  379,   41,   40,  276,   41,  427,  450, 1338,  376,
   40,  432,  277,   41,   41,   41, 1346,  282, 1348, 1349,
  317,   58, 1352,  444, 1354,  446,   41,   44, 1358, 1359,
 1360,   42,   43,   44,   45,  277,   47, 1367,   41, 1369,
  282,  305,  427,   41,   41,   59,  276,  277,   40,  290,
  258,  336,  336,  277,  262,  305,  264,  265,  282,   59,
  428,  339,   58,  271,  324,  529,  277,  333,  276,  277,
  434,  298,  493,  434,  282,  334,  284,  285,  334,   41,
   42,   43, 1412,   45,   41,   47,  298,   41,  279,  510,
  348,  299,  378,  514,  365,  303,  304,  305,  365,   41,
  308,   41,   41,   41,  276,  277,   41,  315,   41,  317,
  318,   41,  284,  321,   41,   41, 1446,  325,   40,  327,
   41,  329,   41,  331,   41,  297,   41,   41,  336,  337,
   41,  339,   41,   41,   42,   43,   41,   45,  315,   47,
  443,   40,  372,  264,  378,  458,  354,  355,   44,  357,
   41,   41,   42,   43,  340,   45,  277,   47,  333,   40,
  368,  282,  370,  393,  372,  373,  374,  336,  376,  399,
  500,  379,  380,  277,  336,   40,   40, 1507,  282,   42,
   43,  389,   45, 1513,   47,  393,  376,  510, 1518,  510,
   44,  399,   41,   40,  402, 1525,  427,  405,  376,  277,
  372,   41,  410,  433,  282,  376,   41,  298,  301,  434,
  264,   41,  304,  421,  290,  301,  455,    0,  376,  427,
  428,  393,  376,  277,  432,  433,  333,  399,  282, 1559,
  409,   40,  264, 1563,  450,  443,  444,  317,  446, 1569,
  264,   40,  403,  443,  452,  270,   44,  455,   40,  457,
  458,  459,  460,   40,  462,   41,  450,  270, 1588,  264,
  427,  433,  470,  471,   41,  339,  277,  339,  450,   41,
   41,  282,   41,  481,  482,   59,  484,  485,  486,   59,
   59,   59,  305,  491,  492,  493,  494,  495,   41,  497,
   41,   59,  500,  501,  502,  503,  504,  505,  506,   59,
    0,   59,  510,  511,  512,  513,  514,  515,  516,  517,
   59,  519,   41,   42,   43,  277,   45,   59,   47,  301,
  282,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,  486, 1662,   41,   42,   43,    0,   45,  371,   47,
   40,   41,   42,   43,   44,   45,   46,   47,   41,   42,
   43,  371,   45,  318,   47,   44,   41,   41,   58,   59,
   60,   61,   62,   41,   41,    0,  331,    0,  291,  277,
    0,    0,  173, 1398,  282,  603,  173,   41,  174,  302,
   44,  879,  605,  335,  334, 1023,  309,  277, 1272,  354,
 1270,   91,  282,   93,  770,   59, 1028,  870,   96,  322,
   81, 1731,  984,  368, 1267, 1261,  997, 1737, 1738, 1698,
 1681,  376, 1699,  464,  277,  452,  715, 1251,  455,  282,
  457,  458,  459,  460, 1192,  462, 1262,  388,  948,  445,
 1829, 1761, 1679,  470,  471, 1765,  445, 1970,  692, 1769,
  405, 1998, 1974, 1973,  481,  482,    0,  484,  485,  486,
  939, 1134, 1782, 1783,  491,  492,  379,  494,  495, 1959,
  497, 1591, 1795,  500,  501,  502,  503,  504,  505,  506,
 1431,  859,  395,  450,  511,  512,  513, 1807,  515,  516,
  517,  694,  519,  428,  435, 1474, 1000,   41,  411,  992,
   44,    0,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,   13,  426,  752,   59,  175,  430,  901,  371,
  433,  179,  618,   41,   42,   43,  889,   45,  441,   47,
   41,   42,   43, 1151,   45,   92,   47, 1924,  493, 1859,
 1752, 1538,   41,  623,  802,   44, 1418,  460,   41,   42,
   43,  877,   45, 1146,   47,  924,  514, 1307,  277,  514,
   59, 1195,  637,  282,  464,  465,  466,  467,  468,  469,
  470,  471,  262, 1372,  264,  265,   -1, 1354,   -1,  277,
   -1,  271,   -1,   -1,  282,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,  277,  285,   41,   42,   43,  282,
   45,    0,   47,  516, 1924,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,  276,  277,  537,  315,   -1,  317,  318,   -1,
  284,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
 1960,  331,   41,  297,   -1,   44,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   59,   -1,   61,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   91,   -1,   93,   -1,   -1,   -1,   41,   42,   43,
   -1,   45,  402,   47,   -1,  405,   -1,   -1,  372,   -1,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,  421,  276,  277,   -1,   -1,   -1,  427,  428,  393,
  284,   -1,  432,   -1,   -1,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,  277,
   -1,   -1,  452,   -1,  282,  455,  277,  457,  458,  459,
  460,  282,  462,   -1,   -1,   -1,   -1,  276,  277,  433,
  470,  471,  281,   -1,  277,  284,   -1,   -1,   -1,  282,
   -1,  481,  482,   -1,  484,  485,  486,   -1,  297,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,  372,  519,
   -1,   -1,  277,   -1,   -1,   -1,   -1,  282,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,  393,
   -1,   -1,   41,   42,   43,  399,   45,   -1,   47,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,  372,  264,  265,  275,  276,  277,   -1,
   -1,  271,  281,   -1,   -1,  284,   -1,  277,   -1,  433,
   -1,   -1,  282,   -1,  393,  285,   -1,   -1,  297,   -1,
  399,    0,   -1,   -1,  303,   -1,   -1,   -1,   -1,  299,
    0,  301,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   41,   42,   43,   -1,   45,  315,   47,  317,  318,   -1,
   -1,  321,   -1,   -1,  433,  325,   -1,  327,   -1,  329,
   -1,  331,   41,  277,   -1,   44,  336,  337,  282,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,  277,   -1,
   59,   -1,   -1,  282,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,  372,   -1,   41,   42,   43,  368,   45,
  370,   47,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,  393,   -1,   -1,   -1,   -1,  389,
  399,   91,   -1,   93,   -1,   42,   43,   44,   45,   -1,
   47,  410,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,  428,
   -1,  421,   -1,   -1,  433,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,  462,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   42,   43,   -1,   45,   -1,   47,   -1,
  470,  471,   42,   43,   44,   45,   -1,   47,  277,   -1,
   -1,  481,  482,  282,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,  276,  277,   -1,
   -1,  271,  281,   -1,   -1,  284,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,  277,   -1,   -1,  304,  305,  282,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
  277,  331,   -1,  262,   -1,  282,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,  277,   -1,
   -1,   -1,   -1,  282,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,  372,  338,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,  262,  393,   -1,   -1,   -1,   -1,  389,
  399,   91,   -1,   93,   -1,   -1,   -1,  371,  277,   -1,
   -1,   -1,  402,  282,   -1,  405,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,  397,  433,   -1,  400,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  416,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,  442,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,  497,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,  302,
   -1,   -1,   -1,  517,   -1,   -1,  309,   -1,   -1,   -1,
  313,  314,   -1,   -1,   -1,   -1,  530,   -1,   -1,  322,
   -1,   -1,  262,   -1,  264,  265,   -1, 1508, 1509,   -1,
  333,  271,   -1,   -1,   -1, 1516, 1517,  277, 1519, 1520,
   -1,   -1,  282,   -1,   -1,  285, 1527, 1528, 1529, 1530,
   -1, 1532, 1533, 1534, 1535, 1536, 1537,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,  395,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,  411,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,  426,   -1,   -1,   -1,  430,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,  441,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   91,   -1,   93,   -1,   -1,   -1,  460,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,  516,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   91,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   91,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   91,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
    0,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,  329,
   -1,  331,   -1,   -1,   -1,   -1,  336,  337,   -1,  339,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  354,  355,   -1,  357,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,   -1,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,
   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,  272,   -1,  325,  275,  327,   -1,  329,
   41,  331,   43,   44,   45,   -1,  336,  337,   -1,  339,
   -1,  290,   -1,  292,   -1,   -1,  295,   -1,   59,   60,
   61,   62,   -1,   -1,  354,  355,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,
  380,   -1,   93,   -1,   -1,   -1,  335,   -1,   -1,  389,
   -1,   -1,  341,  342,  343,   -1,  345,  346,  347,   -1,
  349,   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
  369,  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,
   -1,   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,  398,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,  415,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,  437,   -1,
   -1,  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
  510,  511,  512,  513,  514,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,  472,  473,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
  489,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,
   -1,   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,  272,   -1,  325,  275,  327,   -1,  329,   41,
  331,   43,   44,   45,   -1,  336,  337,   -1,  339,   -1,
   -1,   -1,  292,   -1,   -1,  295,   -1,   59,   60,   61,
   62,   -1,   -1,  354,  355,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,
   -1,   93,   -1,   -1,   -1,  335,   -1,   -1,  389,   -1,
   -1,  341,  342,  343,   -1,  345,  346,  347,   -1,  349,
   -1,  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,
  421,   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,
   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  443,  444,   -1,  446,   -1,   -1,  398,   -1,
   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,
   -1,  462,   -1,   -1,   -1,  415,   -1,   -1,   -1,  470,
  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,   -1,  484,  485,  486,   -1,  437,   -1,   -1,
  491,  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,
  511,  512,  513,  514,  515,  516,  517,   -1,  519,   -1,
   -1,   -1,  472,  473,   -1,   -1,   -1,   -1,  529,  530,
  531,  532,  533,  534,  535,  536,  537,  538,   -1,  489,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,  272,   -1,  325,  275,  327,   -1,  329,   41,  331,
   43,   44,   45,   -1,  336,  337,   -1,  339,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,   59,   60,   61,   62,
   -1,   -1,  354,  355,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,
   93,   -1,   -1,   -1,  335,   -1,   -1,  389,   -1,   -1,
  341,  342,  343,   -1,  345,  346,  347,   -1,  349,   -1,
  402,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,  421,
   -1,   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  443,  444,   -1,  446,   -1,   -1,  398,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,  415,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,  437,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,  472,  473,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,   -1,  489,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
   -1,  304,  305,   -1,   -1,  308,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,   -1,  325,   -1,  327,   -1,  329,   41,  331,   43,
   44,   45,   -1,  336,  337,   -1,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,  354,  355,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,  376,   -1,   -1,  379,  380,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   42,   43,   -1,   45,  402,
   47,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,  421,   -1,
   -1,   -1,   -1,   -1,  427,  428,   -1,   -1,   -1,  432,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  443,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,  452,
   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,
  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,  512,
  513,  514,  515,  516,  517,   -1,  519,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  304,  305,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,  327,   -1,  329,   -1,  331,   -1,   -1,
   -1,   -1,  336,  337,  271,  339,   42,   43,   -1,   45,
  277,   47,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,
  354,  355,   -1,  357,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,  376,   -1,   -1,  379,  380,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  321,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,   -1,   -1,   -1,   -1,  402,   -1,
  337,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  355,   -1,
  357,   -1,   -1,  427,  428,   -1,   -1,   -1,  432,   -1,
   -1,   -1,   -1,  370,   -1,  372,  373,  374,   -1,  443,
  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,  452,   -1,
   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,  481,  482,   -1,
  484,  485,  486,   -1,  421,   -1,   -1,  491,  492,  493,
  494,  495,  264,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,  510,  511,  512,  513,
  514,  515,  516,  517,   -1,  519,   40,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,
  534,  535,  536,  537,  538,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,   -1,   -1,
   -1,   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,  331,
   -1,   -1,   -1,   -1,  336,  271,   -1,  339,   -1,   -1,
   -1,  277,   -1,   -1,   -1,   -1,  282,   -1,   -1,  285,
   -1,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  376,   -1,   -1,   -1,  380,   -1,
   -1,   -1,   -1,   -1,   -1,  321,   -1,  389,   -1,   -1,
   -1,   -1,   -1,  329,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  337,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  432,   -1,   -1,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  481,
  482,   -1,  484,  485,  486,  421,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,
   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  376,   -1,   -1,   -1,  380,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,  452,   -1,
   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,
  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,  493,
  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,  510,  511,  512,  513,
  514,  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,  529,  530,  531,  532,  533,
  534,  535,  536,  537,  538,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,  315,   -1,   -1,  318,   -1,   -1,   -1,
   -1,   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,  331,
   -1,   -1,   41,   -1,  336,   44,   -1,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,  354,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   59,   60,   61,   62,  376,   -1,   -1,   -1,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  432,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  444,   -1,  446,   -1,   -1,   -1,   -1,   59,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,  493,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,  510,  511,
  512,  513,  514,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   59,   -1,   -1,  277,   -1,
   -1,   -1,   -1,  282,   -1,   41,  285,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,
   -1,   -1,   -1,   59,   -1,   -1,  325,   -1,  327,   -1,
   -1,   -1,  331,   -1,   -1,   -1,  315,  336,   -1,  318,
  339,   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,
  329,   -1,  331,   -1,   -1,  354,   -1,  336,  337,   -1,
  339,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,   -1,   -1,   -1,   -1,  354,  355,  376,  357,   -1,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  389,  370,   -1,  372,  373,  374,   -1,  376,   -1,   -1,
  379,  380,   -1,   -1,   -1,    0,  405,   -1,   -1,   -1,
  389,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,
   -1,   -1,   -1,   -1,   -1,  325,  405,  327,  427,   -1,
   -1,  331,   -1,  432,   -1,   -1,  336,   -1,   -1,  339,
   -1,   -1,  421,   -1,   -1,  444,   41,  446,  427,   44,
   -1,   -1,   -1,  432,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,  444,   -1,  446,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  376,    0,   -1,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   -1,  493,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,   -1,
   -1,  510,   -1,   -1,  493,  514,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,  262,  427,   -1,   -1,
   -1,  510,  432,   -1,   -1,  514,   59,    0,   -1,   -1,
   -1,   -1,   -1,   -1,  444,   -1,  446,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,
   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  339,   -1,   -1,   41,  315,
   -1,   44,  318,   -1,   -1,   -1,   -1,   -1,   -1,  325,
  354,  327,   -1,  493,   -1,  331,   59,   -1,   -1,   -1,
  336,   -1,   -1,  339,  368,   -1,   -1,   -1,   -1,   -1,
  510,   -1,  376,   -1,  514,  379,  380,   -1,  354,   -1,
   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,   -1,    0,   -1,   -1,   -1,   -1,
  376,  405,   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  427,   -1,   -1,   -1,  262,  432,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  444,    0,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  427,   -1,   -1,   59,   -1,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,
  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   41,  318,   -1,   44,   -1,   -1,   -1,  493,
  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,  262,
   59,  336,   -1,   -1,  339,   -1,  510,   -1,   -1,   -1,
  514,   -1,   -1,   -1,   -1,   -1,   -1,  493,   -1,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  510,   -1,    0,   -1,  514,   -1,
   -1,  376,   -1,   -1,  379,  380,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  389,  318,   -1,   -1,   -1,  262,
   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,
  405,   -1,   -1,  336,   -1,   -1,  339,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  354,  427,   -1,   -1,   59,    0,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,  444,
   -1,  446,  315,  376,   -1,  318,  379,  380,   -1,   -1,
   -1,   -1,  325,   -1,  327,   -1,  389,   -1,  331,   -1,
   -1,   -1,   -1,  336,   -1,   -1,  339,   41,   -1,   -1,
   44,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  354,   -1,   -1,   -1,   59,    0,  262,  493,   -1,
   -1,   -1,   -1,   -1,  427,  368,   -1,   -1,   -1,  432,
   -1,   -1,   -1,  376,   -1,  510,  379,  380,   -1,  514,
   -1,  444,   -1,  446,   -1,   -1,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,  405,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,  318,   -1,   59,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,  427,   -1,  331,   -1,   -1,  432,
  493,  336,   -1,   -1,  339,   -1,   -1,    0,   -1,   -1,
   -1,  444,   -1,  446,   -1,   -1,   -1,  510,   -1,  354,
   -1,  514,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,
   -1,   -1,   -1,  368,   -1,   -1,  325,   -1,  327,   -1,
   -1,  376,  331,   -1,  379,  380,   -1,  336,   41,   -1,
  339,   44,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,
  493,   -1,   -1,   -1,   -1,  354,   59,   -1,  262,   -1,
  405,   -1,   -1,   -1,   -1,   -1,   -1,  510,   -1,  368,
   -1,  514,   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,
  379,  380,  427,   -1,   -1,   -1,   -1,  432,   -1,   -1,
  389,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,  444,
   -1,  446,   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,   -1,   -1,  262,   -1,
   -1,  325,   -1,  327,   -1,   -1,   -1,  331,  427,    0,
   -1,   -1,  336,  432,   -1,  339,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,  444,   -1,  446,  493,   -1,
  354,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,  510,   -1,   -1,   -1,  514,
   41,  315,  376,   44,  318,  379,  380,   -1,  262,   -1,
   -1,  325,   -1,  327,   -1,  389,   -1,  331,   59,   -1,
   -1,   -1,  336,   -1,  493,  339,   -1,   -1,   -1,   -1,
   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  354,  510,   -1,   -1,   -1,  514,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  427,  368,   -1,   -1,   -1,  432,   -1,
   -1,  315,  376,  275,  318,  379,  380,   -1,   -1,   -1,
  444,  325,  446,  327,   -1,  389,   -1,  331,   -1,  291,
   -1,   -1,  336,   -1,   -1,  339,   -1,   -1,   -1,  262,
  302,  405,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,
  354,  313,  314,    0,   -1,   -1,   -1,   -1,   -1,   -1,
  322,   -1,   -1,  427,  368,   -1,   -1,   -1,  432,  493,
   -1,  333,  376,    0,   -1,  379,  380,   -1,   -1,   -1,
  444,   -1,  446,   -1,   -1,  389,  510,   -1,   -1,   -1,
  514,   -1,  315,   -1,   41,  318,   -1,   44,   -1,   -1,
   -1,  405,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,
   -1,   -1,   59,  336,   41,   -1,  339,   44,   -1,   -1,
   -1,   -1,   -1,  427,   -1,  387,   -1,   -1,  432,  493,
   -1,  354,   59,  395,   -1,   -1,   -1,   -1,  262,   -1,
  444,   -1,  446,   -1,   -1,  368,  510,   -1,   -1,   -1,
  514,   -1,    0,  376,   -1,   -1,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,  426,   -1,  389,   -1,  430,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  441,
   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,  493,
   -1,  315,   -1,   41,  318,   -1,   44,   -1,  460,  461,
   -1,  325,   -1,  327,  427,   -1,  510,  331,   -1,  432,
  514,   59,  336,   -1,   -1,  339,   -1,   -1,   -1,   -1,
   -1,  444,   -1,  446,  315,   -1,   -1,  318,   -1,   -1,
  354,   -1,   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,
  331,   -1,   -1,   -1,  368,  336,   -1,   -1,  339,   -1,
   -1,   -1,  376,   -1,  516,  379,  380,  519,   -1,   -1,
   -1,   -1,   -1,  354,   -1,  389,   -1,   -1,   -1,   -1,
  493,   -1,   -1,   -1,   -1,    0,   -1,  368,   -1,   -1,
   -1,  405,   -1,   -1,   -1,  376,   -1,  510,  379,  380,
   -1,  514,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,
   -1,   -1,   -1,  427,   -1,   -1,   -1,   -1,  432,   -1,
   -1,   -1,   -1,   -1,  405,  262,   41,   -1,   -1,   44,
  444,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,  262,  427,   -1,   -1,   -1,
   -1,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,  444,   -1,  446,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  493,
   -1,  318,    0,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,   -1,   -1,   -1,  331,   -1,  510,   -1,  315,  336,
  514,  318,  339,   41,   -1,   -1,   44,   -1,  325,   -1,
  327,   -1,  493,   -1,  331,   -1,   -1,  354,   -1,  336,
   -1,   59,  339,   41,  262,   -1,   44,   -1,   -1,  510,
   -1,  368,   -1,  514,   -1,   -1,   -1,  354,   -1,  376,
   -1,   59,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  389,   -1,   -1,   -1,   -1,   -1,   -1,  376,
   -1,    0,  379,  380,   -1,   -1,   -1,   -1,  405,   -1,
   -1,   -1,  389,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,   -1,   -1,   -1,   -1,   -1,  325,  405,  327,
  427,   -1,   -1,  331,   -1,  432,   -1,   -1,  336,   -1,
   -1,  339,   41,   -1,   -1,   44,   -1,  444,   -1,  446,
  427,   -1,   -1,   -1,   -1,  432,  354,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,  446,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,    0,  262,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,  493,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,   -1,   -1,
   -1,   -1,   -1,  510,   -1,   -1,  493,  514,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,  427,
   44,   -1,   -1,  510,  432,   -1,   -1,  514,   -1,   -1,
  315,   -1,   -1,  318,   -1,   59,  444,   -1,  446,   -1,
  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,
   41,  336,   -1,   44,  339,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,  354,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  493,   -1,   -1,   -1,   -1,
   -1,  376,   -1,   -1,  379,  380,   41,   -1,   -1,   44,
   -1,   -1,  510,   -1,  389,   -1,  514,  315,   -1,   -1,
  318,   -1,   -1,   -1,   59,   -1,   -1,  325,   -1,  327,
  405,   -1,   -1,  331,   -1,   -1,   -1,  315,  336,   -1,
  318,  339,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,
   -1,   -1,  427,  331,   -1,   -1,  354,  432,  336,   -1,
   -1,  339,   -1,  262,   -1,   -1,   -1,   -1,   -1,  444,
  368,  446,   -1,   -1,   -1,   -1,  354,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,  389,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,
   -1,  379,  380,   -1,   -1,   -1,   -1,  405,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,  315,   -1,  493,  318,
   -1,   -1,   -1,   -1,   -1,   -1,  325,  405,  327,  427,
   -1,   -1,  331,   -1,  432,  510,   -1,  336,   -1,  514,
  339,   -1,   40,   -1,   -1,   43,  444,   45,  446,  427,
   -1,   -1,   -1,   -1,  432,  354,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,  444,   -1,  446,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  389,   -1,   -1,   -1,   -1,  493,   -1,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,  405,   -1,   -1,   -1,
   -1,  325,  510,  327,   -1,  493,  514,  331,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  339,   -1,   -1,  427,   -1,
   -1,   -1,  510,  432,  315,   -1,  514,  318,   -1,   -1,
  354,   -1,   -1,   -1,  325,  444,  327,  446,   -1,   -1,
  331,   -1,   -1,   -1,  368,  336,   -1,   -1,  339,   -1,
   -1,   -1,  376,   -1,   -1,   -1,  380,   -1,   -1,   -1,
   -1,   -1,   -1,  354,   -1,  389,   -1,   -1,   -1,   -1,
  315,   -1,   -1,  318,   -1,   -1,   -1,  368,   -1,   -1,
  325,  405,  327,   -1,  493,  376,  331,   -1,   -1,  380,
   -1,  336,   -1,   -1,  339,   -1,   -1,   -1,  389,   -1,
   -1,  510,   -1,   -1,   -1,  514,   -1,   -1,  432,  354,
   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,   -1,   -1,
  444,   -1,  446,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  376,   -1,   -1,   -1,  380,   -1,   -1,   -1,   -1,
   -1,  432,   -1,   -1,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  444,   -1,  446,   -1,   -1,   -1,  267,
  405,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,  493,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,  292,  293,  510,  432,   -1,   -1,
  514,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,
   -1,  446,  493,  311,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,  510,
   -1,   -1,   58,  514,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,   -1,   -1,  493,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,  510,   -1,   -1,   -1,  514,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  311,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  409,   -1,   -1,   -1,  413,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   45,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,  320,   -1,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,   -1,  350,  351,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,
  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,  485,  486,  487,  488,   -1,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,  292,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,  320,  528,  529,  530,  531,  532,  533,
  534,  535,  536,  537,  538,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,    0,  286,   -1,   -1,   -1,   -1,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,  320,   -1,
   43,  323,   45,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   59,   -1,   61,   -1,  348,   -1,  350,  351,
   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  360,   -1,
   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,   -1,  453,  454,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  473,  474,  475,  476,
  477,  478,  479,  480,   -1,   -1,   -1,  419,   -1,   -1,
  487,  488,   -1,  425,   -1,   -1,   -1,   -1,   -1,  496,
   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,
  452,  453,  454,  455,   -1,  457,  458,  459,  460,   -1,
  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,   -1,  484,  485,  486,  487,  488,   -1,  490,  491,
  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,  518,  519,   -1,  521,
  522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,  260,   -1,   -1,
  263,  258,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  274,   -1,   -1,   -1,   -1,  273,   -1,  275,  276,
  277,   -1,    0,  286,  281,   -1,   -1,  284,   -1,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  320,   -1,   43,
  323,   45,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,   59,   -1,   61,   -1,  348,   -1,  350,  351,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,  372,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  393,   -1,   -1,   -1,
   -1,   -1,  399,   -1,   -1,   -1,  403,   -1,   -1,   -1,
   -1,   -1,   -1,  410,  417,   -1,  419,   -1,   -1,   -1,
   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  428,  435,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
  453,  454,  455,   -1,  457,  458,  459,  460,   -1,  462,
  463,  458,   -1,   -1,   -1,  462,   -1,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
   -1,  484,  485,  486,  487,  488,   -1,  490,  491,  492,
   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,
  523,   -1,  525,  526,   -1,  528,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  260,   -1,   -1,  263,
  258,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,  273,   -1,  275,  276,  277,
   -1,    0,  286,  281,   -1,   -1,  284,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,   -1,
   -1,   -1,   -1,   -1,   -1,   40,  320,   -1,   43,  323,
   45,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   59,   -1,   61,   -1,  348,   -1,  350,  351,   -1,   -1,
  348,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,
  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  393,   -1,   -1,   -1,   -1,
   -1,  399,   -1,   -1,   -1,  403,   -1,   -1,   -1,   -1,
   -1,   -1,  410,  417,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  428,  435,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,
  454,  455,   -1,  457,  458,  459,  460,   -1,  462,  463,
  458,   -1,   -1,   -1,  462,   -1,  470,  471,  472,  473,
  474,  475,  476,  477,  478,  479,  480,  481,  482,   -1,
  484,  485,  486,  487,  488,   -1,  490,  491,  492,   -1,
  494,  495,  496,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,  523,
   -1,  525,  526,   -1,  528,  529,  530,  531,  532,  533,
  534,  535,  536,  537,  538,  260,   -1,   -1,  263,  258,
   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,
   -1,   -1,   -1,   -1,  273,   -1,  275,  276,  277,   -1,
    0,  286,  281,   -1,   -1,  284,   -1,  292,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  320,   -1,   43,  323,   45,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   59,
   -1,   61,   -1,  348,   -1,  350,  351,   -1,   -1,  348,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  393,   -1,   -1,   -1,   -1,   -1,
  399,   -1,   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,
   -1,  410,  417,   -1,  419,   -1,   -1,   -1,   -1,   -1,
  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,
  435,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,
  455,   -1,  457,  458,  459,  460,   -1,  462,  463,  458,
   -1,   -1,   -1,  462,   -1,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,   -1,  484,
  485,  486,  487,  488,   -1,  490,  491,  492,   -1,  494,
  495,  496,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,
  525,  526,   -1,  528,  529,  530,  531,  532,  533,  534,
  535,  536,  537,  538,  260,   -1,   -1,  263,  258,   -1,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,  273,   -1,   -1,  276,  277,   -1,    0,
  286,  281,   -1,   -1,  284,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,
   -1,   -1,   -1,  303,   -1,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  320,   -1,   43,  323,   45,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   59,   -1,
   61,   -1,  348,   -1,  350,  351,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  393,   -1,   -1,   -1,   -1,   -1,  399,
   -1,   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,
  410,  417,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,  435,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,  458,   -1,
   -1,   -1,  462,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  260,   -1,   -1,  263,  258,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  276,  277,   -1,    0,  286,
  281,   -1,   -1,  284,   -1,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  320,   -1,   43,  323,   45,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   63,   -1,   59,   -1,   61,
   -1,  348,   -1,  350,  351,   -1,   -1,  348,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  393,   -1,   -1,   -1,   -1,   -1,  399,   -1,
   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,  410,
  417,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  428,  435,   -1,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,  453,  454,  455,   -1,
  457,  458,  459,  460,   -1,  462,  463,  458,   -1,   -1,
   -1,  462,   -1,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,   -1,  484,  485,  486,
  487,  488,   -1,  490,  491,  492,   -1,  494,  495,  496,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,
   -1,  528,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,  260,   -1,   -1,  263,  258,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,
   -1,  273,   -1,   -1,  276,  277,   -1,   -1,  286,  281,
   -1,   -1,  284,   -1,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,
   -1,  303,   -1,   -1,  306,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  320,   -1,   43,  323,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
  348,   -1,  350,  351,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  393,   -1,   -1,   -1,   -1,   -1,  399,   -1,   -1,
   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,  410,  417,
   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  428,  435,   -1,   -1,
   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  449,  450,  451,  452,  453,  454,  455,   -1,  457,
  458,  459,  460,   -1,  462,  463,  458,   -1,   -1,   -1,
  462,   -1,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,   -1,  484,  485,  486,  487,
  488,   -1,  490,  491,  492,   -1,  494,  495,  496,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,
  528,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,  320,   -1,   43,  323,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  348,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,
  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  453,  454,  455,   -1,  457,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,   -1,  484,  485,  486,  487,  488,
   -1,  490,  491,  492,   -1,  494,  495,  496,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
  260,   -1,   -1,  263,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  320,   42,   43,  323,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  348,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,  419,
   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
  450,  451,  452,  453,  454,  455,   -1,  457,  458,  459,
  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
  480,  481,  482,   -1,  484,  485,  486,  487,  488,   -1,
  490,  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,  260,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,  320,
   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,   -1,   -1,  275,   -1,  348,   -1,  350,
  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  360,
   -1,   -1,  292,  364,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,   -1,   -1,
   -1,  341,  342,  343,   -1,  345,  346,  347,  419,  349,
   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,  367,   -1,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,  453,  454,  455,   -1,  457,  458,  459,  460,
   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,  398,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,   -1,  484,  485,  415,  487,  488,   -1,  490,
  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,  437,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,
  521,  522,  523,   -1,  525,  526,   -1,  528,  529,  530,
  531,  532,  533,  534,  535,  536,  537,  538,  267,   -1,
   -1,   -1,  472,  473,   -1,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,  489,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  453,  454,  455,   -1,  457,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,   -1,  484,  485,  486,  487,  488,
   -1,  490,  491,  492,   -1,  494,  495,  496,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  443,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,  453,  454,  455,   -1,
  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,   -1,  484,  485,  486,
  487,  488,   -1,  490,  491,  492,   -1,  494,  495,  496,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,
   -1,  528,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,
   43,   -1,   45,   -1,   -1,  320,   -1,   -1,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,
  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,
  455,   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,   -1,  484,
  485,  486,  487,  488,   -1,  490,  491,  492,   -1,  494,
  495,  496,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,
  525,  526,   -1,  528,  529,  530,  531,  532,  533,  534,
  535,  536,  537,  538,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,  320,   -1,   -1,
  323,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,  351,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,
   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
  453,  454,  455,   -1,  457,  458,  459,  460,   -1,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
   -1,  484,  485,  486,  487,  488,   -1,  490,  491,  492,
   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,
  523,   -1,  525,  526,   -1,  528,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  267,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  320,
   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,
  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,
   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,  449,  450,
  451,  452,  453,  454,  455,   -1,  457,  458,  459,  460,
   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,   -1,  484,  485,  486,  487,  488,   -1,  490,
  491,  492,   -1,  494,  495,  496,  497,   -1,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,
  521,  522,  523,   -1,  525,  526,   -1,  528,  529,  530,
  531,  532,  533,  534,  535,  536,  537,  538,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,  317,   45,
   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  453,  454,  455,   -1,  457,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,   -1,  484,  485,  486,  487,  488,
   -1,  490,  491,  492,   -1,  494,  495,  496,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  320,   42,   43,  323,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  446,   -1,   -1,  449,  450,  451,  452,  453,  454,  455,
   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,  475,
  476,  477,  478,  479,  480,  481,  482,   -1,  484,  485,
  486,  487,  488,   -1,  490,  491,  492,   -1,  494,  495,
  496,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,
  526,   -1,  528,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  260,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  272,   -1,   -1,  275,   -1,   -1,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,  286,
   -1,  292,   -1,   -1,  295,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   58,  335,   -1,   -1,   -1,   63,   -1,
  341,  342,  343,   -1,  345,  346,  347,   -1,  349,   -1,
   -1,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,   -1,   -1,  367,  364,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,   -1,   -1,
   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  437,   -1,  435,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  449,  450,  451,  452,  453,  454,  455,   -1,
  457,  458,  459,  460,   -1,  462,  463,   -1,   -1,   -1,
   -1,  472,  473,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  479,  480,  481,  482,   -1,  484,  489,   -1,
  487,  488,   -1,  490,  491,  492,   -1,  494,  495,  496,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,  521,  522,  523,   -1,  525,  526,
   -1,  528,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,  320,   -1,   -1,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,  350,  351,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,
  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,  450,  451,  452,  453,  454,
  455,   -1,  457,  458,  459,  460,   -1,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  479,  480,  481,  482,   -1,  484,
  485,  486,  487,  488,   -1,  490,  491,  492,   -1,  494,
  495,  496,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,   -1,  521,  522,  523,   -1,
  525,  526,   -1,  528,  529,  530,  531,  532,  533,  534,
  535,  536,  537,  538,  267,   -1,   -1,   -1,   -1,   -1,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,  320,   -1,   -1,
  323,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,  351,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,
   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,  451,  452,
  453,  454,  455,   -1,  457,  458,  459,  460,   -1,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
   -1,  484,  485,  486,  487,  488,   -1,  490,  491,  492,
   -1,  494,  495,  496,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,  521,  522,
  523,   -1,  525,  526,   -1,  528,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  267,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,  320,
   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,  350,
  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,
   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,  450,
  451,  452,  453,  454,  455,   -1,  457,  458,  459,  460,
   -1,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,
  481,  482,   -1,  484,  485,  486,  487,  488,   -1,  490,
  491,  492,   -1,  494,  495,  496,  497,   40,   -1,  500,
  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,
  511,  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,
  521,  522,  523,   -1,  525,  526,   -1,  528,  529,  530,
  531,  532,  533,  534,  535,  536,  537,  538,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,
   -1,  320,   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,  350,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  435,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,  450,  451,  452,  453,  454,  455,   -1,  457,  458,
  459,  460,   -1,  462,  463,   -1,   -1,   -1,  281,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,   -1,  484,  485,  486,  487,  488,
   42,  490,  491,  492,   -1,  494,  495,  496,  497,  409,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,  521,  522,  523,   -1,  525,  526,   -1,  528,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,   -1,  494,  495,   44,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,
   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,
   -1,   -1,   -1,   -1,  293,   -1,   -1,  470,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,   -1,   45,   -1,  491,  492,
   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,
   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   58,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  452,   -1,   -1,  455,   -1,  457,  458,
  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,  317,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,  457,
  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,
   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,  450,   -1,  452,   -1,   -1,  455,   -1,  457,  458,
  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,  260,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
   -1,   -1,   -1,   -1,   -1,  452,  298,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,  310,   -1,
   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,  334,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,   -1,   -1,   -1,  260,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  298,   -1,  409,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,  399,   -1,   -1,  511,
  512,  513,  270,  515,  516,  517,  409,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,   -1,   -1,   -1,
  298,  434,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,
   -1,  309,  310,   -1,  312,   -1,   -1,  315,   -1,  452,
   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,
  328,   -1,   -1,   -1,   -1,   -1,  334,  470,  471,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,
   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,   -1,
   -1,  270,   -1,  391,   -1,   -1,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  309,  310,   -1,  312,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  443,   -1,  445,   -1,  328,
   -1,   -1,   -1,   -1,  452,  334,   -1,  455,   -1,  457,
  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,
   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,  507,
  508,  509,  391,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,
  409,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  443,  309,  310,   -1,  312,   -1,
   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,  457,  458,
  459,  460,   -1,  462,  328,   -1,   -1,   -1,   -1,   -1,
  334,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,  507,  508,
  509,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
  261,   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  424,   -1,   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,
  434,   -1,   -1,  294,   -1,  296,   -1,  298,   -1,   -1,
   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,  452,  310,
   -1,  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,
   -1,   -1,   -1,  324,   -1,   -1,  470,  471,   -1,   -1,
   -1,   -1,   -1,  334,   -1,   -1,   -1,  481,  482,   -1,
  484,  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,
  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,
  504,  505,  506,  507,  508,  509,   -1,  511,  512,  513,
   -1,  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,
  534,  535,  536,  537,  538,  272,  397,   -1,  275,   -1,
   -1,   -1,   -1,  404,  281,   -1,  407,   -1,  409,  410,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,
   -1,   -1,   -1,   -1,  341,  342,  343,   -1,  345,  346,
  347,   -1,  349,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  483,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,  369,   -1,   -1,   -1,   -1,  498,  499,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  520,
   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  415,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,  472,  473,   -1,   -1,  272,
   -1,   -1,  275,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,  489,   -1,  491,  492,   -1,  494,  495,  292,
  497,   -1,  295,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,  335,   -1,   -1,   -1,   -1,   -1,  341,  342,
  343,   -1,  345,  346,  347,   -1,  349,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,  369,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  437,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  452,
   -1,   -1,  455,   -1,  457,  458,  459,  460,  284,  462,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,  472,
  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
   -1,  484,  485,  486,   -1,   -1,  489,   -1,  491,  492,
   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,  502,
  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,  512,
  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,
   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,   -1,   -1,   -1,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,
  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,
   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,  272,   -1,  325,
  275,   -1,   -1,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  288,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  335,   -1,   -1,   -1,   -1,   -1,  341,  342,  343,  395,
  345,  346,  347,   -1,  349,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,  430,   -1,   -1,   -1,   -1,  435,
   -1,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  398,   -1,  362,  452,   -1,   -1,  455,
   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,
  415,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,
  486,   -1,  437,   -1,   -1,  491,  492,   -1,  494,  495,
   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,  505,
  506,  418,   -1,   -1,   -1,  511,  512,  513,   -1,  515,
  516,  517,   -1,  519,   -1,   -1,   -1,  472,  473,   -1,
   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,   -1,  489,  452,   -1,   -1,  455,   -1,
  457,  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,
   -1,   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,
  497,   -1,   -1,  500,  501,  502,  503,  504,  505,  506,
   -1,   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,
  517,   -1,  519,   -1,   -1,  435,   -1,   -1,   -1,   -1,
   -1,   -1,  529,  530,  531,  532,  533,  534,  535,  536,
  537,  538,  452,   -1,   -1,  455,   -1,  457,  458,  459,
  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,   -1,
   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,   -1,
  500,  501,  502,  503,  504,  505,  506,   -1,   -1,   -1,
   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,  519,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,
  530,  531,  532,  533,  534,  535,  536,  537,  538,  452,
   -1,   -1,  455,  456,  457,  458,  459,  460,  461,  462,
  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
  473,  474,  475,  476,   -1,   -1,  479,  480,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
  493,  494,  495,  496,  497,  498,  499,  500,  501,  502,
  503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
  513,  514,  515,  516,  517,  518,  519,  520,  521,  522,
  523,  524,  525,  526,  527,  528,  529,  530,  531,  532,
  533,  534,  535,  536,  537,  538,  452,   -1,   -1,  455,
  456,  457,  458,  459,  460,   -1,  462,  463,  464,  465,
  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
  476,   -1,   -1,  479,  480,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,
  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,
  506,  507,  508,  509,  510,  511,  512,  513,  514,  515,
  516,  517,  518,  519,  520,  521,  522,  523,  524,  525,
  526,  527,  528,  529,  530,  531,  532,  533,  534,  535,
  536,  537,  538,  452,   -1,   -1,  455,   -1,  457,  458,
  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,   -1,
   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,   -1,
   -1,  500,  501,  502,  503,  504,  505,  506,   -1,   -1,
   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,   -1,
  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,
  452,   -1,   -1,  455,   -1,  457,  458,  459,  460,   -1,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  470,  471,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,   -1,  484,  485,  486,   -1,   -1,   -1,   -1,  491,
  492,   -1,  494,  495,   -1,  497,   -1,   -1,  500,  501,
  502,  503,  504,  505,  506,   -1,   -1,   -1,   -1,  511,
  512,  513,   -1,  515,  516,  517,   -1,  519,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  529,  530,  531,
  532,  533,  534,  535,  536,  537,  538,  452,   -1,   -1,
  455,   -1,  457,  458,  459,  460,   -1,  462,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  470,  471,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,  484,
  485,  486,   -1,   -1,   -1,   -1,  491,  492,   -1,  494,
  495,   -1,  497,   -1,   -1,  500,  501,  502,  503,  504,
  505,  506,   -1,   -1,   -1,   -1,  511,  512,  513,   -1,
  515,  516,  517,   -1,  519,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  529,  530,  531,  532,  533,  534,
  535,  536,  537,  538,  452,   -1,   -1,  455,   -1,  457,
  458,  459,  460,   -1,  462,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  470,  471,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,  484,  485,  486,   -1,
   -1,   -1,   -1,  491,  492,   -1,  494,  495,   -1,  497,
   -1,   -1,  500,  501,  502,  503,  504,  505,  506,   -1,
   -1,   -1,   -1,  511,  512,  513,   -1,  515,  516,  517,
   -1,  519,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  529,  530,  531,  532,  533,  534,  535,  536,  537,
  538,
};
static int yyctable[] = {                                    176,
  701,   -1,  177,  701,   -1,  177,  699,   -1,  897,  641,
   -1,  903,  656,   -1,  911, 1109,   -1,  912, 1110,   -1,
  913, 1111,   -1, 1105,  951,   -1,
};
#define YYFINAL 21
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 538
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BEFORE","BEGIN","BETWEEN","BLOB","BY","CAST",
"CHARACTER","CHECK","COLLATE","COMMA","COMMIT","COMMITTED","COMPUTED",
"CONCATENATE","CONDITIONAL","CONSTRAINT","CONTAINING","COUNT","CREATE",
"CSTRING","CURRENT","CURSOR","DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL",
"DECLARE","DEFAULT","KW_DELETE","DESC","DISTINCT","DO","DOMAIN","DROP","ELSE",
"END","ENTRY_POINT","EQL","ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT",
"EXTERNAL","FILTER","FOR","FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ",
"GENERATOR","GEN_ID","GRANT","GROUP","GTR","HAVING","IF","KW_IN","INACTIVE",
"INNER","INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN",
"KEY","KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LPAREN","LEFT","LEQ",
"LEVEL","LIKE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT","MERGE","MESSAGE",
"MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEQ","NO","NOT",
"NOT_GTR","NOT_LSS","OF","ON","ONLY","OPTION","OR","ORDER","OUTER",
"OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","KW_PAGE_SIZE","PARAMETER","PASSWORD",
"PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY","PRIVILEGES","PROCEDURE",
"PROTECTED","READ","REAL","REFERENCES","RESERVING","RETAIN","RETURNING_VALUES",
"RETURNS","REVOKE","RIGHT","RPAREN","ROLLBACK","SEGMENT","SELECT","SET",
"SHADOW","KW_SHARED","SINGULAR","KW_SIZE","SMALLINT","SNAPSHOT","SOME","SORT",
"SQLCODE","STABILITY","STARTING","STATISTICS","SUB_TYPE","SUSPEND","SUM",
"TABLE","THEN","TO","TRANSACTION","TRIGGER","UNCOMMITTED","UNION","UNIQUE",
"UPDATE","USER","VALUES","VARCHAR","VARIABLE","VARYING","VERSION","VIEW","WAIT",
"WHEN","WHERE","WHILE","WITH","WORK","WRITE","FLOAT_NUMBER","NUMBER","NUMERIC",
"SYMBOL","STRING","INTRODUCER","ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT",
"ROLE","COLUMN","TYPE","EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND",
"WEEKDAY","YEARDAY","TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME",
"CURRENT_TIMESTAMP","NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE",
"KW_BREAK","SUBSTRING","RECREATE","KW_DESCRIPTOR","FIRST","SKIP",
"CURRENT_CONNECTION","CURRENT_TRANSACTION","BIGINT","CASE","NULLIF","COALESCE",
"USING","NULLS","LAST","ROW_COUNT","LOCK","SAVEPOINT","RELEASE","STATEMENT",
"LEAVE","INSERTING","UPDATING","DELETING","BACKUP","KW_DIFFERENCE","OPEN",
"CLOSE","FETCH","ROWS","BLOCK","IIF","SCALAR_ARRAY","CROSS","NEXT","SEQUENCE",
"RESTART","BOTH","COLLATION","COMMENT","BIT_LENGTH","CHAR_LENGTH",
"CHARACTER_LENGTH","LEADING","KW_LOWER","OCTET_LENGTH","TRAILING","TRIM",
"RETURNING","KW_IGNORE","LIMBO","UNDO","REQUESTS","TIMEOUT","LIST","PRESERVE",
"GLOBAL","TEMPORARY",
};
static char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob_io",
"statement : comment",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : exec_procedure",
"statement : exec_block",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : savepoint",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON table_noise simple_table_name TO non_role_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO non_role_grantee_list grant_option",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"table_noise : TABLE",
"table_noise :",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : KW_DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON table_noise simple_table_name FROM non_role_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM non_role_grantee_list",
"revoke : REVOKE rev_admin_option role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"rev_grant_option :",
"rev_admin_option : ADMIN OPTION FOR",
"rev_admin_option :",
"non_role_grantee_list : grantee_list",
"non_role_grantee_list : user_grantee_list",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type param_mechanism",
"param_mechanism :",
"param_mechanism : BY KW_DESCRIPTOR",
"param_mechanism : BY SCALAR_ARRAY",
"param_mechanism : KW_NULL",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type return_mechanism",
"return_value : PARAMETER pos_short_integer",
"return_mechanism :",
"return_mechanism : BY KW_VALUE",
"return_mechanism : BY KW_DESCRIPTOR",
"return_mechanism : FREE_IT",
"return_mechanism : BY KW_DESCRIPTOR FREE_IT",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_filter_subtype OUTPUT_TYPE blob_filter_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"blob_filter_subtype : symbol_blob_subtype_name",
"blob_filter_subtype : signed_short_integer",
"create : CREATE create_clause",
"create_clause : EXCEPTION exception_clause",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : GLOBAL TEMPORARY TABLE gtt_table_clause",
"create_clause : TRIGGER trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : SEQUENCE generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"recreate_clause : TRIGGER rtrigger_clause",
"recreate_clause : EXCEPTION rexception_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : EXCEPTION replace_exception_clause",
"exception_clause : symbol_exception_name sql_string",
"rexception_clause : symbol_exception_name sql_string",
"replace_exception_clause : symbol_exception_name sql_string",
"alter_exception_clause : symbol_exception_name sql_string",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_default_opt domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default : DEFAULT begin_trigger default_value",
"domain_default_opt : domain_default",
"domain_default_opt :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_clause :",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : check_constraint",
"null_constraint : NOT KW_NULL",
"check_constraint : CHECK begin_trigger '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : KW_PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_rem_option : KW_DIFFERENCE KW_FILE sql_string",
"db_file : file1 sql_string file_desc1",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"gtt_table_clause : simple_table_name '(' table_elements ')'",
"gtt_table_clause : simple_table_name '(' table_elements ')' ON COMMIT PRESERVE ROWS",
"gtt_table_clause : simple_table_name '(' table_elements ')' ON COMMIT KW_DELETE ROWS",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain domain_default_opt end_default_opt column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : null_constraint",
"column_constraint : check_constraint",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON KW_DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string local_declaration_list full_proc_block end_trigger",
"input_parameters : '(' input_proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS '(' output_proc_parameters ')'",
"output_parameters :",
"input_proc_parameters : input_proc_parameter",
"input_proc_parameters : input_proc_parameters ',' input_proc_parameter",
"input_proc_parameter : simple_column_def_name non_array_type begin_trigger default_par_opt end_default_opt",
"output_proc_parameters : proc_parameter",
"output_proc_parameters : output_proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"default_par_opt : DEFAULT begin_trigger default_value",
"default_par_opt : '=' begin_trigger default_value",
"default_par_opt :",
"local_declaration_list : local_declarations",
"local_declaration_list :",
"local_declarations : local_declaration",
"local_declarations : local_declarations local_declaration",
"local_declaration : DECLARE var_decl_opt local_declaration_item ';'",
"local_declaration_item : var_declaration_item",
"local_declaration_item : cursor_declaration_item",
"var_declaration_item : column_def_name non_array_type var_init_opt",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : DEFAULT default_value",
"var_init_opt : '=' default_value",
"var_init_opt :",
"cursor_declaration_item : symbol_cursor_name CURSOR FOR '(' select ')'",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN full_proc_block_body END",
"full_proc_block_body : proc_statements",
"full_proc_block_body : proc_statements excp_hndl_statements",
"full_proc_block_body :",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : simple_proc_statement ';'",
"proc_statement : complex_proc_statement",
"simple_proc_statement : assignment",
"simple_proc_statement : insert",
"simple_proc_statement : update",
"simple_proc_statement : delete",
"simple_proc_statement : singleton_select",
"simple_proc_statement : exec_procedure",
"simple_proc_statement : exec_sql",
"simple_proc_statement : exec_into",
"simple_proc_statement : exec_udf",
"simple_proc_statement : excp_statement",
"simple_proc_statement : raise_statement",
"simple_proc_statement : post_event",
"simple_proc_statement : cursor_statement",
"simple_proc_statement : breakleave",
"simple_proc_statement : SUSPEND",
"simple_proc_statement : EXIT",
"complex_proc_statement : if_then_else",
"complex_proc_statement : while",
"complex_proc_statement : for_select",
"complex_proc_statement : for_exec_into",
"excp_statement : EXCEPTION symbol_exception_name",
"excp_statement : EXCEPTION symbol_exception_name value",
"raise_statement : EXCEPTION",
"exec_sql : EXECUTE STATEMENT value",
"for_select : label_opt FOR select INTO variable_list cursor_def DO proc_block",
"for_exec_into : label_opt FOR EXECUTE STATEMENT value INTO variable_list DO proc_block",
"exec_into : EXECUTE STATEMENT value INTO variable_list",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"post_event : POST_EVENT value event_argument_opt",
"event_argument_opt :",
"singleton_select : select INTO variable_list",
"variable : ':' symbol_variable_name",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : label_opt WHILE '(' search_condition ')' DO proc_block",
"label_opt : symbol_label_name ':'",
"label_opt :",
"breakleave : KW_BREAK",
"breakleave : LEAVE",
"breakleave : LEAVE symbol_label_name",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_hndl_statements : excp_hndl_statement",
"excp_hndl_statements : excp_hndl_statements excp_hndl_statement",
"excp_hndl_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"cursor_statement : open_cursor",
"cursor_statement : fetch_cursor",
"cursor_statement : close_cursor",
"open_cursor : OPEN symbol_cursor_name",
"close_cursor : CLOSE symbol_cursor_name",
"fetch_cursor : FETCH fetch_opt symbol_cursor_name INTO variable_list",
"fetch_opt :",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs_opt",
"proc_inputs : value_list",
"proc_inputs : '(' value_list ')'",
"proc_inputs :",
"proc_outputs_opt : RETURNING_VALUES variable_list",
"proc_outputs_opt : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs_opt :",
"exec_block : EXECUTE BLOCK block_input_params output_parameters AS local_declaration_list full_proc_block",
"block_input_params : '(' block_parameters ')'",
"block_input_params :",
"block_parameters : block_parameter",
"block_parameters : block_parameters ',' block_parameter",
"block_parameter : proc_parameter '=' parameter",
"view_clause : symbol_view_name column_parens_opt AS begin_string select_expr check_opt end_trigger",
"rview_clause : symbol_view_name column_parens_opt AS begin_string select_expr check_opt end_trigger",
"begin_string :",
"begin_trigger :",
"end_trigger :",
"end_default_opt :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"rtrigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : KW_DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR KW_DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR KW_DELETE",
"trigger_type_suffix : KW_DELETE OR INSERT",
"trigger_type_suffix : KW_DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR KW_DELETE",
"trigger_type_suffix : INSERT OR KW_DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR KW_DELETE",
"trigger_type_suffix : UPDATE OR KW_DELETE OR INSERT",
"trigger_type_suffix : KW_DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : KW_DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger local_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION alter_exception_clause",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"alter_clause : SEQUENCE alter_sequence_clause",
"alter_clause : EXTERNAL FUNCTION alter_udf_clause",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET domain_default end_trigger",
"alter_domain_op : ADD CONSTRAINT check_constraint",
"alter_domain_op : ADD check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain",
"alter_op : col_opt alter_col_name SET domain_default end_trigger",
"alter_op : col_opt alter_col_name DROP DEFAULT",
"alter_column_name : keyword_or_column",
"keyword_or_column : valid_symbol_name",
"keyword_or_column : ADMIN",
"keyword_or_column : COLUMN",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : RECREATE",
"keyword_or_column : CURRENT_CONNECTION",
"keyword_or_column : CURRENT_TRANSACTION",
"keyword_or_column : BIGINT",
"keyword_or_column : CASE",
"keyword_or_column : RELEASE",
"keyword_or_column : ROW_COUNT",
"keyword_or_column : SAVEPOINT",
"keyword_or_column : OPEN",
"keyword_or_column : CLOSE",
"keyword_or_column : FETCH",
"keyword_or_column : ROWS",
"keyword_or_column : USING",
"keyword_or_column : CROSS",
"keyword_or_column : BIT_LENGTH",
"keyword_or_column : BOTH",
"keyword_or_column : CHAR_LENGTH",
"keyword_or_column : CHARACTER_LENGTH",
"keyword_or_column : COMMENT",
"keyword_or_column : LEADING",
"keyword_or_column : KW_LOWER",
"keyword_or_column : OCTET_LENGTH",
"keyword_or_column : TRAILING",
"keyword_or_column : TRIM",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type",
"alter_data_type_or_domain : simple_column_name",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"alter_sequence_clause : symbol_generator_name RESTART WITH signed_long_integer",
"alter_sequence_clause : symbol_generator_name RESTART WITH NUMBER64BIT",
"alter_sequence_clause : symbol_generator_name RESTART WITH '-' NUMBER64BIT",
"alter_udf_clause : symbol_UDF_name entry_op module_op",
"entry_op : ENTRY_POINT sql_string",
"entry_op :",
"module_op : MODULE_NAME sql_string",
"module_op :",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : ADD KW_DIFFERENCE KW_FILE sql_string",
"db_alter_clause : DROP KW_DIFFERENCE KW_FILE",
"db_alter_clause : BEGIN BACKUP",
"db_alter_clause : END BACKUP",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"drop_clause : SEQUENCE symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT KW_SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"savepoint : set_savepoint",
"savepoint : release_savepoint",
"savepoint : undo_savepoint",
"set_savepoint : SAVEPOINT symbol_savepoint_name",
"release_savepoint : RELEASE SAVEPOINT symbol_savepoint_name release_only_opt",
"release_only_opt : ONLY",
"release_only_opt :",
"undo_savepoint : ROLLBACK optional_work TO optional_savepoint symbol_savepoint_name",
"optional_savepoint : SAVEPOINT",
"optional_savepoint :",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work optional_retain",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tra_misc_options",
"tran_opt : tra_timeout",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tra_misc_options : NO AUTO UNDO",
"tra_misc_options : KW_IGNORE LIMBO",
"tra_misc_options : RESTART REQUESTS",
"tra_timeout : LOCK TIMEOUT nonneg_short_integer",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : KW_SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"comment : COMMENT ON ddl_type0 IS ddl_desc",
"comment : COMMENT ON ddl_type1 symbol_ddl_name IS ddl_desc",
"comment : COMMENT ON ddl_type2 symbol_ddl_name ddl_subname IS ddl_desc",
"ddl_type0 : DATABASE",
"ddl_type1 : DOMAIN",
"ddl_type1 : TABLE",
"ddl_type1 : VIEW",
"ddl_type1 : PROCEDURE",
"ddl_type1 : TRIGGER",
"ddl_type1 : EXTERNAL FUNCTION",
"ddl_type1 : FILTER",
"ddl_type1 : EXCEPTION",
"ddl_type1 : GENERATOR",
"ddl_type1 : SEQUENCE",
"ddl_type1 : INDEX",
"ddl_type1 : ROLE",
"ddl_type1 : CHARACTER SET",
"ddl_type1 : COLLATION",
"ddl_type2 : COLUMN",
"ddl_type2 : PARAMETER",
"ddl_subname : '.' symbol_ddl_name",
"ddl_desc : sql_string",
"ddl_desc : KW_NULL",
"select : select_expr for_update_clause lock_clause",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"lock_clause : WITH LOCK",
"lock_clause :",
"select_expr : select_expr_body order_clause rows_clause",
"column_select : select_expr_body order_clause rows_clause",
"column_singleton : select_expr_body order_clause rows_clause",
"select_expr_body : query_term",
"select_expr_body : select_expr_body UNION distinct_noise query_term",
"select_expr_body : select_expr_body UNION ALL query_term",
"query_term : query_spec",
"query_spec : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : value",
"select_item : value as_noise symbol_item_alias_name",
"as_noise : AS",
"as_noise :",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_primary",
"table_primary : table_proc",
"table_primary : derived_table",
"table_primary : '(' joined_table ')'",
"derived_table : '(' select_expr ')' as_noise correlation_name derived_column_list",
"correlation_name : symbol_table_alias_name",
"correlation_name :",
"derived_column_list : '(' alias_list ')'",
"derived_column_list :",
"alias_list : symbol_item_alias_name",
"alias_list : alias_list ',' symbol_item_alias_name",
"joined_table : cross_join",
"joined_table : natural_join",
"joined_table : qualified_join",
"cross_join : table_reference CROSS JOIN table_primary",
"natural_join : table_reference NATURAL join_type JOIN table_primary",
"qualified_join : table_reference join_type JOIN table_reference join_specification",
"join_specification : join_condition",
"join_specification : named_columns_join",
"join_condition : ON search_condition",
"named_columns_join : USING '(' column_list ')'",
"table_proc : symbol_procedure_name table_proc_inputs as_noise symbol_table_alias_name",
"table_proc : symbol_procedure_name table_proc_inputs",
"table_proc_inputs : '(' value_list ')'",
"table_proc_inputs :",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT outer_noise",
"join_type : RIGHT outer_noise",
"join_type : FULL outer_noise",
"join_type :",
"outer_noise : OUTER",
"outer_noise :",
"group_clause : GROUP BY group_by_list",
"group_clause :",
"group_by_list : group_by_item",
"group_by_list : group_by_list ',' group_by_item",
"group_by_item : value",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name extra_indices_opt",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"extra_indices_opt : INDEX '(' index_list ')'",
"extra_indices_opt :",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : value order_direction nulls_clause",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : FIRST",
"nulls_placement : LAST",
"nulls_clause : NULLS nulls_placement",
"nulls_clause :",
"rows_clause : ROWS value",
"rows_clause : ROWS value TO value",
"rows_clause :",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' value_list ')' returning_clause",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : KW_DELETE FROM table_name where_clause plan_clause order_clause rows_clause",
"delete_positioned : KW_DELETE FROM table_name cursor_clause",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause plan_clause order_clause rows_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"returning_clause : RETURNING value_list",
"returning_clause : RETURNING value_list INTO variable_list",
"returning_clause :",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' value",
"exec_udf : udf",
"blob_io : READ BLOB simple_column_name FROM simple_table_name filter_clause_io segment_clause_io",
"blob_io : INSERT BLOB simple_column_name INTO simple_table_name filter_clause_io segment_clause_io",
"filter_clause_io : FILTER FROM blob_subtype_value_io TO blob_subtype_value_io",
"filter_clause_io : FILTER TO blob_subtype_value_io",
"filter_clause_io :",
"blob_subtype_value_io : blob_subtype_io",
"blob_subtype_value_io : parameter",
"blob_subtype_io : signed_short_integer",
"segment_clause_io : MAX_SEGMENT segment_length_io",
"segment_clause_io :",
"segment_length_io : unsigned_short_integer",
"segment_length_io : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : distinct_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : singular_predicate",
"predicate : trigger_action_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"distinct_predicate : value IS DISTINCT FROM value",
"distinct_predicate : value IS NOT DISTINCT FROM value",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value KW_IN in_predicate_value",
"in_predicate : value NOT KW_IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"singular_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"trigger_action_predicate : INSERTING",
"trigger_action_predicate : UPDATING",
"trigger_action_predicate : DELETING",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : next_value_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"value : null_value",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME sec_precision_opt",
"datetime_value_expression : CURRENT_TIMESTAMP sec_precision_opt",
"sec_precision_opt : '(' nonneg_short_integer ')'",
"sec_precision_opt :",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT_NUMBER",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CURRENT_CONNECTION",
"internal_info : CURRENT_TRANSACTION",
"internal_info : GDSCODE",
"internal_info : SQLCODE",
"internal_info : ROW_COUNT",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"aggregate_function : LIST '(' all_noise value delimiter_opt ')'",
"aggregate_function : LIST '(' DISTINCT value delimiter_opt ')'",
"delimiter_opt : ',' delimiter_value",
"delimiter_opt :",
"delimiter_value : sql_string",
"delimiter_value : parameter",
"delimiter_value : variable",
"numeric_value_function : extract_expression",
"numeric_value_function : length_expression",
"extract_expression : EXTRACT '(' timestamp_part FROM value ')'",
"length_expression : bit_length_expression",
"length_expression : char_length_expression",
"length_expression : octet_length_expression",
"bit_length_expression : BIT_LENGTH '(' value ')'",
"char_length_expression : CHAR_LENGTH '(' value ')'",
"char_length_expression : CHARACTER_LENGTH '(' value ')'",
"octet_length_expression : OCTET_LENGTH '(' value ')'",
"string_value_function : substring_function",
"string_value_function : trim_function",
"string_value_function : KW_UPPER '(' value ')'",
"string_value_function : KW_LOWER '(' value ')'",
"substring_function : SUBSTRING '(' value FROM value string_length_opt ')'",
"string_length_opt : FOR value",
"string_length_opt :",
"trim_function : TRIM '(' trim_specification value FROM value ')'",
"trim_function : TRIM '(' value FROM value ')'",
"trim_function : TRIM '(' trim_specification FROM value ')'",
"trim_function : TRIM '(' value ')'",
"trim_specification : BOTH",
"trim_specification : TRAILING",
"trim_specification : LEADING",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' value AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : IIF '(' search_condition ',' value ',' value ')'",
"case_abbreviation : COALESCE '(' value ',' value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : value",
"next_value_expression : NEXT KW_VALUE FOR symbol_generator_name",
"next_value_expression : GEN_ID '(' symbol_generator_name ',' value ')'",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"distinct_noise : DISTINCT",
"distinct_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : valid_symbol_name",
"symbol_character_set_name : valid_symbol_name",
"symbol_collation_name : valid_symbol_name",
"symbol_column_name : valid_symbol_name",
"symbol_constraint_name : valid_symbol_name",
"symbol_cursor_name : valid_symbol_name",
"symbol_domain_name : valid_symbol_name",
"symbol_exception_name : valid_symbol_name",
"symbol_filter_name : valid_symbol_name",
"symbol_gdscode_name : valid_symbol_name",
"symbol_generator_name : valid_symbol_name",
"symbol_index_name : valid_symbol_name",
"symbol_item_alias_name : valid_symbol_name",
"symbol_label_name : valid_symbol_name",
"symbol_ddl_name : valid_symbol_name",
"symbol_procedure_name : valid_symbol_name",
"symbol_role_name : valid_symbol_name",
"symbol_table_alias_name : valid_symbol_name",
"symbol_table_name : valid_symbol_name",
"symbol_trigger_name : valid_symbol_name",
"symbol_user_name : valid_symbol_name",
"symbol_variable_name : valid_symbol_name",
"symbol_view_name : valid_symbol_name",
"symbol_savepoint_name : valid_symbol_name",
"valid_symbol_name : SYMBOL",
"valid_symbol_name : non_reserved_word",
"non_reserved_word : ACTION",
"non_reserved_word : CASCADE",
"non_reserved_word : FREE_IT",
"non_reserved_word : RESTRICT",
"non_reserved_word : ROLE",
"non_reserved_word : TYPE",
"non_reserved_word : KW_BREAK",
"non_reserved_word : KW_DESCRIPTOR",
"non_reserved_word : SUBSTRING",
"non_reserved_word : COALESCE",
"non_reserved_word : LAST",
"non_reserved_word : LEAVE",
"non_reserved_word : LOCK",
"non_reserved_word : NULLIF",
"non_reserved_word : NULLS",
"non_reserved_word : STATEMENT",
"non_reserved_word : INSERTING",
"non_reserved_word : UPDATING",
"non_reserved_word : DELETING",
"non_reserved_word : FIRST",
"non_reserved_word : SKIP",
"non_reserved_word : BLOCK",
"non_reserved_word : BACKUP",
"non_reserved_word : KW_DIFFERENCE",
"non_reserved_word : IIF",
"non_reserved_word : SCALAR_ARRAY",
"non_reserved_word : WEEKDAY",
"non_reserved_word : YEARDAY",
"non_reserved_word : SEQUENCE",
"non_reserved_word : NEXT",
"non_reserved_word : RESTART",
"non_reserved_word : COLLATION",
"non_reserved_word : RETURNING",
"non_reserved_word : KW_IGNORE",
"non_reserved_word : LIMBO",
"non_reserved_word : UNDO",
"non_reserved_word : REQUESTS",
"non_reserved_word : TIMEOUT",
"non_reserved_word : LIST",
"non_reserved_word : PRESERVE",
"non_reserved_word : GLOBAL",
"non_reserved_word : TEMPORARY",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, n) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, n) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous);

int  YYLex1(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous);
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);




/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
	for (const TOK* token = KEYWORD_getTokens(); token->tok_string; ++token)
	{
		DSQL_SYM symbol = FB_NEW_RPT(*DSQL_permanent_pool, 0) dsql_sym;
		symbol->sym_string = (TEXT *) token->tok_string;
		symbol->sym_length = strlen(token->tok_string);
		symbol->sym_type = SYM_keyword;
		symbol->sym_keyword = token->tok_ident;
		symbol->sym_version = token->tok_version;
		dsql_str* str = FB_NEW_RPT(*DSQL_permanent_pool, symbol->sym_length) dsql_str;
		str->str_length = symbol->sym_length;
		strncpy((char*)str->str_data, (char*)symbol->sym_string, symbol->sym_length);
		symbol->sym_object = (void *) str;
		HSHD_insert(symbol);
	}
}


void LEX_string (
	const TEXT* string,
	USHORT	length,
	SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

	lex.line_start = lex.ptr = string;
	lex.end = string + length;
	lex.lines = 1;
	lex.att_charset = character_set;
	lex.line_start_bk = lex.line_start;
	lex.lines_bk = lex.lines;
	lex.param_number = 1;
	lex.prev_keyword = -1;
#ifdef DSQL_DEBUG
	if (DSQL_debug & 32)
		dsql_trace("Source DSQL string:\n%.*s", (int)length, string);
#endif
}


static const TEXT* lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

	return lex.ptr;
}


#ifdef NOT_USED_OR_REPLACED
static bool long_int(dsql_nod* string,
					 SLONG *long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/

	for (const UCHAR* p = (UCHAR*)((dsql_str*) string)->str_data; 
		 classes[*p] & CHR_DIGIT; p++)
	{
		if (!(classes[*p] & CHR_DIGIT)) {
			return false;
		}
	}

	*long_value = atol(((dsql_str*) string)->str_data);

	return true;
}
#endif

static dsql_fld* make_field (dsql_nod* field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	if (field_name == NULL)
	{
		dsql_fld* field =
			FB_NEW_RPT(*tdsql->getDefaultPool(), sizeof (INTERNAL_FIELD_NAME)) dsql_fld;
		strcpy (field->fld_name, INTERNAL_FIELD_NAME);
		return field;
	}
	const dsql_str* string = (dsql_str*) field_name->nod_arg[1];
	dsql_fld* field =
		FB_NEW_RPT(*tdsql->getDefaultPool(), strlen ((SCHAR*) string->str_data)) dsql_fld;
	strcpy (field->fld_name, (TEXT*) string->str_data);

	return field;
}


static dsql_fil* make_file()
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();
		   
	dsql_fil* temp_file = FB_NEW(*tdsql->getDefaultPool()) dsql_fil;

	return temp_file;
}


static dsql_nod* make_list (dsql_nod* node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	if (node)
	{
		DsqlNodStack stack;
		stack_nodes(node, stack);
		USHORT l = stack.getCount();

		const dsql_nod* old = node;
		node = FB_NEW_RPT(*tdsql->getDefaultPool(), l) dsql_nod;
		node->nod_count = l;
		node->nod_type = nod_list;
		node->nod_line = (USHORT) lex.lines_bk;
		node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
		if (MemoryPool::blk_type(old) == dsql_type_nod)
		{
			node->nod_flags = old->nod_flags;
		}
		dsql_nod** ptr = node->nod_arg + node->nod_count;

		while (stack.hasData())
			*--ptr = stack.pop();
	}

	return node;
}


static dsql_nod* make_parameter (void)
{
/**************************************
 *
 *	m a k e _ p a r a m e t e r
 *
 **************************************
 *
 * Functional description
 *	Make parameter node
 *	Any change should also be made to function below
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), 1) dsql_nod;
	node->nod_type = nod_parameter;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = 1;
	node->nod_arg[0] = (dsql_nod*)(IPTR) lex.param_number++;

	return node;
}


static dsql_nod* make_node (NOD_TYPE	type,
						   int count,
						   ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), count) dsql_nod;
	node->nod_type = type;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = count;
	dsql_nod** p = node->nod_arg;
	va_list	ptr;
	va_start (ptr, count);

	while (--count >= 0)
		*p++ = va_arg (ptr, dsql_nod*);

	va_end(ptr);
	return node;
}


static dsql_nod* make_flag_node (NOD_TYPE	type,
								SSHORT	flag,
								int		count,
								...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
	tsql* tdsql = DSQL_get_thread_data();

	dsql_nod* node = FB_NEW_RPT(*tdsql->getDefaultPool(), count) dsql_nod;
	node->nod_type = type;
	node->nod_flags = flag;
	node->nod_line = (USHORT) lex.lines_bk;
	node->nod_column = (USHORT) (lex.last_token_bk - lex.line_start_bk + 1);
	node->nod_count = count;
	dsql_nod** p = node->nod_arg;
	va_list	ptr;
	va_start (ptr, count);

	while (--count >= 0)
		*p++ = va_arg (ptr, dsql_nod*);

	va_end(ptr);
	return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
#ifdef DSQL_DEBUG
	DSQL_debug = level;
#endif
	if (level >> 8)
		*yydeb = level >> 8;
}

#ifdef NOT_USED_OR_REPLACED
static bool short_int(dsql_nod* string,
					  SLONG *long_value,
					  SSHORT range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/

	if (((dsql_str*) string)->str_length > 5) {
		return false;
	}

	for (UCHAR* p = (UCHAR*)((dsql_str*) string)->str_data; 
		classes[*p] & CHR_DIGIT; p++)
	{
		if (!(classes[*p] & CHR_DIGIT)) {
			return false;
		}
	}

	/* there are 5 or fewer digits, it's value may still be greater
	 * than 32767... */

	SCHAR buf[10];	
	buf[0] = ((dsql_str*) string)->str_data[0];
	buf[1] = ((dsql_str*) string)->str_data[1];
	buf[2] = ((dsql_str*) string)->str_data[2];
	buf[3] = ((dsql_str*) string)->str_data[3];
	buf[4] = ((dsql_str*) string)->str_data[4];
	buf[5] = '\0';

	*long_value = atoi (buf);

	bool return_value;

	switch (range) 
	{
		case POSITIVE:
			return_value = *long_value > SHRT_POS_MAX;
			break;
		case NEGATIVE:
			return_value = *long_value > SHRT_NEG_MAX;
			break;
		case UNSIGNED:
			return_value = *long_value > SHRT_UNSIGNED_MAX;
			break;
	}
	return !return_value;
}
#endif

static void stack_nodes (dsql_nod*	node,
						 DsqlNodStack& stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
	if (node->nod_type != nod_list)
	{
		stack.push(node);
		return;
	}

	/* To take care of cases where long lists of nodes are in a chain
	   of list nodes with exactly one entry, this algorithm will look
	   for a pattern of repeated list nodes with two entries, the first
	   being a list node and the second being a non-list node.   Such
	   a list will be reverse linked, and then re-reversed, stacking the
	   non-list nodes in the process.   The purpose of this is to avoid
	   massive recursion of this function. */

	dsql_nod* start_chain = node;
	dsql_nod* end_chain = NULL;
	dsql_nod* curr_node = node;
	dsql_nod* next_node = node->nod_arg[0];
	while ( curr_node->nod_count == 2 &&
			curr_node->nod_arg[0]->nod_type == nod_list &&
			curr_node->nod_arg[1]->nod_type != nod_list &&
			next_node->nod_arg[0]->nod_type == nod_list &&
			next_node->nod_arg[1]->nod_type != nod_list)
	{

		/* pattern was found so reverse the links and go to next node */

		dsql_nod* save_link = next_node->nod_arg[0];
		next_node->nod_arg[0] = curr_node;
		curr_node = next_node;
		next_node = save_link;
		end_chain = curr_node;
	}

	/* see if any chain was found */

	if (end_chain)
	{

		/* first, handle the rest of the nodes */
		/* note that next_node still points to the first non-pattern node */

		stack_nodes (next_node, stack);

		/* stack the non-list nodes and reverse the chain on the way back */
		
		curr_node = end_chain;
		while (true)
		{
			stack.push(curr_node->nod_arg[1]);
			if ( curr_node == start_chain)
				break;
			dsql_nod* save_link = curr_node->nod_arg[0];
			curr_node->nod_arg[0] = next_node;
			next_node = curr_node;
			curr_node = save_link;
		}
		return;
	}

	dsql_nod** ptr = node->nod_arg;
	for (const dsql_nod* const* const end = ptr + node->nod_count; ptr < end; ptr++)
		stack_nodes (*ptr, stack);
}

inline static int yylex (
	USHORT	client_dialect,
	USHORT	db_dialect,
	USHORT	parser_version,
	bool* stmt_ambiguous)
{
	lex.prev_keyword =
		lex.yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
	return lex.prev_keyword;
}

int LexerState::yylex (
	USHORT	client_dialect,
	USHORT	db_dialect,
	USHORT	parser_version,
	bool* stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
	UCHAR	tok_class;
	char  string[MAX_TOKEN_LEN];
	SSHORT	c;

	/* Find end of white space and skip comments */

	for (;;)
	{
		if (ptr >= end)
			return -1;

		c = *ptr++;

		/* Process comments */

		if (c == '\n') {
			lines++;
			line_start = ptr;
			continue;
		}

		if ((c == '-') && (*ptr == '-'))
		{
			
			/* single-line */
			
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr /* + 1*/; /* CVC: +1 left out. */
					break;
				}
			}
			if (ptr >= end)
				return -1;
			continue;
		}
		else if ((c == '/') && (*ptr == '*'))
		{
			
			/* multi-line */
			
			const TEXT& start_block = ptr[-1];
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '*') {
					if (*ptr == '/')
						break;
				}
				if (c == '\n') {
					lines++;
					line_start = ptr /* + 1*/; /* CVC: +1 left out. */

				}
			}
			if (ptr >= end)
			{
				// I need this to report the correct beginning of the block,
				// since it's not a token really.
				last_token = &start_block;
				yyerror("unterminated block comment");
				return -1;
			}
			ptr++;
			continue;
		}

		tok_class = classes[c];

		if (!(tok_class & CHR_WHITE))
			break;
	}

	/* Depending on tok_class of token, parse token */

	last_token = ptr - 1;

	if (tok_class & CHR_INTRODUCER)
	{
		/* The Introducer (_) is skipped, all other idents are copied
		 * to become the name of the character set
		 */
		char* p = string;
		for (; ptr < end && classes[static_cast<UCHAR>(*ptr)] & CHR_IDENT; ptr++)
		{
			if (ptr >= end)
				return -1;
			check_copy_incr(p, UPPER7(*ptr), string);
		}
		
		check_bound(p, string);
		*p = 0;

		/* make a string value to hold the name, the name 
		 * is resolved in pass1_constant */

		yylval = (dsql_nod*) (MAKE_string(string, p - string))->str_data;

		return INTRODUCER;
	}

	/* parse a quoted string, being sure to look for double quotes */

	if (tok_class & CHR_QUOTE)
	{
		char* buffer = string;
		size_t buffer_len = sizeof (string);
		const char* buffer_end = buffer + buffer_len - 1;
		char* p;
		for (p = buffer; ; ++p)
		{
			if (ptr >= end)
			{
				if (buffer != string)
					gds__free (buffer);
				yyerror("unterminated string");
				return -1;
			}
			// Care about multi-line constants and identifiers
			if (*ptr == '\n') {
				lines++;
				line_start = ptr + 1;
			}
			/* *ptr is quote - if next != quote we're at the end */
			if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
				break;
			if (p > buffer_end)
			{
				char* const new_buffer = (char*) gds__alloc (2 * buffer_len);
			/* FREE: at outer block */
				if (!new_buffer)		/* NOMEM: */
				{
					if (buffer != string)
						gds__free (buffer);
					return -1;
				}
				memcpy (new_buffer, buffer, buffer_len);
				if (buffer != string)
					gds__free (buffer);
				buffer = new_buffer;
				p = buffer + buffer_len;
				buffer_len = 2 * buffer_len;
				buffer_end = buffer + buffer_len - 1;
			}
			*p = *ptr++;
		}
		if (c == '"')
		{
			*stmt_ambiguous = true; /* string delimited by double quotes could be
					**   either a string constant or a SQL delimited
					**   identifier, therefore marks the SQL
					**   statement as ambiguous  */
			if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			{
				if (buffer != string)
					gds__free (buffer);
				yyabandon (-104, isc_invalid_string_constant);
			}
			else if (client_dialect >= SQL_DIALECT_V6)
			{
				if ((p - buffer) >= MAX_TOKEN_LEN)
				{
					if (buffer != string)
						gds__free (buffer);
					yyabandon (-104, isc_token_too_long);
				}
				yylval = (dsql_nod*) MAKE_string(buffer, p - buffer);
				dsql_str* delimited_id_str = (dsql_str*) yylval;
				delimited_id_str->str_flags |= STR_delimited_id;
				if (buffer != string)
					gds__free (buffer);
				return SYMBOL;
			}
		}
		yylval = (dsql_nod*) MAKE_string(buffer, p - buffer);
		if (buffer != string)
			gds__free (buffer);
		return STRING;
	}
												 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

	fb_assert(ptr <= end);

	if ((tok_class & CHR_DIGIT) ||
		((c == '.') && (ptr < end) && (classes[static_cast<UCHAR>(*ptr)] & CHR_DIGIT)))
	{
		/* The following variables are used to recognize kinds of numbers. */

		bool have_error	 = false;	/* syntax error or value too large */
		bool have_digit	 = false;	/* we've seen a digit			  */
		bool have_decimal   = false;	/* we've seen a '.'				*/
		bool have_exp	   = false;	/* digit ... [eE]				  */
		bool have_exp_sign  = false; /* digit ... [eE] {+-]			 */
		bool have_exp_digit = false; /* digit ... [eE] ... digit		*/
		UINT64	number		 = 0;
		UINT64	limit_by_10	= MAX_SINT64 / 10;

		for (--ptr ; ptr < end ; ptr++)
		{
			c = *ptr;
			if (have_exp_digit && (! (classes[c]  & CHR_DIGIT)))
				/* First non-digit after exponent and digit terminates
				 the token. */
				break;
			else if (have_exp_sign && (! (classes[c]  & CHR_DIGIT)))
			{
				/* only digits can be accepted after "1E-" */
				have_error = true;
				break;
			}
			else if (have_exp)
			{
				/* We've seen e or E, but nothing beyond that. */
				if ( ('-' == c) || ('+' == c) )
					have_exp_sign = true;
				else if ( classes[c]  & CHR_DIGIT )
					/* We have a digit: we haven't seen a sign yet,
					but it's too late now. */
					have_exp_digit = have_exp_sign  = true;
				else
				{
					/* end of the token */
					have_error = true;
					break;
				}
			}
			else if ('.' == c)
			{
				if (!have_decimal)
					have_decimal = true;
				else
				{
					have_error = true;
					break;
				}
			}
			else if (classes[c] & CHR_DIGIT)
			{
				/* Before computing the next value, make sure there will be
				   no overflow.  */

				have_digit = true;

				if (number >= limit_by_10)
				{
				/* possibility of an overflow */
					if ((number > limit_by_10) || (c > '8'))
					{
						have_error = true;
						break;
					}
				}
				number = number * 10 + (c - '0');
			}
			else if ( (('E' == c) || ('e' == c)) && have_digit )
				have_exp = true;
			else
				/* Unexpected character: this is the end of the number. */
				break;
		}

		/* We're done scanning the characters: now return the right kind
		   of number token, if any fits the bill. */

		if (!have_error)
		{
			fb_assert(have_digit);

			if (have_exp_digit)
			{
				yylval = (dsql_nod*) MAKE_string(last_token, ptr - last_token);
				last_token_bk = last_token;
				line_start_bk = line_start;
				lines_bk = lines;

				return FLOAT_NUMBER;
			}
			else if (!have_exp)
			{

				/* We should return some kind (scaled-) integer type
				   except perhaps in dialect 1. */

				if (!have_decimal && (number <= MAX_SLONG))
				{
					yylval = (dsql_nod*) (IPTR) number;
					return NUMBER;
				}
				else
				{
					/* We have either a decimal point with no exponent
					   or a string of digits whose value exceeds MAX_SLONG:
					   the returned type depends on the client dialect,
					   so warn of the difference if the client dialect is
					   SQL_DIALECT_V6_TRANSITION.
					*/

					if (SQL_DIALECT_V6_TRANSITION == client_dialect)
					{
						/* Issue a warning about the ambiguity of the numeric
						 * numeric literal.  There are multiple calls because
						 * the message text exceeds the 119-character limit
						 * of our message database.
						 */
						ERRD_post_warning( isc_dsql_warning_number_ambiguous,
							   isc_arg_string,
							   ERR_string( last_token, ptr - last_token ),
							   isc_arg_end );
						ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
							   isc_arg_end );
					}

					yylval = (dsql_nod*) MAKE_string(last_token, ptr - last_token);

					last_token_bk = last_token;
					line_start_bk = line_start;
					lines_bk = lines;

					if (client_dialect < SQL_DIALECT_V6_TRANSITION)
						return FLOAT_NUMBER;
					else if (have_decimal)
						return SCALEDINT;
					else
						return NUMBER64BIT;
				}
			} /* else if (!have_exp) */
		} /* if (!have_error) */

		/* we got some kind of error or overflow, so don't recognize this
		 * as a number: just pass it through to the next part of the lexer.
		 */
	}

	/* Restore the status quo ante, before we started our unsuccessful
	   attempt to recognize a number. */
	ptr = last_token;
	c   = *ptr++;
	/* We never touched tok_class, so it doesn't need to be restored. */

	/* end of number-recognition code */


	if (tok_class & CHR_LETTER)
	{
		char* p = string;
		check_copy_incr(p, UPPER (c), string);
		for (; ptr < end && classes[static_cast<UCHAR>(*ptr)] & CHR_IDENT; ptr++)
		{
			if (ptr >= end)
				return -1;
			check_copy_incr(p, UPPER (*ptr), string);
		}

		check_bound(p, string);
		*p = 0;
		dsql_sym* sym =
			HSHD_lookup (NULL, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
		if (sym && (sym->sym_keyword != COMMENT || prev_keyword == -1))
		{
			yylval = (dsql_nod*) sym->sym_object;
			last_token_bk = last_token;
			line_start_bk = line_start;
			lines_bk = lines;
			return sym->sym_keyword;
		}
		yylval = (dsql_nod*) MAKE_string(string, p - string);
		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;
		return SYMBOL;
	}

	/* Must be punctuation -- test for double character punctuation */

	if (last_token + 1 < end)
	{
		dsql_sym* sym =
			HSHD_lookup (NULL, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
		if (sym)
		{
			++ptr;
			return sym->sym_keyword;
		}
	}
		
	/* Single character punctuation are simply passed on */

	return c;
}


static void yyerror_detailed(const TEXT* error_string, int yychar, YYSTYPE&, YYPOSN&)
{
/**************************************
 *
 *	y y e r r o r _ d e t a i l e d
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/
	const TEXT* line_start = lex.line_start;
	SLONG lines = lex.lines;
	if (lex.last_token < lex.line_start)
	{
		line_start = lex.line_start_bk;
		lines--;
	}

	if (yychar < 1)
		ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104,
			isc_arg_gds, isc_command_end_err2,	/* Unexpected end of command */
			isc_arg_number, lines,
			isc_arg_number, (SLONG) (lex.last_token - line_start + 1),
			0);
	else
	{
		ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104,
			/* Token unknown - line %d, column %d */
			isc_arg_gds, isc_dsql_token_unk_err,
			isc_arg_number, (SLONG) lines,
			isc_arg_number, (SLONG) (lex.last_token - line_start + 1), /*CVC: +1*/
			/* Show the token */
			isc_arg_gds, isc_random,
			isc_arg_cstring, (int) (lex.ptr - lex.last_token), lex.last_token,
			0);
	}
}


// The argument passed to this function is ignored. Therefore, messages like
// "syntax error" and "yacc stack overflow" are never seen.
static void yyerror(const TEXT* error_string)
{
	YYSTYPE errt_value =  0;
	YYPOSN errt_posn = -1;
	yyerror_detailed(error_string, -1, errt_value, errt_posn);
}


static void yyabandon (SLONG		sql_code,
					   ISC_STATUS	error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

	ERRD_post (isc_sqlerr, isc_arg_number, sql_code,
		isc_arg_gds, error_symbol, 0);
}


//
// Parser function
//
int dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous) {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%p]: state %d, reading %d (%s)", 
	     yydepth, yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%p]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%p]: CONFLICT in state %d. ", 
	       yydepth, yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%p]: backtracking 1 token\n", yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%p]: state %d, shifting to state %d\n",
               yydepth, yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%p]: state %d, shifting to state %d\n",
             yydepth, yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%p]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%p]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%p]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%p]: ERROR recovery discards state %d\n",
                 yydepth, yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%p]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%p]: state %d, reducing by rule %d (%s)",
           yydepth, yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* default action - assign last argument as in standard yacc */
  yyps->val = yyvsp[1 - yym];

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
  if (!yytrial)
{ DSQL_parse = yyvsp[-1]; }
break;
case 23:
  if (!yytrial)
{ prepare_console_debug ((IPTR) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 24:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 25:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 26:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 29:
  if (!yytrial)
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
  if (!yytrial)
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 31:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 33:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 34:
  if (!yytrial)
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 35:
  if (!yytrial)
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 36:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 37:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 38:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 39:
  if (!yytrial)
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 40:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 41:
  if (!yytrial)
{ yyval = NULL; }
break;
case 42:
  if (!yytrial)
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 43:
  if (!yytrial)
{ yyval = NULL; }
break;
case 44:
  if (!yytrial)
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 45:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 47:
  if (!yytrial)
{ yyval = make_node (nod_revoke, (int) e_grant_count,
					make_list(yyvsp[-2]), make_list(yyvsp[0]), NULL, yyvsp[-3]); }
break;
case 48:
  if (!yytrial)
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 49:
  if (!yytrial)
{ yyval = NULL; }
break;
case 50:
  if (!yytrial)
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 51:
  if (!yytrial)
{ yyval = NULL; }
break;
case 55:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 57:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 58:
  if (!yytrial)
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 59:
  if (!yytrial)
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 60:
  if (!yytrial)
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 61:
  if (!yytrial)
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 63:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 64:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 65:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 66:
  if (!yytrial)
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 68:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 69:
  if (!yytrial)
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 71:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 72:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 73:
  if (!yytrial)
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 74:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 75:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 76:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 77:
  if (!yytrial)
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 79:
  if (!yytrial)
{ lex.g_field->fld_dtype = dtype_blob; }
break;
case 80:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_cstring; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-2]; }
break;
case 81:
  if (!yytrial)
{ yyval = NULL; }
break;
case 83:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 85:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 86:
  if (!yytrial)
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
							  yyvsp[-2], yyvsp[0]); }
break;
case 87:
  if (!yytrial)
{ yyval = NULL; }
break;
case 88:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_descriptor, CONSTANT_SLONG); }
break;
case 89:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_scalar_array, CONSTANT_SLONG); }
break;
case 90:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_ref_with_null, CONSTANT_SLONG); }
break;
case 92:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 93:
  if (!yytrial)
{ yyval = make_node (nod_udf_return_value, (int) e_udf_param_count,
							  yyvsp[-2], yyvsp[0]); }
break;
case 94:
  if (!yytrial)
{ yyval = make_node (nod_udf_return_value, (int) e_udf_param_count,
				NULL, MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG));}
break;
case 95:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_reference, CONSTANT_SLONG); }
break;
case 96:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_value, CONSTANT_SLONG); }
break;
case 97:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) Jrd::FUN_descriptor, CONSTANT_SLONG); }
break;
case 98:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) (-1 * Jrd::FUN_reference), CONSTANT_SLONG); }
break;
case 99:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) (-1 * Jrd::FUN_descriptor), CONSTANT_SLONG); }
break;
case 100:
  if (!yytrial)
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 101:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_STRING); }
break;
case 102:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 103:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 104:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 105:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 106:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 107:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 108:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 109:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 110:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 111:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 112:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 113:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 114:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 115:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 116:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 117:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 118:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 119:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 120:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 121:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 122:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 123:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 124:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 125:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 126:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 127:
  if (!yytrial)
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 128:
  if (!yytrial)
{ yyval = make_node (nod_redef_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 129:
  if (!yytrial)
{ yyval = make_node (nod_replace_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 130:
  if (!yytrial)
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 131:
  if (!yytrial)
{ yyval = make_node (nod_unique, 0, NULL); }
break;
case 132:
  if (!yytrial)
{ yyval = NULL; }
break;
case 133:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 135:
  if (!yytrial)
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 136:
  if (!yytrial)
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
				 yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 137:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 138:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 139:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 140:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 141:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 142:
  if (!yytrial)
{ yyval = (dsql_nod*) 0;}
break;
case 143:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 144:
  if (!yytrial)
{ yyval = NULL; }
break;
case 147:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 148:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
										  yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 149:
  if (!yytrial)
{ yyval = NULL; }
break;
case 150:
  if (!yytrial)
{ yyval = NULL; }
break;
case 151:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 153:
  if (!yytrial)
{ yyval = NULL; }
break;
case 155:
  if (!yytrial)
{ yyval = NULL; }
break;
case 157:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 158:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 161:
  if (!yytrial)
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 162:
  if (!yytrial)
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count,
					NULL, NULL, yyvsp[-2], NULL, yyvsp[0]); }
break;
case 163:
  if (!yytrial)
{ yyval = make_node (nod_def_generator, (int) e_gen_count, yyvsp[0]); }
break;
case 164:
  if (!yytrial)
{ yyval = make_node (nod_def_role, (int) 1, yyvsp[0]); }
break;
case 165:
  if (!yytrial)
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 168:
  if (!yytrial)
{ yyval = (dsql_nod*) yyvsp[0]; }
break;
case 169:
  if (!yytrial)
{yyval = NULL;}
break;
case 172:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 173:
  if (!yytrial)
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 174:
  if (!yytrial)
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 175:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 176:
  if (!yytrial)
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 177:
  if (!yytrial)
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 178:
  if (!yytrial)
{yyval = NULL;}
break;
case 181:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 183:
  if (!yytrial)
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 184:
  if (!yytrial)
{ yyval = make_node (nod_difference_file, 1, yyvsp[0]); }
break;
case 185:
  if (!yytrial)
{ lex.g_file->fil_name = (dsql_str*) yyvsp[-1];
			  yyval = (dsql_nod*) make_node (nod_file_desc, (int) 1,
						(dsql_nod*) lex.g_file); }
break;
case 186:
  if (!yytrial)
{ lex.g_file  = make_file();}
break;
case 191:
  if (!yytrial)
{ lex.g_file->fil_start = (IPTR) yyvsp[0];}
break;
case 192:
  if (!yytrial)
{ lex.g_file->fil_length = (IPTR) yyvsp[-1];}
break;
case 199:
  if (!yytrial)
{ yyval = make_flag_node (nod_def_relation, NOD_PERMANENT_TABLE,
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
  if (!yytrial)
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 201:
  if (!yytrial)
{ yyval = make_flag_node (nod_def_relation, NOD_GLOBAL_TEMP_TABLE_DELETE_ROWS,
				(int) e_drl_count, yyvsp[-3], make_list (yyvsp[-1]), NULL); }
break;
case 202:
  if (!yytrial)
{ yyval = make_flag_node (nod_def_relation, NOD_GLOBAL_TEMP_TABLE_PRESERVE_ROWS,
				(int) e_drl_count, yyvsp[-7], make_list (yyvsp[-5]), NULL); }
break;
case 203:
  if (!yytrial)
{ yyval = make_flag_node (nod_def_relation, NOD_GLOBAL_TEMP_TABLE_DELETE_ROWS,
				(int) e_drl_count, yyvsp[-7], make_list (yyvsp[-5]), NULL); }
break;
case 204:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 205:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 206:
  if (!yytrial)
{ yyval = NULL; }
break;
case 208:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 211:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 212:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 213:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 214:
  if (!yytrial)
{ 
			lex.g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 217:
  if (!yytrial)
{ yyval = NULL; }
break;
case 218:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
											yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 219:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 220:
  if (!yytrial)
{ yyval = NULL; }
break;
case 221:
  if (!yytrial)
{ lex.g_field_name = yyvsp[0];
			  lex.g_field = make_field (yyvsp[0]);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 222:
  if (!yytrial)
{ lex.g_field = make_field (yyvsp[0]);
				  yyval = (dsql_nod*) lex.g_field; }
break;
case 223:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 224:
  if (!yytrial)
{ lex.g_field = make_field (NULL);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 231:
  if (!yytrial)
{ yyval = NULL; }
break;
case 234:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 235:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 238:
  if (!yytrial)
{ yyval = make_node (nod_foreign, (int) e_for_count,
						make_node (nod_list, (int) 1, lex.g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 239:
  if (!yytrial)
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 240:
  if (!yytrial)
{ yyval = make_node (nod_primary, (int) e_pri_count, NULL, yyvsp[0]); }
break;
case 241:
  if (!yytrial)
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 242:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 243:
  if (!yytrial)
{ yyval = NULL ;}
break;
case 248:
  if (!yytrial)
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 249:
  if (!yytrial)
{ yyval = make_node (nod_primary, (int) e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 250:
  if (!yytrial)
{ yyval = make_node (nod_foreign, (int) e_for_count, yyvsp[-5], yyvsp[-3], 
					 yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 251:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 252:
  if (!yytrial)
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 253:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 254:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 255:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 256:
  if (!yytrial)
{ yyval = make_node (nod_ref_upd_del, (int) e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 257:
  if (!yytrial)
{ yyval = NULL;}
break;
case 258:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 259:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 260:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, (int) e_ref_trig_action_count, NULL);}
break;
case 261:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, (int) e_ref_trig_action_count, NULL);}
break;
case 262:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, (int) e_ref_trig_action_count, NULL);}
break;
case 263:
  if (!yytrial)
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, (int) e_ref_trig_action_count, NULL);}
break;
case 264:
  if (!yytrial)
{ yyval = make_node (nod_def_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 265:
  if (!yytrial)
{ yyval = make_node (nod_redef_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 266:
  if (!yytrial)
{ yyval = make_node (nod_replace_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 267:
  if (!yytrial)
{ yyval = make_node (nod_mod_procedure,
						(int) e_prc_count, yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 268:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 269:
  if (!yytrial)
{ yyval = NULL; }
break;
case 270:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 271:
  if (!yytrial)
{ yyval = NULL; }
break;
case 273:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 274:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-4], yyvsp[-1], yyvsp[0], NULL, NULL, NULL, NULL); }
break;
case 276:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 277:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 278:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 279:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 280:
  if (!yytrial)
{ yyval = NULL; }
break;
case 281:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 282:
  if (!yytrial)
{ yyval = NULL; }
break;
case 284:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 285:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 288:
  if (!yytrial)
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-2], yyvsp[0], NULL, NULL, NULL, NULL, NULL); }
break;
case 289:
  if (!yytrial)
{ yyval = NULL; }
break;
case 290:
  if (!yytrial)
{ yyval = NULL; }
break;
case 291:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 292:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 293:
  if (!yytrial)
{ yyval = NULL; }
break;
case 294:
  if (!yytrial)
{ yyval = make_flag_node (nod_cursor, NOD_CURSOR_EXPLICIT,
				(int) e_cur_count, yyvsp[-5], yyvsp[-1], NULL, NULL); }
break;
case 297:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 298:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, make_list (yyvsp[0]), NULL); }
break;
case 299:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, make_list (yyvsp[-1]), make_list (yyvsp[0])); }
break;
case 300:
  if (!yytrial)
{ yyval = make_node (nod_block, (int) e_blk_count, NULL, NULL);}
break;
case 302:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 319:
  if (!yytrial)
{ yyval = make_node (nod_return, (int) e_rtn_count, NULL); }
break;
case 320:
  if (!yytrial)
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 325:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, yyvsp[0], NULL); }
break;
case 326:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, yyvsp[-1], yyvsp[0]); }
break;
case 327:
  if (!yytrial)
{ yyval = make_node (nod_exception_stmt, (int) e_xcp_count, NULL, NULL); }
break;
case 328:
  if (!yytrial)
{ yyval = make_node (nod_exec_sql, (int) e_exec_sql_count, yyvsp[0]); }
break;
case 329:
  if (!yytrial)
{ yyval = make_node (nod_for_select, (int) e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], yyvsp[-7]); }
break;
case 330:
  if (!yytrial)
{ yyval = make_node (nod_exec_into, (int) e_exec_into_count, yyvsp[-4], yyvsp[0], make_list (yyvsp[-2]), yyvsp[-8]); }
break;
case 331:
  if (!yytrial)
{ yyval = make_node (nod_exec_into, (int) e_exec_into_count, yyvsp[-2], 0, make_list (yyvsp[0])); }
break;
case 332:
  if (!yytrial)
{ yyval = make_node (nod_if, (int) e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 333:
  if (!yytrial)
{ yyval = make_node (nod_if, (int) e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 334:
  if (!yytrial)
{ yyval = make_node (nod_post, (int) e_pst_count, yyvsp[-1], yyvsp[0]); }
break;
case 335:
  if (!yytrial)
{ yyval = NULL; }
break;
case 336:
  if (!yytrial)
{ yyval = make_node (nod_for_select, (int) e_flp_count, yyvsp[-2],
					  make_list (yyvsp[0]), NULL, NULL); }
break;
case 337:
  if (!yytrial)
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 340:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 341:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
  if (!yytrial)
{ yyval = make_node (nod_while, (int) e_while_count, yyvsp[-3], yyvsp[0], yyvsp[-6]); }
break;
case 343:
  if (!yytrial)
{ yyval = make_node (nod_label, (int) e_label_count, yyvsp[-1], NULL); }
break;
case 344:
  if (!yytrial)
{ yyval = NULL; }
break;
case 345:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count, NULL); }
break;
case 346:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count, NULL); }
break;
case 347:
  if (!yytrial)
{ yyval = make_node (nod_breakleave, (int) e_breakleave_count,
				make_node (nod_label, (int) e_label_count, yyvsp[0], NULL)); }
break;
case 348:
  if (!yytrial)
{ yyval = make_flag_node (nod_cursor, NOD_CURSOR_FOR,
				(int) e_cur_count, yyvsp[0], NULL, NULL, NULL); }
break;
case 349:
  if (!yytrial)
{ yyval = NULL; }
break;
case 351:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 352:
  if (!yytrial)
{ yyval = make_node (nod_on_error, (int) e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 354:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 355:
  if (!yytrial)
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 356:
  if (!yytrial)
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 357:
  if (!yytrial)
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 358:
  if (!yytrial)
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 362:
  if (!yytrial)
{ yyval = make_node (nod_cursor_open, (int) e_cur_stmt_count, yyvsp[0], NULL, NULL); }
break;
case 363:
  if (!yytrial)
{ yyval = make_node (nod_cursor_close, (int) e_cur_stmt_count, yyvsp[0], NULL, NULL); }
break;
case 364:
  if (!yytrial)
{ yyval = make_node (nod_cursor_fetch, (int) e_cur_stmt_count, yyvsp[-2], yyvsp[-3], make_list (yyvsp[0])); }
break;
case 365:
  if (!yytrial)
{ yyval = NULL; }
break;
case 366:
  if (!yytrial)
{ yyval = make_node (nod_exec_procedure, (int) e_exe_count,
					yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 367:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 368:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 369:
  if (!yytrial)
{ yyval = NULL; }
break;
case 370:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 371:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 372:
  if (!yytrial)
{ yyval = NULL; }
break;
case 373:
  if (!yytrial)
{ yyval = make_node (nod_exec_block,
						  (int) e_exe_blk_count, 
					          yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 374:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 375:
  if (!yytrial)
{ yyval = NULL; }
break;
case 377:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 378:
  if (!yytrial)
{ yyval = make_node (nod_param_val, e_prm_val_count, yyvsp[-2], yyvsp[0]); }
break;
case 379:
  if (!yytrial)
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 380:
  if (!yytrial)
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 381:
  if (!yytrial)
{ lex.beginning = lex_position(); }
break;
case 382:
  if (!yytrial)
{ lex.beginning = lex.last_token; }
break;
case 383:
  if (!yytrial)
{ yyval = (dsql_nod*) MAKE_string(lex.beginning,
					lex_position() - lex.beginning); }
break;
case 384:
  if (!yytrial)
{ yyval = (dsql_nod*) MAKE_string(lex.beginning, 
					(yychar <= 0 ? lex_position() : lex.last_token) - lex.beginning); 
			}
break;
case 385:
  if (!yytrial)
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 386:
  if (!yytrial)
{ yyval = 0; }
break;
case 387:
  if (!yytrial)
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 388:
  if (!yytrial)
{ yyval = make_node (nod_redef_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 389:
  if (!yytrial)
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 390:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 391:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 392:
  if (!yytrial)
{ yyval = NULL; }
break;
case 393:
  if (!yytrial)
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 394:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 0, CONSTANT_SLONG); }
break;
case 395:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG); }
break;
case 396:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 0, 0), CONSTANT_SLONG); }
break;
case 397:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 0, 0), CONSTANT_SLONG); }
break;
case 398:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 0, 0), CONSTANT_SLONG); }
break;
case 399:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 2, 0), CONSTANT_SLONG); }
break;
case 400:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 3, 0), CONSTANT_SLONG); }
break;
case 401:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 1, 0), CONSTANT_SLONG); }
break;
case 402:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 3, 0), CONSTANT_SLONG); }
break;
case 403:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 1, 0), CONSTANT_SLONG); }
break;
case 404:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 2, 0), CONSTANT_SLONG); }
break;
case 405:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 2, 3), CONSTANT_SLONG); }
break;
case 406:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (1, 3, 2), CONSTANT_SLONG); }
break;
case 407:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 1, 3), CONSTANT_SLONG); }
break;
case 408:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (2, 3, 1), CONSTANT_SLONG); }
break;
case 409:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 1, 2), CONSTANT_SLONG); }
break;
case 410:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)(IPTR) trigger_type_suffix (3, 2, 1), CONSTANT_SLONG); }
break;
case 411:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 412:
  if (!yytrial)
{ yyval = NULL; }
break;
case 413:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) e_trg_act_count, yyvsp[-1], yyvsp[0]); }
break;
case 414:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 415:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 416:
  if (!yytrial)
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 417:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 418:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 419:
  if (!yytrial)
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 420:
  if (!yytrial)
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
										  yyvsp[-1], make_list (yyvsp[0])); }
break;
case 421:
  if (!yytrial)
{ yyval = make_node (nod_mod_index, (int) e_mod_idx_count, yyvsp[0]); }
break;
case 422:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 423:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 425:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 426:
  if (!yytrial)
{ yyval = make_node (nod_def_default, (int) e_dft_count, yyvsp[-1], yyvsp[0]); }
break;
case 427:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 428:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 429:
  if (!yytrial)
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 430:
  if (!yytrial)
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 431:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 432:
  if (!yytrial)
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 434:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 435:
  if (!yytrial)
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 436:
  if (!yytrial)
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 437:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 438:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 439:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 440:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 441:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-2], yyvsp[0], NULL); }
break;
case 442:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-3], NULL,
					make_node(nod_def_default, (int) e_dft_count, yyvsp[-1], yyvsp[0])); }
break;
case 443:
  if (!yytrial)
{ yyval = make_node(nod_mod_field_type, e_mod_fld_type_count, yyvsp[-2], NULL,
					make_node(nod_del_default, (int) 0, NULL)); }
break;
case 444:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 486:
  if (!yytrial)
{ yyval = NULL; }
break;
case 487:
  if (!yytrial)
{ yyval = NULL; }
break;
case 488:
  if (!yytrial)
{ yyval = NULL; }
break;
case 489:
  if (!yytrial)
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
					yyvsp[0], NULL, NULL, NULL, NULL); }
break;
case 490:
  if (!yytrial)
{ lex.g_field_name = yyvsp[0];
			  lex.g_field = make_field (yyvsp[0]);
			  yyval = (dsql_nod*) lex.g_field; }
break;
case 491:
  if (!yytrial)
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 492:
  if (!yytrial)
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 493:
  if (!yytrial)
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 494:
  if (!yytrial)
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 495:
  if (!yytrial)
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 496:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 497:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64)); }
break;
case 498:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-4],
				make_node(nod_negate, 1, MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64))); }
break;
case 499:
  if (!yytrial)
{ yyval = make_node(nod_mod_udf, e_mod_udf_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 500:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 501:
  if (!yytrial)
{ yyval = NULL; }
break;
case 502:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 503:
  if (!yytrial)
{ yyval = NULL; }
break;
case 504:
  if (!yytrial)
{ yyval = NULL; }
break;
case 506:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 507:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 508:
  if (!yytrial)
{ yyval = make_node (nod_difference_file, (int) 1, yyvsp[0]); }
break;
case 509:
  if (!yytrial)
{ yyval = make_node (nod_drop_difference, (int) 0, NULL); }
break;
case 510:
  if (!yytrial)
{ yyval = make_node (nod_begin_backup, (int) 0, NULL); }
break;
case 511:
  if (!yytrial)
{ yyval = make_node (nod_end_backup, (int) 0, NULL); }
break;
case 512:
  if (!yytrial)
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 514:
  if (!yytrial)
{ yyval = NULL; }
break;
case 516:
  if (!yytrial)
{ yyval = NULL; }
break;
case 517:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 518:
  if (!yytrial)
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 519:
  if (!yytrial)
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 520:
  if (!yytrial)
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 521:
  if (!yytrial)
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 522:
  if (!yytrial)
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 523:
  if (!yytrial)
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 524:
  if (!yytrial)
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 525:
  if (!yytrial)
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 526:
  if (!yytrial)
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 527:
  if (!yytrial)
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 528:
  if (!yytrial)
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 529:
  if (!yytrial)
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 530:
  if (!yytrial)
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 535:
  if (!yytrial)
{ lex.g_field->fld_ranges = make_list (yyvsp[-1]);
			  lex.g_field->fld_dimensions = lex.g_field->fld_ranges->nod_count / 2;
			  lex.g_field->fld_element_dtype = lex.g_field->fld_dtype;
			  yyval = yyvsp[-3]; }
break;
case 536:
  if (!yytrial)
{ lex.g_field->fld_ranges = make_list (yyvsp[-2]);
			  lex.g_field->fld_dimensions = lex.g_field->fld_ranges->nod_count / 2;
			  lex.g_field->fld_element_dtype = lex.g_field->fld_dtype;
			  yyval = yyvsp[-4]; }
break;
case 538:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 539:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] < 1)
			 		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG),
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG));
				  else
			 		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG),
					MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 540:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((dsql_str*) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 546:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "BIGINT",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "BIGINT",
					0);
			lex.g_field->fld_dtype = dtype_int64; 
			lex.g_field->fld_length = sizeof (SINT64); 
			}
break;
case 547:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_long; 
			lex.g_field->fld_length = sizeof (SLONG); 
			}
break;
case 548:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_short; 
			lex.g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 549:
  if (!yytrial)
{ 
			*stmt_ambiguous = true;
			if (client_dialect <= SQL_DIALECT_V5)
				{
				/* Post warning saying that DATE is equivalent to TIMESTAMP */
					ERRD_post_warning (isc_sqlwarn, isc_arg_number, (SLONG) 301, 
											   isc_arg_warning, isc_dtype_renamed, 0);
				lex.g_field->fld_dtype = dtype_timestamp; 
				lex.g_field->fld_length = sizeof (GDS_TIMESTAMP);
				}
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				yyabandon (-104, isc_transitional_date);
			else
				{
				lex.g_field->fld_dtype = dtype_sql_date; 
				lex.g_field->fld_length = sizeof (ULONG);
				}
			}
break;
case 550:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			lex.g_field->fld_dtype = dtype_sql_time; 
			lex.g_field->fld_length = sizeof (SLONG);
			}
break;
case 551:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_timestamp; 
			lex.g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 554:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			}
break;
case 555:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[-1];
			lex.g_field->fld_sub_type = 0;
			}
break;
case 556:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[-3];
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 557:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_blob; 
			lex.g_field->fld_length = sizeof(ISC_QUAD);
			lex.g_field->fld_seg_length = 80;
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 558:
  if (!yytrial)
{
			lex.g_field->fld_seg_length = (USHORT)(IPTR) yyvsp[0];
		  	}
break;
case 559:
  if (!yytrial)
{
			lex.g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 560:
  if (!yytrial)
{
			lex.g_field->fld_sub_type = (USHORT)(IPTR) yyvsp[0];
			}
break;
case 561:
  if (!yytrial)
{
			lex.g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 562:
  if (!yytrial)
{
			lex.g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 563:
  if (!yytrial)
{
			lex.g_field->fld_character_set = yyvsp[0];
			}
break;
case 565:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 566:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = 1; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 567:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_varying; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			lex.g_field->fld_flags |= FLD_national;
			}
break;
case 568:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			}
break;
case 569:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_text; 
			lex.g_field->fld_character_length = 1; 
			}
break;
case 570:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_varying; 
			lex.g_field->fld_character_length = (USHORT)(IPTR) yyvsp[-1]; 
			}
break;
case 579:
  if (!yytrial)
{ 
			  lex.g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 580:
  if (!yytrial)
{  
			   lex.g_field->fld_sub_type = dsc_num_type_decimal;
			   if (lex.g_field->fld_dtype == dtype_short)
				{
				lex.g_field->fld_dtype = dtype_long;
				lex.g_field->fld_length = sizeof (SLONG);
				}
			}
break;
case 581:
  if (!yytrial)
{
			lex.g_field->fld_dtype = dtype_long; 
				lex.g_field->fld_length = sizeof (SLONG); 
			lex.g_field->fld_precision = 9;
				}
break;
case 582:
  if (!yytrial)
{		 
			if ( ((IPTR) yyvsp[-1] < 1) || ((IPTR) yyvsp[-1] > 18) )
				yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((IPTR) yyvsp[-1] > 9)
				{
				if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect	 >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect	 <= SQL_DIALECT_V5) ) )
					ERRD_post (isc_sqlerr,
					   isc_arg_number, (SLONG) -817,
					   isc_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   isc_arg_number, (SLONG) db_dialect,
					   0);
				if (client_dialect <= SQL_DIALECT_V5)
					{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double);
					}
				else
					{
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
					{
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					isc_arg_end );

					}
				lex.g_field->fld_dtype = dtype_int64;
				lex.g_field->fld_length = sizeof (SINT64);
					}
				}
			else 
				if ((IPTR) yyvsp[-1] < 5)
					{
					lex.g_field->fld_dtype = dtype_short; 
					lex.g_field->fld_length = sizeof (SSHORT); 
					}
				else
					{
					lex.g_field->fld_dtype = dtype_long; 
					lex.g_field->fld_length = sizeof (SLONG); 
					}
			lex.g_field->fld_precision = (USHORT)(IPTR) yyvsp[-1];
			}
break;
case 583:
  if (!yytrial)
{ 
			if ( ((IPTR) yyvsp[-3] < 1) || ((IPTR) yyvsp[-3] > 18) )
				yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((IPTR) yyvsp[-1] > (IPTR) yyvsp[-3]) || ((IPTR) yyvsp[-1] < 0))
				yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((IPTR) yyvsp[-3] > 9)
				{
				if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect	 >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect	 <= SQL_DIALECT_V5) ) )
					ERRD_post (isc_sqlerr,
					   isc_arg_number, (SLONG) -817,
					   isc_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   isc_arg_number, (SLONG) db_dialect,
					   0);
				if (client_dialect <= SQL_DIALECT_V5)
					{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double); 
					}
				else
					{
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					isc_arg_end );
					ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					isc_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				lex.g_field->fld_dtype = dtype_int64;
				lex.g_field->fld_length = sizeof (SINT64);
					}
				}
			else
				{
				if ((IPTR) yyvsp[-3] < 5)
					{
					lex.g_field->fld_dtype = dtype_short; 
					lex.g_field->fld_length = sizeof (SSHORT); 
					}
				else
					{
					lex.g_field->fld_dtype = dtype_long; 
					lex.g_field->fld_length = sizeof (SLONG); 
					}
				}
			lex.g_field->fld_precision = (USHORT)(IPTR) yyvsp[-3];
			lex.g_field->fld_scale = - (SSHORT)(IPTR) yyvsp[-1];
			}
break;
case 586:
  if (!yytrial)
{ 
			if ((IPTR) yyvsp[0] > 7)
				{
				lex.g_field->fld_dtype = dtype_double;
				lex.g_field->fld_length = sizeof (double); 
				}
			else
				{
				lex.g_field->fld_dtype = dtype_real; 
				lex.g_field->fld_length = sizeof (float);
				}
			}
break;
case 587:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_double; 
			lex.g_field->fld_length = sizeof (double); 
			}
break;
case 588:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_real; 
			lex.g_field->fld_length = sizeof (float); 
			}
break;
case 589:
  if (!yytrial)
{ 
			lex.g_field->fld_dtype = dtype_double; 
			lex.g_field->fld_length = sizeof (double); 
			}
break;
case 590:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 591:
  if (!yytrial)
{ yyval = 0; }
break;
case 595:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-2],
				MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 596:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-2],
				MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64)); }
break;
case 597:
  if (!yytrial)
{ yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
				make_node(nod_negate, 1, MAKE_constant((dsql_str*) yyvsp[0], CONSTANT_SINT64))); }
break;
case 601:
  if (!yytrial)
{ yyval = make_node (nod_user_savepoint, 1, yyvsp[0]); }
break;
case 602:
  if (!yytrial)
{ yyval = make_node (nod_release_savepoint, 2, yyvsp[-1], yyvsp[0]); }
break;
case 603:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 604:
  if (!yytrial)
{ yyval = 0; }
break;
case 605:
  if (!yytrial)
{ yyval = make_node (nod_undo_savepoint, 1, yyvsp[0]); }
break;
case 608:
  if (!yytrial)
{ yyval = make_node (nod_commit, e_commit_count, yyvsp[0]); }
break;
case 609:
  if (!yytrial)
{ yyval = make_node (nod_rollback, e_rollback_count, yyvsp[0]); }
break;
case 612:
  if (!yytrial)
{ yyval = make_node (nod_retain, 0, NULL); }
break;
case 613:
  if (!yytrial)
{ yyval = NULL; }
break;
case 615:
  if (!yytrial)
{ yyval = NULL; }
break;
case 616:
  if (!yytrial)
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 618:
  if (!yytrial)
{ yyval = NULL; }
break;
case 620:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 627:
  if (!yytrial)
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 628:
  if (!yytrial)
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 629:
  if (!yytrial)
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 630:
  if (!yytrial)
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 631:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 633:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 634:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 635:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 636:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 637:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 638:
  if (!yytrial)
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 639:
  if (!yytrial)
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 640:
  if (!yytrial)
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 641:
  if (!yytrial)
{ yyval = 0; }
break;
case 642:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_NO_AUTO_UNDO, 0, NULL); }
break;
case 643:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_IGNORE_LIMBO, 0, NULL); }
break;
case 644:
  if (!yytrial)
{ yyval = make_flag_node(nod_tra_misc, NOD_RESTART_REQUESTS, 0, NULL); }
break;
case 645:
  if (!yytrial)
{ yyval = make_node(nod_lock_timeout, 1, MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG)); }
break;
case 646:
  if (!yytrial)
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 647:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_SHARED; }
break;
case 648:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_PROTECTED ; }
break;
case 649:
  if (!yytrial)
{ yyval = (dsql_nod*) 0; }
break;
case 650:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_READ; }
break;
case 651:
  if (!yytrial)
{ yyval = (dsql_nod*) NOD_WRITE; }
break;
case 653:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 654:
  if (!yytrial)
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 655:
  if (!yytrial)
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT)(IPTR) yyvsp[-1] | (SSHORT)(IPTR) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 656:
  if (!yytrial)
{ yyval = 0; }
break;
case 658:
  if (!yytrial)
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 659:
  if (!yytrial)
{ yyval = make_node (nod_set_statistics, (int) e_stat_count, yyvsp[0]); }
break;
case 660:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-2], NULL, NULL, yyvsp[0]); }
break;
case 661:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-3], yyvsp[-2], NULL, yyvsp[0]); }
break;
case 662:
  if (!yytrial)
{ yyval = make_node(nod_comment, e_comment_count, yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[0]); }
break;
case 663:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_database, CONSTANT_SLONG); }
break;
case 664:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_domain, CONSTANT_SLONG); }
break;
case 665:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_relation, CONSTANT_SLONG); }
break;
case 666:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_view, CONSTANT_SLONG); }
break;
case 667:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_procedure, CONSTANT_SLONG); }
break;
case 668:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_trigger, CONSTANT_SLONG); }
break;
case 669:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_udf, CONSTANT_SLONG); }
break;
case 670:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_blob_filter, CONSTANT_SLONG); }
break;
case 671:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_exception, CONSTANT_SLONG); }
break;
case 672:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_generator, CONSTANT_SLONG); }
break;
case 673:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_generator, CONSTANT_SLONG); }
break;
case 674:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_index, CONSTANT_SLONG); }
break;
case 675:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_role, CONSTANT_SLONG); }
break;
case 676:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_charset, CONSTANT_SLONG); }
break;
case 677:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_collation, CONSTANT_SLONG); }
break;
case 678:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_relation, CONSTANT_SLONG); }
break;
case 679:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) ddl_procedure, CONSTANT_SLONG); }
break;
case 680:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 682:
  if (!yytrial)
{ yyval = NULL; }
break;
case 683:
  if (!yytrial)
{ yyval = make_node (nod_select, (int) e_select_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 684:
  if (!yytrial)
{ yyval = make_node (nod_for_update, (int) e_fpd_count, yyvsp[0]); }
break;
case 685:
  if (!yytrial)
{ yyval = NULL; }
break;
case 686:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 687:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 688:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 689:
  if (!yytrial)
{ yyval = NULL; }
break;
case 690:
  if (!yytrial)
{ yyval = make_node (nod_select_expr, (int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 691:
  if (!yytrial)
{ yyval = make_flag_node (nod_select_expr, NOD_SELECT_EXPR_VALUE,
					(int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 692:
  if (!yytrial)
{ yyval = make_flag_node (nod_select_expr, NOD_SELECT_EXPR_VALUE | NOD_SELECT_EXPR_SINGLETON,
					(int) e_sel_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 694:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 695:
  if (!yytrial)
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 697:
  if (!yytrial)
{ yyval = make_node (nod_query_spec, (int) e_qry_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 698:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 699:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, NULL, yyvsp[0]); }
break;
case 700:
  if (!yytrial)
{ yyval = make_node (nod_limit, (int) e_limit_count, yyvsp[0], NULL); }
break;
case 701:
  if (!yytrial)
{ yyval = 0; }
break;
case 702:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 703:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 704:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 705:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 706:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 707:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 708:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 709:
  if (!yytrial)
{ yyval = 0; }
break;
case 710:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 711:
  if (!yytrial)
{ yyval = 0; }
break;
case 713:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 715:
  if (!yytrial)
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 718:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 720:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 725:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 726:
  if (!yytrial)
{ yyval = make_node(nod_derived_table, (int) e_derived_table_count, yyvsp[-4], yyvsp[-1], yyvsp[0]); }
break;
case 728:
  if (!yytrial)
{ yyval = NULL; }
break;
case 729:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 730:
  if (!yytrial)
{ yyval = NULL; }
break;
case 732:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 736:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-3],
				make_node (nod_join_inner, (int) 0, NULL), yyvsp[0], NULL); }
break;
case 737:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-4], yyvsp[-2], yyvsp[0],
					make_node (nod_flag, 0, NULL)); }
break;
case 738:
  if (!yytrial)
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 741:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 742:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 743:
  if (!yytrial)
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-3], yyvsp[0], yyvsp[-2]); }
break;
case 744:
  if (!yytrial)
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 745:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 746:
  if (!yytrial)
{ yyval = NULL; }
break;
case 748:
  if (!yytrial)
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 749:
  if (!yytrial)
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 750:
  if (!yytrial)
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 751:
  if (!yytrial)
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 752:
  if (!yytrial)
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 753:
  if (!yytrial)
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 754:
  if (!yytrial)
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 757:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 758:
  if (!yytrial)
{ yyval = NULL; }
break;
case 760:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 762:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 763:
  if (!yytrial)
{ yyval = NULL; }
break;
case 764:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 765:
  if (!yytrial)
{ yyval = NULL; }
break;
case 766:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 767:
  if (!yytrial)
{ yyval = NULL; }
break;
case 768:
  if (!yytrial)
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 769:
  if (!yytrial)
{ yyval = 0; }
break;
case 770:
  if (!yytrial)
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 771:
  if (!yytrial)
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 772:
  if (!yytrial)
{ yyval = 0; }
break;
case 773:
  if (!yytrial)
{ yyval = 0; }
break;
case 775:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 776:
  if (!yytrial)
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 779:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 780:
  if (!yytrial)
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 781:
  if (!yytrial)
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 782:
  if (!yytrial)
{ yyval = make_node (nod_index_order, 2, yyvsp[-1], yyvsp[0]); }
break;
case 784:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 785:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 786:
  if (!yytrial)
{ yyval = 0; }
break;
case 787:
  if (!yytrial)
{ yyval = make_list (yyvsp[0]); }
break;
case 788:
  if (!yytrial)
{ yyval = 0; }
break;
case 790:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 791:
  if (!yytrial)
{ yyval = make_node (nod_order, (int) e_order_count, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 792:
  if (!yytrial)
{ yyval = 0; }
break;
case 793:
  if (!yytrial)
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 794:
  if (!yytrial)
{ yyval = 0; }
break;
case 795:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) NOD_NULLS_FIRST, CONSTANT_SLONG); }
break;
case 796:
  if (!yytrial)
{ yyval = MAKE_constant((dsql_str*) NOD_NULLS_LAST, CONSTANT_SLONG); }
break;
case 797:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 798:
  if (!yytrial)
{ yyval = 0; }
break;
case 799:
  if (!yytrial)
{ yyval = make_node (nod_rows, (int) e_rows_count, NULL, yyvsp[0]); }
break;
case 800:
  if (!yytrial)
{ yyval = make_node (nod_rows, (int) e_rows_count,
				make_node (nod_subtract, 2, yyvsp[-2],
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)),
				make_node (nod_add, 2,
					make_node (nod_subtract, 2, yyvsp[0], yyvsp[-2]),
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG))); }
break;
case 801:
  if (!yytrial)
{ yyval = NULL; }
break;
case 802:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) e_ins_count, 
				yyvsp[-6], make_list (yyvsp[-5]), make_list (yyvsp[-2]), NULL, yyvsp[0]); }
break;
case 803:
  if (!yytrial)
{ yyval = make_node (nod_insert, (int) e_ins_count,
				yyvsp[-2], yyvsp[-1], NULL, yyvsp[0], NULL); }
break;
case 806:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) e_del_count,
				yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 807:
  if (!yytrial)
{ yyval = make_node (nod_delete, (int) e_del_count,
				yyvsp[-1], NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 810:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) e_upd_count,
				yyvsp[-6], make_list (yyvsp[-4]), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 811:
  if (!yytrial)
{ yyval = make_node (nod_update, (int) e_upd_count,
				yyvsp[-3], make_list (yyvsp[-1]), NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 812:
  if (!yytrial)
{ yyval = make_node (nod_returning, (int) e_ret_count,
					make_list (yyvsp[0]), NULL); }
break;
case 813:
  if (!yytrial)
{ yyval = make_node (nod_returning, (int) e_ret_count,
					make_list (yyvsp[-2]), make_list (yyvsp[0])); }
break;
case 814:
  if (!yytrial)
{ yyval = NULL; }
break;
case 815:
  if (!yytrial)
{ yyval = make_node (nod_cursor, (int) e_cur_count, yyvsp[0], NULL, NULL, NULL); }
break;
case 817:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 818:
  if (!yytrial)
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 819:
  if (!yytrial)
{ yyval = make_node (nod_assign, 2, yyvsp[0], make_node (nod_null, 0, NULL)); }
break;
case 820:
  if (!yytrial)
{ yyval = make_node (nod_get_segment, (int) e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 821:
  if (!yytrial)
{ yyval = make_node (nod_put_segment, (int) e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 822:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 823:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 824:
  if (!yytrial)
{ yyval = NULL; }
break;
case 827:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 828:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 829:
  if (!yytrial)
{ yyval = NULL; }
break;
case 830:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 833:
  if (!yytrial)
{ yyval = NULL; }
break;
case 834:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 836:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 838:
  if (!yytrial)
{ yyval = NULL; }
break;
case 839:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 841:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 843:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 844:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 845:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 847:
  if (!yytrial)
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 849:
  if (!yytrial)
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 850:
  if (!yytrial)
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 851:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 864:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 865:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 866:
  if (!yytrial)
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 867:
  if (!yytrial)
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 868:
  if (!yytrial)
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 869:
  if (!yytrial)
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 870:
  if (!yytrial)
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 871:
  if (!yytrial)
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 872:
  if (!yytrial)
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 873:
  if (!yytrial)
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 874:
  if (!yytrial)
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 875:
  if (!yytrial)
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 876:
  if (!yytrial)
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 877:
  if (!yytrial)
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 878:
  if (!yytrial)
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 879:
  if (!yytrial)
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 880:
  if (!yytrial)
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 881:
  if (!yytrial)
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 882:
  if (!yytrial)
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 883:
  if (!yytrial)
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 884:
  if (!yytrial)
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 885:
  if (!yytrial)
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 886:
  if (!yytrial)
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 887:
  if (!yytrial)
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 888:
  if (!yytrial)
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 891:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_equiv, 2, yyvsp[-4], yyvsp[0])); }
break;
case 892:
  if (!yytrial)
{ yyval = make_node (nod_equiv, 2, yyvsp[-5], yyvsp[0]); }
break;
case 893:
  if (!yytrial)
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 894:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 895:
  if (!yytrial)
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 896:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 897:
  if (!yytrial)
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 898:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 899:
  if (!yytrial)
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 900:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 901:
  if (!yytrial)
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 902:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 903:
  if (!yytrial)
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 904:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 905:
  if (!yytrial)
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 906:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 907:
  if (!yytrial)
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 908:
  if (!yytrial)
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 909:
  if (!yytrial)
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 910:
  if (!yytrial)
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 911:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)); }
break;
case 912:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 2, CONSTANT_SLONG)); }
break;
case 913:
  if (!yytrial)
{ yyval = make_node (nod_eql, 2,
					make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_trigger_action, CONSTANT_SLONG)),
						MAKE_constant ((dsql_str*) 3, CONSTANT_SLONG)); }
break;
case 915:
  if (!yytrial)
{ yyval = make_list (yyvsp[-1]); }
break;
case 916:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 927:
  if (!yytrial)
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 928:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 929:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
				  yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 930:
  if (!yytrial)
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 931:
  if (!yytrial)
{ yyval = make_node (nod_collate, (int) e_coll_count, (dsql_nod*) yyvsp[0], yyvsp[-2]); }
break;
case 932:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
				  yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 933:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				   yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
				   yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 934:
  if (!yytrial)
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
				  yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 935:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 936:
  if (!yytrial)
{ yyval = yyvsp[-1]; }
break;
case 940:
  if (!yytrial)
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 941:
  if (!yytrial)
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 942:
  if (!yytrial)
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
						}
break;
case 945:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "DATE",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "DATE",
					0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 946:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			yyval = make_node (nod_current_time, 1, yyvsp[0]);
			}
break;
case 947:
  if (!yytrial)
{ yyval = make_node (nod_current_timestamp, 1, yyvsp[0]); }
break;
case 948:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[-1], CONSTANT_SLONG); }
break;
case 949:
  if (!yytrial)
{ yyval = NULL; }
break;
case 950:
  if (!yytrial)
{ yyval = make_node (nod_array, (int) e_ary_count, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 952:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 954:
  if (!yytrial)
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 955:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_STRING); }
break;
case 956:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SLONG); }
break;
case 957:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 958:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SINT64); }
break;
case 959:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_SINT64); }
break;
case 961:
  if (!yytrial)
{ yyval = MAKE_str_constant ((dsql_str*) yyvsp[0], lex.att_charset); }
break;
case 962:
  if (!yytrial)
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "DATE",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "DATE",
					0);
			yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_DATE);
			}
break;
case 963:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_dialect_datatype_unsupport,
					isc_arg_number, (SLONG) client_dialect,
					isc_arg_string, "TIME",
					0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
				ERRD_post (isc_sqlerr, isc_arg_number, (SLONG) -104, 
					isc_arg_gds, isc_sql_db_dialect_dtype_unsupport,
					isc_arg_number, (SLONG) db_dialect,
					isc_arg_string, "TIME",
					0);
			yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_TIME);
			}
break;
case 964:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 965:
  if (!yytrial)
{ yyval = make_parameter (); }
break;
case 966:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 967:
  if (!yytrial)
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 968:
  if (!yytrial)
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 969:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_connection_id, CONSTANT_SLONG)); }
break;
case 970:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_transaction_id, CONSTANT_SLONG)); }
break;
case 971:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_gdscode, CONSTANT_SLONG)); }
break;
case 972:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_sqlcode, CONSTANT_SLONG)); }
break;
case 973:
  if (!yytrial)
{ yyval = make_node (nod_internal_info, (int) e_internal_info_count,
						MAKE_constant ((dsql_str*) internal_rows_affected, CONSTANT_SLONG)); }
break;
case 974:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 975:
  if (!yytrial)
{ ((dsql_str*) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 977:
  if (!yytrial)
{ yyval = (dsql_nod*) - (IPTR) yyvsp[0]; }
break;
case 978:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_POS_MAX)
				yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 979:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_NEG_MAX)
				yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 980:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] == 0)
				yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 981:
  if (!yytrial)
{ if ((IPTR) yyvsp[0] > SHRT_UNSIGNED_MAX)
				yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 983:
  if (!yytrial)
{ yyval = (dsql_nod*) - (IPTR) yyvsp[0]; }
break;
case 984:
  if (!yytrial)
{ yyval = yyvsp[0];}
break;
case 988:
  if (!yytrial)
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 989:
  if (!yytrial)
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 990:
  if (!yytrial)
{ yyval = make_flag_node (nod_agg_count,
									   NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 991:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
				  yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 992:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
				  yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 993:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
				  yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 994:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
				  yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 995:
  if (!yytrial)
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 996:
  if (!yytrial)
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 997:
  if (!yytrial)
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 998:
  if (!yytrial)
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 999:
  if (!yytrial)
{ yyval = make_node (nod_agg_list, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 1000:
  if (!yytrial)
{ yyval = make_flag_node (nod_agg_list, NOD_AGG_DISTINCT, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 1001:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 1002:
  if (!yytrial)
{ yyval = MAKE_str_constant (MAKE_cstring(","), lex.att_charset); }
break;
case 1003:
  if (!yytrial)
{ yyval = MAKE_str_constant ((dsql_str*) yyvsp[0], lex.att_charset); }
break;
case 1008:
  if (!yytrial)
{ yyval = make_node (nod_extract, (int) e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 1012:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_bit, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1013:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_char, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1014:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_char, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1015:
  if (!yytrial)
{ yyval = make_node(nod_strlen, (int) e_strlen_count,
					MAKE_constant((dsql_str*)blr_strlen_octet, CONSTANT_SLONG), yyvsp[-1]); }
break;
case 1018:
  if (!yytrial)
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 1019:
  if (!yytrial)
{ yyval = make_node (nod_lowcase, 1, yyvsp[-1]); }
break;
case 1020:
  if (!yytrial)
{ yyval = make_node (nod_substr, (int) e_substr_count, yyvsp[-4],
				make_node (nod_subtract, 2, yyvsp[-2],
					MAKE_constant ((dsql_str*) 1, CONSTANT_SLONG)), yyvsp[-1]); }
break;
case 1021:
  if (!yytrial)
{ yyval = yyvsp[0]; }
break;
case 1022:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*) SHRT_POS_MAX, CONSTANT_SLONG); }
break;
case 1023:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, yyvsp[-4], yyvsp[-3], yyvsp[-1]); }
break;
case 1024:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, 
				MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG), yyvsp[-3], yyvsp[-1]); }
break;
case 1025:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count, yyvsp[-3], NULL, yyvsp[-1]); }
break;
case 1026:
  if (!yytrial)
{ yyval = make_node (nod_trim, (int) e_trim_count,
				MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG), NULL, yyvsp[-1]); }
break;
case 1027:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_both, CONSTANT_SLONG); }
break;
case 1028:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_trailing, CONSTANT_SLONG); }
break;
case 1029:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_trim_leading, CONSTANT_SLONG); }
break;
case 1030:
  if (!yytrial)
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 1031:
  if (!yytrial)
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 1032:
  if (!yytrial)
{ yyval = make_node (nod_cast, (int) e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 1035:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 1036:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, yyvsp[-5], yyvsp[-3]), yyvsp[-1]); }
break;
case 1037:
  if (!yytrial)
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 1040:
  if (!yytrial)
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 1041:
  if (!yytrial)
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 1042:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 1043:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 1044:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 1045:
  if (!yytrial)
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 1046:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 1047:
  if (!yytrial)
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 1051:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_gen_id2, 2, yyvsp[0],
						MAKE_constant((dsql_str*) 1, CONSTANT_SLONG));
			  else
				  yyval = make_node (nod_gen_id, 2, yyvsp[0],
						MAKE_constant((dsql_str*) 1, CONSTANT_SLONG));
			}
break;
case 1052:
  if (!yytrial)
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				  yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
			  else
				  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
			}
break;
case 1053:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_year, CONSTANT_SLONG); }
break;
case 1054:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_month, CONSTANT_SLONG); }
break;
case 1055:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_day, CONSTANT_SLONG); }
break;
case 1056:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_hour, CONSTANT_SLONG); }
break;
case 1057:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_minute, CONSTANT_SLONG); }
break;
case 1058:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_second, CONSTANT_SLONG); }
break;
case 1059:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 1060:
  if (!yytrial)
{ yyval = MAKE_constant ((dsql_str*)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 1065:
  if (!yytrial)
{ yyval = make_node (nod_null, 0, NULL); }
break;

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%p]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%p]: state %d, reading %d (%s)\n", 
	       yydepth, yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%p]: after reduction, shifting from state %d to state %d\n",
           yydepth, yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%p]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, bool* stmt_ambiguous) {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous);
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
