#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (DSQL_yychar=(-1))
#define yyerrok (DSQL_yyerrflag=0)
#define YYRECOVERING (DSQL_yyerrflag!=0)
#define YYPREFIX "yy"
/* 
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		parse.y
 *	DESCRIPTION:	Dynamic SQL parser
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2002-02-24 Sean Leyne - Code Cleanup of old Win 3.1 port (WINDOWS_ONLY)
 * 2001.05.20 Neil McCalden: Allow a udf to be used in a 'group by' clause.
 * 2001.05.30 Claudio Valderrama: DROP TABLE and DROP VIEW lead now to two
 *   different node types so DDL can tell which is which.
 * 2001.06.13 Claudio Valderrama: SUBSTRING is being surfaced.
 * 2001.06.30 Claudio valderrama: Feed (line,column) for each node. See node.h.
 * 2001.07.10 Claudio Valderrama: Better (line,column) report and "--" for comments.
 * 2001.07.28 John Bellardo: Changes to support parsing LIMIT and FIRST
 * 2001.08.03 John Bellardo: Finalized syntax for LIMIT, change LIMIT to SKIP
 * 2001.08.05 Claudio Valderrama: closed Bug #448062 and other spaces that appear
 *   in rdb$*_source fields when altering domains plus one unexpected null pointer.
 * 2001.08.12 Claudio Valderrama: adjust SUBSTRING's starting pos argument here
 *   and not in gen.c; this closes Bug #450301.
 * 2001.10.01 Claudio Valderrama: enable explicit GRANT...to ROLE role_name.
 * 2001.10.06 Claudio Valderrama: Honor explicit USER keyword in GRANTs and REVOKEs.
 * 2002.07.05 Mark O'Donohue: change keyword DEBUG to KW_DEBUG to avoid
 *            clashes with normal DEBUG macro.
 * 2002.07.30 Arno Brinkman:  
 * 2002.07.30 	Let IN predicate handle value_expressions
 * 2002.07.30 	tokens CASE, NULLIF, COALESCE added
 * 2002.07.30 	See block < CASE expression > what is added to value as case_expression
 * 2002.07.30 	function is split up into aggregate_function, numeric_value_function, string_value_function, generate_value_function
 * 2002.07.30 	new group_by_function and added to grp_column_elem
 * 2002.07.30 	cast removed from function and added as cast_specification to value
 * 2002.08.04 Claudio Valderrama: allow declaring and defining variables at the same time
 * 2002.08.04 Dmitry Yemanov: ALTER VIEW
 * 2002.08.06 Arno Brinkman: ordinal added to grp_column_elem for using positions in group by
 * 2002.08.07 Dmitry Yemanov: INT64/LARGEINT are replaced with BIGINT and available in dialect 3 only
 * 2002.08.31 Dmitry Yemanov: allowed user-defined index names for PK/FK/UK constraints
 * 2002.09.01 Dmitry Yemanov: RECREATE VIEW
 */


#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
#include <windows.h>
/*#include <wincon.h>*/
#endif

#include "firebird.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../jrd/common.h"
#include <stdarg.h>

#include "gen/iberror.h"
#include "../dsql/dsql.h"
#include "../dsql/node.h"
#include "../dsql/sym.h"
#include "../jrd/gds.h"
#include "../jrd/flags.h"
#include "../dsql/alld_proto.h"
#include "../dsql/errd_proto.h"
#include "../dsql/hsh_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/parse_proto.h"
#include "../dsql/keywords.h"
#include "../jrd/gds_proto.h"
#include "../jrd/thd_proto.h"
/* #include "../jrd/err_proto.h" */
#include "../wal/wal.h"

/* Can't include ../jrd/err_proto.h here because it pulls jrd.h. */
#if !defined(_JRD_ERR_PROTO_H_)
extern "C" TEXT *DLL_EXPORT ERR_string(CONST TEXT*, int);
#endif

ASSERT_FILENAME

static void	yyerror (TEXT *);

/* since UNIX isn't standard, we have to define
   stuff which is in <limits.h> (which isn't available
   on all UNIXes... */

#define SHRT_POS_MAX		32767
#define SHRT_UNSIGNED_MAX	65535
#define SHRT_NEG_MAX		32768
#define LONG_POS_MAX		2147483647
#define POSITIVE		0
#define NEGATIVE		1
#define UNSIGNED		2

#define MIN_CACHE_BUFFERS       250
#define DEF_CACHE_BUFFERS       1000

/* Fix 69th procedure problem - solution from Oleg Loa */
#define YYSTACKSIZE		2048
#define YYMAXDEPTH		2048

#define YYSTYPE		NOD
#if defined(DEBUG) || defined(DEV_BUILD)
#define YYDEBUG		1
#endif

static CONST UCHAR
	INTERNAL_FIELD_NAME [] = "DSQL internal"; /* NTX: placeholder */
static CONST UCHAR
	NULL_STRING [] = "";	

#define TRIGGER_TYPE_SUFFIX(slot1, slot2, slot3) \
	((slot1 << 1) | (slot2 << 3) | (slot3 << 5))

extern "C" {

#ifndef SHLIB_DEFS
NOD		DSQL_parse;
#else
extern NOD	DSQL_parse;
#endif

}	/* extern "C"*/
static FLD	g_field;
static FIL	g_file;
static NOD	g_field_name;
static TEXT	*beginning;
static SSHORT	log_defined, cache_defined;
static void	yyerror (TEXT *);

#define ACTIVE 257
#define ADD 258
#define AFTER 259
#define ALL 260
#define ALTER 261
#define AND 262
#define ANY 263
#define AS 264
#define ASC 265
#define AT 266
#define AVG 267
#define AUTO 268
#define BASENAME 269
#define BEFORE 270
#define BEGIN 271
#define BETWEEN 272
#define BLOB 273
#define BY 274
#define CACHE 275
#define CAST 276
#define CHARACTER 277
#define CHECK 278
#define CHECK_POINT_LEN 279
#define COLLATE 280
#define COLLATION 281
#define COMMA 282
#define COMMIT 283
#define COMMITTED 284
#define COMPUTED 285
#define CONCATENATE 286
#define CONDITIONAL 287
#define CONSTRAINT 288
#define CONTAINING 289
#define COUNT 290
#define CREATE 291
#define CSTRING 292
#define CURRENT 293
#define CURSOR 294
#define DATABASE 295
#define DATE 296
#define DB_KEY 297
#define KW_DEBUG 298
#define DECIMAL 299
#define DECLARE 300
#define DEFAULT 301
#define DELETE 302
#define DESC 303
#define DISTINCT 304
#define DO 305
#define DOMAIN 306
#define DROP 307
#define ELSE 308
#define END 309
#define ENTRY_POINT 310
#define EQL 311
#define ESCAPE 312
#define EXCEPTION 313
#define EXECUTE 314
#define EXISTS 315
#define EXIT 316
#define EXTERNAL 317
#define FILTER 318
#define FOR 319
#define FOREIGN 320
#define FROM 321
#define FULL 322
#define FUNCTION 323
#define GDSCODE 324
#define GEQ 325
#define GENERATOR 326
#define GEN_ID 327
#define GRANT 328
#define GROUP 329
#define GROUP_COMMIT_WAIT 330
#define GTR 331
#define HAVING 332
#define IF 333
#define IN 334
#define INACTIVE 335
#define INNER 336
#define INPUT_TYPE 337
#define INDEX 338
#define INSERT 339
#define INTEGER 340
#define INTO 341
#define IS 342
#define ISOLATION 343
#define JOIN 344
#define KEY 345
#define KW_CHAR 346
#define KW_DEC 347
#define KW_DOUBLE 348
#define KW_FILE 349
#define KW_FLOAT 350
#define KW_INT 351
#define KW_LONG 352
#define KW_NULL 353
#define KW_NUMERIC 354
#define KW_UPPER 355
#define KW_VALUE 356
#define LENGTH 357
#define LOGFILE 358
#define LPAREN 359
#define LEFT 360
#define LEQ 361
#define LEVEL 362
#define LIKE 363
#define LOG_BUF_SIZE 364
#define LSS 365
#define MANUAL 366
#define MAXIMUM 367
#define MAX_SEGMENT 368
#define MERGE 369
#define MESSAGE 370
#define MINIMUM 371
#define MODULE_NAME 372
#define NAMES 373
#define NATIONAL 374
#define NATURAL 375
#define NCHAR 376
#define NEQ 377
#define NO 378
#define NOT 379
#define NOT_GTR 380
#define NOT_LSS 381
#define NUM_LOG_BUFS 382
#define OF 383
#define ON 384
#define ONLY 385
#define OPTION 386
#define OR 387
#define ORDER 388
#define OUTER 389
#define OUTPUT_TYPE 390
#define OVERFLOW 391
#define PAGE 392
#define PAGES 393
#define PAGE_SIZE 394
#define PARAMETER 395
#define PASSWORD 396
#define PLAN 397
#define POSITION 398
#define POST_EVENT 399
#define PRECISION 400
#define PRIMARY 401
#define PRIVILEGES 402
#define PROCEDURE 403
#define PROTECTED 404
#define RAW_PARTITIONS 405
#define READ 406
#define REAL 407
#define REFERENCES 408
#define RESERVING 409
#define RETAIN 410
#define RETURNING_VALUES 411
#define RETURNS 412
#define REVOKE 413
#define RIGHT 414
#define RPAREN 415
#define ROLLBACK 416
#define SEGMENT 417
#define SELECT 418
#define SET 419
#define SHADOW 420
#define SHARED 421
#define SINGULAR 422
#define SIZE 423
#define SMALLINT 424
#define SNAPSHOT 425
#define SOME 426
#define SORT 427
#define SQLCODE 428
#define STABILITY 429
#define STARTING 430
#define STATISTICS 431
#define SUB_TYPE 432
#define SUSPEND 433
#define SUM 434
#define TABLE 435
#define THEN 436
#define TO 437
#define TRANSACTION 438
#define TRIGGER 439
#define UNCOMMITTED 440
#define UNION 441
#define UNIQUE 442
#define UPDATE 443
#define USER 444
#define VALUES 445
#define VARCHAR 446
#define VARIABLE 447
#define VARYING 448
#define VERSION 449
#define VIEW 450
#define WAIT 451
#define WHEN 452
#define WHERE 453
#define WHILE 454
#define WITH 455
#define WORK 456
#define WRITE 457
#define FLOAT 458
#define NUMBER 459
#define NUMERIC 460
#define SYMBOL 461
#define STRING 462
#define INTRODUCER 463
#define ACTION 464
#define ADMIN 465
#define CASCADE 466
#define FREE_IT 467
#define RESTRICT 468
#define ROLE 469
#define COLUMN 470
#define TYPE 471
#define EXTRACT 472
#define YEAR 473
#define MONTH 474
#define DAY 475
#define HOUR 476
#define MINUTE 477
#define SECOND 478
#define WEEKDAY 479
#define YEARDAY 480
#define TIME 481
#define TIMESTAMP 482
#define CURRENT_DATE 483
#define CURRENT_TIME 484
#define CURRENT_TIMESTAMP 485
#define NUMBER64BIT 486
#define SCALEDINT 487
#define CURRENT_USER 488
#define CURRENT_ROLE 489
#define KW_BREAK 490
#define SUBSTRING 491
#define RECREATE 492
#define KW_DESCRIPTOR 493
#define FIRST 494
#define SKIP 495
#define CONNECTION_ID 496
#define TRANSACTION_ID 497
#define BIGINT 498
#define CASE 499
#define NULLIF 500
#define COALESCE 501
#define USING 502
#define NULLS 503
#define LAST 504
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    9,    9,    9,    9,    9,   21,   21,   20,   20,   20,
   31,   31,   24,   32,   32,   32,   32,   32,   23,   23,
   29,   29,   25,   14,   14,   14,   14,   14,   14,   14,
   35,   26,   26,   26,   26,   36,   36,   36,   36,   22,
   22,   37,   37,   37,   27,   27,   42,   28,   28,   43,
   43,    6,   44,   44,   46,   51,   51,   51,   48,   48,
   48,   55,   55,   56,   56,   49,   49,   58,   58,   58,
   58,   58,   45,    5,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   12,   76,   76,   76,   13,
   80,   80,   80,   63,   63,   66,   66,   66,   74,   90,
   90,   90,   91,   91,   92,   92,   93,   93,   97,   97,
   73,  100,  100,  102,  102,  103,  103,  106,  106,  107,
  108,  108,  109,  110,   71,   75,   72,   94,   94,  113,
  114,  114,  116,  116,  117,  117,  117,  117,  117,  115,
  115,  118,  118,  119,  119,  119,  119,  121,  121,  121,
  121,  120,  120,  125,  125,  124,   98,  126,  126,  127,
  130,  131,  131,  132,  128,  129,  129,  133,  133,  134,
  134,  135,  135,  135,   96,   96,   96,   68,   78,  136,
  136,  136,  137,  137,  138,  138,  139,  139,  139,  145,
   86,   86,  141,  141,  104,  104,   99,  149,  150,   57,
  142,  142,  105,  105,  105,  105,  105,  105,  143,  143,
  157,  157,  158,  160,  160,  160,  160,  160,  140,  159,
  159,  164,  164,  164,  164,  166,  167,  168,  162,  162,
  163,  161,  161,  161,  161,  161,  169,  170,  171,  171,
  171,  171,   67,   77,   81,  176,  172,  172,  173,  173,
  177,  177,  178,  174,  174,  179,  179,  180,  181,  181,
  182,  182,  183,  183,  175,  175,  175,  185,  185,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  188,  189,  190,  191,  191,  192,
  198,  194,  194,  194,  195,  195,  195,  196,  196,  196,
  196,  193,  197,  197,  186,  186,  203,  204,  204,  205,
  205,  205,  205,   11,  207,  207,  207,  208,  208,  208,
  208,  208,  208,   70,   79,   83,  213,  210,  214,  214,
  214,  215,  219,  224,  224,  225,  225,  226,  226,  147,
  212,   87,   89,  211,  211,   69,   82,  229,  229,  229,
  230,  233,  233,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  231,  231,
  232,    2,  236,  236,  236,  236,  236,  236,  236,  236,
  244,  245,  242,  242,  246,  246,  246,  246,  246,  246,
  246,  237,  237,  247,  247,  247,  247,  247,  247,  247,
  241,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  249,  249,  251,  251,  250,
  248,  248,  248,  243,  243,  239,  240,  240,  253,  253,
  253,  253,  254,  254,  238,  255,  255,  256,  256,    8,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  101,  101,  144,  144,  260,  260,  263,  263,
  265,  265,   52,   52,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  270,  270,  261,  261,  261,  261,  271,
  271,   60,   60,   60,   54,   54,  267,  267,  267,  264,
  264,  264,  275,  275,  275,  274,  274,  273,  273,  273,
  268,  268,  278,  276,  276,  276,  277,  277,  269,  269,
  269,  269,  279,  279,   17,   17,   17,  281,  281,  281,
    4,   15,  283,  283,  284,  284,  285,  285,  280,  286,
  286,  287,  287,  288,  288,  288,  288,  289,  289,  290,
  290,  291,  291,  293,  293,  293,  294,  294,  294,  295,
  295,  295,  292,  297,  297,  297,  298,  298,  296,  296,
  299,  301,  301,  300,  300,  282,   16,  302,  302,  302,
  303,  303,  306,  306,  307,  307,   64,   64,   64,  308,
  308,  308,  304,  304,  309,  309,  305,  217,  217,  218,
  218,  312,  312,  313,  313,  313,  310,  316,  316,  317,
  317,  318,  318,  319,  319,  320,  320,  200,  200,  322,
  322,  227,  227,   30,  228,  228,  228,  228,  228,  228,
  228,  228,  323,  323,  323,  324,  324,  324,  216,  216,
  216,  216,  221,  221,  325,  325,  326,  326,  326,  326,
  326,  328,  328,  328,  222,  222,  220,  220,  332,  332,
  332,  223,  223,  333,  334,  334,  334,  334,  334,  335,
  335,  336,  336,  337,  337,  338,  338,  338,  339,  339,
   10,   10,  341,  341,    7,    7,  342,  343,  344,   18,
   18,  345,  346,  347,  347,  187,  314,  314,    3,    3,
  349,  349,  349,  351,  351,   60,  350,  350,  352,  352,
   33,   33,   85,   84,   84,  340,  340,  353,  354,  354,
  201,  201,  201,  146,  348,  348,  111,  111,  111,  111,
  356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
  356,  357,  357,  357,  357,  357,  357,  357,  357,  362,
  362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
  362,  362,  362,  362,  362,  368,  368,  358,  358,  359,
  359,  359,  359,  360,  360,  364,  364,  365,  365,  365,
  365,  363,  366,  361,  361,  369,  369,  370,  367,  372,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,  156,  156,  156,  373,
  371,  371,  151,  151,  377,  377,  377,  377,  377,  375,
  375,  375,  375,  375,  378,  378,  378,  378,  378,  378,
  378,  378,  378,  378,  209,  152,  152,  153,  154,  154,
   50,   50,   19,   19,  235,  379,   53,  123,  266,  266,
   95,  374,  374,  374,  374,  380,  380,  380,  380,  380,
  380,  380,  380,  380,  380,  380,  381,  329,  330,  330,
  330,  327,  327,  376,  331,  331,  383,  383,  384,  384,
  385,  385,  388,  388,  386,  386,  391,  391,  390,  387,
  389,  382,  382,  382,  382,  382,  382,  382,  382,  311,
  311,  155,   47,  272,  122,  148,  355,  165,  202,  259,
   62,   59,  206,  112,   65,  315,   34,   40,  321,  258,
   38,   41,  199,   39,
};
static short yylen[] = {                                         2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    7,    8,    6,    7,    5,    1,    2,    1,    2,    1,
    1,    3,    1,    1,    1,    1,    2,    2,    3,    0,
    3,    0,    1,    7,    8,    6,    7,    6,    7,    4,
    3,    1,    3,    3,    3,    2,    2,    2,    2,    1,
    3,    1,    2,    2,    1,    3,    1,    1,    3,    1,
    2,    2,    2,    3,    8,    1,    1,    5,    0,    1,
    3,    1,    3,    2,    4,    1,    3,    2,    3,    4,
    4,    2,    9,    2,    3,    7,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    2,    2,    2,    1,    0,    1,    1,    6,    6,    1,
    1,    0,    0,    1,    0,    4,    0,    1,    1,    2,
    8,    1,    0,    3,    0,    0,    1,    1,    2,    1,
    1,    1,    2,    6,    1,    1,    3,    0,    1,    1,
    0,    1,    1,    2,    3,    4,    2,    2,    3,    0,
    1,    1,    2,    1,    1,    1,    4,    3,    3,    3,
    3,    1,    1,    6,    3,    1,    3,    1,    3,    2,
    1,    0,    2,    3,    1,    0,    1,    1,    2,    3,
    4,    0,    1,    2,    0,    1,    1,    5,    5,    3,
    2,    0,    1,    3,    1,    1,    6,    3,    2,    6,
    2,    1,    2,    2,    2,    0,    1,    1,    2,    0,
    2,    0,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    2,    2,    5,    1,    2,    3,    2,    2,
    0,    1,    1,    1,    1,    3,    4,    8,    4,    0,
    6,    1,    1,    2,    2,    0,    3,    3,    1,    2,
    2,    2,    8,    8,    8,    8,    3,    0,    2,    0,
    1,    3,    2,    1,    0,    1,    2,    6,    1,    0,
    2,    1,    1,    1,    2,    3,    4,    1,    2,    2,
    2,    3,    1,    1,    1,    1,    2,    3,    1,    2,
    1,    2,    2,    2,    6,    4,    7,    8,    6,    4,
    2,    1,    3,    0,    2,    4,    0,    1,    1,    3,
    3,    6,    3,    0,    1,    2,    4,    1,    3,    2,
    2,    2,    1,    4,    1,    3,    0,    1,    1,    1,
    3,    3,    3,    7,    7,    7,    7,    1,    1,    3,
    4,    9,    2,    1,    3,    1,    1,    6,    3,    0,
    0,    0,    0,    3,    0,    9,    9,    1,    1,    0,
    2,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    5,    5,    5,    5,    5,    5,    2,    0,
    4,    2,    3,    3,    2,    2,    2,    3,    3,    2,
    3,    6,    1,    2,    4,    3,    2,    2,    2,    2,
    3,    1,    3,    3,    3,    2,    2,    4,    4,    5,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    1,    0,    2,    2,    0,    1,    2,    2,    2,
    2,    2,    1,    3,    7,    1,    0,    1,    0,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
    2,    2,    1,    1,    1,    1,    4,    5,    1,    3,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    4,    4,    6,    5,    3,
    0,    2,    2,    0,    3,    0,    4,    1,    5,    4,
    1,    4,    1,    2,    2,    1,    1,    1,    2,    2,
    2,    2,    1,    0,    3,    5,    1,    1,    2,    3,
    1,    2,    3,    0,    1,    1,    1,    5,    5,    6,
    3,    2,    1,    0,    2,    0,    1,    0,    3,    1,
    0,    1,    2,    1,    1,    1,    1,    2,    2,    1,
    2,    3,    1,    1,    3,    3,    1,    2,    3,    1,
    2,    0,    2,    1,    1,    0,    1,    1,    1,    3,
    2,    3,    0,    1,    3,    4,    3,    1,    3,    4,
    3,    0,    1,    3,    4,    4,    1,    1,    0,    2,
    2,    0,    3,    0,    2,    0,    9,    1,    1,    1,
    1,    1,    3,    1,    2,    3,    2,    1,    3,    1,
    1,    6,    3,    3,    2,    3,    0,    1,    3,    1,
    1,    1,    2,    1,    1,    1,    2,    1,    2,    1,
    2,    0,    2,    4,    2,    2,    4,    2,    2,    1,
    1,    0,    3,    0,    1,    3,    1,    1,    1,    1,
    3,    1,    1,    1,    2,    0,    2,    0,    3,    5,
    0,    2,    0,    4,    1,    2,    1,    1,    0,    1,
    3,    2,    1,    1,    2,    1,    4,    2,    1,    3,
    8,    5,    1,    3,    1,    1,    4,    4,    4,    1,
    1,    5,    5,    1,    3,    3,    1,    1,    7,    7,
    5,    3,    0,    1,    1,    1,    2,    0,    1,    1,
    1,    0,    3,    1,    3,    1,    0,    3,    1,    3,
    1,    3,    3,    1,    1,    3,    1,    3,    3,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    1,    1,    5,    6,    3,
    4,    5,    6,    3,    4,    3,    4,    3,    4,    4,
    5,    4,    4,    3,    4,    1,    3,    3,    9,    9,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    1,    1,    1,    3,    1,    1,    1,    1,    1,    4,
    1,    3,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    1,    1,    1,    1,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    4,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    6,    6,    6,    8,
    4,    4,    3,    6,    1,    1,    6,    6,    1,    1,
    4,    6,    4,    5,    3,    5,    4,    5,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,
};
static short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,  545,  546,  547,    0,
  598,  705,  706,  710,  711,  456,    0,    0,    0,    0,
    0,    0,    0,  392,  553,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,    0,   94,    0,
  875,    0,   20,  873,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  470,    0,    0,   36,   33,   35,    0,   34,    0,  948,
    0,    0,    0,    0,   31,   67,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,
  661,    0,    0,    0,  950,  642,    0,    0,    0,    0,
    0,  106,    2,    0,    0,    0,    0,  440,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  441,  442,  443,  444,
  445,    0,  421,  941,    0,  945,    0,  400,  947,    0,
  397,    0,  644,  951,    0,  396,  954,    0,  395,    0,
  551,  871,    0,  150,  102,    0,  937,  103,    0,  217,
  744,    0,  944,  101,  145,    0,    0,   97,    0,  104,
  877,    0,   98,    0,   99,    0,  100,  146,  105,  607,
  608,    0,  876,  874,    0,  942,   73,    0,    0,  940,
  478,  471,    0,  477,  482,  472,  473,  480,  474,  475,
  476,  481,    0,   29,    0,   38,  731,   37,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  881,    0,  865,  653,  655,    0,  656,  658,
  930,  618,    0,  619,  659,    0,    0,    0,    0,    0,
    0,    0,  570,  559,    0,  562,  564,  565,  566,  567,
  573,  574,    0,  949,  643,    0,  107,    0,  108,    0,
  109,    0,    0,  599,    0,  597,    0,    0,    0,    0,
  457,    0,    0,  362,    0,  220,    0,  403,  393,  454,
  455,    0,    0,    0,    0,    0,    0,  412,    0,  368,
  369,    0,    0,  557,  555,  872,    0,    0,    0,    0,
    0,    0,    0,  153,  132,    0,   95,    0,    0,    0,
  110,    0,  121,  120,    0,    0,    0,    0,    0,    0,
  933,   74,    0,    0,    0,  707,  708,  479,    0,  932,
  847,  846,  845,    0,    0,  848,  849,    0,    0,  851,
  339,  340,  334,    0,  338,  843,  850,    0,  734,    0,
    0,   26,    0,    0,  952,    0,   70,   68,   66,   32,
    0,    0,    0,  736,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,  833,    0,    0,  835,    0,    0,
    0,  866,    0,    0,  837,  838,  839,  867,  868,    0,
  869,  870,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  741,  830,  831,  832,  836,  816,    0,  815,    0,
  819,  884,  885,  818,  812,  813,  814,  817,  882,  883,
  905,  906,  909,  910,    0,  621,    0,  718,    0,    0,
  622,    0,    0,  596,    0,  571,    0,  568,    0,  569,
  594,    0,  589,    0,    0,  563,    0,  745,  714,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,  603,
    0,  600,    0,  185,    0,    0,  129,  462,  172,  173,
    0,  460,    0,    0,    0,    0,  463,    0,  458,    0,
    0,  407,  409,  408,    0,  410,    0,  404,  218,    0,
    0,  271,    0,    0,    0,    0,  416,  417,    0,  447,
    0,    0,    0,    0,    0,    0,    0,  373,  372,  466,
    0,    0,  360,  149,    0,    0,  158,    0,  157,    0,
  164,  147,    0,  162,  165,  166,  154,    0,    0,  501,
  537,  504,    0,  538,    0,    0,  505,    0,    0,    0,
  528,  541,  500,  523,  502,  503,  498,  485,  362,  483,
  484,  486,    0,    0,  495,  496,  497,  499,    0,    0,
    0,    0,    0,  111,    0,  112,    0,  113,    0,  124,
    0,    0,  201,    0,    0,  360,    0,  220,    0,    0,
   82,    0,    0,  726,    0,    0,    0,    0,    0,    0,
    0,    0,  747,  751,  752,  753,  754,  755,  756,  757,
  758,  759,  760,  852,  853,  854,  844,    0,    0,    0,
  733,   27,    0,    0,   43,   71,    0,    0,   25,    0,
  739,    0,    0,  702,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  953,  311,    0,    0,    0,    0,    0,    0,    0,  654,
    0,    0,  657,    0,    0,    0,    0,  946,  625,  549,
    0,  879,  548,    0,  572,    0,  580,  576,  575,    0,
    0,    0,  591,  579,    0,    0,  712,  713,    0,    0,
    0,  360,    0,    0,    0,    0,    0,    0,  613,    0,
    0,  130,    0,    0,    0,    0,    0,    0,  362,  406,
    0,  362,  363,  411,  493,    0,  273,    0,  267,  269,
  360,  938,  240,    0,    0,  362,    0,    0,  209,  360,
    0,    0,    0,    0,  245,  239,  242,  243,  244,  415,
  452,  451,  414,  413,    0,    0,    0,    0,    0,    0,
  371,    0,  362,    0,    0,  155,  159,    0,  163,    0,
    0,  524,  525,  542,    0,  539,    0,    0,  531,  529,
  530,    0,    0,    0,    0,  494,    0,    0,    0,    0,
  532,    0,    0,    0,  360,    0,  200,    0,  203,  205,
  206,    0,    0,    0,    0,    0,  220,   77,    0,    0,
   76,  934,  512,  513,    0,    0,    0,  750,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  336,  342,
  343,  341,  735,    0,    0,    0,    0,    0,    0,    0,
    0,   52,   60,   62,    0,    0,   69,    0,    0,    0,
  738,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  922,  923,  924,  925,  926,  927,  928,  929,
    0,    0,    0,    0,    0,    0,  915,    0,    0,    0,
  640,    0,    0,  828,  829,  903,    0,    0,  936,  824,
    0,    0,    0,    0,    0,    0,  834,  743,  742,    0,
    0,    0,    0,  630,  631,    0,    0,  623,  626,  550,
  880,  581,  590,  585,  584,    0,  595,  746,  715,  716,
  360,    0,    0,  215,    0,    0,  604,    0,  181,  175,
  182,    0,  178,    0,    0,  177,    0,  188,  169,  168,
  878,  171,  170,  464,    0,    0,    0,  405,  272,    0,
  211,  362,  213,    0,  363,  208,  214,    0,    0,    0,
    0,  418,  419,  362,  360,  363,    0,    0,    0,  389,
    0,    0,    0,    0,  349,  196,  197,  156,    0,    0,
    0,    0,    0,    0,  540,    0,    0,  362,  363,    0,
  489,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,    0,    0,    0,  198,    0,    0,    0,   81,
    0,    0,    0,    0,   86,   83,    0,    0,    0,  939,
  709,    0,    0,  761,    0,    0,    0,  787,  786,    0,
    0,    0,  794,  806,  804,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  749,    0,   64,   56,   57,
   63,   58,   59,    0,    0,   21,    0,    0,    0,   41,
    0,    0,    0,  720,  740,  703,    0,  719,    0,    0,
    0,    0,    0,    0,  220,    0,  886,    0,    0,  901,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  911,    0,  921,    0,    0,    0,    0,    0,
    0,  902,  840,    0,    0,    0,    0,    0,    0,  645,
    0,    0,    0,    0,    0,  587,  588,  592,    0,  199,
    0,    0,  605,  606,    0,    0,    0,    0,    0,    0,
  189,    0,    0,  401,  223,  224,  225,  226,  227,  228,
    0,    0,    0,  276,    0,  221,    0,    0,    0,    0,
  246,    0,  448,  449,  420,    0,    0,    0,    0,    0,
    0,  362,  468,  363,    0,    0,  361,    0,  935,  167,
    0,    0,  507,    0,  506,  543,    0,  535,    0,    0,
    0,  487,    0,  515,    0,    0,  517,  520,  522,  360,
    0,    0,    0,    0,  119,    0,  204,  362,  361,   96,
    0,  117,    0,   92,    0,    0,    0,    0,   85,    0,
  802,  803,    0,    0,    0,    0,    0,    0,  805,    0,
    0,    0,    0,    0,    0,    0,  795,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,   61,   53,   54,   22,  724,  725,    0,
  722,  729,  730,  727,    0,  701,    0,    0,  892,  891,
    0,    0,  888,  887,    0,  896,  895,  894,  893,  890,
  889,    0,    0,  917,    0,    0,    0,  916,    0,    0,
    0,  638,    0,    0,  633,    0,  634,    0,  651,  647,
  649,    0,    0,    0,    0,    0,  361,  610,  611,    0,
  183,  179,    0,    0,  194,  190,    0,  363,  279,    0,
    0,  363,  277,    0,    0,    0,  231,    0,    0,  247,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  465,
    0,    0,  347,    0,  350,  509,    0,  510,    0,  134,
    0,    0,    0,  138,  140,  141,  142,  490,  492,  488,
  519,    0,    0,    0,  363,    0,    0,  344,  362,   87,
    0,    0,   89,    0,    0,    0,    0,    0,    0,  808,
  807,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
    0,  704,  219,  904,  897,  898,    0,  899,  913,  912,
    0,  918,  907,    0,  908,    0,  636,    0,    0,  668,
    0,  665,  669,  670,  672,  673,  674,    0,    0,  617,
  363,  345,    0,  174,  191,  363,  144,    0,  285,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  284,  288,  283,    0,    0,  293,  294,
  295,  296,  299,  301,  266,    0,  207,  232,    0,    0,
    0,    0,  233,  236,    0,    0,  363,  387,  388,  384,
  383,  386,  385,    0,    0,  364,  351,  508,  536,  143,
  131,  139,    0,  362,  361,  263,  126,  363,    0,    0,
   90,   91,   78,    0,  773,  781,    0,  774,  782,  777,
  785,    0,    0,  775,  783,  776,  784,  770,  778,  771,
  779,  772,  780,  721,    0,  914,  639,    0,    0,    0,
    0,  685,  687,    0,  682,    0,  264,  184,  402,    0,
    0,    0,    0,  303,    0,    0,    0,  302,    0,  304,
  291,  297,    0,  300,  286,    0,  289,    0,  325,  290,
  210,  234,    0,    0,  237,    0,  249,  251,  391,    0,
    0,  363,    0,  346,  366,    0,   75,   93,    0,  900,
    0,    0,  671,  666,  686,    0,    0,  282,    0,  292,
    0,    0,    0,    0,  298,    0,    0,  318,  319,  333,
    0,    0,    0,    0,  328,  287,  326,  238,    0,    0,
    0,    0,    0,    0,    0,    0,  356,  357,    0,  265,
  363,    0,    0,    0,    0,  693,    0,    0,    0,  281,
  278,    0,    0,    0,  306,    0,    0,    0,  310,    0,
  332,  943,  331,  330,    0,    0,    0,    0,    0,  248,
    0,  255,    0,  254,    0,    0,    0,    0,    0,  367,
  118,    0,  810,  695,  684,    0,    0,  696,    0,  692,
    0,    0,    0,    0,    0,    0,    0,    0,  321,  320,
  327,  329,  235,    0,    0,  259,  258,  257,  359,    0,
    0,    0,    0,  691,    0,  698,  313,    0,    0,  305,
    0,    0,    0,  322,  262,  260,  261,    0,  352,    0,
    0,    0,    0,  323,  307,    0,    0,  809,    0,  697,
  316,  308,    0,  700,
};
static short yydgoto[] = {                                      18,
   19,   20,   21,   22,   23,   24, 1500,   26,   27, 1501,
   29,   30,   31,   32,   33, 1502,   35, 1503,  614,  101,
  381,  870, 1116,  102,  644,  871,  103,  386,  649,  126,
  104,  105,  236,  941,  115,  872,  873,  175,  178,  106,
  874,  107,  388,   77,  217,  352,  430,  609, 1053,  370,
  830,  578,  486,  806,  610,  611,  612, 1055,  218, 1308,
   69,  165,   70,  212, 1761, 1260,  198,  203,  205,  207,
  194,  185,  188,  200,  209,  132,  287,  289,  291,  341,
  594,  596,  598,  378,  237,  755,  511,  621,  988,  345,
  601, 1044, 1255,  545,  702, 1018,  496,  497,  526,  336,
  579, 1029, 1402,  724, 1194, 1403, 1404, 1405, 1406, 1407,
  622,  195,  186,  332,  552,  333,  334,  553,  554,  555,
  556, 1230,  982,  499,  500,  972,  970,  501,  976,  971,
 1185, 1361,  977,  978, 1190,  347,  818,  819,  820,  821,
  757,  995, 1375,  580,  759,  432,  784,  930,  520, 1322,
 1195,  433,  434,  435,  921,  436, 1376, 1377,  529, 1523,
 1661, 1211,  765,  766,  753,  767,  768,  769, 1662, 1663,
 1737,  313,  524, 1202, 1504,  171,  521,  522, 1203, 1204,
 1370, 1639, 1505, 1506, 1507, 1608, 1508, 1509, 1510, 1511,
 1512, 1513, 1514, 1683, 1724, 1647, 1726,  437,  682, 1341,
  438, 1061, 1609, 1654, 1655, 1693,  373,  374,  439, 1013,
 1227, 1393,  179, 1014, 1015,  119,  263,  459, 1621,  356,
 1175, 1355, 1480, 1665, 1666, 1667, 1668, 1173,  322,  540,
  783, 1223,  541,  781,  201,   54,  317,  176,  137,  300,
  162,  307,  168,  743,  740,  308,  318,  773,  319,  537,
 1006,  163,  301,  508,  542, 1224,   91,  173,  221,  581,
  582,  745, 1030,  746, 1031, 1032,  585,  586,  587,  588,
 1023,  834,  589,  590,  591,  799,  592,  488,  796,   37,
   38,   39,   56,  181,  325,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  708,  472,  956, 1178,  473,  474,
  713,   40,  136,  296,   41,  489,  490, 1183,  729,  695,
  264,  460,  461,  462,  699,  942,  943,  944,  945, 1167,
  440, 1155,  120,  121, 1471, 1472,  441, 1474,  442,  443,
  444,    0, 1676, 1586, 1677, 1678, 1679, 1720, 1762,  393,
 1127,   42,   43,  357,   44,   45,  481,  482,  879, 1124,
 1310, 1314,  394,  652,  191,  623,  624,  625,  626,  627,
  628,  629,  630,  631,  632,  633, 1277, 1071, 1073, 1074,
  928,  680,  445,  446,  447,  448,  377,    0,  214,  449,
  450,  911,  451,  452,  453,  454,  672,  915, 1156, 1151,
  673,
};
static short yysindex[] = {                                   4049,
 1700, -159, 3630,  118, 1080,    7, 3661,  248, 2309,  718,
  454, 1129, -159, 1020,  776,   36, 1163,    0,  354,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  463,
    0,    0,    0,    0,    0,    0, 7999,  342,  371,  400,
   36,  428,  495,    0,    0,  409, 1172,  501,  342,  609,
  789,  400,  615,   36,  428,    0,  495,  676,    0,   34,
    0,  706,    0,    0,  946,  728,    0,   36,  768,  342,
 1070,  728,  609,  371,  400,  615,   36,  428,  495,  676,
    0,  400, 1006,    0,    0,    0, 1308,    0, 1308,    0,
 1039, 1054,  149, 1407,    0,    0,    0,  501,   36,  501,
 1099, 1115, 1137,  161,  873,    0,  132,  140,  813, 1072,
    0,  609, 1205, 1174,    0,    0, 1160, 1088,  400,   36,
  495,    0,    0, 1319,  -27, 1293,  507,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -43,    0,    0, 1172,    0,   38,    0,    0, 1602,
    0, 1120,    0,    0,  619,    0,    0, 1308,    0, 1235,
    0,    0, 1230,    0,    0,  527,    0,    0, 1435,    0,
    0, 1172,    0,    0,    0, 1244, 1602,    0,  -39,    0,
    0, 1384,    0, 1394,    0, 1308,    0,    0,    0,    0,
    0, 1382,    0,    0, 1271,    0,    0, 1403, 1298,    0,
    0,    0, 1271,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1320,    0,  501,    0,    0,    0,  801, 1350,
 1002,  676, 1048, 1447, 1732, 1476, 1486,  801, 1393, 1002,
 1428, 1430,    0, 6784,    0,    0,    0, 6784,    0,    0,
    0,    0, 5105,    0,    0, 1380,  371, 1457, 1372,  598,
   36, 1389,    0,    0, 1174,    0,    0,    0,    0,    0,
    0,    0, 1364,    0,    0, 1602,    0, 1384,    0, 1308,
    0, 1182, 1418,    0, 1398,    0, 1279, 1489,  924,  507,
    0, 1560,  391,    0,  501,    0,  -43,    0,    0,    0,
    0,  501, 1442,  -53, 1392,  339, 1820,    0, 8032,    0,
    0, 1009, 1612,    0,    0,    0, 1816, 1816, 1172, 1514,
 1172, 1339,  527,    0,    0, 6063,    0,  400,  428,  495,
    0, 1442,    0,    0, 1616,  452, 1842,   36, 1625,  371,
    0,    0, 1864,  172, 3262,    0,    0,    0, 1446,    0,
    0,    0,    0, 1463, 1470,    0,    0, 1317, 1038,    0,
    0,    0,    0, 1891,    0,    0,    0,  934,    0,   36,
 1510,    0,  400, 1485,    0,  101,    0,    0,    0,    0,
   36, 1364,  750,    0,   36,    0, 1615,  400, 1904,  801,
 1549, 1909, 1913, 1915,    0, 1922, 1923,    0, 1926, 1927,
 1928,    0,    0, 1931,    0,    0,    0,    0,    0, 1932,
    0,    0, 5696, 1933, 1934, 6784, 6784, 5742, 1523, 1937,
 1721,    0,    0,    0,    0,    0,    0, 1899,    0, 1946,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1938,    0, 1696,    0, 1673, 1952,
    0,  -75,   44,    0,  -99,    0, -111,    0, -111,    0,
    0, 1953,    0,  117, 1569,    0,    0,    0,    0, 1956,
   98, 1942, 1442, 1959, 1741,    0, 1724, 1724, 1965,    0,
 1970,    0, 1628,    0,  152, 1668,    0,    0,    0,    0,
 1172,    0, 1816, 1816, 1816, 1816,    0, 1975,    0, 1742,
 1743,    0,    0,    0, 1722,    0, 6063,    0,    0, 6063,
 1130,    0, 1602, 1760, 1564, 5097,    0,    0,  534,    0,
 1564, 1218, 1120,    0, 1634, 1599, 1568,    0,    0,    0,
  601, 1643,    0,    0, 1583,  615,    0, 1172,    0, 1771,
    0,    0, 1339,    0,    0,    0,    0,  143, 1596,    0,
    0,    0, 1598,    0, 1651, 2012,    0, 1704, 2016,    3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1971,  153,    0,    0,    0,    0,  119, 2021,
 2024, 2016, 1602,    0, 1746,    0, 1308,    0, 1805,    0,
 1172, 1172,    0,  -53,  619,    0, 1686,    0, 1660, 2039,
    0, 4727,  157,    0, 1694, 1707, 2053, 3807, 2058, 3338,
 8061,  -24,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1595, 1038,  501,
    0,    0, 1044, 1665,    0,    0, 1640, 1002,    0, 1788,
    0, 1617, 2068,    0, 1788, 1044, 1789, 1791,  400,  922,
 5968,  709,  609, 6784,  993, 1027, 1073, 2121, 6784, 3807,
 1696, 1661,  562, 6784, 5968,  846,  846, 1020, 2229, 2073,
    0,    0, 6014, 1654, 6784, 6784, 6784, 6784, 6784,    0,
 6784,   88,    0,   67, 1664, 5968, 1662,    0,    0,    0,
  929,    0,    0,   50,    0, 1676,    0,    0,    0,   36,
 1138,   36,    0,    0,  501, 1364,    0,    0, 5968, 1862,
  -53,    0, 1654,   34,   34, 1182,  111,  501,    0, 1172,
 1172,    0,  355, 1583, 1583, 1675,  615,  924,    0,    0,
 2087,    0,    0,    0,    0, 1859,    0,  501,    0,    0,
    0,    0,    0, 1868, 2103,    0, 1844, 1866,    0,    0,
 1807, 1809, 1308, 1869,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  615,  501, 5357, 1768, 1774, 1777,
    0,  615,    0, 1747, 1353,    0,    0, 1750,    0,   68,
 1754,    0,    0,    0,  615,    0, 2012,  142,    0,    0,
    0, 1872,  142, 1755,  142,    0, 2136,  615,  615,  615,
    0, 1442,   36, 1918,    0, 1822,    0, 1623,    0,    0,
    0, 1009, 1747,   36, 1674,  127,    0,    0, 2137, 1911,
    0,    0,    0,    0,  172, 1725, 1418,    0, 1418, 4885,
  443, 6784, 6784, 3883, 2143, 1159, 4142, 6784, 4218,  700,
 4294, 4552, 6240, 4624, 4859, 4927, 3807, 3807,    0,    0,
    0,    0,    0, 1485,  400,  428, 1485,  495,  676,  156,
 2147,    0,    0,    0, 1044, 1806,    0,  506, 1825, 1364,
    0, 5968, 1825, 2150, 2147, 1044,  -92, 1875, 6784, 6784,
 1939, 6784, 2156, 6784, 2164, 2284, 6784, 6784, 6784, 6784,
 6784, 6784,    0,    0,    0,    0,    0,    0,    0,    0,
 1892, 1377,  -30, 6784,  572, 5968,    0, 3807, 1632, 1696,
    0, 2168,  813,    0,    0,    0, 1696, 1729,    0,    0,
 1935,  846,  846,  401,  401, 1104,    0,    0,    0,   67,
 2174, 2177, 1030,    0,    0, 3807, 1893,    0,    0,    0,
    0,    0,    0,    0,    0,  510,    0,    0,    0,    0,
    0, 1740, 1747,    0, 1723, 1723,    0, 2181,    0,    0,
    0, 1769,    0, 1816, 1962,    0,  355,    0,    0,    0,
    0,    0,    0,    0, 2189, 3807, 2329,    0,    0, 1936,
    0,    0,    0, 2329,    0,    0,    0, 1308, 1308, 1733,
 2197,    0,    0,    0,    0,    0,  -90,   -9, 1078,    0,
 1974, 1020, 1786, 1803,    0,    0,    0,    0, 1782,  118,
 1802, 1828, 1859, 2204,    0, 1583, 1814,    0,    0, 1171,
    0, 2196, 1782, 1177,  615, 2214, 2215, 2216, 1998,  619,
    0, 1936, 1816, 1668,  -53,    0, 1643, 1786,   63,    0,
  615, 1873, 1963, 4727,    0,    0,  615, 1770, 1973,    0,
    0, 2228, 2239,    0, 1608, 1696, 2241,    0,    0, 1696,
 2244, 6286,    0,    0,    0, 1940, 2251, 1696, 2256, 1773,
 2260, 1696, 2261, 6784, 6784, 2143, 6784, 6512, 2262, 1696,
 2263, 2265, 1696, 2266, 6784, 1696, 2273, 1696, 2274, 2276,
 1696, 2277, 2279, 1696, 2280,    0, 2061,    0,    0,    0,
    0,    0,    0, 1994, 1044,    0, 1044,  156, 2147,    0,
  128,  128,  160,    0,    0,    0, 1830,    0, 2150, 2147,
 2286,  -92, 2579, 2591,    0, 2654,    0, 2702, 6784,    0,
 2716, 2886, 3026, 3035, 3074, 3193, 6784,  615, 5968, 1696,
 1896, 5968,    0, 6784,    0, 2026,  475, 6784, 5968, 6784,
 6784,    0,    0, 1030, 2292, 5968, 1088,   67, 1947,    0,
 1948, 1957, 1997, 2071, 2017,    0,    0,    0, 1936,    0,
 1786,  392,    0,    0, 1943, 1172, 1964, 1583, 1966, 1583,
    0, 3807,  643,    0,    0,    0,    0,    0,    0,    0,
 1916, 2091, 1936,    0, 6784,    0, 2077, 1960, 1733,   34,
    0, 3807,    0,    0,    0, 1983, 1985, 1986, 1988, 1995,
 2001,    0,    0,    0,  813, 2112,    0,  -13,    0,    0,
 2340,  118,    0, 1675,    0,    0,  142,    0, 2329, 2013,
  142,    0,  142,    0, 1859, 2350,    0,    0,    0,    0,
 1009, 1747, 2091, 1583,    0, 1668,    0,    0,    0,    0,
 2181,    0, 2353,    0, 2356, 1172, -148, 2358,    0, 1172,
    0,    0, 6784, 1976, 1976, 1020, 2359, 1831,    0, 1976,
 1976, 6784, 1976, 1976, 1787, 1696,    0, 1795, 6784, 1696,
 1976, 1976, 1976, 1976, 1696, 1976, 1976, 1976, 1976, 1976,
 1976, 2019,    0,    0,    0,    0,    0,    0,    0, 1969,
    0,    0,    0,    0, 5968,    0,  -92, 2286,    0,    0,
 6063, 2366,    0,    0, 3216,    0,    0,    0,    0,    0,
    0, 3304,  125,    0, 5968, 2099, 1977,    0, 5968, 3316,
 1840,    0, 1431, 1696,    0, 1856,    0, 1030,    0,    0,
    0,   67, 1657, 3807, 2014, 2091,    0,    0,    0, 1816,
    0,    0, 1172, 1353,    0,    0,  662,    0,    0,  501,
 7918,    0,    0, 1696, 1724, 2077,    0,  962,   36,    0,
 2072,  670, 1978, 2078, 1981, 2116, 2081, 2123, 1936,    0,
 5105, 2040,    0, 1747,    0,    0, 2386,    0, 2387,    0,
 2076, 1724, 2013,    0,    0,    0,    0,    0,    0,    0,
    0, 1936, 1643, 1786,    0, 1353, 1974,    0,    0,    0,
 2062, -129,    0, 1859, 2064, 1696, 2389, 2392,  813,    0,
    0, 2399, 2401, 1696, 2404, 2406, 6784, 6784, 1696, 2418,
 2419, 2421, 2423, 2429, 2432, 2433, 2434, 2437, 2439,    0,
  128,    0,    0,    0,    0,    0,  615,    0,    0,    0,
 5968,    0,    0, 5968,    0, 1664,    0, 1208, 2201,    0,
 2440,    0,    0,    0,    0,    0,    0,  -24,  822,    0,
    0,    0, 1583,    0,    0,    0,    0, 6063,    0,  342,
  657, 2424, 1418, 2445, 2145, 6784, 2430, 2452, 2436, 2438,
 2441, 2152, 2444,    0,    0,    0, 4564, 2446,    0,    0,
    0,    0,    0,    0,    0, 2457,    0,    0, 2146, 2159,
   36, 1733,    0,    0, 1308,  371,    0,    0,    0,    0,
    0,    0,    0, 2091, 2186,    0,    0,    0,    0,    0,
    0,    0, 2091,    0,    0,    0,    0,    0, 6784, 1172,
    0,    0,    0, 1172,    0,    0, 6784,    0,    0,    0,
    0, 1696, 1696,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2470,    0,    0, 1893, 3807, 1654,
 1657,    0,    0, 2149,    0, 2476,    0,    0,    0,  185,
 2461,  400, 6784,    0, 2180, 3807, 2157,    0, 3807,    0,
    0,    0,   41,    0,    0,  816,    0,  470,    0,    0,
    0,    0, 1733, 1308,    0, 2138,    0,    0,    0,  100,
 1664,    0, 1974,    0,    0, 1696,    0,    0, 1431,    0,
 2017,  -24,    0,    0,    0,  980, 2329,    0, 2464,    0,
 6558, 2245,   41,  701,    0,  722, 1025,    0,    0,    0,
  342, 2067,  118,  154,    0,    0,    0,    0, 2138,  508,
 1733, 2148, 2151,  100, 2485, 1030,    0,    0, 1893,    0,
    0, 2492, 1664, 2014,   36,    0, 2497, 2496, 1188,    0,
    0, 5189, 2132, 2500,    0,  163, 2109, 2243,    0,   41,
    0,    0,    0,    0, 4862,  816, 1733,  687,  687,    0,
 2248,    0, 2108,    0, 1030, 2511,  100, 2217, 2017,    0,
    0, 1893,    0,    0,    0,  980, 2518,    0,  371,    0,
 2229, 1880,   62, 2501, 2268, 2271, 4862, 4862,    0,    0,
    0,    0,    0, 2113,  608,    0,    0,    0,    0, 1030,
  100, 2014, 2017,    0,  371,    0,    0,   41, 2523,    0,
 1725, 4862, 2270,    0,    0,    0,    0, 1499,    0, 2014,
 2535, 2539, 1889,    0,    0, 4862, 3807,    0,  371,    0,
    0,    0,  -24,    0,
};
static short yyrindex[] = {                                      0,
    0,  225,   -7,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  974, 3414,    0,    0,    0,    0, 2581,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  793,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  982,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2249,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2206,    0,    0,    0,   81,    0,   81,    0,
    0,    0,    0, 2207,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5424, 3731,
    0,    0,    0,  986,    0,    0,    0, 1425,    0,    0,
    0,    0,    0,    0,    0,  325,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -34,
    0,    0,    0,    0,  393,    0,    0, 2324,    0, 1061,
    0,    0,    0,    0,    0, 3267,    0,    0, 6335,    0,
    0,    0,    0,    0,    0,    0,  -34,    0,  497,    0,
    0, 2563,    0,    0,    0, 2324,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1036,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  753,    0,    0, 1200,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -34,    0, 2563,    0, 2324,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1273,
    0, 2330,    0,    0,    0,    0, 1340,    0,    0,    0,
    0,    0, 2343,  748, 8063,    0, 1369,    0,    0,    0,
    0,  245,    0,    0,    0,    0, 2153, 2153,    0,    0,
    0, 1396, 3608,    0,    0,    0,    0,    0,    0,    0,
    0, 2343,    0,    0, 1324,    0,    0,    0,    0,    0,
    0,    0, 4153, 2219,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1402,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1406,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1898,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2035,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  135,    0,    0, 2289,
    0,  344,    0,    0,    0,    0,  733,    0,  733,    0,
    0,  920,    0,  949,  950,    0,   97,    0,    0,    0,
 1110,    0, 2343,    0,    0,    0,   78,   78,  858,    0,
    0,    0,  367,    0, 3135,  165,    0,    0,    0,    0,
    0,    0, 2153, 2153, 2153, 2153,    0,  219,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2349,    0,    0,    0,    0,    0, 2330,    0,
    0, 1202,    0,  388, 2144,    0,    0,    0,    0,    0,
    0,  169,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1411,    0,    0,    0,    0, 1649, 1152,    0,
    0,    0, 1277,    0,    0, 1448,    0,    0, 1449,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1852, 1910,    0,    0,    0,    0, 1621, 1323,
    0, 1449,  -34,    0,    0,    0, 2324,    0,    0,    0,
    0,    0,    0,  748, 1050,    0,    0,    0,    0, 2218,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  458,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
    0,    0,    0,    0,  285,    0,    0,    0,    0, 6830,
    0, 6830,    0,    0, 6830, 6830, 6830,    0,    0,    0,
 2165,    0,    0,    0,    0, 2649, 2819, 5470,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1792,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  641,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  748,    0,    0,   70,   70,    0,    0,    0,    0,    0,
    0,    0, 3211,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  804,    0,    0,    0,    0,
    0,    0,    0, 2578,    0,    0, 1585, 2060,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  252,  333,  358,
    0,    0,    0,    0, 3242,    0,    0,    0,    0,    0,
  866,    0,    0,    0,    0,    0, 1448,    0,    0,    0,
    0,  658,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2343,    0,    0,    0,  291,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5791,    0,    0,    0,  222,
    0,    0,    0,    0, 2317,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1412,
 1413,    0,    0,    0,    0,    0,    0,    0, 1421,    0,
    0,    0, 1421, 1436, 1445,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  981,
    0,    0, 6830,    0,    0,    0, 1142,    0,    0,    0,
 2205, 2956, 3126, 2342, 2512,    0,    0,    0,    0,    0,
 2122, 1646,  288,    0,    0,    0,  767,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  937,  937,    0,  372,    0,    0,
    0,    0,    0, 2153, 2169,    0, 3787,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2368,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1302,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1475, 3414, 1477,   93,    0,    0,    0,    0,    0,    0,
    0,    0, 1730,    0,    0,    0,    0,    0,    0,    0,
    0, 1211,    0,    0,    0,    0,    0,    0,    0, 1050,
    0, 2368, 2153, 1511,  748,    0, 2365, 1477,    0,    0,
    0, 5791,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3598,    0,    0,    0, 7024,
    0,    0,    0,    0,    0,    0,    0, 7035,    0, 7112,
    0, 7118,    0,    0,    0,    0,    0,    0,    0, 7195,
    0,    0, 7279,    0,    0, 7342,    0, 7392,    0,    0,
 7425,    0,    0, 7519,    0,    0, 4528,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1412, 1516,    0,
 2200,  287,    0,    0,    0,    0,    0,    0, 1518, 1527,
 1529,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2208,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2296,  916,    0, 3632,    0, 2298,    0,
 2299, 2301,    0,    0,  860,    0,    0,    0, 2368,    0,
 1477,    0,    0,    0, 3055,    0,    0,    0, 2188,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2191,    0, 2382,    0,    0,    0, 2030,    0, 1302, 2249,
    0,    0,    0,    0,    0,  390,  396,  404,  422,  493,
  723,    0,    0,    0, 5424,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  815,
    0,    0,    0,    0, 2842,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1532,    0,    0,    0,    0,
 1546,    0,    0,    0,    0,    0,  136,    0,    0,    0,
    0,    0,    0,    0,    0, 5470,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7540,    0, 7569,    0, 7603,
    0,    0,    0,    0, 7699,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1550,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1517,    0,    0,    0, 1573,    0,    0,
    0,    0,    0,    0,  906,    0,    0,    0,    0, 2153,
    0,    0,    0, 2946,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2614, 1335, 2100,    0, 2330,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2368,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1556,  835,    0,    0,    0,    0,    0,    0,    0,
    0, 2368, 2365, 1477,    0,  366,    0,    0,    0,    0,
    0,    0,    0,   77,    0, 7749,    0,    0, 6830,    0,
    0,    0,    0, 7826,    0,    0,    0,    0, 7968,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  287,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  626,    0, 2296,  116,    0,
  831,    0,    0,    0,    0,    0,    0,  739, 2616,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1767,    0,    0,   90,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7979, 8013,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   83,    0,    0,
    0,    0,    0, 2619,    0,    0,    0,    0,    0, 2603,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1767,  569,    0,   92,    0,    0,    0,    0,
  511,    0,    0,    0,    0, 2614,    0,    0,    0,    0,
   91, 4429,    0,    0,    0, 2616,    0,    0,    0,    0,
  182,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  589,    0,
 1302,  797,  809,    0,  442,  277,    0,    0,  437,    0,
    0,    0,  626, 2624, 1207,    0,    0, 2627,    0,    0,
    0,    0, 2610,  230,    0, 2367,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1767,    0,    0,    0,
    0,    0,    0,    0, 2296, 1509,    0,    0,  201,    0,
    0,   83,    0,    0,    0, 2616,    0,    0,    0,    0,
 2626,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  432,
    0,  123,   91,    0,    0,    0,    0,    0, 2618,    0,
    0,    0, 5410,    0,    0,    0,    0, 2296,    0, 2624,
 2632,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  898,    0,
};
static short yygindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, 2675,    0,    0, 2679,
    0,    0,    0,    0,    0,   10,    0, 2680,   -1,  244,
   94, -570, 1563,  253, -180, -545, 2673, 2448,    0,  -35,
    0, 2463,  -91,  -44,    0,  551, -847,  -29,  -40,  -25,
 -194, 2447, 2043,    0,    0,    0, 1318,    0,    0,  -48,
 1633, -536,   -3, -842, 2080, 1877, -271, 1648, 2625, -272,
    0,  -55,    0, -644,  -47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -581, -589, 1663, -278, -154, -901,    0,
    0,    0,    0, -294,  -98, -312, 1669, -311,  -45,    0,
 -488,    0,    0, -473, -927,    0, 1311,    0,    0, 2413,
 -543,  -38,    0,    0,    0,    0, 2383,    0, 2167, 2427,
 -230, 1685, -684,    0,    0,    0, -691,    0,    0,    0,
    0,    0,    0, 1748,    0, 2443, 2007, 1687, 2420, 2422,
    0, 1143,    0, -487, 1979,  -57, -554, -701,    0,    0,
  -49, -933, -930, -921, -221, -915,    0, 1359, -993,    0,
 1079,-1121, 1362,    0, 2210,    0,    0,    0, 1083, 1086,
 1051,   85, -244, -750, -238,    0,    0, 2003,    0, 1551,
    0,    0, -685,    0,    0,    0, -175,    0,    0,    0,
    0,    0,    0,    0,    0, -483,    0, -848,    0,-1103,
 -281, 1004, 1154,    0, 1064,    0,    0, 2395,  -94, -713,
 -769,-1104,    0,    0,-1012, -632, -855, 1374,    0, -464,
 -605, -985,-1420,    0, -625, 1102,  224, -386, -504, -726,
 -928, -711,    0,    0,    1,    0,    0,    0,    0,    0,
 2449,    0,    0,    0,    0, 2460, 2236,    0,    0,    0,
    0,    0, 2471,    0,    0,    0,    0,  -16,    0,    0,
    0, -305, 1972, -304, 1534, -419,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2187,    0,-1183, 1984,    0,
    0,    0, 2767,    0,    0,    0,    0, 2507,    0,    0,
    0,    0, 2320,    0, 2321,    0,    0,    0, 2083,    0,
    0,    0,    0,    0,  -85,    0, 2070, 1832,    0,-1179,
 1133,    0, 2090, -606, 2102,    0, -794, 1860,    0,    0,
 -121, -647,    0, 2682,    0, 1223,-1167,    0,-1157,-1119,
 -958,    0, 1326,    0, 1090,    0, 1132,    0, 1040,    0,
    0,    0,    0, 2327,    0,    0,    0, -334, 2172, 1945,
 -968,    0,    0,    0,  989,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3123, 1601, 1736,    0,
 -448,    0,    0,    0, -219,    0, 2455,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -336, 1678,
    0,
};
#define YYTABLESIZE 8560
static short yytable[] = {                                     128,
  190,  167,   73,  192,   74,  170,  285,  238,  184,   34,
  487,  372,  189,  376,  725,  172,  717,  197,  256,  259,
  551,  964,  257,  260,  222,  515,  206,  922,  202,  744,
  583,  584,  747,  546,  517,  204,  226,  756,  758,  973,
  227,  458,  208,  703,  225,  923,  387,  233,  231,  294,
  244,  823,  246, 1196,  891,  387, 1197,  651,  230,  199,
 1196,  128, 1346, 1197,  232, 1198, 1206, 1160,  507,  609,
  229, 1200, 1198,  245,  838,  831,  841,  216, 1200,  965,
  966,  615,  228,  266,  286,  884,  323, 1380,  701,  732,
  290,  256,  348, 1207,  288, 1047,  937,  599,  429,  431,
  822, 1748,  235,  455, 1215, 1021,  940,  479,  457, 1048,
  885, 1020,  960,  609,  349,  667,  309,  516, 1258,  429,
  516,  216,  683,  664,  732, 1422,  913, 1240,  609,  938,
  732,  676,  256,  732,  717,  256,  216,  937,  375, 1664,
  937,  716,  949,  337,  648, 1164,  968,  372,  732,  376,
  256,  348,  938, 1311, 1418,  937,  667,  937,  808,  667,
  712,  480,   72, 1466,  459, 1458, 1052,  963,  390, 1470,
  491,  254,   72, 1000,  667,  717,   88,  379,  717,  258,
 1235,  683,  790,  371,  732, 1473, 1026,   72,  697,  646,
  255,  731,  242,  717,  255, 1475,  990, 1696,  485, 1115,
  676,   72,  255,  382,  242,  997, 1690,  492,  734,  735,
  736,  737,  382, 1378,  302, 1395,   72,  657,  461,  464,
  583,  584,  255,  459,  554,  478, 1551,  390,  343,  268,
  947,  857,  293, 1476,  525,  471,  864,  857,  720,  127,
  314,  551,  936,  805,  467, 1637, 1394,  516, 1216, 1181,
  764,  376, 1482, 1713,  519,  112,  190,  115,  532,  676,
 1042,  535,   84,  303,  113,   84,  706, 1304,  671, 1306,
  480,  676,  677,  679,  375, 1126,  354,  461, 1259,  800,
  547,  342,  549,  554,  723,  791,  514,  628,  312, 1004,
  125, 1253, 1218,  593,  310,  115,   55,  603,  210,  597,
  802,  219,  607,  467, 1118, 1196,  704,  654, 1197,  595,
  376, 1400,  605, 1106, 1107, 1129, 1131, 1198, 1423,  371,
  354, 1759, 1390, 1200,  614,  272,  344,   78,  628, 1119,
  115,  628,  374,  467,  478,  354,  211,  707,  645, 1768,
 1130,  397,  216,  723,  642,  514,  628,  754,  801,  125,
  516,  867, 1217,  645,   74,  650,  858,  375,  251,  655,
  937,  937,  858, 1552,  382,  195,  616,  252,  385, 1391,
  483,  615,  311, 1348, 1157,  304,  937,  268, 1027, 1225,
  216, 1537, 1378,  614,  937,  698,  516,  624,  609,  381,
   14,  374,  370,  305, 1477,  382,  216, 1470,  717,  937,
 1615,  937, 1410,  378, 1012, 1149, 1179,  187, 1208, 1209,
  609, 1357,  133, 1473,  664,  937,  375,  861,  216,  376,
  730,  377,  459, 1475,  195,  616, 1725,  306, 1356,  804,
  615,  355,  390, 1219,  667,  711,  664,  937, 1312,  458,
 1624,  353, 1193, 1457,  487,   88,  785,  667,  381, 1673,
 1214,  370,  733,  387,  382,  717,  667,  677, 1695, 1262,
  985, 1476,  378,  987,  732,  840, 1487, 1261,  760, 1304,
 1515,  459, 1516,  732,  458,  355,  461,  993,  888,  664,
  377,  250, 1574, 1064, 1544,  994, 1252,  676,  516,  469,
  355, 1658,  380,  658, 1362,  664,  125,  458,  677,  787,
  353,  477,  253,  667, 1011,  814,  457,  984,  467,  896,
  678, 1342,  667, 1546,  912,  376,  677,  831, 1342,  919,
  920, 1051,  477,  187, 1413,  461,  981,  169,  927,  700,
  931,  932,  933,  934,  935, 1251,  927, 1684, 1414, 1700,
  959,  457,  786,  516,  862, 1125,  190,  348,  187, 1398,
  355,  380,  816,  817, 1054,  647,  667, 1468,   74,  613,
  125, 1318, 1059,  683,  457, 1381,  807, 1039,  732,  678,
  667,  187,  609, 1557,  613, 1733,   71,  683, 1722, 1587,
  216, 1553,  863,  459, 1589,  241,   71,  717,  256,  860,
  253,  732,  314,  256,  480,  717,  374,  676,  253,  937,
  253,   71,  951,  613,  491,  354,  628,  750,  354,  732,
 1114,  833,  732,   74,  645,   71,  628,  832,  981,  628,
  652,  375, 1477, 1278,  895, 1618,  531,  732,  628,  256,
   71,  652,  256,   84,  554,  979,  980,  461, 1534,  125,
  312,  676,  467, 1429, 1545, 1674, 1625,  256, 1367,  376,
   92,  370,  723,  381,  514,  676,  370,  135,  478,  382,
  458, 1543,  370,  190,  624,  614,  678,  378, 1382, 1108,
  379, 1484, 1111,  354,  471,  628,  957,  812,  513, 1188,
  684,  969,  969, 1368,  628,  377,  685, 1065, 1066, 1070,
  519,  514, 1078, 1080, 1082, 1412, 1090, 1093, 1096, 1098,
 1101, 1104, 1486, 1196,  857, 1548, 1197,  616, 1452, 1680,
 1527,  974,  615, 1205,  195, 1198,  135,  354, 1003, 1005,
 1670, 1200,  379, 1742, 1672, 1213,  110,  457,  628,  354,
  374,  354,  582,  983, 1133, 1134,  857, 1136,  675, 1138,
  628, 1687, 1141, 1142, 1143, 1144, 1145, 1146, 1254, 1239,
  893, 1062,  577, 1063, 1648,  375,  380, 1760,  480, 1150,
  355,  920, 1688,  355,  297, 1199,  664,  376,  664, 1710,
  353, 1002, 1199,  353,  376,  652,  677, 1040, 1656,  675,
 1054,  379, 1010,  122,  975,  937,  677,  381, 1049,  677,
  370,  582,  602,  382, 1648, 1024,  252,  675,  677,  187,
  602,  378,  164,  516, 1036, 1037, 1038,  664,  253, 1698,
 1478,  577, 1334,  298,  136, 1336, 1577, 1399,  180,  377,
 1109, 1607,  478, 1409,  440,  664, 1121, 1112,  355,  858,
  663,  166, 1453,  664,  137,   74, 1110,  252,  353,  678,
  252, 1729,  678, 1113,  516,  677,  732,  516,  732,  253,
  134,  602,  253,  761,  677,  252,  732,  601,  937,  676,
  169,  858,  516, 1321,  516,  511,  256,  253,  256,  916,
  917,  663,  355,  136, 1648,  320,  256,  664, 1633, 1152,
 1153,  467,  353,  327,  355, 1358,  355,  688,  174,  663,
  380,  664,  689,  137,  353, 1359,  353,  358,  677, 1648,
  676, 1517,  778,  135,  857,  683,  511,  678, 1756,  511,
 1339, 1671,  677,  182,  183, 1176,  601,  927,  676,  583,
  328, 1606,  329,  857,  511,  299,  511,  951, 1541, 1285,
 1286,  857, 1288, 1290,  762,  135,  612,  135,  358,  779,
 1295,  358, 1122, 1389,  732,  330,  683,  732,  593,  578,
 1699,  678,  732,  321,  678,  177,  358,  678,  122,  122,
 1757,  187,  857, 1372,  683,  678, 1177,  256,  261,  732,
  331, 1084, 1631,  554,  641,  763,  732,  640,  583, 1417,
  612,  556,  468,  857, 1325,  561,  379,  190, 1085,  256,
  108,  379, 1332, 1342,  920,  612,  256,  920, 1459, 1150,
 1590, 1578, 1462, 1340,  920, 1343, 1344,  593,  578, 1731,
  732,  920,  892,  918, 1415,  583,  584, 1199, 1231,  376,
   74,  641,  678, 1154,  641,  241, 1309, 1309, 1313,  858,
  256, 1246,  554, 1086, 1342, 1632,  135,  469, 1705,  641,
  556, 1753, 1754,  780,  561, 1347,  586, 1264,  858,  196,
 1374, 1485, 1644, 1268,  470, 1646,  858,  675,  109, 1592,
  558,  516, 1087, 1709, 1734, 1483, 1765,  241, 1690,  193,
  732, 1469,  261,   71,  252,  582,  252,  516, 1650,  675,
 1772, 1740,  368, 1689,  252,  664,  253,  858,  253, 1364,
  256, 1366,  362,  458,  136,  577,  253,  586,  664,  764,
  255,  122, 1593, 1547,  516, 1735, 1743,  664,  858,  678,
  516,  602,  362,  516,  137, 1758,  262, 1481, 1426,  558,
  379,   74,   74,  511, 1576,  684,  675, 1434, 1651, 1088,
  577,  685,   93,  602, 1439,  675,  100,  969,  582, 1652,
 1549,  582,  511,  511, 1333,  511,  337, 1161,  241,  663,
  511,  526, 1736,  511,  664, 1416, 1669,  582,  577, 1686,
  457,  577,  663,  664,  213, 1582,  511,   14,  678,  458,
  749,  663,  511,  748,   94,  252,  601,  577,  676,  675,
  920,  261,  841,  582,  920,  841,   95,  253,  216,  241,
 1583,  526,  526,  675,  653,  526, 1163,  252,  601,  560,
  676,  453,  503,  577,  252,  337,  123,  664, 1712,  253,
  526,   96,  526,  124, 1241,  516,  253, 1421,  663,  358,
 1241, 1425,  516, 1773,  683,  889,  358,  663,  220,  358,
 1397,  491,   74,  358,  841,  380,  457,  630,  252, 1749,
  516,  358,  526, 1653,  511,  453,  683,  676, 1584,  480,
  253,  630,  261,  504,  491,  612,  676,  358,  560,  630,
  453,  125,  583, 1242, 1763, 1623,  511,  538,  215, 1245,
  516,  663,  398,  511,  516,  630,  527,  612,  539, 1708,
   97,  358, 1562, 1563,  511,  663,  261,  505,  641,  641,
   98,  593,  578,  683,  358, 1619,  897,  583,  252, 1469,
  676,  250,  511,  491, 1622,  506,  920,  511,  370,  920,
  253,  358,  190,  478,  969,   99,  527,  527, 1708,  370,
  527, 1649,  521, 1582, 1488,  583,  593,  578,  583,  630,
  899,  398,  261,  359,  216,  527,  511,  527,  358,  399,
 1519, 1597,  250, 1525,  583,  250,  683,  235, 1583,   94,
  358, 1169,  358, 1708,  593,  578, 1309,  593,  578,  369,
  250, 1649, 1520,  521,  368, 1170,  521,  527,  394, 1521,
  583, 1708,  864,  593,  578,  216,  901,  314,  216, 1220,
  315,  521,  255,  521, 1588,  480,   96,  253,   93, 1171,
  360,  641,  223,  216, 1626,  160,   75,   76,  399,  593,
  578,  335, 1629, 1522,   42,   50, 1584,  234, 1730,  526,
  161,   40,   23,  521,  950, 1199, 1221,  376,  688,  686,
  728,  687,  239,  689,  644,  526,  316,  394,  526,  526,
   94,  526,  641, 1616, 1591,   46,  526,  240, 1642,  526,
  125, 1649,   95, 1172,   48,  384,  865,  544,  534,  478,
  243,   74,  526,  737,  160,   97,  111, 1575,  526,  491,
  335,  526,  385,   42,   50,   98, 1649,   96,  644,  161,
   40,   23,  688,  686,  469,  687,  365,  689, 1617,  728,
  737,  491,  866,  644,  247, 1614,  920,  867,  544,  534,
   99,  544,  534,  868,   46,  361,  362,  363,  248,  182,
  183, 1627, 1595,   48,  385, 1628,  544,  534,  544,  534,
  127, 1075,  869,  117,  118,   24,  268,   47,  364,  365,
  249,  491, 1659,  366,  367, 1717,   49, 1721,   44, 1169,
  526,  128,  353,  469,  527,  365,   97, 1076,  544,  534,
  358,  954,  267, 1170,  694,  116,   98, 1641,  284,   45,
  527,  269,  526,  527,  527,  216,  527,  842,  955,  526,
  842,  527, 1718,  526,  527,  129,  118, 1171,  491,  127,
  526,   99,  629,  480,   24, 1719,   47,  527,  283,  270,
  521,  694,  271,  527,  222,   49,  527,   44,  526,  100,
  128, 1579,  292,  526,  694, 1691,  521,  130,  272,  521,
  521,  491,  521,  128,  116,  480,  480,  521,   45,  842,
  521,  295,  131,  629,  216,  359,  629,  503,  526, 1675,
  518, 1172,  526,  521,  273,  222,  491,  494,  222,  521,
  480,  629,  521,  182,  183,  859,  495,  478,  639,  550,
   71,  312,  477,  222,  480,  627,  338,  128,  514,  688,
  686, 1694,  687,   74,  689,  527,  684,  881, 1675,  324,
  880,  518,  685, 1046,  518, 1303, 1045, 1305,  504,  478,
  478, 1746,  360,  688,  686, 1158,  687,  527,  689,  518,
  939,  518,  339,  771,  527,  772,  627,  494,  527,  514,
  128,  326,  514,  340,  478,  527,  495, 1148,  335, 1675,
  346,  521,  505,  958,  627,  544,  534,  514,  478,  514,
  684,  518,  348,  527, 1050,  939,  685,  827,  527,  350,
  506,  544,  534,  521,  128,  544,  534,  544,  534,  516,
  521,  351,  544,  534,  521,  544,  534,  688,  686,  354,
  687,  521,  689,  527, 1016, 1017,  644,  527,  544,  534,
  355,  694,  383,  644,  544,  534,  644,  544,  534,  521,
  644,  690,  688,  686,  521,  687,  250,  689,  644, 1162,
  516,  392, 1161,  516,  361,  362,  363,  361,  362,  363,
 1180,  182,  183, 1045,  644,  123,  123,  391,  516,  521,
  516,  678,  890,  521,  894,  398,  395,  898,  900,  902,
  364,  365,  366,  367,  396,  366,  367,  250,  644, 1187,
  250,  400, 1186,  401,  688,  686,  463,  687,  465,  689,
 1169,  644,  466,  475,  477,  250,  544,  534,  688,  686,
  356,  687,  678,  689, 1170,   14,  688,  686,  644,  687,
  493,  689, 1233,  644,  356, 1232,  502,  510,  544,  534,
  678,  493,  356,  523, 1238,  544,  534, 1237, 1171,  544,
  534,  530,  222,  533,  222,  644,  544,  534,  356, 1273,
 1316, 1431,  222, 1315, 1161,  543,  544,  644,  518,  644,
 1465,  604, 1767, 1464,  544,  534,  548,  684,  606,  544,
  534,  629,  493,  685,  518,  493, 1467,  937,  518, 1464,
  518,  629,  600,  608,  629,  518,  514,  634,  518,  516,
  493,  684, 1172,  629,  544,  534,  652,  685,  544,  534,
 1747,  518,  356, 1464,  635,  514,  514,  518,  514, 1771,
  518,  636, 1690,  514,  639,  656,  514,  933,  937,  937,
  937,  937,  937,  949,  937,  385,  643,  648,  660,  514,
  516,  659,  661,  516,  662,  514,  937,  937,  937,  937,
  629,  663,  664,  222,  627,  665,  666,  667,  516,  629,
  668,  669,  674,  675,  627,  684,  683,  627,  693,  688,
  686,  685,  687,  681,  689,  222,  627,  516,  937,  691,
  937,  692,  222,  694,   46,  696,  710,  714,  721,  518,
  684,  715,  719,  723,  722,   47,  685,  516,  726,  516,
  728,  407,   48,  629,  516,  727,  494,  516,  738,  739,
  741,  518,  742,  751,  752,  629,  222,  514,  518,  229,
  516,  775,  518,  627,  811,  776,  516,   49,  777,  518,
  782,  253,  627,  792,  250,  793,  250,  788, 1437,  514,
  794,  795,  684,  797,  250,  798,  514,  518,  685,  483,
  809,  803,  518,  810,  813,  514,  684,  514,  815,  824,
  229,  826,  685,  229,  684,  811,  811,  811,  811,  811,
  685,  811,  827,  835, 1282,  514,  627,  518,  229,  836,
  514,  518,  837,  811,  811,  811,  811,  839,  627,  230,
  483,  875,   50,  483,  876,  878, 1438,  882,  516,  886,
  678,  887,  914,  925,  929,   71,  946,  413,  483,  514,
  678,  637,  698,  678,  952,  961,  986,  811,  414,  493,
  516,  493,  678,  981,   51,  804,  493,  516,   52,  493,
  230,  991,  992,  230,  994,  250, 1001,  420,  516,   53,
  754,  998,  493,  999, 1007,  423,  424,  425,  230,  937,
 1008,  937,  637, 1009, 1012,  637,  516,  250, 1019,  937,
 1022,  516, 1028, 1033,  250, 1035, 1057,  937, 1043,  678,
  637, 1041, 1072,  937, 1058, 1060,  937,  516,  678,  516,
 1117, 1120, 1123, 1115,  516, 1132, 1137,  516,  688,  686,
  516,  687, 1135,  689,  823,  937,  937, 1139,  250,  937,
  516, 1159, 1147, 1166,  684, 1645,  937,  684,  937,  937,
 1168, 1174,  937,  685,  640, 1182,  937, 1189, 1192,  937,
  493,  937,  678,  937, 1210, 1201, 1212, 1222,  937,  937,
 1226,  937, 1229, 1228, 1236,  823,  823,  823,  823,  823,
 1234,  823,  493, 1243, 1247, 1248, 1249,  937,  937,  493,
  937, 1250, 1269,  823,  823,  823,  823, 1051, 1271,  924,
  688,  686, 1266,  687,  937,  689,  937,  937,  937, 1272,
 1274,  937, 1270, 1275,  937,  937,  688,  686,  516,  687,
 1280,  689, 1279,  493,  937, 1281,  811,  823,  811, 1283,
 1284, 1291, 1292, 1685, 1293, 1294,  811,  241,  937,  229,
  516,  937, 1296, 1297,  811, 1298, 1299,  516, 1300, 1301,
  811, 1302,  857,  811, 1140,  688,  686,  937,  687, 1317,
  689, 1335, 1345,  937, 1338, 1349, 1350,  483,  937,  483,
 1352,  826,  811,  811, 1353, 1351,  811,  483, 1354,  937,
  937,  516,  937,  811, 1363,  811,  811, 1365,  937,  811,
  483, 1371, 1369,  811,  525, 1360,  811, 1379,  811, 1383,
  811, 1384, 1385,  368, 1386,  811,  811,  241,  811,  230,
 1396, 1387,  826,  826,  826,  826,  826, 1388,  826, 1392,
 1411, 1401, 1419, 1276,  811,  811, 1420,  811, 1424, 1430,
  826,  826,  826,  826, 1450, 1451, 1454, 1460,  241, 1526,
 1479,  811, 1461,  811,  811,  811, 1529, 1531,  811, 1532,
 1528,  811,  811, 1530, 1533, 1536, 1538, 1539, 1540, 1555,
  241,  811, 1556, 1550,  826, 1554,  684,  241,  483, 1558,
  637, 1559,  685,  637, 1560,  811, 1561, 1079,  811, 1083,
  637, 1091, 1094,  637, 1099, 1102, 1105,  637, 1564, 1565,
  483, 1566,  637, 1567,  811,  637,  823,  483,  823, 1568,
  811,  241, 1569, 1570, 1571,  811,  823, 1572,  241, 1573,
 1580,  637, 1594, 1581, 1596,  109,  811,  811, 1598,  811,
  823, 1599, 1603,  823, 1600,  811, 1601, 1611, 1612, 1602,
  241,  483, 1604, 1613, 1610,  637, 1620,  241,  684,  637,
 1630,  827,  823,  823,  685, 1636,  823, 1635,  637, 1640,
 1643, 1660, 1681,  823,  684,  823,  823, 1692, 1707,  823,
  685, 1701, 1711,  823, 1703,  637,  823, 1715,  823, 1716,
  823,  241, 1723, 1464, 1727,  823,  823, 1728,  823, 1698,
 1699, 1739,  827,  827,  827,  827,  827, 1745,  827, 1750,
 1741, 1751,  637,  684,  823,  823, 1690,  823,   93,  685,
  827,  827,  827,  827,  637, 1752, 1755, 1766, 1769, 1770,
    1,  823,  637,  823,  823,  823,  609,  732,  823,   28,
   30,  823,  823,  903,  904,  905,  906,  907,  908,  909,
  910,  823,  202,  826,  827,  826,  270,  362,  514,  620,
   94,  148,  268,  826,  450,  823,  920,  212,  823, 1319,
  688,  686,   95,  687,  359,  689,  514,  192,  390,   80,
  826, 1320,  688,  686,  823,  687,  514,  689,  275,  652,
  823,  650,  646,  919,  648,  823,  193,   96,  821,  826,
  826,  280,  274,  826,  363,  689,  823,  823,  688,  823,
  826,  222,  826,  826,  683,  823,  826,  690,  317,  641,
  826,  324,  699,  826,   25,  826,  315,  826,   28,   36,
 1307,  360,  826,  826,  114,  826, 1267,  825,  389,  821,
  877,  821,  821,  821, 1323,  688,  686,  399,  687, 1265,
  689,  826,  826, 1056,  826,  390,  224,  821,  821,  821,
  821, 1263, 1256, 1542,  512,  557,   97, 1244,  826,  789,
  826,  826,  826,  498, 1191,  826,   98,  962,  826,  826,
  484, 1257, 1638,  527, 1518,  528,  996, 1697,  826, 1524,
  770,  821, 1324,  688,  686, 1704,  687, 1702,  689, 1738,
  989,   99,  826, 1373, 1764,  826, 1326,  688,  686, 1732,
  687, 1657,  689,  638, 1535, 1706,  518,  536,  774,  100,
  509,  826,  412,  827, 1408,  827, 1034,  826,  811,  116,
 1025,  476,  826,  827,  705,  948,  361,  362,  363,  709,
  182,  183,  953,  826,  826,  967,  826, 1184,  949, 1165,
  827,  265,  826, 1634, 1585, 1744, 1714,  718, 1774,  364,
  365,  415,  416,  417,  366,  367,  418,  419,  820,  827,
  827, 1287,  637,  827,  421,  422,  883, 1128,    0,    0,
  827, 1337,  827,  827,    0,    0,  827,    0,    0,    0,
  827,  516,    0,  827,    0,  827,    0,  827,    0,    0,
    0,    0,  827,  827,    0,  827,    0,    0,  684,  820,
    0,  820,  820,  820,  685,    0,    0,    0,    0,    0,
  684,  827,  827,    0,  827,    0,  685,  820,  820,  820,
  820,    0,  516,    0,    0,  516,    0,    0,  827,    0,
  827,  827,  827,    0,    0,  827,    0,    0,  827,  827,
  516,    0,    0,    0,    0,    0,    0,    0,  827,    0,
  821,  820,  821,    0,    0,    0,    0,    0,    0,    0,
  821,    0,  827,    0,    0,  827, 1327,  688,  686,    0,
  687,    0,  689,  684,    0,    0,    0,  821,    0,  685,
    0,  827,    0,    0,    0,  195,    0,  827,    0,    0,
    0,    0,  827,    0,    0,  822,  821,  821,    0,    0,
  821,    0,    0,  827,  827,    0,  827,  821,    0,  821,
  821,    0,  827,  821,    0,    0,    0,  821,    0,    0,
  821,  684,  821,    0,  821,    0,    0,  685,    0,  821,
  821,    0,  821,    0,    0,  684,  822,    0,  822,  822,
  822,  685,    0,    0,  195,    0,    0,    0,  821,  821,
    0,  821,    0,    0,  822,  822,  822,  822,    0,    0,
    0,    0,    0,    0,    0,  821,    0,  821,  821,  821,
    0,    0,  821,    0,    0,  821,  821,    0,    0,    0,
    0,    0,    0,    0,    0,  821,    0,    0,  822,    0,
    0,    0,    0,    0,  180,    0,    0,    0,    0,  821,
    0,    0,  821,    0,    0,    0, 1328,  688,  686,    0,
  687,    0,  689,    0,    0, 1329,  688,  686,  821,  687,
  820,  689,  820,    0,  821,    0,    0,    0,    0,  821,
  820,    0,    0,    0,    0,  180,    0,    0,  180,    0,
  821,  821,    0,  821,    0,    0,    0,  820,    0,  821,
    0,    0,    0,  180, 1330,  688,  686,    0,  687,  516,
  689,  516,    0,    0,    0,  825,  820,  820,    0,  516,
  820,    0,    0,    0,  176,    0,    0,  820,    0,  820,
  820,    0,  516,  820,    0,    0,    0,  820,    0,    0,
  820,    0,  820,    0,  820,    0,    0,    0,    0,  820,
  820,    0,  820,    0,    0,  684,  825,    0,  825,  825,
  825,  685,    0,    0,    0,    0,    0,    0,  820,  820,
    0,  820,    0,    0,  825,  825,  825,  825,    0,    0,
    0,    0,    0,  176,    0,  820,    0,  820,  820,  820,
    0,    0,  820,  195,    0,  820,  820,    0,    0,    0,
  186,    0,    0,    0,    0,  820,    0,  822,  825,  822,
  516,    0,    0,    0,  195,    0,    0,  822,    0,  820,
    0,    0,  820, 1331,  688,  686,    0,  687,    0,  689,
    0,  195,  516,    0,  822,    0,  195,    0,  820,  516,
    0,    0,  195,    0,  820,    0, 1455,  688,  686,  820,
  687,    0,  689,  822,  822,    0,  151,  822,    0,  186,
  820,  820,    0,  820,  822,  195,  822,  822,    0,  820,
  822,    0,    0,  516,  822,    0,    0,  822,    0,  822,
    0,  822,    0,    0,  195,    0,  822,  822,    0,  822,
  195,  620,  195,  195,  426,  684,  427,    0,    0,  195,
    0,  685,  180,    0,  684,  822,  822,    0,  822,  429,
  685,    0,    0,    0,  255,  151,    0,  195,    0,    0,
    0,    0,  822,  180,  822,  822,  822,    0,    0,  822,
    0,    0,  822,  822, 1456,  688,  686,    0,  687,    0,
  689,    0,  822,  684,    0,  180, 1463,  688,  686,  685,
  687,  180,  689,    0,  195,    0,  822,    0,    0,  822,
    0,    0,    0,    0,    0,  195,    0,  620,    0,    0,
  426,    0,  427,    0,  180,  822,    0,  825,    0,  825,
    0,  822,  176,    0,    0,  429,  822,  825,    0,    0,
  255,    0,    0,  180,    0,    0,    0,  822,  822,    0,
  822,    0,  180,  176,  825,    0,  822,    0,  180,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  825,  825,  176,  180,  825,    0,    0,
    0,  176,    0,    0,  825,    0,  825,  825,    0,    0,
  825,    0,    0,  662,  825,  662,  662,  825,  662,  825,
    0,  825,    0,    0,  176,    0,  825,  825,  186,  825,
    0,  662,  684,  180,    0,    0,  662,    0,  685,    0,
    0,    0,    0,  176,    0,  825,  825,    0,  825,  186,
    0,    0,  176,    0,    0,  684,    0,    0,  176,    0,
    0,  685,  825,    0,  825,  825,  825,    0,    0,  825,
    0,  186,  825,  825,    0,    0,  176,  186,    0,    0,
  195,    0,  825,    0,    0,    0,    0,    0,  402,    0,
    0,    0,    0,    0,    0,    0,  825,  403,    0,  825,
  186,    0,  195,    0,    0,  151,    0,    0,    0,    0,
    0,  404,    0,  176,  616,  825,    0,  359,  405,  186,
    0,  825,    0,    0,    0,    0,  825,  151,  186,    0,
    0,  195,    0,    0,  186,    0,  617,  825,  825,    0,
  825,    0,    0,  684,    0,    0,  825,    0,  406,  685,
  195,    0,  186,    0,    0,  684,  151,  796,  195,  195,
    0,  685,    0,    0,  402,  195,    0,  152,    0,    0,
    0,    0,    0,  403,    0,  151,  407,  408,    0,    0,
    0,    0,    0,  195,  151,    0,    0,  404,  409,  186,
  151,  635,  410,  359,  405,  195,    0,  195,  796,    0,
  618,  796,    0,    0,    0,    0,    0,    0,  151,    0,
    0,    0,  617,    0,    0,    0,  796,    0,    0,    0,
  195,    0,    0,    0,  406,    0,  152,    0,    0,    0,
    0,    0,  635,  662,    0,  635,    0,    0,    0,    0,
  662,    0,    0,  619,    0,  195,    0,    0,    0,  662,
  635,    0,  407,  408,    0,  411,    0,    0,    0,    0,
    0,    0,    0,  662,  409,  412,    0,    0,  410,  662,
  662,    0,    0,    0,    0,    0,  618,  662,    0,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,    0,
    0,    0,    0,  414,    0,    0,    0,    0,    0,    0,
  662,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,    0,  678,    0,  421,  422,  619,
  423,  424,  425,    0,    0,    0,  662,    0,  662,  662,
  660,  411,  660,  660,    0,  660,    0,    0,    0,    0,
  662,  412,    0,    0,  662,    0,  187,    0,  660,    0,
    0,    0,    0,  660,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,    0,    0,    0,  414,
    0,    0,    0,    0,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425,    0,
    0,    0,    0,    0,    0,  187,  620,  662,    0,  426,
    0,  427,    0,    0,    0,    0,    0,  662,    0,  796,
    0,    0,    0,    0,  429,    0,    0,    0,    0,  255,
    0,  662,  662,  662,  662,  662,  662,    0,    0,    0,
    0,    0,    0,    0,    0,  662,  152,    0,    0,    0,
    0,    0,    0,    0,  662,  662,  662,  662,  662,  662,
  662,  662,  662,    0,  662,    0,    0,    0,  152,  662,
  662,    0,  662,  662,  662,    0,  796,    0,    0,  796,
    0,    0,  428,    0,   57,  426,  796,  427,    0,  796,
    0,    0,    0,  796,    0,   58,    0,  152,  796,    0,
  429,  796,   59,    0,    0,  255,    0,    0,    0,    0,
  635,    0,    0,  635,    0,   60,  152,  796,    0,    0,
  635,    0,    0,  635,    0,  152,   79,  635,    0,    0,
    0,  152,  635,   80,    0,  635,    0,   81,   82,    0,
    0,  796,    0,    0,  796,  796,   83,    0,    0,  152,
  660,  635,    0,    0,  796,    0,    0,  660,   84,    0,
    0,    0,    0,    0,    0,    0,  660,    0,    0,    0,
    0,  796,    0,    0,    0,  635,   61,    0,    0,  635,
  660,    0,    0,    0,    0,    0,  660,  660,  635,    0,
    0,    0,   62,  796,  660,    0,    0,    0,  796,    0,
    0,    0,    0,    0,  187,  635,    0,    0,    0,   63,
  796,    0,  796,    0,    0,    0,    0,  660,    0,    0,
    0,    0,    0,   85,   64,  187,    0,    0,   65,    0,
    0,   66,  635,  402,    0,    0,    0,    0,    0,   67,
   86,    0,  403,  660,  635,  660,  660,  187,    0,    0,
    0,    0,    0,  187,    0,   87,  404,  660,   68,   88,
    0,  660,  359,  405,    0,    0,    0,    0,    0,    0,
   89,    0,    0,    0,    0,    0,  187,    0,    0,    0,
    0,  617,    0,    0,    0,    0,    0,    0,    0,   90,
    0,    0,    0,  406,    0,  187,    0,    0,    0,    0,
    0,    0, 1067,    0,  187, 1068,    0,    0,    0,  402,
  187,    0,    0,    0,    0,    0,    0,    0,  403,    0,
    0,  407,  408,    0,  660,    0,    0,    0,  187,    0,
    0,    0,  404,  409,  660,    0,    0,  410,  359,  405,
    0,  428,    0,    0,  426,  618,  427,    0,  660,  660,
  660,  660,  660,  660,    0,    0,    0,    0,    0,  429,
    0,    0,  660,    0,  255,  187,    0,    0,    0,  406,
    0,  660,  660,  660,  660,  660,  660,  660,  660,  660,
    0,  660,    0,    0,    0,    0,  660,  660,  619,  660,
  660,  660,    0,    0,    0,    0,    0,  407,  408,    0,
  411,    0,    0,    0,    0,    0,    0,    0,    0,  409,
  412,    0,    0,  410,    0,    0,    0,  428,    0,    0,
  426,    0,  427,    0,  361,  362,  363,  413,  182,  183,
    0,    0,    0,    0,    0,  429,    0,    0,  414,    0,
  255,    0,    0,    0,    0,    0,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,    0,
    0,    0,  421,  422,    0,  423,  424,  425, 1069,    1,
    0,    0,    0,    0,    0,    0,  411,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  412,    0,    0,    0,
    0,    2,    0,  428,    0,    0,  426,    0,  427,    3,
  361,  362,  363,  413,  182,  183,    4,    0,    5,    0,
    6,  429,    0,    0,  414,    7,  255,    0,    0,    0,
    0,    0,    8,  364,  365,  415,  416,  417,  366,  367,
  418,  419,    0,  420,    0,    0,    9,    0,  421,  422,
    0,  423,  424,  425,    0,    0,    0,   10,    0,    0,
    0,    0,    0,    0,    0,    0, 1427, 1428,    0,    0,
    0, 1077, 1432, 1433, 1068, 1435, 1436,    0,  402,    0,
    0,    0,    0, 1440, 1441, 1442, 1443,  403, 1444, 1445,
 1446, 1447, 1448, 1449,    0,  220,    0,    0,  632,  220,
    0,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0,    0,    0,    0,  220,    0,    0,    0,  220,    0,
    0,  220,    0,    0,   11,    0,    0,    0,    0,    0,
    0,   12,    0,    0,   13,    0,   14,   15,  406,  632,
    0,    0,  632,    0,    0,    0,    0, 1081,    0,    0,
 1068,    0,    0,    0,  402,    0,    0,  632,    0,    0,
    0,   16,  220,  403,    0,    0,  407,  408,  220,  220,
  220,    0,  220,  220,  220,    0,  220,  404,  409,    0,
    0,    0,  410,  359,  405,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  220,  748,  220,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   17,    0,    0,    0,  406,    0,    0,    0,    0,    0,
    0,    0,    0, 1089,    0,    0, 1068,    0,    0,  220,
  402,    0,    0,    0,   79,    0,    0, 1069,  748,  403,
    0,  748,  407,  408,    0,  411,  220,    0,    0,    0,
    0,    0,    0,  404,  409,  412,  748,    0,  410,  359,
  405,  428,    0,    0,  426,    0,  427,    0,  220,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,  429,
    0,    0,    0,  414,  255,    0,    0,    0,    0,    0,
  406,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,  220,  220,    0,    0,  421,  422,    0,
  423,  424,  425, 1069,    0,    0,    0,    0,  407,  408,
  220,  411,    0,    0,    0,    0,    0,    0,    0,    0,
  409,  412,    0,  428,  410,    0,  426,    0,  427,    0,
    0,    0,    0,    0,    0,  361,  362,  363,  413,  182,
  183,  429,    0,    0,    0,    0,  255,    0,    0,  414,
    0,    0,    0,    0,    0,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425, 1069,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  412,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  632,    0,    0,
  632,  361,  362,  363,  413,  182,  183,  632,    0,    0,
  632,    0,    0,    0,  632,  414,    0,    0,    0,  632,
    0,    0,  632,    0,  364,  365,  415,  416,  417,  366,
  367,  418,  419,    0,  420,    0,    0,    0,  632,  421,
  422,    0,  423,  424,  425,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1092,  632,    0, 1068,    0,  632,    0,  402,    0,
    0,    0,    0,    0,    0,  632,    0,  403,    0,    0,
    0,    0,    0,    0, 1371,    0,    0,    0,    0,    0,
    0,  404,  632,    0,    0,    0,  748,  359,  405,  748,
    0,    0,    0,    0,    0,    0,  748,    0,    0,  748,
    0,    0,    0,  748,    0,    6,    0,    0,  748,  632,
    0,  748, 1605,    0,    0,    0, 1490, 1491,  406, 1492,
    0,  632, 1493, 1097,    0,    0, 1068,  748,    0,    0,
  402,    0,    0,    0,    0,    0, 1494,    0,  428,  403,
    0,  426, 1495,  427,    0,    0,  407,  408,    0,    0,
    0,  748,    0,  404,  748,  748,  429,    0,  409,  359,
  405,  255,  410,    0,  748,  924,  688,  686,    0,  687,
    0,  689,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  748,    0,    0,  855,  854,  856,    0,    0,    0,
  406,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1496,  748,    0,    0,  428,    0,  748,  426,
    0,  427,    0,    0,    0,    0,    0, 1069,  407,  408,
  748,   14,  748,    0,  429,  411,    0,    0,    0,  255,
  409,    0,    0,    0,  410,  412, 1497,    0,    0,  828,
    0,    0,    0,  559,    0,    0,   16,    0,    0,  361,
  362,  363,  413,  182,  183, 1606,    0, 1498,  829,    0,
    0,    0,  560,  414,  477,  561,    0,    0,    0,    0,
    0,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,    0,    0,    0,  421,  422, 1069,
  423,  424,  425, 1499,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,  562,  412,    0,    0,
    0,    0,  563,  564,  565,    0,  566,  567,  568,    0,
  569,  361,  362,  363,  413,  182,  183,    0,    0,    0,
    0,    0,    0,    0,    0,  414,    0,    0,    0,    0,
  570,    0,  571,    0,  364,  365,  415,  416,  417,  366,
  367,  418,  419,    0,  420,    0,    0,    0, 1100,  421,
  422, 1068,  423,  424,  425,  402,    0,    0,    0,    0,
    0,    0, 1371,  572,  403,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  428,    0,  456,  426,  404,  427,
  573,    0,    0,    0,  359,  405,  842,    0,    0,    0,
    0,    0,  429,    6,  684,    0,    0,  255,    0,    0,
  685,    0,  574,  843, 1490, 1491,    0, 1492,    0,    0,
 1493,    0,    0,    0,    0,  406, 1103,    0,    0, 1068,
    0,    0,    0,  402, 1494,    0,    0,    0,    0,    0,
 1495,    0,  403,    0,    0,    0,    0,  575,  576,  844,
    0,    0,    0,  407,  408,    0,  404,    0,  845,    0,
    0,    0,  359,  405,  577,  409,  846,    0,  428,  410,
    0,  426,    0,  427,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  847,  429,  848,    0,    0,
    0,  255,    0,  406,    0,    0,    0,    0,    0,    0,
 1496,  849,    0,  850,  851,  852,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
    0,  407,  408,    0, 1069,    0,    0,    0,    0,    0,
    0,    0,  411,  409, 1497,    0,    0,  410,    0,    0,
    0,    0,  412,    0,   16,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  853, 1498,  361,  362,  363,  413,
  182,  183,  477,    0,    0,    0,    0,    0,    0,    0,
  414,    0,    0,    0,    0,    0,    0,    0,    0,  364,
  365,  415,  416,  417,  366,  367,  418,  419,    0,  420,
    0, 1499, 1069,    0,  421,  422,    0,  423,  424,  425,
  411,    0,    0,    0,    0,    0,    0,    0,    0,  558,
  412,  402,    0,  559,    0,    0,    0,    0,    0,    0,
  403,  754,    0,    0,  361,  362,  363,  413,  182,  183,
    0,    0,  560,    0,  404,  561,    0,    0,  414,    0,
  359,  405,    0,    0,    0,    0,    0,  364,  365,  415,
  416,  417,  366,  367,  418,  419,    0,  420,    0,    0,
    0,    0,  421,  422,    0,  423,  424,  425,    0,    0,
    0,  406,    0,    0,    0,    0,  562,    0,    0,    0,
    0,    0,  563,  564,  565,    0,  566,  567,  568,    0,
  569,    0,    0,    0,    0,  402,    0,  360,    0,  407,
  408,    0,    0,  931,  403,  931,  931,    0,  931,    0,
  570,  409,  571,    0,    0,  410,    0,    0,  404,    0,
    0,  931,    0,    0,  359,  405,  931,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  572,    0,    0,    0,    0,    0,  662,
    0,    0,  662,    0,  662,  406,    0,    0,    0,    0,
  573,    0,    0,    0,    0,    0,    0,  662,    0,    0,
    0,    0,  662,    0,    0,    0,    0,    0,  411,    0,
    0,  360,  574,  407,  408,    0,    0,    0,  412,    0,
    0,    0,    0,    0,    0,  409,    0,  187,    0,  410,
    0,    0,  361,  362,  363,  413,  182,  183,    0,    0,
    0,    0,    0,    0,    0,    0,  414,  575,  576,    0,
    0,    0,    0,    0,    0,  364,  365,  415,  416,  417,
  366,  367,  418,  419,  577,  420,    0,    0,    0,    0,
  421,  422,    0,  423,  424,  425,  678,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  411,    0,    0,    0,    0,    0,    0,  558,
    0,    0,  412,  559,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  361,  362,  363,  413,
  182,  183,  560,    0,    0,  561,    0,    0,    0,    0,
  414,    0,    0,    0,    0,    0,    0,    0,    0,  364,
  365,  415,  416,  417,  366,  367,  418,  419,    0,  420,
  309,    0,    0,    0,  421,  422,    0,  423,  424,  425,
  931,    0,    0,    0,    0,    0,  562,    0,    0,  931,
    0,    0,  563,  564,  565,    0,  566,  567,  568,    0,
  569,  309,    0,  931,    0,    0,    0,    0,  309,  931,
  931,    0,  309,  309,    0,  309,    0,    0,  309,  662,
  570,    0,  571,    0,    0,  428,  662,    0,  426,    0,
  427,    0,  309,    0,    0,  662,    0,    0,  309,    0,
  931,    0,    0,  429,    0,    0,    0,    0,  255,  662,
    0,    0,    0,  572,    0,  662,  662,    0,    0,    0,
    0,    0,    0,  662,    0,    0,  931,    0,  931,  931,
  573,  428,    0,    0,  426,    0,  427,    0,    0,    0,
  931,    0,    0,    0,  931,    0,  662,    0,    0,  429,
    0,    0,  574,    0,  255,    0,    0,    0,  309,    0,
    0,    0,    0,    0,    0,    0,    0,  187,    0,    0,
    0,    0,    0,    0,  662,  662,    0,  309,    0,    0,
    0,    0,    0,    0,    0,    0,  662,  575,  576,    0,
  662,    0,  309,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  309,    0,  577,    0,    0,  931,    0,    0,
    0,  309,    0,  309,    0,    0,    0,  931,    0,    0,
  309,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  931,  931,  931,  931,  931,  931,    0,    0,    0,
    0,    0,    0,    0,    0,  931,    0,    0,    0,  309,
    0,    0,    0,  662,  931,  931,  931,  931,  931,  931,
  931,  931,  931,  662,  931,    0,    0,    0,    0,  931,
  931,    0,  931,  931,  931,    0,    0,  662,  662,  662,
  662,  662,  662,    0,    0,    0,    0,    0,    0,    0,
    0,  662,    0,    0,    0,    0,    0,    0,    0,    0,
  662,  662,  662,  662,  662,  662,  662,  662,  662,    0,
  662,    0,  402,    0,    0,  662,  662,    0,  662,  662,
  662,  403,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
    0,  359,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  428,  402,    0,
  426,    0,  427,    0,    0,    0,    0,  403,    0,    0,
    0,    0,  406,    0,    0,  429,    0,    0,    0,    0,
  255,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  407,  408,    0,  428,  926,    0,  426,    0,  427,    0,
    0,    0,  409,  220,    0,    0,  410,  220,  406,    0,
    0,  429,    0,    0,    0,    0,  255,    0,    0,    0,
    0,    0,  220,    0,    0,    0,  220,    0,    0,  220,
    0,    0,    0,    0,    0,    0,  407,  408,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  409,    0,
    0,    0,  410,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  411,
  220,    0,    0,    0,    0,    0,  220,  220,  220,  412,
  220,  220,  220,    0,  220,    0,    0,  670,    0,    0,
    0,    0,    0,  361,  362,  363,  413,  182,  183,  678,
    0,    0,    0,    0,  220,    0,  220,  414,    0,    0,
    0,    0,    0,    0,    0,  411,  364,  365,  415,  416,
  417,  366,  367,  418,  419,  412,  420,    0,    0,    0,
    0,  421,  422,    0,  423,  424,  425,  220,    0,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,    0,
    0,    0,    0,  414,  220,    0,    0,    0,    0,    0,
    0,    0,  364,  365,  415,  416,  417,  366,  367,  418,
  419,    0,  420,    0,  402,    0,  220,  421,  422,    0,
  423,  424,  425,  403,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,
    0,    0,    0,  359,  405,    0,    0,    0,    0,    0,
    0,  220,  220,    0,    0,    0,    0,    0,    0,  428,
  402,    0,  426,    0,  427,    0,    0,    0,  220,  403,
    0,    0,    0,    0,  406,    0,    0,  429,    0,    0,
    0,    0,  255,  404,    0,    0,    0,    0,    0,  359,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,  407,  408,    0,  428,    0,    0,  426,    0,
  427,    0,    0,    0,  409,  558,    0,    0,  410,  559,
  406,    0,    0,  429,    0,    0,    0,    0,  255,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  560,    0,
    0,  561,    0,    0,    0,    0,    0,    0,  407,  408,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409,    0,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  411,  562,    0,    0,    0,    0,    0,  563,  564,
  565,  412,  566,  567,  568,    0,  569,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,    0,    0,    0,  570,    0,  571,  414,
    0,    0,    0,    0,    0,    0,    0,  411,  364,  365,
  415,  416,  417,  366,  367,  418,  419,  412,  420,    0,
    0,    0,    0,  421,  422,    0,  423,  424,  425,  572,
    0,  361,  362,  363,  413,  182,  183,    0,    0,    0,
    0,    0,    0,    0,    0,  414,  573,    0,    0,    0,
    0,    0,    0,    0,  364,  365,  415,  416,  417,  366,
  367,  418,  419,    0,  420,    0,  402,    0,  574,  421,
  422,    0,  423,  424,  425,  403,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  404,
    0,    0,    0,    0,    0,  359,  405,    0,    0,    0,
    0,    0,    0,  575,  576,    0,    0,    0,    0,    0,
    0,  428,  402,    0,  426,    0,  427,    0,    0,    0,
  577,  403,    0,    0,    0,    0,  406,    0,    0,  429,
    0,    0,    0,    0,  255,  404,    0,    0,    0,    0,
    0,  359,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  407,  408,    0, 1682,    0,    0,
  426,    0,  427,    0,    0,    0,  409,  133,    0,    0,
  410,  133,  406,    0,    0,  429,    0,    0,    0,    0,
  255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  133,    0,    0,  133,    0,    0,    0,    0,    0,    0,
  407,  408,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  409,    0,    0,    0,  410,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  411,  133,    0,    0,    0,    0,    0,
  133,  133,  133,  412,  133,  133,  133,    0,  133,    0,
    0,    0,    0,    0, 1095,    0,    0,  361,  362,  363,
  413,  182,  183, 1276,    0,    0,    0,    0,  133,    0,
  133,  414,    0,    0,    0,    0,    0,    0,    0,  411,
  364,  365,  415,  416,  417,  366,  367,  418,  419,  412,
  420,    0,    0,    0,    0,  421,  422,    0,  423,  424,
  425,  133,    0,  361,  362,  363,  413,  182,  183,    0,
    0,    0,    0,    0,    0,    0,    0,  414,  133,    0,
    0,    0,    0,    0,    0,    0,  364,  365,  415,  416,
  417,  366,  367,  418,  419,    0,  420,    0,  402,    0,
  133,  421,  422,    0,  423,  424,  425,  403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  404,    0,    0,    0,    0,    0,  359,  405,    0,
    0,    0,    0,    0,    0,  133,  133,    0,    0,    0,
    0,    0,    0,  428,  402,    0,  426,    0,  427,    0,
    0,    0,  133,  403,    0,    0,    0,    0,  406,    0,
    0,  429,    0,    0,    0,    0,  255,  404,    0,    0,
    0,    0,    0,  359,  405,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  407,  408,    0,  931,
    0,    0,  931,    0,  931,    0,    0,    0,  409,    0,
    0,    0,  410,    0,  406,    0,    0,  931,    0,    0,
    0,    0,  931,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,    0,  407,  408,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  409,    0,    0,    0,  410,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  412,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1289,    0,    0,  361,
  362,  363,  413,  182,  183,    0,    0,    0,    0,    0,
    0,    0,    0,  414,    0,    0,    0,    0,    0,    0,
    0,  411,  364,  365,  415,  416,  417,  366,  367,  418,
  419,  412,  420,    0,    0,    0,    0,  421,  422,    0,
  423,  424,  425,    0,    0,  361,  362,  363,  413,  182,
  183,    0,    0,  765,    0,    0,    0,    0,    0,  414,
    0,    0,    0,    0,  766,    0,    0,    0,  364,  365,
  415,  416,  417,  366,  367,  418,  419,    0,  420,    0,
  402,    0,    0,  421,  422,    0,  423,  424,  425,  403,
    0,    0,    0,    0,  765,    0,    0,  765,    0,    0,
    0,    0,    0,  404,    0,  766,    0,    0,  766,  359,
  405,    0,  765,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  766,    0,    0,  931,    0,    0,    0,
    0,    0,    0,    0,    0,  931,    0,    0,    0,    0,
  406,  790,    0,    0,    0,    0,    0,  769,    0,  931,
    0,    0,    0,    0,    0,  931,  931,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  407,  408,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409,    0,  790,    0,  410,  790,  931,    0,  769,    0,
    0,  769,    0,    0,    0,    0,    0,    0,    0,    0,
  790,    0,    0,    0,    0,    0,  769,    0,    0,    0,
    0,    0,    0,    0,  931,  931,    0,    0,    0,    0,
    0,    0,    0,    0,  767,    0,  931,    0,    0,    0,
  931,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  411,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  412,    0,    0,
    0,    0,    0,    0,    0,  767,    0,    0,  767,    0,
    0,  361,  362,  363,  413,  182,  183,    0,    0,    0,
    0,    0,    0,  767,    0,  414,    0,    0,    0,    0,
    0,    0,    0,  931,  364,  365,  415,  416,  417,  366,
  367,  418,  419,  931,  420,    0,    0,    0,  768,  421,
  422,    0,  423,  424,  425,  765,    0,  931,  931,  931,
  931,  931,  931,    0,    0,    0,  766,    0,    0,    0,
    0,  931,    0,    0,    0,    0,    0,    0,    0,    0,
  931,  931,  931,  931,  931,  931,  931,  931,  931,  768,
  931,    0,  768,    0,    0,  931,  931,    0,  931,  931,
  931,    0,    0,    0,    0,    0,    0,  768,    0,    0,
    0,  798,  765,    0,    0,  765,    0,    0,    0,    0,
    0,    0,  765,  766,    0,  765,  766,    0,    0,  765,
    0,    0,    0,  766,  765,    0,  766,  765,    0,    0,
  766,    0,    0,  790,    0,  766,    0,    0,  766,  769,
    0,    0,  798,  765,    0,  798,    0,    0,    0,    0,
    0,  762,    0,    0,  766,    0,    0,    0,    0,    0,
  798,    0,    0,    0,    0,    0,    0,  765,    0,    0,
  765,  765,    0,    0,    0,    0,    0,    0,  766,    0,
  765,  766,  766,    0,  763,    0,    0,    0,    0,    0,
  790,  766,  762,  790,    0,  762,  769,  765,    0,  769,
  790,    0,    0,  790,    0,    0,  769,  790,  766,  769,
  762,    0,  790,  769,    0,  790,  767,    0,  769,  765,
    0,  769,    0,    0,  765,  763,    0,    0,  763,    0,
  766,  790,    0,    0,    0,  766,  765,  769,  765,    0,
    0,    0,    0,  763,    0,    0,    0,  766,    0,  766,
    0,    0,    0,    0,    0,  790,    0,    0,  790,  790,
    0,  769,    0,    0,  769,  769,    0,    0,  790,    0,
    0,    0,    0,  767,  769,    0,  767,    0,  764,    0,
    0,    0,    0,  767,    0,  790,  767,    0,    0,    0,
  767,  769,    0,    0,    0,  767,    0,    0,  767,  797,
  768,    0,    0,    0,    0,    0,    0,  790,    0,    0,
    0,    0,  790,  769,  767,    0,    0,    0,  769,  764,
    0,    0,  764,    0,  790,    0,  790,    0,  791,    0,
  769,    0,  769,    0,    0,    0,    0,  764,  767,    0,
  797,  767,  767,  797,    0,    0,    0,    0,    0,    0,
    0,  767,    0,    0,    0,    0,    0,  768,  797,    0,
  768,    0,  799,  798,    0,    0,    0,  768,  767,  791,
  768,    0,  791,    0,  768,    0,    0,    0,    0,  768,
    0,    0,  768,    0,    0,    0,    0,  791,    0,    0,
  767,    0,    0,    0,    0,  767,    0,    0,  768,    0,
    0,    0,    0,  799,    0,    0,  799,  767,    0,  767,
    0,    0,    0,  762,    0,    0,    0,    0,    0,    0,
  798,  799,  768,  798,    0,  768,  768,    0,    0,    0,
  798,    0,    0,  798,    0,  768,    0,  798,    0,    0,
    0,    0,  798,    0,    0,  798,  763,    0,    0,    0,
    0,    0,  768,    0,    0,    0,    0,    0,  800,    0,
    0,  798,    0,    0,    0,    0,    0,    0,    0,    0,
  762,    0,    0,  762,  768,    0,    0,    0,    0,  768,
  762,    0,    0,  762,    0,  798,    0,  762,  798,  798,
    0,  768,  762,  768,    0,  762,    0,    0,  798,  800,
    0,    0,  800,  763,    0,    0,  763,    0,  788,    0,
    0,  762,    0,  763,    0,  798,  763,  800,    0,    0,
  763,    0,    0,    0,    0,  763,    0,    0,  763,    0,
    0,    0,    0,    0,    0,  762,    0,  798,  762,  762,
  764,    0,  798,    0,  763,    0,    0,    0,  762,  788,
    0,    0,  788,    0,  798,    0,  798,    0,    0,    0,
    0,  797,    0,    0,    0,  762,    0,  788,  763,    0,
    0,  763,  763,    0,    0,    0,    0,    0,    0,    0,
    0,  763,    0,    0,    0,  792,    0,  762,    0,    0,
  791,    0,  762,    0,    0,    0,    0,  764,  763,    0,
  764,    0,    0,    0,  762,    0,  762,  764,    0,    0,
  764,    0,    0,    0,  764,    0,    0,    0,  797,  764,
  763,  797,  764,    0,  799,  763,  792,    0,  797,  792,
    0,  797,    0,    0,    0,  797,    0,  763,  764,  763,
  797,    0,    0,  797,  792,    0,    0,  791,    0,    0,
  791,    0,    0,    0,    0,    0,    0,  791,    0,  797,
  791,    0,  764,    0,  791,  764,  764,    0,    0,  791,
    0,    0,  791,    0,    0,  764,    0,    0,    0,    0,
    0,  799,    0,  797,  799,    0,  797,  797,  791,    0,
    0,  799,  764,    0,  799,    0,  797,    0,  799,    0,
    0,    0,    0,  799,    0,    0,  799,    0,    0,    0,
    0,    0,  791,  797,  764,  791,  791,    0,    0,  764,
  800,    0,  799,    0,    0,  791,    0,  801,    0,    0,
    0,  764,    0,  764,    0,  797,    0,    0,  789,    0,
  797,    0,  791,    0,    0,    0,  799,    0,    0,  799,
  799,    0,  797,    0,  797,    0,    0,    0,    0,  799,
    0,    0,    0,    0,  791,    0,    0,    0,  801,  791,
  788,  801,  793,    0,    0,    0,  799,  800,    0,  789,
  800,  791,  789,  791,    0,    0,  801,  800,    0,    0,
  800,    0,    0,    0,  800,    0,    0,  789,  799,  800,
    0,    0,  800,  799,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  793,    0,  799,  793,  799,  800,    0,
    0,    0,    0,    0,    0,    0,    0,  788,    0,    0,
  788,  793,    0,    0,    0,    0,    0,  788,    0,    0,
  788,    0,  800,    0,  788,  800,  800,  792,    0,  788,
    0,    0,  788,    0,    0,  800,    0,    0,    0,    0,
    0,    0,  688,  686,    0,  687,    0,  689,  788,    0,
    0,    0,  800,    0,    0,    0,    0,    0,    0,    0,
  855,  854,  856,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  788,    0,  800,  788,  788,    0,    0,  800,
    0,    0,    0,    0,  792,  788,    0,  792,    0,    0,
    0,  800,    0,  800,  792,    0,    0,  792,    0,    0,
    0,  792,  788,    0,    0,    0,  792,    0,    0,  792,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  788,  792,    0,    0, 1371,  788,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  788,    0,  788,    0,    0,    0,    0,    0,  792,
    0,    0,  792,  792,    0,    0,    0,    0,    0,    6,
    0,    0,  792,    0,    0,    0, 1489,    0,    0,  801,
 1490, 1491,    0, 1492,    0,    0, 1493,    0,    0,  792,
  789,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1494,    0,    0,    0,    0,    0, 1495,    0,    0,    0,
    0,  792,    0,    0,    0,    0,  792,    0,    0,    0,
    0,    0,    0,    0,  793,    0,    0,    0,  792,    0,
  792,    0,    0,    0,    0,    0,  801,    0,    0,  801,
    0,    0,    0,    0,    0,    0,  801,  789,    0,  801,
  789,    0,    0,  801,    0,    0,    0,  789,  801,    0,
  789,  801,    0,    0,  789,    0, 1496,    0,    0,  789,
    0,    0,  789,    0,    0,    0,    0,  801,    0,    0,
    0,  793,  842,    0,  793,   14,    0,    0,  789,    0,
  684,  793,    0,    0,  793,    0,  685,    0,  793,  843,
 1497,  801,    0,  793,  801,  801,  793,    0,    0,    0,
   16,    0,  789,    0,  801,  789,  789,    0,    0,    0,
    0, 1498,  793,    0,    0,  789,    0,    0,  477,    0,
    0,  801,    0,    0,    0,  844,    0,    0,    0,    0,
    0,    0,  789,    0,  845,    0,  793,    0,    0,  793,
  793,    0,  846,  801,    0,    0,    0, 1499,  801,  793,
    0,    0,    0,    0,  789,    0,    0,    0,    0,  789,
  801,  847,  801,  848,    0,    0,  793,    0,    0,    0,
    0,  789,    0,  789,    0,    0,    0,  849,    0,  850,
  851,  852,    0,    0,    0,    0,    0,    0,  793,    0,
    0,    0,    0,  793,    0,    0,    0,    0,    0,  138,
    0,    0,    0,    0,    0,  793,    0,  793,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,    0,    0,  155,  156,  157,  158,
  853,  159,  534,    0,  160,  161,    0,    0,    0,    0,
    0,  139,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,  152,  153,  154,    0,    0,  155,
  156,  157,  158,  446,  159,    0,    0,  160,  161,    0,
    0,    0,    0,  446,  446,  446,  446,  446,  446,  446,
  446,  446,  446,  446,  446,  446,  446,  446,    0,    0,
  446,  446,  446,  446,    0,  446,    0,    0,  446,  446,
};
static short yycheck[] = {                                      16,
   58,   49,    4,   59,    4,   50,  128,   99,   57,    0,
  292,  233,   58,  233,  488,   51,  481,   62,  117,  118,
  332,  723,  117,  118,   80,  304,   67,  675,   64,  517,
  336,  336,  520,  328,  306,   65,   84,  526,  526,  731,
   85,  263,   68,  463,   83,  678,  241,   92,   89,  135,
  108,  606,  110,  987,  661,  250,  987,  392,   88,   63,
  994,   78, 1166,  994,   90,  987,  994,  923,  299,    0,
   87,  987,  994,  109,  618,  612,  620,    0,  994,  724,
  725,  354,   86,  122,  129,  656,  178, 1209,   45,    0,
  131,    0,    0,  995,  130,  822,    0,  342,   58,  254,
  605,   40,   40,  258, 1006,  790,   40,  283,  263,  823,
  656,   44,  719,   44,  206,    0,  165,   41, 1047,   58,
   44,   44,    0,   41,   44,  274,  670, 1029,   59,   42,
   41,   41,   41,   44,    0,   44,   59,   41,  233,   40,
   44,   44,   46,  192,   44,  940,  728,  369,   59,  369,
   59,   59,   42, 1122, 1259,   59,   41,   61,   40,   44,
   44,  283,   45, 1343,    0,   41,   40,  722,    0, 1353,
  292,   40,   45,  763,   59,   41,   41,  235,   44,   40,
 1023,   59,   40,  233,  496, 1353,   45,   45,  264,  384,
   63,   40,   44,   59,   63, 1353,  751,   44,  290,   44,
    0,   45,   63,  239,   44,  760,   44,  293,  503,  504,
  505,  506,  248, 1207,  258, 1228,   45,  398,    0,  267,
  526,  526,   63,   59,    0,  283,  356,   59,  268,  264,
  695,  262,  260, 1353,  288,  271,  329,  262,  483,   16,
   59,  553,  691,   91,    0,   61,  260,  305,  339,  963,
  529,    0, 1357, 1674,  312,   12,  314,  265,  316,   59,
  815,  319,   41,  307,   12,   44,  378, 1115,  423, 1117,
  392,  426,  427,  428,  369,  882,    0,   59, 1048,  277,
  329,  197,  331,   59,    0,  558,    0,    0,   59,  777,
    0, 1042,  302,  338,  257,  303,  456,  346,  265,  340,
  579,   78,  350,   59,  875, 1239,  406,  393, 1239,  339,
   59, 1239,  348,  857,  858,  886,  887, 1239,  467,  369,
   44, 1742, 1224, 1239,    0,  425,  366,  321,   41,  875,
  338,   44,    0,  284,  392,   59,  303,  449,  383, 1760,
  886,  248,  265,   59,  380,   59,   59,  285,  346,   59,
  274,  444,  443,  398,  354,  391,  387,    0,  115,  395,
  264,  265,  387,  493,  400,    0,    0,  115,  461, 1225,
  286,    0,  335, 1168,  918,  419,  280,  412,  798, 1012,
  303, 1394, 1376,   59,  297,  461,  310,   44,  319,    0,
  418,   59,    0,  437, 1353,    0,  319, 1581,  264,  303,
 1522,  305, 1245,    0,  418,  436,  961,  461,  998,  999,
  341, 1181,   59, 1581,  332,  319,   59,  639,  341,  639,
  269,    0,  258, 1581,   59,   59,  264,  471, 1179,  277,
   59,    0,  264,  443,  319,  319,    0,  341, 1123,  661,
 1545,    0,  986,  319,  726,  310,  545,  332,   59, 1629,
 1005,   59,  501,  648,   59,  321,  341,    0,  305, 1049,
  739, 1581,   59,  742,  384,  620, 1368, 1049,  526, 1317,
 1372,  307, 1374,  384,  696,   44,  258,  756,  659,  397,
   59,  321, 1451,   41, 1413,  301, 1041,  397,  412,  440,
   59, 1613,    0,  400, 1186,   59,  461,  719,   41,  548,
   59,  461,  459,  388,  783,  597,  661,  738,  264,  664,
    0, 1159,  397, 1415,  669,  264,   59, 1054, 1166,  674,
  675,  395,  461,  461, 1251,  307,  459,  461,  683,  486,
  685,  686,  687,  688,  689, 1040,  691, 1641, 1252, 1661,
  716,  696,  546,  467,  639,  880,  604,  455,  461, 1234,
  453,   59,  601,  602,  826,  455,  441, 1352,  558,  432,
  461, 1132,  835,  441,  719, 1210,  448,  812,    0,   59,
  455,  461,  503, 1429,  432, 1697,  459,  455, 1682, 1481,
  503, 1424,  640,  419, 1486,  437,  459,  453,    0,  639,
  459,  502,  411,  502,  716,  461,  264,  397,  459,  503,
  459,  459,  701,  432,  726,  329,  319,  523,  332,   41,
  455,  613,   44,  613,  659,  459,  329,  461,  459,  332,
  344,  264, 1581, 1072,  663, 1527,  288,   59,  341,   41,
  459,  344,   44,  412,  410,  734,  735,  419, 1389,  349,
  411,  441,  398, 1276, 1414, 1631, 1548,   59, 1192,  398,
  403,  259,  368,  264,  368,  455,  264,    0,  716,  264,
  882, 1412,  270,  721,  321,  341,   41,  264, 1212,  864,
  728, 1363,  867,  397,  710,  388,  712,  593,  288,  974,
  280,  730,  731,   41,  397,  264,  286,  842,  843,  844,
  748,  301,  847,  848,  849, 1250,  851,  852,  853,  854,
  855,  856,   41, 1637,  262, 1417, 1637,  341, 1315, 1637,
   41,  357,  341,  992,  349, 1637,   59,  441,  776,  777,
 1622, 1637,    0, 1709, 1626, 1004,  273,  882,  441,  453,
  398,  455,    0,  737,  889,  890,  262,  892,    0,  894,
  453,   41,  897,  898,  899,  900,  901,  902, 1043, 1028,
   42,  837,    0,  839, 1603,  398,  264, 1743,  880,  914,
  329,  916,   41,  332,  258,  987,    0,  987,  332, 1671,
  329,  775,  994,  332,  994,  344,  319,  813,  309,   41,
 1052,   59,  782,  287,  430,  398,  329,  398,  824,  332,
  398,   59,    0,  398, 1643,  795,    0,   59,  341,  461,
  349,  398,  461,    0,  808,  809,  810,   41,    0,  302,
 1354,   59, 1149,  307,    0, 1152, 1464, 1237,  410,  398,
  865, 1507,  880, 1243,  437,   59,  321,  868,  397,  387,
    0,  461, 1321,  397,    0,  835,  866,   41,  397,  329,
   44, 1690,  332,  869,   41,  388,  278,   44,  280,   41,
  388,   59,   44,  320,  397,   59,  288,    0,  471,    0,
  461,  387,   59, 1135,   61,    0,  278,   59,  280,  308,
  309,   41,  441,   59, 1723,  257,  288,  441, 1580,  308,
  309,  284,  441,  357,  453,  494,  455,   42,  461,   59,
  398,  455,   47,   59,  453,  504,  455,    0,  441, 1748,
   41, 1375,  302,  441,  262,    0,   41,  397,  301,   44,
  436, 1623,  455,  462,  463,  406,   59, 1072,   59,    0,
  394,  452,  396,  262,   59,  419,   61, 1026, 1402, 1084,
 1085,  262, 1087, 1088,  401,  278,    0,  280,   41,  339,
 1095,   44,  437, 1222, 1256,  419,   41,  379,    0,    0,
  443,  441,  384,  335,  329,  461,   59,  332,  462,  463,
  353,  461,  262, 1202,   59,  455,  457,  379,  260,  401,
  444,  272, 1578,    0,   41,  442,  408,   44,   59, 1258,
   44,    0,  385,  262, 1139,    0,  264, 1045,  289,  401,
  273, 1049, 1147, 1641, 1149,   59,  408, 1152, 1335, 1154,
 1488, 1466, 1339, 1158, 1159, 1160, 1161,   59,   59, 1695,
  442, 1166,  304,  452, 1253, 1321, 1321, 1239, 1020, 1239,
 1020,   41,  397,  452,   44,  278, 1121, 1122, 1123,  387,
  442, 1035,   59,  334, 1682, 1579,  379,  440, 1664,   59,
   59, 1727, 1728,  443,   59, 1167,  406, 1051,  387,  261,
 1205, 1364, 1596, 1057,  457, 1599,  387,  319,  341,  403,
    0,  258,  363, 1669,  378, 1360, 1752,  320,   44,  461,
  502, 1353,  260,  459,  278,  343,  280,  274,  263,  341,
 1766, 1707,   45,   59,  288,  319,  278,  387,  280, 1188,
  502, 1190,  278, 1315,  280,  343,  288,  457,  332, 1378,
   63,  326,  446, 1416,  301,  419, 1712,  341,  387,    0,
  307,  319,  278,  310,  280, 1741,  304, 1356, 1273,   59,
  398, 1121, 1122,  258, 1461,  280,  388, 1282,  313,  430,
  378,  286,  260,  341, 1289,  397,  461, 1186,  406,  324,
 1419,  409,  277,  278, 1148,  280,    0,   44,  401,  319,
  285,    0,  466,  288,  388, 1254, 1621,  425,  406, 1643,
 1315,  409,  332,  397,  459,  344,  301,  418,   59, 1391,
   41,  341,  307,   44,  302,  379,  319,  425,  319,  441,
 1335,  260,   41,  451, 1339,   44,  314,  379,  461,  442,
  369,   40,   41,  455,  445,   44,   93,  401,  341,    0,
  341,    0,  279,  451,  408,   59,  431,  441, 1673,  401,
   59,  339,   61,  438,   44,  412,  408, 1266,  388,  322,
   44, 1270,  419, 1767,  319,  304,  329,  397,  461,  332,
 1232, 1353, 1232,  336,   93,  435, 1391,  322,  442, 1723,
  437,  344,   91,  428,  379,   44,  341,  388,  427, 1371,
  442,  336,  260,  330,   44,  319,  397,  360,   59,  344,
   59,  461,  343,   93, 1748, 1544,  401,  259,  323,   93,
  467,  441,    0,  408,  471,  360,    0,  341,  270, 1666,
  408,  384, 1437, 1438,  419,  455,  260,  364,  308,  309,
  418,  343,  343,  388,  397, 1534,  304,  378,  502, 1581,
  441,    0,  437,   93, 1543,  382, 1461,  442,  259, 1464,
  502,  414, 1370, 1371, 1363,  443,   40,   41, 1705,  270,
   44, 1603,    0,  344, 1370,  406,  378,  378,  409,  414,
  304,   59,  260,  296,    0,   59,  471,   61,  441,    0,
  379, 1496,   41, 1379,  425,   44,  441,   40,  369,  302,
  453,  322,  455, 1740,  406,  406, 1451,  409,  409,   40,
   59, 1643,  401,   41,   45,  336,   44,   91,    0,  408,
  451, 1758,  329,  425,  425,   41,  304,  258,   44,  302,
  261,   59,   63,   61, 1483, 1507,  339,  459,  260,  360,
  353,  411,  323,   59, 1549,    0,  317,  318,   59,  451,
  451,    0, 1557,  442,    0,    0,  427,  402, 1690,  258,
    0,    0,    0,   91,  486, 1637,  339, 1637,   42,   43,
    0,   45,  384,   47,    0,  274,  307,   59,  277,  278,
  302,  280,  452, 1525, 1490,    0,  285,  384, 1593,  288,
  461, 1723,  314,  414,    0,  444,  403,    0,    0, 1507,
   44, 1451,  301,  418,   59,  408,  328, 1457,  307, 1581,
   59,  310,  461,   59,   59,  418, 1748,  339,   44,   59,
   59,   59,   42,   43,    0,   45,    0,   47, 1526,   59,
  445, 1603,  439,   59,  386, 1521, 1641,  444,   41,   41,
  443,   44,   44,  450,   59,  458,  459,  460,  384,  462,
  463, 1550, 1493,   59,  461, 1554,   59,   59,   61,   61,
    0,  353,  469,  494,  495,    0,  343,    0,  481,  482,
  384, 1643, 1614,  486,  487,  338,    0, 1682,    0,  322,
  379,    0,  215,   59,  258,   59,  408,  379,   91,   91,
  223,  404,  338,  336,  338,    0,  418, 1592,  461,    0,
  274,  378,  401,  277,  278,    0,  280,   41,  421,  408,
   44,  285,  375,  412,  288,  403,  495,  360, 1690,   59,
  419,  443,    0, 1695,   59,  388,   59,  301,  419,  406,
  258,  375,  409,  307,    0,   59,  310,   59,  437,  461,
   59,  384,  274,  442,  388, 1651,  274,  435,  425,  277,
  278, 1723,  280, 1620,   59, 1727, 1728,  285,   59,   93,
  288,  319,  450,   41,   59,  296,   44,  279,  467, 1636,
    0,  414,  471,  301,  451,   41, 1748,  349,   44,  307,
 1752,   59,  310,  462,  463,   41,  358, 1695,   44,  301,
  459,   40,  461,   59, 1766,    0,  403, 1664,    0,   42,
   43, 1653,   45, 1653,   47,  379,  280,   41, 1675,  425,
   44,   41,  286,   41,   44, 1115,   44, 1117,  330, 1727,
 1728, 1719,  353,   42,   43,   44,   45,  401,   47,   59,
  692,   61,  439,  466,  408,  468,   41,  349,  412,   41,
 1707,  462,   44,  450, 1752,  419,  358,  321,  264, 1716,
  317,  379,  364,  715,   59,  258,  258,   59, 1766,   61,
  280,   91,  319,  437,   41,  727,  286,   44,  442,  338,
  382,  274,  274,  401, 1741,  278,  278,  280,  280,    0,
  408,  461,  285,  285,  412,  288,  288,   42,   43,  337,
   45,  419,   47,  467,  392,  393,  322,  471,  301,  301,
  453,  321,  403,  329,  307,  307,  332,  310,  310,  437,
  336,   41,   42,   43,  442,   45,    0,   47,  344,   41,
   41,   40,   44,   44,  458,  459,  460,  458,  459,  460,
   41,  462,  463,   44,  360,  462,  463,  341,   59,  467,
   61,    0,  660,  471,  662,  403,  321,  665,  666,  667,
  481,  482,  486,  487,  319,  486,  487,   41,  384,   41,
   44,  384,   44,  384,   42,   43,  437,   45,  362,   47,
  322,  397,  451,  435,  461,   59,  379,  379,   42,   43,
  322,   45,   41,   47,  336,  418,   42,   43,  414,   45,
  443,   47,   41,  419,  336,   44,  358,  288,  401,  401,
   59,    0,  344,  412,   41,  408,  408,   44,  360,  412,
  412,  470,  278,   44,  280,  441,  419,  419,  360,  262,
   41,   41,  288,   44,   44,  264,   61,  453,  258,  455,
   41,   40,  384,   44,  437,  437,  373,  280,  264,  442,
  442,  319,   41,  286,  274,   44,   41,    0,  278,   44,
  280,  329,  287,   40,  332,  285,  258,  462,  288,    0,
   59,  280,  414,  341,  467,  467,  344,  286,  471,  471,
   41,  301,  414,   44,  462,  277,  278,  307,  280,   41,
  310,  462,   44,  285,   44,  321,  288,   40,   41,   42,
   43,   44,   45,   46,   47,  461,  437,   44,   40,  301,
   41,  403,   40,   44,   40,  307,   59,   60,   61,   62,
  388,   40,   40,  379,  319,   40,   40,   40,   59,  397,
   40,   40,   40,   40,  329,  280,   40,  332,   41,   42,
   43,  286,   45,  461,   47,  401,  341,  258,   91,   91,
   93,   46,  408,  321,  295,   44,   44,  429,   40,  379,
  280,   46,   61,  280,  264,  306,  286,  278,   44,  280,
  383,  355,  313,  441,  285,   46,  349,  288,   44,  278,
  278,  401,  301,  264,  461,  453,  442,  379,  408,    0,
  301,  398,  412,  388,    0,  437,  307,  338,  471,  419,
  398,  459,  397,  448,  278,  448,  280,  277,  262,  401,
  400,   40,  280,  350,  288,   40,  408,  437,  286,    0,
   40,   91,  442,   40,  319,  417,  280,  419,  264,  384,
   41,  412,  286,   44,  280,   41,   42,   43,   44,   45,
  286,   47,   44,  390,  312,  437,  441,  467,   59,  383,
  442,  471,   40,   59,   60,   61,   62,   40,  453,    0,
   41,  437,  403,   44,  465,  318,  312,   40,  379,  321,
  319,  321,  452,   41,  461,  459,  453,  461,   59,  471,
  329,    0,  461,  332,  449,  264,   40,   93,  472,  278,
  401,  280,  341,  459,  435,  277,  285,  408,  439,  288,
   41,  274,   40,   44,  301,  379,  278,  491,  419,  450,
  285,  345,  301,  345,  387,  499,  500,  501,   59,  262,
  387,  264,   41,  387,  418,   44,  437,  401,  419,  272,
  417,  442,  301,  419,  408,   40,   40,  280,  357,  388,
   59,  264,   40,  286,  274,  461,  289,  278,  397,  280,
   44,  386,  368,   44,  285,  321,   41,  288,   42,   43,
  471,   45,  264,   47,    0,  308,  309,   44,  442,  312,
  301,   44,  321,   40,  280,   59,  319,  280,  321,  322,
   44,  329,  325,  286,   44,  503,  329,  266,   40,  332,
  379,  334,  441,  336,  502,  300,   40,  264,  341,  342,
  455,  344,  461,  441,   41,   41,   42,   43,   44,   45,
  423,   47,  401,   58,   41,   41,   41,  360,  361,  408,
  363,  264,  493,   59,   60,   61,   62,  395,   41,   41,
   42,   43,  310,   45,  377,   47,  379,  380,  381,   41,
   40,  384,  310,   40,  387,  388,   42,   43,  379,   45,
   40,   47,  353,  442,  397,   40,  262,   93,  264,   40,
   40,   40,   40,   59,   40,   40,  272,  278,  411,  280,
  401,  414,   40,   40,  280,   40,   40,  408,   40,   40,
  286,  328,  262,  289,   41,   42,   43,  430,   45,   44,
   47,  436,   41,  436,  309,  389,  389,  278,  441,  280,
  344,    0,  308,  309,  274,  389,  312,  288,  332,  452,
  453,  442,  455,  319,  391,  321,  322,  392,  461,  325,
  301,  271,  447,  329,  288,  423,  332,  408,  334,  387,
  336,  387,  387,   45,  387,  341,  342,  278,  344,  280,
   41,  387,   41,   42,   43,   44,   45,  387,   47,  278,
   41,  379,   40,  418,  360,  361,   41,  363,   41,   41,
   59,   60,   61,   62,  386,  437,   41,  309,  379,  338,
  397,  377,  436,  379,  380,  381,  339,  302,  384,  339,
  443,  387,  388,  443,  302,  386,   41,   41,  353,   41,
  401,  397,   41,  372,   93,  372,  280,  408,  379,   41,
  319,   41,  286,  322,   41,  411,   41,  847,  414,  849,
  329,  851,  852,  332,  854,  855,  856,  336,   41,   41,
  401,   41,  341,   41,  430,  344,  262,  408,  264,   41,
  436,  442,   41,   41,   41,  441,  272,   41,  379,   41,
  280,  360,   59,   44,   40,  341,  452,  453,   59,  455,
  286,   40,  341,  289,   59,  461,   59,   41,  353,   59,
  401,  442,   59,  345,   59,  384,  321,  408,  280,  388,
   41,    0,  308,  309,  286,   40,  312,  369,  397,   59,
  341,  384,   59,  319,  280,  321,  322,  461,   44,  325,
  286,  384,   41,  329,  384,  414,  332,   41,  334,   44,
  336,  442,  411,   44,  436,  341,  342,  305,  344,  302,
  443,   41,   41,   42,   43,   44,   45,   40,   47,   59,
  344,  294,  441,  280,  360,  361,   44,  363,  260,  286,
   59,   60,   61,   62,  453,  305,  464,  308,   44,   41,
    0,  377,  461,  379,  380,  381,  338,  264,  384,  384,
  384,  387,  388,  473,  474,  475,  476,  477,  478,  479,
  480,  397,   40,  262,   93,  264,  264,  278,  390,  321,
  302,  459,  264,  272,  471,  411,  452,   40,  414,   41,
   42,   43,  314,   45,  296,   47,  310,  459,  264,  412,
  289,   41,   42,   43,  430,   45,  437,   47,  271,  344,
  436,  344,  344,  436,  344,  441,  459,  339,    0,  308,
  309,  461,  271,  312,   41,   40,  452,  453,   40,  455,
  319,   59,  321,  322,   41,  461,  325,   41,   59,   44,
  329,  305,   41,  332,    0,  334,   59,  336,    0,    0,
 1118,  353,  341,  342,   12,  344, 1054,  608,  242,   41,
  648,   43,   44,   45,   41,   42,   43,  250,   45, 1052,
   47,  360,  361,  827,  363,  243,   82,   59,   60,   61,
   62, 1049, 1044, 1403,  302,  333,  408, 1033,  377,  553,
  379,  380,  381,  297,  977,  384,  418,  721,  387,  388,
  288, 1045, 1590,  314, 1376,  314,  758, 1659,  397, 1378,
  531,   93,   41,   42,   43, 1663,   45, 1662,   47, 1699,
  748,  443,  411, 1203, 1751,  414,   41,   42,   43, 1696,
   45, 1608,   47,  369, 1391, 1664,  307,  319,  533,  461,
  300,  430,  444,  262, 1241,  264,  805,  436,  592,   13,
  797,  275,  441,  272,  465,  696,  458,  459,  460,  469,
  462,  463,  710,  452,  453,  726,  455,  966,  697,  940,
  289,  120,  461, 1581, 1479, 1716, 1675,  481, 1769,  481,
  482,  483,  484,  485,  486,  487,  488,  489,    0,  308,
  309, 1086,  368,  312,  496,  497,  655,  883,   -1,   -1,
  319, 1154,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
  329,    0,   -1,  332,   -1,  334,   -1,  336,   -1,   -1,
   -1,   -1,  341,  342,   -1,  344,   -1,   -1,  280,   41,
   -1,   43,   44,   45,  286,   -1,   -1,   -1,   -1,   -1,
  280,  360,  361,   -1,  363,   -1,  286,   59,   60,   61,
   62,   -1,   41,   -1,   -1,   44,   -1,   -1,  377,   -1,
  379,  380,  381,   -1,   -1,  384,   -1,   -1,  387,  388,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,
  262,   93,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,   -1,  411,   -1,   -1,  414,   41,   42,   43,   -1,
   45,   -1,   47,  280,   -1,   -1,   -1,  289,   -1,  286,
   -1,  430,   -1,   -1,   -1,    0,   -1,  436,   -1,   -1,
   -1,   -1,  441,   -1,   -1,    0,  308,  309,   -1,   -1,
  312,   -1,   -1,  452,  453,   -1,  455,  319,   -1,  321,
  322,   -1,  461,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,  280,  334,   -1,  336,   -1,   -1,  286,   -1,  341,
  342,   -1,  344,   -1,   -1,  280,   41,   -1,   43,   44,
   45,  286,   -1,   -1,   59,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,  411,
   -1,   -1,  414,   -1,   -1,   -1,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   41,   42,   43,  430,   45,
  262,   47,  264,   -1,  436,   -1,   -1,   -1,   -1,  441,
  272,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
  452,  453,   -1,  455,   -1,   -1,   -1,  289,   -1,  461,
   -1,   -1,   -1,   59,   41,   42,   43,   -1,   45,  278,
   47,  280,   -1,   -1,   -1,    0,  308,  309,   -1,  288,
  312,   -1,   -1,   -1,    0,   -1,   -1,  319,   -1,  321,
  322,   -1,  301,  325,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,  341,
  342,   -1,  344,   -1,   -1,  280,   41,   -1,   43,   44,
   45,  286,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
   -1,  363,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  377,   -1,  379,  380,  381,
   -1,   -1,  384,  258,   -1,  387,  388,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,  397,   -1,  262,   93,  264,
  379,   -1,   -1,   -1,  279,   -1,   -1,  272,   -1,  411,
   -1,   -1,  414,   41,   42,   43,   -1,   45,   -1,   47,
   -1,    0,  401,   -1,  289,   -1,  301,   -1,  430,  408,
   -1,   -1,  307,   -1,  436,   -1,   41,   42,   43,  441,
   45,   -1,   47,  308,  309,   -1,    0,  312,   -1,   59,
  452,  453,   -1,  455,  319,  330,  321,  322,   -1,  461,
  325,   -1,   -1,  442,  329,   -1,   -1,  332,   -1,  334,
   -1,  336,   -1,   -1,  349,   -1,  341,  342,   -1,  344,
   59,   40,  357,  358,   43,  280,   45,   -1,   -1,  364,
   -1,  286,  258,   -1,  280,  360,  361,   -1,  363,   58,
  286,   -1,   -1,   -1,   63,   59,   -1,  382,   -1,   -1,
   -1,   -1,  377,  279,  379,  380,  381,   -1,   -1,  384,
   -1,   -1,  387,  388,   41,   42,   43,   -1,   45,   -1,
   47,   -1,  397,  280,   -1,  301,   41,   42,   43,  286,
   45,  307,   47,   -1,  419,   -1,  411,   -1,   -1,  414,
   -1,   -1,   -1,   -1,   -1,  430,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,  330,  430,   -1,  262,   -1,  264,
   -1,  436,  258,   -1,   -1,   58,  441,  272,   -1,   -1,
   63,   -1,   -1,  349,   -1,   -1,   -1,  452,  453,   -1,
  455,   -1,  358,  279,  289,   -1,  461,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  308,  309,  301,  382,  312,   -1,   -1,
   -1,  307,   -1,   -1,  319,   -1,  321,  322,   -1,   -1,
  325,   -1,   -1,   40,  329,   42,   43,  332,   45,  334,
   -1,  336,   -1,   -1,  330,   -1,  341,  342,  258,  344,
   -1,   58,  280,  419,   -1,   -1,   63,   -1,  286,   -1,
   -1,   -1,   -1,  349,   -1,  360,  361,   -1,  363,  279,
   -1,   -1,  358,   -1,   -1,  280,   -1,   -1,  364,   -1,
   -1,  286,  377,   -1,  379,  380,  381,   -1,   -1,  384,
   -1,  301,  387,  388,   -1,   -1,  382,  307,   -1,   -1,
  279,   -1,  397,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,  276,   -1,  414,
  330,   -1,  301,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  290,   -1,  419,  293,  430,   -1,  296,  297,  349,
   -1,  436,   -1,   -1,   -1,   -1,  441,  301,  358,   -1,
   -1,  330,   -1,   -1,  364,   -1,  315,  452,  453,   -1,
  455,   -1,   -1,  280,   -1,   -1,  461,   -1,  327,  286,
  349,   -1,  382,   -1,   -1,  280,  330,    0,  357,  358,
   -1,  286,   -1,   -1,  267,  364,   -1,    0,   -1,   -1,
   -1,   -1,   -1,  276,   -1,  349,  355,  356,   -1,   -1,
   -1,   -1,   -1,  382,  358,   -1,   -1,  290,  367,  419,
  364,    0,  371,  296,  297,  394,   -1,  396,   41,   -1,
  379,   44,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,
   -1,   -1,  315,   -1,   -1,   -1,   59,   -1,   -1,   -1,
  419,   -1,   -1,   -1,  327,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   41,  260,   -1,   44,   -1,   -1,   -1,   -1,
  267,   -1,   -1,  422,   -1,  444,   -1,   -1,   -1,  276,
   59,   -1,  355,  356,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  367,  444,   -1,   -1,  371,  296,
  297,   -1,   -1,   -1,   -1,   -1,  379,  304,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,  418,   -1,  496,  497,  422,
  499,  500,  501,   -1,   -1,   -1,  353,   -1,  355,  356,
   40,  434,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
  367,  444,   -1,   -1,  371,   -1,    0,   -1,   58,   -1,
   -1,   -1,   -1,   63,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   40,  434,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  444,   -1,  262,
   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  301,  496,
  497,   -1,  499,  500,  501,   -1,  319,   -1,   -1,  322,
   -1,   -1,   40,   -1,  295,   43,  329,   45,   -1,  332,
   -1,   -1,   -1,  336,   -1,  306,   -1,  330,  341,   -1,
   58,  344,  313,   -1,   -1,   63,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,  326,  349,  360,   -1,   -1,
  329,   -1,   -1,  332,   -1,  358,  306,  336,   -1,   -1,
   -1,  364,  341,  313,   -1,  344,   -1,  317,  318,   -1,
   -1,  384,   -1,   -1,  387,  388,  326,   -1,   -1,  382,
  260,  360,   -1,   -1,  397,   -1,   -1,  267,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  414,   -1,   -1,   -1,  384,  387,   -1,   -1,  388,
  290,   -1,   -1,   -1,   -1,   -1,  296,  297,  397,   -1,
   -1,   -1,  403,  436,  304,   -1,   -1,   -1,  441,   -1,
   -1,   -1,   -1,   -1,  258,  414,   -1,   -1,   -1,  420,
  453,   -1,  455,   -1,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,   -1,  403,  435,  279,   -1,   -1,  439,   -1,
   -1,  442,  441,  267,   -1,   -1,   -1,   -1,   -1,  450,
  420,   -1,  276,  353,  453,  355,  356,  301,   -1,   -1,
   -1,   -1,   -1,  307,   -1,  435,  290,  367,  469,  439,
   -1,  371,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,
  450,   -1,   -1,   -1,   -1,   -1,  330,   -1,   -1,   -1,
   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  469,
   -1,   -1,   -1,  327,   -1,  349,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,  358,  263,   -1,   -1,   -1,  267,
  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,  355,  356,   -1,  434,   -1,   -1,   -1,  382,   -1,
   -1,   -1,  290,  367,  444,   -1,   -1,  371,  296,  297,
   -1,   40,   -1,   -1,   43,  379,   45,   -1,  458,  459,
  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   -1,  472,   -1,   63,  419,   -1,   -1,   -1,  327,
   -1,  481,  482,  483,  484,  485,  486,  487,  488,  489,
   -1,  491,   -1,   -1,   -1,   -1,  496,  497,  422,  499,
  500,  501,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  444,   -1,   -1,  371,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,  472,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,  426,  261,
   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,
   -1,  283,   -1,   40,   -1,   -1,   43,   -1,   45,  291,
  458,  459,  460,  461,  462,  463,  298,   -1,  300,   -1,
  302,   58,   -1,   -1,  472,  307,   63,   -1,   -1,   -1,
   -1,   -1,  314,  481,  482,  483,  484,  485,  486,  487,
  488,  489,   -1,  491,   -1,   -1,  328,   -1,  496,  497,
   -1,  499,  500,  501,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1274, 1275,   -1,   -1,
   -1,  260, 1280, 1281,  263, 1283, 1284,   -1,  267,   -1,
   -1,   -1,   -1, 1291, 1292, 1293, 1294,  276, 1296, 1297,
 1298, 1299, 1300, 1301,   -1,  273,   -1,   -1,    0,  277,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,
   -1,  299,   -1,   -1,  406,   -1,   -1,   -1,   -1,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,  419,  327,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,  267,   -1,   -1,   59,   -1,   -1,
   -1,  443,  340,  276,   -1,   -1,  355,  356,  346,  347,
  348,   -1,  350,  351,  352,   -1,  354,  290,  367,   -1,
   -1,   -1,  371,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,    0,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  492,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,  407,
  267,   -1,   -1,   -1,  412,   -1,   -1,  426,   41,  276,
   -1,   44,  355,  356,   -1,  434,  424,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  367,  444,   59,   -1,  371,  296,
  297,   40,   -1,   -1,   43,   -1,   45,   -1,  446,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   58,
   -1,   -1,   -1,  472,   63,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,  481,  482,   -1,   -1,  496,  497,   -1,
  499,  500,  501,  426,   -1,   -1,   -1,   -1,  355,  356,
  498,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  444,   -1,   40,  371,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,  458,  459,  460,  461,  462,  463,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,  472,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  360,  496,
  497,   -1,  499,  500,  501,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  384,   -1,  263,   -1,  388,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,
   -1,  290,  414,   -1,   -1,   -1,  319,  296,  297,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,  332,
   -1,   -1,   -1,  336,   -1,  302,   -1,   -1,  341,  441,
   -1,  344,  309,   -1,   -1,   -1,  313,  314,  327,  316,
   -1,  453,  319,  260,   -1,   -1,  263,  360,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,  333,   -1,   40,  276,
   -1,   43,  339,   45,   -1,   -1,  355,  356,   -1,   -1,
   -1,  384,   -1,  290,  387,  388,   58,   -1,  367,  296,
  297,   63,  371,   -1,  397,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  414,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  399,  436,   -1,   -1,   40,   -1,  441,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  426,  355,  356,
  453,  418,  455,   -1,   58,  434,   -1,   -1,   -1,   63,
  367,   -1,   -1,   -1,  371,  444,  433,   -1,   -1,  273,
   -1,   -1,   -1,  277,   -1,   -1,  443,   -1,   -1,  458,
  459,  460,  461,  462,  463,  452,   -1,  454,  292,   -1,
   -1,   -1,  296,  472,  461,  299,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,   -1,   -1,   -1,  496,  497,  426,
  499,  500,  501,  490,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  444,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,   -1,   -1,  260,  496,
  497,  263,  499,  500,  501,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  407,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   42,   43,  290,   45,
  424,   -1,   -1,   -1,  296,  297,  272,   -1,   -1,   -1,
   -1,   -1,   58,  302,  280,   -1,   -1,   63,   -1,   -1,
  286,   -1,  446,  289,  313,  314,   -1,  316,   -1,   -1,
  319,   -1,   -1,   -1,   -1,  327,  260,   -1,   -1,  263,
   -1,   -1,   -1,  267,  333,   -1,   -1,   -1,   -1,   -1,
  339,   -1,  276,   -1,   -1,   -1,   -1,  481,  482,  325,
   -1,   -1,   -1,  355,  356,   -1,  290,   -1,  334,   -1,
   -1,   -1,  296,  297,  498,  367,  342,   -1,   40,  371,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  361,   58,  363,   -1,   -1,
   -1,   63,   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,
  399,  377,   -1,  379,  380,  381,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,
   -1,  355,  356,   -1,  426,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,  367,  433,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  444,   -1,  443,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  430,  454,  458,  459,  460,  461,
  462,  463,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
   -1,  490,  426,   -1,  496,  497,   -1,  499,  500,  501,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  444,  267,   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  276,  285,   -1,   -1,  458,  459,  460,  461,  462,  463,
   -1,   -1,  296,   -1,  290,  299,   -1,   -1,  472,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,
  484,  485,  486,  487,  488,  489,   -1,  491,   -1,   -1,
   -1,   -1,  496,  497,   -1,  499,  500,  501,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,   -1,   -1,   -1,   -1,  267,   -1,  353,   -1,  355,
  356,   -1,   -1,   40,  276,   42,   43,   -1,   45,   -1,
  374,  367,  376,   -1,   -1,  371,   -1,   -1,  290,   -1,
   -1,   58,   -1,   -1,  296,  297,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  407,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,  327,   -1,   -1,   -1,   -1,
  424,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  434,   -1,
   -1,  353,  446,  355,  356,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,  461,   -1,  371,
   -1,   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  472,  481,  482,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,
  486,  487,  488,  489,  498,  491,   -1,   -1,   -1,   -1,
  496,  497,   -1,  499,  500,  501,  418,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  434,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,  444,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,
  462,  463,  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,
  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,  491,
  271,   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,
  267,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,  276,
   -1,   -1,  346,  347,  348,   -1,  350,  351,  352,   -1,
  354,  302,   -1,  290,   -1,   -1,   -1,   -1,  309,  296,
  297,   -1,  313,  314,   -1,  316,   -1,   -1,  319,  260,
  374,   -1,  376,   -1,   -1,   40,  267,   -1,   43,   -1,
   45,   -1,  333,   -1,   -1,  276,   -1,   -1,  339,   -1,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,  290,
   -1,   -1,   -1,  407,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,  353,   -1,  355,  356,
  424,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,  327,   -1,   -1,   58,
   -1,   -1,  446,   -1,   63,   -1,   -1,   -1,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,  418,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  481,  482,   -1,
  371,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  443,   -1,  498,   -1,   -1,  434,   -1,   -1,
   -1,  452,   -1,  454,   -1,   -1,   -1,  444,   -1,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,   -1,   -1,   -1,  490,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,   -1,  496,
  497,   -1,  499,  500,  501,   -1,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   -1,
  491,   -1,  267,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,  267,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   40,   41,   -1,   43,   -1,   45,   -1,
   -1,   -1,  367,  273,   -1,   -1,  371,  277,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  340,   -1,   -1,   -1,   -1,   -1,  346,  347,  348,  444,
  350,  351,  352,   -1,  354,   -1,   -1,  452,   -1,   -1,
   -1,   -1,   -1,  458,  459,  460,  461,  462,  463,  418,
   -1,   -1,   -1,   -1,  374,   -1,  376,  472,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,  481,  482,  483,  484,
  485,  486,  487,  488,  489,  444,  491,   -1,   -1,   -1,
   -1,  496,  497,   -1,  499,  500,  501,  407,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,  482,  483,  484,  485,  486,  487,  488,
  489,   -1,  491,   -1,  267,   -1,  446,  496,  497,   -1,
  499,  500,  501,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,   -1,   40,
  267,   -1,   43,   -1,   45,   -1,   -1,   -1,  498,  276,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,  367,  273,   -1,   -1,  371,  277,
  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,  346,  347,
  348,  444,  350,  351,  352,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,  472,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,  481,  482,
  483,  484,  485,  486,  487,  488,  489,  444,  491,   -1,
   -1,   -1,   -1,  496,  497,   -1,  499,  500,  501,  407,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  481,  482,  483,  484,  485,  486,
  487,  488,  489,   -1,  491,   -1,  267,   -1,  446,  496,
  497,   -1,  499,  500,  501,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  267,   -1,   43,   -1,   45,   -1,   -1,   -1,
  498,  276,   -1,   -1,   -1,   -1,  327,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,  367,  273,   -1,   -1,
  371,  277,  327,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  340,   -1,   -1,   -1,   -1,   -1,
  346,  347,  348,  444,  350,  351,  352,   -1,  354,   -1,
   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,  459,  460,
  461,  462,  463,  418,   -1,   -1,   -1,   -1,  374,   -1,
  376,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
  481,  482,  483,  484,  485,  486,  487,  488,  489,  444,
  491,   -1,   -1,   -1,   -1,  496,  497,   -1,  499,  500,
  501,  407,   -1,  458,  459,  460,  461,  462,  463,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  472,  424,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  481,  482,  483,  484,
  485,  486,  487,  488,  489,   -1,  491,   -1,  267,   -1,
  446,  496,  497,   -1,  499,  500,  501,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  290,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  481,  482,   -1,   -1,   -1,
   -1,   -1,   -1,   40,  267,   -1,   43,   -1,   45,   -1,
   -1,   -1,  498,  276,   -1,   -1,   -1,   -1,  327,   -1,
   -1,   58,   -1,   -1,   -1,   -1,   63,  290,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,  327,   -1,   -1,   58,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,
  459,  460,  461,  462,  463,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  434,  481,  482,  483,  484,  485,  486,  487,  488,
  489,  444,  491,   -1,   -1,   -1,   -1,  496,  497,   -1,
  499,  500,  501,   -1,   -1,  458,  459,  460,  461,  462,
  463,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  472,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  481,  482,
  483,  484,  485,  486,  487,  488,  489,   -1,  491,   -1,
  267,   -1,   -1,  496,  497,   -1,  499,  500,  501,  276,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  290,   -1,   41,   -1,   -1,   44,  296,
  297,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,
  327,    0,   -1,   -1,   -1,   -1,   -1,    0,   -1,  290,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   41,   -1,  371,   44,  327,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,  458,  459,  460,  461,  462,  463,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  472,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  434,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  444,  491,   -1,   -1,   -1,    0,  496,
  497,   -1,  499,  500,  501,  262,   -1,  458,  459,  460,
  461,  462,  463,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,  482,  483,  484,  485,  486,  487,  488,  489,   41,
  491,   -1,   44,   -1,   -1,  496,  497,   -1,  499,  500,
  501,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,    0,  319,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  319,   -1,  332,  322,   -1,   -1,  336,
   -1,   -1,   -1,  329,  341,   -1,  332,  344,   -1,   -1,
  336,   -1,   -1,  262,   -1,  341,   -1,   -1,  344,  262,
   -1,   -1,   41,  360,   -1,   44,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,  360,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
  397,  387,  388,   -1,    0,   -1,   -1,   -1,   -1,   -1,
  319,  397,   41,  322,   -1,   44,  319,  414,   -1,  322,
  329,   -1,   -1,  332,   -1,   -1,  329,  336,  414,  332,
   59,   -1,  341,  336,   -1,  344,  262,   -1,  341,  436,
   -1,  344,   -1,   -1,  441,   41,   -1,   -1,   44,   -1,
  436,  360,   -1,   -1,   -1,  441,  453,  360,  455,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  453,   -1,  455,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,  388,
   -1,  384,   -1,   -1,  387,  388,   -1,   -1,  397,   -1,
   -1,   -1,   -1,  319,  397,   -1,  322,   -1,    0,   -1,
   -1,   -1,   -1,  329,   -1,  414,  332,   -1,   -1,   -1,
  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,    0,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,   -1,
   -1,   -1,  441,  436,  360,   -1,   -1,   -1,  441,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,    0,   -1,
  453,   -1,  455,   -1,   -1,   -1,   -1,   59,  384,   -1,
   41,  387,  388,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,  319,   59,   -1,
  322,   -1,    0,  262,   -1,   -1,   -1,  329,  414,   41,
  332,   -1,   44,   -1,  336,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   59,   -1,   -1,
  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,  360,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,  453,   -1,  455,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   59,  384,  322,   -1,  387,  388,   -1,   -1,   -1,
  329,   -1,   -1,  332,   -1,  397,   -1,  336,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  262,   -1,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,  436,   -1,   -1,   -1,   -1,  441,
  329,   -1,   -1,  332,   -1,  384,   -1,  336,  387,  388,
   -1,  453,  341,  455,   -1,  344,   -1,   -1,  397,   41,
   -1,   -1,   44,  319,   -1,   -1,  322,   -1,    0,   -1,
   -1,  360,   -1,  329,   -1,  414,  332,   59,   -1,   -1,
  336,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  436,  387,  388,
  262,   -1,  441,   -1,  360,   -1,   -1,   -1,  397,   41,
   -1,   -1,   44,   -1,  453,   -1,  455,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  414,   -1,   59,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,    0,   -1,  436,   -1,   -1,
  262,   -1,  441,   -1,   -1,   -1,   -1,  319,  414,   -1,
  322,   -1,   -1,   -1,  453,   -1,  455,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   -1,  319,  341,
  436,  322,  344,   -1,  262,  441,   41,   -1,  329,   44,
   -1,  332,   -1,   -1,   -1,  336,   -1,  453,  360,  455,
  341,   -1,   -1,  344,   59,   -1,   -1,  319,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  360,
  332,   -1,  384,   -1,  336,  387,  388,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  384,  322,   -1,  387,  388,  360,   -1,
   -1,  329,  414,   -1,  332,   -1,  397,   -1,  336,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,   -1,   -1,   -1,
   -1,   -1,  384,  414,  436,  387,  388,   -1,   -1,  441,
  262,   -1,  360,   -1,   -1,  397,   -1,    0,   -1,   -1,
   -1,  453,   -1,  455,   -1,  436,   -1,   -1,    0,   -1,
  441,   -1,  414,   -1,   -1,   -1,  384,   -1,   -1,  387,
  388,   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   41,  441,
  262,   44,    0,   -1,   -1,   -1,  414,  319,   -1,   41,
  322,  453,   44,  455,   -1,   -1,   59,  329,   -1,   -1,
  332,   -1,   -1,   -1,  336,   -1,   -1,   59,  436,  341,
   -1,   -1,  344,  441,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,  453,   44,  455,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  322,   59,   -1,   -1,   -1,   -1,   -1,  329,   -1,   -1,
  332,   -1,  384,   -1,  336,  387,  388,  262,   -1,  341,
   -1,   -1,  344,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,  360,   -1,
   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  384,   -1,  436,  387,  388,   -1,   -1,  441,
   -1,   -1,   -1,   -1,  319,  397,   -1,  322,   -1,   -1,
   -1,  453,   -1,  455,  329,   -1,   -1,  332,   -1,   -1,
   -1,  336,  414,   -1,   -1,   -1,  341,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  436,  360,   -1,   -1,  271,  441,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,  397,   -1,   -1,   -1,  309,   -1,   -1,  262,
  313,  314,   -1,  316,   -1,   -1,  319,   -1,   -1,  414,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  436,   -1,   -1,   -1,   -1,  441,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  453,   -1,
  455,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,  329,  319,   -1,  332,
  322,   -1,   -1,  336,   -1,   -1,   -1,  329,  341,   -1,
  332,  344,   -1,   -1,  336,   -1,  399,   -1,   -1,  341,
   -1,   -1,  344,   -1,   -1,   -1,   -1,  360,   -1,   -1,
   -1,  319,  272,   -1,  322,  418,   -1,   -1,  360,   -1,
  280,  329,   -1,   -1,  332,   -1,  286,   -1,  336,  289,
  433,  384,   -1,  341,  387,  388,  344,   -1,   -1,   -1,
  443,   -1,  384,   -1,  397,  387,  388,   -1,   -1,   -1,
   -1,  454,  360,   -1,   -1,  397,   -1,   -1,  461,   -1,
   -1,  414,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,  414,   -1,  334,   -1,  384,   -1,   -1,  387,
  388,   -1,  342,  436,   -1,   -1,   -1,  490,  441,  397,
   -1,   -1,   -1,   -1,  436,   -1,   -1,   -1,   -1,  441,
  453,  361,  455,  363,   -1,   -1,  414,   -1,   -1,   -1,
   -1,  453,   -1,  455,   -1,   -1,   -1,  377,   -1,  379,
  380,  381,   -1,   -1,   -1,   -1,   -1,   -1,  436,   -1,
   -1,   -1,   -1,  441,   -1,   -1,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   -1,  453,   -1,  455,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
  482,  483,  484,  485,   -1,   -1,  488,  489,  490,  491,
  430,  493,  461,   -1,  496,  497,   -1,   -1,   -1,   -1,
   -1,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  479,  480,  481,  482,  483,  484,  485,   -1,   -1,  488,
  489,  490,  491,  461,  493,   -1,   -1,  496,  497,   -1,
   -1,   -1,   -1,  471,  472,  473,  474,  475,  476,  477,
  478,  479,  480,  481,  482,  483,  484,  485,   -1,   -1,
  488,  489,  490,  491,   -1,  493,   -1,   -1,  496,  497,
};
#define YYFINAL 18
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 504
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ACTIVE","ADD","AFTER","ALL","ALTER","AND","ANY",
"AS","ASC","AT","AVG","AUTO","BASENAME","BEFORE","BEGIN","BETWEEN","BLOB","BY",
"CACHE","CAST","CHARACTER","CHECK","CHECK_POINT_LEN","COLLATE","COLLATION",
"COMMA","COMMIT","COMMITTED","COMPUTED","CONCATENATE","CONDITIONAL",
"CONSTRAINT","CONTAINING","COUNT","CREATE","CSTRING","CURRENT","CURSOR",
"DATABASE","DATE","DB_KEY","KW_DEBUG","DECIMAL","DECLARE","DEFAULT","DELETE",
"DESC","DISTINCT","DO","DOMAIN","DROP","ELSE","END","ENTRY_POINT","EQL",
"ESCAPE","EXCEPTION","EXECUTE","EXISTS","EXIT","EXTERNAL","FILTER","FOR",
"FOREIGN","FROM","FULL","FUNCTION","GDSCODE","GEQ","GENERATOR","GEN_ID","GRANT",
"GROUP","GROUP_COMMIT_WAIT","GTR","HAVING","IF","IN","INACTIVE","INNER",
"INPUT_TYPE","INDEX","INSERT","INTEGER","INTO","IS","ISOLATION","JOIN","KEY",
"KW_CHAR","KW_DEC","KW_DOUBLE","KW_FILE","KW_FLOAT","KW_INT","KW_LONG",
"KW_NULL","KW_NUMERIC","KW_UPPER","KW_VALUE","LENGTH","LOGFILE","LPAREN","LEFT",
"LEQ","LEVEL","LIKE","LOG_BUF_SIZE","LSS","MANUAL","MAXIMUM","MAX_SEGMENT",
"MERGE","MESSAGE","MINIMUM","MODULE_NAME","NAMES","NATIONAL","NATURAL","NCHAR",
"NEQ","NO","NOT","NOT_GTR","NOT_LSS","NUM_LOG_BUFS","OF","ON","ONLY","OPTION",
"OR","ORDER","OUTER","OUTPUT_TYPE","OVERFLOW","PAGE","PAGES","PAGE_SIZE",
"PARAMETER","PASSWORD","PLAN","POSITION","POST_EVENT","PRECISION","PRIMARY",
"PRIVILEGES","PROCEDURE","PROTECTED","RAW_PARTITIONS","READ","REAL",
"REFERENCES","RESERVING","RETAIN","RETURNING_VALUES","RETURNS","REVOKE","RIGHT",
"RPAREN","ROLLBACK","SEGMENT","SELECT","SET","SHADOW","SHARED","SINGULAR",
"SIZE","SMALLINT","SNAPSHOT","SOME","SORT","SQLCODE","STABILITY","STARTING",
"STATISTICS","SUB_TYPE","SUSPEND","SUM","TABLE","THEN","TO","TRANSACTION",
"TRIGGER","UNCOMMITTED","UNION","UNIQUE","UPDATE","USER","VALUES","VARCHAR",
"VARIABLE","VARYING","VERSION","VIEW","WAIT","WHEN","WHERE","WHILE","WITH",
"WORK","WRITE","FLOAT","NUMBER","NUMERIC","SYMBOL","STRING","INTRODUCER",
"ACTION","ADMIN","CASCADE","FREE_IT","RESTRICT","ROLE","COLUMN","TYPE",
"EXTRACT","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","WEEKDAY","YEARDAY",
"TIME","TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP",
"NUMBER64BIT","SCALEDINT","CURRENT_USER","CURRENT_ROLE","KW_BREAK","SUBSTRING",
"RECREATE","KW_DESCRIPTOR","FIRST","SKIP","CONNECTION_ID","TRANSACTION_ID",
"BIGINT","CASE","NULLIF","COALESCE","USING","NULLS","LAST",
};
char *yyrule[] = {
"$accept : top",
"top : statement",
"top : statement ';'",
"statement : alter",
"statement : blob",
"statement : commit",
"statement : create",
"statement : declare",
"statement : delete",
"statement : drop",
"statement : grant",
"statement : insert",
"statement : invoke_procedure",
"statement : recreate",
"statement : replace",
"statement : revoke",
"statement : rollback",
"statement : select",
"statement : set",
"statement : update",
"statement : KW_DEBUG signed_short_integer",
"grant : GRANT privileges ON prot_table_name TO user_grantee_list grant_option",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO user_grantee_list grant_option",
"grant : GRANT privileges ON prot_table_name TO grantee_list",
"grant : GRANT proc_privileges ON PROCEDURE simple_proc_name TO grantee_list",
"grant : GRANT role_name_list TO role_grantee_list role_admin_option",
"prot_table_name : simple_table_name",
"prot_table_name : TABLE simple_table_name",
"privileges : ALL",
"privileges : ALL PRIVILEGES",
"privileges : privilege_list",
"privilege_list : privilege",
"privilege_list : privilege_list ',' privilege",
"proc_privileges : EXECUTE",
"privilege : SELECT",
"privilege : INSERT",
"privilege : DELETE",
"privilege : UPDATE column_parens_opt",
"privilege : REFERENCES column_parens_opt",
"grant_option : WITH GRANT OPTION",
"grant_option :",
"role_admin_option : WITH ADMIN OPTION",
"role_admin_option :",
"simple_proc_name : symbol_procedure_name",
"revoke : REVOKE rev_grant_option privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE rev_grant_option proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM user_grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM user_grantee_list",
"revoke : REVOKE privileges ON prot_table_name FROM grantee_list",
"revoke : REVOKE proc_privileges ON PROCEDURE simple_proc_name FROM grantee_list",
"revoke : REVOKE role_name_list FROM role_grantee_list",
"rev_grant_option : GRANT OPTION FOR",
"grantee_list : grantee",
"grantee_list : grantee_list ',' grantee",
"grantee_list : grantee_list ',' user_grantee",
"grantee_list : user_grantee_list ',' grantee",
"grantee : PROCEDURE symbol_procedure_name",
"grantee : TRIGGER symbol_trigger_name",
"grantee : VIEW symbol_view_name",
"grantee : ROLE symbol_role_name",
"user_grantee_list : user_grantee",
"user_grantee_list : user_grantee_list ',' user_grantee",
"user_grantee : symbol_user_name",
"user_grantee : USER symbol_user_name",
"user_grantee : GROUP symbol_user_name",
"role_name_list : role_name",
"role_name_list : role_name_list ',' role_name",
"role_name : symbol_role_name",
"role_grantee_list : role_grantee",
"role_grantee_list : role_grantee_list ',' role_grantee",
"role_grantee : symbol_user_name",
"role_grantee : USER symbol_user_name",
"declare : DECLARE declare_clause",
"declare_clause : FILTER filter_decl_clause",
"declare_clause : EXTERNAL FUNCTION udf_decl_clause",
"udf_decl_clause : symbol_UDF_name arg_desc_list1 RETURNS return_value1 ENTRY_POINT sql_string MODULE_NAME sql_string",
"udf_data_type : simple_type",
"udf_data_type : BLOB",
"udf_data_type : CSTRING '(' pos_short_integer ')' charset_clause",
"arg_desc_list1 :",
"arg_desc_list1 : arg_desc_list",
"arg_desc_list1 : '(' arg_desc_list ')'",
"arg_desc_list : arg_desc",
"arg_desc_list : arg_desc_list ',' arg_desc",
"arg_desc : init_data_type udf_data_type",
"arg_desc : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value1 : return_value",
"return_value1 : '(' return_value ')'",
"return_value : init_data_type udf_data_type",
"return_value : init_data_type udf_data_type FREE_IT",
"return_value : init_data_type udf_data_type BY KW_VALUE",
"return_value : init_data_type udf_data_type BY KW_DESCRIPTOR",
"return_value : PARAMETER pos_short_integer",
"filter_decl_clause : symbol_filter_name INPUT_TYPE blob_subtype OUTPUT_TYPE blob_subtype ENTRY_POINT sql_string MODULE_NAME sql_string",
"create : CREATE create_clause",
"create_clause : EXCEPTION symbol_exception_name sql_string",
"create_clause : unique_opt order_direction INDEX symbol_index_name ON simple_table_name index_definition",
"create_clause : PROCEDURE procedure_clause",
"create_clause : TABLE table_clause",
"create_clause : TRIGGER def_trigger_clause",
"create_clause : VIEW view_clause",
"create_clause : GENERATOR generator_clause",
"create_clause : DATABASE db_clause",
"create_clause : DOMAIN domain_clause",
"create_clause : SHADOW shadow_clause",
"create_clause : ROLE role_clause",
"recreate : RECREATE recreate_clause",
"recreate_clause : PROCEDURE rprocedure_clause",
"recreate_clause : TABLE rtable_clause",
"recreate_clause : VIEW rview_clause",
"replace : CREATE OR ALTER replace_clause",
"replace_clause : PROCEDURE replace_procedure_clause",
"replace_clause : TRIGGER replace_trigger_clause",
"replace_clause : VIEW replace_view_clause",
"unique_opt : UNIQUE",
"unique_opt :",
"index_definition : column_list",
"index_definition : column_parens",
"index_definition : computed_by '(' begin_trigger value end_trigger ')'",
"shadow_clause : pos_short_integer manual_auto conditional sql_string first_file_length sec_shadow_files",
"manual_auto : MANUAL",
"manual_auto : AUTO",
"manual_auto :",
"conditional :",
"conditional : CONDITIONAL",
"first_file_length :",
"first_file_length : LENGTH equals long_integer page_noise",
"sec_shadow_files :",
"sec_shadow_files : db_file_list",
"db_file_list : db_file",
"db_file_list : db_file_list db_file",
"domain_clause : column_def_name as_opt data_type begin_trigger domain_default_opt end_trigger domain_constraint_clause collate_clause",
"as_opt : AS",
"as_opt :",
"domain_default_opt : DEFAULT begin_trigger default_value",
"domain_default_opt :",
"domain_constraint_clause :",
"domain_constraint_clause : domain_constraint_list",
"domain_constraint_list : domain_constraint_def",
"domain_constraint_list : domain_constraint_list domain_constraint_def",
"domain_constraint_def : domain_constraint",
"domain_constraint : null_constraint",
"domain_constraint : domain_check_constraint",
"null_constraint : NOT KW_NULL",
"domain_check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"generator_clause : symbol_generator_name",
"role_clause : symbol_role_name",
"db_clause : db_name db_initial_desc1 db_rem_desc1",
"equals :",
"equals : '='",
"db_name : sql_string",
"db_initial_desc1 :",
"db_initial_desc1 : db_initial_desc",
"db_initial_desc : db_initial_option",
"db_initial_desc : db_initial_desc db_initial_option",
"db_initial_option : PAGE_SIZE equals pos_short_integer",
"db_initial_option : LENGTH equals long_integer page_noise",
"db_initial_option : USER sql_string",
"db_initial_option : PASSWORD sql_string",
"db_initial_option : SET NAMES sql_string",
"db_rem_desc1 :",
"db_rem_desc1 : db_rem_desc",
"db_rem_desc : db_rem_option",
"db_rem_desc : db_rem_desc db_rem_option",
"db_rem_option : db_file",
"db_rem_option : db_log",
"db_rem_option : db_log_option",
"db_rem_option : DEFAULT CHARACTER SET symbol_character_set_name",
"db_log_option : GROUP_COMMIT_WAIT equals long_integer",
"db_log_option : CHECK_POINT_LEN equals long_integer",
"db_log_option : NUM_LOG_BUFS equals pos_short_integer",
"db_log_option : LOG_BUF_SIZE equals unsigned_short_integer",
"db_log : db_default_log_spec",
"db_log : db_rem_log_spec",
"db_rem_log_spec : LOGFILE '(' logfiles ')' OVERFLOW logfile_desc",
"db_rem_log_spec : LOGFILE BASENAME logfile_desc",
"db_default_log_spec : LOGFILE",
"db_file : file1 sql_string file_desc1",
"logfiles : logfile_desc",
"logfiles : logfiles ',' logfile_desc",
"logfile_desc : logfile_name logfile_attrs",
"logfile_name : sql_string",
"logfile_attrs :",
"logfile_attrs : logfile_attrs logfile_attr",
"logfile_attr : SIZE equals long_integer",
"file1 : KW_FILE",
"file_desc1 :",
"file_desc1 : file_desc",
"file_desc : file_clause",
"file_desc : file_desc file_clause",
"file_clause : STARTING file_clause_noise long_integer",
"file_clause : LENGTH equals long_integer page_noise",
"file_clause_noise :",
"file_clause_noise : AT",
"file_clause_noise : AT PAGE",
"page_noise :",
"page_noise : PAGE",
"page_noise : PAGES",
"table_clause : simple_table_name external_file '(' table_elements ')'",
"rtable_clause : simple_table_name external_file '(' table_elements ')'",
"external_file : EXTERNAL KW_FILE sql_string",
"external_file : EXTERNAL sql_string",
"external_file :",
"table_elements : table_element",
"table_elements : table_elements ',' table_element",
"table_element : column_def",
"table_element : table_constraint_definition",
"column_def : column_def_name data_type_or_domain default_opt end_trigger column_constraint_clause collate_clause",
"column_def : column_def_name non_array_type def_computed",
"column_def : column_def_name def_computed",
"def_computed : computed_by '(' begin_trigger value end_trigger ')'",
"computed_by : COMPUTED BY",
"computed_by : COMPUTED",
"data_type_or_domain : data_type begin_trigger",
"data_type_or_domain : simple_column_name begin_string",
"collate_clause : COLLATE symbol_collation_name",
"collate_clause :",
"column_def_name : simple_column_name",
"simple_column_def_name : simple_column_name",
"data_type_descriptor : init_data_type data_type",
"init_data_type :",
"default_opt : DEFAULT default_value",
"default_opt :",
"default_value : constant",
"default_value : current_user",
"default_value : current_role",
"default_value : internal_info",
"default_value : null_value",
"default_value : datetime_value_expression",
"column_constraint_clause :",
"column_constraint_clause : column_constraint_list",
"column_constraint_list : column_constraint_def",
"column_constraint_list : column_constraint_list column_constraint_def",
"column_constraint_def : constraint_name_opt column_constraint",
"column_constraint : NOT KW_NULL",
"column_constraint : REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"column_constraint : check_constraint",
"column_constraint : UNIQUE constraint_index_opt",
"column_constraint : PRIMARY KEY constraint_index_opt",
"table_constraint_definition : constraint_name_opt table_constraint",
"constraint_name_opt : CONSTRAINT symbol_constraint_name",
"constraint_name_opt :",
"table_constraint : unique_constraint",
"table_constraint : primary_constraint",
"table_constraint : referential_constraint",
"table_constraint : check_constraint",
"unique_constraint : UNIQUE column_parens constraint_index_opt",
"primary_constraint : PRIMARY KEY column_parens constraint_index_opt",
"referential_constraint : FOREIGN KEY column_parens REFERENCES simple_table_name column_parens_opt referential_trigger_action constraint_index_opt",
"constraint_index_opt : USING order_direction INDEX symbol_index_name",
"constraint_index_opt :",
"check_constraint : begin_trigger CHECK '(' search_condition ')' end_trigger",
"referential_trigger_action : update_rule",
"referential_trigger_action : delete_rule",
"referential_trigger_action : delete_rule update_rule",
"referential_trigger_action : update_rule delete_rule",
"referential_trigger_action :",
"update_rule : ON UPDATE referential_action",
"delete_rule : ON DELETE referential_action",
"referential_action : CASCADE",
"referential_action : SET DEFAULT",
"referential_action : SET KW_NULL",
"referential_action : NO ACTION",
"procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"rprocedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"replace_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"alter_procedure_clause : symbol_procedure_name input_parameters output_parameters AS begin_string var_declaration_list full_proc_block end_trigger",
"input_parameters : '(' proc_parameters ')'",
"input_parameters :",
"output_parameters : RETURNS input_parameters",
"output_parameters :",
"proc_parameters : proc_parameter",
"proc_parameters : proc_parameters ',' proc_parameter",
"proc_parameter : simple_column_def_name non_array_type",
"var_declaration_list : var_declarations",
"var_declaration_list :",
"var_declarations : var_declaration",
"var_declarations : var_declarations var_declaration",
"var_declaration : DECLARE var_decl_opt column_def_name non_array_type var_init_opt ';'",
"var_decl_opt : VARIABLE",
"var_decl_opt :",
"var_init_opt : '=' default_value",
"var_init_opt : default_opt",
"proc_block : proc_statement",
"proc_block : full_proc_block",
"full_proc_block : BEGIN END",
"full_proc_block : BEGIN proc_statements END",
"full_proc_block : BEGIN proc_statements excp_statements END",
"proc_statements : proc_block",
"proc_statements : proc_statements proc_block",
"proc_statement : assignment ';'",
"proc_statement : delete ';'",
"proc_statement : EXCEPTION symbol_exception_name ';'",
"proc_statement : exec_procedure",
"proc_statement : exec_sql",
"proc_statement : for_select",
"proc_statement : if_then_else",
"proc_statement : insert ';'",
"proc_statement : POST_EVENT value ';'",
"proc_statement : singleton_select",
"proc_statement : update ';'",
"proc_statement : while",
"proc_statement : SUSPEND ';'",
"proc_statement : EXIT ';'",
"proc_statement : KW_BREAK ';'",
"exec_procedure : EXECUTE PROCEDURE symbol_procedure_name proc_inputs proc_outputs ';'",
"exec_sql : EXECUTE VARCHAR value ';'",
"for_select : FOR select INTO variable_list cursor_def DO proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block ELSE proc_block",
"if_then_else : IF '(' search_condition ')' THEN proc_block",
"singleton_select : select INTO variable_list ';'",
"variable : ':' symbol_variable_name",
"proc_inputs : null_or_value_list",
"proc_inputs : '(' null_or_value_list ')'",
"proc_inputs :",
"proc_outputs : RETURNING_VALUES variable_list",
"proc_outputs : RETURNING_VALUES '(' variable_list ')'",
"proc_outputs :",
"variable_list : variable",
"variable_list : column_name",
"variable_list : variable_list ',' column_name",
"variable_list : variable_list ',' variable",
"while : WHILE '(' search_condition ')' DO proc_block",
"cursor_def : AS CURSOR symbol_cursor_name",
"cursor_def :",
"excp_statements : excp_statement",
"excp_statements : excp_statements excp_statement",
"excp_statement : WHEN errors DO proc_block",
"errors : err",
"errors : errors ',' err",
"err : SQLCODE signed_short_integer",
"err : GDSCODE symbol_gdscode_name",
"err : EXCEPTION symbol_exception_name",
"err : ANY",
"invoke_procedure : EXECUTE PROCEDURE symbol_procedure_name prc_inputs",
"prc_inputs : prm_const_list",
"prc_inputs : '(' prm_const_list ')'",
"prc_inputs :",
"prm_const_list : parameter",
"prm_const_list : constant",
"prm_const_list : null_value",
"prm_const_list : prm_const_list ',' parameter",
"prm_const_list : prm_const_list ',' constant",
"prm_const_list : prm_const_list ',' null_value",
"view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"rview_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"replace_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"alter_view_clause : symbol_view_name column_parens_opt AS begin_string union_view check_opt end_string",
"union_view : union_view_expr",
"union_view_expr : select_view_expr",
"union_view_expr : union_view_expr UNION select_view_expr",
"union_view_expr : union_view_expr UNION ALL select_view_expr",
"select_view_expr : SELECT limit_clause distinct_clause select_list from_view_clause where_clause group_clause having_clause plan_clause",
"from_view_clause : FROM from_view_list",
"from_view_list : view_table",
"from_view_list : from_view_list ',' view_table",
"view_table : joined_view_table",
"view_table : table_name",
"joined_view_table : view_table join_type JOIN view_table ON search_condition",
"joined_view_table : '(' joined_view_table ')'",
"begin_string :",
"end_string :",
"begin_trigger :",
"end_trigger :",
"check_opt : WITH CHECK OPTION",
"check_opt :",
"def_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"replace_trigger_clause : symbol_trigger_name FOR simple_table_name trigger_active trigger_type trigger_position begin_trigger trigger_action end_trigger",
"trigger_active : ACTIVE",
"trigger_active : INACTIVE",
"trigger_active :",
"trigger_type : trigger_type_prefix trigger_type_suffix",
"trigger_type_prefix : BEFORE",
"trigger_type_prefix : AFTER",
"trigger_type_suffix : INSERT",
"trigger_type_suffix : UPDATE",
"trigger_type_suffix : DELETE",
"trigger_type_suffix : INSERT OR UPDATE",
"trigger_type_suffix : INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR INSERT",
"trigger_type_suffix : UPDATE OR DELETE",
"trigger_type_suffix : DELETE OR INSERT",
"trigger_type_suffix : DELETE OR UPDATE",
"trigger_type_suffix : INSERT OR UPDATE OR DELETE",
"trigger_type_suffix : INSERT OR DELETE OR UPDATE",
"trigger_type_suffix : UPDATE OR INSERT OR DELETE",
"trigger_type_suffix : UPDATE OR DELETE OR INSERT",
"trigger_type_suffix : DELETE OR INSERT OR UPDATE",
"trigger_type_suffix : DELETE OR UPDATE OR INSERT",
"trigger_position : POSITION nonneg_short_integer",
"trigger_position :",
"trigger_action : AS begin_trigger var_declaration_list full_proc_block",
"alter : ALTER alter_clause",
"alter_clause : EXCEPTION symbol_exception_name sql_string",
"alter_clause : TABLE simple_table_name alter_ops",
"alter_clause : VIEW alter_view_clause",
"alter_clause : TRIGGER alter_trigger_clause",
"alter_clause : PROCEDURE alter_procedure_clause",
"alter_clause : DATABASE init_alter_db alter_db",
"alter_clause : DOMAIN alter_column_name alter_domain_ops",
"alter_clause : INDEX alter_index_clause",
"domain_default_opt2 : DEFAULT begin_trigger default_value",
"domain_check_constraint2 : CHECK begin_trigger '(' search_condition ')' end_trigger",
"alter_domain_ops : alter_domain_op",
"alter_domain_ops : alter_domain_ops alter_domain_op",
"alter_domain_op : SET begin_trigger domain_default_opt2 end_trigger",
"alter_domain_op : ADD CONSTRAINT domain_check_constraint2",
"alter_domain_op : ADD domain_check_constraint",
"alter_domain_op : DROP DEFAULT",
"alter_domain_op : DROP CONSTRAINT",
"alter_domain_op : TO simple_column_name",
"alter_domain_op : TYPE init_data_type non_array_type",
"alter_ops : alter_op",
"alter_ops : alter_ops ',' alter_op",
"alter_op : DROP simple_column_name drop_behaviour",
"alter_op : DROP CONSTRAINT symbol_constraint_name",
"alter_op : ADD column_def",
"alter_op : ADD table_constraint_definition",
"alter_op : col_opt simple_column_name POSITION pos_short_integer",
"alter_op : col_opt alter_column_name TO simple_column_name",
"alter_op : col_opt alter_col_name TYPE alter_data_type_or_domain end_trigger",
"alter_column_name : keyword_or_column",
"keyword_or_column : COLUMN",
"keyword_or_column : TYPE",
"keyword_or_column : EXTRACT",
"keyword_or_column : YEAR",
"keyword_or_column : MONTH",
"keyword_or_column : DAY",
"keyword_or_column : HOUR",
"keyword_or_column : MINUTE",
"keyword_or_column : SECOND",
"keyword_or_column : WEEKDAY",
"keyword_or_column : YEARDAY",
"keyword_or_column : TIME",
"keyword_or_column : TIMESTAMP",
"keyword_or_column : CURRENT_DATE",
"keyword_or_column : CURRENT_TIME",
"keyword_or_column : CURRENT_TIMESTAMP",
"keyword_or_column : CURRENT_USER",
"keyword_or_column : CURRENT_ROLE",
"keyword_or_column : SYMBOL",
"keyword_or_column : KW_BREAK",
"keyword_or_column : SUBSTRING",
"keyword_or_column : KW_DESCRIPTOR",
"keyword_or_column : CONNECTION_ID",
"keyword_or_column : TRANSACTION_ID",
"col_opt : ALTER",
"col_opt : ALTER COLUMN",
"alter_data_type_or_domain : non_array_type begin_trigger",
"alter_data_type_or_domain : simple_column_name begin_string",
"alter_col_name : simple_column_name",
"drop_behaviour : RESTRICT",
"drop_behaviour : CASCADE",
"drop_behaviour :",
"alter_index_clause : symbol_index_name ACTIVE",
"alter_index_clause : symbol_index_name INACTIVE",
"init_alter_db :",
"alter_db : db_alter_clause",
"alter_db : alter_db db_alter_clause",
"db_alter_clause : ADD db_file_list",
"db_alter_clause : DROP LOGFILE",
"db_alter_clause : SET db_log_option_list",
"db_alter_clause : ADD db_log",
"db_log_option_list : db_log_option",
"db_log_option_list : db_log_option_list ',' db_log_option",
"alter_trigger_clause : symbol_trigger_name trigger_active new_trigger_type trigger_position begin_trigger new_trigger_action end_trigger",
"new_trigger_type : trigger_type",
"new_trigger_type :",
"new_trigger_action : trigger_action",
"new_trigger_action :",
"drop : DROP drop_clause",
"drop_clause : EXCEPTION symbol_exception_name",
"drop_clause : INDEX symbol_index_name",
"drop_clause : PROCEDURE symbol_procedure_name",
"drop_clause : TABLE symbol_table_name",
"drop_clause : TRIGGER symbol_trigger_name",
"drop_clause : VIEW symbol_view_name",
"drop_clause : FILTER symbol_filter_name",
"drop_clause : DOMAIN symbol_domain_name",
"drop_clause : EXTERNAL FUNCTION symbol_UDF_name",
"drop_clause : SHADOW pos_short_integer",
"drop_clause : ROLE symbol_role_name",
"drop_clause : GENERATOR symbol_generator_name",
"data_type : non_array_type",
"data_type : array_type",
"non_array_type : simple_type",
"non_array_type : blob_type",
"array_type : non_charset_simple_type '[' array_spec ']'",
"array_type : character_type '[' array_spec ']' charset_clause",
"array_spec : array_range",
"array_spec : array_spec ',' array_range",
"array_range : signed_long_integer",
"array_range : signed_long_integer ':' signed_long_integer",
"simple_type : non_charset_simple_type",
"simple_type : character_type charset_clause",
"non_charset_simple_type : national_character_type",
"non_charset_simple_type : numeric_type",
"non_charset_simple_type : float_type",
"non_charset_simple_type : BIGINT",
"non_charset_simple_type : integer_keyword",
"non_charset_simple_type : SMALLINT",
"non_charset_simple_type : DATE",
"non_charset_simple_type : TIME",
"non_charset_simple_type : TIMESTAMP",
"integer_keyword : INTEGER",
"integer_keyword : KW_INT",
"blob_type : BLOB blob_subtype blob_segsize charset_clause",
"blob_type : BLOB '(' unsigned_short_integer ')'",
"blob_type : BLOB '(' unsigned_short_integer ',' signed_short_integer ')'",
"blob_type : BLOB '(' ',' signed_short_integer ')'",
"blob_segsize : SEGMENT SIZE unsigned_short_integer",
"blob_segsize :",
"blob_subtype : SUB_TYPE signed_short_integer",
"blob_subtype : SUB_TYPE symbol_blob_subtype_name",
"blob_subtype :",
"charset_clause : CHARACTER SET symbol_character_set_name",
"charset_clause :",
"national_character_type : national_character_keyword '(' pos_short_integer ')'",
"national_character_type : national_character_keyword",
"national_character_type : national_character_keyword VARYING '(' pos_short_integer ')'",
"character_type : character_keyword '(' pos_short_integer ')'",
"character_type : character_keyword",
"character_type : varying_keyword '(' pos_short_integer ')'",
"varying_keyword : VARCHAR",
"varying_keyword : CHARACTER VARYING",
"varying_keyword : KW_CHAR VARYING",
"character_keyword : CHARACTER",
"character_keyword : KW_CHAR",
"national_character_keyword : NCHAR",
"national_character_keyword : NATIONAL CHARACTER",
"national_character_keyword : NATIONAL KW_CHAR",
"numeric_type : KW_NUMERIC prec_scale",
"numeric_type : decimal_keyword prec_scale",
"ordinal : pos_short_integer",
"prec_scale :",
"prec_scale : '(' signed_long_integer ')'",
"prec_scale : '(' signed_long_integer ',' signed_long_integer ')'",
"decimal_keyword : DECIMAL",
"decimal_keyword : KW_DEC",
"float_type : KW_FLOAT precision_opt",
"float_type : KW_LONG KW_FLOAT precision_opt",
"float_type : REAL",
"float_type : KW_DOUBLE PRECISION",
"precision_opt : '(' nonneg_short_integer ')'",
"precision_opt :",
"set : set_transaction",
"set : set_generator",
"set : set_statistics",
"set_generator : SET GENERATOR symbol_generator_name TO signed_long_integer",
"set_generator : SET GENERATOR symbol_generator_name TO NUMBER64BIT",
"set_generator : SET GENERATOR symbol_generator_name TO '-' NUMBER64BIT",
"commit : COMMIT optional_work optional_retain",
"rollback : ROLLBACK optional_work",
"optional_work : WORK",
"optional_work :",
"optional_retain : RETAIN opt_snapshot",
"optional_retain :",
"opt_snapshot : SNAPSHOT",
"opt_snapshot :",
"set_transaction : SET TRANSACTION tran_opt_list_m",
"tran_opt_list_m : tran_opt_list",
"tran_opt_list_m :",
"tran_opt_list : tran_opt",
"tran_opt_list : tran_opt_list tran_opt",
"tran_opt : access_mode",
"tran_opt : lock_wait",
"tran_opt : isolation_mode",
"tran_opt : tbl_reserve_options",
"access_mode : READ ONLY",
"access_mode : READ WRITE",
"lock_wait : WAIT",
"lock_wait : NO WAIT",
"isolation_mode : ISOLATION LEVEL iso_mode",
"isolation_mode : iso_mode",
"iso_mode : snap_shot",
"iso_mode : READ UNCOMMITTED version_mode",
"iso_mode : READ COMMITTED version_mode",
"snap_shot : SNAPSHOT",
"snap_shot : SNAPSHOT TABLE",
"snap_shot : SNAPSHOT TABLE STABILITY",
"version_mode : VERSION",
"version_mode : NO VERSION",
"version_mode :",
"tbl_reserve_options : RESERVING restr_list",
"lock_type : SHARED",
"lock_type : PROTECTED",
"lock_type :",
"lock_mode : READ",
"lock_mode : WRITE",
"restr_list : restr_option",
"restr_list : restr_list ',' restr_option",
"restr_option : table_list table_lock",
"table_lock : FOR lock_type lock_mode",
"table_lock :",
"table_list : simple_table_name",
"table_list : table_list ',' simple_table_name",
"set_statistics : SET STATISTICS INDEX symbol_index_name",
"select : union_expr order_clause for_update_clause",
"union_expr : select_expr",
"union_expr : union_expr UNION select_expr",
"union_expr : union_expr UNION ALL select_expr",
"order_clause : ORDER BY order_list",
"order_clause :",
"order_list : order_item",
"order_list : order_list ',' order_item",
"order_item : column_name collate_clause order_direction nulls_placement",
"order_item : ordinal collate_clause order_direction nulls_placement",
"order_direction : ASC",
"order_direction : DESC",
"order_direction :",
"nulls_placement : NULLS FIRST",
"nulls_placement : NULLS LAST",
"nulls_placement :",
"for_update_clause : FOR UPDATE for_update_list",
"for_update_clause :",
"for_update_list : OF column_list",
"for_update_list :",
"select_expr : SELECT limit_clause distinct_clause select_list from_clause where_clause group_clause having_clause plan_clause",
"distinct_clause : DISTINCT",
"distinct_clause : all_noise",
"select_list : select_items",
"select_list : '*'",
"select_items : select_item",
"select_items : select_items ',' select_item",
"select_item : rhs",
"select_item : rhs symbol_item_alias_name",
"select_item : rhs AS symbol_item_alias_name",
"from_clause : FROM from_list",
"from_list : table_reference",
"from_list : from_list ',' table_reference",
"table_reference : joined_table",
"table_reference : table_proc",
"joined_table : table_reference join_type JOIN table_reference ON search_condition",
"joined_table : '(' joined_table ')'",
"table_proc : symbol_procedure_name proc_table_inputs symbol_table_alias_name",
"table_proc : symbol_procedure_name proc_table_inputs",
"proc_table_inputs : '(' null_or_value_list ')'",
"proc_table_inputs :",
"null_or_value_list : null_or_value",
"null_or_value_list : null_or_value_list ',' null_or_value",
"null_or_value : null_value",
"null_or_value : value",
"table_name : simple_table_name",
"table_name : symbol_table_name symbol_table_alias_name",
"simple_table_name : symbol_table_name",
"join_type : INNER",
"join_type : LEFT",
"join_type : LEFT OUTER",
"join_type : RIGHT",
"join_type : RIGHT OUTER",
"join_type : FULL",
"join_type : FULL OUTER",
"join_type :",
"first_clause : FIRST long_integer",
"first_clause : FIRST '(' value ')'",
"first_clause : FIRST parameter",
"skip_clause : SKIP long_integer",
"skip_clause : SKIP '(' value ')'",
"skip_clause : SKIP parameter",
"limit_clause : first_clause skip_clause",
"limit_clause : first_clause",
"limit_clause : skip_clause",
"limit_clause :",
"group_clause : GROUP BY grp_column_list",
"group_clause :",
"grp_column_list : grp_column_elem",
"grp_column_list : grp_column_list ',' grp_column_elem",
"grp_column_elem : column_name",
"grp_column_elem : ordinal",
"grp_column_elem : udf",
"grp_column_elem : group_by_function",
"grp_column_elem : column_name COLLATE symbol_collation_name",
"group_by_function : numeric_value_function",
"group_by_function : string_value_function",
"group_by_function : case_expression",
"having_clause : HAVING search_condition",
"having_clause :",
"where_clause : WHERE search_condition",
"where_clause :",
"limit_range : '(' long_integer ')'",
"limit_range : '(' long_integer ':' long_integer ')'",
"limit_range :",
"plan_clause : PLAN plan_expression",
"plan_clause :",
"plan_expression : plan_type '(' plan_item_list ')'",
"plan_type : JOIN",
"plan_type : SORT MERGE",
"plan_type : MERGE",
"plan_type : SORT",
"plan_type :",
"plan_item_list : plan_item",
"plan_item_list : plan_item ',' plan_item_list",
"plan_item : table_or_alias_list access_type",
"plan_item : plan_expression",
"table_or_alias_list : symbol_table_name",
"table_or_alias_list : symbol_table_name table_or_alias_list",
"access_type : NATURAL",
"access_type : INDEX '(' index_list ')'",
"access_type : ORDER symbol_index_name",
"index_list : symbol_index_name",
"index_list : symbol_index_name ',' index_list",
"insert : INSERT INTO simple_table_name ins_column_parens_opt VALUES '(' insert_value_list ')'",
"insert : INSERT INTO simple_table_name ins_column_parens_opt select_expr",
"insert_value_list : rhs",
"insert_value_list : insert_value_list ',' rhs",
"delete : delete_searched",
"delete : delete_positioned",
"delete_searched : DELETE FROM table_name where_clause",
"delete_positioned : DELETE FROM table_name cursor_clause",
"cursor_clause : WHERE CURRENT OF symbol_cursor_name",
"update : update_searched",
"update : update_positioned",
"update_searched : UPDATE table_name SET assignments where_clause",
"update_positioned : UPDATE table_name SET assignments cursor_clause",
"assignments : assignment",
"assignments : assignments ',' assignment",
"assignment : update_column_name '=' rhs",
"rhs : value",
"rhs : null_value",
"blob : READ BLOB simple_column_name FROM simple_table_name filter_clause segment_clause",
"blob : INSERT BLOB simple_column_name INTO simple_table_name filter_clause segment_clause",
"filter_clause : FILTER FROM blob_subtype_value TO blob_subtype_value",
"filter_clause : FILTER TO blob_subtype_value",
"filter_clause :",
"blob_subtype_value : blob_subtype",
"blob_subtype_value : parameter",
"blob_subtype : signed_short_integer",
"segment_clause : MAX_SEGMENT segment_length",
"segment_clause :",
"segment_length : unsigned_short_integer",
"segment_length : parameter",
"column_parens_opt : column_parens",
"column_parens_opt :",
"column_parens : '(' column_list ')'",
"column_list : simple_column_name",
"column_list : column_list ',' simple_column_name",
"ins_column_parens_opt : ins_column_parens",
"ins_column_parens_opt :",
"ins_column_parens : '(' ins_column_list ')'",
"ins_column_list : update_column_name",
"ins_column_list : ins_column_list ',' update_column_name",
"column_name : simple_column_name",
"column_name : symbol_table_alias_name '.' symbol_column_name",
"column_name : symbol_table_alias_name '.' '*'",
"simple_column_name : symbol_column_name",
"update_column_name : simple_column_name",
"update_column_name : symbol_table_alias_name '.' symbol_column_name",
"search_condition : predicate",
"search_condition : search_condition OR search_condition",
"search_condition : search_condition AND search_condition",
"search_condition : NOT search_condition",
"predicate : comparison_predicate",
"predicate : between_predicate",
"predicate : like_predicate",
"predicate : in_predicate",
"predicate : null_predicate",
"predicate : quantified_predicate",
"predicate : exists_predicate",
"predicate : containing_predicate",
"predicate : starting_predicate",
"predicate : unique_predicate",
"predicate : '(' search_condition ')'",
"comparison_predicate : value '=' value",
"comparison_predicate : value '<' value",
"comparison_predicate : value '>' value",
"comparison_predicate : value GEQ value",
"comparison_predicate : value LEQ value",
"comparison_predicate : value NOT_GTR value",
"comparison_predicate : value NOT_LSS value",
"comparison_predicate : value NEQ value",
"quantified_predicate : value '=' ALL '(' column_select ')'",
"quantified_predicate : value '<' ALL '(' column_select ')'",
"quantified_predicate : value '>' ALL '(' column_select ')'",
"quantified_predicate : value GEQ ALL '(' column_select ')'",
"quantified_predicate : value LEQ ALL '(' column_select ')'",
"quantified_predicate : value NOT_GTR ALL '(' column_select ')'",
"quantified_predicate : value NOT_LSS ALL '(' column_select ')'",
"quantified_predicate : value NEQ ALL '(' column_select ')'",
"quantified_predicate : value '=' some '(' column_select ')'",
"quantified_predicate : value '<' some '(' column_select ')'",
"quantified_predicate : value '>' some '(' column_select ')'",
"quantified_predicate : value GEQ some '(' column_select ')'",
"quantified_predicate : value LEQ some '(' column_select ')'",
"quantified_predicate : value NOT_GTR some '(' column_select ')'",
"quantified_predicate : value NOT_LSS some '(' column_select ')'",
"quantified_predicate : value NEQ some '(' column_select ')'",
"some : SOME",
"some : ANY",
"between_predicate : value BETWEEN value AND value",
"between_predicate : value NOT BETWEEN value AND value",
"like_predicate : value LIKE value",
"like_predicate : value NOT LIKE value",
"like_predicate : value LIKE value ESCAPE value",
"like_predicate : value NOT LIKE value ESCAPE value",
"in_predicate : value IN in_predicate_value",
"in_predicate : value NOT IN in_predicate_value",
"containing_predicate : value CONTAINING value",
"containing_predicate : value NOT CONTAINING value",
"starting_predicate : value STARTING value",
"starting_predicate : value NOT STARTING value",
"starting_predicate : value STARTING WITH value",
"starting_predicate : value NOT STARTING WITH value",
"exists_predicate : EXISTS '(' select_expr ')'",
"unique_predicate : SINGULAR '(' select_expr ')'",
"null_predicate : value IS KW_NULL",
"null_predicate : value IS NOT KW_NULL",
"in_predicate_value : table_subquery",
"in_predicate_value : '(' value_list ')'",
"table_subquery : '(' column_select ')'",
"column_select : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"column_singleton : SELECT limit_clause distinct_clause value from_clause where_clause group_clause having_clause plan_clause",
"value : column_name",
"value : array_element",
"value : function",
"value : u_constant",
"value : parameter",
"value : variable",
"value : cast_specification",
"value : case_expression",
"value : udf",
"value : '-' value",
"value : '+' value",
"value : value '+' value",
"value : value CONCATENATE value",
"value : value COLLATE symbol_collation_name",
"value : value '-' value",
"value : value '*' value",
"value : value '/' value",
"value : '(' value ')'",
"value : '(' column_singleton ')'",
"value : current_user",
"value : current_role",
"value : internal_info",
"value : DB_KEY",
"value : symbol_table_alias_name '.' DB_KEY",
"value : KW_VALUE",
"value : datetime_value_expression",
"datetime_value_expression : CURRENT_DATE",
"datetime_value_expression : CURRENT_TIME",
"datetime_value_expression : CURRENT_TIMESTAMP",
"array_element : column_name '[' value_list ']'",
"value_list : value",
"value_list : value_list ',' value",
"constant : u_constant",
"constant : '-' u_numeric_constant",
"u_numeric_constant : NUMERIC",
"u_numeric_constant : NUMBER",
"u_numeric_constant : FLOAT",
"u_numeric_constant : NUMBER64BIT",
"u_numeric_constant : SCALEDINT",
"u_constant : u_numeric_constant",
"u_constant : sql_string",
"u_constant : DATE STRING",
"u_constant : TIME STRING",
"u_constant : TIMESTAMP STRING",
"constant_list : constant",
"constant_list : parameter",
"constant_list : current_user",
"constant_list : current_role",
"constant_list : internal_info",
"constant_list : constant_list ',' constant",
"constant_list : constant_list ',' parameter",
"constant_list : constant_list ',' current_user",
"constant_list : constant_list ',' current_role",
"constant_list : constant_list ',' internal_info",
"parameter : '?'",
"current_user : USER",
"current_user : CURRENT_USER",
"current_role : CURRENT_ROLE",
"internal_info : CONNECTION_ID",
"internal_info : TRANSACTION_ID",
"sql_string : STRING",
"sql_string : INTRODUCER STRING",
"signed_short_integer : nonneg_short_integer",
"signed_short_integer : '-' neg_short_integer",
"nonneg_short_integer : NUMBER",
"neg_short_integer : NUMBER",
"pos_short_integer : nonneg_short_integer",
"unsigned_short_integer : NUMBER",
"signed_long_integer : long_integer",
"signed_long_integer : '-' long_integer",
"long_integer : NUMBER",
"function : aggregate_function",
"function : generate_value_function",
"function : numeric_value_function",
"function : string_value_function",
"aggregate_function : COUNT '(' '*' ')'",
"aggregate_function : COUNT '(' all_noise value ')'",
"aggregate_function : COUNT '(' DISTINCT value ')'",
"aggregate_function : SUM '(' all_noise value ')'",
"aggregate_function : SUM '(' DISTINCT value ')'",
"aggregate_function : AVG '(' all_noise value ')'",
"aggregate_function : AVG '(' DISTINCT value ')'",
"aggregate_function : MINIMUM '(' all_noise value ')'",
"aggregate_function : MINIMUM '(' DISTINCT value ')'",
"aggregate_function : MAXIMUM '(' all_noise value ')'",
"aggregate_function : MAXIMUM '(' DISTINCT value ')'",
"generate_value_function : GEN_ID '(' symbol_generator_name ',' value ')'",
"numeric_value_function : EXTRACT '(' timestamp_part FROM value ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer ')'",
"string_value_function : SUBSTRING '(' value FROM pos_short_integer FOR nonneg_short_integer ')'",
"string_value_function : KW_UPPER '(' value ')'",
"udf : symbol_UDF_name '(' value_list ')'",
"udf : symbol_UDF_name '(' ')'",
"cast_specification : CAST '(' rhs AS data_type_descriptor ')'",
"case_expression : case_abbreviation",
"case_expression : case_specification",
"case_abbreviation : NULLIF '(' value ',' value ')'",
"case_abbreviation : COALESCE '(' null_or_value ',' null_or_value_list ')'",
"case_specification : simple_case",
"case_specification : searched_case",
"simple_case : CASE case_operand simple_when_clause END",
"simple_case : CASE case_operand simple_when_clause ELSE case_result END",
"simple_when_clause : WHEN when_operand THEN case_result",
"simple_when_clause : simple_when_clause WHEN when_operand THEN case_result",
"searched_case : CASE searched_when_clause END",
"searched_case : CASE searched_when_clause ELSE case_result END",
"searched_when_clause : WHEN search_condition THEN case_result",
"searched_when_clause : searched_when_clause WHEN search_condition THEN case_result",
"when_operand : value",
"case_operand : value",
"case_result : null_or_value",
"timestamp_part : YEAR",
"timestamp_part : MONTH",
"timestamp_part : DAY",
"timestamp_part : HOUR",
"timestamp_part : MINUTE",
"timestamp_part : SECOND",
"timestamp_part : WEEKDAY",
"timestamp_part : YEARDAY",
"all_noise : ALL",
"all_noise :",
"null_value : KW_NULL",
"symbol_UDF_name : SYMBOL",
"symbol_blob_subtype_name : SYMBOL",
"symbol_character_set_name : SYMBOL",
"symbol_collation_name : SYMBOL",
"symbol_column_name : SYMBOL",
"symbol_constraint_name : SYMBOL",
"symbol_cursor_name : SYMBOL",
"symbol_domain_name : SYMBOL",
"symbol_exception_name : SYMBOL",
"symbol_filter_name : SYMBOL",
"symbol_gdscode_name : SYMBOL",
"symbol_generator_name : SYMBOL",
"symbol_index_name : SYMBOL",
"symbol_item_alias_name : SYMBOL",
"symbol_procedure_name : SYMBOL",
"symbol_role_name : SYMBOL",
"symbol_table_alias_name : SYMBOL",
"symbol_table_name : SYMBOL",
"symbol_trigger_name : SYMBOL",
"symbol_user_name : SYMBOL",
"symbol_variable_name : SYMBOL",
"symbol_view_name : SYMBOL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
static int yydebug;
static int yynerrs;
#ifndef SHLIB_DEFS
int DSQL_yyerrflag;
#endif
#ifndef SHLIB_DEFS
int DSQL_yychar;
#endif
short *DSQL_DSQL_yyssp;
static YYSTYPE *yyvsp;
static YYSTYPE yyval;
static YYSTYPE yylval;
static short DSQL_yyss[YYSTACKSIZE];
static YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE


/*
 *	PROGRAM:	Dynamic SQL runtime support
 *	MODULE:		lex.c
 *	DESCRIPTION:	Lexical routine
 *
 */

#include "../dsql/chars.h"

#define MAX_TOKEN_LEN   256
#define CHECK_BOUND(to)\
    {\
    if ((to - string) >= MAX_TOKEN_LEN)        \
	yyabandon (-104, isc_token_too_long); \
    }
#define CHECK_COPY_INCR(to,ch){CHECK_BOUND(to); *to++=ch;}


static TEXT	*lex_position (void);
static BOOLEAN	long_int (NOD, SLONG *);
static FLD	make_field (NOD);
static FIL	make_file (void);
static NOD	make_list (NOD);
static NOD	make_node (NOD_TYPE, int, ...);
static NOD	make_flag_node (NOD_TYPE, SSHORT, int, ...);
static void	prepare_console_debug (int, int  *);
static BOOLEAN	short_int (NOD, SLONG *, SSHORT);
static void	stack_nodes (NOD, DLLS *);
static int 	swallow_single_line_comment (void);
static int	yylex (USHORT, USHORT, USHORT, BOOLEAN *);
static void	yyabandon (SSHORT, STATUS);
static void	check_log_file_attrs (void);

static TEXT	*ptr, *end, *last_token, *line_start;
static TEXT	*last_token_bk, *line_start_bk;
static SSHORT	lines, att_charset;
static SSHORT	lines_bk;
static BOOLEAN	first_time;


void LEX_dsql_init (void)
{
/**************************************
 *
 *	L E X _ d s q l _ i n i t
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX for processing.  This is called only once
 *	per session.
 *
 **************************************/
CONST TOK	*token;

for (token = KEYWORD_getTokens(); token->tok_string; ++token)
    {
    SYM         symbol;
    STR         str_;

    symbol = new(*DSQL_permanent_pool, 0) sym;
    symbol->sym_string = (TEXT *) token->tok_string;
    symbol->sym_length = strlen (token->tok_string);
    symbol->sym_type = SYM_keyword;
    symbol->sym_keyword = token->tok_ident;
    symbol->sym_version = token->tok_version;
    str_ = new(*DSQL_permanent_pool, symbol->sym_length) str;
    str_->str_length = symbol->sym_length;
    strncpy ((char*)str_->str_data, (char*)symbol->sym_string, symbol->sym_length);
    symbol->sym_object = (void *) str_;
    HSHD_insert (symbol);
    }

}


void LEX_string (
    TEXT	*string,
    USHORT	length,
    SSHORT	character_set)
{
/**************************************
 *
 *	L E X _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Initialize LEX to process a string.
 *
 **************************************/

    line_start = ptr = string;
    end = string + length;
    lines = 1;
    att_charset = character_set;
    line_start_bk = line_start;
    lines_bk = lines;
    first_time = TRUE;
#ifdef DEV_BUILD
    if (DSQL_debug > 10)
        printf("%.*s\n", (int)length, string);
#endif
}


static void check_log_file_attrs (void)
{
/**********************************************
 *
 *	c h e c k _ l o g _ f i l e _ a t t r s
 *
 **********************************************
 *
 * Functional description
 *	Check if log file attributes are valid
 *
 *********************************************/

    if (g_file->fil_partitions) {
        if (!g_file->fil_length) {
            yyabandon (-261, isc_log_length_spec);
            /* Total length of a partitioned log must be specified */
        }
        
        if (PARTITION_SIZE (OneK * g_file->fil_length, g_file->fil_partitions) <
            (OneK*MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_partition_too_small);
            /* Log partition size too small */
        }
    }
    else {
        if ((g_file->fil_length) && (g_file->fil_length < MIN_LOG_LENGTH)) {
            yyabandon (-239, isc_log_too_small);   /* Log size too small */
        }
    }     
}


static TEXT *lex_position (void)
{
/**************************************
 *
 *	l e x _ p o s i t i o n
 *
 **************************************
 *
 * Functional description
 *	Return the current position of LEX 
 *	in the input string.
 *
 **************************************/

return ptr;
}


static BOOLEAN long_int (
    NOD		string,
    SLONG	*long_value)
{
/*************************************
 *
 *	l o n g _ i n t
 * 
 *************************************
 *
 * Functional description
 *	checks for all digits in the
 *	number and return an atol().
 *
 *************************************/
UCHAR	*p;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

*long_value = atol ((char *)((STR) string)->str_data);

return TRUE;
}


static FLD make_field (
    NOD		field_name)
{
/**************************************
 *
 *	m a k e _ f i e l d
 *
 **************************************
 *
 * Functional description
 *	Make a field block of given name.
 *
 **************************************/
FLD	field;
STR	string;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
if (field_name == NULL)
   {
    field = new (*tdsql->tsql_default, sizeof (INTERNAL_FIELD_NAME)) fld;
    strcpy (field->fld_name, (TEXT*) INTERNAL_FIELD_NAME);
    return field;
   }
string = (STR) field_name->nod_arg [1];
field = new(*tdsql->tsql_default, strlen ((SCHAR*) string->str_data)) fld;
strcpy (field->fld_name, (TEXT*) string->str_data);

return field;
}


static FIL make_file (void)
{
/**************************************
 *
 *	m a k e _ f i l e 
 *
 **************************************
 *
 * Functional description
 *	Make a file block
 *
 **************************************/
FIL	temp_file;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;
       
temp_file = new(*tdsql->tsql_default) fil;

return temp_file;
}


static NOD make_list (
    NOD		node)
{
/**************************************
 *
 *	m a k e _ l i s t
 *
 **************************************
 *
 * Functional description
 *	Collapse nested list nodes into single list.
 *
 **************************************/
NOD	*ptr;
DLLS	stack, temp;
USHORT	l;
NOD	old;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

if (!node)
    return node;

stack = 0;
stack_nodes (node, &stack);
for (l = 0, temp = stack; temp; temp = temp->lls_next)
    l++;

old  = node;
node = new(*tdsql->tsql_default, l) nod;
node->nod_count = l;
node->nod_type  = nod_list;
node->nod_flags = old->nod_flags;
ptr = node->nod_arg + node->nod_count;

while (stack)
    *--ptr = (NOD) LLS_POP (&stack);

return node;
}


static NOD make_node (
    NOD_TYPE	type,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type.
 *	Any change should also be made to function below
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static NOD make_flag_node (
    NOD_TYPE	type,
    SSHORT	flag,
    int		count,
    ...)
{
/**************************************
 *
 *	m a k e _ f l a g _ n o d e
 *
 **************************************
 *
 * Functional description
 *	Make a node of given type. Set flag field
 *
 **************************************/
NOD	node, *p;
va_list	ptr;
TSQL    tdsql;

tdsql = GET_THREAD_DATA;

node = new(*tdsql->tsql_default, count) nod;
node->nod_type = type;
node->nod_flags = flag;
node->nod_line = (USHORT) lines_bk;
node->nod_column = (USHORT) (last_token_bk - line_start_bk + 1);
node->nod_count = count;
p = node->nod_arg;
VA_START (ptr, count);

while (--count >= 0)
    *p++ = va_arg (ptr, NOD);

return node;
}


static void prepare_console_debug (int level, int *yydeb)
{
/*************************************
 *
 *	p r e p a r e _ c o n s o l e _ d e b u g
 * 
 *************************************
 *
 * Functional description
 *	Activate debug info. In WinNT, redirect the standard
 *	output so one can see the generated information.
 *	Feel free to add your platform specific code.
 *
 *************************************/
    DSQL_debug = level;
    if (level > 10)
        *yydeb = level;
    /* CVC: I added this code form Mike Nordell to see the output from internal
       operations that's generated in DEV build when DEBUG <n> is typed into isql.exe.
       When n>0, the output console is activated; otherwise it's closed. */
#if defined(DEV_BUILD) && defined(WIN32) && defined(SUPERSERVER)
    if (level > 0) {
        /* Console debug code inside this scope */
        if (AllocConsole()) {
    		redirected_output = freopen("CONOUT$", "wt", stdout);
    		printf("DebugConsole - Yes, it's working.\n");
        }
    }
    else if (level <= 0 && redirected_output) {
        fclose (redirected_output);
        redirected_output = 0;
        FreeConsole();
    }
#endif
}

static BOOLEAN short_int (
    NOD		string,
    SLONG	*long_value,
    SSHORT	range)
{
/*************************************
 *
 *	s h o r t _ i n t
 * 
 *************************************
 *
 * Functional description
 *	is the string a valid representation 
 *	of a positive short int?
 *
 *************************************/
UCHAR	*p;
SCHAR	buf [10];    
BOOLEAN return_value;

if (((STR) string)->str_length > 5)
    return FALSE;

for (p = ((STR) string)->str_data; classes [*p] & CHR_DIGIT; p++)
    if (!(classes [*p] & CHR_DIGIT))
	return FALSE;

/* there are 5 or fewer digits, it's value may still be greater
 * than 32767... */

buf [0] = ((STR) string)->str_data[0];
buf [1] = ((STR) string)->str_data[1];
buf [2] = ((STR) string)->str_data[2];
buf [3] = ((STR) string)->str_data[3];
buf [4] = ((STR) string)->str_data[4];
buf [5] = '\0';

*long_value = atoi (buf);

switch (range) 
    {
    case POSITIVE:
        return_value = *long_value > SHRT_POS_MAX;		
	break;
    case NEGATIVE:
	return_value = *long_value > SHRT_NEG_MAX;
	break;
    case UNSIGNED:
	return_value = *long_value > SHRT_UNSIGNED_MAX;		
	break;
    }
return !return_value;
}


static void stack_nodes (
    NOD		node,
    DLLS		*stack)
{
/**************************************
 *
 *	s t a c k _ n o d e s
 *
 **************************************
 *
 * Functional description
 *	Assist in turning a tree of misc nodes into a clean list.
 *
 **************************************/
NOD	*ptr, *end;
NOD     curr_node, next_node, start_chain, end_chain, save_link;

if (node->nod_type != nod_list)
    {
    LLS_PUSH (node, stack);
    return;
    }

/* To take care of cases where long lists of nodes are in a chain
   of list nodes with exactly one entry, this algorithm will look
   for a pattern of repeated list nodes with two entries, the first
   being a list node and the second being a non-list node.   Such
   a list will be reverse linked, and then re-reversed, stacking the
   non-list nodes in the process.   The purpose of this is to avoid
   massive recursion of this function. */

start_chain = node;
end_chain = (NOD) NULL;
curr_node = node;
next_node = node->nod_arg[0];
while ( curr_node->nod_count == 2 &&
        curr_node->nod_arg[0]->nod_type == nod_list &&
        curr_node->nod_arg[1]->nod_type != nod_list &&
        next_node->nod_arg[0]->nod_type == nod_list &&
        next_node->nod_arg[1]->nod_type != nod_list)
    {

    /* pattern was found so reverse the links and go to next node */

    save_link = next_node->nod_arg[0];
    next_node->nod_arg[0] = curr_node;
    curr_node = next_node;
    next_node = save_link;
    end_chain = curr_node;
    }

/* see if any chain was found */

if ( end_chain)
    {

    /* first, handle the rest of the nodes */
    /* note that next_node still points to the first non-pattern node */

    stack_nodes( next_node, stack);

    /* stack the non-list nodes and reverse the chain on the way back */
    
    curr_node = end_chain;
    while ( TRUE)
        {
        LLS_PUSH( curr_node->nod_arg[1], stack);
        if ( curr_node == start_chain)
            break;
        save_link = curr_node->nod_arg[0];
        curr_node->nod_arg[0] = next_node;
        next_node = curr_node;
        curr_node = save_link;
        }
    return;
    }

for (ptr = node->nod_arg, end = ptr + node->nod_count; ptr < end; ptr++)
    stack_nodes (*ptr, stack);
}


static int swallow_single_line_comment (void)
{
/**************************************
 *
 *	s w a l l o w _ s i n g l e _ l i n e _ c o m m e n t
 *
 **************************************
 *
 * Functional description:
 *  Discard single line comments (SLC) starting with --
 *  and takes care of end of input if necessary.
 *  There may be multiple consecutive SLC, multiple SLC
 *  separated by valid commands or by LF.
 *
 **************************************/
	SSHORT	c;
	
	if (ptr >= end)
		return -1;
	while (ptr + 1 < end) {
		c = *ptr++;
		if (c == '-' && *ptr == '-') {
			ptr++;
			while (ptr < end) {
				if ((c = *ptr++) == '\n') {
					lines++;
					line_start = ptr;
					break;
				}
				if (ptr >= end) {
					return -1;
                }
            }
		}
		else {
			--ptr;
			break;
		}
	}
	return 0;
}



static int yylex (
    USHORT	client_dialect,
    USHORT	db_dialect,
    USHORT	parser_version,
    BOOLEAN	*stmt_ambiguous)
{
/**************************************
 *
 *	y y l e x
 *
 **************************************
 *
 * Functional description: lexer.
 *
 **************************************/
UCHAR	*p, tok_class, string [MAX_TOKEN_LEN], *buffer, *buffer_end, *new_buffer;
SYM	sym;
SSHORT	c;
USHORT	buffer_len;

STR	delimited_id_str;

/* Find end of white space and skip comments */

/* CVC: Experiment to see if -- can be implemented as one-line comment. 
This is almost the same block than below in the loop when \n is detected,
but here we should "unget" the first character if there're not 2 hyphens. */
if (first_time) {
	first_time = FALSE;
	if (swallow_single_line_comment() < 0)
		return -1;
}

for (;;)
    {
    if (ptr >= end)
	return -1;
    
    c = *ptr++;

    while (c == '\n') {
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */
		/* CVC: Experiment to see if -- can be implemented as one-line comment. */
		if (swallow_single_line_comment() < 0)
			return -1;
		c = *ptr++;
	}


    if ((c == '/') && (*ptr == '*'))
	{
	ptr++;
	while (ptr < end)
	    {
	    if ((c = *ptr++) == '*')
		{
		if (*ptr == '/')
		    break;
		}
	    if (c == '\n')
		{
		lines++;
		line_start = ptr /* + 1*/; /* CVC: +1 left out. */

		}
	    }
	if (ptr >= end)
	    return -1;
	ptr++;
	continue;
	}

#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    tok_class = classes [c];
#else
    c = c & 0xff;
    tok_class = (JPN1_CHAR(c) ? CHR_LETTER : classes[c]);
#endif /*JPN_SJIS || JPN_EUC */

    if (!(tok_class & CHR_WHITE))
	break;
    }

/* Depending on tok_class of token, parse token */

last_token = ptr - 1;

if (tok_class & CHR_INTRODUCER)
    {
    /* The Introducer (_) is skipped, all other idents are copied
     * to become the name of the character set
     */
    p = string;
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
	{
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER7(*ptr));
	}
    
    CHECK_BOUND(p);
    *p = 0;

    /* make a string value to hold the name, the name 
     * is resolved in pass1_constant */

    yylval = (NOD) (MAKE_string (string, p - string))->str_data;

    return INTRODUCER;
    }

/* parse a quoted string, being sure to look for double quotes */

if (tok_class & CHR_QUOTE)
    {
    buffer = string;
    buffer_len = sizeof (string);
    buffer_end = buffer + buffer_len - 1;
    for (p = buffer; ; p++)
	{
	if (ptr >= end)
	    {
	    if (buffer != string)
       		gds__free (buffer);
	    return -1;
	    }
	/* *ptr is quote - if next != quote we're at the end */
	if ((*ptr == c) && ((++ptr == end) || (*ptr != c)))
	    break;
        if (p > buffer_end)
	    {
	    new_buffer = (UCHAR *) gds__alloc (2 * buffer_len);
	    /* FREE: at outer block */
	    if (!new_buffer)		/* NOMEM: */
		{
		if (buffer != string)
		    gds__free (buffer);
		return -1;
		}
            memcpy (new_buffer, buffer, buffer_len);
	    if (buffer != string)
        	gds__free (buffer);
	    buffer = new_buffer;
	    p = buffer + buffer_len;
	    buffer_len = 2 * buffer_len;
	    buffer_end = buffer + buffer_len - 1;
	    }
	*p = *ptr++;
	}
    if (c == '"')
	{
	*stmt_ambiguous = TRUE; /* string delimited by double quotes could be
				**   either a string constant or a SQL delimited
				**   identifier, therefore marks the SQL
				**   statement as ambiguous  */
	if (client_dialect == SQL_DIALECT_V6_TRANSITION)
	    {
	    if (buffer != string)
		gds__free (buffer);
	    yyabandon (-104, isc_invalid_string_constant);
	    }
	else if (client_dialect >= SQL_DIALECT_V6)
	    {
	    if ((p - buffer) >= MAX_TOKEN_LEN)
		{
		if (buffer != string)
		    gds__free (buffer);
		yyabandon (-104, isc_token_too_long);
		}
	    yylval = (NOD) MAKE_string (buffer, p - buffer);
	    delimited_id_str = (STR) yylval;
	    delimited_id_str->str_flags |= STR_delimited_id;
	    if (buffer != string)
		gds__free (buffer);
	    return SYMBOL;
	    }
	}
    yylval = (NOD) MAKE_string (buffer, p - buffer);
    if (buffer != string)
	gds__free (buffer);
    return STRING;
    }
                                                 
/* 
 * Check for a numeric constant, which starts either with a digit or with
 * a decimal point followed by a digit.
 * 
 * This code recognizes the following token types:
 * 
 * NUMBER: string of digits which fits into a 32-bit integer
 * 
 * NUMBER64BIT: string of digits whose value might fit into an SINT64,
 *   depending on whether or not there is a preceding '-', which is to
 *   say that "9223372036854775808" is accepted here.
 *
 * SCALEDINT: string of digits and a single '.', where the digits
 *   represent a value which might fit into an SINT64, depending on
 *   whether or not there is a preceding '-'.
 *
 * FLOAT: string of digits with an optional '.', and followed by an "e"
 *   or "E" and an optionally-signed exponent.
 *
 * NOTE: we swallow leading or trailing blanks, but we do NOT accept
 *   embedded blanks:
 *
 * Another note: c is the first character which need to be considered,
 *   ptr points to the next character.
 */

assert(ptr <= end);

if ((tok_class & CHR_DIGIT) ||
    ((c == '.') && (ptr < end) && (classes [*ptr] & CHR_DIGIT)))
    {
    /* The following variables are used to recognize kinds of numbers. */

    BOOLEAN have_error     = FALSE;	/* syntax error or value too large */
    BOOLEAN have_digit     = FALSE;	/* we've seen a digit              */
    BOOLEAN have_decimal   = FALSE;	/* we've seen a '.'                */
    BOOLEAN have_exp       = FALSE;	/* digit ... [eE]                  */
    BOOLEAN have_exp_sign  = FALSE; /* digit ... [eE] {+-]             */
    BOOLEAN have_exp_digit = FALSE; /* digit ... [eE] ... digit        */
    UINT64	number         = 0;
    UINT64	limit_by_10    = MAX_SINT64 / 10;

    for (--ptr ; ptr < end ; ptr++)
      {
	c = *ptr;
	if (have_exp_digit && (! (classes [c]  & CHR_DIGIT)))
	  /* First non-digit after exponent and digit terminates
	     the token. */
	    break;
	else if (have_exp_sign && (! (classes [c]  & CHR_DIGIT)))
	    {
	    /* only digits can be accepted after "1E-" */
	      have_error = TRUE;
	      break;
	    }
	else if (have_exp)
	    {
	    /* We've seen e or E, but nothing beyond that. */
	    if ( ('-' == c) || ('+' == c) )
		have_exp_sign = TRUE;
	    else if ( classes [c]  & CHR_DIGIT )
		/* We have a digit: we haven't seen a sign yet,
		   but it's too late now. */
		have_exp_digit = have_exp_sign  = TRUE;
	    else
		{
		/* end of the token */
		have_error = TRUE;
		break;
		}
	    }
	else if ('.' == c)
	    {
	    if (!have_decimal)
		have_decimal = TRUE;
	    else
		{
		have_error = TRUE;
		break;
		}
	    }
	else if (classes [c] & CHR_DIGIT)
	  {
	    /* Before computing the next value, make sure there will be
	       no overflow.  */

	    have_digit = TRUE;

	    if (number >= limit_by_10)
		/* possibility of an overflow */
		if ((number > limit_by_10) || (c > '8'))
		    {
		    have_error = TRUE;
		    break;
		    }
	    number = number * 10 + (c - '0');
	  }
	else if ( (('E' == c) || ('e' == c)) && have_digit )
	    have_exp = TRUE;
	else
	    /* Unexpected character: this is the end of the number. */
	    break;
      }

    /* We're done scanning the characters: now return the right kind
       of number token, if any fits the bill. */

    if (!have_error)
	{
	assert(have_digit);

	if (have_exp_digit)
	    {
	    yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					ptr - last_token);
	    last_token_bk = last_token;
	    line_start_bk = line_start;
	    lines_bk = lines;

	    return FLOAT;
	    }
	else if (!have_exp)
	    {

	    /* We should return some kind (scaled-) integer type
	       except perhaps in dialect 1. */

	    if (!have_decimal && (number <= MAX_SLONG))
		{
		yylval = (NOD) number;
		return NUMBER;
		}
	    else
		{
		/* We have either a decimal point with no exponent
		   or a string of digits whose value exceeds MAX_SLONG:
		   the returned type depends on the client dialect,
		   so warn of the difference if the client dialect is
		   SQL_DIALECT_V6_TRANSITION.
		*/

		if (SQL_DIALECT_V6_TRANSITION == client_dialect)
		    {
		    /* Issue a warning about the ambiguity of the numeric
		     * numeric literal.  There are multiple calls because
		     * the message text exceeds the 119-character limit
		     * of our message database.
		     */
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous,
				       gds_arg_string,
				       ERR_string( last_token,
						   ptr - last_token ),
				       gds_arg_end );
		    ERRD_post_warning( isc_dsql_warning_number_ambiguous1,
				       gds_arg_end );
		    }

		yylval = (NOD) MAKE_string ((UCHAR *) last_token,
					    ptr - last_token);

		last_token_bk = last_token;
		line_start_bk = line_start;
		lines_bk = lines;

		if (client_dialect < SQL_DIALECT_V6_TRANSITION)
		    return FLOAT;
		else if (have_decimal)
		    return SCALEDINT;
		else
		    return NUMBER64BIT;
		}
	    } /* else if (!have_exp) */
	} /* if (!have_error) */

    /* we got some kind of error or overflow, so don't recognize this
     * as a number: just pass it through to the next part of the lexer.
     */
    }

/* Restore the status quo ante, before we started our unsuccessful
   attempt to recognize a number. */
ptr = last_token;
c   = *ptr++;
/* We never touched tok_class, so it doesn't need to be restored. */

/* end of number-recognition code */


if (tok_class & CHR_LETTER)
    {
#if (! ( defined JPN_SJIS || defined JPN_EUC) )
    p = string;
    CHECK_COPY_INCR(p, UPPER (c));
    for (; ptr < end && classes [*ptr] & CHR_IDENT; ptr++)
        {
	if (ptr >= end)
	    return -1;
	CHECK_COPY_INCR(p, UPPER (*ptr));
        }
#else
    for (; ptr <= end ; c = *ptr++ , c = c & 0xff)
        {
        if (KANJI1(c))
            {
	    CHECK_COPY_INCR(p, UPPER (c));
            if (ptr >= end) 
		break; 
            
	    c = *ptr++;
            c = c & 0xff;
            if (!KANJI2(c))
                {
                ptr--;
                break;
                }
            else
		CHECK_COPY_INCR(p,c);
            }
	else
            {
#ifdef JPN_SJIS
            if ((SJIS_SINGLE(c)) || (classes[c] & CHR_IDENT) )
#else
            if (classes[c] & CHR_IDENT)
#endif 
		{	
		CHECK_COPY_INCR(p, UPPER(c));
		if (ptr >= end)
	    	    break;
		}
            else
		{
		ptr--;
                break;
		}
            }
        }
#endif /* JPN_SJIS || JPN_EUC */

    CHECK_BOUND(p);
    *p = 0;
    sym = HSHD_lookup (NULL_PTR, (TEXT *) string, (SSHORT)(p - string), SYM_keyword, parser_version);
    if (sym)
	{
	yylval = (NOD) sym->sym_object;
	return sym->sym_keyword;
	}
    yylval = (NOD) MAKE_string (string, p - string);
    last_token_bk = last_token;
    line_start_bk = line_start;
    lines_bk = lines;
    return SYMBOL;
    }

/* Must be punctuation -- test for double character punctuation */

if (last_token + 1 < end)
    {
    sym = HSHD_lookup (NULL_PTR, last_token, (SSHORT) 2, SYM_keyword, (USHORT) parser_version);
    if (sym)
	{
	++ptr;
	return sym->sym_keyword;
	}
    }

/* Single character punctuation are simply passed on */

return c;
}


static void yyerror (
    TEXT	*error_string)
{
/**************************************
 *
 *	y y e r r o r
 *
 **************************************
 *
 * Functional description
 *	Print a syntax error.
 *
 **************************************/

if (DSQL_yychar < 1)
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
	gds_arg_gds, gds_command_end_err,    /* Unexpected end of command */
	0);
else
    {
    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104,
 	gds_arg_gds, gds_dsql_token_unk_err, 
	gds_arg_number, (SLONG) lines, 
	gds_arg_number, (SLONG) (last_token - line_start + 1), /*CVC: +1*/
	    /* Token unknown - line %d, char %d */
 	gds_arg_gds, gds_random, 
	gds_arg_cstring, (int) (ptr - last_token), last_token,
 	0);
    }
}


static void yyabandon (
    SSHORT      sql_code,
    STATUS      error_symbol)
{
/**************************************
 *
 *	y y a b a n d o n
 *
 **************************************
 *
 * Functional description
 *	Abandon the parsing outputting the supplied string
 *
 **************************************/

ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) sql_code, 
	gds_arg_gds, error_symbol, 0);
}
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
dsql_yyparse(USHORT client_dialect, USHORT db_dialect, USHORT parser_version, BOOLEAN *stmt_ambiguous)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    ;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    DSQL_yyerrflag = 0;
    DSQL_yychar = (-1);

    DSQL_DSQL_yyssp = DSQL_yyss;
    yyvsp = yyvs;
    *DSQL_DSQL_yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (DSQL_yychar < 0)
    {
        if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        DSQL_yychar = (-1);
        if (DSQL_yyerrflag > 0)  --DSQL_yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += DSQL_yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == DSQL_yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (DSQL_yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (DSQL_yyerrflag < 3)
    {
        DSQL_yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*DSQL_DSQL_yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yytable[yyn]);
#endif
                if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++DSQL_DSQL_yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *DSQL_DSQL_yyssp);
#endif
                if (DSQL_DSQL_yyssp <= DSQL_yyss) goto yyabort;
                --DSQL_DSQL_yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (DSQL_yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, DSQL_yychar, yys);
        }
#endif
        DSQL_yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ DSQL_parse = yyvsp[0]; }
break;
case 2:
{ DSQL_parse = yyvsp[-1]; }
break;
case 20:
{ prepare_console_debug ((int) yyvsp[0], &yydebug);
			  yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 21:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 22:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-6], yyvsp[-3], make_list(yyvsp[-1]), yyvsp[0]); }
break;
case 23:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-4], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 24:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					yyvsp[-5], yyvsp[-2], make_list(yyvsp[0]), NULL); }
break;
case 25:
{ yyval = make_node (nod_grant, (int) e_grant_count, 
					make_list(yyvsp[-3]), make_list(yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 27:
{ yyval = yyvsp[0]; }
break;
case 28:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 29:
{ yyval = make_node (nod_all, (int) 0, NULL); }
break;
case 30:
{ yyval = make_list (yyvsp[0]); }
break;
case 32:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 33:
{ yyval = make_list (make_node (nod_execute, (int) 0, NULL)); }
break;
case 34:
{ yyval = make_node (nod_select, (int) 0, NULL); }
break;
case 35:
{ yyval = make_node (nod_insert, (int) 0, NULL); }
break;
case 36:
{ yyval = make_node (nod_delete, (int) 0, NULL); }
break;
case 37:
{ yyval = make_node (nod_update, (int) 1, yyvsp[0]); }
break;
case 38:
{ yyval = make_node (nod_references, (int) 1, yyvsp[0]); }
break;
case 39:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 40:
{ yyval = 0; }
break;
case 41:
{ yyval = make_node (nod_grant_admin, (int) 0, NULL); }
break;
case 42:
{ yyval = 0; }
break;
case 43:
{ yyval = make_node (nod_procedure_name, (int) 1, yyvsp[0]); }
break;
case 44:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-5]); }
break;
case 45:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), yyvsp[-6]); }
break;
case 46:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 47:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 48:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-4], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 49:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, yyvsp[-5], yyvsp[-2],
				make_list(yyvsp[0]), NULL); }
break;
case 50:
{ yyval = make_node (nod_revoke, 
				(int) e_grant_count, make_list(yyvsp[-2]), make_list(yyvsp[0]),
				NULL, NULL); }
break;
case 51:
{ yyval = make_node (nod_grant, (int) 0, NULL); }
break;
case 53:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 54:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 55:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 56:
{ yyval = make_node (nod_proc_obj, (int) 1, yyvsp[0]); }
break;
case 57:
{ yyval = make_node (nod_trig_obj, (int) 1, yyvsp[0]); }
break;
case 58:
{ yyval = make_node (nod_view_obj, (int) 1, yyvsp[0]); }
break;
case 59:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 61:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 62:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 63:
{ yyval = make_node (nod_user_name, (int) 2, yyvsp[0], NULL); }
break;
case 64:
{ yyval = make_node (nod_user_group, (int) 1, yyvsp[0]); }
break;
case 66:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 67:
{ yyval = make_node (nod_role_name, (int) 1, yyvsp[0]); }
break;
case 69:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 70:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 71:
{ yyval = make_node (nod_user_name, (int) 1, yyvsp[0]); }
break;
case 72:
{ yyval = yyvsp[0];}
break;
case 73:
{ yyval = yyvsp[0]; }
break;
case 74:
{ yyval = yyvsp[0]; }
break;
case 75:
{ yyval = make_node (nod_def_udf, (int) e_udf_count, 
				yyvsp[-7], yyvsp[-2], yyvsp[0], make_list (yyvsp[-6]), yyvsp[-4]); }
break;
case 77:
{ g_field->fld_dtype = dtype_blob; }
break;
case 78:
{ 
			g_field->fld_dtype = dtype_cstring; 
			g_field->fld_character_length = (USHORT) yyvsp[-2]; }
break;
case 79:
{ yyval = (NOD) NULL; }
break;
case 81:
{ yyval = yyvsp[-1]; }
break;
case 83:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 84:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				              yyvsp[-1], NULL); }
break;
case 85:
{ yyval = make_node (nod_udf_param, (int) e_udf_param_count,
				yyvsp[-3], MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG)); }
break;
case 87:
{ yyval = yyvsp[-1]; }
break;
case 88:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-1], 
				MAKE_constant ((STR) FUN_reference, CONSTANT_SLONG));}
break;
case 89:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-2], 
				MAKE_constant ((STR) (-1 * FUN_reference), CONSTANT_SLONG));}
break;
case 90:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3], 
				MAKE_constant ((STR) FUN_value, CONSTANT_SLONG));}
break;
case 91:
{ yyval = make_node (nod_udf_return_value, (int) 2, yyvsp[-3],
				MAKE_constant ((STR) FUN_descriptor, CONSTANT_SLONG));}
break;
case 92:
{ yyval = make_node (nod_udf_return_value, (int) 2, 
		  		(NOD) NULL, MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));}
break;
case 93:
{ yyval = make_node (nod_def_filter, (int) e_filter_count, 
						yyvsp[-8], yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 94:
{ yyval = yyvsp[0]; }
break;
case 95:
{ yyval = make_node (nod_def_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 96:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					yyvsp[-6], yyvsp[-5], yyvsp[-3], yyvsp[-1], yyvsp[0]); }
break;
case 97:
{ yyval = yyvsp[0]; }
break;
case 98:
{ yyval = yyvsp[0]; }
break;
case 99:
{ yyval = yyvsp[0]; }
break;
case 100:
{ yyval = yyvsp[0]; }
break;
case 101:
{ yyval = yyvsp[0]; }
break;
case 102:
{ yyval = yyvsp[0]; }
break;
case 103:
{ yyval = yyvsp[0]; }
break;
case 104:
{ yyval = yyvsp[0]; }
break;
case 105:
{ yyval = yyvsp[0]; }
break;
case 106:
{ yyval = yyvsp[0]; }
break;
case 107:
{ yyval = yyvsp[0]; }
break;
case 108:
{ yyval = yyvsp[0]; }
break;
case 109:
{ yyval = yyvsp[0]; }
break;
case 110:
{ yyval = yyvsp[0]; }
break;
case 111:
{ yyval = yyvsp[0]; }
break;
case 112:
{ yyval = yyvsp[0]; }
break;
case 113:
{ yyval = yyvsp[0]; }
break;
case 114:
{ yyval = make_node (nod_unique, (int) 0, NULL); }
break;
case 115:
{ yyval = NULL; }
break;
case 116:
{ yyval = make_list (yyvsp[0]); }
break;
case 118:
{ yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 119:
{ yyval = make_node (nod_def_shadow, (int) e_shadow_count,
			     yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], make_list (yyvsp[0])); }
break;
case 120:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 121:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 122:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 123:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 124:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 125:
{ yyval = (NOD) 0;}
break;
case 126:
{ yyval = yyvsp[-1]; }
break;
case 127:
{ yyval = (NOD) NULL; }
break;
case 130:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 131:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                          yyvsp[-7], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 132:
{ yyval = NULL; }
break;
case 133:
{ yyval = NULL; }
break;
case 134:
{ yyval = yyvsp[0]; }
break;
case 135:
{ yyval = (NOD) NULL; }
break;
case 136:
{ yyval = (NOD) NULL; }
break;
case 139:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 140:
{ yyval = make_node (nod_rel_constraint, (int) 2, NULL, yyvsp[0]);}
break;
case 143:
{ yyval = make_node (nod_null, (int) 0, NULL); }
break;
case 144:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 145:
{ yyval = make_node (nod_def_generator, 
						(int) e_gen_count, yyvsp[0]); }
break;
case 146:
{ yyval = make_node (nod_def_role, 
						(int) 1, yyvsp[0]); }
break;
case 147:
{ yyval = make_node (nod_def_database, (int) e_cdb_count,
				 yyvsp[-2], make_list(yyvsp[-1]), make_list (yyvsp[0]));}
break;
case 150:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) yyvsp[0]; }
break;
case 151:
{yyval = (NOD) NULL;}
break;
case 154:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 155:
{ yyval = make_node (nod_page_size, 1, yyvsp[0]);}
break;
case 156:
{ yyval = make_node (nod_file_length, 1, yyvsp[-1]);}
break;
case 157:
{ yyval = make_node (nod_user_name, 1, yyvsp[0]);}
break;
case 158:
{ yyval = make_node (nod_password, 1, yyvsp[0]);}
break;
case 159:
{ yyval = make_node (nod_lc_ctype, 1, yyvsp[0]);}
break;
case 160:
{yyval = (NOD) NULL;}
break;
case 163:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 167:
{ yyval = make_node (nod_dfl_charset, 1, yyvsp[0]);}
break;
case 168:
{ yyval = make_node (nod_group_commit_wait, 1, yyvsp[0]);}
break;
case 169:
{ yyval = make_node (nod_check_point_len, 1, yyvsp[0]);}
break;
case 170:
{ yyval = make_node (nod_num_log_buffers, 1, yyvsp[0]);}
break;
case 171:
{ yyval = make_node (nod_log_buffer_size, 1, yyvsp[0]);}
break;
case 172:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);  /* Log redefined */
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 173:
{ if (log_defined)
			    yyabandon (-260, isc_log_redef);
			  log_defined = TRUE;
			  yyval = yyvsp[0]; }
break;
case 174:
{ g_file->fil_flags |= LOG_serial | LOG_overflow; 
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			/* Partitions not supported in series of log file specification */
			 yyval = make_node (nod_list, 2, yyvsp[-3], yyvsp[0]); }
break;
case 175:
{ g_file->fil_flags |= LOG_serial;
			  if (g_file->fil_partitions)
			      yyabandon (-261, isc_partition_not_supp);
			  yyval = yyvsp[0]; }
break;
case 176:
{ g_file = make_file(); 
			  g_file->fil_flags = LOG_serial | LOG_default;
			  yyval = make_node (nod_log_file_desc, (int) 1,
						(NOD) g_file);}
break;
case 177:
{ g_file->fil_name = (STR) yyvsp[-1]; 
			  yyval = (NOD) make_node (nod_file_desc, (int) 1,
						(NOD) g_file); }
break;
case 179:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 180:
{ 
		         check_log_file_attrs(); 
			 yyval = (NOD) make_node (nod_log_file_desc, (int) 1,
                                                (NOD) g_file); }
break;
case 181:
{ g_file = make_file();
			  g_file->fil_name = (STR) yyvsp[0]; }
break;
case 184:
{ g_file->fil_length = (SLONG) yyvsp[0]; }
break;
case 185:
{ g_file  = make_file ();}
break;
case 190:
{ g_file->fil_start = (SLONG) yyvsp[0];}
break;
case 191:
{ g_file->fil_length = (SLONG) yyvsp[-1];}
break;
case 198:
{ yyval = make_node (nod_def_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 199:
{ yyval = make_node (nod_redef_relation, 
				(int) e_drl_count, yyvsp[-4], make_list (yyvsp[-1]), yyvsp[-3]); }
break;
case 200:
{ yyval = yyvsp[0]; }
break;
case 201:
{ yyval = yyvsp[0]; }
break;
case 202:
{ yyval = (NOD) NULL; }
break;
case 204:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 207:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
					yyvsp[-5], yyvsp[-3], yyvsp[-2], make_list (yyvsp[-1]), yyvsp[0], yyvsp[-4], NULL); }
break;
case 208:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-2], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 209:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				    yyvsp[-1], NULL, NULL, NULL, NULL, NULL, yyvsp[0]); }
break;
case 210:
{ 
			g_field->fld_flags |= FLD_computed;
			yyval = make_node (nod_def_computed, 2, yyvsp[-2], yyvsp[-1]); }
break;
case 213:
{ yyval = NULL; }
break;
case 214:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                            yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 215:
{ yyval = yyvsp[0]; }
break;
case 216:
{ yyval = (NOD) NULL; }
break;
case 217:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 218:
{ g_field = make_field (yyvsp[0]);
				  yyval = (NOD) g_field; }
break;
case 219:
{ yyval = yyvsp[-1]; }
break;
case 220:
{ g_field = make_field (NULL);
			  yyval = (NOD) g_field; }
break;
case 221:
{ yyval = yyvsp[0]; }
break;
case 222:
{ yyval = (NOD) NULL; }
break;
case 226:
{ yyval = yyvsp[0]; }
break;
case 227:
{ yyval = yyvsp[0]; }
break;
case 228:
{ yyval = yyvsp[0]; }
break;
case 229:
{ yyval = (NOD) NULL; }
break;
case 232:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 233:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 234:
{ yyval = make_node (nod_null, (int) 1, NULL); }
break;
case 235:
{ yyval = make_node (nod_foreign, e_for_count,
                        make_node (nod_list, (int) 1, g_field_name), yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 237:
{ yyval = make_node (nod_unique, 2, NULL, yyvsp[0]); }
break;
case 238:
{ yyval = make_node (nod_primary, e_pri_count, NULL, yyvsp[0]); }
break;
case 239:
{ yyval = make_node (nod_rel_constraint, (int) 2, yyvsp[-1], yyvsp[0]);}
break;
case 240:
{ yyval = yyvsp[0]; }
break;
case 241:
{ yyval = NULL ;}
break;
case 246:
{ yyval = make_node (nod_unique, 2, yyvsp[-1], yyvsp[0]); }
break;
case 247:
{ yyval = make_node (nod_primary, e_pri_count, yyvsp[-1], yyvsp[0]); }
break;
case 248:
{ yyval = make_node (nod_foreign, e_for_count, yyvsp[-5], yyvsp[-3], 
			         yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 249:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, yyvsp[-2], yyvsp[0], NULL, NULL); }
break;
case 250:
{ yyval = make_node (nod_def_index, (int) e_idx_count, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 251:
{ yyval = make_node (nod_def_constraint, 
				(int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 252:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], NULL);}
break;
case 253:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, NULL, yyvsp[0]);}
break;
case 254:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[0], yyvsp[-1]); }
break;
case 255:
{ yyval = make_node (nod_ref_upd_del, e_ref_upd_del_count, yyvsp[-1], yyvsp[0]);}
break;
case 256:
{ yyval = NULL;}
break;
case 257:
{ yyval = yyvsp[0];}
break;
case 258:
{ yyval = yyvsp[0];}
break;
case 259:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_CASCADE, e_ref_trig_action_count, NULL);}
break;
case 260:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_DEFAULT, e_ref_trig_action_count, NULL);}
break;
case 261:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_SET_NULL, e_ref_trig_action_count, NULL);}
break;
case 262:
{ yyval = make_flag_node (nod_ref_trig_action, 
			 REF_ACTION_NONE, e_ref_trig_action_count, NULL);}
break;
case 263:
{ yyval = make_node (nod_def_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 264:
{ yyval = make_node (nod_redef_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 265:
{ yyval = make_node (nod_replace_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 266:
{ yyval = make_node (nod_mod_procedure,
						  (int) e_prc_count, 
					          yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 267:
{ yyval = make_list (yyvsp[-1]); }
break;
case 268:
{ yyval = NULL; }
break;
case 269:
{ yyval = yyvsp[0]; }
break;
case 270:
{ yyval = NULL; }
break;
case 272:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 273:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-1], NULL, NULL, NULL, NULL, NULL, NULL); }
break;
case 274:
{ yyval = make_list (yyvsp[0]); }
break;
case 275:
{ yyval = NULL; }
break;
case 277:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 278:
{ yyval = make_node (nod_def_field, (int) e_dfl_count, 
				yyvsp[-3], yyvsp[-1], NULL, NULL, NULL, NULL, NULL); }
break;
case 279:
{ yyval = NULL; }
break;
case 280:
{ yyval = NULL; }
break;
case 281:
{ yyval = yyvsp[0]; }
break;
case 282:
{ yyval = yyvsp[0]; }
break;
case 285:
{ yyval = make_node (nod_block, e_blk_count,
					NULL, NULL);}
break;
case 286:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-1]), NULL);}
break;
case 287:
{ yyval = make_node (nod_block, e_blk_count,
					make_list (yyvsp[-2]), make_list (yyvsp[-1]));}
break;
case 289:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 292:
{ yyval = make_node (nod_exception_stmt, 1, yyvsp[-1]); }
break;
case 298:
{ yyval = make_node (nod_post, e_pst_count, yyvsp[-1]); }
break;
case 302:
{ yyval = make_node (nod_return, e_rtn_count, NULL); }
break;
case 303:
{ yyval = make_node (nod_exit, 0, NULL); }
break;
case 304:
{ yyval = make_node (nod_breakleave, e_break_count, NULL); }
break;
case 305:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-3],
					  yyvsp[-2], yyvsp[-1]); }
break;
case 306:
{ yyval = make_node (nod_exec_sql, e_exec_vc_count, yyvsp[-1]); }
break;
case 307:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-5],
					  make_list (yyvsp[-3]), yyvsp[-2], yyvsp[0], NULL); }
break;
case 308:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-5], yyvsp[-2], yyvsp[0]); }
break;
case 309:
{ yyval = make_node (nod_if, e_if_count, yyvsp[-3], yyvsp[0], NULL); }
break;
case 310:
{ yyval = make_node (nod_for_select, e_flp_count, yyvsp[-3],
					  make_list (yyvsp[-1]), NULL, NULL); }
break;
case 311:
{ yyval = make_node (nod_var_name, (int) e_vrn_count, 
							yyvsp[0]); }
break;
case 312:
{ yyval = make_list (yyvsp[0]); }
break;
case 313:
{ yyval = make_list (yyvsp[-1]); }
break;
case 314:
{ yyval = NULL; }
break;
case 315:
{ yyval = make_list (yyvsp[0]); }
break;
case 316:
{ yyval = make_list (yyvsp[-1]); }
break;
case 317:
{ yyval = NULL; }
break;
case 320:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 321:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 322:
{ yyval = make_node (nod_while, e_while_count,
					  yyvsp[-3], yyvsp[0], NULL); }
break;
case 323:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 324:
{ yyval = NULL; }
break;
case 326:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 327:
{ yyval = make_node (nod_on_error, e_err_count,
					make_list (yyvsp[-2]), yyvsp[0]); }
break;
case 329:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 330:
{ yyval = make_node (nod_sqlcode, 1, yyvsp[0]); }
break;
case 331:
{ yyval = make_node (nod_gdscode, 1, yyvsp[0]); }
break;
case 332:
{ yyval = make_node (nod_exception, 1, yyvsp[0]); }
break;
case 333:
{ yyval = make_node (nod_default, 1, NULL); }
break;
case 334:
{ yyval = make_node (nod_exec_procedure, e_exe_count, yyvsp[-1],
				  yyvsp[0], make_node (nod_all, (int) 0, NULL)); }
break;
case 335:
{ yyval = make_list (yyvsp[0]); }
break;
case 336:
{ yyval = make_list (yyvsp[-1]); }
break;
case 337:
{ yyval = NULL; }
break;
case 341:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 342:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 343:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 344:
{ yyval = make_node (nod_def_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 345:
{ yyval = make_node (nod_redef_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 346:
{ yyval = make_node (nod_replace_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 347:
{ yyval = make_node (nod_mod_view, (int) e_view_count, 
					  yyvsp[-6], yyvsp[-5], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 348:
{ yyval = make_node (nod_select, (int) 2, yyvsp[0], NULL); }
break;
case 349:
{ yyval = make_node (nod_list, (int) 1, yyvsp[0]); }
break;
case 350:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 351:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 352:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 353:
{ yyval = make_list (yyvsp[0]); }
break;
case 355:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 358:
{ yyval = make_node (nod_join, (int) e_join_count,
						yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 359:
{ yyval = yyvsp[-1]; }
break;
case 360:
{ beginning = lex_position(); }
break;
case 361:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
			       (lex_position() == end) ?
			       lex_position()-beginning : last_token-beginning);}
break;
case 362:
{ beginning = last_token; }
break;
case 363:
{ yyval = (NOD) MAKE_string ((UCHAR *) beginning, 
					lex_position()-beginning); }
break;
case 364:
{ yyval = make_node (nod_def_constraint, (int) e_cnstr_count, 
					MAKE_string (NULL_STRING, 0), NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, NULL); }
break;
case 365:
{ yyval = 0; }
break;
case 366:
{ yyval = make_node (nod_def_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 367:
{ yyval = make_node (nod_replace_trigger, (int) e_trg_count,
				yyvsp[-8], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 368:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 369:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 370:
{ yyval = NULL; }
break;
case 371:
{ yyval = MAKE_trigger_type (yyvsp[-1], yyvsp[0]); }
break;
case 372:
{ yyval = MAKE_constant ((STR) 0, CONSTANT_SLONG); }
break;
case 373:
{ yyval = MAKE_constant ((STR) 1, CONSTANT_SLONG); }
break;
case 374:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 0, 0), CONSTANT_SLONG); }
break;
case 375:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 0, 0), CONSTANT_SLONG); }
break;
case 376:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 0, 0), CONSTANT_SLONG); }
break;
case 377:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 0), CONSTANT_SLONG); }
break;
case 378:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 0), CONSTANT_SLONG); }
break;
case 379:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 0), CONSTANT_SLONG); }
break;
case 380:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 0), CONSTANT_SLONG); }
break;
case 381:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 0), CONSTANT_SLONG); }
break;
case 382:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 0), CONSTANT_SLONG); }
break;
case 383:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 2, 3), CONSTANT_SLONG); }
break;
case 384:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (1, 3, 2), CONSTANT_SLONG); }
break;
case 385:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 1, 3), CONSTANT_SLONG); }
break;
case 386:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (2, 3, 1), CONSTANT_SLONG); }
break;
case 387:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 1, 2), CONSTANT_SLONG); }
break;
case 388:
{ yyval = MAKE_constant ((STR) TRIGGER_TYPE_SUFFIX (3, 2, 1), CONSTANT_SLONG); }
break;
case 389:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 390:
{ yyval = NULL; }
break;
case 391:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 392:
{ yyval = yyvsp[0]; }
break;
case 393:
{ yyval = make_node (nod_mod_exception, (int) e_xcp_count, 
						yyvsp[-1], yyvsp[0]); }
break;
case 394:
{ yyval = make_node (nod_mod_relation, (int) e_alt_count, 
						yyvsp[-1], make_list (yyvsp[0])); }
break;
case 395:
{ yyval = yyvsp[0]; }
break;
case 396:
{ yyval = yyvsp[0]; }
break;
case 397:
{ yyval = yyvsp[0]; }
break;
case 398:
{ yyval = make_node (nod_mod_database, (int) e_adb_count,
				make_list (yyvsp[0])); }
break;
case 399:
{ yyval = make_node (nod_mod_domain, (int) e_alt_count,
                                          yyvsp[-1], make_list (yyvsp[0])); }
break;
case 400:
{ yyval = make_node (nod_mod_index, 
				     (int) e_mod_idx_count, yyvsp[0]); }
break;
case 401:
{ yyval = yyvsp[0]; }
break;
case 402:
{ yyval = make_node (nod_def_constraint, 
				  (int) e_cnstr_count, MAKE_string (NULL_STRING, 0), NULL, 
				  NULL, NULL, yyvsp[-2], NULL, yyvsp[0], NULL, NULL); }
break;
case 404:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 405:
{ yyval = make_node (nod_def_default, (int) e_dft_count,
					    yyvsp[-1], yyvsp[0]); }
break;
case 406:
{ yyval = yyvsp[0]; }
break;
case 407:
{ yyval = yyvsp[0]; }
break;
case 408:
{yyval = make_node (nod_del_default, (int) 0, NULL); }
break;
case 409:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, NULL); }
break;
case 410:
{ yyval = yyvsp[0]; }
break;
case 411:
{ yyval = make_node (nod_mod_domain_type, 2, yyvsp[-1]); }
break;
case 413:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 414:
{ yyval = make_node (nod_del_field, 2, yyvsp[-1], yyvsp[0]); }
break;
case 415:
{ yyval = make_node (nod_delete_rel_constraint, (int) 1, yyvsp[0]);}
break;
case 416:
{ yyval = yyvsp[0]; }
break;
case 417:
{ yyval = yyvsp[0]; }
break;
case 418:
{ yyval = make_node (nod_mod_field_pos, 2, yyvsp[-2],
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 419:
{ yyval = make_node (nod_mod_field_name, 2, yyvsp[-2], yyvsp[0]); }
break;
case 420:
{ yyval = make_node (nod_mod_field_type, 3, yyvsp[-3], yyvsp[0], yyvsp[-1]); }
break;
case 421:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 446:
{ yyval = NULL; }
break;
case 447:
{ yyval = NULL; }
break;
case 448:
{ yyval = NULL; }
break;
case 449:
{ yyval = make_node (nod_def_domain, (int) e_dom_count,
                                        	    yyvsp[-1], NULL, NULL, NULL, NULL); }
break;
case 450:
{ g_field_name = yyvsp[0];
			  g_field = make_field (yyvsp[0]);
			  yyval = (NOD) g_field; }
break;
case 451:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 452:
{ yyval = make_node (nod_cascade, 0, NULL); }
break;
case 453:
{ yyval = make_node (nod_restrict, 0, NULL); }
break;
case 454:
{ yyval = make_node (nod_idx_active, 1, yyvsp[-1]); }
break;
case 455:
{ yyval = make_node (nod_idx_inactive, 1, yyvsp[-1]); }
break;
case 456:
{ log_defined = FALSE;
			  cache_defined = FALSE;
			  yyval = (NOD) NULL; }
break;
case 458:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 459:
{ yyval = yyvsp[0]; }
break;
case 460:
{ yyval = make_node (nod_drop_log, (int) 0, NULL); }
break;
case 461:
{ yyval = yyvsp[0]; }
break;
case 462:
{ yyval = yyvsp[0]; }
break;
case 464:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 465:
{ yyval = make_node (nod_mod_trigger, (int) e_trg_count,
				yyvsp[-6], NULL, yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-1], yyvsp[0], NULL); }
break;
case 467:
{ yyval = NULL; }
break;
case 469:
{ yyval = NULL; }
break;
case 470:
{ yyval = yyvsp[0]; }
break;
case 471:
{ yyval = make_node (nod_del_exception, 1, yyvsp[0]); }
break;
case 472:
{ yyval = make_node (nod_del_index, (int) 1, yyvsp[0]); }
break;
case 473:
{ yyval = make_node (nod_del_procedure, (int) 1, yyvsp[0]); }
break;
case 474:
{ yyval = make_node (nod_del_relation, (int) 1, yyvsp[0]); }
break;
case 475:
{ yyval = make_node (nod_del_trigger, (int) 1, yyvsp[0]); }
break;
case 476:
{ yyval = make_node (nod_del_view, (int) 1, yyvsp[0]); }
break;
case 477:
{ yyval = make_node (nod_del_filter, (int) 1, yyvsp[0]); }
break;
case 478:
{ yyval = make_node (nod_del_domain, (int) 1, yyvsp[0]); }
break;
case 479:
{ yyval = make_node (nod_del_udf, (int) 1, yyvsp[0]); }
break;
case 480:
{ yyval = make_node (nod_del_shadow, (int) 1, yyvsp[0]); }
break;
case 481:
{ yyval = make_node (nod_del_role, (int) 1, yyvsp[0]); }
break;
case 482:
{ yyval = make_node (nod_del_generator, (int) 1, yyvsp[0]); }
break;
case 487:
{ g_field->fld_ranges = make_list (yyvsp[-1]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-3]; }
break;
case 488:
{ g_field->fld_ranges = make_list (yyvsp[-2]);
		      g_field->fld_dimensions = g_field->fld_ranges->nod_count / 2;
		      g_field->fld_element_dtype = g_field->fld_dtype;
		      yyval = yyvsp[-4]; }
break;
case 490:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 491:
{ if ((SLONG) yyvsp[0] < 1)
		     		yyval = make_node (nod_list, (int) 2, 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG), 
					MAKE_constant ((STR) 1, CONSTANT_SLONG)); 
		          else
		     		yyval = make_node (nod_list, (int) 2, 
			   		MAKE_constant ((STR) 1, CONSTANT_SLONG), 
					MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG) ); }
break;
case 492:
{ yyval = make_node (nod_list, (int) 2, 
			 	MAKE_constant ((STR) yyvsp[-2], CONSTANT_SLONG),
				MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG)); }
break;
case 498:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "BIGINT",
				    0);
			g_field->fld_dtype = dtype_int64; 
			g_field->fld_length = sizeof (SINT64); 
			}
break;
case 499:
{ 
			g_field->fld_dtype = dtype_long; 
			g_field->fld_length = sizeof (SLONG); 
			}
break;
case 500:
{ 
			g_field->fld_dtype = dtype_short; 
			g_field->fld_length = sizeof (SSHORT); 
			}
break;
case 501:
{ 
			*stmt_ambiguous = TRUE;
			if (client_dialect <= SQL_DIALECT_V5)
			    {
			    /* Post warning saying that DATE is equivalent to TIMESTAMP */
		            ERRD_post_warning (isc_sqlwarn, gds_arg_number, (SLONG) 301, 
                                               isc_arg_warning, isc_dtype_renamed, 0);
			    g_field->fld_dtype = dtype_timestamp; 
			    g_field->fld_length = sizeof (GDS_TIMESTAMP);
			    }
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
			    yyabandon (-104, isc_transitional_date);
			else
			    {
			    g_field->fld_dtype = dtype_sql_date; 
			    g_field->fld_length = sizeof (ULONG);
			    }
			}
break;
case 502:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			g_field->fld_dtype = dtype_sql_time; 
			g_field->fld_length = sizeof (SLONG);
			}
break;
case 503:
{ 
			g_field->fld_dtype = dtype_timestamp; 
			g_field->fld_length = sizeof (GDS_TIMESTAMP);
			}
break;
case 506:
{ 
			g_field->fld_dtype = dtype_blob; 
			}
break;
case 507:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-1];
			g_field->fld_sub_type = 0;
			}
break;
case 508:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = (USHORT) yyvsp[-3];
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 509:
{ 
			g_field->fld_dtype = dtype_blob; 
			g_field->fld_seg_length = 80;
			g_field->fld_sub_type = (USHORT) yyvsp[-1];
			}
break;
case 510:
{
			g_field->fld_seg_length = (USHORT) yyvsp[0];
		  	}
break;
case 511:
{
			g_field->fld_seg_length = (USHORT) 80;
		  	}
break;
case 512:
{
			g_field->fld_sub_type = (USHORT) yyvsp[0];
			}
break;
case 513:
{
			g_field->fld_sub_type_name = yyvsp[0];
			}
break;
case 514:
{
			g_field->fld_sub_type = (USHORT) 0;
			}
break;
case 515:
{
			g_field->fld_character_set = yyvsp[0];
			}
break;
case 517:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 518:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 519:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			g_field->fld_flags |= FLD_national;
			}
break;
case 520:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 521:
{ 
			g_field->fld_dtype = dtype_text; 
			g_field->fld_character_length = 1; 
			}
break;
case 522:
{ 
			g_field->fld_dtype = dtype_varying; 
			g_field->fld_character_length = (USHORT) yyvsp[-1]; 
			}
break;
case 531:
{ 
			  g_field->fld_sub_type = dsc_num_type_numeric;
			}
break;
case 532:
{  
			   g_field->fld_sub_type = dsc_num_type_decimal;
			   if (g_field->fld_dtype == dtype_short)
				{
				g_field->fld_dtype = dtype_long;
				g_field->fld_length = sizeof (SLONG);
				};
			}
break;
case 533:
{ yyval = make_node (nod_position, 1, yyvsp[0]); }
break;
case 534:
{
			g_field->fld_dtype = dtype_long; 
		    	g_field->fld_length = sizeof (SLONG); 
			g_field->fld_precision = 9;
		    	}
break;
case 535:
{         
			if ( ((SLONG) yyvsp[-1] < 1) || ((SLONG) yyvsp[-1] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision most be between 1 and 18. */ 
			if ((SLONG) yyvsp[-1] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double);
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				    {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );

				    }
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else 
			    if ((SLONG) yyvsp[-1] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			g_field->fld_precision = (USHORT) yyvsp[-1];
			}
break;
case 536:
{ 
			if ( ((SLONG) yyvsp[-3] < 1) || ((SLONG) yyvsp[-3] > 18) )
			    yyabandon (-842, isc_precision_err);
				/* Precision should be between 1 and 18 */ 
			if (((SLONG) yyvsp[-1] > (SLONG) yyvsp[-3]) || ((SLONG) yyvsp[-1] < 0))
			    yyabandon (-842, isc_scale_nogt);
				/* Scale must be between 0 and precision */
			if ((SLONG) yyvsp[-3] > 9)
			    {
			    if ( ( (client_dialect <= SQL_DIALECT_V5) &&
				   (db_dialect     >  SQL_DIALECT_V5) ) ||
				 ( (client_dialect >  SQL_DIALECT_V5) &&
				   (db_dialect     <= SQL_DIALECT_V5) ) )
			        ERRD_post (gds_sqlerr,
					   gds_arg_number, (SLONG) -817,
					   gds_arg_gds,
					   isc_ddl_not_allowed_by_db_sql_dial,
					   gds_arg_number, (SLONG) db_dialect,
					   0);
			    if (client_dialect <= SQL_DIALECT_V5)
			        {
				g_field->fld_dtype = dtype_double;
				g_field->fld_length = sizeof (double); 
			        }
			    else
			        {
				if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				  {
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous1,
					gds_arg_end );
				    ERRD_post_warning (
					isc_dsql_warn_precision_ambiguous2,
					gds_arg_end );
				  }
				  /* client_dialect >= SQL_DIALECT_V6 */
				g_field->fld_dtype = dtype_int64;
				g_field->fld_length = sizeof (SINT64);
			        }
			    }
			else
			    {
			    if ((SLONG) yyvsp[-3] < 5)
			    	{
			    	g_field->fld_dtype = dtype_short; 
			    	g_field->fld_length = sizeof (SSHORT); 
			    	}
			    else
			    	{
			    	g_field->fld_dtype = dtype_long; 
			    	g_field->fld_length = sizeof (SLONG); 
			    	}
			    }
			g_field->fld_precision = (USHORT) yyvsp[-3];
			g_field->fld_scale = - (SSHORT) yyvsp[-1];
			}
break;
case 539:
{ 
			if ((SLONG) yyvsp[0] > 7)
			    {
			    g_field->fld_dtype = dtype_double;
			    g_field->fld_length = sizeof (double); 
			    }
			else
			    {
			    g_field->fld_dtype = dtype_real; 
			    g_field->fld_length = sizeof (float);
			    }
			}
break;
case 540:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 541:
{ 
			g_field->fld_dtype = dtype_real; 
			g_field->fld_length = sizeof (float); 
			}
break;
case 542:
{ 
			g_field->fld_dtype = dtype_double; 
			g_field->fld_length = sizeof (double); 
			}
break;
case 543:
{ yyval = yyvsp[-1]; }
break;
case 544:
{ yyval = 0; }
break;
case 548:
{ 
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
						MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG));
			}
break;
case 549:
{
			  yyval = make_node (nod_set_generator2,e_gen_id_count,yyvsp[-2],
				       MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64));
			}
break;
case 550:
{
			  yyval = make_node (nod_set_generator2, e_gen_id_count, yyvsp[-3],
					  make_node(nod_negate, 1,
						    MAKE_constant((STR)yyvsp[0], CONSTANT_SINT64)));
			}
break;
case 551:
{ yyval = make_node (nod_commit, 1, yyvsp[0]); }
break;
case 552:
{ yyval = make_node (nod_rollback, 0, NULL); }
break;
case 555:
{ yyval = make_node (nod_commit_retain, 0, NULL); }
break;
case 556:
{ yyval = (NOD) NULL; }
break;
case 558:
{ yyval = (NOD) NULL; }
break;
case 559:
{yyval = make_node (nod_trans, 1, make_list (yyvsp[0])); }
break;
case 561:
{ yyval = (NOD) NULL; }
break;
case 563:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-1], yyvsp[0]); }
break;
case 568:
{ yyval = make_flag_node (nod_access, NOD_READ_ONLY, (int) 0, NULL); }
break;
case 569:
{ yyval = make_flag_node (nod_access, NOD_READ_WRITE, (int) 0, NULL); }
break;
case 570:
{ yyval = make_flag_node (nod_wait, NOD_WAIT, (int) 0, NULL); }
break;
case 571:
{ yyval = make_flag_node (nod_wait, NOD_NO_WAIT, (int) 0, NULL); }
break;
case 572:
{ yyval = yyvsp[0];}
break;
case 574:
{ yyval = yyvsp[0];}
break;
case 575:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 576:
{ yyval = make_flag_node (nod_isolation, NOD_READ_COMMITTED, 1, yyvsp[0]); }
break;
case 577:
{ yyval = make_flag_node (nod_isolation, NOD_CONCURRENCY, 0, NULL); }
break;
case 578:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 579:
{ yyval = make_flag_node (nod_isolation, NOD_CONSISTENCY, 0, NULL); }
break;
case 580:
{ yyval = make_flag_node (nod_version, NOD_VERSION, 0, NULL); }
break;
case 581:
{ yyval = make_flag_node (nod_version, NOD_NO_VERSION, 0, NULL); }
break;
case 582:
{ yyval = 0; }
break;
case 583:
{ yyval = make_node (nod_reserve, 1, make_list (yyvsp[0])); }
break;
case 584:
{ yyval = (NOD) NOD_SHARED; }
break;
case 585:
{ yyval = (NOD) NOD_PROTECTED ; }
break;
case 586:
{ yyval = (NOD) 0; }
break;
case 587:
{ yyval = (NOD) NOD_READ; }
break;
case 588:
{ yyval = (NOD) NOD_WRITE; }
break;
case 590:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 591:
{ yyval = make_node (nod_table_lock, (int) 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 592:
{ yyval = make_flag_node (nod_lock_mode, (SSHORT) ((SSHORT) yyvsp[-1] | (SSHORT) yyvsp[0]), (SSHORT) 0, NULL); }
break;
case 593:
{ yyval = 0; }
break;
case 595:
{ yyval = make_node (nod_list, (int) 2, yyvsp[-2], yyvsp[0]); }
break;
case 596:
{yyval = make_node (nod_set_statistics, 
				(int)e_stat_count, yyvsp[0]); }
break;
case 597:
{ yyval = make_node (nod_select, 3, yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 598:
{ yyval = make_node (nod_list, 1, yyvsp[0]); }
break;
case 599:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 600:
{ yyval = make_flag_node (nod_list, NOD_UNION_ALL, 2, yyvsp[-3], yyvsp[0]); }
break;
case 601:
{ yyval = make_list (yyvsp[0]); }
break;
case 602:
{ yyval = 0; }
break;
case 604:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 605:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 606:
{ yyval = make_node (nod_order, e_order_count, yyvsp[-3], yyvsp[-1], yyvsp[-2], yyvsp[0]); }
break;
case 607:
{ yyval = 0; }
break;
case 608:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 609:
{ yyval = 0; }
break;
case 610:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 611:
{ yyval = 0; }
break;
case 612:
{ yyval = 0; }
break;
case 613:
{ yyval = yyvsp[0]; }
break;
case 614:
{ yyval = 0; }
break;
case 615:
{ yyval = yyvsp[0]; }
break;
case 616:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 617:
{ yyval = make_node (nod_select_expr, e_sel_count, 
					yyvsp[-7], yyvsp[-6], yyvsp[-5], yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 618:
{ yyval = make_node (nod_flag, 0, NULL); }
break;
case 619:
{ yyval = 0; }
break;
case 620:
{ yyval = make_list (yyvsp[0]); }
break;
case 621:
{ yyval = 0; }
break;
case 623:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 625:
{ yyval = make_node (nod_alias, 2, yyvsp[-1], yyvsp[0]); }
break;
case 626:
{ yyval = make_node (nod_alias, 2, yyvsp[-2], yyvsp[0]); }
break;
case 627:
{ yyval = make_list (yyvsp[0]); }
break;
case 629:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 632:
{ yyval = make_node (nod_join, (int) e_join_count, yyvsp[-5], yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 633:
{ yyval = yyvsp[-1]; }
break;
case 634:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-2], yyvsp[0], yyvsp[-1]); }
break;
case 635:
{ yyval = make_node (nod_rel_proc_name, 
					(int) e_rpn_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 636:
{ yyval = make_list (yyvsp[-1]); }
break;
case 637:
{ yyval = NULL; }
break;
case 639:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 643:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[-1], yyvsp[0]); }
break;
case 644:
{ yyval = make_node (nod_relation_name, 
						(int) e_rln_count, yyvsp[0], NULL); }
break;
case 645:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 646:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 647:
{ yyval = make_node (nod_join_left, (int) 0, NULL); }
break;
case 648:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 649:
{ yyval = make_node (nod_join_right, (int) 0, NULL); }
break;
case 650:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 651:
{ yyval = make_node (nod_join_full, (int) 0, NULL); }
break;
case 652:
{ yyval = make_node (nod_join_inner, (int) 0, NULL); }
break;
case 653:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 654:
{ yyval = yyvsp[-1]; }
break;
case 655:
{ yyval = yyvsp[0]; }
break;
case 656:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 657:
{ yyval = yyvsp[-1]; }
break;
case 658:
{ yyval = yyvsp[0]; }
break;
case 659:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], yyvsp[-1]); }
break;
case 660:
{ yyval = make_node (nod_limit, e_limit_count, NULL, yyvsp[0]); }
break;
case 661:
{ yyval = make_node (nod_limit, e_limit_count, yyvsp[0], NULL); }
break;
case 662:
{ yyval = 0; }
break;
case 663:
{ yyval = make_list (yyvsp[0]); }
break;
case 664:
{ yyval = 0; }
break;
case 666:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 671:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 675:
{ yyval = yyvsp[0]; }
break;
case 676:
{ yyval = 0; }
break;
case 677:
{ yyval = yyvsp[0]; }
break;
case 678:
{ yyval = 0; }
break;
case 679:
{ yyval = make_node (nod_top, 1, yyvsp[-2]);}
break;
case 680:
{ yyval = make_node (nod_top, 2, yyvsp[-4], yyvsp[-3]);}
break;
case 681:
{ yyval = 0;}
break;
case 682:
{ yyval = yyvsp[0]; }
break;
case 683:
{ yyval = 0; }
break;
case 684:
{ yyval = make_node (nod_plan_expr, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 685:
{ yyval = 0; }
break;
case 686:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 687:
{ yyval = make_node (nod_merge, (int) 0, NULL); }
break;
case 688:
{ yyval = 0; }
break;
case 689:
{ yyval = 0; }
break;
case 691:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 692:
{ yyval = make_node (nod_plan_item, 2, make_list (yyvsp[-1]), yyvsp[0]); }
break;
case 695:
{ yyval = make_node (nod_list, 2, yyvsp[-1], yyvsp[0]); }
break;
case 696:
{ yyval = make_node (nod_natural, (int) 0, NULL); }
break;
case 697:
{ yyval = make_node (nod_index, 1, make_list (yyvsp[-1])); }
break;
case 698:
{ yyval = make_node (nod_index_order, 1, yyvsp[0]); }
break;
case 700:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 701:
{ yyval = make_node (nod_insert, e_ins_count, 
			  yyvsp[-5], make_list (yyvsp[-4]), make_list (yyvsp[-1]), NULL); }
break;
case 702:
{ yyval = make_node (nod_insert, e_ins_count, yyvsp[-2], yyvsp[-1], NULL, yyvsp[0]); }
break;
case 704:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 707:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], yyvsp[0], NULL); }
break;
case 708:
{ yyval = make_node (nod_delete, e_del_count, yyvsp[-1], NULL, yyvsp[0]); }
break;
case 709:
{ yyval = make_node (nod_cursor, e_cur_count, yyvsp[0], NULL, NULL); }
break;
case 712:
{ yyval = make_node (nod_update, e_upd_count, 
				yyvsp[-3], make_list (yyvsp[-1]), yyvsp[0], NULL); }
break;
case 713:
{ yyval = make_node (nod_update, e_upd_count,
			  	yyvsp[-3], make_list (yyvsp[-1]), NULL, yyvsp[0]); }
break;
case 715:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 716:
{ yyval = make_node (nod_assign, 2, yyvsp[0], yyvsp[-2]); }
break;
case 719:
{ yyval = make_node (nod_get_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 720:
{ yyval = make_node (nod_put_segment, e_blb_count, yyvsp[-4], yyvsp[-2], yyvsp[-1], yyvsp[0]); }
break;
case 721:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 722:
{ yyval = make_node (nod_list, 2, NULL, yyvsp[0]); }
break;
case 726:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 727:
{ yyval = yyvsp[0]; }
break;
case 729:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 732:
{ yyval = NULL; }
break;
case 733:
{ yyval = make_list (yyvsp[-1]); }
break;
case 735:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 737:
{ yyval = NULL; }
break;
case 738:
{ yyval = make_list (yyvsp[-1]); }
break;
case 740:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 742:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 743:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], NULL); }
break;
case 744:
{ yyval = make_node (nod_field_name, (int) e_fln_count,
						NULL, yyvsp[0]); }
break;
case 746:
{ yyval = make_node (nod_field_name, (int) e_fln_count, 
							yyvsp[-2], yyvsp[0]); }
break;
case 748:
{ yyval = make_node (nod_or, 2, yyvsp[-2], yyvsp[0]); }
break;
case 749:
{ yyval = make_node (nod_and, 2, yyvsp[-2], yyvsp[0]); }
break;
case 750:
{ yyval = make_node (nod_not, 1, yyvsp[0]); }
break;
case 761:
{ yyval = yyvsp[-1]; }
break;
case 762:
{ yyval = make_node (nod_eql, 2, yyvsp[-2], yyvsp[0]); }
break;
case 763:
{ yyval = make_node (nod_lss, 2, yyvsp[-2], yyvsp[0]); }
break;
case 764:
{ yyval = make_node (nod_gtr, 2, yyvsp[-2], yyvsp[0]); }
break;
case 765:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 766:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 767:
{ yyval = make_node (nod_leq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 768:
{ yyval = make_node (nod_geq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 769:
{ yyval = make_node (nod_neq, 2, yyvsp[-2], yyvsp[0]); }
break;
case 770:
{ yyval = make_node (nod_eql_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 771:
{ yyval = make_node (nod_lss_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 772:
{ yyval = make_node (nod_gtr_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 773:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 774:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 775:
{ yyval = make_node (nod_leq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 776:
{ yyval = make_node (nod_geq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 777:
{ yyval = make_node (nod_neq_all, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 778:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 779:
{ yyval = make_node (nod_lss_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 780:
{ yyval = make_node (nod_gtr_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 781:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 782:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 783:
{ yyval = make_node (nod_leq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 784:
{ yyval = make_node (nod_geq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 785:
{ yyval = make_node (nod_neq_any, 2, yyvsp[-5], yyvsp[-1]); }
break;
case 788:
{ yyval = make_node (nod_between, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 789:
{ yyval = make_node (nod_not, 1, make_node (nod_between, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 790:
{ yyval = make_node (nod_like, 2, yyvsp[-2], yyvsp[0]); }
break;
case 791:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 2, yyvsp[-3], yyvsp[0])); }
break;
case 792:
{ yyval = make_node (nod_like, 3, yyvsp[-4], yyvsp[-2], yyvsp[0]); }
break;
case 793:
{ yyval = make_node (nod_not, 1, make_node (nod_like, 
						3, yyvsp[-5], yyvsp[-2], yyvsp[0])); }
break;
case 794:
{ yyval = make_node (nod_eql_any, 2, yyvsp[-2], yyvsp[0]); }
break;
case 795:
{ yyval = make_node (nod_not, 1, make_node (nod_eql_any, 2, yyvsp[-3], yyvsp[0])); }
break;
case 796:
{ yyval = make_node (nod_containing, 2, yyvsp[-2], yyvsp[0]); }
break;
case 797:
{ yyval = make_node (nod_not, 1, make_node (nod_containing, 2, yyvsp[-3], yyvsp[0])); }
break;
case 798:
{ yyval = make_node (nod_starting, 2, yyvsp[-2], yyvsp[0]); }
break;
case 799:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-3], yyvsp[0])); }
break;
case 800:
{ yyval = make_node (nod_starting, 2, yyvsp[-3], yyvsp[0]); }
break;
case 801:
{ yyval = make_node (nod_not, 1, make_node (nod_starting, 2, yyvsp[-4], yyvsp[0])); }
break;
case 802:
{ yyval = make_node (nod_exists, 1, yyvsp[-1]); }
break;
case 803:
{ yyval = make_node (nod_singular, 1, yyvsp[-1]); }
break;
case 804:
{ yyval = make_node (nod_missing, 1, yyvsp[-2]); }
break;
case 805:
{ yyval = make_node (nod_not, 1, make_node (nod_missing, 1, yyvsp[-3])); }
break;
case 807:
{ yyval = make_list (yyvsp[-1]); }
break;
case 808:
{ yyval = yyvsp[-1]; }
break;
case 809:
{ yyval = make_node (nod_select_expr, e_sel_count, 
				yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], NULL); }
break;
case 810:
{ yyval = make_node (nod_select_expr, e_sel_count, 
                              yyvsp[-7], yyvsp[-6], make_list (yyvsp[-5]), yyvsp[-4], yyvsp[-3], yyvsp[-2], yyvsp[-1], yyvsp[0], 
				MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 820:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 821:
{ yyval = yyvsp[0]; }
break;
case 822:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_add2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_add, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 823:
{ yyval = make_node (nod_concatenate, 2, yyvsp[-2], yyvsp[0]); }
break;
case 824:
{ yyval = make_node (nod_collate, e_coll_count, (NOD) yyvsp[0], yyvsp[-2]); }
break;
case 825:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_subtract2, 2, yyvsp[-2], yyvsp[0]);
			  else 
			      yyval = make_node (nod_subtract, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 826:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			       yyval = make_node (nod_multiply2, 2, yyvsp[-2], yyvsp[0]);
			  else
			       yyval = make_node (nod_multiply, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 827:
{
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_divide2, 2, yyvsp[-2], yyvsp[0]);
			  else
			      yyval = make_node (nod_divide, 2, yyvsp[-2], yyvsp[0]);
			}
break;
case 828:
{ yyval = yyvsp[-1]; }
break;
case 829:
{ yyval = yyvsp[-1]; }
break;
case 832:
{ yyval = yyvsp[0]; }
break;
case 833:
{ yyval = make_node (nod_dbkey, 1, NULL); }
break;
case 834:
{ yyval = make_node (nod_dbkey, 1, yyvsp[-2]); }
break;
case 835:
{ 
			  yyval = make_node (nod_dom_value, 0, NULL);
                        }
break;
case 836:
{ yyval = yyvsp[0]; }
break;
case 837:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = make_node (nod_current_date, 0, NULL);
			}
break;
case 838:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = make_node (nod_current_time, 0, NULL);
			}
break;
case 839:
{ yyval = make_node (nod_current_timestamp, 0, NULL); }
break;
case 840:
{ yyval = make_node (nod_array, 2, yyvsp[-3], make_list (yyvsp[-1])); }
break;
case 842:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 844:
{ yyval = make_node (nod_negate, 1, yyvsp[0]); }
break;
case 845:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_STRING); }
break;
case 846:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SLONG); }
break;
case 847:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DOUBLE); }
break;
case 848:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 849:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_SINT64); }
break;
case 851:
{ yyval = MAKE_str_constant ((STR) yyvsp[0], att_charset); }
break;
case 852:
{ 
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "DATE",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "DATE",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_DATE);
			}
break;
case 853:
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_dialect_datatype_unsupport,
				    gds_arg_number, client_dialect,
				    gds_arg_string, "TIME",
				    0);
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			    ERRD_post (gds_sqlerr, gds_arg_number, (SLONG) -104, 
				    gds_arg_gds, isc_sql_db_dialect_dtype_unsupport,
				    gds_arg_number, db_dialect,
				    gds_arg_string, "TIME",
				    0);
			yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIME); 
			}
break;
case 854:
{ yyval = MAKE_constant ((STR) yyvsp[0], CONSTANT_TIMESTAMP); }
break;
case 860:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 861:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 862:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 863:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 864:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 865:
{ yyval = make_node (nod_parameter, 0, NULL); }
break;
case 866:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 867:
{ yyval = make_node (nod_user_name, 0, NULL); }
break;
case 868:
{ yyval = make_node (nod_current_role, 0, NULL); }
break;
case 869:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 1, CONSTANT_SLONG)); }
break;
case 870:
{ yyval = make_node (nod_internal_info, e_internal_info_count,
						MAKE_constant ((STR) 2, CONSTANT_SLONG)); }
break;
case 871:
{ yyval = yyvsp[0]; }
break;
case 872:
{ ((STR) yyvsp[0])->str_charset = (TEXT *) yyvsp[-1];
			  yyval = yyvsp[0]; }
break;
case 874:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 875:
{ if ((SLONG) yyvsp[0] > SHRT_POS_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 876:
{ if ((SLONG) yyvsp[0] > SHRT_NEG_MAX)
			    yyabandon (-842, isc_expec_short);
				/* Short integer expected */
			  yyval = yyvsp[0];}
break;
case 877:
{ if ((SLONG) yyvsp[0] == 0)
			    yyabandon (-842, isc_expec_positive);
				/* Positive number expected */
			  yyval = yyvsp[0];}
break;
case 878:
{ if ((SLONG) yyvsp[0] > SHRT_UNSIGNED_MAX)
			    yyabandon (-842, isc_expec_ushort);
				/* Unsigned short integer expected */
			  yyval = yyvsp[0];}
break;
case 880:
{ yyval = (NOD) - (SLONG) yyvsp[0]; }
break;
case 881:
{ yyval = yyvsp[0];}
break;
case 886:
{ yyval = make_node (nod_agg_count, 0, NULL); }
break;
case 887:
{ yyval = make_node (nod_agg_count, 1, yyvsp[-1]); }
break;
case 888:
{ yyval = make_flag_node (nod_agg_count,
                                       NOD_AGG_DISTINCT, 1, yyvsp[-1]); }
break;
case 889:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_total2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_total, 1, yyvsp[-1]);
			}
break;
case 890:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_total2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_total,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 891:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_node (nod_agg_average2, 1, yyvsp[-1]);
			  else
			      yyval = make_node (nod_agg_average, 1, yyvsp[-1]);
			}
break;
case 892:
{ 
			  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
			      yyval = make_flag_node (nod_agg_average2,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			  else
			      yyval = make_flag_node (nod_agg_average,
						   NOD_AGG_DISTINCT, 1, yyvsp[-1]);
			}
break;
case 893:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 894:
{ yyval = make_node (nod_agg_min, 1, yyvsp[-1]); }
break;
case 895:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 896:
{ yyval = make_node (nod_agg_max, 1, yyvsp[-1]); }
break;
case 897:
{ 
				  if (client_dialect >= SQL_DIALECT_V6_TRANSITION)
				      yyval = make_node (nod_gen_id2, 2, yyvsp[-3], yyvsp[-1]);
				  else
					  yyval = make_node (nod_gen_id, 2, yyvsp[-3], yyvsp[-1]);
				}
break;
case 898:
{ yyval = make_node (nod_extract, e_extract_count, yyvsp[-3], yyvsp[-1]); }
break;
case 899:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-3],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-1]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) SHRT_POS_MAX, CONSTANT_SLONG)); }
break;
case 900:
{ yyval = make_node (nod_substr, e_substr_count, yyvsp[-5],
					MAKE_constant ((STR) ((SLONG)(yyvsp[-3]) - 1), CONSTANT_SLONG),
					MAKE_constant ((STR) (yyvsp[-1]), CONSTANT_SLONG)); }
break;
case 901:
{ yyval = make_node (nod_upcase, 1, yyvsp[-1]); }
break;
case 902:
{ yyval = make_node (nod_udf, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 903:
{ yyval = make_node (nod_udf, 1, yyvsp[-2]); }
break;
case 904:
{ yyval = make_node (nod_cast, e_cast_count, yyvsp[-1], yyvsp[-3]); }
break;
case 907:
{ yyval = make_node (nod_searched_case, 2, 
				make_node (nod_list, 2, make_node (nod_eql, 2, yyvsp[-3], yyvsp[-1]), 
				make_node (nod_null, 0, NULL)), yyvsp[-3]); }
break;
case 908:
{ yyval = make_node (nod_coalesce, 2, yyvsp[-3], yyvsp[-1]); }
break;
case 911:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-2], make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 912:
{ yyval = make_node (nod_simple_case, 3, yyvsp[-4], make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 913:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 914:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 915:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-1]), make_node (nod_null, 0, NULL)); }
break;
case 916:
{ yyval = make_node (nod_searched_case, 2, make_list(yyvsp[-3]), yyvsp[-1]); }
break;
case 917:
{ yyval = make_node (nod_list, 2, yyvsp[-2], yyvsp[0]); }
break;
case 918:
{ yyval = make_node (nod_list, 2, yyvsp[-4], make_node (nod_list, 2, yyvsp[-2], yyvsp[0])); }
break;
case 922:
{ yyval = MAKE_constant ((STR)blr_extract_year, CONSTANT_SLONG); }
break;
case 923:
{ yyval = MAKE_constant ((STR)blr_extract_month, CONSTANT_SLONG); }
break;
case 924:
{ yyval = MAKE_constant ((STR)blr_extract_day, CONSTANT_SLONG); }
break;
case 925:
{ yyval = MAKE_constant ((STR)blr_extract_hour, CONSTANT_SLONG); }
break;
case 926:
{ yyval = MAKE_constant ((STR)blr_extract_minute, CONSTANT_SLONG); }
break;
case 927:
{ yyval = MAKE_constant ((STR)blr_extract_second, CONSTANT_SLONG); }
break;
case 928:
{ yyval = MAKE_constant ((STR)blr_extract_weekday, CONSTANT_SLONG); }
break;
case 929:
{ yyval = MAKE_constant ((STR)blr_extract_yearday, CONSTANT_SLONG); }
break;
case 932:
{ yyval = make_node (nod_null, 0, NULL); }
break;
    }
    DSQL_DSQL_yyssp -= yym;
    yystate = *DSQL_DSQL_yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++DSQL_DSQL_yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (DSQL_yychar < 0)
        {
            if ((DSQL_yychar = yylex(client_dialect, db_dialect, parser_version, stmt_ambiguous)) < 0) DSQL_yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (DSQL_yychar <= YYMAXTOKEN) yys = yyname[DSQL_yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, DSQL_yychar, yys);
            }
#endif
        }
        if (DSQL_yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *DSQL_DSQL_yyssp, yystate);
#endif
    if (DSQL_DSQL_yyssp >= DSQL_yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++DSQL_DSQL_yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
